
nucleo_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002cfa4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c5c  0802d248  0802d248  0003d248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802dea4  0802dea4  00040210  2**0
                  CONTENTS
  4 .ARM          00000008  0802dea4  0802dea4  0003dea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802deac  0802deac  00040210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802deac  0802deac  0003deac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802deb0  0802deb0  0003deb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  24000000  0802deb4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001e420  24000210  0802e0c4  00040210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2401e630  0802e0c4  0004e630  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e20a  00000000  00000000  0004023e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000059ea  00000000  00000000  0006e448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002270  00000000  00000000  00073e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002080  00000000  00000000  000760a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000413de  00000000  00000000  00078128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002af56  00000000  00000000  000b9506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019fcb9  00000000  00000000  000e445c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00284115  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a1b4  00000000  00000000  00284168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000210 	.word	0x24000210
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802d22c 	.word	0x0802d22c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000214 	.word	0x24000214
 80002dc:	0802d22c 	.word	0x0802d22c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007ea:	f000 f96d 	bl	8000ac8 <MPU_Config>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007f2:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007f4:	bf00      	nop
 80007f6:	4b2c      	ldr	r3, [pc, #176]	; (80008a8 <main+0xc4>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d004      	beq.n	800080c <main+0x28>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	1e5a      	subs	r2, r3, #1
 8000806:	607a      	str	r2, [r7, #4]
 8000808:	2b00      	cmp	r3, #0
 800080a:	dcf4      	bgt.n	80007f6 <main+0x12>
  if ( timeout < 0 )
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	da01      	bge.n	8000816 <main+0x32>
  {
  Error_Handler();
 8000812:	f000 f997 	bl	8000b44 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000816:	f000 fbcb 	bl	8000fb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081a:	f000 f853 	bl	80008c4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800081e:	4b22      	ldr	r3, [pc, #136]	; (80008a8 <main+0xc4>)
 8000820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000824:	4a20      	ldr	r2, [pc, #128]	; (80008a8 <main+0xc4>)
 8000826:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800082a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800082e:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <main+0xc4>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800083c:	2000      	movs	r0, #0
 800083e:	f000 ff4f 	bl	80016e0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000842:	2100      	movs	r1, #0
 8000844:	2000      	movs	r0, #0
 8000846:	f000 ff65 	bl	8001714 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800084a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800084e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000850:	bf00      	nop
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <main+0xc4>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800085a:	2b00      	cmp	r3, #0
 800085c:	d104      	bne.n	8000868 <main+0x84>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	1e5a      	subs	r2, r3, #1
 8000862:	607a      	str	r2, [r7, #4]
 8000864:	2b00      	cmp	r3, #0
 8000866:	dcf4      	bgt.n	8000852 <main+0x6e>
if ( timeout < 0 )
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	da01      	bge.n	8000872 <main+0x8e>
{
Error_Handler();
 800086e:	f000 f969 	bl	8000b44 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000872:	f000 f907 	bl	8000a84 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000876:	f000 f8b9 	bl	80009ec <MX_USART3_UART_Init>
  MX_RTC_Init();
 800087a:	f000 f88f 	bl	800099c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800087e:	f005 f84f 	bl	8005920 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000882:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <main+0xc8>)
 8000884:	2100      	movs	r1, #0
 8000886:	480a      	ldr	r0, [pc, #40]	; (80008b0 <main+0xcc>)
 8000888:	f005 f894 	bl	80059b4 <osThreadNew>
 800088c:	4603      	mov	r3, r0
 800088e:	4a09      	ldr	r2, [pc, #36]	; (80008b4 <main+0xd0>)
 8000890:	6013      	str	r3, [r2, #0]

  /* creation of wolfCrypt */
  wolfCryptHandle = osThreadNew(wolfCryptDemo, NULL, &wolfCrypt_attributes);
 8000892:	4a09      	ldr	r2, [pc, #36]	; (80008b8 <main+0xd4>)
 8000894:	2100      	movs	r1, #0
 8000896:	4809      	ldr	r0, [pc, #36]	; (80008bc <main+0xd8>)
 8000898:	f005 f88c 	bl	80059b4 <osThreadNew>
 800089c:	4603      	mov	r3, r0
 800089e:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <main+0xdc>)
 80008a0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008a2:	f005 f861 	bl	8005968 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <main+0xc2>
 80008a8:	58024400 	.word	0x58024400
 80008ac:	0802d5b8 	.word	0x0802d5b8
 80008b0:	08000ab9 	.word	0x08000ab9
 80008b4:	240002e0 	.word	0x240002e0
 80008b8:	0802d5dc 	.word	0x0802d5dc
 80008bc:	08029d2d 	.word	0x08029d2d
 80008c0:	240002e4 	.word	0x240002e4

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b09c      	sub	sp, #112	; 0x70
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ce:	224c      	movs	r2, #76	; 0x4c
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f029 fe20 	bl	802a518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2220      	movs	r2, #32
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f029 fe1a 	bl	802a518 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008e4:	2004      	movs	r0, #4
 80008e6:	f000 ff29 	bl	800173c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008ea:	2300      	movs	r3, #0
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	4b29      	ldr	r3, [pc, #164]	; (8000994 <SystemClock_Config+0xd0>)
 80008f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008f2:	4a28      	ldr	r2, [pc, #160]	; (8000994 <SystemClock_Config+0xd0>)
 80008f4:	f023 0301 	bic.w	r3, r3, #1
 80008f8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008fa:	4b26      	ldr	r3, [pc, #152]	; (8000994 <SystemClock_Config+0xd0>)
 80008fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	4b24      	ldr	r3, [pc, #144]	; (8000998 <SystemClock_Config+0xd4>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800090c:	4a22      	ldr	r2, [pc, #136]	; (8000998 <SystemClock_Config+0xd4>)
 800090e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000912:	6193      	str	r3, [r2, #24]
 8000914:	4b20      	ldr	r3, [pc, #128]	; (8000998 <SystemClock_Config+0xd4>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000920:	bf00      	nop
 8000922:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <SystemClock_Config+0xd4>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800092a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800092e:	d1f8      	bne.n	8000922 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000930:	230a      	movs	r3, #10
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000934:	2301      	movs	r3, #1
 8000936:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000938:	2340      	movs	r3, #64	; 0x40
 800093a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800093c:	2301      	movs	r3, #1
 800093e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000940:	2300      	movs	r3, #0
 8000942:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000948:	4618      	mov	r0, r3
 800094a:	f000 ff51 	bl	80017f0 <HAL_RCC_OscConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000954:	f000 f8f6 	bl	8000b44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000958:	233f      	movs	r3, #63	; 0x3f
 800095a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800096c:	2340      	movs	r3, #64	; 0x40
 800096e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2101      	movs	r1, #1
 800097c:	4618      	mov	r0, r3
 800097e:	f001 fb65 	bl	800204c <HAL_RCC_ClockConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000988:	f000 f8dc 	bl	8000b44 <Error_Handler>
  }
}
 800098c:	bf00      	nop
 800098e:	3770      	adds	r7, #112	; 0x70
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	58000400 	.word	0x58000400
 8000998:	58024800 	.word	0x58024800

0800099c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009a0:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <MX_RTC_Init+0x48>)
 80009a2:	4a11      	ldr	r2, [pc, #68]	; (80009e8 <MX_RTC_Init+0x4c>)
 80009a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_RTC_Init+0x48>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009ac:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <MX_RTC_Init+0x48>)
 80009ae:	227f      	movs	r2, #127	; 0x7f
 80009b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_RTC_Init+0x48>)
 80009b4:	22ff      	movs	r2, #255	; 0xff
 80009b6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <MX_RTC_Init+0x48>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_RTC_Init+0x48>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <MX_RTC_Init+0x48>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_RTC_Init+0x48>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009d0:	4804      	ldr	r0, [pc, #16]	; (80009e4 <MX_RTC_Init+0x48>)
 80009d2:	f003 fa71 	bl	8003eb8 <HAL_RTC_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80009dc:	f000 f8b2 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	2400022c 	.word	0x2400022c
 80009e8:	58004000 	.word	0x58004000

080009ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009f0:	4b22      	ldr	r3, [pc, #136]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 80009f2:	4a23      	ldr	r2, [pc, #140]	; (8000a80 <MX_USART3_UART_Init+0x94>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009f6:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 80009f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a22:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a2e:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a34:	4811      	ldr	r0, [pc, #68]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a36:	f003 fe29 	bl	800468c <HAL_UART_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a40:	f000 f880 	bl	8000b44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a44:	2100      	movs	r1, #0
 8000a46:	480d      	ldr	r0, [pc, #52]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a48:	f004 fe5c 	bl	8005704 <HAL_UARTEx_SetTxFifoThreshold>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a52:	f000 f877 	bl	8000b44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a56:	2100      	movs	r1, #0
 8000a58:	4808      	ldr	r0, [pc, #32]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a5a:	f004 fe91 	bl	8005780 <HAL_UARTEx_SetRxFifoThreshold>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a64:	f000 f86e 	bl	8000b44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a68:	4804      	ldr	r0, [pc, #16]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a6a:	f004 fe12 	bl	8005692 <HAL_UARTEx_DisableFifoMode>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a74:	f000 f866 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	24000250 	.word	0x24000250
 8000a80:	40004800 	.word	0x40004800

08000a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <MX_GPIO_Init+0x30>)
 8000a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a90:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <MX_GPIO_Init+0x30>)
 8000a92:	f043 0302 	orr.w	r3, r3, #2
 8000a96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_GPIO_Init+0x30>)
 8000a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa0:	f003 0302 	and.w	r3, r3, #2
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	687b      	ldr	r3, [r7, #4]

}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	58024400 	.word	0x58024400

08000ab8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f005 f809 	bl	8005ad8 <osDelay>
 8000ac6:	e7fb      	b.n	8000ac0 <StartDefaultTask+0x8>

08000ac8 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ace:	463b      	mov	r3, r7
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000ada:	f000 fbd5 	bl	8001288 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000aea:	231f      	movs	r3, #31
 8000aec:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000aee:	2387      	movs	r3, #135	; 0x87
 8000af0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000af6:	2300      	movs	r3, #0
 8000af8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000afa:	2301      	movs	r3, #1
 8000afc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000afe:	2301      	movs	r3, #1
 8000b00:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b02:	2300      	movs	r3, #0
 8000b04:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f000 fbf3 	bl	80012f8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b12:	2004      	movs	r0, #4
 8000b14:	f000 fbd0 	bl	80012b8 <HAL_MPU_Enable>

}
 8000b18:	bf00      	nop
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d101      	bne.n	8000b36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b32:	f000 fa79 	bl	8001028 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40010000 	.word	0x40010000

08000b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b48:	b672      	cpsid	i
}
 8000b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <Error_Handler+0x8>
	...

08000b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <HAL_MspInit+0x38>)
 8000b58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b5c:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <HAL_MspInit+0x38>)
 8000b5e:	f043 0302 	orr.w	r3, r3, #2
 8000b62:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <HAL_MspInit+0x38>)
 8000b68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b6c:	f003 0302 	and.w	r3, r3, #2
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	210f      	movs	r1, #15
 8000b78:	f06f 0001 	mvn.w	r0, #1
 8000b7c:	f000 fb5c 	bl	8001238 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	58024400 	.word	0x58024400

08000b8c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b0b2      	sub	sp, #200	; 0xc8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	22bc      	movs	r2, #188	; 0xbc
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f029 fcbb 	bl	802a518 <memset>
  if(hrtc->Instance==RTC)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a0f      	ldr	r2, [pc, #60]	; (8000be4 <HAL_RTC_MspInit+0x58>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d116      	bne.n	8000bda <HAL_RTC_MspInit+0x4e>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000bac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bb0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000bb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bba:	f107 030c 	add.w	r3, r7, #12
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f001 fe12 	bl	80027e8 <HAL_RCCEx_PeriphCLKConfig>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000bca:	f7ff ffbb 	bl	8000b44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_RTC_MspInit+0x5c>)
 8000bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000bd2:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <HAL_RTC_MspInit+0x5c>)
 8000bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bd8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000bda:	bf00      	nop
 8000bdc:	37c8      	adds	r7, #200	; 0xc8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	58004000 	.word	0x58004000
 8000be8:	58024400 	.word	0x58024400

08000bec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b0b8      	sub	sp, #224	; 0xe0
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c04:	f107 0310 	add.w	r3, r7, #16
 8000c08:	22bc      	movs	r2, #188	; 0xbc
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f029 fc83 	bl	802a518 <memset>
  if(huart->Instance==USART3)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a25      	ldr	r2, [pc, #148]	; (8000cac <HAL_UART_MspInit+0xc0>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d142      	bne.n	8000ca2 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c20:	2300      	movs	r3, #0
 8000c22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c26:	f107 0310 	add.w	r3, r7, #16
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f001 fddc 	bl	80027e8 <HAL_RCCEx_PeriphCLKConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c36:	f7ff ff85 	bl	8000b44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c3a:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <HAL_UART_MspInit+0xc4>)
 8000c3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c40:	4a1b      	ldr	r2, [pc, #108]	; (8000cb0 <HAL_UART_MspInit+0xc4>)
 8000c42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c46:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c4a:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <HAL_UART_MspInit+0xc4>)
 8000c4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c58:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <HAL_UART_MspInit+0xc4>)
 8000c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5e:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <HAL_UART_MspInit+0xc4>)
 8000c60:	f043 0302 	orr.w	r3, r3, #2
 8000c64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <HAL_UART_MspInit+0xc4>)
 8000c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c76:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c90:	2307      	movs	r3, #7
 8000c92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c96:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <HAL_UART_MspInit+0xc8>)
 8000c9e:	f000 fb6f 	bl	8001380 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ca2:	bf00      	nop
 8000ca4:	37e0      	adds	r7, #224	; 0xe0
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40004800 	.word	0x40004800
 8000cb0:	58024400 	.word	0x58024400
 8000cb4:	58020400 	.word	0x58020400

08000cb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08e      	sub	sp, #56	; 0x38
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2b0f      	cmp	r3, #15
 8000cc4:	d842      	bhi.n	8000d4c <HAL_InitTick+0x94>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	6879      	ldr	r1, [r7, #4]
 8000cca:	2019      	movs	r0, #25
 8000ccc:	f000 fab4 	bl	8001238 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000cd0:	2019      	movs	r0, #25
 8000cd2:	f000 facb 	bl	800126c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000cd6:	4a23      	ldr	r2, [pc, #140]	; (8000d64 <HAL_InitTick+0xac>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000cdc:	4b22      	ldr	r3, [pc, #136]	; (8000d68 <HAL_InitTick+0xb0>)
 8000cde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ce2:	4a21      	ldr	r2, [pc, #132]	; (8000d68 <HAL_InitTick+0xb0>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000cec:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <HAL_InitTick+0xb0>)
 8000cee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cfa:	f107 020c 	add.w	r2, r7, #12
 8000cfe:	f107 0310 	add.w	r3, r7, #16
 8000d02:	4611      	mov	r1, r2
 8000d04:	4618      	mov	r0, r3
 8000d06:	f001 fd2d 	bl	8002764 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d0a:	f001 fd15 	bl	8002738 <HAL_RCC_GetPCLK2Freq>
 8000d0e:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d12:	4a16      	ldr	r2, [pc, #88]	; (8000d6c <HAL_InitTick+0xb4>)
 8000d14:	fba2 2303 	umull	r2, r3, r2, r3
 8000d18:	0c9b      	lsrs	r3, r3, #18
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d1e:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <HAL_InitTick+0xb8>)
 8000d20:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <HAL_InitTick+0xbc>)
 8000d22:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <HAL_InitTick+0xb8>)
 8000d26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d2a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d2c:	4a10      	ldr	r2, [pc, #64]	; (8000d70 <HAL_InitTick+0xb8>)
 8000d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d30:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <HAL_InitTick+0xb8>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d38:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <HAL_InitTick+0xb8>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d3e:	480c      	ldr	r0, [pc, #48]	; (8000d70 <HAL_InitTick+0xb8>)
 8000d40:	f003 f9ca 	bl	80040d8 <HAL_TIM_Base_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d107      	bne.n	8000d5a <HAL_InitTick+0xa2>
 8000d4a:	e001      	b.n	8000d50 <HAL_InitTick+0x98>
    return HAL_ERROR;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e005      	b.n	8000d5c <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000d50:	4807      	ldr	r0, [pc, #28]	; (8000d70 <HAL_InitTick+0xb8>)
 8000d52:	f003 fa23 	bl	800419c <HAL_TIM_Base_Start_IT>
 8000d56:	4603      	mov	r3, r0
 8000d58:	e000      	b.n	8000d5c <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3738      	adds	r7, #56	; 0x38
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	24000008 	.word	0x24000008
 8000d68:	58024400 	.word	0x58024400
 8000d6c:	431bde83 	.word	0x431bde83
 8000d70:	240002e8 	.word	0x240002e8
 8000d74:	40010000 	.word	0x40010000

08000d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <NMI_Handler+0x4>

08000d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <HardFault_Handler+0x4>

08000d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <MemManage_Handler+0x4>

08000d8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <BusFault_Handler+0x4>

08000d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <UsageFault_Handler+0x4>

08000d96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <TIM1_UP_IRQHandler+0x10>)
 8000daa:	f003 fa6f 	bl	800428c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	240002e8 	.word	0x240002e8

08000db8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
	return 1;
 8000dbc:	2301      	movs	r3, #1
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <_kill>:

int _kill(int pid, int sig)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000dd2:	f029 fb3f 	bl	802a454 <__errno>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2216      	movs	r2, #22
 8000dda:	601a      	str	r2, [r3, #0]
	return -1;
 8000ddc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <_exit>:

void _exit (int status)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000df0:	f04f 31ff 	mov.w	r1, #4294967295
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff ffe7 	bl	8000dc8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000dfa:	e7fe      	b.n	8000dfa <_exit+0x12>

08000dfc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	e00a      	b.n	8000e24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e0e:	f3af 8000 	nop.w
 8000e12:	4601      	mov	r1, r0
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	1c5a      	adds	r2, r3, #1
 8000e18:	60ba      	str	r2, [r7, #8]
 8000e1a:	b2ca      	uxtb	r2, r1
 8000e1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	3301      	adds	r3, #1
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	697a      	ldr	r2, [r7, #20]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	dbf0      	blt.n	8000e0e <_read+0x12>
	}

return len;
 8000e2c:	687b      	ldr	r3, [r7, #4]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b086      	sub	sp, #24
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	60f8      	str	r0, [r7, #12]
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
 8000e46:	e009      	b.n	8000e5c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	1c5a      	adds	r2, r3, #1
 8000e4c:	60ba      	str	r2, [r7, #8]
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	697a      	ldr	r2, [r7, #20]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	dbf1      	blt.n	8000e48 <_write+0x12>
	}
	return len;
 8000e64:	687b      	ldr	r3, [r7, #4]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <_close>:

int _close(int file)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
	return -1;
 8000e76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b083      	sub	sp, #12
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e96:	605a      	str	r2, [r3, #4]
	return 0;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <_isatty>:

int _isatty(int file)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
	return 1;
 8000eae:	2301      	movs	r3, #1
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
	return 0;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <_times>:
	errno = ENOENT;
	return -1;
}

int _times(struct tms *buf)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
	return -1;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef8:	4a14      	ldr	r2, [pc, #80]	; (8000f4c <_sbrk+0x5c>)
 8000efa:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <_sbrk+0x60>)
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f04:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <_sbrk+0x64>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d102      	bne.n	8000f12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <_sbrk+0x64>)
 8000f0e:	4a12      	ldr	r2, [pc, #72]	; (8000f58 <_sbrk+0x68>)
 8000f10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <_sbrk+0x64>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d207      	bcs.n	8000f30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f20:	f029 fa98 	bl	802a454 <__errno>
 8000f24:	4603      	mov	r3, r0
 8000f26:	220c      	movs	r2, #12
 8000f28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2e:	e009      	b.n	8000f44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <_sbrk+0x64>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f36:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <_sbrk+0x64>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	4a05      	ldr	r2, [pc, #20]	; (8000f54 <_sbrk+0x64>)
 8000f40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f42:	68fb      	ldr	r3, [r7, #12]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3718      	adds	r7, #24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	24080000 	.word	0x24080000
 8000f50:	00000400 	.word	0x00000400
 8000f54:	24000334 	.word	0x24000334
 8000f58:	2401e630 	.word	0x2401e630

08000f5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f94 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f60:	f7ff fb98 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f64:	480c      	ldr	r0, [pc, #48]	; (8000f98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f66:	490d      	ldr	r1, [pc, #52]	; (8000f9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f68:	4a0d      	ldr	r2, [pc, #52]	; (8000fa0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f6c:	e002      	b.n	8000f74 <LoopCopyDataInit>

08000f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f72:	3304      	adds	r3, #4

08000f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f78:	d3f9      	bcc.n	8000f6e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	; (8000fa4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f7c:	4c0a      	ldr	r4, [pc, #40]	; (8000fa8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f80:	e001      	b.n	8000f86 <LoopFillZerobss>

08000f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f84:	3204      	adds	r2, #4

08000f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f88:	d3fb      	bcc.n	8000f82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f8a:	f029 fa69 	bl	802a460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8e:	f7ff fc29 	bl	80007e4 <main>
  bx  lr
 8000f92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f94:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f98:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f9c:	24000210 	.word	0x24000210
  ldr r2, =_sidata
 8000fa0:	0802deb4 	.word	0x0802deb4
  ldr r2, =_sbss
 8000fa4:	24000210 	.word	0x24000210
  ldr r4, =_ebss
 8000fa8:	2401e630 	.word	0x2401e630

08000fac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fac:	e7fe      	b.n	8000fac <ADC3_IRQHandler>
	...

08000fb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb6:	2003      	movs	r0, #3
 8000fb8:	f000 f933 	bl	8001222 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fbc:	f001 f9fc 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <HAL_Init+0x68>)
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	0a1b      	lsrs	r3, r3, #8
 8000fc8:	f003 030f 	and.w	r3, r3, #15
 8000fcc:	4913      	ldr	r1, [pc, #76]	; (800101c <HAL_Init+0x6c>)
 8000fce:	5ccb      	ldrb	r3, [r1, r3]
 8000fd0:	f003 031f 	and.w	r3, r3, #31
 8000fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <HAL_Init+0x68>)
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	; (800101c <HAL_Init+0x6c>)
 8000fe4:	5cd3      	ldrb	r3, [r2, r3]
 8000fe6:	f003 031f 	and.w	r3, r3, #31
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff0:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <HAL_Init+0x70>)
 8000ff2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ff4:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <HAL_Init+0x74>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ffa:	200f      	movs	r0, #15
 8000ffc:	f7ff fe5c 	bl	8000cb8 <HAL_InitTick>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e002      	b.n	8001010 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800100a:	f7ff fda1 	bl	8000b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	58024400 	.word	0x58024400
 800101c:	0802d5a8 	.word	0x0802d5a8
 8001020:	24000004 	.word	0x24000004
 8001024:	24000000 	.word	0x24000000

08001028 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_IncTick+0x20>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x24>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4413      	add	r3, r2
 8001038:	4a04      	ldr	r2, [pc, #16]	; (800104c <HAL_IncTick+0x24>)
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	2400000c 	.word	0x2400000c
 800104c:	24000338 	.word	0x24000338

08001050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return uwTick;
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <HAL_GetTick+0x14>)
 8001056:	681b      	ldr	r3, [r3, #0]
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	24000338 	.word	0x24000338

08001068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001070:	f7ff ffee 	bl	8001050 <HAL_GetTick>
 8001074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001080:	d005      	beq.n	800108e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001082:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <HAL_Delay+0x44>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	461a      	mov	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4413      	add	r3, r2
 800108c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800108e:	bf00      	nop
 8001090:	f7ff ffde 	bl	8001050 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	429a      	cmp	r2, r3
 800109e:	d8f7      	bhi.n	8001090 <HAL_Delay+0x28>
  {
  }
}
 80010a0:	bf00      	nop
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	2400000c 	.word	0x2400000c

080010b0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010b4:	4b03      	ldr	r3, [pc, #12]	; (80010c4 <HAL_GetREVID+0x14>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	0c1b      	lsrs	r3, r3, #16
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	5c001000 	.word	0x5c001000

080010c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <__NVIC_SetPriorityGrouping+0x40>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e4:	4013      	ands	r3, r2
 80010e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <__NVIC_SetPriorityGrouping+0x44>)
 80010f2:	4313      	orrs	r3, r2
 80010f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f6:	4a04      	ldr	r2, [pc, #16]	; (8001108 <__NVIC_SetPriorityGrouping+0x40>)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	60d3      	str	r3, [r2, #12]
}
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00
 800110c:	05fa0000 	.word	0x05fa0000

08001110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <__NVIC_GetPriorityGrouping+0x18>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	0a1b      	lsrs	r3, r3, #8
 800111a:	f003 0307 	and.w	r3, r3, #7
}
 800111e:	4618      	mov	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001136:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800113a:	2b00      	cmp	r3, #0
 800113c:	db0b      	blt.n	8001156 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113e:	88fb      	ldrh	r3, [r7, #6]
 8001140:	f003 021f 	and.w	r2, r3, #31
 8001144:	4907      	ldr	r1, [pc, #28]	; (8001164 <__NVIC_EnableIRQ+0x38>)
 8001146:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800114a:	095b      	lsrs	r3, r3, #5
 800114c:	2001      	movs	r0, #1
 800114e:	fa00 f202 	lsl.w	r2, r0, r2
 8001152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000e100 	.word	0xe000e100

08001168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001174:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001178:	2b00      	cmp	r3, #0
 800117a:	db0a      	blt.n	8001192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	b2da      	uxtb	r2, r3
 8001180:	490c      	ldr	r1, [pc, #48]	; (80011b4 <__NVIC_SetPriority+0x4c>)
 8001182:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001186:	0112      	lsls	r2, r2, #4
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	440b      	add	r3, r1
 800118c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001190:	e00a      	b.n	80011a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4908      	ldr	r1, [pc, #32]	; (80011b8 <__NVIC_SetPriority+0x50>)
 8001198:	88fb      	ldrh	r3, [r7, #6]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	3b04      	subs	r3, #4
 80011a0:	0112      	lsls	r2, r2, #4
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	440b      	add	r3, r1
 80011a6:	761a      	strb	r2, [r3, #24]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000e100 	.word	0xe000e100
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f1c3 0307 	rsb	r3, r3, #7
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	bf28      	it	cs
 80011da:	2304      	movcs	r3, #4
 80011dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3304      	adds	r3, #4
 80011e2:	2b06      	cmp	r3, #6
 80011e4:	d902      	bls.n	80011ec <NVIC_EncodePriority+0x30>
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3b03      	subs	r3, #3
 80011ea:	e000      	b.n	80011ee <NVIC_EncodePriority+0x32>
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	f04f 32ff 	mov.w	r2, #4294967295
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43da      	mvns	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	401a      	ands	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001204:	f04f 31ff 	mov.w	r1, #4294967295
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	43d9      	mvns	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	4313      	orrs	r3, r2
         );
}
 8001216:	4618      	mov	r0, r3
 8001218:	3724      	adds	r7, #36	; 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ff4c 	bl	80010c8 <__NVIC_SetPriorityGrouping>
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
 8001244:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001246:	f7ff ff63 	bl	8001110 <__NVIC_GetPriorityGrouping>
 800124a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	68b9      	ldr	r1, [r7, #8]
 8001250:	6978      	ldr	r0, [r7, #20]
 8001252:	f7ff ffb3 	bl	80011bc <NVIC_EncodePriority>
 8001256:	4602      	mov	r2, r0
 8001258:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800125c:	4611      	mov	r1, r2
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ff82 	bl	8001168 <__NVIC_SetPriority>
}
 8001264:	bf00      	nop
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001276:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ff56 	bl	800112c <__NVIC_EnableIRQ>
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800128c:	f3bf 8f5f 	dmb	sy
}
 8001290:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001292:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <HAL_MPU_Disable+0x28>)
 8001294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001296:	4a06      	ldr	r2, [pc, #24]	; (80012b0 <HAL_MPU_Disable+0x28>)
 8001298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800129c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800129e:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <HAL_MPU_Disable+0x2c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	605a      	str	r2, [r3, #4]
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000ed00 	.word	0xe000ed00
 80012b4:	e000ed90 	.word	0xe000ed90

080012b8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80012c0:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <HAL_MPU_Enable+0x38>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <HAL_MPU_Enable+0x3c>)
 80012cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ce:	4a09      	ldr	r2, [pc, #36]	; (80012f4 <HAL_MPU_Enable+0x3c>)
 80012d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80012d6:	f3bf 8f4f 	dsb	sy
}
 80012da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012dc:	f3bf 8f6f 	isb	sy
}
 80012e0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000ed90 	.word	0xe000ed90
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	785a      	ldrb	r2, [r3, #1]
 8001304:	4b1d      	ldr	r3, [pc, #116]	; (800137c <HAL_MPU_ConfigRegion+0x84>)
 8001306:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d029      	beq.n	8001364 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001310:	4a1a      	ldr	r2, [pc, #104]	; (800137c <HAL_MPU_ConfigRegion+0x84>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	7b1b      	ldrb	r3, [r3, #12]
 800131c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	7adb      	ldrb	r3, [r3, #11]
 8001322:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001324:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	7a9b      	ldrb	r3, [r3, #10]
 800132a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800132c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	7b5b      	ldrb	r3, [r3, #13]
 8001332:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001334:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	7b9b      	ldrb	r3, [r3, #14]
 800133a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800133c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	7bdb      	ldrb	r3, [r3, #15]
 8001342:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001344:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	7a5b      	ldrb	r3, [r3, #9]
 800134a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800134c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	7a1b      	ldrb	r3, [r3, #8]
 8001352:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001354:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	7812      	ldrb	r2, [r2, #0]
 800135a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800135c:	4a07      	ldr	r2, [pc, #28]	; (800137c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800135e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001360:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001362:	e005      	b.n	8001370 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_MPU_ConfigRegion+0x84>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800136a:	4b04      	ldr	r3, [pc, #16]	; (800137c <HAL_MPU_ConfigRegion+0x84>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed90 	.word	0xe000ed90

08001380 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001380:	b480      	push	{r7}
 8001382:	b089      	sub	sp, #36	; 0x24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800138e:	4b89      	ldr	r3, [pc, #548]	; (80015b4 <HAL_GPIO_Init+0x234>)
 8001390:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001392:	e194      	b.n	80016be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	2101      	movs	r1, #1
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	fa01 f303 	lsl.w	r3, r1, r3
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f000 8186 	beq.w	80016b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d005      	beq.n	80013c4 <HAL_GPIO_Init+0x44>
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 0303 	and.w	r3, r3, #3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d130      	bne.n	8001426 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	2203      	movs	r2, #3
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	68da      	ldr	r2, [r3, #12]
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013fa:	2201      	movs	r2, #1
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	091b      	lsrs	r3, r3, #4
 8001410:	f003 0201 	and.w	r2, r3, #1
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 0303 	and.w	r3, r3, #3
 800142e:	2b03      	cmp	r3, #3
 8001430:	d017      	beq.n	8001462 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	2203      	movs	r2, #3
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 0303 	and.w	r3, r3, #3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d123      	bne.n	80014b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	08da      	lsrs	r2, r3, #3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3208      	adds	r2, #8
 8001476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	220f      	movs	r2, #15
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	691a      	ldr	r2, [r3, #16]
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	f003 0307 	and.w	r3, r3, #7
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	08da      	lsrs	r2, r3, #3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3208      	adds	r2, #8
 80014b0:	69b9      	ldr	r1, [r7, #24]
 80014b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	2203      	movs	r2, #3
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4013      	ands	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 0203 	and.w	r2, r3, #3
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f000 80e0 	beq.w	80016b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f8:	4b2f      	ldr	r3, [pc, #188]	; (80015b8 <HAL_GPIO_Init+0x238>)
 80014fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014fe:	4a2e      	ldr	r2, [pc, #184]	; (80015b8 <HAL_GPIO_Init+0x238>)
 8001500:	f043 0302 	orr.w	r3, r3, #2
 8001504:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001508:	4b2b      	ldr	r3, [pc, #172]	; (80015b8 <HAL_GPIO_Init+0x238>)
 800150a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001516:	4a29      	ldr	r2, [pc, #164]	; (80015bc <HAL_GPIO_Init+0x23c>)
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	089b      	lsrs	r3, r3, #2
 800151c:	3302      	adds	r3, #2
 800151e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001522:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	f003 0303 	and.w	r3, r3, #3
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	220f      	movs	r2, #15
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4013      	ands	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a20      	ldr	r2, [pc, #128]	; (80015c0 <HAL_GPIO_Init+0x240>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d052      	beq.n	80015e8 <HAL_GPIO_Init+0x268>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a1f      	ldr	r2, [pc, #124]	; (80015c4 <HAL_GPIO_Init+0x244>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d031      	beq.n	80015ae <HAL_GPIO_Init+0x22e>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a1e      	ldr	r2, [pc, #120]	; (80015c8 <HAL_GPIO_Init+0x248>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d02b      	beq.n	80015aa <HAL_GPIO_Init+0x22a>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a1d      	ldr	r2, [pc, #116]	; (80015cc <HAL_GPIO_Init+0x24c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d025      	beq.n	80015a6 <HAL_GPIO_Init+0x226>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a1c      	ldr	r2, [pc, #112]	; (80015d0 <HAL_GPIO_Init+0x250>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d01f      	beq.n	80015a2 <HAL_GPIO_Init+0x222>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a1b      	ldr	r2, [pc, #108]	; (80015d4 <HAL_GPIO_Init+0x254>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d019      	beq.n	800159e <HAL_GPIO_Init+0x21e>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a1a      	ldr	r2, [pc, #104]	; (80015d8 <HAL_GPIO_Init+0x258>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d013      	beq.n	800159a <HAL_GPIO_Init+0x21a>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a19      	ldr	r2, [pc, #100]	; (80015dc <HAL_GPIO_Init+0x25c>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d00d      	beq.n	8001596 <HAL_GPIO_Init+0x216>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a18      	ldr	r2, [pc, #96]	; (80015e0 <HAL_GPIO_Init+0x260>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d007      	beq.n	8001592 <HAL_GPIO_Init+0x212>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a17      	ldr	r2, [pc, #92]	; (80015e4 <HAL_GPIO_Init+0x264>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d101      	bne.n	800158e <HAL_GPIO_Init+0x20e>
 800158a:	2309      	movs	r3, #9
 800158c:	e02d      	b.n	80015ea <HAL_GPIO_Init+0x26a>
 800158e:	230a      	movs	r3, #10
 8001590:	e02b      	b.n	80015ea <HAL_GPIO_Init+0x26a>
 8001592:	2308      	movs	r3, #8
 8001594:	e029      	b.n	80015ea <HAL_GPIO_Init+0x26a>
 8001596:	2307      	movs	r3, #7
 8001598:	e027      	b.n	80015ea <HAL_GPIO_Init+0x26a>
 800159a:	2306      	movs	r3, #6
 800159c:	e025      	b.n	80015ea <HAL_GPIO_Init+0x26a>
 800159e:	2305      	movs	r3, #5
 80015a0:	e023      	b.n	80015ea <HAL_GPIO_Init+0x26a>
 80015a2:	2304      	movs	r3, #4
 80015a4:	e021      	b.n	80015ea <HAL_GPIO_Init+0x26a>
 80015a6:	2303      	movs	r3, #3
 80015a8:	e01f      	b.n	80015ea <HAL_GPIO_Init+0x26a>
 80015aa:	2302      	movs	r3, #2
 80015ac:	e01d      	b.n	80015ea <HAL_GPIO_Init+0x26a>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e01b      	b.n	80015ea <HAL_GPIO_Init+0x26a>
 80015b2:	bf00      	nop
 80015b4:	58000080 	.word	0x58000080
 80015b8:	58024400 	.word	0x58024400
 80015bc:	58000400 	.word	0x58000400
 80015c0:	58020000 	.word	0x58020000
 80015c4:	58020400 	.word	0x58020400
 80015c8:	58020800 	.word	0x58020800
 80015cc:	58020c00 	.word	0x58020c00
 80015d0:	58021000 	.word	0x58021000
 80015d4:	58021400 	.word	0x58021400
 80015d8:	58021800 	.word	0x58021800
 80015dc:	58021c00 	.word	0x58021c00
 80015e0:	58022000 	.word	0x58022000
 80015e4:	58022400 	.word	0x58022400
 80015e8:	2300      	movs	r3, #0
 80015ea:	69fa      	ldr	r2, [r7, #28]
 80015ec:	f002 0203 	and.w	r2, r2, #3
 80015f0:	0092      	lsls	r2, r2, #2
 80015f2:	4093      	lsls	r3, r2
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015fa:	4938      	ldr	r1, [pc, #224]	; (80016dc <HAL_GPIO_Init+0x35c>)
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	089b      	lsrs	r3, r3, #2
 8001600:	3302      	adds	r3, #2
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800162e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800165c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	3301      	adds	r3, #1
 80016bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	fa22 f303 	lsr.w	r3, r2, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f47f ae63 	bne.w	8001394 <HAL_GPIO_Init+0x14>
  }
}
 80016ce:	bf00      	nop
 80016d0:	bf00      	nop
 80016d2:	3724      	adds	r7, #36	; 0x24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	58000400 	.word	0x58000400

080016e0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80016e8:	4a08      	ldr	r2, [pc, #32]	; (800170c <HAL_HSEM_FastTake+0x2c>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3320      	adds	r3, #32
 80016ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f2:	4a07      	ldr	r2, [pc, #28]	; (8001710 <HAL_HSEM_FastTake+0x30>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d101      	bne.n	80016fc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80016f8:	2300      	movs	r3, #0
 80016fa:	e000      	b.n	80016fe <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	58026400 	.word	0x58026400
 8001710:	80000300 	.word	0x80000300

08001714 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800171e:	4906      	ldr	r1, [pc, #24]	; (8001738 <HAL_HSEM_Release+0x24>)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	58026400 	.word	0x58026400

0800173c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001744:	4b29      	ldr	r3, [pc, #164]	; (80017ec <HAL_PWREx_ConfigSupply+0xb0>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	2b06      	cmp	r3, #6
 800174e:	d00a      	beq.n	8001766 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001750:	4b26      	ldr	r3, [pc, #152]	; (80017ec <HAL_PWREx_ConfigSupply+0xb0>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	429a      	cmp	r2, r3
 800175c:	d001      	beq.n	8001762 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e040      	b.n	80017e4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	e03e      	b.n	80017e4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001766:	4b21      	ldr	r3, [pc, #132]	; (80017ec <HAL_PWREx_ConfigSupply+0xb0>)
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800176e:	491f      	ldr	r1, [pc, #124]	; (80017ec <HAL_PWREx_ConfigSupply+0xb0>)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4313      	orrs	r3, r2
 8001774:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001776:	f7ff fc6b 	bl	8001050 <HAL_GetTick>
 800177a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800177c:	e009      	b.n	8001792 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800177e:	f7ff fc67 	bl	8001050 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800178c:	d901      	bls.n	8001792 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e028      	b.n	80017e4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001792:	4b16      	ldr	r3, [pc, #88]	; (80017ec <HAL_PWREx_ConfigSupply+0xb0>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800179a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800179e:	d1ee      	bne.n	800177e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b1e      	cmp	r3, #30
 80017a4:	d008      	beq.n	80017b8 <HAL_PWREx_ConfigSupply+0x7c>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b2e      	cmp	r3, #46	; 0x2e
 80017aa:	d005      	beq.n	80017b8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b1d      	cmp	r3, #29
 80017b0:	d002      	beq.n	80017b8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b2d      	cmp	r3, #45	; 0x2d
 80017b6:	d114      	bne.n	80017e2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80017b8:	f7ff fc4a 	bl	8001050 <HAL_GetTick>
 80017bc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80017be:	e009      	b.n	80017d4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80017c0:	f7ff fc46 	bl	8001050 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017ce:	d901      	bls.n	80017d4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e007      	b.n	80017e4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <HAL_PWREx_ConfigSupply+0xb0>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e0:	d1ee      	bne.n	80017c0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	58024800 	.word	0x58024800

080017f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08c      	sub	sp, #48	; 0x30
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d102      	bne.n	8001804 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	f000 bc1d 	b.w	800203e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 8087 	beq.w	8001920 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001812:	4b99      	ldr	r3, [pc, #612]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800181c:	4b96      	ldr	r3, [pc, #600]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 800181e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001820:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001824:	2b10      	cmp	r3, #16
 8001826:	d007      	beq.n	8001838 <HAL_RCC_OscConfig+0x48>
 8001828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182a:	2b18      	cmp	r3, #24
 800182c:	d110      	bne.n	8001850 <HAL_RCC_OscConfig+0x60>
 800182e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001830:	f003 0303 	and.w	r3, r3, #3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d10b      	bne.n	8001850 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001838:	4b8f      	ldr	r3, [pc, #572]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d06c      	beq.n	800191e <HAL_RCC_OscConfig+0x12e>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d168      	bne.n	800191e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e3f6      	b.n	800203e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001858:	d106      	bne.n	8001868 <HAL_RCC_OscConfig+0x78>
 800185a:	4b87      	ldr	r3, [pc, #540]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a86      	ldr	r2, [pc, #536]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 8001860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	e02e      	b.n	80018c6 <HAL_RCC_OscConfig+0xd6>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d10c      	bne.n	800188a <HAL_RCC_OscConfig+0x9a>
 8001870:	4b81      	ldr	r3, [pc, #516]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a80      	ldr	r2, [pc, #512]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 8001876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	4b7e      	ldr	r3, [pc, #504]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a7d      	ldr	r2, [pc, #500]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 8001882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	e01d      	b.n	80018c6 <HAL_RCC_OscConfig+0xd6>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001892:	d10c      	bne.n	80018ae <HAL_RCC_OscConfig+0xbe>
 8001894:	4b78      	ldr	r3, [pc, #480]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a77      	ldr	r2, [pc, #476]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 800189a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	4b75      	ldr	r3, [pc, #468]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a74      	ldr	r2, [pc, #464]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 80018a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	e00b      	b.n	80018c6 <HAL_RCC_OscConfig+0xd6>
 80018ae:	4b72      	ldr	r3, [pc, #456]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a71      	ldr	r2, [pc, #452]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 80018b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	4b6f      	ldr	r3, [pc, #444]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a6e      	ldr	r2, [pc, #440]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 80018c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d013      	beq.n	80018f6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ce:	f7ff fbbf 	bl	8001050 <HAL_GetTick>
 80018d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018d6:	f7ff fbbb 	bl	8001050 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b64      	cmp	r3, #100	; 0x64
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e3aa      	b.n	800203e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018e8:	4b63      	ldr	r3, [pc, #396]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0f0      	beq.n	80018d6 <HAL_RCC_OscConfig+0xe6>
 80018f4:	e014      	b.n	8001920 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f6:	f7ff fbab 	bl	8001050 <HAL_GetTick>
 80018fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018fe:	f7ff fba7 	bl	8001050 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b64      	cmp	r3, #100	; 0x64
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e396      	b.n	800203e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001910:	4b59      	ldr	r3, [pc, #356]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1f0      	bne.n	80018fe <HAL_RCC_OscConfig+0x10e>
 800191c:	e000      	b.n	8001920 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 80cb 	beq.w	8001ac4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800192e:	4b52      	ldr	r3, [pc, #328]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001936:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001938:	4b4f      	ldr	r3, [pc, #316]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 800193a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d007      	beq.n	8001954 <HAL_RCC_OscConfig+0x164>
 8001944:	6a3b      	ldr	r3, [r7, #32]
 8001946:	2b18      	cmp	r3, #24
 8001948:	d156      	bne.n	80019f8 <HAL_RCC_OscConfig+0x208>
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	2b00      	cmp	r3, #0
 8001952:	d151      	bne.n	80019f8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001954:	4b48      	ldr	r3, [pc, #288]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_RCC_OscConfig+0x17c>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e368      	b.n	800203e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800196c:	4b42      	ldr	r3, [pc, #264]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f023 0219 	bic.w	r2, r3, #25
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	493f      	ldr	r1, [pc, #252]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 800197a:	4313      	orrs	r3, r2
 800197c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800197e:	f7ff fb67 	bl	8001050 <HAL_GetTick>
 8001982:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001986:	f7ff fb63 	bl	8001050 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e352      	b.n	800203e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001998:	4b37      	ldr	r3, [pc, #220]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0f0      	beq.n	8001986 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a4:	f7ff fb84 	bl	80010b0 <HAL_GetREVID>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f241 0203 	movw	r2, #4099	; 0x1003
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d817      	bhi.n	80019e2 <HAL_RCC_OscConfig+0x1f2>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	2b40      	cmp	r3, #64	; 0x40
 80019b8:	d108      	bne.n	80019cc <HAL_RCC_OscConfig+0x1dc>
 80019ba:	4b2f      	ldr	r3, [pc, #188]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80019c2:	4a2d      	ldr	r2, [pc, #180]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 80019c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019ca:	e07b      	b.n	8001ac4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019cc:	4b2a      	ldr	r3, [pc, #168]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	031b      	lsls	r3, r3, #12
 80019da:	4927      	ldr	r1, [pc, #156]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019e0:	e070      	b.n	8001ac4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e2:	4b25      	ldr	r3, [pc, #148]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	061b      	lsls	r3, r3, #24
 80019f0:	4921      	ldr	r1, [pc, #132]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019f6:	e065      	b.n	8001ac4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d048      	beq.n	8001a92 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a00:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f023 0219 	bic.w	r2, r3, #25
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	491a      	ldr	r1, [pc, #104]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a12:	f7ff fb1d 	bl	8001050 <HAL_GetTick>
 8001a16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a1a:	f7ff fb19 	bl	8001050 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e308      	b.n	800203e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a2c:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0f0      	beq.n	8001a1a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a38:	f7ff fb3a 	bl	80010b0 <HAL_GetREVID>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d81a      	bhi.n	8001a7c <HAL_RCC_OscConfig+0x28c>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	2b40      	cmp	r3, #64	; 0x40
 8001a4c:	d108      	bne.n	8001a60 <HAL_RCC_OscConfig+0x270>
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001a56:	4a08      	ldr	r2, [pc, #32]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 8001a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a5c:	6053      	str	r3, [r2, #4]
 8001a5e:	e031      	b.n	8001ac4 <HAL_RCC_OscConfig+0x2d4>
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	031b      	lsls	r3, r3, #12
 8001a6e:	4902      	ldr	r1, [pc, #8]	; (8001a78 <HAL_RCC_OscConfig+0x288>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	604b      	str	r3, [r1, #4]
 8001a74:	e026      	b.n	8001ac4 <HAL_RCC_OscConfig+0x2d4>
 8001a76:	bf00      	nop
 8001a78:	58024400 	.word	0x58024400
 8001a7c:	4b9a      	ldr	r3, [pc, #616]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	061b      	lsls	r3, r3, #24
 8001a8a:	4997      	ldr	r1, [pc, #604]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	604b      	str	r3, [r1, #4]
 8001a90:	e018      	b.n	8001ac4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a92:	4b95      	ldr	r3, [pc, #596]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a94      	ldr	r2, [pc, #592]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001a98:	f023 0301 	bic.w	r3, r3, #1
 8001a9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9e:	f7ff fad7 	bl	8001050 <HAL_GetTick>
 8001aa2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aa6:	f7ff fad3 	bl	8001050 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e2c2      	b.n	800203e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ab8:	4b8b      	ldr	r3, [pc, #556]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1f0      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0310 	and.w	r3, r3, #16
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 80a9 	beq.w	8001c24 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ad2:	4b85      	ldr	r3, [pc, #532]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ada:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001adc:	4b82      	ldr	r3, [pc, #520]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	d007      	beq.n	8001af8 <HAL_RCC_OscConfig+0x308>
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	2b18      	cmp	r3, #24
 8001aec:	d13a      	bne.n	8001b64 <HAL_RCC_OscConfig+0x374>
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d135      	bne.n	8001b64 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001af8:	4b7b      	ldr	r3, [pc, #492]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <HAL_RCC_OscConfig+0x320>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	2b80      	cmp	r3, #128	; 0x80
 8001b0a:	d001      	beq.n	8001b10 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e296      	b.n	800203e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b10:	f7ff face 	bl	80010b0 <HAL_GetREVID>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d817      	bhi.n	8001b4e <HAL_RCC_OscConfig+0x35e>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	2b20      	cmp	r3, #32
 8001b24:	d108      	bne.n	8001b38 <HAL_RCC_OscConfig+0x348>
 8001b26:	4b70      	ldr	r3, [pc, #448]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001b2e:	4a6e      	ldr	r2, [pc, #440]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001b30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b34:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b36:	e075      	b.n	8001c24 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b38:	4b6b      	ldr	r3, [pc, #428]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	069b      	lsls	r3, r3, #26
 8001b46:	4968      	ldr	r1, [pc, #416]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b4c:	e06a      	b.n	8001c24 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b4e:	4b66      	ldr	r3, [pc, #408]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	061b      	lsls	r3, r3, #24
 8001b5c:	4962      	ldr	r1, [pc, #392]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b62:	e05f      	b.n	8001c24 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d042      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001b6c:	4b5e      	ldr	r3, [pc, #376]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a5d      	ldr	r2, [pc, #372]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b78:	f7ff fa6a 	bl	8001050 <HAL_GetTick>
 8001b7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001b80:	f7ff fa66 	bl	8001050 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e255      	b.n	800203e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b92:	4b55      	ldr	r3, [pc, #340]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f0      	beq.n	8001b80 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b9e:	f7ff fa87 	bl	80010b0 <HAL_GetREVID>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f241 0203 	movw	r2, #4099	; 0x1003
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d817      	bhi.n	8001bdc <HAL_RCC_OscConfig+0x3ec>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	2b20      	cmp	r3, #32
 8001bb2:	d108      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x3d6>
 8001bb4:	4b4c      	ldr	r3, [pc, #304]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001bbc:	4a4a      	ldr	r2, [pc, #296]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001bbe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001bc2:	6053      	str	r3, [r2, #4]
 8001bc4:	e02e      	b.n	8001c24 <HAL_RCC_OscConfig+0x434>
 8001bc6:	4b48      	ldr	r3, [pc, #288]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	069b      	lsls	r3, r3, #26
 8001bd4:	4944      	ldr	r1, [pc, #272]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	604b      	str	r3, [r1, #4]
 8001bda:	e023      	b.n	8001c24 <HAL_RCC_OscConfig+0x434>
 8001bdc:	4b42      	ldr	r3, [pc, #264]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	061b      	lsls	r3, r3, #24
 8001bea:	493f      	ldr	r1, [pc, #252]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	60cb      	str	r3, [r1, #12]
 8001bf0:	e018      	b.n	8001c24 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001bf2:	4b3d      	ldr	r3, [pc, #244]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a3c      	ldr	r2, [pc, #240]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001bf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfe:	f7ff fa27 	bl	8001050 <HAL_GetTick>
 8001c02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001c06:	f7ff fa23 	bl	8001050 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e212      	b.n	800203e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c18:	4b33      	ldr	r3, [pc, #204]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1f0      	bne.n	8001c06 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d036      	beq.n	8001c9e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d019      	beq.n	8001c6c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c38:	4b2b      	ldr	r3, [pc, #172]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c3c:	4a2a      	ldr	r2, [pc, #168]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c44:	f7ff fa04 	bl	8001050 <HAL_GetTick>
 8001c48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c4c:	f7ff fa00 	bl	8001050 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e1ef      	b.n	800203e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c5e:	4b22      	ldr	r3, [pc, #136]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0f0      	beq.n	8001c4c <HAL_RCC_OscConfig+0x45c>
 8001c6a:	e018      	b.n	8001c9e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c70:	4a1d      	ldr	r2, [pc, #116]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001c72:	f023 0301 	bic.w	r3, r3, #1
 8001c76:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c78:	f7ff f9ea 	bl	8001050 <HAL_GetTick>
 8001c7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c80:	f7ff f9e6 	bl	8001050 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e1d5      	b.n	800203e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0320 	and.w	r3, r3, #32
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d039      	beq.n	8001d1e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d01c      	beq.n	8001cec <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a0c      	ldr	r2, [pc, #48]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001cb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cbc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001cbe:	f7ff f9c7 	bl	8001050 <HAL_GetTick>
 8001cc2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001cc6:	f7ff f9c3 	bl	8001050 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e1b2      	b.n	800203e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <HAL_RCC_OscConfig+0x4f8>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0f0      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x4d6>
 8001ce4:	e01b      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
 8001ce6:	bf00      	nop
 8001ce8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cec:	4b9b      	ldr	r3, [pc, #620]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a9a      	ldr	r2, [pc, #616]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001cf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cf6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001cf8:	f7ff f9aa 	bl	8001050 <HAL_GetTick>
 8001cfc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001d00:	f7ff f9a6 	bl	8001050 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e195      	b.n	800203e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d12:	4b92      	ldr	r3, [pc, #584]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f0      	bne.n	8001d00 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 8081 	beq.w	8001e2e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d2c:	4b8c      	ldr	r3, [pc, #560]	; (8001f60 <HAL_RCC_OscConfig+0x770>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a8b      	ldr	r2, [pc, #556]	; (8001f60 <HAL_RCC_OscConfig+0x770>)
 8001d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d38:	f7ff f98a 	bl	8001050 <HAL_GetTick>
 8001d3c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001d40:	f7ff f986 	bl	8001050 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b64      	cmp	r3, #100	; 0x64
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e175      	b.n	800203e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d52:	4b83      	ldr	r3, [pc, #524]	; (8001f60 <HAL_RCC_OscConfig+0x770>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0f0      	beq.n	8001d40 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d106      	bne.n	8001d74 <HAL_RCC_OscConfig+0x584>
 8001d66:	4b7d      	ldr	r3, [pc, #500]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6a:	4a7c      	ldr	r2, [pc, #496]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6713      	str	r3, [r2, #112]	; 0x70
 8001d72:	e02d      	b.n	8001dd0 <HAL_RCC_OscConfig+0x5e0>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10c      	bne.n	8001d96 <HAL_RCC_OscConfig+0x5a6>
 8001d7c:	4b77      	ldr	r3, [pc, #476]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d80:	4a76      	ldr	r2, [pc, #472]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001d82:	f023 0301 	bic.w	r3, r3, #1
 8001d86:	6713      	str	r3, [r2, #112]	; 0x70
 8001d88:	4b74      	ldr	r3, [pc, #464]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8c:	4a73      	ldr	r2, [pc, #460]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001d8e:	f023 0304 	bic.w	r3, r3, #4
 8001d92:	6713      	str	r3, [r2, #112]	; 0x70
 8001d94:	e01c      	b.n	8001dd0 <HAL_RCC_OscConfig+0x5e0>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	2b05      	cmp	r3, #5
 8001d9c:	d10c      	bne.n	8001db8 <HAL_RCC_OscConfig+0x5c8>
 8001d9e:	4b6f      	ldr	r3, [pc, #444]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da2:	4a6e      	ldr	r2, [pc, #440]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001da4:	f043 0304 	orr.w	r3, r3, #4
 8001da8:	6713      	str	r3, [r2, #112]	; 0x70
 8001daa:	4b6c      	ldr	r3, [pc, #432]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dae:	4a6b      	ldr	r2, [pc, #428]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6713      	str	r3, [r2, #112]	; 0x70
 8001db6:	e00b      	b.n	8001dd0 <HAL_RCC_OscConfig+0x5e0>
 8001db8:	4b68      	ldr	r3, [pc, #416]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbc:	4a67      	ldr	r2, [pc, #412]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001dbe:	f023 0301 	bic.w	r3, r3, #1
 8001dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc4:	4b65      	ldr	r3, [pc, #404]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc8:	4a64      	ldr	r2, [pc, #400]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001dca:	f023 0304 	bic.w	r3, r3, #4
 8001dce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d015      	beq.n	8001e04 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd8:	f7ff f93a 	bl	8001050 <HAL_GetTick>
 8001ddc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dde:	e00a      	b.n	8001df6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001de0:	f7ff f936 	bl	8001050 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e123      	b.n	800203e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001df6:	4b59      	ldr	r3, [pc, #356]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0ee      	beq.n	8001de0 <HAL_RCC_OscConfig+0x5f0>
 8001e02:	e014      	b.n	8001e2e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e04:	f7ff f924 	bl	8001050 <HAL_GetTick>
 8001e08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e0a:	e00a      	b.n	8001e22 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e0c:	f7ff f920 	bl	8001050 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e10d      	b.n	800203e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e22:	4b4e      	ldr	r3, [pc, #312]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1ee      	bne.n	8001e0c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 8102 	beq.w	800203c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001e38:	4b48      	ldr	r3, [pc, #288]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e40:	2b18      	cmp	r3, #24
 8001e42:	f000 80bd 	beq.w	8001fc0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	f040 809e 	bne.w	8001f8c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e50:	4b42      	ldr	r3, [pc, #264]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a41      	ldr	r2, [pc, #260]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001e56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5c:	f7ff f8f8 	bl	8001050 <HAL_GetTick>
 8001e60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e64:	f7ff f8f4 	bl	8001050 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e0e3      	b.n	800203e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e76:	4b39      	ldr	r3, [pc, #228]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f0      	bne.n	8001e64 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e82:	4b36      	ldr	r3, [pc, #216]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001e84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e86:	4b37      	ldr	r3, [pc, #220]	; (8001f64 <HAL_RCC_OscConfig+0x774>)
 8001e88:	4013      	ands	r3, r2
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e92:	0112      	lsls	r2, r2, #4
 8001e94:	430a      	orrs	r2, r1
 8001e96:	4931      	ldr	r1, [pc, #196]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	628b      	str	r3, [r1, #40]	; 0x28
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	025b      	lsls	r3, r3, #9
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	041b      	lsls	r3, r3, #16
 8001eba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	061b      	lsls	r3, r3, #24
 8001ec8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001ecc:	4923      	ldr	r1, [pc, #140]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001ed2:	4b22      	ldr	r3, [pc, #136]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed6:	4a21      	ldr	r2, [pc, #132]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001ed8:	f023 0301 	bic.w	r3, r3, #1
 8001edc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001ede:	4b1f      	ldr	r3, [pc, #124]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001ee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ee2:	4b21      	ldr	r3, [pc, #132]	; (8001f68 <HAL_RCC_OscConfig+0x778>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001eea:	00d2      	lsls	r2, r2, #3
 8001eec:	491b      	ldr	r1, [pc, #108]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001ef2:	4b1a      	ldr	r3, [pc, #104]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef6:	f023 020c 	bic.w	r2, r3, #12
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	4917      	ldr	r1, [pc, #92]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001f04:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f08:	f023 0202 	bic.w	r2, r3, #2
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f10:	4912      	ldr	r1, [pc, #72]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001f16:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1a:	4a10      	ldr	r2, [pc, #64]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f22:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f26:	4a0d      	ldr	r2, [pc, #52]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f32:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001f3a:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3e:	4a07      	ldr	r2, [pc, #28]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f46:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <HAL_RCC_OscConfig+0x76c>)
 8001f4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f52:	f7ff f87d 	bl	8001050 <HAL_GetTick>
 8001f56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f58:	e011      	b.n	8001f7e <HAL_RCC_OscConfig+0x78e>
 8001f5a:	bf00      	nop
 8001f5c:	58024400 	.word	0x58024400
 8001f60:	58024800 	.word	0x58024800
 8001f64:	fffffc0c 	.word	0xfffffc0c
 8001f68:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f6c:	f7ff f870 	bl	8001050 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e05f      	b.n	800203e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f7e:	4b32      	ldr	r3, [pc, #200]	; (8002048 <HAL_RCC_OscConfig+0x858>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCC_OscConfig+0x77c>
 8001f8a:	e057      	b.n	800203c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8c:	4b2e      	ldr	r3, [pc, #184]	; (8002048 <HAL_RCC_OscConfig+0x858>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a2d      	ldr	r2, [pc, #180]	; (8002048 <HAL_RCC_OscConfig+0x858>)
 8001f92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f98:	f7ff f85a 	bl	8001050 <HAL_GetTick>
 8001f9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa0:	f7ff f856 	bl	8001050 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e045      	b.n	800203e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fb2:	4b25      	ldr	r3, [pc, #148]	; (8002048 <HAL_RCC_OscConfig+0x858>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x7b0>
 8001fbe:	e03d      	b.n	800203c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001fc0:	4b21      	ldr	r3, [pc, #132]	; (8002048 <HAL_RCC_OscConfig+0x858>)
 8001fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001fc6:	4b20      	ldr	r3, [pc, #128]	; (8002048 <HAL_RCC_OscConfig+0x858>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d031      	beq.n	8002038 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	f003 0203 	and.w	r2, r3, #3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d12a      	bne.n	8002038 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	091b      	lsrs	r3, r3, #4
 8001fe6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d122      	bne.n	8002038 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d11a      	bne.n	8002038 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	0a5b      	lsrs	r3, r3, #9
 8002006:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002010:	429a      	cmp	r2, r3
 8002012:	d111      	bne.n	8002038 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	0c1b      	lsrs	r3, r3, #16
 8002018:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002020:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002022:	429a      	cmp	r2, r3
 8002024:	d108      	bne.n	8002038 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	0e1b      	lsrs	r3, r3, #24
 800202a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002032:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002034:	429a      	cmp	r2, r3
 8002036:	d001      	beq.n	800203c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e000      	b.n	800203e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3730      	adds	r7, #48	; 0x30
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	58024400 	.word	0x58024400

0800204c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e19c      	b.n	800239a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002060:	4b8a      	ldr	r3, [pc, #552]	; (800228c <HAL_RCC_ClockConfig+0x240>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	d910      	bls.n	8002090 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206e:	4b87      	ldr	r3, [pc, #540]	; (800228c <HAL_RCC_ClockConfig+0x240>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f023 020f 	bic.w	r2, r3, #15
 8002076:	4985      	ldr	r1, [pc, #532]	; (800228c <HAL_RCC_ClockConfig+0x240>)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	4313      	orrs	r3, r2
 800207c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800207e:	4b83      	ldr	r3, [pc, #524]	; (800228c <HAL_RCC_ClockConfig+0x240>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	d001      	beq.n	8002090 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e184      	b.n	800239a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d010      	beq.n	80020be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	4b7b      	ldr	r3, [pc, #492]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d908      	bls.n	80020be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80020ac:	4b78      	ldr	r3, [pc, #480]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	4975      	ldr	r1, [pc, #468]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d010      	beq.n	80020ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695a      	ldr	r2, [r3, #20]
 80020ce:	4b70      	ldr	r3, [pc, #448]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d908      	bls.n	80020ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020da:	4b6d      	ldr	r3, [pc, #436]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	496a      	ldr	r1, [pc, #424]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0310 	and.w	r3, r3, #16
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d010      	beq.n	800211a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	699a      	ldr	r2, [r3, #24]
 80020fc:	4b64      	ldr	r3, [pc, #400]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002104:	429a      	cmp	r2, r3
 8002106:	d908      	bls.n	800211a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002108:	4b61      	ldr	r3, [pc, #388]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	495e      	ldr	r1, [pc, #376]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 8002116:	4313      	orrs	r3, r2
 8002118:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0320 	and.w	r3, r3, #32
 8002122:	2b00      	cmp	r3, #0
 8002124:	d010      	beq.n	8002148 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69da      	ldr	r2, [r3, #28]
 800212a:	4b59      	ldr	r3, [pc, #356]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002132:	429a      	cmp	r2, r3
 8002134:	d908      	bls.n	8002148 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002136:	4b56      	ldr	r3, [pc, #344]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	4953      	ldr	r1, [pc, #332]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 8002144:	4313      	orrs	r3, r2
 8002146:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d010      	beq.n	8002176 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	4b4d      	ldr	r3, [pc, #308]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	f003 030f 	and.w	r3, r3, #15
 8002160:	429a      	cmp	r2, r3
 8002162:	d908      	bls.n	8002176 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002164:	4b4a      	ldr	r3, [pc, #296]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	f023 020f 	bic.w	r2, r3, #15
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	4947      	ldr	r1, [pc, #284]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 8002172:	4313      	orrs	r3, r2
 8002174:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d055      	beq.n	800222e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002182:	4b43      	ldr	r3, [pc, #268]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	4940      	ldr	r1, [pc, #256]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 8002190:	4313      	orrs	r3, r2
 8002192:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b02      	cmp	r3, #2
 800219a:	d107      	bne.n	80021ac <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800219c:	4b3c      	ldr	r3, [pc, #240]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d121      	bne.n	80021ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0f6      	b.n	800239a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d107      	bne.n	80021c4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021b4:	4b36      	ldr	r3, [pc, #216]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d115      	bne.n	80021ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e0ea      	b.n	800239a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d107      	bne.n	80021dc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021cc:	4b30      	ldr	r3, [pc, #192]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d109      	bne.n	80021ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e0de      	b.n	800239a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021dc:	4b2c      	ldr	r3, [pc, #176]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e0d6      	b.n	800239a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021ec:	4b28      	ldr	r3, [pc, #160]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	f023 0207 	bic.w	r2, r3, #7
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	4925      	ldr	r1, [pc, #148]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021fe:	f7fe ff27 	bl	8001050 <HAL_GetTick>
 8002202:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002204:	e00a      	b.n	800221c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002206:	f7fe ff23 	bl	8001050 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	f241 3288 	movw	r2, #5000	; 0x1388
 8002214:	4293      	cmp	r3, r2
 8002216:	d901      	bls.n	800221c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e0be      	b.n	800239a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221c:	4b1c      	ldr	r3, [pc, #112]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	429a      	cmp	r2, r3
 800222c:	d1eb      	bne.n	8002206 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d010      	beq.n	800225c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	4b14      	ldr	r3, [pc, #80]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	429a      	cmp	r2, r3
 8002248:	d208      	bcs.n	800225c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800224a:	4b11      	ldr	r3, [pc, #68]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	f023 020f 	bic.w	r2, r3, #15
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	490e      	ldr	r1, [pc, #56]	; (8002290 <HAL_RCC_ClockConfig+0x244>)
 8002258:	4313      	orrs	r3, r2
 800225a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800225c:	4b0b      	ldr	r3, [pc, #44]	; (800228c <HAL_RCC_ClockConfig+0x240>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 030f 	and.w	r3, r3, #15
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d214      	bcs.n	8002294 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226a:	4b08      	ldr	r3, [pc, #32]	; (800228c <HAL_RCC_ClockConfig+0x240>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 020f 	bic.w	r2, r3, #15
 8002272:	4906      	ldr	r1, [pc, #24]	; (800228c <HAL_RCC_ClockConfig+0x240>)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	4313      	orrs	r3, r2
 8002278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800227a:	4b04      	ldr	r3, [pc, #16]	; (800228c <HAL_RCC_ClockConfig+0x240>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d005      	beq.n	8002294 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e086      	b.n	800239a <HAL_RCC_ClockConfig+0x34e>
 800228c:	52002000 	.word	0x52002000
 8002290:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	2b00      	cmp	r3, #0
 800229e:	d010      	beq.n	80022c2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691a      	ldr	r2, [r3, #16]
 80022a4:	4b3f      	ldr	r3, [pc, #252]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d208      	bcs.n	80022c2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022b0:	4b3c      	ldr	r3, [pc, #240]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	4939      	ldr	r1, [pc, #228]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0308 	and.w	r3, r3, #8
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d010      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695a      	ldr	r2, [r3, #20]
 80022d2:	4b34      	ldr	r3, [pc, #208]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022da:	429a      	cmp	r2, r3
 80022dc:	d208      	bcs.n	80022f0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022de:	4b31      	ldr	r3, [pc, #196]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	492e      	ldr	r1, [pc, #184]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0310 	and.w	r3, r3, #16
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d010      	beq.n	800231e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699a      	ldr	r2, [r3, #24]
 8002300:	4b28      	ldr	r3, [pc, #160]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002308:	429a      	cmp	r2, r3
 800230a:	d208      	bcs.n	800231e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800230c:	4b25      	ldr	r3, [pc, #148]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	4922      	ldr	r1, [pc, #136]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 800231a:	4313      	orrs	r3, r2
 800231c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0320 	and.w	r3, r3, #32
 8002326:	2b00      	cmp	r3, #0
 8002328:	d010      	beq.n	800234c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69da      	ldr	r2, [r3, #28]
 800232e:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002336:	429a      	cmp	r2, r3
 8002338:	d208      	bcs.n	800234c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800233a:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	4917      	ldr	r1, [pc, #92]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 8002348:	4313      	orrs	r3, r2
 800234a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800234c:	f000 f834 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8002350:	4602      	mov	r2, r0
 8002352:	4b14      	ldr	r3, [pc, #80]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	0a1b      	lsrs	r3, r3, #8
 8002358:	f003 030f 	and.w	r3, r3, #15
 800235c:	4912      	ldr	r1, [pc, #72]	; (80023a8 <HAL_RCC_ClockConfig+0x35c>)
 800235e:	5ccb      	ldrb	r3, [r1, r3]
 8002360:	f003 031f 	and.w	r3, r3, #31
 8002364:	fa22 f303 	lsr.w	r3, r2, r3
 8002368:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800236a:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <HAL_RCC_ClockConfig+0x358>)
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	4a0d      	ldr	r2, [pc, #52]	; (80023a8 <HAL_RCC_ClockConfig+0x35c>)
 8002374:	5cd3      	ldrb	r3, [r2, r3]
 8002376:	f003 031f 	and.w	r3, r3, #31
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	fa22 f303 	lsr.w	r3, r2, r3
 8002380:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <HAL_RCC_ClockConfig+0x360>)
 8002382:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002384:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <HAL_RCC_ClockConfig+0x364>)
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800238a:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <HAL_RCC_ClockConfig+0x368>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe fc92 	bl	8000cb8 <HAL_InitTick>
 8002394:	4603      	mov	r3, r0
 8002396:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002398:	7bfb      	ldrb	r3, [r7, #15]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	58024400 	.word	0x58024400
 80023a8:	0802d5a8 	.word	0x0802d5a8
 80023ac:	24000004 	.word	0x24000004
 80023b0:	24000000 	.word	0x24000000
 80023b4:	24000008 	.word	0x24000008

080023b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b089      	sub	sp, #36	; 0x24
 80023bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023be:	4bb3      	ldr	r3, [pc, #716]	; (800268c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023c6:	2b18      	cmp	r3, #24
 80023c8:	f200 8155 	bhi.w	8002676 <HAL_RCC_GetSysClockFreq+0x2be>
 80023cc:	a201      	add	r2, pc, #4	; (adr r2, 80023d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80023ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d2:	bf00      	nop
 80023d4:	08002439 	.word	0x08002439
 80023d8:	08002677 	.word	0x08002677
 80023dc:	08002677 	.word	0x08002677
 80023e0:	08002677 	.word	0x08002677
 80023e4:	08002677 	.word	0x08002677
 80023e8:	08002677 	.word	0x08002677
 80023ec:	08002677 	.word	0x08002677
 80023f0:	08002677 	.word	0x08002677
 80023f4:	0800245f 	.word	0x0800245f
 80023f8:	08002677 	.word	0x08002677
 80023fc:	08002677 	.word	0x08002677
 8002400:	08002677 	.word	0x08002677
 8002404:	08002677 	.word	0x08002677
 8002408:	08002677 	.word	0x08002677
 800240c:	08002677 	.word	0x08002677
 8002410:	08002677 	.word	0x08002677
 8002414:	08002465 	.word	0x08002465
 8002418:	08002677 	.word	0x08002677
 800241c:	08002677 	.word	0x08002677
 8002420:	08002677 	.word	0x08002677
 8002424:	08002677 	.word	0x08002677
 8002428:	08002677 	.word	0x08002677
 800242c:	08002677 	.word	0x08002677
 8002430:	08002677 	.word	0x08002677
 8002434:	0800246b 	.word	0x0800246b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002438:	4b94      	ldr	r3, [pc, #592]	; (800268c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0320 	and.w	r3, r3, #32
 8002440:	2b00      	cmp	r3, #0
 8002442:	d009      	beq.n	8002458 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002444:	4b91      	ldr	r3, [pc, #580]	; (800268c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	08db      	lsrs	r3, r3, #3
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	4a90      	ldr	r2, [pc, #576]	; (8002690 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002450:	fa22 f303 	lsr.w	r3, r2, r3
 8002454:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002456:	e111      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002458:	4b8d      	ldr	r3, [pc, #564]	; (8002690 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800245a:	61bb      	str	r3, [r7, #24]
    break;
 800245c:	e10e      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800245e:	4b8d      	ldr	r3, [pc, #564]	; (8002694 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002460:	61bb      	str	r3, [r7, #24]
    break;
 8002462:	e10b      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002464:	4b8c      	ldr	r3, [pc, #560]	; (8002698 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002466:	61bb      	str	r3, [r7, #24]
    break;
 8002468:	e108      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800246a:	4b88      	ldr	r3, [pc, #544]	; (800268c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002474:	4b85      	ldr	r3, [pc, #532]	; (800268c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	091b      	lsrs	r3, r3, #4
 800247a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800247e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002480:	4b82      	ldr	r3, [pc, #520]	; (800268c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800248a:	4b80      	ldr	r3, [pc, #512]	; (800268c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800248c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800248e:	08db      	lsrs	r3, r3, #3
 8002490:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	fb02 f303 	mul.w	r3, r2, r3
 800249a:	ee07 3a90 	vmov	s15, r3
 800249e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 80e1 	beq.w	8002670 <HAL_RCC_GetSysClockFreq+0x2b8>
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	f000 8083 	beq.w	80025bc <HAL_RCC_GetSysClockFreq+0x204>
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	f200 80a1 	bhi.w	8002600 <HAL_RCC_GetSysClockFreq+0x248>
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <HAL_RCC_GetSysClockFreq+0x114>
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d056      	beq.n	8002578 <HAL_RCC_GetSysClockFreq+0x1c0>
 80024ca:	e099      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024cc:	4b6f      	ldr	r3, [pc, #444]	; (800268c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0320 	and.w	r3, r3, #32
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d02d      	beq.n	8002534 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80024d8:	4b6c      	ldr	r3, [pc, #432]	; (800268c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	08db      	lsrs	r3, r3, #3
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	4a6b      	ldr	r2, [pc, #428]	; (8002690 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024e4:	fa22 f303 	lsr.w	r3, r2, r3
 80024e8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	ee07 3a90 	vmov	s15, r3
 80024f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	ee07 3a90 	vmov	s15, r3
 80024fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002502:	4b62      	ldr	r3, [pc, #392]	; (800268c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800250a:	ee07 3a90 	vmov	s15, r3
 800250e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002512:	ed97 6a02 	vldr	s12, [r7, #8]
 8002516:	eddf 5a61 	vldr	s11, [pc, #388]	; 800269c <HAL_RCC_GetSysClockFreq+0x2e4>
 800251a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800251e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002522:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800252a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800252e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002532:	e087      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	ee07 3a90 	vmov	s15, r3
 800253a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800253e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80026a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002546:	4b51      	ldr	r3, [pc, #324]	; (800268c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800254e:	ee07 3a90 	vmov	s15, r3
 8002552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002556:	ed97 6a02 	vldr	s12, [r7, #8]
 800255a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800269c <HAL_RCC_GetSysClockFreq+0x2e4>
 800255e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800256a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800256e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002572:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002576:	e065      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	ee07 3a90 	vmov	s15, r3
 800257e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002582:	eddf 6a48 	vldr	s13, [pc, #288]	; 80026a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800258a:	4b40      	ldr	r3, [pc, #256]	; (800268c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002592:	ee07 3a90 	vmov	s15, r3
 8002596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800259a:	ed97 6a02 	vldr	s12, [r7, #8]
 800259e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800269c <HAL_RCC_GetSysClockFreq+0x2e4>
 80025a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80025ba:	e043      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	ee07 3a90 	vmov	s15, r3
 80025c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025c6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80026a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80025ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025ce:	4b2f      	ldr	r3, [pc, #188]	; (800268c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025d6:	ee07 3a90 	vmov	s15, r3
 80025da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025de:	ed97 6a02 	vldr	s12, [r7, #8]
 80025e2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800269c <HAL_RCC_GetSysClockFreq+0x2e4>
 80025e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80025fe:	e021      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	ee07 3a90 	vmov	s15, r3
 8002606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800260a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80026a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800260e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002612:	4b1e      	ldr	r3, [pc, #120]	; (800268c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800261a:	ee07 3a90 	vmov	s15, r3
 800261e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002622:	ed97 6a02 	vldr	s12, [r7, #8]
 8002626:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800269c <HAL_RCC_GetSysClockFreq+0x2e4>
 800262a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800262e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800263a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800263e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002642:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002644:	4b11      	ldr	r3, [pc, #68]	; (800268c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002648:	0a5b      	lsrs	r3, r3, #9
 800264a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800264e:	3301      	adds	r3, #1
 8002650:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	ee07 3a90 	vmov	s15, r3
 8002658:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800265c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002668:	ee17 3a90 	vmov	r3, s15
 800266c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800266e:	e005      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	61bb      	str	r3, [r7, #24]
    break;
 8002674:	e002      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002676:	4b07      	ldr	r3, [pc, #28]	; (8002694 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002678:	61bb      	str	r3, [r7, #24]
    break;
 800267a:	bf00      	nop
  }

  return sysclockfreq;
 800267c:	69bb      	ldr	r3, [r7, #24]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3724      	adds	r7, #36	; 0x24
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	58024400 	.word	0x58024400
 8002690:	03d09000 	.word	0x03d09000
 8002694:	003d0900 	.word	0x003d0900
 8002698:	017d7840 	.word	0x017d7840
 800269c:	46000000 	.word	0x46000000
 80026a0:	4c742400 	.word	0x4c742400
 80026a4:	4a742400 	.word	0x4a742400
 80026a8:	4bbebc20 	.word	0x4bbebc20

080026ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80026b2:	f7ff fe81 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 80026b6:	4602      	mov	r2, r0
 80026b8:	4b10      	ldr	r3, [pc, #64]	; (80026fc <HAL_RCC_GetHCLKFreq+0x50>)
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	0a1b      	lsrs	r3, r3, #8
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	490f      	ldr	r1, [pc, #60]	; (8002700 <HAL_RCC_GetHCLKFreq+0x54>)
 80026c4:	5ccb      	ldrb	r3, [r1, r3]
 80026c6:	f003 031f 	and.w	r3, r3, #31
 80026ca:	fa22 f303 	lsr.w	r3, r2, r3
 80026ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026d0:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <HAL_RCC_GetHCLKFreq+0x50>)
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	f003 030f 	and.w	r3, r3, #15
 80026d8:	4a09      	ldr	r2, [pc, #36]	; (8002700 <HAL_RCC_GetHCLKFreq+0x54>)
 80026da:	5cd3      	ldrb	r3, [r2, r3]
 80026dc:	f003 031f 	and.w	r3, r3, #31
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	fa22 f303 	lsr.w	r3, r2, r3
 80026e6:	4a07      	ldr	r2, [pc, #28]	; (8002704 <HAL_RCC_GetHCLKFreq+0x58>)
 80026e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026ea:	4a07      	ldr	r2, [pc, #28]	; (8002708 <HAL_RCC_GetHCLKFreq+0x5c>)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80026f0:	4b04      	ldr	r3, [pc, #16]	; (8002704 <HAL_RCC_GetHCLKFreq+0x58>)
 80026f2:	681b      	ldr	r3, [r3, #0]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	58024400 	.word	0x58024400
 8002700:	0802d5a8 	.word	0x0802d5a8
 8002704:	24000004 	.word	0x24000004
 8002708:	24000000 	.word	0x24000000

0800270c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002710:	f7ff ffcc 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 8002714:	4602      	mov	r2, r0
 8002716:	4b06      	ldr	r3, [pc, #24]	; (8002730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	091b      	lsrs	r3, r3, #4
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	4904      	ldr	r1, [pc, #16]	; (8002734 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002722:	5ccb      	ldrb	r3, [r1, r3]
 8002724:	f003 031f 	and.w	r3, r3, #31
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800272c:	4618      	mov	r0, r3
 800272e:	bd80      	pop	{r7, pc}
 8002730:	58024400 	.word	0x58024400
 8002734:	0802d5a8 	.word	0x0802d5a8

08002738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800273c:	f7ff ffb6 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 8002740:	4602      	mov	r2, r0
 8002742:	4b06      	ldr	r3, [pc, #24]	; (800275c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	0a1b      	lsrs	r3, r3, #8
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	4904      	ldr	r1, [pc, #16]	; (8002760 <HAL_RCC_GetPCLK2Freq+0x28>)
 800274e:	5ccb      	ldrb	r3, [r1, r3]
 8002750:	f003 031f 	and.w	r3, r3, #31
 8002754:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002758:	4618      	mov	r0, r3
 800275a:	bd80      	pop	{r7, pc}
 800275c:	58024400 	.word	0x58024400
 8002760:	0802d5a8 	.word	0x0802d5a8

08002764 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	223f      	movs	r2, #63	; 0x3f
 8002772:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002774:	4b1a      	ldr	r3, [pc, #104]	; (80027e0 <HAL_RCC_GetClockConfig+0x7c>)
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	f003 0207 	and.w	r2, r3, #7
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002780:	4b17      	ldr	r3, [pc, #92]	; (80027e0 <HAL_RCC_GetClockConfig+0x7c>)
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800278c:	4b14      	ldr	r3, [pc, #80]	; (80027e0 <HAL_RCC_GetClockConfig+0x7c>)
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	f003 020f 	and.w	r2, r3, #15
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002798:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <HAL_RCC_GetClockConfig+0x7c>)
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80027a4:	4b0e      	ldr	r3, [pc, #56]	; (80027e0 <HAL_RCC_GetClockConfig+0x7c>)
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80027b0:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <HAL_RCC_GetClockConfig+0x7c>)
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80027bc:	4b08      	ldr	r3, [pc, #32]	; (80027e0 <HAL_RCC_GetClockConfig+0x7c>)
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_RCC_GetClockConfig+0x80>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 020f 	and.w	r2, r3, #15
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	601a      	str	r2, [r3, #0]
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	58024400 	.word	0x58024400
 80027e4:	52002000 	.word	0x52002000

080027e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027f0:	2300      	movs	r3, #0
 80027f2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027f4:	2300      	movs	r3, #0
 80027f6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d03f      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002808:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800280c:	d02a      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800280e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002812:	d824      	bhi.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002814:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002818:	d018      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800281a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800281e:	d81e      	bhi.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002824:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002828:	d007      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800282a:	e018      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800282c:	4ba3      	ldr	r3, [pc, #652]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800282e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002830:	4aa2      	ldr	r2, [pc, #648]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002836:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002838:	e015      	b.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3304      	adds	r3, #4
 800283e:	2102      	movs	r1, #2
 8002840:	4618      	mov	r0, r3
 8002842:	f001 f9d5 	bl	8003bf0 <RCCEx_PLL2_Config>
 8002846:	4603      	mov	r3, r0
 8002848:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800284a:	e00c      	b.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3324      	adds	r3, #36	; 0x24
 8002850:	2102      	movs	r1, #2
 8002852:	4618      	mov	r0, r3
 8002854:	f001 fa7e 	bl	8003d54 <RCCEx_PLL3_Config>
 8002858:	4603      	mov	r3, r0
 800285a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800285c:	e003      	b.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	75fb      	strb	r3, [r7, #23]
      break;
 8002862:	e000      	b.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002864:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002866:	7dfb      	ldrb	r3, [r7, #23]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d109      	bne.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800286c:	4b93      	ldr	r3, [pc, #588]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800286e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002870:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002878:	4990      	ldr	r1, [pc, #576]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800287a:	4313      	orrs	r3, r2
 800287c:	650b      	str	r3, [r1, #80]	; 0x50
 800287e:	e001      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002880:	7dfb      	ldrb	r3, [r7, #23]
 8002882:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d03d      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002894:	2b04      	cmp	r3, #4
 8002896:	d826      	bhi.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002898:	a201      	add	r2, pc, #4	; (adr r2, 80028a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800289a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800289e:	bf00      	nop
 80028a0:	080028b5 	.word	0x080028b5
 80028a4:	080028c3 	.word	0x080028c3
 80028a8:	080028d5 	.word	0x080028d5
 80028ac:	080028ed 	.word	0x080028ed
 80028b0:	080028ed 	.word	0x080028ed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028b4:	4b81      	ldr	r3, [pc, #516]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b8:	4a80      	ldr	r2, [pc, #512]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028c0:	e015      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3304      	adds	r3, #4
 80028c6:	2100      	movs	r1, #0
 80028c8:	4618      	mov	r0, r3
 80028ca:	f001 f991 	bl	8003bf0 <RCCEx_PLL2_Config>
 80028ce:	4603      	mov	r3, r0
 80028d0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028d2:	e00c      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3324      	adds	r3, #36	; 0x24
 80028d8:	2100      	movs	r1, #0
 80028da:	4618      	mov	r0, r3
 80028dc:	f001 fa3a 	bl	8003d54 <RCCEx_PLL3_Config>
 80028e0:	4603      	mov	r3, r0
 80028e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028e4:	e003      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	75fb      	strb	r3, [r7, #23]
      break;
 80028ea:	e000      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80028ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028ee:	7dfb      	ldrb	r3, [r7, #23]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d109      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028f4:	4b71      	ldr	r3, [pc, #452]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028f8:	f023 0207 	bic.w	r2, r3, #7
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002900:	496e      	ldr	r1, [pc, #440]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002902:	4313      	orrs	r3, r2
 8002904:	650b      	str	r3, [r1, #80]	; 0x50
 8002906:	e001      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002908:	7dfb      	ldrb	r3, [r7, #23]
 800290a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002914:	2b00      	cmp	r3, #0
 8002916:	d042      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002920:	d02b      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002926:	d825      	bhi.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002928:	2bc0      	cmp	r3, #192	; 0xc0
 800292a:	d028      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800292c:	2bc0      	cmp	r3, #192	; 0xc0
 800292e:	d821      	bhi.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002930:	2b80      	cmp	r3, #128	; 0x80
 8002932:	d016      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002934:	2b80      	cmp	r3, #128	; 0x80
 8002936:	d81d      	bhi.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002938:	2b00      	cmp	r3, #0
 800293a:	d002      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800293c:	2b40      	cmp	r3, #64	; 0x40
 800293e:	d007      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002940:	e018      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002942:	4b5e      	ldr	r3, [pc, #376]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002946:	4a5d      	ldr	r2, [pc, #372]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800294c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800294e:	e017      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3304      	adds	r3, #4
 8002954:	2100      	movs	r1, #0
 8002956:	4618      	mov	r0, r3
 8002958:	f001 f94a 	bl	8003bf0 <RCCEx_PLL2_Config>
 800295c:	4603      	mov	r3, r0
 800295e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002960:	e00e      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3324      	adds	r3, #36	; 0x24
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f001 f9f3 	bl	8003d54 <RCCEx_PLL3_Config>
 800296e:	4603      	mov	r3, r0
 8002970:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002972:	e005      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	75fb      	strb	r3, [r7, #23]
      break;
 8002978:	e002      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800297a:	bf00      	nop
 800297c:	e000      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800297e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002980:	7dfb      	ldrb	r3, [r7, #23]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d109      	bne.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002986:	4b4d      	ldr	r3, [pc, #308]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800298a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002992:	494a      	ldr	r1, [pc, #296]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002994:	4313      	orrs	r3, r2
 8002996:	650b      	str	r3, [r1, #80]	; 0x50
 8002998:	e001      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800299a:	7dfb      	ldrb	r3, [r7, #23]
 800299c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d049      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80029b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029b4:	d030      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80029b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029ba:	d82a      	bhi.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80029bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80029c0:	d02c      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80029c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80029c6:	d824      	bhi.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80029c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029cc:	d018      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80029ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029d2:	d81e      	bhi.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80029d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029dc:	d007      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x206>
 80029de:	e018      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029e0:	4b36      	ldr	r3, [pc, #216]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e4:	4a35      	ldr	r2, [pc, #212]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029ec:	e017      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3304      	adds	r3, #4
 80029f2:	2100      	movs	r1, #0
 80029f4:	4618      	mov	r0, r3
 80029f6:	f001 f8fb 	bl	8003bf0 <RCCEx_PLL2_Config>
 80029fa:	4603      	mov	r3, r0
 80029fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80029fe:	e00e      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3324      	adds	r3, #36	; 0x24
 8002a04:	2100      	movs	r1, #0
 8002a06:	4618      	mov	r0, r3
 8002a08:	f001 f9a4 	bl	8003d54 <RCCEx_PLL3_Config>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a10:	e005      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	75fb      	strb	r3, [r7, #23]
      break;
 8002a16:	e002      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002a18:	bf00      	nop
 8002a1a:	e000      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002a1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a1e:	7dfb      	ldrb	r3, [r7, #23]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10a      	bne.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002a24:	4b25      	ldr	r3, [pc, #148]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a28:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002a32:	4922      	ldr	r1, [pc, #136]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	658b      	str	r3, [r1, #88]	; 0x58
 8002a38:	e001      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a3a:	7dfb      	ldrb	r3, [r7, #23]
 8002a3c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d04b      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002a50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a54:	d030      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002a56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a5a:	d82a      	bhi.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002a5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a60:	d02e      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002a62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a66:	d824      	bhi.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002a68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a6c:	d018      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002a6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a72:	d81e      	bhi.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a7c:	d007      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002a7e:	e018      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a80:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a84:	4a0d      	ldr	r2, [pc, #52]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a8c:	e019      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	3304      	adds	r3, #4
 8002a92:	2100      	movs	r1, #0
 8002a94:	4618      	mov	r0, r3
 8002a96:	f001 f8ab 	bl	8003bf0 <RCCEx_PLL2_Config>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002a9e:	e010      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3324      	adds	r3, #36	; 0x24
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f001 f954 	bl	8003d54 <RCCEx_PLL3_Config>
 8002aac:	4603      	mov	r3, r0
 8002aae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ab0:	e007      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	75fb      	strb	r3, [r7, #23]
      break;
 8002ab6:	e004      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002ab8:	bf00      	nop
 8002aba:	e002      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002abc:	58024400 	.word	0x58024400
      break;
 8002ac0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ac2:	7dfb      	ldrb	r3, [r7, #23]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10a      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002ac8:	4b99      	ldr	r3, [pc, #612]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002acc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002ad6:	4996      	ldr	r1, [pc, #600]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	658b      	str	r3, [r1, #88]	; 0x58
 8002adc:	e001      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ade:	7dfb      	ldrb	r3, [r7, #23]
 8002ae0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d032      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af2:	2b30      	cmp	r3, #48	; 0x30
 8002af4:	d01c      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002af6:	2b30      	cmp	r3, #48	; 0x30
 8002af8:	d817      	bhi.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002afa:	2b20      	cmp	r3, #32
 8002afc:	d00c      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002afe:	2b20      	cmp	r3, #32
 8002b00:	d813      	bhi.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d016      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002b06:	2b10      	cmp	r3, #16
 8002b08:	d10f      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b0a:	4b89      	ldr	r3, [pc, #548]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0e:	4a88      	ldr	r2, [pc, #544]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002b16:	e00e      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	2102      	movs	r1, #2
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f001 f866 	bl	8003bf0 <RCCEx_PLL2_Config>
 8002b24:	4603      	mov	r3, r0
 8002b26:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002b28:	e005      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	75fb      	strb	r3, [r7, #23]
      break;
 8002b2e:	e002      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002b30:	bf00      	nop
 8002b32:	e000      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002b34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b36:	7dfb      	ldrb	r3, [r7, #23]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d109      	bne.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b3c:	4b7c      	ldr	r3, [pc, #496]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b40:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b48:	4979      	ldr	r1, [pc, #484]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002b4e:	e001      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b50:	7dfb      	ldrb	r3, [r7, #23]
 8002b52:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d047      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b68:	d030      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002b6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b6e:	d82a      	bhi.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002b70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b74:	d02c      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002b76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b7a:	d824      	bhi.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002b7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b80:	d018      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b86:	d81e      	bhi.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b90:	d007      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002b92:	e018      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b94:	4b66      	ldr	r3, [pc, #408]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	4a65      	ldr	r2, [pc, #404]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002ba0:	e017      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f001 f821 	bl	8003bf0 <RCCEx_PLL2_Config>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002bb2:	e00e      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3324      	adds	r3, #36	; 0x24
 8002bb8:	2100      	movs	r1, #0
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f001 f8ca 	bl	8003d54 <RCCEx_PLL3_Config>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002bc4:	e005      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	75fb      	strb	r3, [r7, #23]
      break;
 8002bca:	e002      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002bcc:	bf00      	nop
 8002bce:	e000      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002bd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bd2:	7dfb      	ldrb	r3, [r7, #23]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d109      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002bd8:	4b55      	ldr	r3, [pc, #340]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bdc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be4:	4952      	ldr	r1, [pc, #328]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	650b      	str	r3, [r1, #80]	; 0x50
 8002bea:	e001      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bec:	7dfb      	ldrb	r3, [r7, #23]
 8002bee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d049      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c04:	d02e      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002c06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c0a:	d828      	bhi.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002c0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c10:	d02a      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002c12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c16:	d822      	bhi.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002c18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c1c:	d026      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002c1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c22:	d81c      	bhi.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002c24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c28:	d010      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002c2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c2e:	d816      	bhi.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d01d      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c38:	d111      	bne.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	2101      	movs	r1, #1
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 ffd5 	bl	8003bf0 <RCCEx_PLL2_Config>
 8002c46:	4603      	mov	r3, r0
 8002c48:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002c4a:	e012      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3324      	adds	r3, #36	; 0x24
 8002c50:	2101      	movs	r1, #1
 8002c52:	4618      	mov	r0, r3
 8002c54:	f001 f87e 	bl	8003d54 <RCCEx_PLL3_Config>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002c5c:	e009      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	75fb      	strb	r3, [r7, #23]
      break;
 8002c62:	e006      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002c64:	bf00      	nop
 8002c66:	e004      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002c68:	bf00      	nop
 8002c6a:	e002      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002c6c:	bf00      	nop
 8002c6e:	e000      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002c70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c72:	7dfb      	ldrb	r3, [r7, #23]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d109      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002c78:	4b2d      	ldr	r3, [pc, #180]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c7c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c84:	492a      	ldr	r1, [pc, #168]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	650b      	str	r3, [r1, #80]	; 0x50
 8002c8a:	e001      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c8c:	7dfb      	ldrb	r3, [r7, #23]
 8002c8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d04d      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002ca2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ca6:	d02e      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002ca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cac:	d828      	bhi.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb2:	d02a      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb8:	d822      	bhi.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002cba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002cbe:	d026      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002cc0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002cc4:	d81c      	bhi.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002cc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cca:	d010      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002ccc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cd0:	d816      	bhi.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d01d      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002cd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cda:	d111      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3304      	adds	r3, #4
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 ff84 	bl	8003bf0 <RCCEx_PLL2_Config>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002cec:	e012      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	3324      	adds	r3, #36	; 0x24
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f001 f82d 	bl	8003d54 <RCCEx_PLL3_Config>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002cfe:	e009      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	75fb      	strb	r3, [r7, #23]
      break;
 8002d04:	e006      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002d06:	bf00      	nop
 8002d08:	e004      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002d0a:	bf00      	nop
 8002d0c:	e002      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002d0e:	bf00      	nop
 8002d10:	e000      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002d12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d14:	7dfb      	ldrb	r3, [r7, #23]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10c      	bne.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002d1a:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002d28:	4901      	ldr	r1, [pc, #4]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	658b      	str	r3, [r1, #88]	; 0x58
 8002d2e:	e003      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002d30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d34:	7dfb      	ldrb	r3, [r7, #23]
 8002d36:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d02f      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d4c:	d00e      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002d4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d52:	d814      	bhi.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d015      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002d58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d5c:	d10f      	bne.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d5e:	4baf      	ldr	r3, [pc, #700]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d62:	4aae      	ldr	r2, [pc, #696]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002d6a:	e00c      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3304      	adds	r3, #4
 8002d70:	2101      	movs	r1, #1
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 ff3c 	bl	8003bf0 <RCCEx_PLL2_Config>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002d7c:	e003      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	75fb      	strb	r3, [r7, #23]
      break;
 8002d82:	e000      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8002d84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d86:	7dfb      	ldrb	r3, [r7, #23]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d109      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d8c:	4ba3      	ldr	r3, [pc, #652]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d90:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d98:	49a0      	ldr	r1, [pc, #640]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	650b      	str	r3, [r1, #80]	; 0x50
 8002d9e:	e001      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da0:	7dfb      	ldrb	r3, [r7, #23]
 8002da2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d032      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db4:	2b03      	cmp	r3, #3
 8002db6:	d81b      	bhi.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002db8:	a201      	add	r2, pc, #4	; (adr r2, 8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8002dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dbe:	bf00      	nop
 8002dc0:	08002df7 	.word	0x08002df7
 8002dc4:	08002dd1 	.word	0x08002dd1
 8002dc8:	08002ddf 	.word	0x08002ddf
 8002dcc:	08002df7 	.word	0x08002df7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dd0:	4b92      	ldr	r3, [pc, #584]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd4:	4a91      	ldr	r2, [pc, #580]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002dd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002ddc:	e00c      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3304      	adds	r3, #4
 8002de2:	2102      	movs	r1, #2
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 ff03 	bl	8003bf0 <RCCEx_PLL2_Config>
 8002dea:	4603      	mov	r3, r0
 8002dec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002dee:	e003      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	75fb      	strb	r3, [r7, #23]
      break;
 8002df4:	e000      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002df6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002df8:	7dfb      	ldrb	r3, [r7, #23]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d109      	bne.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002dfe:	4b87      	ldr	r3, [pc, #540]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e02:	f023 0203 	bic.w	r2, r3, #3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	4984      	ldr	r1, [pc, #528]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002e10:	e001      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e12:	7dfb      	ldrb	r3, [r7, #23]
 8002e14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 8086 	beq.w	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e24:	4b7e      	ldr	r3, [pc, #504]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a7d      	ldr	r2, [pc, #500]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e30:	f7fe f90e 	bl	8001050 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e36:	e009      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e38:	f7fe f90a 	bl	8001050 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b64      	cmp	r3, #100	; 0x64
 8002e44:	d902      	bls.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	75fb      	strb	r3, [r7, #23]
        break;
 8002e4a:	e005      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e4c:	4b74      	ldr	r3, [pc, #464]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0ef      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002e58:	7dfb      	ldrb	r3, [r7, #23]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d166      	bne.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002e5e:	4b6f      	ldr	r3, [pc, #444]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e68:	4053      	eors	r3, r2
 8002e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d013      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e72:	4b6a      	ldr	r3, [pc, #424]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e7a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e7c:	4b67      	ldr	r3, [pc, #412]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e80:	4a66      	ldr	r2, [pc, #408]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e86:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e88:	4b64      	ldr	r3, [pc, #400]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8c:	4a63      	ldr	r2, [pc, #396]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e92:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002e94:	4a61      	ldr	r2, [pc, #388]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ea4:	d115      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea6:	f7fe f8d3 	bl	8001050 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002eac:	e00b      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eae:	f7fe f8cf 	bl	8001050 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d902      	bls.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	75fb      	strb	r3, [r7, #23]
            break;
 8002ec4:	e005      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ec6:	4b55      	ldr	r3, [pc, #340]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0ed      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002ed2:	7dfb      	ldrb	r3, [r7, #23]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d126      	bne.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ee6:	d10d      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002ee8:	4b4c      	ldr	r3, [pc, #304]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ef6:	0919      	lsrs	r1, r3, #4
 8002ef8:	4b4a      	ldr	r3, [pc, #296]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8002efa:	400b      	ands	r3, r1
 8002efc:	4947      	ldr	r1, [pc, #284]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	610b      	str	r3, [r1, #16]
 8002f02:	e005      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002f04:	4b45      	ldr	r3, [pc, #276]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	4a44      	ldr	r2, [pc, #272]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f0a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002f0e:	6113      	str	r3, [r2, #16]
 8002f10:	4b42      	ldr	r3, [pc, #264]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f1e:	493f      	ldr	r1, [pc, #252]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	670b      	str	r3, [r1, #112]	; 0x70
 8002f24:	e004      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f26:	7dfb      	ldrb	r3, [r7, #23]
 8002f28:	75bb      	strb	r3, [r7, #22]
 8002f2a:	e001      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f2c:	7dfb      	ldrb	r3, [r7, #23]
 8002f2e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 8085 	beq.w	8003048 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f42:	2b28      	cmp	r3, #40	; 0x28
 8002f44:	d866      	bhi.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8002f46:	a201      	add	r2, pc, #4	; (adr r2, 8002f4c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4c:	08003029 	.word	0x08003029
 8002f50:	08003015 	.word	0x08003015
 8002f54:	08003015 	.word	0x08003015
 8002f58:	08003015 	.word	0x08003015
 8002f5c:	08003015 	.word	0x08003015
 8002f60:	08003015 	.word	0x08003015
 8002f64:	08003015 	.word	0x08003015
 8002f68:	08003015 	.word	0x08003015
 8002f6c:	08002ff1 	.word	0x08002ff1
 8002f70:	08003015 	.word	0x08003015
 8002f74:	08003015 	.word	0x08003015
 8002f78:	08003015 	.word	0x08003015
 8002f7c:	08003015 	.word	0x08003015
 8002f80:	08003015 	.word	0x08003015
 8002f84:	08003015 	.word	0x08003015
 8002f88:	08003015 	.word	0x08003015
 8002f8c:	08003003 	.word	0x08003003
 8002f90:	08003015 	.word	0x08003015
 8002f94:	08003015 	.word	0x08003015
 8002f98:	08003015 	.word	0x08003015
 8002f9c:	08003015 	.word	0x08003015
 8002fa0:	08003015 	.word	0x08003015
 8002fa4:	08003015 	.word	0x08003015
 8002fa8:	08003015 	.word	0x08003015
 8002fac:	08003029 	.word	0x08003029
 8002fb0:	08003015 	.word	0x08003015
 8002fb4:	08003015 	.word	0x08003015
 8002fb8:	08003015 	.word	0x08003015
 8002fbc:	08003015 	.word	0x08003015
 8002fc0:	08003015 	.word	0x08003015
 8002fc4:	08003015 	.word	0x08003015
 8002fc8:	08003015 	.word	0x08003015
 8002fcc:	08003029 	.word	0x08003029
 8002fd0:	08003015 	.word	0x08003015
 8002fd4:	08003015 	.word	0x08003015
 8002fd8:	08003015 	.word	0x08003015
 8002fdc:	08003015 	.word	0x08003015
 8002fe0:	08003015 	.word	0x08003015
 8002fe4:	08003015 	.word	0x08003015
 8002fe8:	08003015 	.word	0x08003015
 8002fec:	08003029 	.word	0x08003029
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 fdfa 	bl	8003bf0 <RCCEx_PLL2_Config>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003000:	e013      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3324      	adds	r3, #36	; 0x24
 8003006:	2101      	movs	r1, #1
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fea3 	bl	8003d54 <RCCEx_PLL3_Config>
 800300e:	4603      	mov	r3, r0
 8003010:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003012:	e00a      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	75fb      	strb	r3, [r7, #23]
      break;
 8003018:	e007      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800301a:	bf00      	nop
 800301c:	58024400 	.word	0x58024400
 8003020:	58024800 	.word	0x58024800
 8003024:	00ffffcf 	.word	0x00ffffcf
      break;
 8003028:	bf00      	nop
    }

    if(ret == HAL_OK)
 800302a:	7dfb      	ldrb	r3, [r7, #23]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d109      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003030:	4b96      	ldr	r3, [pc, #600]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003034:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800303c:	4993      	ldr	r1, [pc, #588]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800303e:	4313      	orrs	r3, r2
 8003040:	654b      	str	r3, [r1, #84]	; 0x54
 8003042:	e001      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003044:	7dfb      	ldrb	r3, [r7, #23]
 8003046:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d038      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003058:	2b05      	cmp	r3, #5
 800305a:	d821      	bhi.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800305c:	a201      	add	r2, pc, #4	; (adr r2, 8003064 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800305e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003062:	bf00      	nop
 8003064:	080030a7 	.word	0x080030a7
 8003068:	0800307d 	.word	0x0800307d
 800306c:	0800308f 	.word	0x0800308f
 8003070:	080030a7 	.word	0x080030a7
 8003074:	080030a7 	.word	0x080030a7
 8003078:	080030a7 	.word	0x080030a7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3304      	adds	r3, #4
 8003080:	2101      	movs	r1, #1
 8003082:	4618      	mov	r0, r3
 8003084:	f000 fdb4 	bl	8003bf0 <RCCEx_PLL2_Config>
 8003088:	4603      	mov	r3, r0
 800308a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800308c:	e00c      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3324      	adds	r3, #36	; 0x24
 8003092:	2101      	movs	r1, #1
 8003094:	4618      	mov	r0, r3
 8003096:	f000 fe5d 	bl	8003d54 <RCCEx_PLL3_Config>
 800309a:	4603      	mov	r3, r0
 800309c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800309e:	e003      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	75fb      	strb	r3, [r7, #23]
      break;
 80030a4:	e000      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80030a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030a8:	7dfb      	ldrb	r3, [r7, #23]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d109      	bne.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80030ae:	4b77      	ldr	r3, [pc, #476]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80030b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b2:	f023 0207 	bic.w	r2, r3, #7
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ba:	4974      	ldr	r1, [pc, #464]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	654b      	str	r3, [r1, #84]	; 0x54
 80030c0:	e001      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c2:	7dfb      	ldrb	r3, [r7, #23]
 80030c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0304 	and.w	r3, r3, #4
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d03a      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d8:	2b05      	cmp	r3, #5
 80030da:	d821      	bhi.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80030dc:	a201      	add	r2, pc, #4	; (adr r2, 80030e4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80030de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e2:	bf00      	nop
 80030e4:	08003127 	.word	0x08003127
 80030e8:	080030fd 	.word	0x080030fd
 80030ec:	0800310f 	.word	0x0800310f
 80030f0:	08003127 	.word	0x08003127
 80030f4:	08003127 	.word	0x08003127
 80030f8:	08003127 	.word	0x08003127
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3304      	adds	r3, #4
 8003100:	2101      	movs	r1, #1
 8003102:	4618      	mov	r0, r3
 8003104:	f000 fd74 	bl	8003bf0 <RCCEx_PLL2_Config>
 8003108:	4603      	mov	r3, r0
 800310a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800310c:	e00c      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	3324      	adds	r3, #36	; 0x24
 8003112:	2101      	movs	r1, #1
 8003114:	4618      	mov	r0, r3
 8003116:	f000 fe1d 	bl	8003d54 <RCCEx_PLL3_Config>
 800311a:	4603      	mov	r3, r0
 800311c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800311e:	e003      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	75fb      	strb	r3, [r7, #23]
      break;
 8003124:	e000      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003126:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003128:	7dfb      	ldrb	r3, [r7, #23]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10a      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800312e:	4b57      	ldr	r3, [pc, #348]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003132:	f023 0207 	bic.w	r2, r3, #7
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313c:	4953      	ldr	r1, [pc, #332]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800313e:	4313      	orrs	r3, r2
 8003140:	658b      	str	r3, [r1, #88]	; 0x58
 8003142:	e001      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003144:	7dfb      	ldrb	r3, [r7, #23]
 8003146:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0320 	and.w	r3, r3, #32
 8003150:	2b00      	cmp	r3, #0
 8003152:	d04b      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800315a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800315e:	d02e      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003160:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003164:	d828      	bhi.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800316a:	d02a      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800316c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003170:	d822      	bhi.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003172:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003176:	d026      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003178:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800317c:	d81c      	bhi.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800317e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003182:	d010      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003184:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003188:	d816      	bhi.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800318a:	2b00      	cmp	r3, #0
 800318c:	d01d      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800318e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003192:	d111      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3304      	adds	r3, #4
 8003198:	2100      	movs	r1, #0
 800319a:	4618      	mov	r0, r3
 800319c:	f000 fd28 	bl	8003bf0 <RCCEx_PLL2_Config>
 80031a0:	4603      	mov	r3, r0
 80031a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80031a4:	e012      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3324      	adds	r3, #36	; 0x24
 80031aa:	2102      	movs	r1, #2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 fdd1 	bl	8003d54 <RCCEx_PLL3_Config>
 80031b2:	4603      	mov	r3, r0
 80031b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80031b6:	e009      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	75fb      	strb	r3, [r7, #23]
      break;
 80031bc:	e006      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80031be:	bf00      	nop
 80031c0:	e004      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80031c2:	bf00      	nop
 80031c4:	e002      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80031c6:	bf00      	nop
 80031c8:	e000      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80031ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031cc:	7dfb      	ldrb	r3, [r7, #23]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10a      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031d2:	4b2e      	ldr	r3, [pc, #184]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80031d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031e0:	492a      	ldr	r1, [pc, #168]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	654b      	str	r3, [r1, #84]	; 0x54
 80031e6:	e001      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e8:	7dfb      	ldrb	r3, [r7, #23]
 80031ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d04d      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031fe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003202:	d02e      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003204:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003208:	d828      	bhi.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800320a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800320e:	d02a      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003214:	d822      	bhi.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003216:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800321a:	d026      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800321c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003220:	d81c      	bhi.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003222:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003226:	d010      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003228:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800322c:	d816      	bhi.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800322e:	2b00      	cmp	r3, #0
 8003230:	d01d      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003236:	d111      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3304      	adds	r3, #4
 800323c:	2100      	movs	r1, #0
 800323e:	4618      	mov	r0, r3
 8003240:	f000 fcd6 	bl	8003bf0 <RCCEx_PLL2_Config>
 8003244:	4603      	mov	r3, r0
 8003246:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003248:	e012      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3324      	adds	r3, #36	; 0x24
 800324e:	2102      	movs	r1, #2
 8003250:	4618      	mov	r0, r3
 8003252:	f000 fd7f 	bl	8003d54 <RCCEx_PLL3_Config>
 8003256:	4603      	mov	r3, r0
 8003258:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800325a:	e009      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	75fb      	strb	r3, [r7, #23]
      break;
 8003260:	e006      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003262:	bf00      	nop
 8003264:	e004      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003266:	bf00      	nop
 8003268:	e002      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800326a:	bf00      	nop
 800326c:	e000      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800326e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003270:	7dfb      	ldrb	r3, [r7, #23]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10c      	bne.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003276:	4b05      	ldr	r3, [pc, #20]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003284:	4901      	ldr	r1, [pc, #4]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003286:	4313      	orrs	r3, r2
 8003288:	658b      	str	r3, [r1, #88]	; 0x58
 800328a:	e003      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800328c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003290:	7dfb      	ldrb	r3, [r7, #23]
 8003292:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800329c:	2b00      	cmp	r3, #0
 800329e:	d04b      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80032aa:	d02e      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80032ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80032b0:	d828      	bhi.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80032b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032b6:	d02a      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80032b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032bc:	d822      	bhi.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80032be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80032c2:	d026      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80032c4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80032c8:	d81c      	bhi.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80032ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032ce:	d010      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80032d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032d4:	d816      	bhi.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d01d      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80032da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032de:	d111      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3304      	adds	r3, #4
 80032e4:	2100      	movs	r1, #0
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 fc82 	bl	8003bf0 <RCCEx_PLL2_Config>
 80032ec:	4603      	mov	r3, r0
 80032ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80032f0:	e012      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3324      	adds	r3, #36	; 0x24
 80032f6:	2102      	movs	r1, #2
 80032f8:	4618      	mov	r0, r3
 80032fa:	f000 fd2b 	bl	8003d54 <RCCEx_PLL3_Config>
 80032fe:	4603      	mov	r3, r0
 8003300:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003302:	e009      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	75fb      	strb	r3, [r7, #23]
      break;
 8003308:	e006      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800330a:	bf00      	nop
 800330c:	e004      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800330e:	bf00      	nop
 8003310:	e002      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003312:	bf00      	nop
 8003314:	e000      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003316:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003318:	7dfb      	ldrb	r3, [r7, #23]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10a      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800331e:	4b9d      	ldr	r3, [pc, #628]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003322:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800332c:	4999      	ldr	r1, [pc, #612]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800332e:	4313      	orrs	r3, r2
 8003330:	658b      	str	r3, [r1, #88]	; 0x58
 8003332:	e001      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003334:	7dfb      	ldrb	r3, [r7, #23]
 8003336:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0308 	and.w	r3, r3, #8
 8003340:	2b00      	cmp	r3, #0
 8003342:	d01a      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800334a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800334e:	d10a      	bne.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3324      	adds	r3, #36	; 0x24
 8003354:	2102      	movs	r1, #2
 8003356:	4618      	mov	r0, r3
 8003358:	f000 fcfc 	bl	8003d54 <RCCEx_PLL3_Config>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003366:	4b8b      	ldr	r3, [pc, #556]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003374:	4987      	ldr	r1, [pc, #540]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003376:	4313      	orrs	r3, r2
 8003378:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0310 	and.w	r3, r3, #16
 8003382:	2b00      	cmp	r3, #0
 8003384:	d01a      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800338c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003390:	d10a      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3324      	adds	r3, #36	; 0x24
 8003396:	2102      	movs	r1, #2
 8003398:	4618      	mov	r0, r3
 800339a:	f000 fcdb 	bl	8003d54 <RCCEx_PLL3_Config>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033a8:	4b7a      	ldr	r3, [pc, #488]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033b6:	4977      	ldr	r1, [pc, #476]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d034      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80033ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033d2:	d01d      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80033d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033d8:	d817      	bhi.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80033de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e2:	d009      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80033e4:	e011      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	3304      	adds	r3, #4
 80033ea:	2100      	movs	r1, #0
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 fbff 	bl	8003bf0 <RCCEx_PLL2_Config>
 80033f2:	4603      	mov	r3, r0
 80033f4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80033f6:	e00c      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3324      	adds	r3, #36	; 0x24
 80033fc:	2102      	movs	r1, #2
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 fca8 	bl	8003d54 <RCCEx_PLL3_Config>
 8003404:	4603      	mov	r3, r0
 8003406:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003408:	e003      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	75fb      	strb	r3, [r7, #23]
      break;
 800340e:	e000      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003410:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003412:	7dfb      	ldrb	r3, [r7, #23]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10a      	bne.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003418:	4b5e      	ldr	r3, [pc, #376]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800341a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003426:	495b      	ldr	r1, [pc, #364]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003428:	4313      	orrs	r3, r2
 800342a:	658b      	str	r3, [r1, #88]	; 0x58
 800342c:	e001      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800342e:	7dfb      	ldrb	r3, [r7, #23]
 8003430:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d033      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003444:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003448:	d01c      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800344a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800344e:	d816      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003450:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003454:	d003      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003456:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800345a:	d007      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800345c:	e00f      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800345e:	4b4d      	ldr	r3, [pc, #308]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003462:	4a4c      	ldr	r2, [pc, #304]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003468:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800346a:	e00c      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3324      	adds	r3, #36	; 0x24
 8003470:	2101      	movs	r1, #1
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fc6e 	bl	8003d54 <RCCEx_PLL3_Config>
 8003478:	4603      	mov	r3, r0
 800347a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800347c:	e003      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	75fb      	strb	r3, [r7, #23]
      break;
 8003482:	e000      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003484:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003486:	7dfb      	ldrb	r3, [r7, #23]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10a      	bne.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800348c:	4b41      	ldr	r3, [pc, #260]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800348e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003490:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800349a:	493e      	ldr	r1, [pc, #248]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800349c:	4313      	orrs	r3, r2
 800349e:	654b      	str	r3, [r1, #84]	; 0x54
 80034a0:	e001      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a2:	7dfb      	ldrb	r3, [r7, #23]
 80034a4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d029      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80034ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034be:	d007      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80034c0:	e00f      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034c2:	4b34      	ldr	r3, [pc, #208]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c6:	4a33      	ldr	r2, [pc, #204]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80034ce:	e00b      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3304      	adds	r3, #4
 80034d4:	2102      	movs	r1, #2
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 fb8a 	bl	8003bf0 <RCCEx_PLL2_Config>
 80034dc:	4603      	mov	r3, r0
 80034de:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80034e0:	e002      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	75fb      	strb	r3, [r7, #23]
      break;
 80034e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034e8:	7dfb      	ldrb	r3, [r7, #23]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d109      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80034ee:	4b29      	ldr	r3, [pc, #164]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034fa:	4926      	ldr	r1, [pc, #152]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003500:	e001      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003502:	7dfb      	ldrb	r3, [r7, #23]
 8003504:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	3324      	adds	r3, #36	; 0x24
 8003516:	2102      	movs	r1, #2
 8003518:	4618      	mov	r0, r3
 800351a:	f000 fc1b 	bl	8003d54 <RCCEx_PLL3_Config>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d033      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003538:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800353c:	d017      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800353e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003542:	d811      	bhi.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003548:	d013      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800354a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800354e:	d80b      	bhi.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003550:	2b00      	cmp	r3, #0
 8003552:	d010      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003558:	d106      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800355a:	4b0e      	ldr	r3, [pc, #56]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355e:	4a0d      	ldr	r2, [pc, #52]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003564:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003566:	e007      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	75fb      	strb	r3, [r7, #23]
      break;
 800356c:	e004      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800356e:	bf00      	nop
 8003570:	e002      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003572:	bf00      	nop
 8003574:	e000      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003576:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003578:	7dfb      	ldrb	r3, [r7, #23]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10c      	bne.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800357e:	4b05      	ldr	r3, [pc, #20]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003582:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800358a:	4902      	ldr	r1, [pc, #8]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800358c:	4313      	orrs	r3, r2
 800358e:	654b      	str	r3, [r1, #84]	; 0x54
 8003590:	e004      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8003592:	bf00      	nop
 8003594:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003598:	7dfb      	ldrb	r3, [r7, #23]
 800359a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d008      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035a8:	4b31      	ldr	r3, [pc, #196]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80035aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b4:	492e      	ldr	r1, [pc, #184]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d009      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80035c6:	4b2a      	ldr	r3, [pc, #168]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80035d4:	4926      	ldr	r1, [pc, #152]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d008      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035e6:	4b22      	ldr	r3, [pc, #136]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80035e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035f2:	491f      	ldr	r1, [pc, #124]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00d      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003604:	4b1a      	ldr	r3, [pc, #104]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	4a19      	ldr	r2, [pc, #100]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800360a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800360e:	6113      	str	r3, [r2, #16]
 8003610:	4b17      	ldr	r3, [pc, #92]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003612:	691a      	ldr	r2, [r3, #16]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800361a:	4915      	ldr	r1, [pc, #84]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800361c:	4313      	orrs	r3, r2
 800361e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	da08      	bge.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003628:	4b11      	ldr	r3, [pc, #68]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800362a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800362c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003634:	490e      	ldr	r1, [pc, #56]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003636:	4313      	orrs	r3, r2
 8003638:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d009      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003646:	4b0a      	ldr	r3, [pc, #40]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003654:	4906      	ldr	r1, [pc, #24]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003656:	4313      	orrs	r3, r2
 8003658:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800365a:	7dbb      	ldrb	r3, [r7, #22]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8003660:	2300      	movs	r3, #0
 8003662:	e000      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
}
 8003666:	4618      	mov	r0, r3
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	58024400 	.word	0x58024400

08003674 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003678:	f7ff f818 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 800367c:	4602      	mov	r2, r0
 800367e:	4b06      	ldr	r3, [pc, #24]	; (8003698 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	091b      	lsrs	r3, r3, #4
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	4904      	ldr	r1, [pc, #16]	; (800369c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800368a:	5ccb      	ldrb	r3, [r1, r3]
 800368c:	f003 031f 	and.w	r3, r3, #31
 8003690:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003694:	4618      	mov	r0, r3
 8003696:	bd80      	pop	{r7, pc}
 8003698:	58024400 	.word	0x58024400
 800369c:	0802d5a8 	.word	0x0802d5a8

080036a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b089      	sub	sp, #36	; 0x24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80036a8:	4ba1      	ldr	r3, [pc, #644]	; (8003930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ac:	f003 0303 	and.w	r3, r3, #3
 80036b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80036b2:	4b9f      	ldr	r3, [pc, #636]	; (8003930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b6:	0b1b      	lsrs	r3, r3, #12
 80036b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80036be:	4b9c      	ldr	r3, [pc, #624]	; (8003930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c2:	091b      	lsrs	r3, r3, #4
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80036ca:	4b99      	ldr	r3, [pc, #612]	; (8003930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ce:	08db      	lsrs	r3, r3, #3
 80036d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	fb02 f303 	mul.w	r3, r2, r3
 80036da:	ee07 3a90 	vmov	s15, r3
 80036de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 8111 	beq.w	8003910 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	f000 8083 	beq.w	80037fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	f200 80a1 	bhi.w	8003840 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d056      	beq.n	80037b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800370a:	e099      	b.n	8003840 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800370c:	4b88      	ldr	r3, [pc, #544]	; (8003930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0320 	and.w	r3, r3, #32
 8003714:	2b00      	cmp	r3, #0
 8003716:	d02d      	beq.n	8003774 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003718:	4b85      	ldr	r3, [pc, #532]	; (8003930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	08db      	lsrs	r3, r3, #3
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	4a84      	ldr	r2, [pc, #528]	; (8003934 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003724:	fa22 f303 	lsr.w	r3, r2, r3
 8003728:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	ee07 3a90 	vmov	s15, r3
 8003730:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	ee07 3a90 	vmov	s15, r3
 800373a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800373e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003742:	4b7b      	ldr	r3, [pc, #492]	; (8003930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800374a:	ee07 3a90 	vmov	s15, r3
 800374e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003752:	ed97 6a03 	vldr	s12, [r7, #12]
 8003756:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003938 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800375a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800375e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800376a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800376e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003772:	e087      	b.n	8003884 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	ee07 3a90 	vmov	s15, r3
 800377a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800377e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800393c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003786:	4b6a      	ldr	r3, [pc, #424]	; (8003930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800378e:	ee07 3a90 	vmov	s15, r3
 8003792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003796:	ed97 6a03 	vldr	s12, [r7, #12]
 800379a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003938 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800379e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037b6:	e065      	b.n	8003884 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	ee07 3a90 	vmov	s15, r3
 80037be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003940 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80037c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ca:	4b59      	ldr	r3, [pc, #356]	; (8003930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d2:	ee07 3a90 	vmov	s15, r3
 80037d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037da:	ed97 6a03 	vldr	s12, [r7, #12]
 80037de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003938 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80037e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037fa:	e043      	b.n	8003884 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	ee07 3a90 	vmov	s15, r3
 8003802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003806:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003944 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800380a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800380e:	4b48      	ldr	r3, [pc, #288]	; (8003930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003816:	ee07 3a90 	vmov	s15, r3
 800381a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800381e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003822:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003938 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800382a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800382e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800383a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800383e:	e021      	b.n	8003884 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	ee07 3a90 	vmov	s15, r3
 8003846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800384a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003940 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800384e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003852:	4b37      	ldr	r3, [pc, #220]	; (8003930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800385a:	ee07 3a90 	vmov	s15, r3
 800385e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003862:	ed97 6a03 	vldr	s12, [r7, #12]
 8003866:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003938 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800386a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800386e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800387a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800387e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003882:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003884:	4b2a      	ldr	r3, [pc, #168]	; (8003930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003888:	0a5b      	lsrs	r3, r3, #9
 800388a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800388e:	ee07 3a90 	vmov	s15, r3
 8003892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003896:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800389a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800389e:	edd7 6a07 	vldr	s13, [r7, #28]
 80038a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038aa:	ee17 2a90 	vmov	r2, s15
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80038b2:	4b1f      	ldr	r3, [pc, #124]	; (8003930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b6:	0c1b      	lsrs	r3, r3, #16
 80038b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038bc:	ee07 3a90 	vmov	s15, r3
 80038c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80038d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038d8:	ee17 2a90 	vmov	r2, s15
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80038e0:	4b13      	ldr	r3, [pc, #76]	; (8003930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e4:	0e1b      	lsrs	r3, r3, #24
 80038e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038ea:	ee07 3a90 	vmov	s15, r3
 80038ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80038fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003902:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003906:	ee17 2a90 	vmov	r2, s15
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800390e:	e008      	b.n	8003922 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	609a      	str	r2, [r3, #8]
}
 8003922:	bf00      	nop
 8003924:	3724      	adds	r7, #36	; 0x24
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	58024400 	.word	0x58024400
 8003934:	03d09000 	.word	0x03d09000
 8003938:	46000000 	.word	0x46000000
 800393c:	4c742400 	.word	0x4c742400
 8003940:	4a742400 	.word	0x4a742400
 8003944:	4bbebc20 	.word	0x4bbebc20

08003948 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003948:	b480      	push	{r7}
 800394a:	b089      	sub	sp, #36	; 0x24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003950:	4ba1      	ldr	r3, [pc, #644]	; (8003bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	f003 0303 	and.w	r3, r3, #3
 8003958:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800395a:	4b9f      	ldr	r3, [pc, #636]	; (8003bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800395c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395e:	0d1b      	lsrs	r3, r3, #20
 8003960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003964:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003966:	4b9c      	ldr	r3, [pc, #624]	; (8003bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396a:	0a1b      	lsrs	r3, r3, #8
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003972:	4b99      	ldr	r3, [pc, #612]	; (8003bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003976:	08db      	lsrs	r3, r3, #3
 8003978:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	fb02 f303 	mul.w	r3, r2, r3
 8003982:	ee07 3a90 	vmov	s15, r3
 8003986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800398a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 8111 	beq.w	8003bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	2b02      	cmp	r3, #2
 800399a:	f000 8083 	beq.w	8003aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	f200 80a1 	bhi.w	8003ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d056      	beq.n	8003a60 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80039b2:	e099      	b.n	8003ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039b4:	4b88      	ldr	r3, [pc, #544]	; (8003bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0320 	and.w	r3, r3, #32
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d02d      	beq.n	8003a1c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80039c0:	4b85      	ldr	r3, [pc, #532]	; (8003bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	08db      	lsrs	r3, r3, #3
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	4a84      	ldr	r2, [pc, #528]	; (8003bdc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80039cc:	fa22 f303 	lsr.w	r3, r2, r3
 80039d0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	ee07 3a90 	vmov	s15, r3
 80039d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	ee07 3a90 	vmov	s15, r3
 80039e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ea:	4b7b      	ldr	r3, [pc, #492]	; (8003bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f2:	ee07 3a90 	vmov	s15, r3
 80039f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80039fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003be0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a16:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003a1a:	e087      	b.n	8003b2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	ee07 3a90 	vmov	s15, r3
 8003a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a26:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003be4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a2e:	4b6a      	ldr	r3, [pc, #424]	; (8003bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a36:	ee07 3a90 	vmov	s15, r3
 8003a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a42:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003be0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a5e:	e065      	b.n	8003b2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	ee07 3a90 	vmov	s15, r3
 8003a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a6a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a72:	4b59      	ldr	r3, [pc, #356]	; (8003bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a7a:	ee07 3a90 	vmov	s15, r3
 8003a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a82:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a86:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003be0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003aa2:	e043      	b.n	8003b2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	ee07 3a90 	vmov	s15, r3
 8003aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003bec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ab6:	4b48      	ldr	r3, [pc, #288]	; (8003bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003abe:	ee07 3a90 	vmov	s15, r3
 8003ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ac6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003aca:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003be0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ae6:	e021      	b.n	8003b2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	ee07 3a90 	vmov	s15, r3
 8003aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003afa:	4b37      	ldr	r3, [pc, #220]	; (8003bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b02:	ee07 3a90 	vmov	s15, r3
 8003b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b0e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003be0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b2a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003b2c:	4b2a      	ldr	r3, [pc, #168]	; (8003bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	0a5b      	lsrs	r3, r3, #9
 8003b32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b36:	ee07 3a90 	vmov	s15, r3
 8003b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b46:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b52:	ee17 2a90 	vmov	r2, s15
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003b5a:	4b1f      	ldr	r3, [pc, #124]	; (8003bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	0c1b      	lsrs	r3, r3, #16
 8003b60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b64:	ee07 3a90 	vmov	s15, r3
 8003b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b74:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b80:	ee17 2a90 	vmov	r2, s15
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003b88:	4b13      	ldr	r3, [pc, #76]	; (8003bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	0e1b      	lsrs	r3, r3, #24
 8003b8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b92:	ee07 3a90 	vmov	s15, r3
 8003b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ba2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bae:	ee17 2a90 	vmov	r2, s15
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003bb6:	e008      	b.n	8003bca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	609a      	str	r2, [r3, #8]
}
 8003bca:	bf00      	nop
 8003bcc:	3724      	adds	r7, #36	; 0x24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	58024400 	.word	0x58024400
 8003bdc:	03d09000 	.word	0x03d09000
 8003be0:	46000000 	.word	0x46000000
 8003be4:	4c742400 	.word	0x4c742400
 8003be8:	4a742400 	.word	0x4a742400
 8003bec:	4bbebc20 	.word	0x4bbebc20

08003bf0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003bfe:	4b53      	ldr	r3, [pc, #332]	; (8003d4c <RCCEx_PLL2_Config+0x15c>)
 8003c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	2b03      	cmp	r3, #3
 8003c08:	d101      	bne.n	8003c0e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e099      	b.n	8003d42 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003c0e:	4b4f      	ldr	r3, [pc, #316]	; (8003d4c <RCCEx_PLL2_Config+0x15c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a4e      	ldr	r2, [pc, #312]	; (8003d4c <RCCEx_PLL2_Config+0x15c>)
 8003c14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c1a:	f7fd fa19 	bl	8001050 <HAL_GetTick>
 8003c1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003c20:	e008      	b.n	8003c34 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003c22:	f7fd fa15 	bl	8001050 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e086      	b.n	8003d42 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003c34:	4b45      	ldr	r3, [pc, #276]	; (8003d4c <RCCEx_PLL2_Config+0x15c>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1f0      	bne.n	8003c22 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003c40:	4b42      	ldr	r3, [pc, #264]	; (8003d4c <RCCEx_PLL2_Config+0x15c>)
 8003c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c44:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	031b      	lsls	r3, r3, #12
 8003c4e:	493f      	ldr	r1, [pc, #252]	; (8003d4c <RCCEx_PLL2_Config+0x15c>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	628b      	str	r3, [r1, #40]	; 0x28
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	3b01      	subs	r3, #1
 8003c64:	025b      	lsls	r3, r3, #9
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	041b      	lsls	r3, r3, #16
 8003c72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	061b      	lsls	r3, r3, #24
 8003c80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c84:	4931      	ldr	r1, [pc, #196]	; (8003d4c <RCCEx_PLL2_Config+0x15c>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003c8a:	4b30      	ldr	r3, [pc, #192]	; (8003d4c <RCCEx_PLL2_Config+0x15c>)
 8003c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	492d      	ldr	r1, [pc, #180]	; (8003d4c <RCCEx_PLL2_Config+0x15c>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003c9c:	4b2b      	ldr	r3, [pc, #172]	; (8003d4c <RCCEx_PLL2_Config+0x15c>)
 8003c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca0:	f023 0220 	bic.w	r2, r3, #32
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	4928      	ldr	r1, [pc, #160]	; (8003d4c <RCCEx_PLL2_Config+0x15c>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003cae:	4b27      	ldr	r3, [pc, #156]	; (8003d4c <RCCEx_PLL2_Config+0x15c>)
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	4a26      	ldr	r2, [pc, #152]	; (8003d4c <RCCEx_PLL2_Config+0x15c>)
 8003cb4:	f023 0310 	bic.w	r3, r3, #16
 8003cb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003cba:	4b24      	ldr	r3, [pc, #144]	; (8003d4c <RCCEx_PLL2_Config+0x15c>)
 8003cbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cbe:	4b24      	ldr	r3, [pc, #144]	; (8003d50 <RCCEx_PLL2_Config+0x160>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	69d2      	ldr	r2, [r2, #28]
 8003cc6:	00d2      	lsls	r2, r2, #3
 8003cc8:	4920      	ldr	r1, [pc, #128]	; (8003d4c <RCCEx_PLL2_Config+0x15c>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003cce:	4b1f      	ldr	r3, [pc, #124]	; (8003d4c <RCCEx_PLL2_Config+0x15c>)
 8003cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd2:	4a1e      	ldr	r2, [pc, #120]	; (8003d4c <RCCEx_PLL2_Config+0x15c>)
 8003cd4:	f043 0310 	orr.w	r3, r3, #16
 8003cd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d106      	bne.n	8003cee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003ce0:	4b1a      	ldr	r3, [pc, #104]	; (8003d4c <RCCEx_PLL2_Config+0x15c>)
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	4a19      	ldr	r2, [pc, #100]	; (8003d4c <RCCEx_PLL2_Config+0x15c>)
 8003ce6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003cec:	e00f      	b.n	8003d0e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d106      	bne.n	8003d02 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003cf4:	4b15      	ldr	r3, [pc, #84]	; (8003d4c <RCCEx_PLL2_Config+0x15c>)
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	4a14      	ldr	r2, [pc, #80]	; (8003d4c <RCCEx_PLL2_Config+0x15c>)
 8003cfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cfe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d00:	e005      	b.n	8003d0e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003d02:	4b12      	ldr	r3, [pc, #72]	; (8003d4c <RCCEx_PLL2_Config+0x15c>)
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	4a11      	ldr	r2, [pc, #68]	; (8003d4c <RCCEx_PLL2_Config+0x15c>)
 8003d08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003d0e:	4b0f      	ldr	r3, [pc, #60]	; (8003d4c <RCCEx_PLL2_Config+0x15c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a0e      	ldr	r2, [pc, #56]	; (8003d4c <RCCEx_PLL2_Config+0x15c>)
 8003d14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d1a:	f7fd f999 	bl	8001050 <HAL_GetTick>
 8003d1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003d20:	e008      	b.n	8003d34 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003d22:	f7fd f995 	bl	8001050 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e006      	b.n	8003d42 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003d34:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <RCCEx_PLL2_Config+0x15c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0f0      	beq.n	8003d22 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	58024400 	.word	0x58024400
 8003d50:	ffff0007 	.word	0xffff0007

08003d54 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d62:	4b53      	ldr	r3, [pc, #332]	; (8003eb0 <RCCEx_PLL3_Config+0x15c>)
 8003d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	2b03      	cmp	r3, #3
 8003d6c:	d101      	bne.n	8003d72 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e099      	b.n	8003ea6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003d72:	4b4f      	ldr	r3, [pc, #316]	; (8003eb0 <RCCEx_PLL3_Config+0x15c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a4e      	ldr	r2, [pc, #312]	; (8003eb0 <RCCEx_PLL3_Config+0x15c>)
 8003d78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d7e:	f7fd f967 	bl	8001050 <HAL_GetTick>
 8003d82:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d84:	e008      	b.n	8003d98 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003d86:	f7fd f963 	bl	8001050 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e086      	b.n	8003ea6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d98:	4b45      	ldr	r3, [pc, #276]	; (8003eb0 <RCCEx_PLL3_Config+0x15c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1f0      	bne.n	8003d86 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003da4:	4b42      	ldr	r3, [pc, #264]	; (8003eb0 <RCCEx_PLL3_Config+0x15c>)
 8003da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	051b      	lsls	r3, r3, #20
 8003db2:	493f      	ldr	r1, [pc, #252]	; (8003eb0 <RCCEx_PLL3_Config+0x15c>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	628b      	str	r3, [r1, #40]	; 0x28
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	025b      	lsls	r3, r3, #9
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	041b      	lsls	r3, r3, #16
 8003dd6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	3b01      	subs	r3, #1
 8003de2:	061b      	lsls	r3, r3, #24
 8003de4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003de8:	4931      	ldr	r1, [pc, #196]	; (8003eb0 <RCCEx_PLL3_Config+0x15c>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003dee:	4b30      	ldr	r3, [pc, #192]	; (8003eb0 <RCCEx_PLL3_Config+0x15c>)
 8003df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	492d      	ldr	r1, [pc, #180]	; (8003eb0 <RCCEx_PLL3_Config+0x15c>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003e00:	4b2b      	ldr	r3, [pc, #172]	; (8003eb0 <RCCEx_PLL3_Config+0x15c>)
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	4928      	ldr	r1, [pc, #160]	; (8003eb0 <RCCEx_PLL3_Config+0x15c>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003e12:	4b27      	ldr	r3, [pc, #156]	; (8003eb0 <RCCEx_PLL3_Config+0x15c>)
 8003e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e16:	4a26      	ldr	r2, [pc, #152]	; (8003eb0 <RCCEx_PLL3_Config+0x15c>)
 8003e18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003e1e:	4b24      	ldr	r3, [pc, #144]	; (8003eb0 <RCCEx_PLL3_Config+0x15c>)
 8003e20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e22:	4b24      	ldr	r3, [pc, #144]	; (8003eb4 <RCCEx_PLL3_Config+0x160>)
 8003e24:	4013      	ands	r3, r2
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	69d2      	ldr	r2, [r2, #28]
 8003e2a:	00d2      	lsls	r2, r2, #3
 8003e2c:	4920      	ldr	r1, [pc, #128]	; (8003eb0 <RCCEx_PLL3_Config+0x15c>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003e32:	4b1f      	ldr	r3, [pc, #124]	; (8003eb0 <RCCEx_PLL3_Config+0x15c>)
 8003e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e36:	4a1e      	ldr	r2, [pc, #120]	; (8003eb0 <RCCEx_PLL3_Config+0x15c>)
 8003e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d106      	bne.n	8003e52 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003e44:	4b1a      	ldr	r3, [pc, #104]	; (8003eb0 <RCCEx_PLL3_Config+0x15c>)
 8003e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e48:	4a19      	ldr	r2, [pc, #100]	; (8003eb0 <RCCEx_PLL3_Config+0x15c>)
 8003e4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e50:	e00f      	b.n	8003e72 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d106      	bne.n	8003e66 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003e58:	4b15      	ldr	r3, [pc, #84]	; (8003eb0 <RCCEx_PLL3_Config+0x15c>)
 8003e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5c:	4a14      	ldr	r2, [pc, #80]	; (8003eb0 <RCCEx_PLL3_Config+0x15c>)
 8003e5e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e64:	e005      	b.n	8003e72 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003e66:	4b12      	ldr	r3, [pc, #72]	; (8003eb0 <RCCEx_PLL3_Config+0x15c>)
 8003e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6a:	4a11      	ldr	r2, [pc, #68]	; (8003eb0 <RCCEx_PLL3_Config+0x15c>)
 8003e6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e70:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003e72:	4b0f      	ldr	r3, [pc, #60]	; (8003eb0 <RCCEx_PLL3_Config+0x15c>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a0e      	ldr	r2, [pc, #56]	; (8003eb0 <RCCEx_PLL3_Config+0x15c>)
 8003e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e7e:	f7fd f8e7 	bl	8001050 <HAL_GetTick>
 8003e82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e84:	e008      	b.n	8003e98 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003e86:	f7fd f8e3 	bl	8001050 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e006      	b.n	8003ea6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e98:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <RCCEx_PLL3_Config+0x15c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f0      	beq.n	8003e86 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	58024400 	.word	0x58024400
 8003eb4:	ffff0007 	.word	0xffff0007

08003eb8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d067      	beq.n	8003f9a <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d106      	bne.n	8003ee4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7fc fe54 	bl	8000b8c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	22ca      	movs	r2, #202	; 0xca
 8003ef2:	625a      	str	r2, [r3, #36]	; 0x24
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2253      	movs	r2, #83	; 0x53
 8003efa:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 f879 	bl	8003ff4 <RTC_EnterInitMode>
 8003f02:	4603      	mov	r3, r0
 8003f04:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8003f06:	7bfb      	ldrb	r3, [r7, #15]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d13b      	bne.n	8003f84 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6899      	ldr	r1, [r3, #8]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	4b23      	ldr	r3, [pc, #140]	; (8003fa4 <HAL_RTC_Init+0xec>)
 8003f18:	400b      	ands	r3, r1
 8003f1a:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6899      	ldr	r1, [r3, #8]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	0419      	lsls	r1, r3, #16
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68da      	ldr	r2, [r3, #12]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f885 	bl	800405c <RTC_ExitInitMode>
 8003f52:	4603      	mov	r3, r0
 8003f54:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d113      	bne.n	8003f84 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0203 	bic.w	r2, r2, #3
 8003f6a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69da      	ldr	r2, [r3, #28]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	22ff      	movs	r2, #255	; 0xff
 8003f8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d103      	bne.n	8003f9a <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8003f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	ff8fffbf 	.word	0xff8fffbf

08003fa8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68da      	ldr	r2, [r3, #12]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fbe:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8003fc0:	f7fd f846 	bl	8001050 <HAL_GetTick>
 8003fc4:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003fc6:	e009      	b.n	8003fdc <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003fc8:	f7fd f842 	bl	8001050 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fd6:	d901      	bls.n	8003fdc <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e007      	b.n	8003fec <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f003 0320 	and.w	r3, r3, #32
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0ee      	beq.n	8003fc8 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400a:	2b00      	cmp	r3, #0
 800400c:	d120      	bne.n	8004050 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f04f 32ff 	mov.w	r2, #4294967295
 8004016:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004018:	f7fd f81a 	bl	8001050 <HAL_GetTick>
 800401c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800401e:	e00d      	b.n	800403c <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004020:	f7fd f816 	bl	8001050 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800402e:	d905      	bls.n	800403c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2203      	movs	r2, #3
 8004038:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004046:	2b00      	cmp	r3, #0
 8004048:	d102      	bne.n	8004050 <RTC_EnterInitMode+0x5c>
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	2b03      	cmp	r3, #3
 800404e:	d1e7      	bne.n	8004020 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8004050:	7bfb      	ldrb	r3, [r7, #15]
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
	...

0800405c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004064:	2300      	movs	r3, #0
 8004066:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8004068:	4b1a      	ldr	r3, [pc, #104]	; (80040d4 <RTC_ExitInitMode+0x78>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	4a19      	ldr	r2, [pc, #100]	; (80040d4 <RTC_ExitInitMode+0x78>)
 800406e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004072:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004074:	4b17      	ldr	r3, [pc, #92]	; (80040d4 <RTC_ExitInitMode+0x78>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 0320 	and.w	r3, r3, #32
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10c      	bne.n	800409a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7ff ff91 	bl	8003fa8 <HAL_RTC_WaitForSynchro>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d01e      	beq.n	80040ca <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2203      	movs	r2, #3
 8004090:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	73fb      	strb	r3, [r7, #15]
 8004098:	e017      	b.n	80040ca <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800409a:	4b0e      	ldr	r3, [pc, #56]	; (80040d4 <RTC_ExitInitMode+0x78>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	4a0d      	ldr	r2, [pc, #52]	; (80040d4 <RTC_ExitInitMode+0x78>)
 80040a0:	f023 0320 	bic.w	r3, r3, #32
 80040a4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff ff7e 	bl	8003fa8 <HAL_RTC_WaitForSynchro>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d005      	beq.n	80040be <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2203      	movs	r2, #3
 80040b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80040be:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <RTC_ExitInitMode+0x78>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	4a04      	ldr	r2, [pc, #16]	; (80040d4 <RTC_ExitInitMode+0x78>)
 80040c4:	f043 0320 	orr.w	r3, r3, #32
 80040c8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	58004000 	.word	0x58004000

080040d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e049      	b.n	800417e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d106      	bne.n	8004104 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f841 	bl	8004186 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3304      	adds	r3, #4
 8004114:	4619      	mov	r1, r3
 8004116:	4610      	mov	r0, r2
 8004118:	f000 fa00 	bl	800451c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
	...

0800419c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d001      	beq.n	80041b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e054      	b.n	800425e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a26      	ldr	r2, [pc, #152]	; (800426c <HAL_TIM_Base_Start_IT+0xd0>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d022      	beq.n	800421c <HAL_TIM_Base_Start_IT+0x80>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041de:	d01d      	beq.n	800421c <HAL_TIM_Base_Start_IT+0x80>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a22      	ldr	r2, [pc, #136]	; (8004270 <HAL_TIM_Base_Start_IT+0xd4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d018      	beq.n	800421c <HAL_TIM_Base_Start_IT+0x80>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a21      	ldr	r2, [pc, #132]	; (8004274 <HAL_TIM_Base_Start_IT+0xd8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d013      	beq.n	800421c <HAL_TIM_Base_Start_IT+0x80>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a1f      	ldr	r2, [pc, #124]	; (8004278 <HAL_TIM_Base_Start_IT+0xdc>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d00e      	beq.n	800421c <HAL_TIM_Base_Start_IT+0x80>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a1e      	ldr	r2, [pc, #120]	; (800427c <HAL_TIM_Base_Start_IT+0xe0>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d009      	beq.n	800421c <HAL_TIM_Base_Start_IT+0x80>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a1c      	ldr	r2, [pc, #112]	; (8004280 <HAL_TIM_Base_Start_IT+0xe4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d004      	beq.n	800421c <HAL_TIM_Base_Start_IT+0x80>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a1b      	ldr	r2, [pc, #108]	; (8004284 <HAL_TIM_Base_Start_IT+0xe8>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d115      	bne.n	8004248 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689a      	ldr	r2, [r3, #8]
 8004222:	4b19      	ldr	r3, [pc, #100]	; (8004288 <HAL_TIM_Base_Start_IT+0xec>)
 8004224:	4013      	ands	r3, r2
 8004226:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2b06      	cmp	r3, #6
 800422c:	d015      	beq.n	800425a <HAL_TIM_Base_Start_IT+0xbe>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004234:	d011      	beq.n	800425a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f042 0201 	orr.w	r2, r2, #1
 8004244:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004246:	e008      	b.n	800425a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	e000      	b.n	800425c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800425a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	40010000 	.word	0x40010000
 8004270:	40000400 	.word	0x40000400
 8004274:	40000800 	.word	0x40000800
 8004278:	40000c00 	.word	0x40000c00
 800427c:	40010400 	.word	0x40010400
 8004280:	40001800 	.word	0x40001800
 8004284:	40014000 	.word	0x40014000
 8004288:	00010007 	.word	0x00010007

0800428c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d122      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d11b      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f06f 0202 	mvn.w	r2, #2
 80042b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f905 	bl	80044de <HAL_TIM_IC_CaptureCallback>
 80042d4:	e005      	b.n	80042e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f8f7 	bl	80044ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f908 	bl	80044f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	f003 0304 	and.w	r3, r3, #4
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d122      	bne.n	800433c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b04      	cmp	r3, #4
 8004302:	d11b      	bne.n	800433c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f06f 0204 	mvn.w	r2, #4
 800430c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2202      	movs	r2, #2
 8004312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f8db 	bl	80044de <HAL_TIM_IC_CaptureCallback>
 8004328:	e005      	b.n	8004336 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f8cd 	bl	80044ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f8de 	bl	80044f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	f003 0308 	and.w	r3, r3, #8
 8004346:	2b08      	cmp	r3, #8
 8004348:	d122      	bne.n	8004390 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f003 0308 	and.w	r3, r3, #8
 8004354:	2b08      	cmp	r3, #8
 8004356:	d11b      	bne.n	8004390 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f06f 0208 	mvn.w	r2, #8
 8004360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2204      	movs	r2, #4
 8004366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	f003 0303 	and.w	r3, r3, #3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f8b1 	bl	80044de <HAL_TIM_IC_CaptureCallback>
 800437c:	e005      	b.n	800438a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f8a3 	bl	80044ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f8b4 	bl	80044f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	f003 0310 	and.w	r3, r3, #16
 800439a:	2b10      	cmp	r3, #16
 800439c:	d122      	bne.n	80043e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f003 0310 	and.w	r3, r3, #16
 80043a8:	2b10      	cmp	r3, #16
 80043aa:	d11b      	bne.n	80043e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f06f 0210 	mvn.w	r2, #16
 80043b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2208      	movs	r2, #8
 80043ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f887 	bl	80044de <HAL_TIM_IC_CaptureCallback>
 80043d0:	e005      	b.n	80043de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f879 	bl	80044ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f88a 	bl	80044f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d10e      	bne.n	8004410 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d107      	bne.n	8004410 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f06f 0201 	mvn.w	r2, #1
 8004408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7fc fb88 	bl	8000b20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441a:	2b80      	cmp	r3, #128	; 0x80
 800441c:	d10e      	bne.n	800443c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004428:	2b80      	cmp	r3, #128	; 0x80
 800442a:	d107      	bne.n	800443c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f914 	bl	8004664 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800444a:	d10e      	bne.n	800446a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004456:	2b80      	cmp	r3, #128	; 0x80
 8004458:	d107      	bne.n	800446a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f907 	bl	8004678 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004474:	2b40      	cmp	r3, #64	; 0x40
 8004476:	d10e      	bne.n	8004496 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004482:	2b40      	cmp	r3, #64	; 0x40
 8004484:	d107      	bne.n	8004496 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800448e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f838 	bl	8004506 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	f003 0320 	and.w	r3, r3, #32
 80044a0:	2b20      	cmp	r3, #32
 80044a2:	d10e      	bne.n	80044c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f003 0320 	and.w	r3, r3, #32
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	d107      	bne.n	80044c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f06f 0220 	mvn.w	r2, #32
 80044ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f8c7 	bl	8004650 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044c2:	bf00      	nop
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
	...

0800451c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a40      	ldr	r2, [pc, #256]	; (8004630 <TIM_Base_SetConfig+0x114>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d013      	beq.n	800455c <TIM_Base_SetConfig+0x40>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800453a:	d00f      	beq.n	800455c <TIM_Base_SetConfig+0x40>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a3d      	ldr	r2, [pc, #244]	; (8004634 <TIM_Base_SetConfig+0x118>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d00b      	beq.n	800455c <TIM_Base_SetConfig+0x40>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a3c      	ldr	r2, [pc, #240]	; (8004638 <TIM_Base_SetConfig+0x11c>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d007      	beq.n	800455c <TIM_Base_SetConfig+0x40>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a3b      	ldr	r2, [pc, #236]	; (800463c <TIM_Base_SetConfig+0x120>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d003      	beq.n	800455c <TIM_Base_SetConfig+0x40>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a3a      	ldr	r2, [pc, #232]	; (8004640 <TIM_Base_SetConfig+0x124>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d108      	bne.n	800456e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a2f      	ldr	r2, [pc, #188]	; (8004630 <TIM_Base_SetConfig+0x114>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d01f      	beq.n	80045b6 <TIM_Base_SetConfig+0x9a>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800457c:	d01b      	beq.n	80045b6 <TIM_Base_SetConfig+0x9a>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a2c      	ldr	r2, [pc, #176]	; (8004634 <TIM_Base_SetConfig+0x118>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d017      	beq.n	80045b6 <TIM_Base_SetConfig+0x9a>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a2b      	ldr	r2, [pc, #172]	; (8004638 <TIM_Base_SetConfig+0x11c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d013      	beq.n	80045b6 <TIM_Base_SetConfig+0x9a>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a2a      	ldr	r2, [pc, #168]	; (800463c <TIM_Base_SetConfig+0x120>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d00f      	beq.n	80045b6 <TIM_Base_SetConfig+0x9a>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a29      	ldr	r2, [pc, #164]	; (8004640 <TIM_Base_SetConfig+0x124>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d00b      	beq.n	80045b6 <TIM_Base_SetConfig+0x9a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a28      	ldr	r2, [pc, #160]	; (8004644 <TIM_Base_SetConfig+0x128>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d007      	beq.n	80045b6 <TIM_Base_SetConfig+0x9a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a27      	ldr	r2, [pc, #156]	; (8004648 <TIM_Base_SetConfig+0x12c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d003      	beq.n	80045b6 <TIM_Base_SetConfig+0x9a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a26      	ldr	r2, [pc, #152]	; (800464c <TIM_Base_SetConfig+0x130>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d108      	bne.n	80045c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a10      	ldr	r2, [pc, #64]	; (8004630 <TIM_Base_SetConfig+0x114>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d00f      	beq.n	8004614 <TIM_Base_SetConfig+0xf8>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a12      	ldr	r2, [pc, #72]	; (8004640 <TIM_Base_SetConfig+0x124>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d00b      	beq.n	8004614 <TIM_Base_SetConfig+0xf8>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a11      	ldr	r2, [pc, #68]	; (8004644 <TIM_Base_SetConfig+0x128>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d007      	beq.n	8004614 <TIM_Base_SetConfig+0xf8>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a10      	ldr	r2, [pc, #64]	; (8004648 <TIM_Base_SetConfig+0x12c>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d003      	beq.n	8004614 <TIM_Base_SetConfig+0xf8>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a0f      	ldr	r2, [pc, #60]	; (800464c <TIM_Base_SetConfig+0x130>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d103      	bne.n	800461c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	615a      	str	r2, [r3, #20]
}
 8004622:	bf00      	nop
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	40010000 	.word	0x40010000
 8004634:	40000400 	.word	0x40000400
 8004638:	40000800 	.word	0x40000800
 800463c:	40000c00 	.word	0x40000c00
 8004640:	40010400 	.word	0x40010400
 8004644:	40014000 	.word	0x40014000
 8004648:	40014400 	.word	0x40014400
 800464c:	40014800 	.word	0x40014800

08004650 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e042      	b.n	8004724 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d106      	bne.n	80046b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7fc fa9b 	bl	8000bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2224      	movs	r2, #36	; 0x24
 80046ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0201 	bic.w	r2, r2, #1
 80046cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f8c2 	bl	8004858 <UART_SetConfig>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d101      	bne.n	80046de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e022      	b.n	8004724 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fe1e 	bl	8005328 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689a      	ldr	r2, [r3, #8]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800470a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0201 	orr.w	r2, r2, #1
 800471a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 fea5 	bl	800546c <UART_CheckIdleState>
 8004722:	4603      	mov	r3, r0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b08a      	sub	sp, #40	; 0x28
 8004730:	af02      	add	r7, sp, #8
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	603b      	str	r3, [r7, #0]
 8004738:	4613      	mov	r3, r2
 800473a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004742:	2b20      	cmp	r3, #32
 8004744:	f040 8083 	bne.w	800484e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d002      	beq.n	8004754 <HAL_UART_Transmit+0x28>
 800474e:	88fb      	ldrh	r3, [r7, #6]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e07b      	b.n	8004850 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800475e:	2b01      	cmp	r3, #1
 8004760:	d101      	bne.n	8004766 <HAL_UART_Transmit+0x3a>
 8004762:	2302      	movs	r3, #2
 8004764:	e074      	b.n	8004850 <HAL_UART_Transmit+0x124>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2221      	movs	r2, #33	; 0x21
 800477a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800477e:	f7fc fc67 	bl	8001050 <HAL_GetTick>
 8004782:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	88fa      	ldrh	r2, [r7, #6]
 8004788:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	88fa      	ldrh	r2, [r7, #6]
 8004790:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800479c:	d108      	bne.n	80047b0 <HAL_UART_Transmit+0x84>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d104      	bne.n	80047b0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80047a6:	2300      	movs	r3, #0
 80047a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	61bb      	str	r3, [r7, #24]
 80047ae:	e003      	b.n	80047b8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047b4:	2300      	movs	r3, #0
 80047b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80047c0:	e02c      	b.n	800481c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2200      	movs	r2, #0
 80047ca:	2180      	movs	r1, #128	; 0x80
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 fe98 	bl	8005502 <UART_WaitOnFlagUntilTimeout>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e039      	b.n	8004850 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10b      	bne.n	80047fa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	881b      	ldrh	r3, [r3, #0]
 80047e6:	461a      	mov	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	3302      	adds	r3, #2
 80047f6:	61bb      	str	r3, [r7, #24]
 80047f8:	e007      	b.n	800480a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	781a      	ldrb	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	3301      	adds	r3, #1
 8004808:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004810:	b29b      	uxth	r3, r3
 8004812:	3b01      	subs	r3, #1
 8004814:	b29a      	uxth	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004822:	b29b      	uxth	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1cc      	bne.n	80047c2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	9300      	str	r3, [sp, #0]
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	2200      	movs	r2, #0
 8004830:	2140      	movs	r1, #64	; 0x40
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 fe65 	bl	8005502 <UART_WaitOnFlagUntilTimeout>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e006      	b.n	8004850 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2220      	movs	r2, #32
 8004846:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	e000      	b.n	8004850 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800484e:	2302      	movs	r3, #2
  }
}
 8004850:	4618      	mov	r0, r3
 8004852:	3720      	adds	r7, #32
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800485c:	b092      	sub	sp, #72	; 0x48
 800485e:	af00      	add	r7, sp, #0
 8004860:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	431a      	orrs	r2, r3
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	431a      	orrs	r2, r3
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	4313      	orrs	r3, r2
 800487e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	4bbe      	ldr	r3, [pc, #760]	; (8004b80 <UART_SetConfig+0x328>)
 8004888:	4013      	ands	r3, r2
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	6812      	ldr	r2, [r2, #0]
 800488e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004890:	430b      	orrs	r3, r1
 8004892:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	68da      	ldr	r2, [r3, #12]
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4ab3      	ldr	r2, [pc, #716]	; (8004b84 <UART_SetConfig+0x32c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d004      	beq.n	80048c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048c0:	4313      	orrs	r3, r2
 80048c2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689a      	ldr	r2, [r3, #8]
 80048ca:	4baf      	ldr	r3, [pc, #700]	; (8004b88 <UART_SetConfig+0x330>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	6812      	ldr	r2, [r2, #0]
 80048d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80048d4:	430b      	orrs	r3, r1
 80048d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048de:	f023 010f 	bic.w	r1, r3, #15
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4aa6      	ldr	r2, [pc, #664]	; (8004b8c <UART_SetConfig+0x334>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d177      	bne.n	80049e8 <UART_SetConfig+0x190>
 80048f8:	4ba5      	ldr	r3, [pc, #660]	; (8004b90 <UART_SetConfig+0x338>)
 80048fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004900:	2b28      	cmp	r3, #40	; 0x28
 8004902:	d86d      	bhi.n	80049e0 <UART_SetConfig+0x188>
 8004904:	a201      	add	r2, pc, #4	; (adr r2, 800490c <UART_SetConfig+0xb4>)
 8004906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490a:	bf00      	nop
 800490c:	080049b1 	.word	0x080049b1
 8004910:	080049e1 	.word	0x080049e1
 8004914:	080049e1 	.word	0x080049e1
 8004918:	080049e1 	.word	0x080049e1
 800491c:	080049e1 	.word	0x080049e1
 8004920:	080049e1 	.word	0x080049e1
 8004924:	080049e1 	.word	0x080049e1
 8004928:	080049e1 	.word	0x080049e1
 800492c:	080049b9 	.word	0x080049b9
 8004930:	080049e1 	.word	0x080049e1
 8004934:	080049e1 	.word	0x080049e1
 8004938:	080049e1 	.word	0x080049e1
 800493c:	080049e1 	.word	0x080049e1
 8004940:	080049e1 	.word	0x080049e1
 8004944:	080049e1 	.word	0x080049e1
 8004948:	080049e1 	.word	0x080049e1
 800494c:	080049c1 	.word	0x080049c1
 8004950:	080049e1 	.word	0x080049e1
 8004954:	080049e1 	.word	0x080049e1
 8004958:	080049e1 	.word	0x080049e1
 800495c:	080049e1 	.word	0x080049e1
 8004960:	080049e1 	.word	0x080049e1
 8004964:	080049e1 	.word	0x080049e1
 8004968:	080049e1 	.word	0x080049e1
 800496c:	080049c9 	.word	0x080049c9
 8004970:	080049e1 	.word	0x080049e1
 8004974:	080049e1 	.word	0x080049e1
 8004978:	080049e1 	.word	0x080049e1
 800497c:	080049e1 	.word	0x080049e1
 8004980:	080049e1 	.word	0x080049e1
 8004984:	080049e1 	.word	0x080049e1
 8004988:	080049e1 	.word	0x080049e1
 800498c:	080049d1 	.word	0x080049d1
 8004990:	080049e1 	.word	0x080049e1
 8004994:	080049e1 	.word	0x080049e1
 8004998:	080049e1 	.word	0x080049e1
 800499c:	080049e1 	.word	0x080049e1
 80049a0:	080049e1 	.word	0x080049e1
 80049a4:	080049e1 	.word	0x080049e1
 80049a8:	080049e1 	.word	0x080049e1
 80049ac:	080049d9 	.word	0x080049d9
 80049b0:	2301      	movs	r3, #1
 80049b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049b6:	e222      	b.n	8004dfe <UART_SetConfig+0x5a6>
 80049b8:	2304      	movs	r3, #4
 80049ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049be:	e21e      	b.n	8004dfe <UART_SetConfig+0x5a6>
 80049c0:	2308      	movs	r3, #8
 80049c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049c6:	e21a      	b.n	8004dfe <UART_SetConfig+0x5a6>
 80049c8:	2310      	movs	r3, #16
 80049ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049ce:	e216      	b.n	8004dfe <UART_SetConfig+0x5a6>
 80049d0:	2320      	movs	r3, #32
 80049d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049d6:	e212      	b.n	8004dfe <UART_SetConfig+0x5a6>
 80049d8:	2340      	movs	r3, #64	; 0x40
 80049da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049de:	e20e      	b.n	8004dfe <UART_SetConfig+0x5a6>
 80049e0:	2380      	movs	r3, #128	; 0x80
 80049e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049e6:	e20a      	b.n	8004dfe <UART_SetConfig+0x5a6>
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a69      	ldr	r2, [pc, #420]	; (8004b94 <UART_SetConfig+0x33c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d130      	bne.n	8004a54 <UART_SetConfig+0x1fc>
 80049f2:	4b67      	ldr	r3, [pc, #412]	; (8004b90 <UART_SetConfig+0x338>)
 80049f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	2b05      	cmp	r3, #5
 80049fc:	d826      	bhi.n	8004a4c <UART_SetConfig+0x1f4>
 80049fe:	a201      	add	r2, pc, #4	; (adr r2, 8004a04 <UART_SetConfig+0x1ac>)
 8004a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a04:	08004a1d 	.word	0x08004a1d
 8004a08:	08004a25 	.word	0x08004a25
 8004a0c:	08004a2d 	.word	0x08004a2d
 8004a10:	08004a35 	.word	0x08004a35
 8004a14:	08004a3d 	.word	0x08004a3d
 8004a18:	08004a45 	.word	0x08004a45
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a22:	e1ec      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004a24:	2304      	movs	r3, #4
 8004a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a2a:	e1e8      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004a2c:	2308      	movs	r3, #8
 8004a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a32:	e1e4      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004a34:	2310      	movs	r3, #16
 8004a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a3a:	e1e0      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004a3c:	2320      	movs	r3, #32
 8004a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a42:	e1dc      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004a44:	2340      	movs	r3, #64	; 0x40
 8004a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a4a:	e1d8      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004a4c:	2380      	movs	r3, #128	; 0x80
 8004a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a52:	e1d4      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a4f      	ldr	r2, [pc, #316]	; (8004b98 <UART_SetConfig+0x340>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d130      	bne.n	8004ac0 <UART_SetConfig+0x268>
 8004a5e:	4b4c      	ldr	r3, [pc, #304]	; (8004b90 <UART_SetConfig+0x338>)
 8004a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a62:	f003 0307 	and.w	r3, r3, #7
 8004a66:	2b05      	cmp	r3, #5
 8004a68:	d826      	bhi.n	8004ab8 <UART_SetConfig+0x260>
 8004a6a:	a201      	add	r2, pc, #4	; (adr r2, 8004a70 <UART_SetConfig+0x218>)
 8004a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a70:	08004a89 	.word	0x08004a89
 8004a74:	08004a91 	.word	0x08004a91
 8004a78:	08004a99 	.word	0x08004a99
 8004a7c:	08004aa1 	.word	0x08004aa1
 8004a80:	08004aa9 	.word	0x08004aa9
 8004a84:	08004ab1 	.word	0x08004ab1
 8004a88:	2300      	movs	r3, #0
 8004a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a8e:	e1b6      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004a90:	2304      	movs	r3, #4
 8004a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a96:	e1b2      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004a98:	2308      	movs	r3, #8
 8004a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a9e:	e1ae      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004aa0:	2310      	movs	r3, #16
 8004aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aa6:	e1aa      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004aa8:	2320      	movs	r3, #32
 8004aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aae:	e1a6      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004ab0:	2340      	movs	r3, #64	; 0x40
 8004ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ab6:	e1a2      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004ab8:	2380      	movs	r3, #128	; 0x80
 8004aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004abe:	e19e      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a35      	ldr	r2, [pc, #212]	; (8004b9c <UART_SetConfig+0x344>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d130      	bne.n	8004b2c <UART_SetConfig+0x2d4>
 8004aca:	4b31      	ldr	r3, [pc, #196]	; (8004b90 <UART_SetConfig+0x338>)
 8004acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ace:	f003 0307 	and.w	r3, r3, #7
 8004ad2:	2b05      	cmp	r3, #5
 8004ad4:	d826      	bhi.n	8004b24 <UART_SetConfig+0x2cc>
 8004ad6:	a201      	add	r2, pc, #4	; (adr r2, 8004adc <UART_SetConfig+0x284>)
 8004ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004adc:	08004af5 	.word	0x08004af5
 8004ae0:	08004afd 	.word	0x08004afd
 8004ae4:	08004b05 	.word	0x08004b05
 8004ae8:	08004b0d 	.word	0x08004b0d
 8004aec:	08004b15 	.word	0x08004b15
 8004af0:	08004b1d 	.word	0x08004b1d
 8004af4:	2300      	movs	r3, #0
 8004af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004afa:	e180      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004afc:	2304      	movs	r3, #4
 8004afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b02:	e17c      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004b04:	2308      	movs	r3, #8
 8004b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b0a:	e178      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004b0c:	2310      	movs	r3, #16
 8004b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b12:	e174      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004b14:	2320      	movs	r3, #32
 8004b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b1a:	e170      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004b1c:	2340      	movs	r3, #64	; 0x40
 8004b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b22:	e16c      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004b24:	2380      	movs	r3, #128	; 0x80
 8004b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b2a:	e168      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a1b      	ldr	r2, [pc, #108]	; (8004ba0 <UART_SetConfig+0x348>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d142      	bne.n	8004bbc <UART_SetConfig+0x364>
 8004b36:	4b16      	ldr	r3, [pc, #88]	; (8004b90 <UART_SetConfig+0x338>)
 8004b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	2b05      	cmp	r3, #5
 8004b40:	d838      	bhi.n	8004bb4 <UART_SetConfig+0x35c>
 8004b42:	a201      	add	r2, pc, #4	; (adr r2, 8004b48 <UART_SetConfig+0x2f0>)
 8004b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b48:	08004b61 	.word	0x08004b61
 8004b4c:	08004b69 	.word	0x08004b69
 8004b50:	08004b71 	.word	0x08004b71
 8004b54:	08004b79 	.word	0x08004b79
 8004b58:	08004ba5 	.word	0x08004ba5
 8004b5c:	08004bad 	.word	0x08004bad
 8004b60:	2300      	movs	r3, #0
 8004b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b66:	e14a      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004b68:	2304      	movs	r3, #4
 8004b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b6e:	e146      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004b70:	2308      	movs	r3, #8
 8004b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b76:	e142      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004b78:	2310      	movs	r3, #16
 8004b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b7e:	e13e      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004b80:	cfff69f3 	.word	0xcfff69f3
 8004b84:	58000c00 	.word	0x58000c00
 8004b88:	11fff4ff 	.word	0x11fff4ff
 8004b8c:	40011000 	.word	0x40011000
 8004b90:	58024400 	.word	0x58024400
 8004b94:	40004400 	.word	0x40004400
 8004b98:	40004800 	.word	0x40004800
 8004b9c:	40004c00 	.word	0x40004c00
 8004ba0:	40005000 	.word	0x40005000
 8004ba4:	2320      	movs	r3, #32
 8004ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004baa:	e128      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004bac:	2340      	movs	r3, #64	; 0x40
 8004bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bb2:	e124      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004bb4:	2380      	movs	r3, #128	; 0x80
 8004bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bba:	e120      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4acb      	ldr	r2, [pc, #812]	; (8004ef0 <UART_SetConfig+0x698>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d176      	bne.n	8004cb4 <UART_SetConfig+0x45c>
 8004bc6:	4bcb      	ldr	r3, [pc, #812]	; (8004ef4 <UART_SetConfig+0x69c>)
 8004bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bce:	2b28      	cmp	r3, #40	; 0x28
 8004bd0:	d86c      	bhi.n	8004cac <UART_SetConfig+0x454>
 8004bd2:	a201      	add	r2, pc, #4	; (adr r2, 8004bd8 <UART_SetConfig+0x380>)
 8004bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd8:	08004c7d 	.word	0x08004c7d
 8004bdc:	08004cad 	.word	0x08004cad
 8004be0:	08004cad 	.word	0x08004cad
 8004be4:	08004cad 	.word	0x08004cad
 8004be8:	08004cad 	.word	0x08004cad
 8004bec:	08004cad 	.word	0x08004cad
 8004bf0:	08004cad 	.word	0x08004cad
 8004bf4:	08004cad 	.word	0x08004cad
 8004bf8:	08004c85 	.word	0x08004c85
 8004bfc:	08004cad 	.word	0x08004cad
 8004c00:	08004cad 	.word	0x08004cad
 8004c04:	08004cad 	.word	0x08004cad
 8004c08:	08004cad 	.word	0x08004cad
 8004c0c:	08004cad 	.word	0x08004cad
 8004c10:	08004cad 	.word	0x08004cad
 8004c14:	08004cad 	.word	0x08004cad
 8004c18:	08004c8d 	.word	0x08004c8d
 8004c1c:	08004cad 	.word	0x08004cad
 8004c20:	08004cad 	.word	0x08004cad
 8004c24:	08004cad 	.word	0x08004cad
 8004c28:	08004cad 	.word	0x08004cad
 8004c2c:	08004cad 	.word	0x08004cad
 8004c30:	08004cad 	.word	0x08004cad
 8004c34:	08004cad 	.word	0x08004cad
 8004c38:	08004c95 	.word	0x08004c95
 8004c3c:	08004cad 	.word	0x08004cad
 8004c40:	08004cad 	.word	0x08004cad
 8004c44:	08004cad 	.word	0x08004cad
 8004c48:	08004cad 	.word	0x08004cad
 8004c4c:	08004cad 	.word	0x08004cad
 8004c50:	08004cad 	.word	0x08004cad
 8004c54:	08004cad 	.word	0x08004cad
 8004c58:	08004c9d 	.word	0x08004c9d
 8004c5c:	08004cad 	.word	0x08004cad
 8004c60:	08004cad 	.word	0x08004cad
 8004c64:	08004cad 	.word	0x08004cad
 8004c68:	08004cad 	.word	0x08004cad
 8004c6c:	08004cad 	.word	0x08004cad
 8004c70:	08004cad 	.word	0x08004cad
 8004c74:	08004cad 	.word	0x08004cad
 8004c78:	08004ca5 	.word	0x08004ca5
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c82:	e0bc      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004c84:	2304      	movs	r3, #4
 8004c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c8a:	e0b8      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004c8c:	2308      	movs	r3, #8
 8004c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c92:	e0b4      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004c94:	2310      	movs	r3, #16
 8004c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c9a:	e0b0      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004c9c:	2320      	movs	r3, #32
 8004c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ca2:	e0ac      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004ca4:	2340      	movs	r3, #64	; 0x40
 8004ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004caa:	e0a8      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004cac:	2380      	movs	r3, #128	; 0x80
 8004cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cb2:	e0a4      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a8f      	ldr	r2, [pc, #572]	; (8004ef8 <UART_SetConfig+0x6a0>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d130      	bne.n	8004d20 <UART_SetConfig+0x4c8>
 8004cbe:	4b8d      	ldr	r3, [pc, #564]	; (8004ef4 <UART_SetConfig+0x69c>)
 8004cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc2:	f003 0307 	and.w	r3, r3, #7
 8004cc6:	2b05      	cmp	r3, #5
 8004cc8:	d826      	bhi.n	8004d18 <UART_SetConfig+0x4c0>
 8004cca:	a201      	add	r2, pc, #4	; (adr r2, 8004cd0 <UART_SetConfig+0x478>)
 8004ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd0:	08004ce9 	.word	0x08004ce9
 8004cd4:	08004cf1 	.word	0x08004cf1
 8004cd8:	08004cf9 	.word	0x08004cf9
 8004cdc:	08004d01 	.word	0x08004d01
 8004ce0:	08004d09 	.word	0x08004d09
 8004ce4:	08004d11 	.word	0x08004d11
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cee:	e086      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004cf0:	2304      	movs	r3, #4
 8004cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cf6:	e082      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004cf8:	2308      	movs	r3, #8
 8004cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cfe:	e07e      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004d00:	2310      	movs	r3, #16
 8004d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d06:	e07a      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004d08:	2320      	movs	r3, #32
 8004d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d0e:	e076      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004d10:	2340      	movs	r3, #64	; 0x40
 8004d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d16:	e072      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004d18:	2380      	movs	r3, #128	; 0x80
 8004d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d1e:	e06e      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a75      	ldr	r2, [pc, #468]	; (8004efc <UART_SetConfig+0x6a4>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d130      	bne.n	8004d8c <UART_SetConfig+0x534>
 8004d2a:	4b72      	ldr	r3, [pc, #456]	; (8004ef4 <UART_SetConfig+0x69c>)
 8004d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2e:	f003 0307 	and.w	r3, r3, #7
 8004d32:	2b05      	cmp	r3, #5
 8004d34:	d826      	bhi.n	8004d84 <UART_SetConfig+0x52c>
 8004d36:	a201      	add	r2, pc, #4	; (adr r2, 8004d3c <UART_SetConfig+0x4e4>)
 8004d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3c:	08004d55 	.word	0x08004d55
 8004d40:	08004d5d 	.word	0x08004d5d
 8004d44:	08004d65 	.word	0x08004d65
 8004d48:	08004d6d 	.word	0x08004d6d
 8004d4c:	08004d75 	.word	0x08004d75
 8004d50:	08004d7d 	.word	0x08004d7d
 8004d54:	2300      	movs	r3, #0
 8004d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d5a:	e050      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004d5c:	2304      	movs	r3, #4
 8004d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d62:	e04c      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004d64:	2308      	movs	r3, #8
 8004d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d6a:	e048      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004d6c:	2310      	movs	r3, #16
 8004d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d72:	e044      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004d74:	2320      	movs	r3, #32
 8004d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d7a:	e040      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004d7c:	2340      	movs	r3, #64	; 0x40
 8004d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d82:	e03c      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004d84:	2380      	movs	r3, #128	; 0x80
 8004d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d8a:	e038      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a5b      	ldr	r2, [pc, #364]	; (8004f00 <UART_SetConfig+0x6a8>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d130      	bne.n	8004df8 <UART_SetConfig+0x5a0>
 8004d96:	4b57      	ldr	r3, [pc, #348]	; (8004ef4 <UART_SetConfig+0x69c>)
 8004d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d9a:	f003 0307 	and.w	r3, r3, #7
 8004d9e:	2b05      	cmp	r3, #5
 8004da0:	d826      	bhi.n	8004df0 <UART_SetConfig+0x598>
 8004da2:	a201      	add	r2, pc, #4	; (adr r2, 8004da8 <UART_SetConfig+0x550>)
 8004da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da8:	08004dc1 	.word	0x08004dc1
 8004dac:	08004dc9 	.word	0x08004dc9
 8004db0:	08004dd1 	.word	0x08004dd1
 8004db4:	08004dd9 	.word	0x08004dd9
 8004db8:	08004de1 	.word	0x08004de1
 8004dbc:	08004de9 	.word	0x08004de9
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dc6:	e01a      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004dc8:	2304      	movs	r3, #4
 8004dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dce:	e016      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004dd0:	2308      	movs	r3, #8
 8004dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dd6:	e012      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004dd8:	2310      	movs	r3, #16
 8004dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dde:	e00e      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004de0:	2320      	movs	r3, #32
 8004de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004de6:	e00a      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004de8:	2340      	movs	r3, #64	; 0x40
 8004dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dee:	e006      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004df0:	2380      	movs	r3, #128	; 0x80
 8004df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004df6:	e002      	b.n	8004dfe <UART_SetConfig+0x5a6>
 8004df8:	2380      	movs	r3, #128	; 0x80
 8004dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a3f      	ldr	r2, [pc, #252]	; (8004f00 <UART_SetConfig+0x6a8>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	f040 80f8 	bne.w	8004ffa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e0a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004e0e:	2b20      	cmp	r3, #32
 8004e10:	dc46      	bgt.n	8004ea0 <UART_SetConfig+0x648>
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	f2c0 8082 	blt.w	8004f1c <UART_SetConfig+0x6c4>
 8004e18:	3b02      	subs	r3, #2
 8004e1a:	2b1e      	cmp	r3, #30
 8004e1c:	d87e      	bhi.n	8004f1c <UART_SetConfig+0x6c4>
 8004e1e:	a201      	add	r2, pc, #4	; (adr r2, 8004e24 <UART_SetConfig+0x5cc>)
 8004e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e24:	08004ea7 	.word	0x08004ea7
 8004e28:	08004f1d 	.word	0x08004f1d
 8004e2c:	08004eaf 	.word	0x08004eaf
 8004e30:	08004f1d 	.word	0x08004f1d
 8004e34:	08004f1d 	.word	0x08004f1d
 8004e38:	08004f1d 	.word	0x08004f1d
 8004e3c:	08004ebf 	.word	0x08004ebf
 8004e40:	08004f1d 	.word	0x08004f1d
 8004e44:	08004f1d 	.word	0x08004f1d
 8004e48:	08004f1d 	.word	0x08004f1d
 8004e4c:	08004f1d 	.word	0x08004f1d
 8004e50:	08004f1d 	.word	0x08004f1d
 8004e54:	08004f1d 	.word	0x08004f1d
 8004e58:	08004f1d 	.word	0x08004f1d
 8004e5c:	08004ecf 	.word	0x08004ecf
 8004e60:	08004f1d 	.word	0x08004f1d
 8004e64:	08004f1d 	.word	0x08004f1d
 8004e68:	08004f1d 	.word	0x08004f1d
 8004e6c:	08004f1d 	.word	0x08004f1d
 8004e70:	08004f1d 	.word	0x08004f1d
 8004e74:	08004f1d 	.word	0x08004f1d
 8004e78:	08004f1d 	.word	0x08004f1d
 8004e7c:	08004f1d 	.word	0x08004f1d
 8004e80:	08004f1d 	.word	0x08004f1d
 8004e84:	08004f1d 	.word	0x08004f1d
 8004e88:	08004f1d 	.word	0x08004f1d
 8004e8c:	08004f1d 	.word	0x08004f1d
 8004e90:	08004f1d 	.word	0x08004f1d
 8004e94:	08004f1d 	.word	0x08004f1d
 8004e98:	08004f1d 	.word	0x08004f1d
 8004e9c:	08004f0f 	.word	0x08004f0f
 8004ea0:	2b40      	cmp	r3, #64	; 0x40
 8004ea2:	d037      	beq.n	8004f14 <UART_SetConfig+0x6bc>
 8004ea4:	e03a      	b.n	8004f1c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004ea6:	f7fe fbe5 	bl	8003674 <HAL_RCCEx_GetD3PCLK1Freq>
 8004eaa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004eac:	e03c      	b.n	8004f28 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fe fbf4 	bl	80036a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ebc:	e034      	b.n	8004f28 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ebe:	f107 0318 	add.w	r3, r7, #24
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7fe fd40 	bl	8003948 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ecc:	e02c      	b.n	8004f28 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ece:	4b09      	ldr	r3, [pc, #36]	; (8004ef4 <UART_SetConfig+0x69c>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0320 	and.w	r3, r3, #32
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d016      	beq.n	8004f08 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004eda:	4b06      	ldr	r3, [pc, #24]	; (8004ef4 <UART_SetConfig+0x69c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	08db      	lsrs	r3, r3, #3
 8004ee0:	f003 0303 	and.w	r3, r3, #3
 8004ee4:	4a07      	ldr	r2, [pc, #28]	; (8004f04 <UART_SetConfig+0x6ac>)
 8004ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004eec:	e01c      	b.n	8004f28 <UART_SetConfig+0x6d0>
 8004eee:	bf00      	nop
 8004ef0:	40011400 	.word	0x40011400
 8004ef4:	58024400 	.word	0x58024400
 8004ef8:	40007800 	.word	0x40007800
 8004efc:	40007c00 	.word	0x40007c00
 8004f00:	58000c00 	.word	0x58000c00
 8004f04:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004f08:	4b9d      	ldr	r3, [pc, #628]	; (8005180 <UART_SetConfig+0x928>)
 8004f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f0c:	e00c      	b.n	8004f28 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004f0e:	4b9d      	ldr	r3, [pc, #628]	; (8005184 <UART_SetConfig+0x92c>)
 8004f10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f12:	e009      	b.n	8004f28 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f1a:	e005      	b.n	8004f28 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004f26:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 81de 	beq.w	80052ec <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	4a94      	ldr	r2, [pc, #592]	; (8005188 <UART_SetConfig+0x930>)
 8004f36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f42:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	4413      	add	r3, r2
 8004f4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d305      	bcc.n	8004f60 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d903      	bls.n	8004f68 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004f66:	e1c1      	b.n	80052ec <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	60bb      	str	r3, [r7, #8]
 8004f6e:	60fa      	str	r2, [r7, #12]
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f74:	4a84      	ldr	r2, [pc, #528]	; (8005188 <UART_SetConfig+0x930>)
 8004f76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	603b      	str	r3, [r7, #0]
 8004f80:	607a      	str	r2, [r7, #4]
 8004f82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f8a:	f7fb fa01 	bl	8000390 <__aeabi_uldivmod>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	460b      	mov	r3, r1
 8004f92:	4610      	mov	r0, r2
 8004f94:	4619      	mov	r1, r3
 8004f96:	f04f 0200 	mov.w	r2, #0
 8004f9a:	f04f 0300 	mov.w	r3, #0
 8004f9e:	020b      	lsls	r3, r1, #8
 8004fa0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004fa4:	0202      	lsls	r2, r0, #8
 8004fa6:	6979      	ldr	r1, [r7, #20]
 8004fa8:	6849      	ldr	r1, [r1, #4]
 8004faa:	0849      	lsrs	r1, r1, #1
 8004fac:	2000      	movs	r0, #0
 8004fae:	460c      	mov	r4, r1
 8004fb0:	4605      	mov	r5, r0
 8004fb2:	eb12 0804 	adds.w	r8, r2, r4
 8004fb6:	eb43 0905 	adc.w	r9, r3, r5
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	469a      	mov	sl, r3
 8004fc2:	4693      	mov	fp, r2
 8004fc4:	4652      	mov	r2, sl
 8004fc6:	465b      	mov	r3, fp
 8004fc8:	4640      	mov	r0, r8
 8004fca:	4649      	mov	r1, r9
 8004fcc:	f7fb f9e0 	bl	8000390 <__aeabi_uldivmod>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fde:	d308      	bcc.n	8004ff2 <UART_SetConfig+0x79a>
 8004fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fe6:	d204      	bcs.n	8004ff2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fee:	60da      	str	r2, [r3, #12]
 8004ff0:	e17c      	b.n	80052ec <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004ff8:	e178      	b.n	80052ec <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005002:	f040 80c5 	bne.w	8005190 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005006:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800500a:	2b20      	cmp	r3, #32
 800500c:	dc48      	bgt.n	80050a0 <UART_SetConfig+0x848>
 800500e:	2b00      	cmp	r3, #0
 8005010:	db7b      	blt.n	800510a <UART_SetConfig+0x8b2>
 8005012:	2b20      	cmp	r3, #32
 8005014:	d879      	bhi.n	800510a <UART_SetConfig+0x8b2>
 8005016:	a201      	add	r2, pc, #4	; (adr r2, 800501c <UART_SetConfig+0x7c4>)
 8005018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501c:	080050a7 	.word	0x080050a7
 8005020:	080050af 	.word	0x080050af
 8005024:	0800510b 	.word	0x0800510b
 8005028:	0800510b 	.word	0x0800510b
 800502c:	080050b7 	.word	0x080050b7
 8005030:	0800510b 	.word	0x0800510b
 8005034:	0800510b 	.word	0x0800510b
 8005038:	0800510b 	.word	0x0800510b
 800503c:	080050c7 	.word	0x080050c7
 8005040:	0800510b 	.word	0x0800510b
 8005044:	0800510b 	.word	0x0800510b
 8005048:	0800510b 	.word	0x0800510b
 800504c:	0800510b 	.word	0x0800510b
 8005050:	0800510b 	.word	0x0800510b
 8005054:	0800510b 	.word	0x0800510b
 8005058:	0800510b 	.word	0x0800510b
 800505c:	080050d7 	.word	0x080050d7
 8005060:	0800510b 	.word	0x0800510b
 8005064:	0800510b 	.word	0x0800510b
 8005068:	0800510b 	.word	0x0800510b
 800506c:	0800510b 	.word	0x0800510b
 8005070:	0800510b 	.word	0x0800510b
 8005074:	0800510b 	.word	0x0800510b
 8005078:	0800510b 	.word	0x0800510b
 800507c:	0800510b 	.word	0x0800510b
 8005080:	0800510b 	.word	0x0800510b
 8005084:	0800510b 	.word	0x0800510b
 8005088:	0800510b 	.word	0x0800510b
 800508c:	0800510b 	.word	0x0800510b
 8005090:	0800510b 	.word	0x0800510b
 8005094:	0800510b 	.word	0x0800510b
 8005098:	0800510b 	.word	0x0800510b
 800509c:	080050fd 	.word	0x080050fd
 80050a0:	2b40      	cmp	r3, #64	; 0x40
 80050a2:	d02e      	beq.n	8005102 <UART_SetConfig+0x8aa>
 80050a4:	e031      	b.n	800510a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050a6:	f7fd fb31 	bl	800270c <HAL_RCC_GetPCLK1Freq>
 80050aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80050ac:	e033      	b.n	8005116 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050ae:	f7fd fb43 	bl	8002738 <HAL_RCC_GetPCLK2Freq>
 80050b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80050b4:	e02f      	b.n	8005116 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7fe faf0 	bl	80036a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80050c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050c4:	e027      	b.n	8005116 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050c6:	f107 0318 	add.w	r3, r7, #24
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fe fc3c 	bl	8003948 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050d4:	e01f      	b.n	8005116 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050d6:	4b2d      	ldr	r3, [pc, #180]	; (800518c <UART_SetConfig+0x934>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0320 	and.w	r3, r3, #32
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d009      	beq.n	80050f6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80050e2:	4b2a      	ldr	r3, [pc, #168]	; (800518c <UART_SetConfig+0x934>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	08db      	lsrs	r3, r3, #3
 80050e8:	f003 0303 	and.w	r3, r3, #3
 80050ec:	4a24      	ldr	r2, [pc, #144]	; (8005180 <UART_SetConfig+0x928>)
 80050ee:	fa22 f303 	lsr.w	r3, r2, r3
 80050f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80050f4:	e00f      	b.n	8005116 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80050f6:	4b22      	ldr	r3, [pc, #136]	; (8005180 <UART_SetConfig+0x928>)
 80050f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050fa:	e00c      	b.n	8005116 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80050fc:	4b21      	ldr	r3, [pc, #132]	; (8005184 <UART_SetConfig+0x92c>)
 80050fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005100:	e009      	b.n	8005116 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005106:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005108:	e005      	b.n	8005116 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005114:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 80e7 	beq.w	80052ec <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	4a19      	ldr	r2, [pc, #100]	; (8005188 <UART_SetConfig+0x930>)
 8005124:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005128:	461a      	mov	r2, r3
 800512a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800512c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005130:	005a      	lsls	r2, r3, #1
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	085b      	lsrs	r3, r3, #1
 8005138:	441a      	add	r2, r3
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005142:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005146:	2b0f      	cmp	r3, #15
 8005148:	d916      	bls.n	8005178 <UART_SetConfig+0x920>
 800514a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005150:	d212      	bcs.n	8005178 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005154:	b29b      	uxth	r3, r3
 8005156:	f023 030f 	bic.w	r3, r3, #15
 800515a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800515c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515e:	085b      	lsrs	r3, r3, #1
 8005160:	b29b      	uxth	r3, r3
 8005162:	f003 0307 	and.w	r3, r3, #7
 8005166:	b29a      	uxth	r2, r3
 8005168:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800516a:	4313      	orrs	r3, r2
 800516c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005174:	60da      	str	r2, [r3, #12]
 8005176:	e0b9      	b.n	80052ec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800517e:	e0b5      	b.n	80052ec <UART_SetConfig+0xa94>
 8005180:	03d09000 	.word	0x03d09000
 8005184:	003d0900 	.word	0x003d0900
 8005188:	0802d600 	.word	0x0802d600
 800518c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005190:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005194:	2b20      	cmp	r3, #32
 8005196:	dc49      	bgt.n	800522c <UART_SetConfig+0x9d4>
 8005198:	2b00      	cmp	r3, #0
 800519a:	db7c      	blt.n	8005296 <UART_SetConfig+0xa3e>
 800519c:	2b20      	cmp	r3, #32
 800519e:	d87a      	bhi.n	8005296 <UART_SetConfig+0xa3e>
 80051a0:	a201      	add	r2, pc, #4	; (adr r2, 80051a8 <UART_SetConfig+0x950>)
 80051a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a6:	bf00      	nop
 80051a8:	08005233 	.word	0x08005233
 80051ac:	0800523b 	.word	0x0800523b
 80051b0:	08005297 	.word	0x08005297
 80051b4:	08005297 	.word	0x08005297
 80051b8:	08005243 	.word	0x08005243
 80051bc:	08005297 	.word	0x08005297
 80051c0:	08005297 	.word	0x08005297
 80051c4:	08005297 	.word	0x08005297
 80051c8:	08005253 	.word	0x08005253
 80051cc:	08005297 	.word	0x08005297
 80051d0:	08005297 	.word	0x08005297
 80051d4:	08005297 	.word	0x08005297
 80051d8:	08005297 	.word	0x08005297
 80051dc:	08005297 	.word	0x08005297
 80051e0:	08005297 	.word	0x08005297
 80051e4:	08005297 	.word	0x08005297
 80051e8:	08005263 	.word	0x08005263
 80051ec:	08005297 	.word	0x08005297
 80051f0:	08005297 	.word	0x08005297
 80051f4:	08005297 	.word	0x08005297
 80051f8:	08005297 	.word	0x08005297
 80051fc:	08005297 	.word	0x08005297
 8005200:	08005297 	.word	0x08005297
 8005204:	08005297 	.word	0x08005297
 8005208:	08005297 	.word	0x08005297
 800520c:	08005297 	.word	0x08005297
 8005210:	08005297 	.word	0x08005297
 8005214:	08005297 	.word	0x08005297
 8005218:	08005297 	.word	0x08005297
 800521c:	08005297 	.word	0x08005297
 8005220:	08005297 	.word	0x08005297
 8005224:	08005297 	.word	0x08005297
 8005228:	08005289 	.word	0x08005289
 800522c:	2b40      	cmp	r3, #64	; 0x40
 800522e:	d02e      	beq.n	800528e <UART_SetConfig+0xa36>
 8005230:	e031      	b.n	8005296 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005232:	f7fd fa6b 	bl	800270c <HAL_RCC_GetPCLK1Freq>
 8005236:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005238:	e033      	b.n	80052a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800523a:	f7fd fa7d 	bl	8002738 <HAL_RCC_GetPCLK2Freq>
 800523e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005240:	e02f      	b.n	80052a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005246:	4618      	mov	r0, r3
 8005248:	f7fe fa2a 	bl	80036a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800524c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005250:	e027      	b.n	80052a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005252:	f107 0318 	add.w	r3, r7, #24
 8005256:	4618      	mov	r0, r3
 8005258:	f7fe fb76 	bl	8003948 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005260:	e01f      	b.n	80052a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005262:	4b2d      	ldr	r3, [pc, #180]	; (8005318 <UART_SetConfig+0xac0>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0320 	and.w	r3, r3, #32
 800526a:	2b00      	cmp	r3, #0
 800526c:	d009      	beq.n	8005282 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800526e:	4b2a      	ldr	r3, [pc, #168]	; (8005318 <UART_SetConfig+0xac0>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	08db      	lsrs	r3, r3, #3
 8005274:	f003 0303 	and.w	r3, r3, #3
 8005278:	4a28      	ldr	r2, [pc, #160]	; (800531c <UART_SetConfig+0xac4>)
 800527a:	fa22 f303 	lsr.w	r3, r2, r3
 800527e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005280:	e00f      	b.n	80052a2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005282:	4b26      	ldr	r3, [pc, #152]	; (800531c <UART_SetConfig+0xac4>)
 8005284:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005286:	e00c      	b.n	80052a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005288:	4b25      	ldr	r3, [pc, #148]	; (8005320 <UART_SetConfig+0xac8>)
 800528a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800528c:	e009      	b.n	80052a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800528e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005292:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005294:	e005      	b.n	80052a2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005296:	2300      	movs	r3, #0
 8005298:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80052a0:	bf00      	nop
    }

    if (pclk != 0U)
 80052a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d021      	beq.n	80052ec <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ac:	4a1d      	ldr	r2, [pc, #116]	; (8005324 <UART_SetConfig+0xacc>)
 80052ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052b2:	461a      	mov	r2, r3
 80052b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	085b      	lsrs	r3, r3, #1
 80052c0:	441a      	add	r2, r3
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ca:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ce:	2b0f      	cmp	r3, #15
 80052d0:	d909      	bls.n	80052e6 <UART_SetConfig+0xa8e>
 80052d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052d8:	d205      	bcs.n	80052e6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052dc:	b29a      	uxth	r2, r3
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	60da      	str	r2, [r3, #12]
 80052e4:	e002      	b.n	80052ec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	2200      	movs	r2, #0
 8005300:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2200      	movs	r2, #0
 8005306:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005308:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800530c:	4618      	mov	r0, r3
 800530e:	3748      	adds	r7, #72	; 0x48
 8005310:	46bd      	mov	sp, r7
 8005312:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005316:	bf00      	nop
 8005318:	58024400 	.word	0x58024400
 800531c:	03d09000 	.word	0x03d09000
 8005320:	003d0900 	.word	0x003d0900
 8005324:	0802d600 	.word	0x0802d600

08005328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005334:	f003 0301 	and.w	r3, r3, #1
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00a      	beq.n	8005352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00a      	beq.n	8005374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	430a      	orrs	r2, r1
 8005372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00a      	beq.n	8005396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	430a      	orrs	r2, r1
 80053b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053bc:	f003 0310 	and.w	r3, r3, #16
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00a      	beq.n	80053da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053de:	f003 0320 	and.w	r3, r3, #32
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00a      	beq.n	80053fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	430a      	orrs	r2, r1
 80053fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005404:	2b00      	cmp	r3, #0
 8005406:	d01a      	beq.n	800543e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005426:	d10a      	bne.n	800543e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	430a      	orrs	r2, r1
 800545e:	605a      	str	r2, [r3, #4]
  }
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af02      	add	r7, sp, #8
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800547c:	f7fb fde8 	bl	8001050 <HAL_GetTick>
 8005480:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0308 	and.w	r3, r3, #8
 800548c:	2b08      	cmp	r3, #8
 800548e:	d10e      	bne.n	80054ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005490:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f82f 	bl	8005502 <UART_WaitOnFlagUntilTimeout>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e025      	b.n	80054fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0304 	and.w	r3, r3, #4
 80054b8:	2b04      	cmp	r3, #4
 80054ba:	d10e      	bne.n	80054da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f819 	bl	8005502 <UART_WaitOnFlagUntilTimeout>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e00f      	b.n	80054fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2220      	movs	r2, #32
 80054de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2220      	movs	r2, #32
 80054e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b09c      	sub	sp, #112	; 0x70
 8005506:	af00      	add	r7, sp, #0
 8005508:	60f8      	str	r0, [r7, #12]
 800550a:	60b9      	str	r1, [r7, #8]
 800550c:	603b      	str	r3, [r7, #0]
 800550e:	4613      	mov	r3, r2
 8005510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005512:	e0a9      	b.n	8005668 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005514:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551a:	f000 80a5 	beq.w	8005668 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800551e:	f7fb fd97 	bl	8001050 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800552a:	429a      	cmp	r2, r3
 800552c:	d302      	bcc.n	8005534 <UART_WaitOnFlagUntilTimeout+0x32>
 800552e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005530:	2b00      	cmp	r3, #0
 8005532:	d140      	bne.n	80055b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800553c:	e853 3f00 	ldrex	r3, [r3]
 8005540:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005544:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005548:	667b      	str	r3, [r7, #100]	; 0x64
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	461a      	mov	r2, r3
 8005550:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005552:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005554:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005556:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005558:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800555a:	e841 2300 	strex	r3, r2, [r1]
 800555e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1e6      	bne.n	8005534 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	3308      	adds	r3, #8
 800556c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005570:	e853 3f00 	ldrex	r3, [r3]
 8005574:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005578:	f023 0301 	bic.w	r3, r3, #1
 800557c:	663b      	str	r3, [r7, #96]	; 0x60
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3308      	adds	r3, #8
 8005584:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005586:	64ba      	str	r2, [r7, #72]	; 0x48
 8005588:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800558c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800558e:	e841 2300 	strex	r3, r2, [r1]
 8005592:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1e5      	bne.n	8005566 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2220      	movs	r2, #32
 800559e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e069      	b.n	800568a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d051      	beq.n	8005668 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055d2:	d149      	bne.n	8005668 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055dc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e6:	e853 3f00 	ldrex	r3, [r3]
 80055ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	461a      	mov	r2, r3
 80055fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055fc:	637b      	str	r3, [r7, #52]	; 0x34
 80055fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005600:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005604:	e841 2300 	strex	r3, r2, [r1]
 8005608:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800560a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1e6      	bne.n	80055de <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	3308      	adds	r3, #8
 8005616:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	e853 3f00 	ldrex	r3, [r3]
 800561e:	613b      	str	r3, [r7, #16]
   return(result);
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	f023 0301 	bic.w	r3, r3, #1
 8005626:	66bb      	str	r3, [r7, #104]	; 0x68
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3308      	adds	r3, #8
 800562e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005630:	623a      	str	r2, [r7, #32]
 8005632:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005634:	69f9      	ldr	r1, [r7, #28]
 8005636:	6a3a      	ldr	r2, [r7, #32]
 8005638:	e841 2300 	strex	r3, r2, [r1]
 800563c:	61bb      	str	r3, [r7, #24]
   return(result);
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1e5      	bne.n	8005610 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2220      	movs	r2, #32
 8005648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2220      	movs	r2, #32
 8005650:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2220      	movs	r2, #32
 8005658:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e010      	b.n	800568a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	69da      	ldr	r2, [r3, #28]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	4013      	ands	r3, r2
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	429a      	cmp	r2, r3
 8005676:	bf0c      	ite	eq
 8005678:	2301      	moveq	r3, #1
 800567a:	2300      	movne	r3, #0
 800567c:	b2db      	uxtb	r3, r3
 800567e:	461a      	mov	r2, r3
 8005680:	79fb      	ldrb	r3, [r7, #7]
 8005682:	429a      	cmp	r2, r3
 8005684:	f43f af46 	beq.w	8005514 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3770      	adds	r7, #112	; 0x70
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005692:	b480      	push	{r7}
 8005694:	b085      	sub	sp, #20
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d101      	bne.n	80056a8 <HAL_UARTEx_DisableFifoMode+0x16>
 80056a4:	2302      	movs	r3, #2
 80056a6:	e027      	b.n	80056f8 <HAL_UARTEx_DisableFifoMode+0x66>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2224      	movs	r2, #36	; 0x24
 80056b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0201 	bic.w	r2, r2, #1
 80056ce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80056d6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2220      	movs	r2, #32
 80056ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005714:	2b01      	cmp	r3, #1
 8005716:	d101      	bne.n	800571c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005718:	2302      	movs	r3, #2
 800571a:	e02d      	b.n	8005778 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2224      	movs	r2, #36	; 0x24
 8005728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 0201 	bic.w	r2, r2, #1
 8005742:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	430a      	orrs	r2, r1
 8005756:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 f84f 	bl	80057fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2220      	movs	r2, #32
 800576a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005790:	2b01      	cmp	r3, #1
 8005792:	d101      	bne.n	8005798 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005794:	2302      	movs	r3, #2
 8005796:	e02d      	b.n	80057f4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2224      	movs	r2, #36	; 0x24
 80057a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f022 0201 	bic.w	r2, r2, #1
 80057be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	430a      	orrs	r2, r1
 80057d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f811 	bl	80057fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2220      	movs	r2, #32
 80057e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005808:	2b00      	cmp	r3, #0
 800580a:	d108      	bne.n	800581e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800581c:	e031      	b.n	8005882 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800581e:	2310      	movs	r3, #16
 8005820:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005822:	2310      	movs	r3, #16
 8005824:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	0e5b      	lsrs	r3, r3, #25
 800582e:	b2db      	uxtb	r3, r3
 8005830:	f003 0307 	and.w	r3, r3, #7
 8005834:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	0f5b      	lsrs	r3, r3, #29
 800583e:	b2db      	uxtb	r3, r3
 8005840:	f003 0307 	and.w	r3, r3, #7
 8005844:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005846:	7bbb      	ldrb	r3, [r7, #14]
 8005848:	7b3a      	ldrb	r2, [r7, #12]
 800584a:	4911      	ldr	r1, [pc, #68]	; (8005890 <UARTEx_SetNbDataToProcess+0x94>)
 800584c:	5c8a      	ldrb	r2, [r1, r2]
 800584e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005852:	7b3a      	ldrb	r2, [r7, #12]
 8005854:	490f      	ldr	r1, [pc, #60]	; (8005894 <UARTEx_SetNbDataToProcess+0x98>)
 8005856:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005858:	fb93 f3f2 	sdiv	r3, r3, r2
 800585c:	b29a      	uxth	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005864:	7bfb      	ldrb	r3, [r7, #15]
 8005866:	7b7a      	ldrb	r2, [r7, #13]
 8005868:	4909      	ldr	r1, [pc, #36]	; (8005890 <UARTEx_SetNbDataToProcess+0x94>)
 800586a:	5c8a      	ldrb	r2, [r1, r2]
 800586c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005870:	7b7a      	ldrb	r2, [r7, #13]
 8005872:	4908      	ldr	r1, [pc, #32]	; (8005894 <UARTEx_SetNbDataToProcess+0x98>)
 8005874:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005876:	fb93 f3f2 	sdiv	r3, r3, r2
 800587a:	b29a      	uxth	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005882:	bf00      	nop
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	0802d618 	.word	0x0802d618
 8005894:	0802d620 	.word	0x0802d620

08005898 <__NVIC_SetPriority>:
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	4603      	mov	r3, r0
 80058a0:	6039      	str	r1, [r7, #0]
 80058a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80058a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	db0a      	blt.n	80058c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	b2da      	uxtb	r2, r3
 80058b0:	490c      	ldr	r1, [pc, #48]	; (80058e4 <__NVIC_SetPriority+0x4c>)
 80058b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058b6:	0112      	lsls	r2, r2, #4
 80058b8:	b2d2      	uxtb	r2, r2
 80058ba:	440b      	add	r3, r1
 80058bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80058c0:	e00a      	b.n	80058d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	4908      	ldr	r1, [pc, #32]	; (80058e8 <__NVIC_SetPriority+0x50>)
 80058c8:	88fb      	ldrh	r3, [r7, #6]
 80058ca:	f003 030f 	and.w	r3, r3, #15
 80058ce:	3b04      	subs	r3, #4
 80058d0:	0112      	lsls	r2, r2, #4
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	440b      	add	r3, r1
 80058d6:	761a      	strb	r2, [r3, #24]
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr
 80058e4:	e000e100 	.word	0xe000e100
 80058e8:	e000ed00 	.word	0xe000ed00

080058ec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80058ec:	b580      	push	{r7, lr}
 80058ee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80058f0:	4b05      	ldr	r3, [pc, #20]	; (8005908 <SysTick_Handler+0x1c>)
 80058f2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80058f4:	f002 f95e 	bl	8007bb4 <xTaskGetSchedulerState>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d001      	beq.n	8005902 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80058fe:	f000 fd9b 	bl	8006438 <xPortSysTickHandler>
  }
}
 8005902:	bf00      	nop
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	e000e010 	.word	0xe000e010

0800590c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800590c:	b580      	push	{r7, lr}
 800590e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005910:	2100      	movs	r1, #0
 8005912:	f06f 0004 	mvn.w	r0, #4
 8005916:	f7ff ffbf 	bl	8005898 <__NVIC_SetPriority>
#endif
}
 800591a:	bf00      	nop
 800591c:	bd80      	pop	{r7, pc}
	...

08005920 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005926:	f3ef 8305 	mrs	r3, IPSR
 800592a:	603b      	str	r3, [r7, #0]
  return(result);
 800592c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005932:	f06f 0305 	mvn.w	r3, #5
 8005936:	607b      	str	r3, [r7, #4]
 8005938:	e00c      	b.n	8005954 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800593a:	4b0a      	ldr	r3, [pc, #40]	; (8005964 <osKernelInitialize+0x44>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d105      	bne.n	800594e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005942:	4b08      	ldr	r3, [pc, #32]	; (8005964 <osKernelInitialize+0x44>)
 8005944:	2201      	movs	r2, #1
 8005946:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005948:	2300      	movs	r3, #0
 800594a:	607b      	str	r3, [r7, #4]
 800594c:	e002      	b.n	8005954 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800594e:	f04f 33ff 	mov.w	r3, #4294967295
 8005952:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005954:	687b      	ldr	r3, [r7, #4]
}
 8005956:	4618      	mov	r0, r3
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	2400033c 	.word	0x2400033c

08005968 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800596e:	f3ef 8305 	mrs	r3, IPSR
 8005972:	603b      	str	r3, [r7, #0]
  return(result);
 8005974:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <osKernelStart+0x1a>
    stat = osErrorISR;
 800597a:	f06f 0305 	mvn.w	r3, #5
 800597e:	607b      	str	r3, [r7, #4]
 8005980:	e010      	b.n	80059a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005982:	4b0b      	ldr	r3, [pc, #44]	; (80059b0 <osKernelStart+0x48>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d109      	bne.n	800599e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800598a:	f7ff ffbf 	bl	800590c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800598e:	4b08      	ldr	r3, [pc, #32]	; (80059b0 <osKernelStart+0x48>)
 8005990:	2202      	movs	r2, #2
 8005992:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005994:	f001 fca2 	bl	80072dc <vTaskStartScheduler>
      stat = osOK;
 8005998:	2300      	movs	r3, #0
 800599a:	607b      	str	r3, [r7, #4]
 800599c:	e002      	b.n	80059a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800599e:	f04f 33ff 	mov.w	r3, #4294967295
 80059a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80059a4:	687b      	ldr	r3, [r7, #4]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	2400033c 	.word	0x2400033c

080059b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b08e      	sub	sp, #56	; 0x38
 80059b8:	af04      	add	r7, sp, #16
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80059c0:	2300      	movs	r3, #0
 80059c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059c4:	f3ef 8305 	mrs	r3, IPSR
 80059c8:	617b      	str	r3, [r7, #20]
  return(result);
 80059ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d17e      	bne.n	8005ace <osThreadNew+0x11a>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d07b      	beq.n	8005ace <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80059d6:	2380      	movs	r3, #128	; 0x80
 80059d8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80059da:	2318      	movs	r3, #24
 80059dc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80059de:	2300      	movs	r3, #0
 80059e0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80059e2:	f04f 33ff 	mov.w	r3, #4294967295
 80059e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d045      	beq.n	8005a7a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d002      	beq.n	80059fc <osThreadNew+0x48>
        name = attr->name;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d002      	beq.n	8005a0a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d008      	beq.n	8005a22 <osThreadNew+0x6e>
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	2b38      	cmp	r3, #56	; 0x38
 8005a14:	d805      	bhi.n	8005a22 <osThreadNew+0x6e>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <osThreadNew+0x72>
        return (NULL);
 8005a22:	2300      	movs	r3, #0
 8005a24:	e054      	b.n	8005ad0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	089b      	lsrs	r3, r3, #2
 8005a34:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00e      	beq.n	8005a5c <osThreadNew+0xa8>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	2b5b      	cmp	r3, #91	; 0x5b
 8005a44:	d90a      	bls.n	8005a5c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d006      	beq.n	8005a5c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d002      	beq.n	8005a5c <osThreadNew+0xa8>
        mem = 1;
 8005a56:	2301      	movs	r3, #1
 8005a58:	61bb      	str	r3, [r7, #24]
 8005a5a:	e010      	b.n	8005a7e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10c      	bne.n	8005a7e <osThreadNew+0xca>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d108      	bne.n	8005a7e <osThreadNew+0xca>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d104      	bne.n	8005a7e <osThreadNew+0xca>
          mem = 0;
 8005a74:	2300      	movs	r3, #0
 8005a76:	61bb      	str	r3, [r7, #24]
 8005a78:	e001      	b.n	8005a7e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d110      	bne.n	8005aa6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a8c:	9202      	str	r2, [sp, #8]
 8005a8e:	9301      	str	r3, [sp, #4]
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	6a3a      	ldr	r2, [r7, #32]
 8005a98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f001 fa48 	bl	8006f30 <xTaskCreateStatic>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	613b      	str	r3, [r7, #16]
 8005aa4:	e013      	b.n	8005ace <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d110      	bne.n	8005ace <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005aac:	6a3b      	ldr	r3, [r7, #32]
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	f107 0310 	add.w	r3, r7, #16
 8005ab4:	9301      	str	r3, [sp, #4]
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f001 fa93 	bl	8006fea <xTaskCreate>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d001      	beq.n	8005ace <osThreadNew+0x11a>
            hTask = NULL;
 8005aca:	2300      	movs	r3, #0
 8005acc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005ace:	693b      	ldr	r3, [r7, #16]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3728      	adds	r7, #40	; 0x28
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ae0:	f3ef 8305 	mrs	r3, IPSR
 8005ae4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ae6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d003      	beq.n	8005af4 <osDelay+0x1c>
    stat = osErrorISR;
 8005aec:	f06f 0305 	mvn.w	r3, #5
 8005af0:	60fb      	str	r3, [r7, #12]
 8005af2:	e007      	b.n	8005b04 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005af4:	2300      	movs	r3, #0
 8005af6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d002      	beq.n	8005b04 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f001 fbb8 	bl	8007274 <vTaskDelay>
    }
  }

  return (stat);
 8005b04:	68fb      	ldr	r3, [r7, #12]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
	...

08005b10 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4a07      	ldr	r2, [pc, #28]	; (8005b3c <vApplicationGetIdleTaskMemory+0x2c>)
 8005b20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	4a06      	ldr	r2, [pc, #24]	; (8005b40 <vApplicationGetIdleTaskMemory+0x30>)
 8005b26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2280      	movs	r2, #128	; 0x80
 8005b2c:	601a      	str	r2, [r3, #0]
}
 8005b2e:	bf00      	nop
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	24000340 	.word	0x24000340
 8005b40:	2400039c 	.word	0x2400039c

08005b44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	4a07      	ldr	r2, [pc, #28]	; (8005b70 <vApplicationGetTimerTaskMemory+0x2c>)
 8005b54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	4a06      	ldr	r2, [pc, #24]	; (8005b74 <vApplicationGetTimerTaskMemory+0x30>)
 8005b5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b62:	601a      	str	r2, [r3, #0]
}
 8005b64:	bf00      	nop
 8005b66:	3714      	adds	r7, #20
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr
 8005b70:	2400059c 	.word	0x2400059c
 8005b74:	240005f8 	.word	0x240005f8

08005b78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b08a      	sub	sp, #40	; 0x28
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b80:	2300      	movs	r3, #0
 8005b82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b84:	f001 fc10 	bl	80073a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b88:	4b5d      	ldr	r3, [pc, #372]	; (8005d00 <pvPortMalloc+0x188>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b90:	f000 f924 	bl	8005ddc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b94:	4b5b      	ldr	r3, [pc, #364]	; (8005d04 <pvPortMalloc+0x18c>)
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f040 8093 	bne.w	8005cc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d01d      	beq.n	8005be4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005ba8:	2208      	movs	r2, #8
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4413      	add	r3, r2
 8005bae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f003 0307 	and.w	r3, r3, #7
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d014      	beq.n	8005be4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f023 0307 	bic.w	r3, r3, #7
 8005bc0:	3308      	adds	r3, #8
 8005bc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f003 0307 	and.w	r3, r3, #7
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00a      	beq.n	8005be4 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005be0:	bf00      	nop
 8005be2:	e7fe      	b.n	8005be2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d06e      	beq.n	8005cc8 <pvPortMalloc+0x150>
 8005bea:	4b47      	ldr	r3, [pc, #284]	; (8005d08 <pvPortMalloc+0x190>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d869      	bhi.n	8005cc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005bf4:	4b45      	ldr	r3, [pc, #276]	; (8005d0c <pvPortMalloc+0x194>)
 8005bf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005bf8:	4b44      	ldr	r3, [pc, #272]	; (8005d0c <pvPortMalloc+0x194>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bfe:	e004      	b.n	8005c0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d903      	bls.n	8005c1c <pvPortMalloc+0xa4>
 8005c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1f1      	bne.n	8005c00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c1c:	4b38      	ldr	r3, [pc, #224]	; (8005d00 <pvPortMalloc+0x188>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d050      	beq.n	8005cc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c26:	6a3b      	ldr	r3, [r7, #32]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2208      	movs	r2, #8
 8005c2c:	4413      	add	r3, r2
 8005c2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	6a3b      	ldr	r3, [r7, #32]
 8005c36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	1ad2      	subs	r2, r2, r3
 8005c40:	2308      	movs	r3, #8
 8005c42:	005b      	lsls	r3, r3, #1
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d91f      	bls.n	8005c88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	f003 0307 	and.w	r3, r3, #7
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00a      	beq.n	8005c70 <pvPortMalloc+0xf8>
	__asm volatile
 8005c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5e:	f383 8811 	msr	BASEPRI, r3
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	613b      	str	r3, [r7, #16]
}
 8005c6c:	bf00      	nop
 8005c6e:	e7fe      	b.n	8005c6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	1ad2      	subs	r2, r2, r3
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c82:	69b8      	ldr	r0, [r7, #24]
 8005c84:	f000 f90e 	bl	8005ea4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c88:	4b1f      	ldr	r3, [pc, #124]	; (8005d08 <pvPortMalloc+0x190>)
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	4a1d      	ldr	r2, [pc, #116]	; (8005d08 <pvPortMalloc+0x190>)
 8005c94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c96:	4b1c      	ldr	r3, [pc, #112]	; (8005d08 <pvPortMalloc+0x190>)
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	4b1d      	ldr	r3, [pc, #116]	; (8005d10 <pvPortMalloc+0x198>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d203      	bcs.n	8005caa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ca2:	4b19      	ldr	r3, [pc, #100]	; (8005d08 <pvPortMalloc+0x190>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a1a      	ldr	r2, [pc, #104]	; (8005d10 <pvPortMalloc+0x198>)
 8005ca8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	4b15      	ldr	r3, [pc, #84]	; (8005d04 <pvPortMalloc+0x18c>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cba:	2200      	movs	r2, #0
 8005cbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005cbe:	4b15      	ldr	r3, [pc, #84]	; (8005d14 <pvPortMalloc+0x19c>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	4a13      	ldr	r2, [pc, #76]	; (8005d14 <pvPortMalloc+0x19c>)
 8005cc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005cc8:	f001 fb7c 	bl	80073c4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d101      	bne.n	8005cd6 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8005cd2:	f7fa fd80 	bl	80007d6 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	f003 0307 	and.w	r3, r3, #7
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00a      	beq.n	8005cf6 <pvPortMalloc+0x17e>
	__asm volatile
 8005ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	60fb      	str	r3, [r7, #12]
}
 8005cf2:	bf00      	nop
 8005cf4:	e7fe      	b.n	8005cf4 <pvPortMalloc+0x17c>
	return pvReturn;
 8005cf6:	69fb      	ldr	r3, [r7, #28]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3728      	adds	r7, #40	; 0x28
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	2401dec0 	.word	0x2401dec0
 8005d04:	2401ded4 	.word	0x2401ded4
 8005d08:	2401dec4 	.word	0x2401dec4
 8005d0c:	2401deb8 	.word	0x2401deb8
 8005d10:	2401dec8 	.word	0x2401dec8
 8005d14:	2401decc 	.word	0x2401decc

08005d18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d04d      	beq.n	8005dc6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d2a:	2308      	movs	r3, #8
 8005d2c:	425b      	negs	r3, r3
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	4413      	add	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	4b24      	ldr	r3, [pc, #144]	; (8005dd0 <vPortFree+0xb8>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4013      	ands	r3, r2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10a      	bne.n	8005d5c <vPortFree+0x44>
	__asm volatile
 8005d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	60fb      	str	r3, [r7, #12]
}
 8005d58:	bf00      	nop
 8005d5a:	e7fe      	b.n	8005d5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00a      	beq.n	8005d7a <vPortFree+0x62>
	__asm volatile
 8005d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	60bb      	str	r3, [r7, #8]
}
 8005d76:	bf00      	nop
 8005d78:	e7fe      	b.n	8005d78 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	4b14      	ldr	r3, [pc, #80]	; (8005dd0 <vPortFree+0xb8>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4013      	ands	r3, r2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d01e      	beq.n	8005dc6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d11a      	bne.n	8005dc6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	4b0e      	ldr	r3, [pc, #56]	; (8005dd0 <vPortFree+0xb8>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	43db      	mvns	r3, r3
 8005d9a:	401a      	ands	r2, r3
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005da0:	f001 fb02 	bl	80073a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	685a      	ldr	r2, [r3, #4]
 8005da8:	4b0a      	ldr	r3, [pc, #40]	; (8005dd4 <vPortFree+0xbc>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4413      	add	r3, r2
 8005dae:	4a09      	ldr	r2, [pc, #36]	; (8005dd4 <vPortFree+0xbc>)
 8005db0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005db2:	6938      	ldr	r0, [r7, #16]
 8005db4:	f000 f876 	bl	8005ea4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005db8:	4b07      	ldr	r3, [pc, #28]	; (8005dd8 <vPortFree+0xc0>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	4a06      	ldr	r2, [pc, #24]	; (8005dd8 <vPortFree+0xc0>)
 8005dc0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005dc2:	f001 faff 	bl	80073c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005dc6:	bf00      	nop
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	2401ded4 	.word	0x2401ded4
 8005dd4:	2401dec4 	.word	0x2401dec4
 8005dd8:	2401ded0 	.word	0x2401ded0

08005ddc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005de2:	4b29      	ldr	r3, [pc, #164]	; (8005e88 <prvHeapInit+0xac>)
 8005de4:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005de6:	4b29      	ldr	r3, [pc, #164]	; (8005e8c <prvHeapInit+0xb0>)
 8005de8:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f003 0307 	and.w	r3, r3, #7
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00c      	beq.n	8005e0e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	3307      	adds	r3, #7
 8005df8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f023 0307 	bic.w	r3, r3, #7
 8005e00:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	4a20      	ldr	r2, [pc, #128]	; (8005e8c <prvHeapInit+0xb0>)
 8005e0a:	4413      	add	r3, r2
 8005e0c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e12:	4a1f      	ldr	r2, [pc, #124]	; (8005e90 <prvHeapInit+0xb4>)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e18:	4b1d      	ldr	r3, [pc, #116]	; (8005e90 <prvHeapInit+0xb4>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	4413      	add	r3, r2
 8005e24:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e26:	2208      	movs	r2, #8
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	1a9b      	subs	r3, r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f023 0307 	bic.w	r3, r3, #7
 8005e34:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	4a16      	ldr	r2, [pc, #88]	; (8005e94 <prvHeapInit+0xb8>)
 8005e3a:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e3c:	4b15      	ldr	r3, [pc, #84]	; (8005e94 <prvHeapInit+0xb8>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2200      	movs	r2, #0
 8005e42:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e44:	4b13      	ldr	r3, [pc, #76]	; (8005e94 <prvHeapInit+0xb8>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	1ad2      	subs	r2, r2, r3
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e5a:	4b0e      	ldr	r3, [pc, #56]	; (8005e94 <prvHeapInit+0xb8>)
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	4a0c      	ldr	r2, [pc, #48]	; (8005e98 <prvHeapInit+0xbc>)
 8005e68:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	4a0b      	ldr	r2, [pc, #44]	; (8005e9c <prvHeapInit+0xc0>)
 8005e70:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e72:	4b0b      	ldr	r3, [pc, #44]	; (8005ea0 <prvHeapInit+0xc4>)
 8005e74:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005e78:	601a      	str	r2, [r3, #0]
}
 8005e7a:	bf00      	nop
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	0001d4c0 	.word	0x0001d4c0
 8005e8c:	240009f8 	.word	0x240009f8
 8005e90:	2401deb8 	.word	0x2401deb8
 8005e94:	2401dec0 	.word	0x2401dec0
 8005e98:	2401dec8 	.word	0x2401dec8
 8005e9c:	2401dec4 	.word	0x2401dec4
 8005ea0:	2401ded4 	.word	0x2401ded4

08005ea4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005eac:	4b28      	ldr	r3, [pc, #160]	; (8005f50 <prvInsertBlockIntoFreeList+0xac>)
 8005eae:	60fb      	str	r3, [r7, #12]
 8005eb0:	e002      	b.n	8005eb8 <prvInsertBlockIntoFreeList+0x14>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	60fb      	str	r3, [r7, #12]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d8f7      	bhi.n	8005eb2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	4413      	add	r3, r2
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d108      	bne.n	8005ee6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	441a      	add	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	441a      	add	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d118      	bne.n	8005f2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	4b15      	ldr	r3, [pc, #84]	; (8005f54 <prvInsertBlockIntoFreeList+0xb0>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d00d      	beq.n	8005f22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685a      	ldr	r2, [r3, #4]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	441a      	add	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	601a      	str	r2, [r3, #0]
 8005f20:	e008      	b.n	8005f34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f22:	4b0c      	ldr	r3, [pc, #48]	; (8005f54 <prvInsertBlockIntoFreeList+0xb0>)
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	e003      	b.n	8005f34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d002      	beq.n	8005f42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f42:	bf00      	nop
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	2401deb8 	.word	0x2401deb8
 8005f54:	2401dec0 	.word	0x2401dec0

08005f58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f103 0208 	add.w	r2, r3, #8
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f103 0208 	add.w	r2, r3, #8
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f103 0208 	add.w	r2, r3, #8
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005fa6:	bf00      	nop
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b085      	sub	sp, #20
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
 8005fba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	1c5a      	adds	r2, r3, #1
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	601a      	str	r2, [r3, #0]
}
 8005fee:	bf00      	nop
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b085      	sub	sp, #20
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
 8006002:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006010:	d103      	bne.n	800601a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	60fb      	str	r3, [r7, #12]
 8006018:	e00c      	b.n	8006034 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	3308      	adds	r3, #8
 800601e:	60fb      	str	r3, [r7, #12]
 8006020:	e002      	b.n	8006028 <vListInsert+0x2e>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	60fb      	str	r3, [r7, #12]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	429a      	cmp	r2, r3
 8006032:	d2f6      	bcs.n	8006022 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	685a      	ldr	r2, [r3, #4]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	683a      	ldr	r2, [r7, #0]
 800604e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	1c5a      	adds	r2, r3, #1
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	601a      	str	r2, [r3, #0]
}
 8006060:	bf00      	nop
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	6892      	ldr	r2, [r2, #8]
 8006082:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	6852      	ldr	r2, [r2, #4]
 800608c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	429a      	cmp	r2, r3
 8006096:	d103      	bne.n	80060a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	689a      	ldr	r2, [r3, #8]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	1e5a      	subs	r2, r3, #1
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	3b04      	subs	r3, #4
 80060d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80060d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	3b04      	subs	r3, #4
 80060de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	f023 0201 	bic.w	r2, r3, #1
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	3b04      	subs	r3, #4
 80060ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80060f0:	4a0c      	ldr	r2, [pc, #48]	; (8006124 <pxPortInitialiseStack+0x64>)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	3b14      	subs	r3, #20
 80060fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	3b04      	subs	r3, #4
 8006106:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f06f 0202 	mvn.w	r2, #2
 800610e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	3b20      	subs	r3, #32
 8006114:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006116:	68fb      	ldr	r3, [r7, #12]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr
 8006124:	08006129 	.word	0x08006129

08006128 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800612e:	2300      	movs	r3, #0
 8006130:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006132:	4b12      	ldr	r3, [pc, #72]	; (800617c <prvTaskExitError+0x54>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613a:	d00a      	beq.n	8006152 <prvTaskExitError+0x2a>
	__asm volatile
 800613c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006140:	f383 8811 	msr	BASEPRI, r3
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	60fb      	str	r3, [r7, #12]
}
 800614e:	bf00      	nop
 8006150:	e7fe      	b.n	8006150 <prvTaskExitError+0x28>
	__asm volatile
 8006152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	60bb      	str	r3, [r7, #8]
}
 8006164:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006166:	bf00      	nop
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d0fc      	beq.n	8006168 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800616e:	bf00      	nop
 8006170:	bf00      	nop
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	24000010 	.word	0x24000010

08006180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006180:	4b07      	ldr	r3, [pc, #28]	; (80061a0 <pxCurrentTCBConst2>)
 8006182:	6819      	ldr	r1, [r3, #0]
 8006184:	6808      	ldr	r0, [r1, #0]
 8006186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800618a:	f380 8809 	msr	PSP, r0
 800618e:	f3bf 8f6f 	isb	sy
 8006192:	f04f 0000 	mov.w	r0, #0
 8006196:	f380 8811 	msr	BASEPRI, r0
 800619a:	4770      	bx	lr
 800619c:	f3af 8000 	nop.w

080061a0 <pxCurrentTCBConst2>:
 80061a0:	2401df20 	.word	0x2401df20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80061a4:	bf00      	nop
 80061a6:	bf00      	nop

080061a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80061a8:	4808      	ldr	r0, [pc, #32]	; (80061cc <prvPortStartFirstTask+0x24>)
 80061aa:	6800      	ldr	r0, [r0, #0]
 80061ac:	6800      	ldr	r0, [r0, #0]
 80061ae:	f380 8808 	msr	MSP, r0
 80061b2:	f04f 0000 	mov.w	r0, #0
 80061b6:	f380 8814 	msr	CONTROL, r0
 80061ba:	b662      	cpsie	i
 80061bc:	b661      	cpsie	f
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	df00      	svc	0
 80061c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80061ca:	bf00      	nop
 80061cc:	e000ed08 	.word	0xe000ed08

080061d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80061d6:	4b46      	ldr	r3, [pc, #280]	; (80062f0 <xPortStartScheduler+0x120>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a46      	ldr	r2, [pc, #280]	; (80062f4 <xPortStartScheduler+0x124>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d10a      	bne.n	80061f6 <xPortStartScheduler+0x26>
	__asm volatile
 80061e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	613b      	str	r3, [r7, #16]
}
 80061f2:	bf00      	nop
 80061f4:	e7fe      	b.n	80061f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80061f6:	4b3e      	ldr	r3, [pc, #248]	; (80062f0 <xPortStartScheduler+0x120>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a3f      	ldr	r2, [pc, #252]	; (80062f8 <xPortStartScheduler+0x128>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d10a      	bne.n	8006216 <xPortStartScheduler+0x46>
	__asm volatile
 8006200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006204:	f383 8811 	msr	BASEPRI, r3
 8006208:	f3bf 8f6f 	isb	sy
 800620c:	f3bf 8f4f 	dsb	sy
 8006210:	60fb      	str	r3, [r7, #12]
}
 8006212:	bf00      	nop
 8006214:	e7fe      	b.n	8006214 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006216:	4b39      	ldr	r3, [pc, #228]	; (80062fc <xPortStartScheduler+0x12c>)
 8006218:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	b2db      	uxtb	r3, r3
 8006220:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	22ff      	movs	r2, #255	; 0xff
 8006226:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	b2db      	uxtb	r3, r3
 800622e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006230:	78fb      	ldrb	r3, [r7, #3]
 8006232:	b2db      	uxtb	r3, r3
 8006234:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006238:	b2da      	uxtb	r2, r3
 800623a:	4b31      	ldr	r3, [pc, #196]	; (8006300 <xPortStartScheduler+0x130>)
 800623c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800623e:	4b31      	ldr	r3, [pc, #196]	; (8006304 <xPortStartScheduler+0x134>)
 8006240:	2207      	movs	r2, #7
 8006242:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006244:	e009      	b.n	800625a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006246:	4b2f      	ldr	r3, [pc, #188]	; (8006304 <xPortStartScheduler+0x134>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	3b01      	subs	r3, #1
 800624c:	4a2d      	ldr	r2, [pc, #180]	; (8006304 <xPortStartScheduler+0x134>)
 800624e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006250:	78fb      	ldrb	r3, [r7, #3]
 8006252:	b2db      	uxtb	r3, r3
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	b2db      	uxtb	r3, r3
 8006258:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800625a:	78fb      	ldrb	r3, [r7, #3]
 800625c:	b2db      	uxtb	r3, r3
 800625e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006262:	2b80      	cmp	r3, #128	; 0x80
 8006264:	d0ef      	beq.n	8006246 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006266:	4b27      	ldr	r3, [pc, #156]	; (8006304 <xPortStartScheduler+0x134>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f1c3 0307 	rsb	r3, r3, #7
 800626e:	2b04      	cmp	r3, #4
 8006270:	d00a      	beq.n	8006288 <xPortStartScheduler+0xb8>
	__asm volatile
 8006272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006276:	f383 8811 	msr	BASEPRI, r3
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	60bb      	str	r3, [r7, #8]
}
 8006284:	bf00      	nop
 8006286:	e7fe      	b.n	8006286 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006288:	4b1e      	ldr	r3, [pc, #120]	; (8006304 <xPortStartScheduler+0x134>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	021b      	lsls	r3, r3, #8
 800628e:	4a1d      	ldr	r2, [pc, #116]	; (8006304 <xPortStartScheduler+0x134>)
 8006290:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006292:	4b1c      	ldr	r3, [pc, #112]	; (8006304 <xPortStartScheduler+0x134>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800629a:	4a1a      	ldr	r2, [pc, #104]	; (8006304 <xPortStartScheduler+0x134>)
 800629c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80062a6:	4b18      	ldr	r3, [pc, #96]	; (8006308 <xPortStartScheduler+0x138>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a17      	ldr	r2, [pc, #92]	; (8006308 <xPortStartScheduler+0x138>)
 80062ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80062b2:	4b15      	ldr	r3, [pc, #84]	; (8006308 <xPortStartScheduler+0x138>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a14      	ldr	r2, [pc, #80]	; (8006308 <xPortStartScheduler+0x138>)
 80062b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80062bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80062be:	f000 f8dd 	bl	800647c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80062c2:	4b12      	ldr	r3, [pc, #72]	; (800630c <xPortStartScheduler+0x13c>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80062c8:	f000 f8fc 	bl	80064c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80062cc:	4b10      	ldr	r3, [pc, #64]	; (8006310 <xPortStartScheduler+0x140>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a0f      	ldr	r2, [pc, #60]	; (8006310 <xPortStartScheduler+0x140>)
 80062d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80062d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80062d8:	f7ff ff66 	bl	80061a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80062dc:	f001 f9da 	bl	8007694 <vTaskSwitchContext>
	prvTaskExitError();
 80062e0:	f7ff ff22 	bl	8006128 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3718      	adds	r7, #24
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	e000ed00 	.word	0xe000ed00
 80062f4:	410fc271 	.word	0x410fc271
 80062f8:	410fc270 	.word	0x410fc270
 80062fc:	e000e400 	.word	0xe000e400
 8006300:	2401ded8 	.word	0x2401ded8
 8006304:	2401dedc 	.word	0x2401dedc
 8006308:	e000ed20 	.word	0xe000ed20
 800630c:	24000010 	.word	0x24000010
 8006310:	e000ef34 	.word	0xe000ef34

08006314 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
	__asm volatile
 800631a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631e:	f383 8811 	msr	BASEPRI, r3
 8006322:	f3bf 8f6f 	isb	sy
 8006326:	f3bf 8f4f 	dsb	sy
 800632a:	607b      	str	r3, [r7, #4]
}
 800632c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800632e:	4b0f      	ldr	r3, [pc, #60]	; (800636c <vPortEnterCritical+0x58>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3301      	adds	r3, #1
 8006334:	4a0d      	ldr	r2, [pc, #52]	; (800636c <vPortEnterCritical+0x58>)
 8006336:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006338:	4b0c      	ldr	r3, [pc, #48]	; (800636c <vPortEnterCritical+0x58>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d10f      	bne.n	8006360 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006340:	4b0b      	ldr	r3, [pc, #44]	; (8006370 <vPortEnterCritical+0x5c>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00a      	beq.n	8006360 <vPortEnterCritical+0x4c>
	__asm volatile
 800634a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634e:	f383 8811 	msr	BASEPRI, r3
 8006352:	f3bf 8f6f 	isb	sy
 8006356:	f3bf 8f4f 	dsb	sy
 800635a:	603b      	str	r3, [r7, #0]
}
 800635c:	bf00      	nop
 800635e:	e7fe      	b.n	800635e <vPortEnterCritical+0x4a>
	}
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	24000010 	.word	0x24000010
 8006370:	e000ed04 	.word	0xe000ed04

08006374 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800637a:	4b12      	ldr	r3, [pc, #72]	; (80063c4 <vPortExitCritical+0x50>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10a      	bne.n	8006398 <vPortExitCritical+0x24>
	__asm volatile
 8006382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006386:	f383 8811 	msr	BASEPRI, r3
 800638a:	f3bf 8f6f 	isb	sy
 800638e:	f3bf 8f4f 	dsb	sy
 8006392:	607b      	str	r3, [r7, #4]
}
 8006394:	bf00      	nop
 8006396:	e7fe      	b.n	8006396 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006398:	4b0a      	ldr	r3, [pc, #40]	; (80063c4 <vPortExitCritical+0x50>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3b01      	subs	r3, #1
 800639e:	4a09      	ldr	r2, [pc, #36]	; (80063c4 <vPortExitCritical+0x50>)
 80063a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80063a2:	4b08      	ldr	r3, [pc, #32]	; (80063c4 <vPortExitCritical+0x50>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d105      	bne.n	80063b6 <vPortExitCritical+0x42>
 80063aa:	2300      	movs	r3, #0
 80063ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80063b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	24000010 	.word	0x24000010
	...

080063d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80063d0:	f3ef 8009 	mrs	r0, PSP
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	4b15      	ldr	r3, [pc, #84]	; (8006430 <pxCurrentTCBConst>)
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	f01e 0f10 	tst.w	lr, #16
 80063e0:	bf08      	it	eq
 80063e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80063e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ea:	6010      	str	r0, [r2, #0]
 80063ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80063f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80063f4:	f380 8811 	msr	BASEPRI, r0
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	f001 f948 	bl	8007694 <vTaskSwitchContext>
 8006404:	f04f 0000 	mov.w	r0, #0
 8006408:	f380 8811 	msr	BASEPRI, r0
 800640c:	bc09      	pop	{r0, r3}
 800640e:	6819      	ldr	r1, [r3, #0]
 8006410:	6808      	ldr	r0, [r1, #0]
 8006412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006416:	f01e 0f10 	tst.w	lr, #16
 800641a:	bf08      	it	eq
 800641c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006420:	f380 8809 	msr	PSP, r0
 8006424:	f3bf 8f6f 	isb	sy
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	f3af 8000 	nop.w

08006430 <pxCurrentTCBConst>:
 8006430:	2401df20 	.word	0x2401df20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006434:	bf00      	nop
 8006436:	bf00      	nop

08006438 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
	__asm volatile
 800643e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006442:	f383 8811 	msr	BASEPRI, r3
 8006446:	f3bf 8f6f 	isb	sy
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	607b      	str	r3, [r7, #4]
}
 8006450:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006452:	f001 f865 	bl	8007520 <xTaskIncrementTick>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d003      	beq.n	8006464 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800645c:	4b06      	ldr	r3, [pc, #24]	; (8006478 <xPortSysTickHandler+0x40>)
 800645e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006462:	601a      	str	r2, [r3, #0]
 8006464:	2300      	movs	r3, #0
 8006466:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	f383 8811 	msr	BASEPRI, r3
}
 800646e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006470:	bf00      	nop
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	e000ed04 	.word	0xe000ed04

0800647c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800647c:	b480      	push	{r7}
 800647e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006480:	4b0b      	ldr	r3, [pc, #44]	; (80064b0 <vPortSetupTimerInterrupt+0x34>)
 8006482:	2200      	movs	r2, #0
 8006484:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006486:	4b0b      	ldr	r3, [pc, #44]	; (80064b4 <vPortSetupTimerInterrupt+0x38>)
 8006488:	2200      	movs	r2, #0
 800648a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800648c:	4b0a      	ldr	r3, [pc, #40]	; (80064b8 <vPortSetupTimerInterrupt+0x3c>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a0a      	ldr	r2, [pc, #40]	; (80064bc <vPortSetupTimerInterrupt+0x40>)
 8006492:	fba2 2303 	umull	r2, r3, r2, r3
 8006496:	099b      	lsrs	r3, r3, #6
 8006498:	4a09      	ldr	r2, [pc, #36]	; (80064c0 <vPortSetupTimerInterrupt+0x44>)
 800649a:	3b01      	subs	r3, #1
 800649c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800649e:	4b04      	ldr	r3, [pc, #16]	; (80064b0 <vPortSetupTimerInterrupt+0x34>)
 80064a0:	2207      	movs	r2, #7
 80064a2:	601a      	str	r2, [r3, #0]
}
 80064a4:	bf00      	nop
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	e000e010 	.word	0xe000e010
 80064b4:	e000e018 	.word	0xe000e018
 80064b8:	24000000 	.word	0x24000000
 80064bc:	10624dd3 	.word	0x10624dd3
 80064c0:	e000e014 	.word	0xe000e014

080064c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80064c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80064d4 <vPortEnableVFP+0x10>
 80064c8:	6801      	ldr	r1, [r0, #0]
 80064ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80064ce:	6001      	str	r1, [r0, #0]
 80064d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80064d2:	bf00      	nop
 80064d4:	e000ed88 	.word	0xe000ed88

080064d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80064de:	f3ef 8305 	mrs	r3, IPSR
 80064e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2b0f      	cmp	r3, #15
 80064e8:	d914      	bls.n	8006514 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80064ea:	4a17      	ldr	r2, [pc, #92]	; (8006548 <vPortValidateInterruptPriority+0x70>)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	4413      	add	r3, r2
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80064f4:	4b15      	ldr	r3, [pc, #84]	; (800654c <vPortValidateInterruptPriority+0x74>)
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	7afa      	ldrb	r2, [r7, #11]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d20a      	bcs.n	8006514 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80064fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	607b      	str	r3, [r7, #4]
}
 8006510:	bf00      	nop
 8006512:	e7fe      	b.n	8006512 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006514:	4b0e      	ldr	r3, [pc, #56]	; (8006550 <vPortValidateInterruptPriority+0x78>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800651c:	4b0d      	ldr	r3, [pc, #52]	; (8006554 <vPortValidateInterruptPriority+0x7c>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	429a      	cmp	r2, r3
 8006522:	d90a      	bls.n	800653a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006528:	f383 8811 	msr	BASEPRI, r3
 800652c:	f3bf 8f6f 	isb	sy
 8006530:	f3bf 8f4f 	dsb	sy
 8006534:	603b      	str	r3, [r7, #0]
}
 8006536:	bf00      	nop
 8006538:	e7fe      	b.n	8006538 <vPortValidateInterruptPriority+0x60>
	}
 800653a:	bf00      	nop
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	e000e3f0 	.word	0xe000e3f0
 800654c:	2401ded8 	.word	0x2401ded8
 8006550:	e000ed0c 	.word	0xe000ed0c
 8006554:	2401dedc 	.word	0x2401dedc

08006558 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10a      	bne.n	8006582 <xQueueGenericReset+0x2a>
	__asm volatile
 800656c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006570:	f383 8811 	msr	BASEPRI, r3
 8006574:	f3bf 8f6f 	isb	sy
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	60bb      	str	r3, [r7, #8]
}
 800657e:	bf00      	nop
 8006580:	e7fe      	b.n	8006580 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006582:	f7ff fec7 	bl	8006314 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800658e:	68f9      	ldr	r1, [r7, #12]
 8006590:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006592:	fb01 f303 	mul.w	r3, r1, r3
 8006596:	441a      	add	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b2:	3b01      	subs	r3, #1
 80065b4:	68f9      	ldr	r1, [r7, #12]
 80065b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80065b8:	fb01 f303 	mul.w	r3, r1, r3
 80065bc:	441a      	add	r2, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	22ff      	movs	r2, #255	; 0xff
 80065c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	22ff      	movs	r2, #255	; 0xff
 80065ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d114      	bne.n	8006602 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d01a      	beq.n	8006616 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	3310      	adds	r3, #16
 80065e4:	4618      	mov	r0, r3
 80065e6:	f001 f927 	bl	8007838 <xTaskRemoveFromEventList>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d012      	beq.n	8006616 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80065f0:	4b0c      	ldr	r3, [pc, #48]	; (8006624 <xQueueGenericReset+0xcc>)
 80065f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065f6:	601a      	str	r2, [r3, #0]
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	e009      	b.n	8006616 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	3310      	adds	r3, #16
 8006606:	4618      	mov	r0, r3
 8006608:	f7ff fca6 	bl	8005f58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	3324      	adds	r3, #36	; 0x24
 8006610:	4618      	mov	r0, r3
 8006612:	f7ff fca1 	bl	8005f58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006616:	f7ff fead 	bl	8006374 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800661a:	2301      	movs	r3, #1
}
 800661c:	4618      	mov	r0, r3
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	e000ed04 	.word	0xe000ed04

08006628 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006628:	b580      	push	{r7, lr}
 800662a:	b08e      	sub	sp, #56	; 0x38
 800662c:	af02      	add	r7, sp, #8
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
 8006634:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10a      	bne.n	8006652 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800663c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006640:	f383 8811 	msr	BASEPRI, r3
 8006644:	f3bf 8f6f 	isb	sy
 8006648:	f3bf 8f4f 	dsb	sy
 800664c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800664e:	bf00      	nop
 8006650:	e7fe      	b.n	8006650 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10a      	bne.n	800666e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665c:	f383 8811 	msr	BASEPRI, r3
 8006660:	f3bf 8f6f 	isb	sy
 8006664:	f3bf 8f4f 	dsb	sy
 8006668:	627b      	str	r3, [r7, #36]	; 0x24
}
 800666a:	bf00      	nop
 800666c:	e7fe      	b.n	800666c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d002      	beq.n	800667a <xQueueGenericCreateStatic+0x52>
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d001      	beq.n	800667e <xQueueGenericCreateStatic+0x56>
 800667a:	2301      	movs	r3, #1
 800667c:	e000      	b.n	8006680 <xQueueGenericCreateStatic+0x58>
 800667e:	2300      	movs	r3, #0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10a      	bne.n	800669a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	623b      	str	r3, [r7, #32]
}
 8006696:	bf00      	nop
 8006698:	e7fe      	b.n	8006698 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d102      	bne.n	80066a6 <xQueueGenericCreateStatic+0x7e>
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d101      	bne.n	80066aa <xQueueGenericCreateStatic+0x82>
 80066a6:	2301      	movs	r3, #1
 80066a8:	e000      	b.n	80066ac <xQueueGenericCreateStatic+0x84>
 80066aa:	2300      	movs	r3, #0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10a      	bne.n	80066c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80066b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b4:	f383 8811 	msr	BASEPRI, r3
 80066b8:	f3bf 8f6f 	isb	sy
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	61fb      	str	r3, [r7, #28]
}
 80066c2:	bf00      	nop
 80066c4:	e7fe      	b.n	80066c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80066c6:	2350      	movs	r3, #80	; 0x50
 80066c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	2b50      	cmp	r3, #80	; 0x50
 80066ce:	d00a      	beq.n	80066e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	61bb      	str	r3, [r7, #24]
}
 80066e2:	bf00      	nop
 80066e4:	e7fe      	b.n	80066e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80066e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80066ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00d      	beq.n	800670e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80066f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80066fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80066fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	4613      	mov	r3, r2
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	68b9      	ldr	r1, [r7, #8]
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f000 f805 	bl	8006718 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800670e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006710:	4618      	mov	r0, r3
 8006712:	3730      	adds	r7, #48	; 0x30
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
 8006724:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d103      	bne.n	8006734 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	69ba      	ldr	r2, [r7, #24]
 8006730:	601a      	str	r2, [r3, #0]
 8006732:	e002      	b.n	800673a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006746:	2101      	movs	r1, #1
 8006748:	69b8      	ldr	r0, [r7, #24]
 800674a:	f7ff ff05 	bl	8006558 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	78fa      	ldrb	r2, [r7, #3]
 8006752:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006756:	bf00      	nop
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
	...

08006760 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b08e      	sub	sp, #56	; 0x38
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
 800676c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800676e:	2300      	movs	r3, #0
 8006770:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006778:	2b00      	cmp	r3, #0
 800677a:	d10a      	bne.n	8006792 <xQueueGenericSend+0x32>
	__asm volatile
 800677c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006780:	f383 8811 	msr	BASEPRI, r3
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	f3bf 8f4f 	dsb	sy
 800678c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800678e:	bf00      	nop
 8006790:	e7fe      	b.n	8006790 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d103      	bne.n	80067a0 <xQueueGenericSend+0x40>
 8006798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679c:	2b00      	cmp	r3, #0
 800679e:	d101      	bne.n	80067a4 <xQueueGenericSend+0x44>
 80067a0:	2301      	movs	r3, #1
 80067a2:	e000      	b.n	80067a6 <xQueueGenericSend+0x46>
 80067a4:	2300      	movs	r3, #0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10a      	bne.n	80067c0 <xQueueGenericSend+0x60>
	__asm volatile
 80067aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ae:	f383 8811 	msr	BASEPRI, r3
 80067b2:	f3bf 8f6f 	isb	sy
 80067b6:	f3bf 8f4f 	dsb	sy
 80067ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80067bc:	bf00      	nop
 80067be:	e7fe      	b.n	80067be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d103      	bne.n	80067ce <xQueueGenericSend+0x6e>
 80067c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d101      	bne.n	80067d2 <xQueueGenericSend+0x72>
 80067ce:	2301      	movs	r3, #1
 80067d0:	e000      	b.n	80067d4 <xQueueGenericSend+0x74>
 80067d2:	2300      	movs	r3, #0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10a      	bne.n	80067ee <xQueueGenericSend+0x8e>
	__asm volatile
 80067d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067dc:	f383 8811 	msr	BASEPRI, r3
 80067e0:	f3bf 8f6f 	isb	sy
 80067e4:	f3bf 8f4f 	dsb	sy
 80067e8:	623b      	str	r3, [r7, #32]
}
 80067ea:	bf00      	nop
 80067ec:	e7fe      	b.n	80067ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067ee:	f001 f9e1 	bl	8007bb4 <xTaskGetSchedulerState>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d102      	bne.n	80067fe <xQueueGenericSend+0x9e>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d101      	bne.n	8006802 <xQueueGenericSend+0xa2>
 80067fe:	2301      	movs	r3, #1
 8006800:	e000      	b.n	8006804 <xQueueGenericSend+0xa4>
 8006802:	2300      	movs	r3, #0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10a      	bne.n	800681e <xQueueGenericSend+0xbe>
	__asm volatile
 8006808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680c:	f383 8811 	msr	BASEPRI, r3
 8006810:	f3bf 8f6f 	isb	sy
 8006814:	f3bf 8f4f 	dsb	sy
 8006818:	61fb      	str	r3, [r7, #28]
}
 800681a:	bf00      	nop
 800681c:	e7fe      	b.n	800681c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800681e:	f7ff fd79 	bl	8006314 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800682a:	429a      	cmp	r2, r3
 800682c:	d302      	bcc.n	8006834 <xQueueGenericSend+0xd4>
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	2b02      	cmp	r3, #2
 8006832:	d129      	bne.n	8006888 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006834:	683a      	ldr	r2, [r7, #0]
 8006836:	68b9      	ldr	r1, [r7, #8]
 8006838:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800683a:	f000 fa0b 	bl	8006c54 <prvCopyDataToQueue>
 800683e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006844:	2b00      	cmp	r3, #0
 8006846:	d010      	beq.n	800686a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684a:	3324      	adds	r3, #36	; 0x24
 800684c:	4618      	mov	r0, r3
 800684e:	f000 fff3 	bl	8007838 <xTaskRemoveFromEventList>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d013      	beq.n	8006880 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006858:	4b3f      	ldr	r3, [pc, #252]	; (8006958 <xQueueGenericSend+0x1f8>)
 800685a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	f3bf 8f4f 	dsb	sy
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	e00a      	b.n	8006880 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800686a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686c:	2b00      	cmp	r3, #0
 800686e:	d007      	beq.n	8006880 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006870:	4b39      	ldr	r3, [pc, #228]	; (8006958 <xQueueGenericSend+0x1f8>)
 8006872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006876:	601a      	str	r2, [r3, #0]
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006880:	f7ff fd78 	bl	8006374 <vPortExitCritical>
				return pdPASS;
 8006884:	2301      	movs	r3, #1
 8006886:	e063      	b.n	8006950 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d103      	bne.n	8006896 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800688e:	f7ff fd71 	bl	8006374 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006892:	2300      	movs	r3, #0
 8006894:	e05c      	b.n	8006950 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006898:	2b00      	cmp	r3, #0
 800689a:	d106      	bne.n	80068aa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800689c:	f107 0314 	add.w	r3, r7, #20
 80068a0:	4618      	mov	r0, r3
 80068a2:	f001 f82d 	bl	8007900 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068a6:	2301      	movs	r3, #1
 80068a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068aa:	f7ff fd63 	bl	8006374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068ae:	f000 fd7b 	bl	80073a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068b2:	f7ff fd2f 	bl	8006314 <vPortEnterCritical>
 80068b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068bc:	b25b      	sxtb	r3, r3
 80068be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c2:	d103      	bne.n	80068cc <xQueueGenericSend+0x16c>
 80068c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068d2:	b25b      	sxtb	r3, r3
 80068d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d8:	d103      	bne.n	80068e2 <xQueueGenericSend+0x182>
 80068da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068e2:	f7ff fd47 	bl	8006374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068e6:	1d3a      	adds	r2, r7, #4
 80068e8:	f107 0314 	add.w	r3, r7, #20
 80068ec:	4611      	mov	r1, r2
 80068ee:	4618      	mov	r0, r3
 80068f0:	f001 f81c 	bl	800792c <xTaskCheckForTimeOut>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d124      	bne.n	8006944 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80068fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068fc:	f000 faa2 	bl	8006e44 <prvIsQueueFull>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d018      	beq.n	8006938 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006908:	3310      	adds	r3, #16
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	4611      	mov	r1, r2
 800690e:	4618      	mov	r0, r3
 8006910:	f000 ff42 	bl	8007798 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006916:	f000 fa2d 	bl	8006d74 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800691a:	f000 fd53 	bl	80073c4 <xTaskResumeAll>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	f47f af7c 	bne.w	800681e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006926:	4b0c      	ldr	r3, [pc, #48]	; (8006958 <xQueueGenericSend+0x1f8>)
 8006928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	f3bf 8f6f 	isb	sy
 8006936:	e772      	b.n	800681e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006938:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800693a:	f000 fa1b 	bl	8006d74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800693e:	f000 fd41 	bl	80073c4 <xTaskResumeAll>
 8006942:	e76c      	b.n	800681e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006946:	f000 fa15 	bl	8006d74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800694a:	f000 fd3b 	bl	80073c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800694e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006950:	4618      	mov	r0, r3
 8006952:	3738      	adds	r7, #56	; 0x38
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	e000ed04 	.word	0xe000ed04

0800695c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b090      	sub	sp, #64	; 0x40
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
 8006968:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800696e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10a      	bne.n	800698a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006978:	f383 8811 	msr	BASEPRI, r3
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006986:	bf00      	nop
 8006988:	e7fe      	b.n	8006988 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d103      	bne.n	8006998 <xQueueGenericSendFromISR+0x3c>
 8006990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006994:	2b00      	cmp	r3, #0
 8006996:	d101      	bne.n	800699c <xQueueGenericSendFromISR+0x40>
 8006998:	2301      	movs	r3, #1
 800699a:	e000      	b.n	800699e <xQueueGenericSendFromISR+0x42>
 800699c:	2300      	movs	r3, #0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10a      	bne.n	80069b8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80069a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a6:	f383 8811 	msr	BASEPRI, r3
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80069b4:	bf00      	nop
 80069b6:	e7fe      	b.n	80069b6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d103      	bne.n	80069c6 <xQueueGenericSendFromISR+0x6a>
 80069be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d101      	bne.n	80069ca <xQueueGenericSendFromISR+0x6e>
 80069c6:	2301      	movs	r3, #1
 80069c8:	e000      	b.n	80069cc <xQueueGenericSendFromISR+0x70>
 80069ca:	2300      	movs	r3, #0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10a      	bne.n	80069e6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	623b      	str	r3, [r7, #32]
}
 80069e2:	bf00      	nop
 80069e4:	e7fe      	b.n	80069e4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069e6:	f7ff fd77 	bl	80064d8 <vPortValidateInterruptPriority>
	__asm volatile
 80069ea:	f3ef 8211 	mrs	r2, BASEPRI
 80069ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	61fa      	str	r2, [r7, #28]
 8006a00:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006a02:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a04:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d302      	bcc.n	8006a18 <xQueueGenericSendFromISR+0xbc>
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d12f      	bne.n	8006a78 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a26:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a28:	683a      	ldr	r2, [r7, #0]
 8006a2a:	68b9      	ldr	r1, [r7, #8]
 8006a2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a2e:	f000 f911 	bl	8006c54 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a32:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a3a:	d112      	bne.n	8006a62 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d016      	beq.n	8006a72 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a46:	3324      	adds	r3, #36	; 0x24
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f000 fef5 	bl	8007838 <xTaskRemoveFromEventList>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00e      	beq.n	8006a72 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00b      	beq.n	8006a72 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	601a      	str	r2, [r3, #0]
 8006a60:	e007      	b.n	8006a72 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006a62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006a66:	3301      	adds	r3, #1
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	b25a      	sxtb	r2, r3
 8006a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006a72:	2301      	movs	r3, #1
 8006a74:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006a76:	e001      	b.n	8006a7c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a7e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f383 8811 	msr	BASEPRI, r3
}
 8006a86:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3740      	adds	r7, #64	; 0x40
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
	...

08006a94 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b08c      	sub	sp, #48	; 0x30
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10a      	bne.n	8006ac4 <xQueueReceive+0x30>
	__asm volatile
 8006aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab2:	f383 8811 	msr	BASEPRI, r3
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	623b      	str	r3, [r7, #32]
}
 8006ac0:	bf00      	nop
 8006ac2:	e7fe      	b.n	8006ac2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d103      	bne.n	8006ad2 <xQueueReceive+0x3e>
 8006aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d101      	bne.n	8006ad6 <xQueueReceive+0x42>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e000      	b.n	8006ad8 <xQueueReceive+0x44>
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10a      	bne.n	8006af2 <xQueueReceive+0x5e>
	__asm volatile
 8006adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae0:	f383 8811 	msr	BASEPRI, r3
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	61fb      	str	r3, [r7, #28]
}
 8006aee:	bf00      	nop
 8006af0:	e7fe      	b.n	8006af0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006af2:	f001 f85f 	bl	8007bb4 <xTaskGetSchedulerState>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d102      	bne.n	8006b02 <xQueueReceive+0x6e>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <xQueueReceive+0x72>
 8006b02:	2301      	movs	r3, #1
 8006b04:	e000      	b.n	8006b08 <xQueueReceive+0x74>
 8006b06:	2300      	movs	r3, #0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10a      	bne.n	8006b22 <xQueueReceive+0x8e>
	__asm volatile
 8006b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b10:	f383 8811 	msr	BASEPRI, r3
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	61bb      	str	r3, [r7, #24]
}
 8006b1e:	bf00      	nop
 8006b20:	e7fe      	b.n	8006b20 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b22:	f7ff fbf7 	bl	8006314 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b2a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d01f      	beq.n	8006b72 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b32:	68b9      	ldr	r1, [r7, #8]
 8006b34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b36:	f000 f8f7 	bl	8006d28 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3c:	1e5a      	subs	r2, r3, #1
 8006b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b40:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00f      	beq.n	8006b6a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4c:	3310      	adds	r3, #16
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f000 fe72 	bl	8007838 <xTaskRemoveFromEventList>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d007      	beq.n	8006b6a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b5a:	4b3d      	ldr	r3, [pc, #244]	; (8006c50 <xQueueReceive+0x1bc>)
 8006b5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b60:	601a      	str	r2, [r3, #0]
 8006b62:	f3bf 8f4f 	dsb	sy
 8006b66:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b6a:	f7ff fc03 	bl	8006374 <vPortExitCritical>
				return pdPASS;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e069      	b.n	8006c46 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d103      	bne.n	8006b80 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b78:	f7ff fbfc 	bl	8006374 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	e062      	b.n	8006c46 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d106      	bne.n	8006b94 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b86:	f107 0310 	add.w	r3, r7, #16
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f000 feb8 	bl	8007900 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b90:	2301      	movs	r3, #1
 8006b92:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b94:	f7ff fbee 	bl	8006374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b98:	f000 fc06 	bl	80073a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b9c:	f7ff fbba 	bl	8006314 <vPortEnterCritical>
 8006ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ba6:	b25b      	sxtb	r3, r3
 8006ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bac:	d103      	bne.n	8006bb6 <xQueueReceive+0x122>
 8006bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bbc:	b25b      	sxtb	r3, r3
 8006bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc2:	d103      	bne.n	8006bcc <xQueueReceive+0x138>
 8006bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bcc:	f7ff fbd2 	bl	8006374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006bd0:	1d3a      	adds	r2, r7, #4
 8006bd2:	f107 0310 	add.w	r3, r7, #16
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f000 fea7 	bl	800792c <xTaskCheckForTimeOut>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d123      	bne.n	8006c2c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006be4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006be6:	f000 f917 	bl	8006e18 <prvIsQueueEmpty>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d017      	beq.n	8006c20 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf2:	3324      	adds	r3, #36	; 0x24
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	4611      	mov	r1, r2
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f000 fdcd 	bl	8007798 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006bfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c00:	f000 f8b8 	bl	8006d74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c04:	f000 fbde 	bl	80073c4 <xTaskResumeAll>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d189      	bne.n	8006b22 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006c0e:	4b10      	ldr	r3, [pc, #64]	; (8006c50 <xQueueReceive+0x1bc>)
 8006c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c14:	601a      	str	r2, [r3, #0]
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	f3bf 8f6f 	isb	sy
 8006c1e:	e780      	b.n	8006b22 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006c20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c22:	f000 f8a7 	bl	8006d74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c26:	f000 fbcd 	bl	80073c4 <xTaskResumeAll>
 8006c2a:	e77a      	b.n	8006b22 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006c2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c2e:	f000 f8a1 	bl	8006d74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c32:	f000 fbc7 	bl	80073c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c38:	f000 f8ee 	bl	8006e18 <prvIsQueueEmpty>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f43f af6f 	beq.w	8006b22 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3730      	adds	r7, #48	; 0x30
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	e000ed04 	.word	0xe000ed04

08006c54 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b086      	sub	sp, #24
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006c60:	2300      	movs	r3, #0
 8006c62:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c68:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10d      	bne.n	8006c8e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d14d      	bne.n	8006d16 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 ffb6 	bl	8007bf0 <xTaskPriorityDisinherit>
 8006c84:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	609a      	str	r2, [r3, #8]
 8006c8c:	e043      	b.n	8006d16 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d119      	bne.n	8006cc8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6858      	ldr	r0, [r3, #4]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	68b9      	ldr	r1, [r7, #8]
 8006ca0:	f023 fc12 	bl	802a4c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	685a      	ldr	r2, [r3, #4]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cac:	441a      	add	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d32b      	bcc.n	8006d16 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	605a      	str	r2, [r3, #4]
 8006cc6:	e026      	b.n	8006d16 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	68d8      	ldr	r0, [r3, #12]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	68b9      	ldr	r1, [r7, #8]
 8006cd4:	f023 fbf8 	bl	802a4c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	68da      	ldr	r2, [r3, #12]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce0:	425b      	negs	r3, r3
 8006ce2:	441a      	add	r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	68da      	ldr	r2, [r3, #12]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d207      	bcs.n	8006d04 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	689a      	ldr	r2, [r3, #8]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfc:	425b      	negs	r3, r3
 8006cfe:	441a      	add	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d105      	bne.n	8006d16 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d002      	beq.n	8006d16 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	3b01      	subs	r3, #1
 8006d14:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	1c5a      	adds	r2, r3, #1
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006d1e:	697b      	ldr	r3, [r7, #20]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3718      	adds	r7, #24
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d018      	beq.n	8006d6c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	68da      	ldr	r2, [r3, #12]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d42:	441a      	add	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68da      	ldr	r2, [r3, #12]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d303      	bcc.n	8006d5c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	68d9      	ldr	r1, [r3, #12]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d64:	461a      	mov	r2, r3
 8006d66:	6838      	ldr	r0, [r7, #0]
 8006d68:	f023 fbae 	bl	802a4c8 <memcpy>
	}
}
 8006d6c:	bf00      	nop
 8006d6e:	3708      	adds	r7, #8
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006d7c:	f7ff faca 	bl	8006314 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d86:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d88:	e011      	b.n	8006dae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d012      	beq.n	8006db8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	3324      	adds	r3, #36	; 0x24
 8006d96:	4618      	mov	r0, r3
 8006d98:	f000 fd4e 	bl	8007838 <xTaskRemoveFromEventList>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d001      	beq.n	8006da6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006da2:	f000 fe25 	bl	80079f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006da6:	7bfb      	ldrb	r3, [r7, #15]
 8006da8:	3b01      	subs	r3, #1
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	dce9      	bgt.n	8006d8a <prvUnlockQueue+0x16>
 8006db6:	e000      	b.n	8006dba <prvUnlockQueue+0x46>
					break;
 8006db8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	22ff      	movs	r2, #255	; 0xff
 8006dbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006dc2:	f7ff fad7 	bl	8006374 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006dc6:	f7ff faa5 	bl	8006314 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006dd0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006dd2:	e011      	b.n	8006df8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d012      	beq.n	8006e02 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	3310      	adds	r3, #16
 8006de0:	4618      	mov	r0, r3
 8006de2:	f000 fd29 	bl	8007838 <xTaskRemoveFromEventList>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006dec:	f000 fe00 	bl	80079f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006df0:	7bbb      	ldrb	r3, [r7, #14]
 8006df2:	3b01      	subs	r3, #1
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006df8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	dce9      	bgt.n	8006dd4 <prvUnlockQueue+0x60>
 8006e00:	e000      	b.n	8006e04 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006e02:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	22ff      	movs	r2, #255	; 0xff
 8006e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006e0c:	f7ff fab2 	bl	8006374 <vPortExitCritical>
}
 8006e10:	bf00      	nop
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e20:	f7ff fa78 	bl	8006314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d102      	bne.n	8006e32 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	60fb      	str	r3, [r7, #12]
 8006e30:	e001      	b.n	8006e36 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006e32:	2300      	movs	r3, #0
 8006e34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e36:	f7ff fa9d 	bl	8006374 <vPortExitCritical>

	return xReturn;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e4c:	f7ff fa62 	bl	8006314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d102      	bne.n	8006e62 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	60fb      	str	r3, [r7, #12]
 8006e60:	e001      	b.n	8006e66 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006e62:	2300      	movs	r3, #0
 8006e64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e66:	f7ff fa85 	bl	8006374 <vPortExitCritical>

	return xReturn;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e7e:	2300      	movs	r3, #0
 8006e80:	60fb      	str	r3, [r7, #12]
 8006e82:	e014      	b.n	8006eae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006e84:	4a0f      	ldr	r2, [pc, #60]	; (8006ec4 <vQueueAddToRegistry+0x50>)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10b      	bne.n	8006ea8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006e90:	490c      	ldr	r1, [pc, #48]	; (8006ec4 <vQueueAddToRegistry+0x50>)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	683a      	ldr	r2, [r7, #0]
 8006e96:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006e9a:	4a0a      	ldr	r2, [pc, #40]	; (8006ec4 <vQueueAddToRegistry+0x50>)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	00db      	lsls	r3, r3, #3
 8006ea0:	4413      	add	r3, r2
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006ea6:	e006      	b.n	8006eb6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	60fb      	str	r3, [r7, #12]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2b07      	cmp	r3, #7
 8006eb2:	d9e7      	bls.n	8006e84 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006eb4:	bf00      	nop
 8006eb6:	bf00      	nop
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	2401dee0 	.word	0x2401dee0

08006ec8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b086      	sub	sp, #24
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006ed8:	f7ff fa1c 	bl	8006314 <vPortEnterCritical>
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ee2:	b25b      	sxtb	r3, r3
 8006ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee8:	d103      	bne.n	8006ef2 <vQueueWaitForMessageRestricted+0x2a>
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ef8:	b25b      	sxtb	r3, r3
 8006efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006efe:	d103      	bne.n	8006f08 <vQueueWaitForMessageRestricted+0x40>
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f08:	f7ff fa34 	bl	8006374 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d106      	bne.n	8006f22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	3324      	adds	r3, #36	; 0x24
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	68b9      	ldr	r1, [r7, #8]
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f000 fc5f 	bl	80077e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006f22:	6978      	ldr	r0, [r7, #20]
 8006f24:	f7ff ff26 	bl	8006d74 <prvUnlockQueue>
	}
 8006f28:	bf00      	nop
 8006f2a:	3718      	adds	r7, #24
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b08e      	sub	sp, #56	; 0x38
 8006f34:	af04      	add	r7, sp, #16
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
 8006f3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10a      	bne.n	8006f5a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f48:	f383 8811 	msr	BASEPRI, r3
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	623b      	str	r3, [r7, #32]
}
 8006f56:	bf00      	nop
 8006f58:	e7fe      	b.n	8006f58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d10a      	bne.n	8006f76 <xTaskCreateStatic+0x46>
	__asm volatile
 8006f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f64:	f383 8811 	msr	BASEPRI, r3
 8006f68:	f3bf 8f6f 	isb	sy
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	61fb      	str	r3, [r7, #28]
}
 8006f72:	bf00      	nop
 8006f74:	e7fe      	b.n	8006f74 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006f76:	235c      	movs	r3, #92	; 0x5c
 8006f78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	2b5c      	cmp	r3, #92	; 0x5c
 8006f7e:	d00a      	beq.n	8006f96 <xTaskCreateStatic+0x66>
	__asm volatile
 8006f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f84:	f383 8811 	msr	BASEPRI, r3
 8006f88:	f3bf 8f6f 	isb	sy
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	61bb      	str	r3, [r7, #24]
}
 8006f92:	bf00      	nop
 8006f94:	e7fe      	b.n	8006f94 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006f96:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d01e      	beq.n	8006fdc <xTaskCreateStatic+0xac>
 8006f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d01b      	beq.n	8006fdc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006faa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb0:	2202      	movs	r2, #2
 8006fb2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	9303      	str	r3, [sp, #12]
 8006fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbc:	9302      	str	r3, [sp, #8]
 8006fbe:	f107 0314 	add.w	r3, r7, #20
 8006fc2:	9301      	str	r3, [sp, #4]
 8006fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	68b9      	ldr	r1, [r7, #8]
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f000 f850 	bl	8007074 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006fd6:	f000 f8dd 	bl	8007194 <prvAddNewTaskToReadyList>
 8006fda:	e001      	b.n	8006fe0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006fe0:	697b      	ldr	r3, [r7, #20]
	}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3728      	adds	r7, #40	; 0x28
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b08c      	sub	sp, #48	; 0x30
 8006fee:	af04      	add	r7, sp, #16
 8006ff0:	60f8      	str	r0, [r7, #12]
 8006ff2:	60b9      	str	r1, [r7, #8]
 8006ff4:	603b      	str	r3, [r7, #0]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ffa:	88fb      	ldrh	r3, [r7, #6]
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7fe fdba 	bl	8005b78 <pvPortMalloc>
 8007004:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00e      	beq.n	800702a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800700c:	205c      	movs	r0, #92	; 0x5c
 800700e:	f7fe fdb3 	bl	8005b78 <pvPortMalloc>
 8007012:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d003      	beq.n	8007022 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	631a      	str	r2, [r3, #48]	; 0x30
 8007020:	e005      	b.n	800702e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007022:	6978      	ldr	r0, [r7, #20]
 8007024:	f7fe fe78 	bl	8005d18 <vPortFree>
 8007028:	e001      	b.n	800702e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800702a:	2300      	movs	r3, #0
 800702c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d017      	beq.n	8007064 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800703c:	88fa      	ldrh	r2, [r7, #6]
 800703e:	2300      	movs	r3, #0
 8007040:	9303      	str	r3, [sp, #12]
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	9302      	str	r3, [sp, #8]
 8007046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007048:	9301      	str	r3, [sp, #4]
 800704a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	68b9      	ldr	r1, [r7, #8]
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f000 f80e 	bl	8007074 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007058:	69f8      	ldr	r0, [r7, #28]
 800705a:	f000 f89b 	bl	8007194 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800705e:	2301      	movs	r3, #1
 8007060:	61bb      	str	r3, [r7, #24]
 8007062:	e002      	b.n	800706a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007064:	f04f 33ff 	mov.w	r3, #4294967295
 8007068:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800706a:	69bb      	ldr	r3, [r7, #24]
	}
 800706c:	4618      	mov	r0, r3
 800706e:	3720      	adds	r7, #32
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b088      	sub	sp, #32
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
 8007080:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007084:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	461a      	mov	r2, r3
 800708c:	21a5      	movs	r1, #165	; 0xa5
 800708e:	f023 fa43 	bl	802a518 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007094:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007096:	6879      	ldr	r1, [r7, #4]
 8007098:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800709c:	440b      	add	r3, r1
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	f023 0307 	bic.w	r3, r3, #7
 80070aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	f003 0307 	and.w	r3, r3, #7
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00a      	beq.n	80070cc <prvInitialiseNewTask+0x58>
	__asm volatile
 80070b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ba:	f383 8811 	msr	BASEPRI, r3
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	617b      	str	r3, [r7, #20]
}
 80070c8:	bf00      	nop
 80070ca:	e7fe      	b.n	80070ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d01f      	beq.n	8007112 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070d2:	2300      	movs	r3, #0
 80070d4:	61fb      	str	r3, [r7, #28]
 80070d6:	e012      	b.n	80070fe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	4413      	add	r3, r2
 80070de:	7819      	ldrb	r1, [r3, #0]
 80070e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	4413      	add	r3, r2
 80070e6:	3334      	adds	r3, #52	; 0x34
 80070e8:	460a      	mov	r2, r1
 80070ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	4413      	add	r3, r2
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d006      	beq.n	8007106 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	3301      	adds	r3, #1
 80070fc:	61fb      	str	r3, [r7, #28]
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	2b0f      	cmp	r3, #15
 8007102:	d9e9      	bls.n	80070d8 <prvInitialiseNewTask+0x64>
 8007104:	e000      	b.n	8007108 <prvInitialiseNewTask+0x94>
			{
				break;
 8007106:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710a:	2200      	movs	r2, #0
 800710c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007110:	e003      	b.n	800711a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007114:	2200      	movs	r2, #0
 8007116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800711a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711c:	2b37      	cmp	r3, #55	; 0x37
 800711e:	d901      	bls.n	8007124 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007120:	2337      	movs	r3, #55	; 0x37
 8007122:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007126:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007128:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800712a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800712e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007132:	2200      	movs	r2, #0
 8007134:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007138:	3304      	adds	r3, #4
 800713a:	4618      	mov	r0, r3
 800713c:	f7fe ff2c 	bl	8005f98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007142:	3318      	adds	r3, #24
 8007144:	4618      	mov	r0, r3
 8007146:	f7fe ff27 	bl	8005f98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800714a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800714e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007152:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007158:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800715a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800715e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007162:	2200      	movs	r2, #0
 8007164:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007168:	2200      	movs	r2, #0
 800716a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	68f9      	ldr	r1, [r7, #12]
 8007172:	69b8      	ldr	r0, [r7, #24]
 8007174:	f7fe ffa4 	bl	80060c0 <pxPortInitialiseStack>
 8007178:	4602      	mov	r2, r0
 800717a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800717e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007180:	2b00      	cmp	r3, #0
 8007182:	d002      	beq.n	800718a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007188:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800718a:	bf00      	nop
 800718c:	3720      	adds	r7, #32
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
	...

08007194 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800719c:	f7ff f8ba 	bl	8006314 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80071a0:	4b2d      	ldr	r3, [pc, #180]	; (8007258 <prvAddNewTaskToReadyList+0xc4>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	3301      	adds	r3, #1
 80071a6:	4a2c      	ldr	r2, [pc, #176]	; (8007258 <prvAddNewTaskToReadyList+0xc4>)
 80071a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80071aa:	4b2c      	ldr	r3, [pc, #176]	; (800725c <prvAddNewTaskToReadyList+0xc8>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d109      	bne.n	80071c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80071b2:	4a2a      	ldr	r2, [pc, #168]	; (800725c <prvAddNewTaskToReadyList+0xc8>)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80071b8:	4b27      	ldr	r3, [pc, #156]	; (8007258 <prvAddNewTaskToReadyList+0xc4>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d110      	bne.n	80071e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80071c0:	f000 fc3a 	bl	8007a38 <prvInitialiseTaskLists>
 80071c4:	e00d      	b.n	80071e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80071c6:	4b26      	ldr	r3, [pc, #152]	; (8007260 <prvAddNewTaskToReadyList+0xcc>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d109      	bne.n	80071e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80071ce:	4b23      	ldr	r3, [pc, #140]	; (800725c <prvAddNewTaskToReadyList+0xc8>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d8:	429a      	cmp	r2, r3
 80071da:	d802      	bhi.n	80071e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80071dc:	4a1f      	ldr	r2, [pc, #124]	; (800725c <prvAddNewTaskToReadyList+0xc8>)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80071e2:	4b20      	ldr	r3, [pc, #128]	; (8007264 <prvAddNewTaskToReadyList+0xd0>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	3301      	adds	r3, #1
 80071e8:	4a1e      	ldr	r2, [pc, #120]	; (8007264 <prvAddNewTaskToReadyList+0xd0>)
 80071ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80071ec:	4b1d      	ldr	r3, [pc, #116]	; (8007264 <prvAddNewTaskToReadyList+0xd0>)
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f8:	4b1b      	ldr	r3, [pc, #108]	; (8007268 <prvAddNewTaskToReadyList+0xd4>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d903      	bls.n	8007208 <prvAddNewTaskToReadyList+0x74>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007204:	4a18      	ldr	r2, [pc, #96]	; (8007268 <prvAddNewTaskToReadyList+0xd4>)
 8007206:	6013      	str	r3, [r2, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800720c:	4613      	mov	r3, r2
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	4413      	add	r3, r2
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	4a15      	ldr	r2, [pc, #84]	; (800726c <prvAddNewTaskToReadyList+0xd8>)
 8007216:	441a      	add	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	3304      	adds	r3, #4
 800721c:	4619      	mov	r1, r3
 800721e:	4610      	mov	r0, r2
 8007220:	f7fe fec7 	bl	8005fb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007224:	f7ff f8a6 	bl	8006374 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007228:	4b0d      	ldr	r3, [pc, #52]	; (8007260 <prvAddNewTaskToReadyList+0xcc>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00e      	beq.n	800724e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007230:	4b0a      	ldr	r3, [pc, #40]	; (800725c <prvAddNewTaskToReadyList+0xc8>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723a:	429a      	cmp	r2, r3
 800723c:	d207      	bcs.n	800724e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800723e:	4b0c      	ldr	r3, [pc, #48]	; (8007270 <prvAddNewTaskToReadyList+0xdc>)
 8007240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007244:	601a      	str	r2, [r3, #0]
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800724e:	bf00      	nop
 8007250:	3708      	adds	r7, #8
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	2401e3f4 	.word	0x2401e3f4
 800725c:	2401df20 	.word	0x2401df20
 8007260:	2401e400 	.word	0x2401e400
 8007264:	2401e410 	.word	0x2401e410
 8007268:	2401e3fc 	.word	0x2401e3fc
 800726c:	2401df24 	.word	0x2401df24
 8007270:	e000ed04 	.word	0xe000ed04

08007274 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800727c:	2300      	movs	r3, #0
 800727e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d017      	beq.n	80072b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007286:	4b13      	ldr	r3, [pc, #76]	; (80072d4 <vTaskDelay+0x60>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00a      	beq.n	80072a4 <vTaskDelay+0x30>
	__asm volatile
 800728e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007292:	f383 8811 	msr	BASEPRI, r3
 8007296:	f3bf 8f6f 	isb	sy
 800729a:	f3bf 8f4f 	dsb	sy
 800729e:	60bb      	str	r3, [r7, #8]
}
 80072a0:	bf00      	nop
 80072a2:	e7fe      	b.n	80072a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80072a4:	f000 f880 	bl	80073a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80072a8:	2100      	movs	r1, #0
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fd0e 	bl	8007ccc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80072b0:	f000 f888 	bl	80073c4 <xTaskResumeAll>
 80072b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d107      	bne.n	80072cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80072bc:	4b06      	ldr	r3, [pc, #24]	; (80072d8 <vTaskDelay+0x64>)
 80072be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072c2:	601a      	str	r2, [r3, #0]
 80072c4:	f3bf 8f4f 	dsb	sy
 80072c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072cc:	bf00      	nop
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	2401e41c 	.word	0x2401e41c
 80072d8:	e000ed04 	.word	0xe000ed04

080072dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b08a      	sub	sp, #40	; 0x28
 80072e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80072e2:	2300      	movs	r3, #0
 80072e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80072e6:	2300      	movs	r3, #0
 80072e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80072ea:	463a      	mov	r2, r7
 80072ec:	1d39      	adds	r1, r7, #4
 80072ee:	f107 0308 	add.w	r3, r7, #8
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7fe fc0c 	bl	8005b10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80072f8:	6839      	ldr	r1, [r7, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	9202      	str	r2, [sp, #8]
 8007300:	9301      	str	r3, [sp, #4]
 8007302:	2300      	movs	r3, #0
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	2300      	movs	r3, #0
 8007308:	460a      	mov	r2, r1
 800730a:	4921      	ldr	r1, [pc, #132]	; (8007390 <vTaskStartScheduler+0xb4>)
 800730c:	4821      	ldr	r0, [pc, #132]	; (8007394 <vTaskStartScheduler+0xb8>)
 800730e:	f7ff fe0f 	bl	8006f30 <xTaskCreateStatic>
 8007312:	4603      	mov	r3, r0
 8007314:	4a20      	ldr	r2, [pc, #128]	; (8007398 <vTaskStartScheduler+0xbc>)
 8007316:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007318:	4b1f      	ldr	r3, [pc, #124]	; (8007398 <vTaskStartScheduler+0xbc>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d002      	beq.n	8007326 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007320:	2301      	movs	r3, #1
 8007322:	617b      	str	r3, [r7, #20]
 8007324:	e001      	b.n	800732a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007326:	2300      	movs	r3, #0
 8007328:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	2b01      	cmp	r3, #1
 800732e:	d102      	bne.n	8007336 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007330:	f000 fd20 	bl	8007d74 <xTimerCreateTimerTask>
 8007334:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	2b01      	cmp	r3, #1
 800733a:	d116      	bne.n	800736a <vTaskStartScheduler+0x8e>
	__asm volatile
 800733c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007340:	f383 8811 	msr	BASEPRI, r3
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	613b      	str	r3, [r7, #16]
}
 800734e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007350:	4b12      	ldr	r3, [pc, #72]	; (800739c <vTaskStartScheduler+0xc0>)
 8007352:	f04f 32ff 	mov.w	r2, #4294967295
 8007356:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007358:	4b11      	ldr	r3, [pc, #68]	; (80073a0 <vTaskStartScheduler+0xc4>)
 800735a:	2201      	movs	r2, #1
 800735c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800735e:	4b11      	ldr	r3, [pc, #68]	; (80073a4 <vTaskStartScheduler+0xc8>)
 8007360:	2200      	movs	r2, #0
 8007362:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007364:	f7fe ff34 	bl	80061d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007368:	e00e      	b.n	8007388 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007370:	d10a      	bne.n	8007388 <vTaskStartScheduler+0xac>
	__asm volatile
 8007372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007376:	f383 8811 	msr	BASEPRI, r3
 800737a:	f3bf 8f6f 	isb	sy
 800737e:	f3bf 8f4f 	dsb	sy
 8007382:	60fb      	str	r3, [r7, #12]
}
 8007384:	bf00      	nop
 8007386:	e7fe      	b.n	8007386 <vTaskStartScheduler+0xaa>
}
 8007388:	bf00      	nop
 800738a:	3718      	adds	r7, #24
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	0802d260 	.word	0x0802d260
 8007394:	08007a09 	.word	0x08007a09
 8007398:	2401e418 	.word	0x2401e418
 800739c:	2401e414 	.word	0x2401e414
 80073a0:	2401e400 	.word	0x2401e400
 80073a4:	2401e3f8 	.word	0x2401e3f8

080073a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80073a8:	b480      	push	{r7}
 80073aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80073ac:	4b04      	ldr	r3, [pc, #16]	; (80073c0 <vTaskSuspendAll+0x18>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	3301      	adds	r3, #1
 80073b2:	4a03      	ldr	r2, [pc, #12]	; (80073c0 <vTaskSuspendAll+0x18>)
 80073b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80073b6:	bf00      	nop
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	2401e41c 	.word	0x2401e41c

080073c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80073ca:	2300      	movs	r3, #0
 80073cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80073ce:	2300      	movs	r3, #0
 80073d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80073d2:	4b42      	ldr	r3, [pc, #264]	; (80074dc <xTaskResumeAll+0x118>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10a      	bne.n	80073f0 <xTaskResumeAll+0x2c>
	__asm volatile
 80073da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073de:	f383 8811 	msr	BASEPRI, r3
 80073e2:	f3bf 8f6f 	isb	sy
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	603b      	str	r3, [r7, #0]
}
 80073ec:	bf00      	nop
 80073ee:	e7fe      	b.n	80073ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80073f0:	f7fe ff90 	bl	8006314 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80073f4:	4b39      	ldr	r3, [pc, #228]	; (80074dc <xTaskResumeAll+0x118>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	3b01      	subs	r3, #1
 80073fa:	4a38      	ldr	r2, [pc, #224]	; (80074dc <xTaskResumeAll+0x118>)
 80073fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073fe:	4b37      	ldr	r3, [pc, #220]	; (80074dc <xTaskResumeAll+0x118>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d162      	bne.n	80074cc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007406:	4b36      	ldr	r3, [pc, #216]	; (80074e0 <xTaskResumeAll+0x11c>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d05e      	beq.n	80074cc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800740e:	e02f      	b.n	8007470 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007410:	4b34      	ldr	r3, [pc, #208]	; (80074e4 <xTaskResumeAll+0x120>)
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	3318      	adds	r3, #24
 800741c:	4618      	mov	r0, r3
 800741e:	f7fe fe25 	bl	800606c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	3304      	adds	r3, #4
 8007426:	4618      	mov	r0, r3
 8007428:	f7fe fe20 	bl	800606c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007430:	4b2d      	ldr	r3, [pc, #180]	; (80074e8 <xTaskResumeAll+0x124>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	429a      	cmp	r2, r3
 8007436:	d903      	bls.n	8007440 <xTaskResumeAll+0x7c>
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743c:	4a2a      	ldr	r2, [pc, #168]	; (80074e8 <xTaskResumeAll+0x124>)
 800743e:	6013      	str	r3, [r2, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007444:	4613      	mov	r3, r2
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	4413      	add	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4a27      	ldr	r2, [pc, #156]	; (80074ec <xTaskResumeAll+0x128>)
 800744e:	441a      	add	r2, r3
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	3304      	adds	r3, #4
 8007454:	4619      	mov	r1, r3
 8007456:	4610      	mov	r0, r2
 8007458:	f7fe fdab 	bl	8005fb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007460:	4b23      	ldr	r3, [pc, #140]	; (80074f0 <xTaskResumeAll+0x12c>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007466:	429a      	cmp	r2, r3
 8007468:	d302      	bcc.n	8007470 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800746a:	4b22      	ldr	r3, [pc, #136]	; (80074f4 <xTaskResumeAll+0x130>)
 800746c:	2201      	movs	r2, #1
 800746e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007470:	4b1c      	ldr	r3, [pc, #112]	; (80074e4 <xTaskResumeAll+0x120>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1cb      	bne.n	8007410 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d001      	beq.n	8007482 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800747e:	f000 fb79 	bl	8007b74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007482:	4b1d      	ldr	r3, [pc, #116]	; (80074f8 <xTaskResumeAll+0x134>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d010      	beq.n	80074b0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800748e:	f000 f847 	bl	8007520 <xTaskIncrementTick>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d002      	beq.n	800749e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007498:	4b16      	ldr	r3, [pc, #88]	; (80074f4 <xTaskResumeAll+0x130>)
 800749a:	2201      	movs	r2, #1
 800749c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	3b01      	subs	r3, #1
 80074a2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1f1      	bne.n	800748e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80074aa:	4b13      	ldr	r3, [pc, #76]	; (80074f8 <xTaskResumeAll+0x134>)
 80074ac:	2200      	movs	r2, #0
 80074ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80074b0:	4b10      	ldr	r3, [pc, #64]	; (80074f4 <xTaskResumeAll+0x130>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d009      	beq.n	80074cc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80074b8:	2301      	movs	r3, #1
 80074ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80074bc:	4b0f      	ldr	r3, [pc, #60]	; (80074fc <xTaskResumeAll+0x138>)
 80074be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074c2:	601a      	str	r2, [r3, #0]
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80074cc:	f7fe ff52 	bl	8006374 <vPortExitCritical>

	return xAlreadyYielded;
 80074d0:	68bb      	ldr	r3, [r7, #8]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	2401e41c 	.word	0x2401e41c
 80074e0:	2401e3f4 	.word	0x2401e3f4
 80074e4:	2401e3b4 	.word	0x2401e3b4
 80074e8:	2401e3fc 	.word	0x2401e3fc
 80074ec:	2401df24 	.word	0x2401df24
 80074f0:	2401df20 	.word	0x2401df20
 80074f4:	2401e408 	.word	0x2401e408
 80074f8:	2401e404 	.word	0x2401e404
 80074fc:	e000ed04 	.word	0xe000ed04

08007500 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007506:	4b05      	ldr	r3, [pc, #20]	; (800751c <xTaskGetTickCount+0x1c>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800750c:	687b      	ldr	r3, [r7, #4]
}
 800750e:	4618      	mov	r0, r3
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	2401e3f8 	.word	0x2401e3f8

08007520 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007526:	2300      	movs	r3, #0
 8007528:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800752a:	4b4f      	ldr	r3, [pc, #316]	; (8007668 <xTaskIncrementTick+0x148>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	f040 808f 	bne.w	8007652 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007534:	4b4d      	ldr	r3, [pc, #308]	; (800766c <xTaskIncrementTick+0x14c>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	3301      	adds	r3, #1
 800753a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800753c:	4a4b      	ldr	r2, [pc, #300]	; (800766c <xTaskIncrementTick+0x14c>)
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d120      	bne.n	800758a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007548:	4b49      	ldr	r3, [pc, #292]	; (8007670 <xTaskIncrementTick+0x150>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00a      	beq.n	8007568 <xTaskIncrementTick+0x48>
	__asm volatile
 8007552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007556:	f383 8811 	msr	BASEPRI, r3
 800755a:	f3bf 8f6f 	isb	sy
 800755e:	f3bf 8f4f 	dsb	sy
 8007562:	603b      	str	r3, [r7, #0]
}
 8007564:	bf00      	nop
 8007566:	e7fe      	b.n	8007566 <xTaskIncrementTick+0x46>
 8007568:	4b41      	ldr	r3, [pc, #260]	; (8007670 <xTaskIncrementTick+0x150>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	60fb      	str	r3, [r7, #12]
 800756e:	4b41      	ldr	r3, [pc, #260]	; (8007674 <xTaskIncrementTick+0x154>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a3f      	ldr	r2, [pc, #252]	; (8007670 <xTaskIncrementTick+0x150>)
 8007574:	6013      	str	r3, [r2, #0]
 8007576:	4a3f      	ldr	r2, [pc, #252]	; (8007674 <xTaskIncrementTick+0x154>)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6013      	str	r3, [r2, #0]
 800757c:	4b3e      	ldr	r3, [pc, #248]	; (8007678 <xTaskIncrementTick+0x158>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	3301      	adds	r3, #1
 8007582:	4a3d      	ldr	r2, [pc, #244]	; (8007678 <xTaskIncrementTick+0x158>)
 8007584:	6013      	str	r3, [r2, #0]
 8007586:	f000 faf5 	bl	8007b74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800758a:	4b3c      	ldr	r3, [pc, #240]	; (800767c <xTaskIncrementTick+0x15c>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	429a      	cmp	r2, r3
 8007592:	d349      	bcc.n	8007628 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007594:	4b36      	ldr	r3, [pc, #216]	; (8007670 <xTaskIncrementTick+0x150>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d104      	bne.n	80075a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800759e:	4b37      	ldr	r3, [pc, #220]	; (800767c <xTaskIncrementTick+0x15c>)
 80075a0:	f04f 32ff 	mov.w	r2, #4294967295
 80075a4:	601a      	str	r2, [r3, #0]
					break;
 80075a6:	e03f      	b.n	8007628 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075a8:	4b31      	ldr	r3, [pc, #196]	; (8007670 <xTaskIncrementTick+0x150>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80075b8:	693a      	ldr	r2, [r7, #16]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d203      	bcs.n	80075c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80075c0:	4a2e      	ldr	r2, [pc, #184]	; (800767c <xTaskIncrementTick+0x15c>)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80075c6:	e02f      	b.n	8007628 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	3304      	adds	r3, #4
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7fe fd4d 	bl	800606c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d004      	beq.n	80075e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	3318      	adds	r3, #24
 80075de:	4618      	mov	r0, r3
 80075e0:	f7fe fd44 	bl	800606c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e8:	4b25      	ldr	r3, [pc, #148]	; (8007680 <xTaskIncrementTick+0x160>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d903      	bls.n	80075f8 <xTaskIncrementTick+0xd8>
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f4:	4a22      	ldr	r2, [pc, #136]	; (8007680 <xTaskIncrementTick+0x160>)
 80075f6:	6013      	str	r3, [r2, #0]
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075fc:	4613      	mov	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	4413      	add	r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	4a1f      	ldr	r2, [pc, #124]	; (8007684 <xTaskIncrementTick+0x164>)
 8007606:	441a      	add	r2, r3
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	3304      	adds	r3, #4
 800760c:	4619      	mov	r1, r3
 800760e:	4610      	mov	r0, r2
 8007610:	f7fe fccf 	bl	8005fb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007618:	4b1b      	ldr	r3, [pc, #108]	; (8007688 <xTaskIncrementTick+0x168>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761e:	429a      	cmp	r2, r3
 8007620:	d3b8      	bcc.n	8007594 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007622:	2301      	movs	r3, #1
 8007624:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007626:	e7b5      	b.n	8007594 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007628:	4b17      	ldr	r3, [pc, #92]	; (8007688 <xTaskIncrementTick+0x168>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800762e:	4915      	ldr	r1, [pc, #84]	; (8007684 <xTaskIncrementTick+0x164>)
 8007630:	4613      	mov	r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	4413      	add	r3, r2
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	440b      	add	r3, r1
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d901      	bls.n	8007644 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007640:	2301      	movs	r3, #1
 8007642:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007644:	4b11      	ldr	r3, [pc, #68]	; (800768c <xTaskIncrementTick+0x16c>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d007      	beq.n	800765c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800764c:	2301      	movs	r3, #1
 800764e:	617b      	str	r3, [r7, #20]
 8007650:	e004      	b.n	800765c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007652:	4b0f      	ldr	r3, [pc, #60]	; (8007690 <xTaskIncrementTick+0x170>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	3301      	adds	r3, #1
 8007658:	4a0d      	ldr	r2, [pc, #52]	; (8007690 <xTaskIncrementTick+0x170>)
 800765a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800765c:	697b      	ldr	r3, [r7, #20]
}
 800765e:	4618      	mov	r0, r3
 8007660:	3718      	adds	r7, #24
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	2401e41c 	.word	0x2401e41c
 800766c:	2401e3f8 	.word	0x2401e3f8
 8007670:	2401e3ac 	.word	0x2401e3ac
 8007674:	2401e3b0 	.word	0x2401e3b0
 8007678:	2401e40c 	.word	0x2401e40c
 800767c:	2401e414 	.word	0x2401e414
 8007680:	2401e3fc 	.word	0x2401e3fc
 8007684:	2401df24 	.word	0x2401df24
 8007688:	2401df20 	.word	0x2401df20
 800768c:	2401e408 	.word	0x2401e408
 8007690:	2401e404 	.word	0x2401e404

08007694 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b086      	sub	sp, #24
 8007698:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800769a:	4b3a      	ldr	r3, [pc, #232]	; (8007784 <vTaskSwitchContext+0xf0>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d003      	beq.n	80076aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80076a2:	4b39      	ldr	r3, [pc, #228]	; (8007788 <vTaskSwitchContext+0xf4>)
 80076a4:	2201      	movs	r2, #1
 80076a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80076a8:	e068      	b.n	800777c <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 80076aa:	4b37      	ldr	r3, [pc, #220]	; (8007788 <vTaskSwitchContext+0xf4>)
 80076ac:	2200      	movs	r2, #0
 80076ae:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80076b0:	4b36      	ldr	r3, [pc, #216]	; (800778c <vTaskSwitchContext+0xf8>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b6:	613b      	str	r3, [r7, #16]
 80076b8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80076bc:	60fb      	str	r3, [r7, #12]
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d111      	bne.n	80076ec <vTaskSwitchContext+0x58>
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	3304      	adds	r3, #4
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d10b      	bne.n	80076ec <vTaskSwitchContext+0x58>
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	3308      	adds	r3, #8
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d105      	bne.n	80076ec <vTaskSwitchContext+0x58>
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	330c      	adds	r3, #12
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d008      	beq.n	80076fe <vTaskSwitchContext+0x6a>
 80076ec:	4b27      	ldr	r3, [pc, #156]	; (800778c <vTaskSwitchContext+0xf8>)
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	4b26      	ldr	r3, [pc, #152]	; (800778c <vTaskSwitchContext+0xf8>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	3334      	adds	r3, #52	; 0x34
 80076f6:	4619      	mov	r1, r3
 80076f8:	4610      	mov	r0, r2
 80076fa:	f7f9 f861 	bl	80007c0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076fe:	4b24      	ldr	r3, [pc, #144]	; (8007790 <vTaskSwitchContext+0xfc>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	617b      	str	r3, [r7, #20]
 8007704:	e010      	b.n	8007728 <vTaskSwitchContext+0x94>
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10a      	bne.n	8007722 <vTaskSwitchContext+0x8e>
	__asm volatile
 800770c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007710:	f383 8811 	msr	BASEPRI, r3
 8007714:	f3bf 8f6f 	isb	sy
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	607b      	str	r3, [r7, #4]
}
 800771e:	bf00      	nop
 8007720:	e7fe      	b.n	8007720 <vTaskSwitchContext+0x8c>
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	3b01      	subs	r3, #1
 8007726:	617b      	str	r3, [r7, #20]
 8007728:	491a      	ldr	r1, [pc, #104]	; (8007794 <vTaskSwitchContext+0x100>)
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	4613      	mov	r3, r2
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4413      	add	r3, r2
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	440b      	add	r3, r1
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d0e4      	beq.n	8007706 <vTaskSwitchContext+0x72>
 800773c:	697a      	ldr	r2, [r7, #20]
 800773e:	4613      	mov	r3, r2
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4413      	add	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	4a13      	ldr	r2, [pc, #76]	; (8007794 <vTaskSwitchContext+0x100>)
 8007748:	4413      	add	r3, r2
 800774a:	60bb      	str	r3, [r7, #8]
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	685a      	ldr	r2, [r3, #4]
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	605a      	str	r2, [r3, #4]
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	685a      	ldr	r2, [r3, #4]
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	3308      	adds	r3, #8
 800775e:	429a      	cmp	r2, r3
 8007760:	d104      	bne.n	800776c <vTaskSwitchContext+0xd8>
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	685a      	ldr	r2, [r3, #4]
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	605a      	str	r2, [r3, #4]
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	4a06      	ldr	r2, [pc, #24]	; (800778c <vTaskSwitchContext+0xf8>)
 8007774:	6013      	str	r3, [r2, #0]
 8007776:	4a06      	ldr	r2, [pc, #24]	; (8007790 <vTaskSwitchContext+0xfc>)
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	6013      	str	r3, [r2, #0]
}
 800777c:	bf00      	nop
 800777e:	3718      	adds	r7, #24
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	2401e41c 	.word	0x2401e41c
 8007788:	2401e408 	.word	0x2401e408
 800778c:	2401df20 	.word	0x2401df20
 8007790:	2401e3fc 	.word	0x2401e3fc
 8007794:	2401df24 	.word	0x2401df24

08007798 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10a      	bne.n	80077be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80077a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ac:	f383 8811 	msr	BASEPRI, r3
 80077b0:	f3bf 8f6f 	isb	sy
 80077b4:	f3bf 8f4f 	dsb	sy
 80077b8:	60fb      	str	r3, [r7, #12]
}
 80077ba:	bf00      	nop
 80077bc:	e7fe      	b.n	80077bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077be:	4b07      	ldr	r3, [pc, #28]	; (80077dc <vTaskPlaceOnEventList+0x44>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	3318      	adds	r3, #24
 80077c4:	4619      	mov	r1, r3
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7fe fc17 	bl	8005ffa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80077cc:	2101      	movs	r1, #1
 80077ce:	6838      	ldr	r0, [r7, #0]
 80077d0:	f000 fa7c 	bl	8007ccc <prvAddCurrentTaskToDelayedList>
}
 80077d4:	bf00      	nop
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	2401df20 	.word	0x2401df20

080077e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10a      	bne.n	8007808 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80077f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	617b      	str	r3, [r7, #20]
}
 8007804:	bf00      	nop
 8007806:	e7fe      	b.n	8007806 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007808:	4b0a      	ldr	r3, [pc, #40]	; (8007834 <vTaskPlaceOnEventListRestricted+0x54>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	3318      	adds	r3, #24
 800780e:	4619      	mov	r1, r3
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	f7fe fbce 	bl	8005fb2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d002      	beq.n	8007822 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800781c:	f04f 33ff 	mov.w	r3, #4294967295
 8007820:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007822:	6879      	ldr	r1, [r7, #4]
 8007824:	68b8      	ldr	r0, [r7, #8]
 8007826:	f000 fa51 	bl	8007ccc <prvAddCurrentTaskToDelayedList>
	}
 800782a:	bf00      	nop
 800782c:	3718      	adds	r7, #24
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	2401df20 	.word	0x2401df20

08007838 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b086      	sub	sp, #24
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d10a      	bne.n	8007864 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800784e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007852:	f383 8811 	msr	BASEPRI, r3
 8007856:	f3bf 8f6f 	isb	sy
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	60fb      	str	r3, [r7, #12]
}
 8007860:	bf00      	nop
 8007862:	e7fe      	b.n	8007862 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	3318      	adds	r3, #24
 8007868:	4618      	mov	r0, r3
 800786a:	f7fe fbff 	bl	800606c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800786e:	4b1e      	ldr	r3, [pc, #120]	; (80078e8 <xTaskRemoveFromEventList+0xb0>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d11d      	bne.n	80078b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	3304      	adds	r3, #4
 800787a:	4618      	mov	r0, r3
 800787c:	f7fe fbf6 	bl	800606c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007884:	4b19      	ldr	r3, [pc, #100]	; (80078ec <xTaskRemoveFromEventList+0xb4>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	429a      	cmp	r2, r3
 800788a:	d903      	bls.n	8007894 <xTaskRemoveFromEventList+0x5c>
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007890:	4a16      	ldr	r2, [pc, #88]	; (80078ec <xTaskRemoveFromEventList+0xb4>)
 8007892:	6013      	str	r3, [r2, #0]
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007898:	4613      	mov	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	4a13      	ldr	r2, [pc, #76]	; (80078f0 <xTaskRemoveFromEventList+0xb8>)
 80078a2:	441a      	add	r2, r3
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	3304      	adds	r3, #4
 80078a8:	4619      	mov	r1, r3
 80078aa:	4610      	mov	r0, r2
 80078ac:	f7fe fb81 	bl	8005fb2 <vListInsertEnd>
 80078b0:	e005      	b.n	80078be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	3318      	adds	r3, #24
 80078b6:	4619      	mov	r1, r3
 80078b8:	480e      	ldr	r0, [pc, #56]	; (80078f4 <xTaskRemoveFromEventList+0xbc>)
 80078ba:	f7fe fb7a 	bl	8005fb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c2:	4b0d      	ldr	r3, [pc, #52]	; (80078f8 <xTaskRemoveFromEventList+0xc0>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d905      	bls.n	80078d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80078cc:	2301      	movs	r3, #1
 80078ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80078d0:	4b0a      	ldr	r3, [pc, #40]	; (80078fc <xTaskRemoveFromEventList+0xc4>)
 80078d2:	2201      	movs	r2, #1
 80078d4:	601a      	str	r2, [r3, #0]
 80078d6:	e001      	b.n	80078dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80078d8:	2300      	movs	r3, #0
 80078da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80078dc:	697b      	ldr	r3, [r7, #20]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3718      	adds	r7, #24
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	2401e41c 	.word	0x2401e41c
 80078ec:	2401e3fc 	.word	0x2401e3fc
 80078f0:	2401df24 	.word	0x2401df24
 80078f4:	2401e3b4 	.word	0x2401e3b4
 80078f8:	2401df20 	.word	0x2401df20
 80078fc:	2401e408 	.word	0x2401e408

08007900 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007908:	4b06      	ldr	r3, [pc, #24]	; (8007924 <vTaskInternalSetTimeOutState+0x24>)
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007910:	4b05      	ldr	r3, [pc, #20]	; (8007928 <vTaskInternalSetTimeOutState+0x28>)
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	605a      	str	r2, [r3, #4]
}
 8007918:	bf00      	nop
 800791a:	370c      	adds	r7, #12
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr
 8007924:	2401e40c 	.word	0x2401e40c
 8007928:	2401e3f8 	.word	0x2401e3f8

0800792c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b088      	sub	sp, #32
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d10a      	bne.n	8007952 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800793c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007940:	f383 8811 	msr	BASEPRI, r3
 8007944:	f3bf 8f6f 	isb	sy
 8007948:	f3bf 8f4f 	dsb	sy
 800794c:	613b      	str	r3, [r7, #16]
}
 800794e:	bf00      	nop
 8007950:	e7fe      	b.n	8007950 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10a      	bne.n	800796e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795c:	f383 8811 	msr	BASEPRI, r3
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	60fb      	str	r3, [r7, #12]
}
 800796a:	bf00      	nop
 800796c:	e7fe      	b.n	800796c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800796e:	f7fe fcd1 	bl	8006314 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007972:	4b1d      	ldr	r3, [pc, #116]	; (80079e8 <xTaskCheckForTimeOut+0xbc>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	69ba      	ldr	r2, [r7, #24]
 800797e:	1ad3      	subs	r3, r2, r3
 8007980:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800798a:	d102      	bne.n	8007992 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800798c:	2300      	movs	r3, #0
 800798e:	61fb      	str	r3, [r7, #28]
 8007990:	e023      	b.n	80079da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	4b15      	ldr	r3, [pc, #84]	; (80079ec <xTaskCheckForTimeOut+0xc0>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	429a      	cmp	r2, r3
 800799c:	d007      	beq.n	80079ae <xTaskCheckForTimeOut+0x82>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	69ba      	ldr	r2, [r7, #24]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d302      	bcc.n	80079ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80079a8:	2301      	movs	r3, #1
 80079aa:	61fb      	str	r3, [r7, #28]
 80079ac:	e015      	b.n	80079da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d20b      	bcs.n	80079d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	1ad2      	subs	r2, r2, r3
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f7ff ff9b 	bl	8007900 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80079ca:	2300      	movs	r3, #0
 80079cc:	61fb      	str	r3, [r7, #28]
 80079ce:	e004      	b.n	80079da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	2200      	movs	r2, #0
 80079d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80079d6:	2301      	movs	r3, #1
 80079d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80079da:	f7fe fccb 	bl	8006374 <vPortExitCritical>

	return xReturn;
 80079de:	69fb      	ldr	r3, [r7, #28]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3720      	adds	r7, #32
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	2401e3f8 	.word	0x2401e3f8
 80079ec:	2401e40c 	.word	0x2401e40c

080079f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80079f0:	b480      	push	{r7}
 80079f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80079f4:	4b03      	ldr	r3, [pc, #12]	; (8007a04 <vTaskMissedYield+0x14>)
 80079f6:	2201      	movs	r2, #1
 80079f8:	601a      	str	r2, [r3, #0]
}
 80079fa:	bf00      	nop
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr
 8007a04:	2401e408 	.word	0x2401e408

08007a08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a10:	f000 f852 	bl	8007ab8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a14:	4b06      	ldr	r3, [pc, #24]	; (8007a30 <prvIdleTask+0x28>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d9f9      	bls.n	8007a10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a1c:	4b05      	ldr	r3, [pc, #20]	; (8007a34 <prvIdleTask+0x2c>)
 8007a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a22:	601a      	str	r2, [r3, #0]
 8007a24:	f3bf 8f4f 	dsb	sy
 8007a28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a2c:	e7f0      	b.n	8007a10 <prvIdleTask+0x8>
 8007a2e:	bf00      	nop
 8007a30:	2401df24 	.word	0x2401df24
 8007a34:	e000ed04 	.word	0xe000ed04

08007a38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a3e:	2300      	movs	r3, #0
 8007a40:	607b      	str	r3, [r7, #4]
 8007a42:	e00c      	b.n	8007a5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	4613      	mov	r3, r2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	4413      	add	r3, r2
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	4a12      	ldr	r2, [pc, #72]	; (8007a98 <prvInitialiseTaskLists+0x60>)
 8007a50:	4413      	add	r3, r2
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7fe fa80 	bl	8005f58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	607b      	str	r3, [r7, #4]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2b37      	cmp	r3, #55	; 0x37
 8007a62:	d9ef      	bls.n	8007a44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007a64:	480d      	ldr	r0, [pc, #52]	; (8007a9c <prvInitialiseTaskLists+0x64>)
 8007a66:	f7fe fa77 	bl	8005f58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007a6a:	480d      	ldr	r0, [pc, #52]	; (8007aa0 <prvInitialiseTaskLists+0x68>)
 8007a6c:	f7fe fa74 	bl	8005f58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007a70:	480c      	ldr	r0, [pc, #48]	; (8007aa4 <prvInitialiseTaskLists+0x6c>)
 8007a72:	f7fe fa71 	bl	8005f58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007a76:	480c      	ldr	r0, [pc, #48]	; (8007aa8 <prvInitialiseTaskLists+0x70>)
 8007a78:	f7fe fa6e 	bl	8005f58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a7c:	480b      	ldr	r0, [pc, #44]	; (8007aac <prvInitialiseTaskLists+0x74>)
 8007a7e:	f7fe fa6b 	bl	8005f58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007a82:	4b0b      	ldr	r3, [pc, #44]	; (8007ab0 <prvInitialiseTaskLists+0x78>)
 8007a84:	4a05      	ldr	r2, [pc, #20]	; (8007a9c <prvInitialiseTaskLists+0x64>)
 8007a86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007a88:	4b0a      	ldr	r3, [pc, #40]	; (8007ab4 <prvInitialiseTaskLists+0x7c>)
 8007a8a:	4a05      	ldr	r2, [pc, #20]	; (8007aa0 <prvInitialiseTaskLists+0x68>)
 8007a8c:	601a      	str	r2, [r3, #0]
}
 8007a8e:	bf00      	nop
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	2401df24 	.word	0x2401df24
 8007a9c:	2401e384 	.word	0x2401e384
 8007aa0:	2401e398 	.word	0x2401e398
 8007aa4:	2401e3b4 	.word	0x2401e3b4
 8007aa8:	2401e3c8 	.word	0x2401e3c8
 8007aac:	2401e3e0 	.word	0x2401e3e0
 8007ab0:	2401e3ac 	.word	0x2401e3ac
 8007ab4:	2401e3b0 	.word	0x2401e3b0

08007ab8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007abe:	e019      	b.n	8007af4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ac0:	f7fe fc28 	bl	8006314 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ac4:	4b10      	ldr	r3, [pc, #64]	; (8007b08 <prvCheckTasksWaitingTermination+0x50>)
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	3304      	adds	r3, #4
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7fe facb 	bl	800606c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007ad6:	4b0d      	ldr	r3, [pc, #52]	; (8007b0c <prvCheckTasksWaitingTermination+0x54>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	3b01      	subs	r3, #1
 8007adc:	4a0b      	ldr	r2, [pc, #44]	; (8007b0c <prvCheckTasksWaitingTermination+0x54>)
 8007ade:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ae0:	4b0b      	ldr	r3, [pc, #44]	; (8007b10 <prvCheckTasksWaitingTermination+0x58>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	4a0a      	ldr	r2, [pc, #40]	; (8007b10 <prvCheckTasksWaitingTermination+0x58>)
 8007ae8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007aea:	f7fe fc43 	bl	8006374 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 f810 	bl	8007b14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007af4:	4b06      	ldr	r3, [pc, #24]	; (8007b10 <prvCheckTasksWaitingTermination+0x58>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d1e1      	bne.n	8007ac0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007afc:	bf00      	nop
 8007afe:	bf00      	nop
 8007b00:	3708      	adds	r7, #8
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	2401e3c8 	.word	0x2401e3c8
 8007b0c:	2401e3f4 	.word	0x2401e3f4
 8007b10:	2401e3dc 	.word	0x2401e3dc

08007b14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d108      	bne.n	8007b38 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7fe f8f4 	bl	8005d18 <vPortFree>
				vPortFree( pxTCB );
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7fe f8f1 	bl	8005d18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b36:	e018      	b.n	8007b6a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d103      	bne.n	8007b4a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f7fe f8e8 	bl	8005d18 <vPortFree>
	}
 8007b48:	e00f      	b.n	8007b6a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d00a      	beq.n	8007b6a <prvDeleteTCB+0x56>
	__asm volatile
 8007b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	60fb      	str	r3, [r7, #12]
}
 8007b66:	bf00      	nop
 8007b68:	e7fe      	b.n	8007b68 <prvDeleteTCB+0x54>
	}
 8007b6a:	bf00      	nop
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
	...

08007b74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b7a:	4b0c      	ldr	r3, [pc, #48]	; (8007bac <prvResetNextTaskUnblockTime+0x38>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d104      	bne.n	8007b8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007b84:	4b0a      	ldr	r3, [pc, #40]	; (8007bb0 <prvResetNextTaskUnblockTime+0x3c>)
 8007b86:	f04f 32ff 	mov.w	r2, #4294967295
 8007b8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007b8c:	e008      	b.n	8007ba0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b8e:	4b07      	ldr	r3, [pc, #28]	; (8007bac <prvResetNextTaskUnblockTime+0x38>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	4a04      	ldr	r2, [pc, #16]	; (8007bb0 <prvResetNextTaskUnblockTime+0x3c>)
 8007b9e:	6013      	str	r3, [r2, #0]
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr
 8007bac:	2401e3ac 	.word	0x2401e3ac
 8007bb0:	2401e414 	.word	0x2401e414

08007bb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007bba:	4b0b      	ldr	r3, [pc, #44]	; (8007be8 <xTaskGetSchedulerState+0x34>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d102      	bne.n	8007bc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	607b      	str	r3, [r7, #4]
 8007bc6:	e008      	b.n	8007bda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bc8:	4b08      	ldr	r3, [pc, #32]	; (8007bec <xTaskGetSchedulerState+0x38>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d102      	bne.n	8007bd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007bd0:	2302      	movs	r3, #2
 8007bd2:	607b      	str	r3, [r7, #4]
 8007bd4:	e001      	b.n	8007bda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007bda:	687b      	ldr	r3, [r7, #4]
	}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr
 8007be8:	2401e400 	.word	0x2401e400
 8007bec:	2401e41c 	.word	0x2401e41c

08007bf0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d056      	beq.n	8007cb4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c06:	4b2e      	ldr	r3, [pc, #184]	; (8007cc0 <xTaskPriorityDisinherit+0xd0>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	693a      	ldr	r2, [r7, #16]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d00a      	beq.n	8007c26 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c14:	f383 8811 	msr	BASEPRI, r3
 8007c18:	f3bf 8f6f 	isb	sy
 8007c1c:	f3bf 8f4f 	dsb	sy
 8007c20:	60fb      	str	r3, [r7, #12]
}
 8007c22:	bf00      	nop
 8007c24:	e7fe      	b.n	8007c24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d10a      	bne.n	8007c44 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c32:	f383 8811 	msr	BASEPRI, r3
 8007c36:	f3bf 8f6f 	isb	sy
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	60bb      	str	r3, [r7, #8]
}
 8007c40:	bf00      	nop
 8007c42:	e7fe      	b.n	8007c42 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c48:	1e5a      	subs	r2, r3, #1
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d02c      	beq.n	8007cb4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d128      	bne.n	8007cb4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	3304      	adds	r3, #4
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7fe fa00 	bl	800606c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c78:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c84:	4b0f      	ldr	r3, [pc, #60]	; (8007cc4 <xTaskPriorityDisinherit+0xd4>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d903      	bls.n	8007c94 <xTaskPriorityDisinherit+0xa4>
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c90:	4a0c      	ldr	r2, [pc, #48]	; (8007cc4 <xTaskPriorityDisinherit+0xd4>)
 8007c92:	6013      	str	r3, [r2, #0]
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c98:	4613      	mov	r3, r2
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4413      	add	r3, r2
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	4a09      	ldr	r2, [pc, #36]	; (8007cc8 <xTaskPriorityDisinherit+0xd8>)
 8007ca2:	441a      	add	r2, r3
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	3304      	adds	r3, #4
 8007ca8:	4619      	mov	r1, r3
 8007caa:	4610      	mov	r0, r2
 8007cac:	f7fe f981 	bl	8005fb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007cb4:	697b      	ldr	r3, [r7, #20]
	}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3718      	adds	r7, #24
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	2401df20 	.word	0x2401df20
 8007cc4:	2401e3fc 	.word	0x2401e3fc
 8007cc8:	2401df24 	.word	0x2401df24

08007ccc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007cd6:	4b21      	ldr	r3, [pc, #132]	; (8007d5c <prvAddCurrentTaskToDelayedList+0x90>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cdc:	4b20      	ldr	r3, [pc, #128]	; (8007d60 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7fe f9c2 	bl	800606c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cee:	d10a      	bne.n	8007d06 <prvAddCurrentTaskToDelayedList+0x3a>
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d007      	beq.n	8007d06 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cf6:	4b1a      	ldr	r3, [pc, #104]	; (8007d60 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	3304      	adds	r3, #4
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	4819      	ldr	r0, [pc, #100]	; (8007d64 <prvAddCurrentTaskToDelayedList+0x98>)
 8007d00:	f7fe f957 	bl	8005fb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d04:	e026      	b.n	8007d54 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d0e:	4b14      	ldr	r3, [pc, #80]	; (8007d60 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d16:	68ba      	ldr	r2, [r7, #8]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d209      	bcs.n	8007d32 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d1e:	4b12      	ldr	r3, [pc, #72]	; (8007d68 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	4b0f      	ldr	r3, [pc, #60]	; (8007d60 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	3304      	adds	r3, #4
 8007d28:	4619      	mov	r1, r3
 8007d2a:	4610      	mov	r0, r2
 8007d2c:	f7fe f965 	bl	8005ffa <vListInsert>
}
 8007d30:	e010      	b.n	8007d54 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d32:	4b0e      	ldr	r3, [pc, #56]	; (8007d6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	4b0a      	ldr	r3, [pc, #40]	; (8007d60 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	3304      	adds	r3, #4
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	4610      	mov	r0, r2
 8007d40:	f7fe f95b 	bl	8005ffa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d44:	4b0a      	ldr	r3, [pc, #40]	; (8007d70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d202      	bcs.n	8007d54 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007d4e:	4a08      	ldr	r2, [pc, #32]	; (8007d70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	6013      	str	r3, [r2, #0]
}
 8007d54:	bf00      	nop
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	2401e3f8 	.word	0x2401e3f8
 8007d60:	2401df20 	.word	0x2401df20
 8007d64:	2401e3e0 	.word	0x2401e3e0
 8007d68:	2401e3b0 	.word	0x2401e3b0
 8007d6c:	2401e3ac 	.word	0x2401e3ac
 8007d70:	2401e414 	.word	0x2401e414

08007d74 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b08a      	sub	sp, #40	; 0x28
 8007d78:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007d7e:	f000 fb07 	bl	8008390 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007d82:	4b1c      	ldr	r3, [pc, #112]	; (8007df4 <xTimerCreateTimerTask+0x80>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d021      	beq.n	8007dce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007d92:	1d3a      	adds	r2, r7, #4
 8007d94:	f107 0108 	add.w	r1, r7, #8
 8007d98:	f107 030c 	add.w	r3, r7, #12
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7fd fed1 	bl	8005b44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007da2:	6879      	ldr	r1, [r7, #4]
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	9202      	str	r2, [sp, #8]
 8007daa:	9301      	str	r3, [sp, #4]
 8007dac:	2302      	movs	r3, #2
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	2300      	movs	r3, #0
 8007db2:	460a      	mov	r2, r1
 8007db4:	4910      	ldr	r1, [pc, #64]	; (8007df8 <xTimerCreateTimerTask+0x84>)
 8007db6:	4811      	ldr	r0, [pc, #68]	; (8007dfc <xTimerCreateTimerTask+0x88>)
 8007db8:	f7ff f8ba 	bl	8006f30 <xTaskCreateStatic>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	4a10      	ldr	r2, [pc, #64]	; (8007e00 <xTimerCreateTimerTask+0x8c>)
 8007dc0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007dc2:	4b0f      	ldr	r3, [pc, #60]	; (8007e00 <xTimerCreateTimerTask+0x8c>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d001      	beq.n	8007dce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10a      	bne.n	8007dea <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd8:	f383 8811 	msr	BASEPRI, r3
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	613b      	str	r3, [r7, #16]
}
 8007de6:	bf00      	nop
 8007de8:	e7fe      	b.n	8007de8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007dea:	697b      	ldr	r3, [r7, #20]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3718      	adds	r7, #24
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	2401e450 	.word	0x2401e450
 8007df8:	0802d268 	.word	0x0802d268
 8007dfc:	08007f39 	.word	0x08007f39
 8007e00:	2401e454 	.word	0x2401e454

08007e04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b08a      	sub	sp, #40	; 0x28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
 8007e10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007e12:	2300      	movs	r3, #0
 8007e14:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10a      	bne.n	8007e32 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	623b      	str	r3, [r7, #32]
}
 8007e2e:	bf00      	nop
 8007e30:	e7fe      	b.n	8007e30 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007e32:	4b1a      	ldr	r3, [pc, #104]	; (8007e9c <xTimerGenericCommand+0x98>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d02a      	beq.n	8007e90 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	2b05      	cmp	r3, #5
 8007e4a:	dc18      	bgt.n	8007e7e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007e4c:	f7ff feb2 	bl	8007bb4 <xTaskGetSchedulerState>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d109      	bne.n	8007e6a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007e56:	4b11      	ldr	r3, [pc, #68]	; (8007e9c <xTimerGenericCommand+0x98>)
 8007e58:	6818      	ldr	r0, [r3, #0]
 8007e5a:	f107 0110 	add.w	r1, r7, #16
 8007e5e:	2300      	movs	r3, #0
 8007e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e62:	f7fe fc7d 	bl	8006760 <xQueueGenericSend>
 8007e66:	6278      	str	r0, [r7, #36]	; 0x24
 8007e68:	e012      	b.n	8007e90 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007e6a:	4b0c      	ldr	r3, [pc, #48]	; (8007e9c <xTimerGenericCommand+0x98>)
 8007e6c:	6818      	ldr	r0, [r3, #0]
 8007e6e:	f107 0110 	add.w	r1, r7, #16
 8007e72:	2300      	movs	r3, #0
 8007e74:	2200      	movs	r2, #0
 8007e76:	f7fe fc73 	bl	8006760 <xQueueGenericSend>
 8007e7a:	6278      	str	r0, [r7, #36]	; 0x24
 8007e7c:	e008      	b.n	8007e90 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007e7e:	4b07      	ldr	r3, [pc, #28]	; (8007e9c <xTimerGenericCommand+0x98>)
 8007e80:	6818      	ldr	r0, [r3, #0]
 8007e82:	f107 0110 	add.w	r1, r7, #16
 8007e86:	2300      	movs	r3, #0
 8007e88:	683a      	ldr	r2, [r7, #0]
 8007e8a:	f7fe fd67 	bl	800695c <xQueueGenericSendFromISR>
 8007e8e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3728      	adds	r7, #40	; 0x28
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	2401e450 	.word	0x2401e450

08007ea0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b088      	sub	sp, #32
 8007ea4:	af02      	add	r7, sp, #8
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eaa:	4b22      	ldr	r3, [pc, #136]	; (8007f34 <prvProcessExpiredTimer+0x94>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	3304      	adds	r3, #4
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7fe f8d7 	bl	800606c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ec4:	f003 0304 	and.w	r3, r3, #4
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d022      	beq.n	8007f12 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	699a      	ldr	r2, [r3, #24]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	18d1      	adds	r1, r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	683a      	ldr	r2, [r7, #0]
 8007ed8:	6978      	ldr	r0, [r7, #20]
 8007eda:	f000 f8d1 	bl	8008080 <prvInsertTimerInActiveList>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d01f      	beq.n	8007f24 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	9300      	str	r3, [sp, #0]
 8007ee8:	2300      	movs	r3, #0
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	2100      	movs	r1, #0
 8007eee:	6978      	ldr	r0, [r7, #20]
 8007ef0:	f7ff ff88 	bl	8007e04 <xTimerGenericCommand>
 8007ef4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d113      	bne.n	8007f24 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f00:	f383 8811 	msr	BASEPRI, r3
 8007f04:	f3bf 8f6f 	isb	sy
 8007f08:	f3bf 8f4f 	dsb	sy
 8007f0c:	60fb      	str	r3, [r7, #12]
}
 8007f0e:	bf00      	nop
 8007f10:	e7fe      	b.n	8007f10 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f18:	f023 0301 	bic.w	r3, r3, #1
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	6a1b      	ldr	r3, [r3, #32]
 8007f28:	6978      	ldr	r0, [r7, #20]
 8007f2a:	4798      	blx	r3
}
 8007f2c:	bf00      	nop
 8007f2e:	3718      	adds	r7, #24
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	2401e448 	.word	0x2401e448

08007f38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f40:	f107 0308 	add.w	r3, r7, #8
 8007f44:	4618      	mov	r0, r3
 8007f46:	f000 f857 	bl	8007ff8 <prvGetNextExpireTime>
 8007f4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	4619      	mov	r1, r3
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f000 f803 	bl	8007f5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007f56:	f000 f8d5 	bl	8008104 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f5a:	e7f1      	b.n	8007f40 <prvTimerTask+0x8>

08007f5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007f66:	f7ff fa1f 	bl	80073a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f6a:	f107 0308 	add.w	r3, r7, #8
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f000 f866 	bl	8008040 <prvSampleTimeNow>
 8007f74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d130      	bne.n	8007fde <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10a      	bne.n	8007f98 <prvProcessTimerOrBlockTask+0x3c>
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d806      	bhi.n	8007f98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007f8a:	f7ff fa1b 	bl	80073c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007f8e:	68f9      	ldr	r1, [r7, #12]
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f7ff ff85 	bl	8007ea0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007f96:	e024      	b.n	8007fe2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d008      	beq.n	8007fb0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007f9e:	4b13      	ldr	r3, [pc, #76]	; (8007fec <prvProcessTimerOrBlockTask+0x90>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d101      	bne.n	8007fac <prvProcessTimerOrBlockTask+0x50>
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e000      	b.n	8007fae <prvProcessTimerOrBlockTask+0x52>
 8007fac:	2300      	movs	r3, #0
 8007fae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007fb0:	4b0f      	ldr	r3, [pc, #60]	; (8007ff0 <prvProcessTimerOrBlockTask+0x94>)
 8007fb2:	6818      	ldr	r0, [r3, #0]
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	1ad3      	subs	r3, r2, r3
 8007fba:	683a      	ldr	r2, [r7, #0]
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	f7fe ff83 	bl	8006ec8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007fc2:	f7ff f9ff 	bl	80073c4 <xTaskResumeAll>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d10a      	bne.n	8007fe2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007fcc:	4b09      	ldr	r3, [pc, #36]	; (8007ff4 <prvProcessTimerOrBlockTask+0x98>)
 8007fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fd2:	601a      	str	r2, [r3, #0]
 8007fd4:	f3bf 8f4f 	dsb	sy
 8007fd8:	f3bf 8f6f 	isb	sy
}
 8007fdc:	e001      	b.n	8007fe2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007fde:	f7ff f9f1 	bl	80073c4 <xTaskResumeAll>
}
 8007fe2:	bf00      	nop
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	2401e44c 	.word	0x2401e44c
 8007ff0:	2401e450 	.word	0x2401e450
 8007ff4:	e000ed04 	.word	0xe000ed04

08007ff8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008000:	4b0e      	ldr	r3, [pc, #56]	; (800803c <prvGetNextExpireTime+0x44>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d101      	bne.n	800800e <prvGetNextExpireTime+0x16>
 800800a:	2201      	movs	r2, #1
 800800c:	e000      	b.n	8008010 <prvGetNextExpireTime+0x18>
 800800e:	2200      	movs	r2, #0
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d105      	bne.n	8008028 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800801c:	4b07      	ldr	r3, [pc, #28]	; (800803c <prvGetNextExpireTime+0x44>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	60fb      	str	r3, [r7, #12]
 8008026:	e001      	b.n	800802c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008028:	2300      	movs	r3, #0
 800802a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800802c:	68fb      	ldr	r3, [r7, #12]
}
 800802e:	4618      	mov	r0, r3
 8008030:	3714      	adds	r7, #20
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	2401e448 	.word	0x2401e448

08008040 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008048:	f7ff fa5a 	bl	8007500 <xTaskGetTickCount>
 800804c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800804e:	4b0b      	ldr	r3, [pc, #44]	; (800807c <prvSampleTimeNow+0x3c>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	68fa      	ldr	r2, [r7, #12]
 8008054:	429a      	cmp	r2, r3
 8008056:	d205      	bcs.n	8008064 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008058:	f000 f936 	bl	80082c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	601a      	str	r2, [r3, #0]
 8008062:	e002      	b.n	800806a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800806a:	4a04      	ldr	r2, [pc, #16]	; (800807c <prvSampleTimeNow+0x3c>)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008070:	68fb      	ldr	r3, [r7, #12]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	2401e458 	.word	0x2401e458

08008080 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b086      	sub	sp, #24
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	607a      	str	r2, [r7, #4]
 800808c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800808e:	2300      	movs	r3, #0
 8008090:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	68ba      	ldr	r2, [r7, #8]
 8008096:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800809e:	68ba      	ldr	r2, [r7, #8]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d812      	bhi.n	80080cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	1ad2      	subs	r2, r2, r3
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	699b      	ldr	r3, [r3, #24]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d302      	bcc.n	80080ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80080b4:	2301      	movs	r3, #1
 80080b6:	617b      	str	r3, [r7, #20]
 80080b8:	e01b      	b.n	80080f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80080ba:	4b10      	ldr	r3, [pc, #64]	; (80080fc <prvInsertTimerInActiveList+0x7c>)
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	3304      	adds	r3, #4
 80080c2:	4619      	mov	r1, r3
 80080c4:	4610      	mov	r0, r2
 80080c6:	f7fd ff98 	bl	8005ffa <vListInsert>
 80080ca:	e012      	b.n	80080f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d206      	bcs.n	80080e2 <prvInsertTimerInActiveList+0x62>
 80080d4:	68ba      	ldr	r2, [r7, #8]
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d302      	bcc.n	80080e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80080dc:	2301      	movs	r3, #1
 80080de:	617b      	str	r3, [r7, #20]
 80080e0:	e007      	b.n	80080f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080e2:	4b07      	ldr	r3, [pc, #28]	; (8008100 <prvInsertTimerInActiveList+0x80>)
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	3304      	adds	r3, #4
 80080ea:	4619      	mov	r1, r3
 80080ec:	4610      	mov	r0, r2
 80080ee:	f7fd ff84 	bl	8005ffa <vListInsert>
		}
	}

	return xProcessTimerNow;
 80080f2:	697b      	ldr	r3, [r7, #20]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3718      	adds	r7, #24
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	2401e44c 	.word	0x2401e44c
 8008100:	2401e448 	.word	0x2401e448

08008104 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b08e      	sub	sp, #56	; 0x38
 8008108:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800810a:	e0ca      	b.n	80082a2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2b00      	cmp	r3, #0
 8008110:	da18      	bge.n	8008144 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008112:	1d3b      	adds	r3, r7, #4
 8008114:	3304      	adds	r3, #4
 8008116:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811a:	2b00      	cmp	r3, #0
 800811c:	d10a      	bne.n	8008134 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800811e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008122:	f383 8811 	msr	BASEPRI, r3
 8008126:	f3bf 8f6f 	isb	sy
 800812a:	f3bf 8f4f 	dsb	sy
 800812e:	61fb      	str	r3, [r7, #28]
}
 8008130:	bf00      	nop
 8008132:	e7fe      	b.n	8008132 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800813a:	6850      	ldr	r0, [r2, #4]
 800813c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800813e:	6892      	ldr	r2, [r2, #8]
 8008140:	4611      	mov	r1, r2
 8008142:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2b00      	cmp	r3, #0
 8008148:	f2c0 80aa 	blt.w	80082a0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008152:	695b      	ldr	r3, [r3, #20]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d004      	beq.n	8008162 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815a:	3304      	adds	r3, #4
 800815c:	4618      	mov	r0, r3
 800815e:	f7fd ff85 	bl	800606c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008162:	463b      	mov	r3, r7
 8008164:	4618      	mov	r0, r3
 8008166:	f7ff ff6b 	bl	8008040 <prvSampleTimeNow>
 800816a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2b09      	cmp	r3, #9
 8008170:	f200 8097 	bhi.w	80082a2 <prvProcessReceivedCommands+0x19e>
 8008174:	a201      	add	r2, pc, #4	; (adr r2, 800817c <prvProcessReceivedCommands+0x78>)
 8008176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800817a:	bf00      	nop
 800817c:	080081a5 	.word	0x080081a5
 8008180:	080081a5 	.word	0x080081a5
 8008184:	080081a5 	.word	0x080081a5
 8008188:	08008219 	.word	0x08008219
 800818c:	0800822d 	.word	0x0800822d
 8008190:	08008277 	.word	0x08008277
 8008194:	080081a5 	.word	0x080081a5
 8008198:	080081a5 	.word	0x080081a5
 800819c:	08008219 	.word	0x08008219
 80081a0:	0800822d 	.word	0x0800822d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80081a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081aa:	f043 0301 	orr.w	r3, r3, #1
 80081ae:	b2da      	uxtb	r2, r3
 80081b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80081b6:	68ba      	ldr	r2, [r7, #8]
 80081b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	18d1      	adds	r1, r2, r3
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081c4:	f7ff ff5c 	bl	8008080 <prvInsertTimerInActiveList>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d069      	beq.n	80082a2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d0:	6a1b      	ldr	r3, [r3, #32]
 80081d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80081d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081dc:	f003 0304 	and.w	r3, r3, #4
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d05e      	beq.n	80082a2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80081e4:	68ba      	ldr	r2, [r7, #8]
 80081e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e8:	699b      	ldr	r3, [r3, #24]
 80081ea:	441a      	add	r2, r3
 80081ec:	2300      	movs	r3, #0
 80081ee:	9300      	str	r3, [sp, #0]
 80081f0:	2300      	movs	r3, #0
 80081f2:	2100      	movs	r1, #0
 80081f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081f6:	f7ff fe05 	bl	8007e04 <xTimerGenericCommand>
 80081fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80081fc:	6a3b      	ldr	r3, [r7, #32]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d14f      	bne.n	80082a2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008206:	f383 8811 	msr	BASEPRI, r3
 800820a:	f3bf 8f6f 	isb	sy
 800820e:	f3bf 8f4f 	dsb	sy
 8008212:	61bb      	str	r3, [r7, #24]
}
 8008214:	bf00      	nop
 8008216:	e7fe      	b.n	8008216 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800821e:	f023 0301 	bic.w	r3, r3, #1
 8008222:	b2da      	uxtb	r2, r3
 8008224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008226:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800822a:	e03a      	b.n	80082a2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800822c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008232:	f043 0301 	orr.w	r3, r3, #1
 8008236:	b2da      	uxtb	r2, r3
 8008238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800823e:	68ba      	ldr	r2, [r7, #8]
 8008240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008242:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008246:	699b      	ldr	r3, [r3, #24]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10a      	bne.n	8008262 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800824c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008250:	f383 8811 	msr	BASEPRI, r3
 8008254:	f3bf 8f6f 	isb	sy
 8008258:	f3bf 8f4f 	dsb	sy
 800825c:	617b      	str	r3, [r7, #20]
}
 800825e:	bf00      	nop
 8008260:	e7fe      	b.n	8008260 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008264:	699a      	ldr	r2, [r3, #24]
 8008266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008268:	18d1      	adds	r1, r2, r3
 800826a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800826e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008270:	f7ff ff06 	bl	8008080 <prvInsertTimerInActiveList>
					break;
 8008274:	e015      	b.n	80082a2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008278:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800827c:	f003 0302 	and.w	r3, r3, #2
 8008280:	2b00      	cmp	r3, #0
 8008282:	d103      	bne.n	800828c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008284:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008286:	f7fd fd47 	bl	8005d18 <vPortFree>
 800828a:	e00a      	b.n	80082a2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800828c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008292:	f023 0301 	bic.w	r3, r3, #1
 8008296:	b2da      	uxtb	r2, r3
 8008298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800829e:	e000      	b.n	80082a2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80082a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80082a2:	4b08      	ldr	r3, [pc, #32]	; (80082c4 <prvProcessReceivedCommands+0x1c0>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	1d39      	adds	r1, r7, #4
 80082a8:	2200      	movs	r2, #0
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7fe fbf2 	bl	8006a94 <xQueueReceive>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f47f af2a 	bne.w	800810c <prvProcessReceivedCommands+0x8>
	}
}
 80082b8:	bf00      	nop
 80082ba:	bf00      	nop
 80082bc:	3730      	adds	r7, #48	; 0x30
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	2401e450 	.word	0x2401e450

080082c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b088      	sub	sp, #32
 80082cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082ce:	e048      	b.n	8008362 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082d0:	4b2d      	ldr	r3, [pc, #180]	; (8008388 <prvSwitchTimerLists+0xc0>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082da:	4b2b      	ldr	r3, [pc, #172]	; (8008388 <prvSwitchTimerLists+0xc0>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	3304      	adds	r3, #4
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7fd febf 	bl	800606c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6a1b      	ldr	r3, [r3, #32]
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082fc:	f003 0304 	and.w	r3, r3, #4
 8008300:	2b00      	cmp	r3, #0
 8008302:	d02e      	beq.n	8008362 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	699b      	ldr	r3, [r3, #24]
 8008308:	693a      	ldr	r2, [r7, #16]
 800830a:	4413      	add	r3, r2
 800830c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800830e:	68ba      	ldr	r2, [r7, #8]
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	429a      	cmp	r2, r3
 8008314:	d90e      	bls.n	8008334 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	68ba      	ldr	r2, [r7, #8]
 800831a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008322:	4b19      	ldr	r3, [pc, #100]	; (8008388 <prvSwitchTimerLists+0xc0>)
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	3304      	adds	r3, #4
 800832a:	4619      	mov	r1, r3
 800832c:	4610      	mov	r0, r2
 800832e:	f7fd fe64 	bl	8005ffa <vListInsert>
 8008332:	e016      	b.n	8008362 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008334:	2300      	movs	r3, #0
 8008336:	9300      	str	r3, [sp, #0]
 8008338:	2300      	movs	r3, #0
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	2100      	movs	r1, #0
 800833e:	68f8      	ldr	r0, [r7, #12]
 8008340:	f7ff fd60 	bl	8007e04 <xTimerGenericCommand>
 8008344:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d10a      	bne.n	8008362 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800834c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008350:	f383 8811 	msr	BASEPRI, r3
 8008354:	f3bf 8f6f 	isb	sy
 8008358:	f3bf 8f4f 	dsb	sy
 800835c:	603b      	str	r3, [r7, #0]
}
 800835e:	bf00      	nop
 8008360:	e7fe      	b.n	8008360 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008362:	4b09      	ldr	r3, [pc, #36]	; (8008388 <prvSwitchTimerLists+0xc0>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d1b1      	bne.n	80082d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800836c:	4b06      	ldr	r3, [pc, #24]	; (8008388 <prvSwitchTimerLists+0xc0>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008372:	4b06      	ldr	r3, [pc, #24]	; (800838c <prvSwitchTimerLists+0xc4>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a04      	ldr	r2, [pc, #16]	; (8008388 <prvSwitchTimerLists+0xc0>)
 8008378:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800837a:	4a04      	ldr	r2, [pc, #16]	; (800838c <prvSwitchTimerLists+0xc4>)
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	6013      	str	r3, [r2, #0]
}
 8008380:	bf00      	nop
 8008382:	3718      	adds	r7, #24
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	2401e448 	.word	0x2401e448
 800838c:	2401e44c 	.word	0x2401e44c

08008390 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008396:	f7fd ffbd 	bl	8006314 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800839a:	4b15      	ldr	r3, [pc, #84]	; (80083f0 <prvCheckForValidListAndQueue+0x60>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d120      	bne.n	80083e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80083a2:	4814      	ldr	r0, [pc, #80]	; (80083f4 <prvCheckForValidListAndQueue+0x64>)
 80083a4:	f7fd fdd8 	bl	8005f58 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80083a8:	4813      	ldr	r0, [pc, #76]	; (80083f8 <prvCheckForValidListAndQueue+0x68>)
 80083aa:	f7fd fdd5 	bl	8005f58 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80083ae:	4b13      	ldr	r3, [pc, #76]	; (80083fc <prvCheckForValidListAndQueue+0x6c>)
 80083b0:	4a10      	ldr	r2, [pc, #64]	; (80083f4 <prvCheckForValidListAndQueue+0x64>)
 80083b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80083b4:	4b12      	ldr	r3, [pc, #72]	; (8008400 <prvCheckForValidListAndQueue+0x70>)
 80083b6:	4a10      	ldr	r2, [pc, #64]	; (80083f8 <prvCheckForValidListAndQueue+0x68>)
 80083b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80083ba:	2300      	movs	r3, #0
 80083bc:	9300      	str	r3, [sp, #0]
 80083be:	4b11      	ldr	r3, [pc, #68]	; (8008404 <prvCheckForValidListAndQueue+0x74>)
 80083c0:	4a11      	ldr	r2, [pc, #68]	; (8008408 <prvCheckForValidListAndQueue+0x78>)
 80083c2:	2110      	movs	r1, #16
 80083c4:	200a      	movs	r0, #10
 80083c6:	f7fe f92f 	bl	8006628 <xQueueGenericCreateStatic>
 80083ca:	4603      	mov	r3, r0
 80083cc:	4a08      	ldr	r2, [pc, #32]	; (80083f0 <prvCheckForValidListAndQueue+0x60>)
 80083ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80083d0:	4b07      	ldr	r3, [pc, #28]	; (80083f0 <prvCheckForValidListAndQueue+0x60>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d005      	beq.n	80083e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80083d8:	4b05      	ldr	r3, [pc, #20]	; (80083f0 <prvCheckForValidListAndQueue+0x60>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	490b      	ldr	r1, [pc, #44]	; (800840c <prvCheckForValidListAndQueue+0x7c>)
 80083de:	4618      	mov	r0, r3
 80083e0:	f7fe fd48 	bl	8006e74 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80083e4:	f7fd ffc6 	bl	8006374 <vPortExitCritical>
}
 80083e8:	bf00      	nop
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	2401e450 	.word	0x2401e450
 80083f4:	2401e420 	.word	0x2401e420
 80083f8:	2401e434 	.word	0x2401e434
 80083fc:	2401e448 	.word	0x2401e448
 8008400:	2401e44c 	.word	0x2401e44c
 8008404:	2401e4fc 	.word	0x2401e4fc
 8008408:	2401e45c 	.word	0x2401e45c
 800840c:	0802d270 	.word	0x0802d270

08008410 <load64>:
  return w;
#endif
}

static WC_INLINE word64 load64( const void *src )
{
 8008410:	b480      	push	{r7}
 8008412:	b083      	sub	sp, #12
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
#if defined(LITTLE_ENDIAN_ORDER)
  return *( word64 * )( src );
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	e9d3 2300 	ldrd	r2, r3, [r3]
  w |= ( word64 )( *p++ ) << 40;
  w |= ( word64 )( *p++ ) << 48;
  w |= ( word64 )( *p++ ) << 56;
  return w;
#endif
}
 800841e:	4610      	mov	r0, r2
 8008420:	4619      	mov	r1, r3
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <store64>:
  *p++ = ( byte )w;
#endif
}

static WC_INLINE void store64( void *dst, word64 w )
{
 800842c:	b480      	push	{r7}
 800842e:	b087      	sub	sp, #28
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	e9c7 2300 	strd	r2, r3, [r7]
#if defined(LITTLE_ENDIAN_ORDER) && !defined(WOLFSSL_GENERAL_ALIGNMENT)
  *( word64 * )( dst ) = w;
#else
  byte *p = ( byte * )dst;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	617b      	str	r3, [r7, #20]
  *p++ = ( byte )w; w >>= 8;
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	1c5a      	adds	r2, r3, #1
 8008440:	617a      	str	r2, [r7, #20]
 8008442:	783a      	ldrb	r2, [r7, #0]
 8008444:	701a      	strb	r2, [r3, #0]
 8008446:	e9d7 0100 	ldrd	r0, r1, [r7]
 800844a:	f04f 0200 	mov.w	r2, #0
 800844e:	f04f 0300 	mov.w	r3, #0
 8008452:	0a02      	lsrs	r2, r0, #8
 8008454:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008458:	0a0b      	lsrs	r3, r1, #8
 800845a:	e9c7 2300 	strd	r2, r3, [r7]
  *p++ = ( byte )w; w >>= 8;
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	1c5a      	adds	r2, r3, #1
 8008462:	617a      	str	r2, [r7, #20]
 8008464:	783a      	ldrb	r2, [r7, #0]
 8008466:	701a      	strb	r2, [r3, #0]
 8008468:	e9d7 0100 	ldrd	r0, r1, [r7]
 800846c:	f04f 0200 	mov.w	r2, #0
 8008470:	f04f 0300 	mov.w	r3, #0
 8008474:	0a02      	lsrs	r2, r0, #8
 8008476:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800847a:	0a0b      	lsrs	r3, r1, #8
 800847c:	e9c7 2300 	strd	r2, r3, [r7]
  *p++ = ( byte )w; w >>= 8;
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	1c5a      	adds	r2, r3, #1
 8008484:	617a      	str	r2, [r7, #20]
 8008486:	783a      	ldrb	r2, [r7, #0]
 8008488:	701a      	strb	r2, [r3, #0]
 800848a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800848e:	f04f 0200 	mov.w	r2, #0
 8008492:	f04f 0300 	mov.w	r3, #0
 8008496:	0a02      	lsrs	r2, r0, #8
 8008498:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800849c:	0a0b      	lsrs	r3, r1, #8
 800849e:	e9c7 2300 	strd	r2, r3, [r7]
  *p++ = ( byte )w; w >>= 8;
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	1c5a      	adds	r2, r3, #1
 80084a6:	617a      	str	r2, [r7, #20]
 80084a8:	783a      	ldrb	r2, [r7, #0]
 80084aa:	701a      	strb	r2, [r3, #0]
 80084ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084b0:	f04f 0200 	mov.w	r2, #0
 80084b4:	f04f 0300 	mov.w	r3, #0
 80084b8:	0a02      	lsrs	r2, r0, #8
 80084ba:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80084be:	0a0b      	lsrs	r3, r1, #8
 80084c0:	e9c7 2300 	strd	r2, r3, [r7]
  *p++ = ( byte )w; w >>= 8;
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	1c5a      	adds	r2, r3, #1
 80084c8:	617a      	str	r2, [r7, #20]
 80084ca:	783a      	ldrb	r2, [r7, #0]
 80084cc:	701a      	strb	r2, [r3, #0]
 80084ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084d2:	f04f 0200 	mov.w	r2, #0
 80084d6:	f04f 0300 	mov.w	r3, #0
 80084da:	0a02      	lsrs	r2, r0, #8
 80084dc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80084e0:	0a0b      	lsrs	r3, r1, #8
 80084e2:	e9c7 2300 	strd	r2, r3, [r7]
  *p++ = ( byte )w; w >>= 8;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	1c5a      	adds	r2, r3, #1
 80084ea:	617a      	str	r2, [r7, #20]
 80084ec:	783a      	ldrb	r2, [r7, #0]
 80084ee:	701a      	strb	r2, [r3, #0]
 80084f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084f4:	f04f 0200 	mov.w	r2, #0
 80084f8:	f04f 0300 	mov.w	r3, #0
 80084fc:	0a02      	lsrs	r2, r0, #8
 80084fe:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008502:	0a0b      	lsrs	r3, r1, #8
 8008504:	e9c7 2300 	strd	r2, r3, [r7]
  *p++ = ( byte )w; w >>= 8;
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	1c5a      	adds	r2, r3, #1
 800850c:	617a      	str	r2, [r7, #20]
 800850e:	783a      	ldrb	r2, [r7, #0]
 8008510:	701a      	strb	r2, [r3, #0]
 8008512:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008516:	f04f 0200 	mov.w	r2, #0
 800851a:	f04f 0300 	mov.w	r3, #0
 800851e:	0a02      	lsrs	r2, r0, #8
 8008520:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008524:	0a0b      	lsrs	r3, r1, #8
 8008526:	e9c7 2300 	strd	r2, r3, [r7]
  *p++ = ( byte )w;
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	1c5a      	adds	r2, r3, #1
 800852e:	617a      	str	r2, [r7, #20]
 8008530:	783a      	ldrb	r2, [r7, #0]
 8008532:	701a      	strb	r2, [r3, #0]
#endif
}
 8008534:	bf00      	nop
 8008536:	371c      	adds	r7, #28
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <rotr64>:
{
  return ( w >> c ) | ( w << ( 32 - c ) );
}

static WC_INLINE word64 rotr64( const word64 w, const unsigned c )
{
 8008540:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008544:	b084      	sub	sp, #16
 8008546:	af00      	add	r7, sp, #0
 8008548:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800854c:	607a      	str	r2, [r7, #4]
  return ( w >> c ) | ( w << ( 64 - c ) );
 800854e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008552:	6879      	ldr	r1, [r7, #4]
 8008554:	f1c1 0620 	rsb	r6, r1, #32
 8008558:	f1a1 0020 	sub.w	r0, r1, #32
 800855c:	fa22 f801 	lsr.w	r8, r2, r1
 8008560:	fa03 f606 	lsl.w	r6, r3, r6
 8008564:	ea48 0806 	orr.w	r8, r8, r6
 8008568:	fa23 f000 	lsr.w	r0, r3, r0
 800856c:	ea48 0800 	orr.w	r8, r8, r0
 8008570:	fa23 f901 	lsr.w	r9, r3, r1
 8008574:	6879      	ldr	r1, [r7, #4]
 8008576:	4249      	negs	r1, r1
 8008578:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800857c:	f1a1 0620 	sub.w	r6, r1, #32
 8008580:	f1c1 0020 	rsb	r0, r1, #32
 8008584:	fa03 f501 	lsl.w	r5, r3, r1
 8008588:	fa02 f606 	lsl.w	r6, r2, r6
 800858c:	4335      	orrs	r5, r6
 800858e:	fa22 f000 	lsr.w	r0, r2, r0
 8008592:	4305      	orrs	r5, r0
 8008594:	fa02 f401 	lsl.w	r4, r2, r1
 8008598:	ea48 0a04 	orr.w	sl, r8, r4
 800859c:	ea49 0b05 	orr.w	fp, r9, r5
 80085a0:	4654      	mov	r4, sl
 80085a2:	465d      	mov	r5, fp
 80085a4:	4622      	mov	r2, r4
 80085a6:	462b      	mov	r3, r5
}
 80085a8:	4610      	mov	r0, r2
 80085aa:	4619      	mov	r1, r3
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80085b4:	4770      	bx	lr

080085b6 <blake2b_set_lastnode>:
  { 14, 10,  4,  8,  9, 15, 13,  6,  1, 12,  0,  2, 11,  7,  5,  3 }
};


static WC_INLINE int blake2b_set_lastnode( blake2b_state *S )
{
 80085b6:	b480      	push	{r7}
 80085b8:	b083      	sub	sp, #12
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  S->f[1] = ~0ULL;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f04f 32ff 	mov.w	r2, #4294967295
 80085c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80085c8:	f04f 32ff 	mov.w	r2, #4294967295
 80085cc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 80085d0:	f04f 32ff 	mov.w	r2, #4294967295
 80085d4:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 80085d8:	f04f 32ff 	mov.w	r2, #4294967295
 80085dc:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 80085e0:	f04f 32ff 	mov.w	r2, #4294967295
 80085e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80085e8:	f04f 32ff 	mov.w	r2, #4294967295
 80085ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80085f0:	f04f 32ff 	mov.w	r2, #4294967295
 80085f4:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 80085f8:	f04f 32ff 	mov.w	r2, #4294967295
 80085fc:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
  return 0;
 8008600:	2300      	movs	r3, #0
}
 8008602:	4618      	mov	r0, r3
 8008604:	370c      	adds	r7, #12
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr

0800860e <blake2b_set_lastblock>:

/* Some helper functions, not necessarily useful */
static WC_INLINE int blake2b_set_lastblock( blake2b_state *S )
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b082      	sub	sp, #8
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
  if( S->last_node ) blake2b_set_lastnode( S );
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 800861c:	2b00      	cmp	r3, #0
 800861e:	d002      	beq.n	8008626 <blake2b_set_lastblock+0x18>
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f7ff ffc8 	bl	80085b6 <blake2b_set_lastnode>

  S->f[0] = ~0ULL;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f04f 32ff 	mov.w	r2, #4294967295
 800862c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8008630:	f04f 32ff 	mov.w	r2, #4294967295
 8008634:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8008638:	f04f 32ff 	mov.w	r2, #4294967295
 800863c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8008640:	f04f 32ff 	mov.w	r2, #4294967295
 8008644:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8008648:	f04f 32ff 	mov.w	r2, #4294967295
 800864c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8008650:	f04f 32ff 	mov.w	r2, #4294967295
 8008654:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8008658:	f04f 32ff 	mov.w	r2, #4294967295
 800865c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8008660:	f04f 32ff 	mov.w	r2, #4294967295
 8008664:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
  return 0;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	3708      	adds	r7, #8
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <blake2b_increment_counter>:

static WC_INLINE int blake2b_increment_counter( blake2b_state *S, const word64
                                             inc )
{
 8008672:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	e9c7 2300 	strd	r2, r3, [r7]
  S->t[0] += inc;
 8008680:	68f9      	ldr	r1, [r7, #12]
 8008682:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8008684:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8008686:	e9d7 0100 	ldrd	r0, r1, [r7]
 800868a:	eb12 0800 	adds.w	r8, r2, r0
 800868e:	eb43 0901 	adc.w	r9, r3, r1
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f8c3 8040 	str.w	r8, [r3, #64]	; 0x40
 8008698:	f8c3 9044 	str.w	r9, [r3, #68]	; 0x44
  S->t[1] += ( S->t[0] < inc );
 800869c:	68f9      	ldr	r1, [r7, #12]
 800869e:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80086a0:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80086a2:	68fe      	ldr	r6, [r7, #12]
 80086a4:	6c30      	ldr	r0, [r6, #64]	; 0x40
 80086a6:	6c71      	ldr	r1, [r6, #68]	; 0x44
 80086a8:	e9d7 8900 	ldrd	r8, r9, [r7]
 80086ac:	4540      	cmp	r0, r8
 80086ae:	eb71 0109 	sbcs.w	r1, r1, r9
 80086b2:	bf34      	ite	cc
 80086b4:	2101      	movcc	r1, #1
 80086b6:	2100      	movcs	r1, #0
 80086b8:	b2c9      	uxtb	r1, r1
 80086ba:	b2c9      	uxtb	r1, r1
 80086bc:	2000      	movs	r0, #0
 80086be:	468a      	mov	sl, r1
 80086c0:	4683      	mov	fp, r0
 80086c2:	eb12 040a 	adds.w	r4, r2, sl
 80086c6:	eb43 050b 	adc.w	r5, r3, fp
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	649c      	str	r4, [r3, #72]	; 0x48
 80086ce:	64dd      	str	r5, [r3, #76]	; 0x4c
  return 0;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3710      	adds	r7, #16
 80086d6:	46bd      	mov	sp, r7
 80086d8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80086dc:	4770      	bx	lr
	...

080086e0 <blake2b_init0>:

static WC_INLINE int blake2b_init0( blake2b_state *S )
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  int i;
  XMEMSET( S, 0, sizeof( blake2b_state ) );
 80086e8:	f240 1269 	movw	r2, #361	; 0x169
 80086ec:	2100      	movs	r1, #0
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f021 ff12 	bl	802a518 <memset>

  for( i = 0; i < 8; ++i ) S->h[i] = blake2b_IV[i];
 80086f4:	2300      	movs	r3, #0
 80086f6:	60fb      	str	r3, [r7, #12]
 80086f8:	e00e      	b.n	8008718 <blake2b_init0+0x38>
 80086fa:	4a0b      	ldr	r2, [pc, #44]	; (8008728 <blake2b_init0+0x48>)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	00db      	lsls	r3, r3, #3
 8008700:	4413      	add	r3, r2
 8008702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	68f9      	ldr	r1, [r7, #12]
 800870a:	00c9      	lsls	r1, r1, #3
 800870c:	4401      	add	r1, r0
 800870e:	600a      	str	r2, [r1, #0]
 8008710:	604b      	str	r3, [r1, #4]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	3301      	adds	r3, #1
 8008716:	60fb      	str	r3, [r7, #12]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2b07      	cmp	r3, #7
 800871c:	dded      	ble.n	80086fa <blake2b_init0+0x1a>

  return 0;
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	0802d628 	.word	0x0802d628

0800872c <blake2b_init_param>:

/* init xors IV with input parameter block */
int blake2b_init_param( blake2b_state *S, const blake2b_param *P )
{
 800872c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
  word32 i;
  byte *p ;
  blake2b_init0( S );
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f7ff ffd2 	bl	80086e0 <blake2b_init0>
  p =  ( byte * )( P );
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	60bb      	str	r3, [r7, #8]

  /* IV XOR ParamBlock */
  for( i = 0; i < 8; ++i )
 8008740:	2300      	movs	r3, #0
 8008742:	60fb      	str	r3, [r7, #12]
 8008744:	e019      	b.n	800877a <blake2b_init_param+0x4e>
    S->h[i] ^= load64( p + sizeof( S->h[i] ) * i );
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	00db      	lsls	r3, r3, #3
 800874a:	68ba      	ldr	r2, [r7, #8]
 800874c:	4413      	add	r3, r2
 800874e:	4618      	mov	r0, r3
 8008750:	f7ff fe5e 	bl	8008410 <load64>
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	00db      	lsls	r3, r3, #3
 800875a:	18d6      	adds	r6, r2, r3
 800875c:	6832      	ldr	r2, [r6, #0]
 800875e:	6873      	ldr	r3, [r6, #4]
 8008760:	ea80 0402 	eor.w	r4, r0, r2
 8008764:	ea81 0503 	eor.w	r5, r1, r3
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	00db      	lsls	r3, r3, #3
 800876e:	4413      	add	r3, r2
 8008770:	601c      	str	r4, [r3, #0]
 8008772:	605d      	str	r5, [r3, #4]
  for( i = 0; i < 8; ++i )
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	3301      	adds	r3, #1
 8008778:	60fb      	str	r3, [r7, #12]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2b07      	cmp	r3, #7
 800877e:	d9e2      	bls.n	8008746 <blake2b_init_param+0x1a>

  return 0;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3714      	adds	r7, #20
 8008786:	46bd      	mov	sp, r7
 8008788:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800878a <blake2b_init>:


int blake2b_init( blake2b_state *S, const byte outlen )
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b092      	sub	sp, #72	; 0x48
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
 8008792:	460b      	mov	r3, r1
 8008794:	70fb      	strb	r3, [r7, #3]
  blake2b_param P[1];
#else
  volatile blake2b_param P[1];
#endif

  if ( ( !outlen ) || ( outlen > BLAKE2B_OUTBYTES ) ) return BAD_FUNC_ARG;
 8008796:	78fb      	ldrb	r3, [r7, #3]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d002      	beq.n	80087a2 <blake2b_init+0x18>
 800879c:	78fb      	ldrb	r3, [r7, #3]
 800879e:	2b40      	cmp	r3, #64	; 0x40
 80087a0:	d902      	bls.n	80087a8 <blake2b_init+0x1e>
 80087a2:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80087a6:	e013      	b.n	80087d0 <blake2b_init+0x46>
  P->inner_length  = 0;
  XMEMSET( P->reserved, 0, sizeof( P->reserved ) );
  XMEMSET( P->salt,     0, sizeof( P->salt ) );
  XMEMSET( P->personal, 0, sizeof( P->personal ) );
#else
  XMEMSET( (blake2b_param *)P, 0, sizeof( *P ) );
 80087a8:	f107 0308 	add.w	r3, r7, #8
 80087ac:	2240      	movs	r2, #64	; 0x40
 80087ae:	2100      	movs	r1, #0
 80087b0:	4618      	mov	r0, r3
 80087b2:	f021 feb1 	bl	802a518 <memset>
  P->digest_length = outlen;
 80087b6:	78fb      	ldrb	r3, [r7, #3]
 80087b8:	723b      	strb	r3, [r7, #8]
  P->fanout        = 1;
 80087ba:	2301      	movs	r3, #1
 80087bc:	72bb      	strb	r3, [r7, #10]
  P->depth         = 1;
 80087be:	2301      	movs	r3, #1
 80087c0:	72fb      	strb	r3, [r7, #11]
#endif
  return blake2b_init_param( S, (blake2b_param *)P );
 80087c2:	f107 0308 	add.w	r3, r7, #8
 80087c6:	4619      	mov	r1, r3
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f7ff ffaf 	bl	800872c <blake2b_init_param>
 80087ce:	4603      	mov	r3, r0
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3748      	adds	r7, #72	; 0x48
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <blake2b_compress>:
static WC_INLINE int blake2b_compress(
    blake2b_state *S,
    const byte block[BLAKE2B_BLOCKBYTES],
    word64* m,
    word64* v)
{
 80087d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087dc:	f5ad 5df1 	sub.w	sp, sp, #7712	; 0x1e20
 80087e0:	b086      	sub	sp, #24
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	f641 642c 	movw	r4, #7724	; 0x1e2c
 80087e8:	443c      	add	r4, r7
 80087ea:	6020      	str	r0, [r4, #0]
 80087ec:	f641 6028 	movw	r0, #7720	; 0x1e28
 80087f0:	4438      	add	r0, r7
 80087f2:	6001      	str	r1, [r0, #0]
 80087f4:	f641 6124 	movw	r1, #7716	; 0x1e24
 80087f8:	4439      	add	r1, r7
 80087fa:	600a      	str	r2, [r1, #0]
 80087fc:	f507 52f1 	add.w	r2, r7, #7712	; 0x1e20
 8008800:	6013      	str	r3, [r2, #0]
  int i;

  for( i = 0; i < 16; ++i )
 8008802:	2300      	movs	r3, #0
 8008804:	f641 6234 	movw	r2, #7732	; 0x1e34
 8008808:	443a      	add	r2, r7
 800880a:	6013      	str	r3, [r2, #0]
 800880c:	e023      	b.n	8008856 <blake2b_compress+0x7e>
    m[i] = load64( block + i * sizeof( m[i] ) );
 800880e:	f641 6334 	movw	r3, #7732	; 0x1e34
 8008812:	443b      	add	r3, r7
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	00da      	lsls	r2, r3, #3
 8008818:	f641 6328 	movw	r3, #7720	; 0x1e28
 800881c:	443b      	add	r3, r7
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	1899      	adds	r1, r3, r2
 8008822:	f641 6334 	movw	r3, #7732	; 0x1e34
 8008826:	443b      	add	r3, r7
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	00da      	lsls	r2, r3, #3
 800882c:	f641 6324 	movw	r3, #7716	; 0x1e24
 8008830:	443b      	add	r3, r7
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	189c      	adds	r4, r3, r2
 8008836:	4608      	mov	r0, r1
 8008838:	f7ff fdea 	bl	8008410 <load64>
 800883c:	4602      	mov	r2, r0
 800883e:	460b      	mov	r3, r1
 8008840:	e9c4 2300 	strd	r2, r3, [r4]
  for( i = 0; i < 16; ++i )
 8008844:	f641 6334 	movw	r3, #7732	; 0x1e34
 8008848:	443b      	add	r3, r7
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	3301      	adds	r3, #1
 800884e:	f641 6234 	movw	r2, #7732	; 0x1e34
 8008852:	443a      	add	r2, r7
 8008854:	6013      	str	r3, [r2, #0]
 8008856:	f641 6334 	movw	r3, #7732	; 0x1e34
 800885a:	443b      	add	r3, r7
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2b0f      	cmp	r3, #15
 8008860:	ddd5      	ble.n	800880e <blake2b_compress+0x36>

  for( i = 0; i < 8; ++i )
 8008862:	2300      	movs	r3, #0
 8008864:	f641 6234 	movw	r2, #7732	; 0x1e34
 8008868:	443a      	add	r2, r7
 800886a:	6013      	str	r3, [r2, #0]
 800886c:	e01f      	b.n	80088ae <blake2b_compress+0xd6>
    v[i] = S->h[i];
 800886e:	f641 6334 	movw	r3, #7732	; 0x1e34
 8008872:	443b      	add	r3, r7
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	00da      	lsls	r2, r3, #3
 8008878:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	1898      	adds	r0, r3, r2
 8008880:	f641 632c 	movw	r3, #7724	; 0x1e2c
 8008884:	443b      	add	r3, r7
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	f641 6334 	movw	r3, #7732	; 0x1e34
 800888c:	443b      	add	r3, r7
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	00db      	lsls	r3, r3, #3
 8008892:	18d1      	adds	r1, r2, r3
 8008894:	680a      	ldr	r2, [r1, #0]
 8008896:	684b      	ldr	r3, [r1, #4]
 8008898:	e9c0 2300 	strd	r2, r3, [r0]
  for( i = 0; i < 8; ++i )
 800889c:	f641 6334 	movw	r3, #7732	; 0x1e34
 80088a0:	443b      	add	r3, r7
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	3301      	adds	r3, #1
 80088a6:	f641 6234 	movw	r2, #7732	; 0x1e34
 80088aa:	443a      	add	r2, r7
 80088ac:	6013      	str	r3, [r2, #0]
 80088ae:	f641 6334 	movw	r3, #7732	; 0x1e34
 80088b2:	443b      	add	r3, r7
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2b07      	cmp	r3, #7
 80088b8:	ddd9      	ble.n	800886e <blake2b_compress+0x96>

  v[ 8] = blake2b_IV[0];
 80088ba:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80088c4:	f60f 5358 	addw	r3, pc, #3416	; 0xd58
 80088c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088cc:	e9c1 2300 	strd	r2, r3, [r1]
  v[ 9] = blake2b_IV[1];
 80088d0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80088da:	f60f 534c 	addw	r3, pc, #3404	; 0xd4c
 80088de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e2:	e9c1 2300 	strd	r2, r3, [r1]
  v[10] = blake2b_IV[2];
 80088e6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80088f0:	f60f 533c 	addw	r3, pc, #3388	; 0xd3c
 80088f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f8:	e9c1 2300 	strd	r2, r3, [r1]
  v[11] = blake2b_IV[3];
 80088fc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8008906:	f60f 5330 	addw	r3, pc, #3376	; 0xd30
 800890a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890e:	e9c1 2300 	strd	r2, r3, [r1]
  v[12] = S->t[0] ^ blake2b_IV[4];
 8008912:	f641 632c 	movw	r3, #7724	; 0x1e2c
 8008916:	443b      	add	r3, r7
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800891c:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800891e:	f60f 5120 	addw	r1, pc, #3360	; 0xd20
 8008922:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008926:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	3360      	adds	r3, #96	; 0x60
 800892e:	ea84 0a00 	eor.w	sl, r4, r0
 8008932:	ea85 0b01 	eor.w	fp, r5, r1
 8008936:	e9c3 ab00 	strd	sl, fp, [r3]
  v[13] = S->t[1] ^ blake2b_IV[5];
 800893a:	f641 632c 	movw	r3, #7724	; 0x1e2c
 800893e:	443b      	add	r3, r7
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8008944:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8008946:	f60f 5100 	addw	r1, pc, #3328	; 0xd00
 800894a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800894e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	3368      	adds	r3, #104	; 0x68
 8008956:	ea84 0200 	eor.w	r2, r4, r0
 800895a:	f641 6c18 	movw	ip, #7704	; 0x1e18
 800895e:	44bc      	add	ip, r7
 8008960:	f8cc 2000 	str.w	r2, [ip]
 8008964:	ea85 0201 	eor.w	r2, r5, r1
 8008968:	f641 611c 	movw	r1, #7708	; 0x1e1c
 800896c:	4439      	add	r1, r7
 800896e:	600a      	str	r2, [r1, #0]
 8008970:	f641 6218 	movw	r2, #7704	; 0x1e18
 8008974:	443a      	add	r2, r7
 8008976:	e9d2 1200 	ldrd	r1, r2, [r2]
 800897a:	e9c3 1200 	strd	r1, r2, [r3]
  v[14] = S->f[0] ^ blake2b_IV[6];
 800897e:	f641 632c 	movw	r3, #7724	; 0x1e2c
 8008982:	443b      	add	r3, r7
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8008988:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800898a:	f60f 41c4 	addw	r1, pc, #3268	; 0xcc4
 800898e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008992:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	3370      	adds	r3, #112	; 0x70
 800899a:	ea84 0200 	eor.w	r2, r4, r0
 800899e:	f641 6c10 	movw	ip, #7696	; 0x1e10
 80089a2:	44bc      	add	ip, r7
 80089a4:	f8cc 2000 	str.w	r2, [ip]
 80089a8:	ea85 0201 	eor.w	r2, r5, r1
 80089ac:	f641 6114 	movw	r1, #7700	; 0x1e14
 80089b0:	4439      	add	r1, r7
 80089b2:	600a      	str	r2, [r1, #0]
 80089b4:	f641 6210 	movw	r2, #7696	; 0x1e10
 80089b8:	443a      	add	r2, r7
 80089ba:	e9d2 1200 	ldrd	r1, r2, [r2]
 80089be:	e9c3 1200 	strd	r1, r2, [r3]
  v[15] = S->f[1] ^ blake2b_IV[7];
 80089c2:	f641 632c 	movw	r3, #7724	; 0x1e2c
 80089c6:	443b      	add	r3, r7
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 80089cc:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 80089ce:	f60f 4188 	addw	r1, pc, #3208	; 0xc88
 80089d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089d6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	3378      	adds	r3, #120	; 0x78
 80089de:	ea84 0200 	eor.w	r2, r4, r0
 80089e2:	f641 6c08 	movw	ip, #7688	; 0x1e08
 80089e6:	44bc      	add	ip, r7
 80089e8:	f8cc 2000 	str.w	r2, [ip]
 80089ec:	ea85 0201 	eor.w	r2, r5, r1
 80089f0:	f641 610c 	movw	r1, #7692	; 0x1e0c
 80089f4:	4439      	add	r1, r7
 80089f6:	600a      	str	r2, [r1, #0]
 80089f8:	f641 6208 	movw	r2, #7688	; 0x1e08
 80089fc:	443a      	add	r2, r7
 80089fe:	e9d2 1200 	ldrd	r1, r2, [r2]
 8008a02:	e9c3 1200 	strd	r1, r2, [r3]
    G(r,4,v[ 0],v[ 5],v[10],v[15]); \
    G(r,5,v[ 1],v[ 6],v[11],v[12]); \
    G(r,6,v[ 2],v[ 7],v[ 8],v[13]); \
    G(r,7,v[ 3],v[ 4],v[ 9],v[14]); \
  } while(0)
  ROUND( 0 );
 8008a06:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008a10:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	3320      	adds	r3, #32
 8008a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1c:	eb10 0802 	adds.w	r8, r0, r2
 8008a20:	eb41 0903 	adc.w	r9, r1, r3
 8008a24:	2300      	movs	r3, #0
 8008a26:	00da      	lsls	r2, r3, #3
 8008a28:	f641 6324 	movw	r3, #7716	; 0x1e24
 8008a2c:	443b      	add	r3, r7
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4413      	add	r3, r2
 8008a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a36:	eb18 0102 	adds.w	r1, r8, r2
 8008a3a:	f507 50f0 	add.w	r0, r7, #7680	; 0x1e00
 8008a3e:	6001      	str	r1, [r0, #0]
 8008a40:	eb49 0303 	adc.w	r3, r9, r3
 8008a44:	f641 6204 	movw	r2, #7684	; 0x1e04
 8008a48:	443a      	add	r2, r7
 8008a4a:	6013      	str	r3, [r2, #0]
 8008a4c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f507 52f0 	add.w	r2, r7, #7680	; 0x1e00
 8008a56:	e9d2 1200 	ldrd	r1, r2, [r2]
 8008a5a:	e9c3 1200 	strd	r1, r2, [r3]
 8008a5e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	3360      	adds	r3, #96	; 0x60
 8008a66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008a6a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a74:	ea80 0402 	eor.w	r4, r0, r2
 8008a78:	f641 55f8 	movw	r5, #7672	; 0x1df8
 8008a7c:	443d      	add	r5, r7
 8008a7e:	602c      	str	r4, [r5, #0]
 8008a80:	404b      	eors	r3, r1
 8008a82:	f641 52fc 	movw	r2, #7676	; 0x1dfc
 8008a86:	443a      	add	r2, r7
 8008a88:	6013      	str	r3, [r2, #0]
 8008a8a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8008a94:	2220      	movs	r2, #32
 8008a96:	f641 53f8 	movw	r3, #7672	; 0x1df8
 8008a9a:	443b      	add	r3, r7
 8008a9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008aa0:	f7ff fd4e 	bl	8008540 <rotr64>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	e9c4 2300 	strd	r2, r3, [r4]
 8008aac:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	3340      	adds	r3, #64	; 0x40
 8008ab4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008ab8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	3360      	adds	r3, #96	; 0x60
 8008ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac4:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8008ac8:	6809      	ldr	r1, [r1, #0]
 8008aca:	3140      	adds	r1, #64	; 0x40
 8008acc:	18a0      	adds	r0, r4, r2
 8008ace:	f641 5cf0 	movw	ip, #7664	; 0x1df0
 8008ad2:	44bc      	add	ip, r7
 8008ad4:	f8cc 0000 	str.w	r0, [ip]
 8008ad8:	eb45 0303 	adc.w	r3, r5, r3
 8008adc:	f641 52f4 	movw	r2, #7668	; 0x1df4
 8008ae0:	443a      	add	r2, r7
 8008ae2:	6013      	str	r3, [r2, #0]
 8008ae4:	f641 53f0 	movw	r3, #7664	; 0x1df0
 8008ae8:	443b      	add	r3, r7
 8008aea:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008aee:	e9c1 3400 	strd	r3, r4, [r1]
 8008af2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	3320      	adds	r3, #32
 8008afa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008afe:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	3340      	adds	r3, #64	; 0x40
 8008b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0a:	ea80 0402 	eor.w	r4, r0, r2
 8008b0e:	f641 55e8 	movw	r5, #7656	; 0x1de8
 8008b12:	443d      	add	r5, r7
 8008b14:	602c      	str	r4, [r5, #0]
 8008b16:	404b      	eors	r3, r1
 8008b18:	f641 52ec 	movw	r2, #7660	; 0x1dec
 8008b1c:	443a      	add	r2, r7
 8008b1e:	6013      	str	r3, [r2, #0]
 8008b20:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f103 0420 	add.w	r4, r3, #32
 8008b2a:	2218      	movs	r2, #24
 8008b2c:	f641 53e8 	movw	r3, #7656	; 0x1de8
 8008b30:	443b      	add	r3, r7
 8008b32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b36:	f7ff fd03 	bl	8008540 <rotr64>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	e9c4 2300 	strd	r2, r3, [r4]
 8008b42:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b4c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	3320      	adds	r3, #32
 8008b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b58:	1884      	adds	r4, r0, r2
 8008b5a:	f507 55ef 	add.w	r5, r7, #7648	; 0x1de0
 8008b5e:	602c      	str	r4, [r5, #0]
 8008b60:	eb41 0303 	adc.w	r3, r1, r3
 8008b64:	f641 52e4 	movw	r2, #7652	; 0x1de4
 8008b68:	443a      	add	r2, r7
 8008b6a:	6013      	str	r3, [r2, #0]
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	00da      	lsls	r2, r3, #3
 8008b70:	f641 6324 	movw	r3, #7716	; 0x1e24
 8008b74:	443b      	add	r3, r7
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4413      	add	r3, r2
 8008b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7e:	f507 51ef 	add.w	r1, r7, #7648	; 0x1de0
 8008b82:	e9d1 4500 	ldrd	r4, r5, [r1]
 8008b86:	4621      	mov	r1, r4
 8008b88:	1889      	adds	r1, r1, r2
 8008b8a:	f641 50d8 	movw	r0, #7640	; 0x1dd8
 8008b8e:	4438      	add	r0, r7
 8008b90:	6001      	str	r1, [r0, #0]
 8008b92:	4629      	mov	r1, r5
 8008b94:	eb43 0101 	adc.w	r1, r3, r1
 8008b98:	f641 53dc 	movw	r3, #7644	; 0x1ddc
 8008b9c:	443b      	add	r3, r7
 8008b9e:	6019      	str	r1, [r3, #0]
 8008ba0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f641 52d8 	movw	r2, #7640	; 0x1dd8
 8008baa:	443a      	add	r2, r7
 8008bac:	e9d2 1200 	ldrd	r1, r2, [r2]
 8008bb0:	e9c3 1200 	strd	r1, r2, [r3]
 8008bb4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	3360      	adds	r3, #96	; 0x60
 8008bbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008bc0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bca:	ea80 0402 	eor.w	r4, r0, r2
 8008bce:	f641 55d0 	movw	r5, #7632	; 0x1dd0
 8008bd2:	443d      	add	r5, r7
 8008bd4:	602c      	str	r4, [r5, #0]
 8008bd6:	404b      	eors	r3, r1
 8008bd8:	f641 52d4 	movw	r2, #7636	; 0x1dd4
 8008bdc:	443a      	add	r2, r7
 8008bde:	6013      	str	r3, [r2, #0]
 8008be0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8008bea:	2210      	movs	r2, #16
 8008bec:	f641 53d0 	movw	r3, #7632	; 0x1dd0
 8008bf0:	443b      	add	r3, r7
 8008bf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008bf6:	f7ff fca3 	bl	8008540 <rotr64>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	e9c4 2300 	strd	r2, r3, [r4]
 8008c02:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	3340      	adds	r3, #64	; 0x40
 8008c0a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008c0e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	3360      	adds	r3, #96	; 0x60
 8008c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8008c1e:	6809      	ldr	r1, [r1, #0]
 8008c20:	3140      	adds	r1, #64	; 0x40
 8008c22:	18a0      	adds	r0, r4, r2
 8008c24:	f641 5cc8 	movw	ip, #7624	; 0x1dc8
 8008c28:	44bc      	add	ip, r7
 8008c2a:	f8cc 0000 	str.w	r0, [ip]
 8008c2e:	eb45 0303 	adc.w	r3, r5, r3
 8008c32:	f641 52cc 	movw	r2, #7628	; 0x1dcc
 8008c36:	443a      	add	r2, r7
 8008c38:	6013      	str	r3, [r2, #0]
 8008c3a:	f641 53c8 	movw	r3, #7624	; 0x1dc8
 8008c3e:	443b      	add	r3, r7
 8008c40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008c44:	e9c1 3400 	strd	r3, r4, [r1]
 8008c48:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	3320      	adds	r3, #32
 8008c50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008c54:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	3340      	adds	r3, #64	; 0x40
 8008c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c60:	ea80 0402 	eor.w	r4, r0, r2
 8008c64:	f507 55ee 	add.w	r5, r7, #7616	; 0x1dc0
 8008c68:	602c      	str	r4, [r5, #0]
 8008c6a:	404b      	eors	r3, r1
 8008c6c:	f641 52c4 	movw	r2, #7620	; 0x1dc4
 8008c70:	443a      	add	r2, r7
 8008c72:	6013      	str	r3, [r2, #0]
 8008c74:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f103 0420 	add.w	r4, r3, #32
 8008c7e:	223f      	movs	r2, #63	; 0x3f
 8008c80:	f507 53ee 	add.w	r3, r7, #7616	; 0x1dc0
 8008c84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008c88:	f7ff fc5a 	bl	8008540 <rotr64>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	460b      	mov	r3, r1
 8008c90:	e9c4 2300 	strd	r2, r3, [r4]
 8008c94:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	3308      	adds	r3, #8
 8008c9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008ca0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	3328      	adds	r3, #40	; 0x28
 8008ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cac:	1884      	adds	r4, r0, r2
 8008cae:	f641 55b8 	movw	r5, #7608	; 0x1db8
 8008cb2:	443d      	add	r5, r7
 8008cb4:	602c      	str	r4, [r5, #0]
 8008cb6:	eb41 0303 	adc.w	r3, r1, r3
 8008cba:	f641 52bc 	movw	r2, #7612	; 0x1dbc
 8008cbe:	443a      	add	r2, r7
 8008cc0:	6013      	str	r3, [r2, #0]
 8008cc2:	2302      	movs	r3, #2
 8008cc4:	00da      	lsls	r2, r3, #3
 8008cc6:	f641 6324 	movw	r3, #7716	; 0x1e24
 8008cca:	443b      	add	r3, r7
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4413      	add	r3, r2
 8008cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd4:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8008cd8:	6809      	ldr	r1, [r1, #0]
 8008cda:	3108      	adds	r1, #8
 8008cdc:	f641 50b8 	movw	r0, #7608	; 0x1db8
 8008ce0:	4438      	add	r0, r7
 8008ce2:	e9d0 4500 	ldrd	r4, r5, [r0]
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	1880      	adds	r0, r0, r2
 8008cea:	f641 5cb0 	movw	ip, #7600	; 0x1db0
 8008cee:	44bc      	add	ip, r7
 8008cf0:	f8cc 0000 	str.w	r0, [ip]
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	eb43 0000 	adc.w	r0, r3, r0
 8008cfa:	f641 53b4 	movw	r3, #7604	; 0x1db4
 8008cfe:	443b      	add	r3, r7
 8008d00:	6018      	str	r0, [r3, #0]
 8008d02:	f641 53b0 	movw	r3, #7600	; 0x1db0
 8008d06:	443b      	add	r3, r7
 8008d08:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008d0c:	e9c1 3400 	strd	r3, r4, [r1]
 8008d10:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	3368      	adds	r3, #104	; 0x68
 8008d18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008d1c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	3308      	adds	r3, #8
 8008d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d28:	ea80 0402 	eor.w	r4, r0, r2
 8008d2c:	f641 55a8 	movw	r5, #7592	; 0x1da8
 8008d30:	443d      	add	r5, r7
 8008d32:	602c      	str	r4, [r5, #0]
 8008d34:	404b      	eors	r3, r1
 8008d36:	f641 52ac 	movw	r2, #7596	; 0x1dac
 8008d3a:	443a      	add	r2, r7
 8008d3c:	6013      	str	r3, [r2, #0]
 8008d3e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8008d48:	2220      	movs	r2, #32
 8008d4a:	f641 53a8 	movw	r3, #7592	; 0x1da8
 8008d4e:	443b      	add	r3, r7
 8008d50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008d54:	f7ff fbf4 	bl	8008540 <rotr64>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	e9c4 2300 	strd	r2, r3, [r4]
 8008d60:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	3348      	adds	r3, #72	; 0x48
 8008d68:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008d6c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	3368      	adds	r3, #104	; 0x68
 8008d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d78:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8008d7c:	6809      	ldr	r1, [r1, #0]
 8008d7e:	3148      	adds	r1, #72	; 0x48
 8008d80:	18a0      	adds	r0, r4, r2
 8008d82:	f507 5ced 	add.w	ip, r7, #7584	; 0x1da0
 8008d86:	f8cc 0000 	str.w	r0, [ip]
 8008d8a:	eb45 0303 	adc.w	r3, r5, r3
 8008d8e:	f641 52a4 	movw	r2, #7588	; 0x1da4
 8008d92:	443a      	add	r2, r7
 8008d94:	6013      	str	r3, [r2, #0]
 8008d96:	f507 53ed 	add.w	r3, r7, #7584	; 0x1da0
 8008d9a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008d9e:	e9c1 3400 	strd	r3, r4, [r1]
 8008da2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	3328      	adds	r3, #40	; 0x28
 8008daa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008dae:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	3348      	adds	r3, #72	; 0x48
 8008db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dba:	ea80 0402 	eor.w	r4, r0, r2
 8008dbe:	f641 5598 	movw	r5, #7576	; 0x1d98
 8008dc2:	443d      	add	r5, r7
 8008dc4:	602c      	str	r4, [r5, #0]
 8008dc6:	404b      	eors	r3, r1
 8008dc8:	f641 529c 	movw	r2, #7580	; 0x1d9c
 8008dcc:	443a      	add	r2, r7
 8008dce:	6013      	str	r3, [r2, #0]
 8008dd0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8008dda:	2218      	movs	r2, #24
 8008ddc:	f641 5398 	movw	r3, #7576	; 0x1d98
 8008de0:	443b      	add	r3, r7
 8008de2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008de6:	f7ff fbab 	bl	8008540 <rotr64>
 8008dea:	4602      	mov	r2, r0
 8008dec:	460b      	mov	r3, r1
 8008dee:	e9c4 2300 	strd	r2, r3, [r4]
 8008df2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	3308      	adds	r3, #8
 8008dfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008dfe:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	3328      	adds	r3, #40	; 0x28
 8008e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0a:	1884      	adds	r4, r0, r2
 8008e0c:	f641 5590 	movw	r5, #7568	; 0x1d90
 8008e10:	443d      	add	r5, r7
 8008e12:	602c      	str	r4, [r5, #0]
 8008e14:	eb41 0303 	adc.w	r3, r1, r3
 8008e18:	f641 5294 	movw	r2, #7572	; 0x1d94
 8008e1c:	443a      	add	r2, r7
 8008e1e:	6013      	str	r3, [r2, #0]
 8008e20:	2303      	movs	r3, #3
 8008e22:	00da      	lsls	r2, r3, #3
 8008e24:	f641 6324 	movw	r3, #7716	; 0x1e24
 8008e28:	443b      	add	r3, r7
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e32:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8008e36:	6809      	ldr	r1, [r1, #0]
 8008e38:	3108      	adds	r1, #8
 8008e3a:	f641 5090 	movw	r0, #7568	; 0x1d90
 8008e3e:	4438      	add	r0, r7
 8008e40:	e9d0 4500 	ldrd	r4, r5, [r0]
 8008e44:	4620      	mov	r0, r4
 8008e46:	1880      	adds	r0, r0, r2
 8008e48:	f641 5c88 	movw	ip, #7560	; 0x1d88
 8008e4c:	44bc      	add	ip, r7
 8008e4e:	f8cc 0000 	str.w	r0, [ip]
 8008e52:	4628      	mov	r0, r5
 8008e54:	eb43 0000 	adc.w	r0, r3, r0
 8008e58:	f641 538c 	movw	r3, #7564	; 0x1d8c
 8008e5c:	443b      	add	r3, r7
 8008e5e:	6018      	str	r0, [r3, #0]
 8008e60:	f641 5388 	movw	r3, #7560	; 0x1d88
 8008e64:	443b      	add	r3, r7
 8008e66:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e6a:	e9c1 3400 	strd	r3, r4, [r1]
 8008e6e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	3368      	adds	r3, #104	; 0x68
 8008e76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008e7a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	3308      	adds	r3, #8
 8008e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e86:	ea80 0402 	eor.w	r4, r0, r2
 8008e8a:	f507 55ec 	add.w	r5, r7, #7552	; 0x1d80
 8008e8e:	602c      	str	r4, [r5, #0]
 8008e90:	404b      	eors	r3, r1
 8008e92:	f641 5284 	movw	r2, #7556	; 0x1d84
 8008e96:	443a      	add	r2, r7
 8008e98:	6013      	str	r3, [r2, #0]
 8008e9a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8008ea4:	2210      	movs	r2, #16
 8008ea6:	f507 53ec 	add.w	r3, r7, #7552	; 0x1d80
 8008eaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008eae:	f7ff fb47 	bl	8008540 <rotr64>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	e9c4 2300 	strd	r2, r3, [r4]
 8008eba:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	3348      	adds	r3, #72	; 0x48
 8008ec2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008ec6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	3368      	adds	r3, #104	; 0x68
 8008ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed2:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8008ed6:	6809      	ldr	r1, [r1, #0]
 8008ed8:	3148      	adds	r1, #72	; 0x48
 8008eda:	18a0      	adds	r0, r4, r2
 8008edc:	f641 5c78 	movw	ip, #7544	; 0x1d78
 8008ee0:	44bc      	add	ip, r7
 8008ee2:	f8cc 0000 	str.w	r0, [ip]
 8008ee6:	eb45 0303 	adc.w	r3, r5, r3
 8008eea:	f641 527c 	movw	r2, #7548	; 0x1d7c
 8008eee:	443a      	add	r2, r7
 8008ef0:	6013      	str	r3, [r2, #0]
 8008ef2:	f641 5378 	movw	r3, #7544	; 0x1d78
 8008ef6:	443b      	add	r3, r7
 8008ef8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008efc:	e9c1 3400 	strd	r3, r4, [r1]
 8008f00:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	3328      	adds	r3, #40	; 0x28
 8008f08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008f0c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	3348      	adds	r3, #72	; 0x48
 8008f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f18:	ea80 0402 	eor.w	r4, r0, r2
 8008f1c:	f641 5570 	movw	r5, #7536	; 0x1d70
 8008f20:	443d      	add	r5, r7
 8008f22:	602c      	str	r4, [r5, #0]
 8008f24:	404b      	eors	r3, r1
 8008f26:	f641 5274 	movw	r2, #7540	; 0x1d74
 8008f2a:	443a      	add	r2, r7
 8008f2c:	6013      	str	r3, [r2, #0]
 8008f2e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8008f38:	223f      	movs	r2, #63	; 0x3f
 8008f3a:	f641 5370 	movw	r3, #7536	; 0x1d70
 8008f3e:	443b      	add	r3, r7
 8008f40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008f44:	f7ff fafc 	bl	8008540 <rotr64>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	e9c4 2300 	strd	r2, r3, [r4]
 8008f50:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	3310      	adds	r3, #16
 8008f58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008f5c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	3330      	adds	r3, #48	; 0x30
 8008f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f68:	1884      	adds	r4, r0, r2
 8008f6a:	f641 5568 	movw	r5, #7528	; 0x1d68
 8008f6e:	443d      	add	r5, r7
 8008f70:	602c      	str	r4, [r5, #0]
 8008f72:	eb41 0303 	adc.w	r3, r1, r3
 8008f76:	f641 526c 	movw	r2, #7532	; 0x1d6c
 8008f7a:	443a      	add	r2, r7
 8008f7c:	6013      	str	r3, [r2, #0]
 8008f7e:	2304      	movs	r3, #4
 8008f80:	00da      	lsls	r2, r3, #3
 8008f82:	f641 6324 	movw	r3, #7716	; 0x1e24
 8008f86:	443b      	add	r3, r7
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f90:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8008f94:	6809      	ldr	r1, [r1, #0]
 8008f96:	3110      	adds	r1, #16
 8008f98:	f641 5068 	movw	r0, #7528	; 0x1d68
 8008f9c:	4438      	add	r0, r7
 8008f9e:	e9d0 4500 	ldrd	r4, r5, [r0]
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	1880      	adds	r0, r0, r2
 8008fa6:	f507 5ceb 	add.w	ip, r7, #7520	; 0x1d60
 8008faa:	f8cc 0000 	str.w	r0, [ip]
 8008fae:	4628      	mov	r0, r5
 8008fb0:	eb43 0000 	adc.w	r0, r3, r0
 8008fb4:	f641 5364 	movw	r3, #7524	; 0x1d64
 8008fb8:	443b      	add	r3, r7
 8008fba:	6018      	str	r0, [r3, #0]
 8008fbc:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8008fc0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008fc4:	e9c1 3400 	strd	r3, r4, [r1]
 8008fc8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	3370      	adds	r3, #112	; 0x70
 8008fd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008fd4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	3310      	adds	r3, #16
 8008fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe0:	ea80 0402 	eor.w	r4, r0, r2
 8008fe4:	f641 5558 	movw	r5, #7512	; 0x1d58
 8008fe8:	443d      	add	r5, r7
 8008fea:	602c      	str	r4, [r5, #0]
 8008fec:	404b      	eors	r3, r1
 8008fee:	f641 525c 	movw	r2, #7516	; 0x1d5c
 8008ff2:	443a      	add	r2, r7
 8008ff4:	6013      	str	r3, [r2, #0]
 8008ff6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8009000:	2220      	movs	r2, #32
 8009002:	f641 5358 	movw	r3, #7512	; 0x1d58
 8009006:	443b      	add	r3, r7
 8009008:	e9d3 0100 	ldrd	r0, r1, [r3]
 800900c:	f7ff fa98 	bl	8008540 <rotr64>
 8009010:	4602      	mov	r2, r0
 8009012:	460b      	mov	r3, r1
 8009014:	e9c4 2300 	strd	r2, r3, [r4]
 8009018:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	3350      	adds	r3, #80	; 0x50
 8009020:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009024:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	3370      	adds	r3, #112	; 0x70
 800902c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009030:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8009034:	6809      	ldr	r1, [r1, #0]
 8009036:	3150      	adds	r1, #80	; 0x50
 8009038:	18a0      	adds	r0, r4, r2
 800903a:	f641 5c50 	movw	ip, #7504	; 0x1d50
 800903e:	44bc      	add	ip, r7
 8009040:	f8cc 0000 	str.w	r0, [ip]
 8009044:	eb45 0303 	adc.w	r3, r5, r3
 8009048:	f641 5254 	movw	r2, #7508	; 0x1d54
 800904c:	443a      	add	r2, r7
 800904e:	6013      	str	r3, [r2, #0]
 8009050:	f641 5350 	movw	r3, #7504	; 0x1d50
 8009054:	443b      	add	r3, r7
 8009056:	e9d3 3400 	ldrd	r3, r4, [r3]
 800905a:	e9c1 3400 	strd	r3, r4, [r1]
 800905e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	3330      	adds	r3, #48	; 0x30
 8009066:	e9d3 0100 	ldrd	r0, r1, [r3]
 800906a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	3350      	adds	r3, #80	; 0x50
 8009072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009076:	ea80 0402 	eor.w	r4, r0, r2
 800907a:	f641 5548 	movw	r5, #7496	; 0x1d48
 800907e:	443d      	add	r5, r7
 8009080:	602c      	str	r4, [r5, #0]
 8009082:	404b      	eors	r3, r1
 8009084:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8009088:	443a      	add	r2, r7
 800908a:	6013      	str	r3, [r2, #0]
 800908c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8009096:	2218      	movs	r2, #24
 8009098:	f641 5348 	movw	r3, #7496	; 0x1d48
 800909c:	443b      	add	r3, r7
 800909e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80090a2:	f7ff fa4d 	bl	8008540 <rotr64>
 80090a6:	4602      	mov	r2, r0
 80090a8:	460b      	mov	r3, r1
 80090aa:	e9c4 2300 	strd	r2, r3, [r4]
 80090ae:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	3310      	adds	r3, #16
 80090b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80090ba:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	3330      	adds	r3, #48	; 0x30
 80090c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c6:	1884      	adds	r4, r0, r2
 80090c8:	f507 55ea 	add.w	r5, r7, #7488	; 0x1d40
 80090cc:	602c      	str	r4, [r5, #0]
 80090ce:	eb41 0303 	adc.w	r3, r1, r3
 80090d2:	f641 5244 	movw	r2, #7492	; 0x1d44
 80090d6:	443a      	add	r2, r7
 80090d8:	6013      	str	r3, [r2, #0]
 80090da:	2305      	movs	r3, #5
 80090dc:	00da      	lsls	r2, r3, #3
 80090de:	f641 6324 	movw	r3, #7716	; 0x1e24
 80090e2:	443b      	add	r3, r7
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4413      	add	r3, r2
 80090e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ec:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80090f0:	6809      	ldr	r1, [r1, #0]
 80090f2:	3110      	adds	r1, #16
 80090f4:	f507 50ea 	add.w	r0, r7, #7488	; 0x1d40
 80090f8:	e9d0 4500 	ldrd	r4, r5, [r0]
 80090fc:	4620      	mov	r0, r4
 80090fe:	1880      	adds	r0, r0, r2
 8009100:	f641 5c38 	movw	ip, #7480	; 0x1d38
 8009104:	44bc      	add	ip, r7
 8009106:	f8cc 0000 	str.w	r0, [ip]
 800910a:	4628      	mov	r0, r5
 800910c:	eb43 0000 	adc.w	r0, r3, r0
 8009110:	f641 533c 	movw	r3, #7484	; 0x1d3c
 8009114:	443b      	add	r3, r7
 8009116:	6018      	str	r0, [r3, #0]
 8009118:	f641 5338 	movw	r3, #7480	; 0x1d38
 800911c:	443b      	add	r3, r7
 800911e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009122:	e9c1 3400 	strd	r3, r4, [r1]
 8009126:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	3370      	adds	r3, #112	; 0x70
 800912e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009132:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	3310      	adds	r3, #16
 800913a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913e:	ea80 0402 	eor.w	r4, r0, r2
 8009142:	f641 5530 	movw	r5, #7472	; 0x1d30
 8009146:	443d      	add	r5, r7
 8009148:	602c      	str	r4, [r5, #0]
 800914a:	404b      	eors	r3, r1
 800914c:	f641 5234 	movw	r2, #7476	; 0x1d34
 8009150:	443a      	add	r2, r7
 8009152:	6013      	str	r3, [r2, #0]
 8009154:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800915e:	2210      	movs	r2, #16
 8009160:	f641 5330 	movw	r3, #7472	; 0x1d30
 8009164:	443b      	add	r3, r7
 8009166:	e9d3 0100 	ldrd	r0, r1, [r3]
 800916a:	f7ff f9e9 	bl	8008540 <rotr64>
 800916e:	4602      	mov	r2, r0
 8009170:	460b      	mov	r3, r1
 8009172:	e9c4 2300 	strd	r2, r3, [r4]
 8009176:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	3350      	adds	r3, #80	; 0x50
 800917e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009182:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	3370      	adds	r3, #112	; 0x70
 800918a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8009192:	6809      	ldr	r1, [r1, #0]
 8009194:	3150      	adds	r1, #80	; 0x50
 8009196:	18a0      	adds	r0, r4, r2
 8009198:	f641 5c28 	movw	ip, #7464	; 0x1d28
 800919c:	44bc      	add	ip, r7
 800919e:	f8cc 0000 	str.w	r0, [ip]
 80091a2:	eb45 0303 	adc.w	r3, r5, r3
 80091a6:	f641 522c 	movw	r2, #7468	; 0x1d2c
 80091aa:	443a      	add	r2, r7
 80091ac:	6013      	str	r3, [r2, #0]
 80091ae:	f641 5328 	movw	r3, #7464	; 0x1d28
 80091b2:	443b      	add	r3, r7
 80091b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80091b8:	e9c1 3400 	strd	r3, r4, [r1]
 80091bc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	3330      	adds	r3, #48	; 0x30
 80091c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80091c8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	3350      	adds	r3, #80	; 0x50
 80091d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d4:	ea80 0402 	eor.w	r4, r0, r2
 80091d8:	f507 55e9 	add.w	r5, r7, #7456	; 0x1d20
 80091dc:	602c      	str	r4, [r5, #0]
 80091de:	404b      	eors	r3, r1
 80091e0:	f641 5224 	movw	r2, #7460	; 0x1d24
 80091e4:	443a      	add	r2, r7
 80091e6:	6013      	str	r3, [r2, #0]
 80091e8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80091f2:	223f      	movs	r2, #63	; 0x3f
 80091f4:	f507 53e9 	add.w	r3, r7, #7456	; 0x1d20
 80091f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80091fc:	f7ff f9a0 	bl	8008540 <rotr64>
 8009200:	4602      	mov	r2, r0
 8009202:	460b      	mov	r3, r1
 8009204:	e9c4 2300 	strd	r2, r3, [r4]
 8009208:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	3318      	adds	r3, #24
 8009210:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009214:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	3338      	adds	r3, #56	; 0x38
 800921c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009220:	1884      	adds	r4, r0, r2
 8009222:	f641 5518 	movw	r5, #7448	; 0x1d18
 8009226:	443d      	add	r5, r7
 8009228:	602c      	str	r4, [r5, #0]
 800922a:	eb41 0303 	adc.w	r3, r1, r3
 800922e:	f641 521c 	movw	r2, #7452	; 0x1d1c
 8009232:	443a      	add	r2, r7
 8009234:	6013      	str	r3, [r2, #0]
 8009236:	2306      	movs	r3, #6
 8009238:	00da      	lsls	r2, r3, #3
 800923a:	f641 6324 	movw	r3, #7716	; 0x1e24
 800923e:	443b      	add	r3, r7
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4413      	add	r3, r2
 8009244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009248:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800924c:	6809      	ldr	r1, [r1, #0]
 800924e:	3118      	adds	r1, #24
 8009250:	f641 5018 	movw	r0, #7448	; 0x1d18
 8009254:	4438      	add	r0, r7
 8009256:	e9d0 4500 	ldrd	r4, r5, [r0]
 800925a:	4620      	mov	r0, r4
 800925c:	1880      	adds	r0, r0, r2
 800925e:	f641 5c10 	movw	ip, #7440	; 0x1d10
 8009262:	44bc      	add	ip, r7
 8009264:	f8cc 0000 	str.w	r0, [ip]
 8009268:	4628      	mov	r0, r5
 800926a:	eb43 0000 	adc.w	r0, r3, r0
 800926e:	f641 5314 	movw	r3, #7444	; 0x1d14
 8009272:	443b      	add	r3, r7
 8009274:	6018      	str	r0, [r3, #0]
 8009276:	f641 5310 	movw	r3, #7440	; 0x1d10
 800927a:	443b      	add	r3, r7
 800927c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009280:	e9c1 3400 	strd	r3, r4, [r1]
 8009284:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	3378      	adds	r3, #120	; 0x78
 800928c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009290:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	3318      	adds	r3, #24
 8009298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929c:	ea80 0402 	eor.w	r4, r0, r2
 80092a0:	f641 5508 	movw	r5, #7432	; 0x1d08
 80092a4:	443d      	add	r5, r7
 80092a6:	602c      	str	r4, [r5, #0]
 80092a8:	404b      	eors	r3, r1
 80092aa:	f641 520c 	movw	r2, #7436	; 0x1d0c
 80092ae:	443a      	add	r2, r7
 80092b0:	6013      	str	r3, [r2, #0]
 80092b2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80092bc:	2220      	movs	r2, #32
 80092be:	f641 5308 	movw	r3, #7432	; 0x1d08
 80092c2:	443b      	add	r3, r7
 80092c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80092c8:	f7ff f93a 	bl	8008540 <rotr64>
 80092cc:	4602      	mov	r2, r0
 80092ce:	460b      	mov	r3, r1
 80092d0:	e9c4 2300 	strd	r2, r3, [r4]
 80092d4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	3358      	adds	r3, #88	; 0x58
 80092dc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80092e0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	3378      	adds	r3, #120	; 0x78
 80092e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ec:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80092f0:	6809      	ldr	r1, [r1, #0]
 80092f2:	3158      	adds	r1, #88	; 0x58
 80092f4:	18a0      	adds	r0, r4, r2
 80092f6:	f507 5ce8 	add.w	ip, r7, #7424	; 0x1d00
 80092fa:	f8cc 0000 	str.w	r0, [ip]
 80092fe:	eb45 0303 	adc.w	r3, r5, r3
 8009302:	f641 5204 	movw	r2, #7428	; 0x1d04
 8009306:	443a      	add	r2, r7
 8009308:	6013      	str	r3, [r2, #0]
 800930a:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 800930e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009312:	e9c1 3400 	strd	r3, r4, [r1]
 8009316:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	3338      	adds	r3, #56	; 0x38
 800931e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009322:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	3358      	adds	r3, #88	; 0x58
 800932a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932e:	ea80 0402 	eor.w	r4, r0, r2
 8009332:	f641 45f8 	movw	r5, #7416	; 0x1cf8
 8009336:	443d      	add	r5, r7
 8009338:	602c      	str	r4, [r5, #0]
 800933a:	404b      	eors	r3, r1
 800933c:	f641 42fc 	movw	r2, #7420	; 0x1cfc
 8009340:	443a      	add	r2, r7
 8009342:	6013      	str	r3, [r2, #0]
 8009344:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800934e:	2218      	movs	r2, #24
 8009350:	f641 43f8 	movw	r3, #7416	; 0x1cf8
 8009354:	443b      	add	r3, r7
 8009356:	e9d3 0100 	ldrd	r0, r1, [r3]
 800935a:	f7ff f8f1 	bl	8008540 <rotr64>
 800935e:	4602      	mov	r2, r0
 8009360:	460b      	mov	r3, r1
 8009362:	e9c4 2300 	strd	r2, r3, [r4]
 8009366:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	3318      	adds	r3, #24
 800936e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009372:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	3338      	adds	r3, #56	; 0x38
 800937a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937e:	1884      	adds	r4, r0, r2
 8009380:	f641 45f0 	movw	r5, #7408	; 0x1cf0
 8009384:	443d      	add	r5, r7
 8009386:	602c      	str	r4, [r5, #0]
 8009388:	eb41 0303 	adc.w	r3, r1, r3
 800938c:	f641 42f4 	movw	r2, #7412	; 0x1cf4
 8009390:	443a      	add	r2, r7
 8009392:	6013      	str	r3, [r2, #0]
 8009394:	2307      	movs	r3, #7
 8009396:	00da      	lsls	r2, r3, #3
 8009398:	f641 6324 	movw	r3, #7716	; 0x1e24
 800939c:	443b      	add	r3, r7
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4413      	add	r3, r2
 80093a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a6:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80093aa:	6809      	ldr	r1, [r1, #0]
 80093ac:	3118      	adds	r1, #24
 80093ae:	f641 40f0 	movw	r0, #7408	; 0x1cf0
 80093b2:	4438      	add	r0, r7
 80093b4:	e9d0 4500 	ldrd	r4, r5, [r0]
 80093b8:	4620      	mov	r0, r4
 80093ba:	1880      	adds	r0, r0, r2
 80093bc:	f641 4ce8 	movw	ip, #7400	; 0x1ce8
 80093c0:	44bc      	add	ip, r7
 80093c2:	f8cc 0000 	str.w	r0, [ip]
 80093c6:	4628      	mov	r0, r5
 80093c8:	eb43 0000 	adc.w	r0, r3, r0
 80093cc:	f641 43ec 	movw	r3, #7404	; 0x1cec
 80093d0:	443b      	add	r3, r7
 80093d2:	6018      	str	r0, [r3, #0]
 80093d4:	f641 43e8 	movw	r3, #7400	; 0x1ce8
 80093d8:	443b      	add	r3, r7
 80093da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80093de:	e9c1 3400 	strd	r3, r4, [r1]
 80093e2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	3378      	adds	r3, #120	; 0x78
 80093ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80093ee:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	3318      	adds	r3, #24
 80093f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fa:	ea80 0402 	eor.w	r4, r0, r2
 80093fe:	f507 55e7 	add.w	r5, r7, #7392	; 0x1ce0
 8009402:	602c      	str	r4, [r5, #0]
 8009404:	404b      	eors	r3, r1
 8009406:	f641 42e4 	movw	r2, #7396	; 0x1ce4
 800940a:	443a      	add	r2, r7
 800940c:	6013      	str	r3, [r2, #0]
 800940e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8009418:	2210      	movs	r2, #16
 800941a:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 800941e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009422:	f7ff f88d 	bl	8008540 <rotr64>
 8009426:	4602      	mov	r2, r0
 8009428:	460b      	mov	r3, r1
 800942a:	e9c4 2300 	strd	r2, r3, [r4]
 800942e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	3358      	adds	r3, #88	; 0x58
 8009436:	e9d3 4500 	ldrd	r4, r5, [r3]
 800943a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	3378      	adds	r3, #120	; 0x78
 8009442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009446:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800944a:	6809      	ldr	r1, [r1, #0]
 800944c:	3158      	adds	r1, #88	; 0x58
 800944e:	18a0      	adds	r0, r4, r2
 8009450:	f641 4cd8 	movw	ip, #7384	; 0x1cd8
 8009454:	44bc      	add	ip, r7
 8009456:	f8cc 0000 	str.w	r0, [ip]
 800945a:	eb45 0303 	adc.w	r3, r5, r3
 800945e:	f641 42dc 	movw	r2, #7388	; 0x1cdc
 8009462:	443a      	add	r2, r7
 8009464:	6013      	str	r3, [r2, #0]
 8009466:	f641 43d8 	movw	r3, #7384	; 0x1cd8
 800946a:	443b      	add	r3, r7
 800946c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009470:	e9c1 3400 	strd	r3, r4, [r1]
 8009474:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	3338      	adds	r3, #56	; 0x38
 800947c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009480:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	3358      	adds	r3, #88	; 0x58
 8009488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948c:	ea80 0402 	eor.w	r4, r0, r2
 8009490:	f641 45d0 	movw	r5, #7376	; 0x1cd0
 8009494:	443d      	add	r5, r7
 8009496:	602c      	str	r4, [r5, #0]
 8009498:	404b      	eors	r3, r1
 800949a:	f641 42d4 	movw	r2, #7380	; 0x1cd4
 800949e:	443a      	add	r2, r7
 80094a0:	6013      	str	r3, [r2, #0]
 80094a2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80094ac:	223f      	movs	r2, #63	; 0x3f
 80094ae:	f641 43d0 	movw	r3, #7376	; 0x1cd0
 80094b2:	443b      	add	r3, r7
 80094b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80094b8:	f7ff f842 	bl	8008540 <rotr64>
 80094bc:	4602      	mov	r2, r0
 80094be:	460b      	mov	r3, r1
 80094c0:	e9c4 2300 	strd	r2, r3, [r4]
 80094c4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80094ce:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	3328      	adds	r3, #40	; 0x28
 80094d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094da:	1884      	adds	r4, r0, r2
 80094dc:	f641 45c8 	movw	r5, #7368	; 0x1cc8
 80094e0:	443d      	add	r5, r7
 80094e2:	602c      	str	r4, [r5, #0]
 80094e4:	eb41 0303 	adc.w	r3, r1, r3
 80094e8:	f641 42cc 	movw	r2, #7372	; 0x1ccc
 80094ec:	443a      	add	r2, r7
 80094ee:	6013      	str	r3, [r2, #0]
 80094f0:	2308      	movs	r3, #8
 80094f2:	00da      	lsls	r2, r3, #3
 80094f4:	f641 6324 	movw	r3, #7716	; 0x1e24
 80094f8:	443b      	add	r3, r7
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4413      	add	r3, r2
 80094fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009502:	f641 41c8 	movw	r1, #7368	; 0x1cc8
 8009506:	4439      	add	r1, r7
 8009508:	e9d1 4500 	ldrd	r4, r5, [r1]
 800950c:	4621      	mov	r1, r4
 800950e:	1889      	adds	r1, r1, r2
 8009510:	f507 50e6 	add.w	r0, r7, #7360	; 0x1cc0
 8009514:	6001      	str	r1, [r0, #0]
 8009516:	4629      	mov	r1, r5
 8009518:	eb43 0101 	adc.w	r1, r3, r1
 800951c:	f641 43c4 	movw	r3, #7364	; 0x1cc4
 8009520:	443b      	add	r3, r7
 8009522:	6019      	str	r1, [r3, #0]
 8009524:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f507 52e6 	add.w	r2, r7, #7360	; 0x1cc0
 800952e:	e9d2 1200 	ldrd	r1, r2, [r2]
 8009532:	e9c3 1200 	strd	r1, r2, [r3]
 8009536:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	3378      	adds	r3, #120	; 0x78
 800953e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009542:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954c:	ea80 0402 	eor.w	r4, r0, r2
 8009550:	f641 45b8 	movw	r5, #7352	; 0x1cb8
 8009554:	443d      	add	r5, r7
 8009556:	602c      	str	r4, [r5, #0]
 8009558:	404b      	eors	r3, r1
 800955a:	f641 42bc 	movw	r2, #7356	; 0x1cbc
 800955e:	443a      	add	r2, r7
 8009560:	6013      	str	r3, [r2, #0]
 8009562:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800956c:	2220      	movs	r2, #32
 800956e:	f641 43b8 	movw	r3, #7352	; 0x1cb8
 8009572:	443b      	add	r3, r7
 8009574:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009578:	f7fe ffe2 	bl	8008540 <rotr64>
 800957c:	4602      	mov	r2, r0
 800957e:	460b      	mov	r3, r1
 8009580:	e9c4 2300 	strd	r2, r3, [r4]
 8009584:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	3350      	adds	r3, #80	; 0x50
 800958c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009590:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	3378      	adds	r3, #120	; 0x78
 8009598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959c:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80095a0:	6809      	ldr	r1, [r1, #0]
 80095a2:	3150      	adds	r1, #80	; 0x50
 80095a4:	18a0      	adds	r0, r4, r2
 80095a6:	f641 4cb0 	movw	ip, #7344	; 0x1cb0
 80095aa:	44bc      	add	ip, r7
 80095ac:	f8cc 0000 	str.w	r0, [ip]
 80095b0:	eb45 0303 	adc.w	r3, r5, r3
 80095b4:	f641 42b4 	movw	r2, #7348	; 0x1cb4
 80095b8:	443a      	add	r2, r7
 80095ba:	6013      	str	r3, [r2, #0]
 80095bc:	f641 43b0 	movw	r3, #7344	; 0x1cb0
 80095c0:	443b      	add	r3, r7
 80095c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80095c6:	e9c1 3400 	strd	r3, r4, [r1]
 80095ca:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	3328      	adds	r3, #40	; 0x28
 80095d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80095d6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	3350      	adds	r3, #80	; 0x50
 80095de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e2:	ea80 0402 	eor.w	r4, r0, r2
 80095e6:	f641 45a8 	movw	r5, #7336	; 0x1ca8
 80095ea:	443d      	add	r5, r7
 80095ec:	602c      	str	r4, [r5, #0]
 80095ee:	404b      	eors	r3, r1
 80095f0:	f641 42ac 	movw	r2, #7340	; 0x1cac
 80095f4:	443a      	add	r2, r7
 80095f6:	6013      	str	r3, [r2, #0]
 80095f8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8009602:	2218      	movs	r2, #24
 8009604:	f641 43a8 	movw	r3, #7336	; 0x1ca8
 8009608:	443b      	add	r3, r7
 800960a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800960e:	f7fe ff97 	bl	8008540 <rotr64>
 8009612:	4602      	mov	r2, r0
 8009614:	460b      	mov	r3, r1
 8009616:	e9c4 2300 	strd	r2, r3, [r4]
 800961a:	e021      	b.n	8009660 <blake2b_compress+0xe88>
 800961c:	f3af 8000 	nop.w
 8009620:	f3bcc908 	.word	0xf3bcc908
 8009624:	6a09e667 	.word	0x6a09e667
 8009628:	84caa73b 	.word	0x84caa73b
 800962c:	bb67ae85 	.word	0xbb67ae85
 8009630:	fe94f82b 	.word	0xfe94f82b
 8009634:	3c6ef372 	.word	0x3c6ef372
 8009638:	5f1d36f1 	.word	0x5f1d36f1
 800963c:	a54ff53a 	.word	0xa54ff53a
 8009640:	ade682d1 	.word	0xade682d1
 8009644:	510e527f 	.word	0x510e527f
 8009648:	2b3e6c1f 	.word	0x2b3e6c1f
 800964c:	9b05688c 	.word	0x9b05688c
 8009650:	fb41bd6b 	.word	0xfb41bd6b
 8009654:	1f83d9ab 	.word	0x1f83d9ab
 8009658:	137e2179 	.word	0x137e2179
 800965c:	5be0cd19 	.word	0x5be0cd19
 8009660:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	e9d3 0100 	ldrd	r0, r1, [r3]
 800966a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	3328      	adds	r3, #40	; 0x28
 8009672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009676:	1884      	adds	r4, r0, r2
 8009678:	f507 55e5 	add.w	r5, r7, #7328	; 0x1ca0
 800967c:	602c      	str	r4, [r5, #0]
 800967e:	eb41 0303 	adc.w	r3, r1, r3
 8009682:	f641 42a4 	movw	r2, #7332	; 0x1ca4
 8009686:	443a      	add	r2, r7
 8009688:	6013      	str	r3, [r2, #0]
 800968a:	2309      	movs	r3, #9
 800968c:	00da      	lsls	r2, r3, #3
 800968e:	f641 6324 	movw	r3, #7716	; 0x1e24
 8009692:	443b      	add	r3, r7
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4413      	add	r3, r2
 8009698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969c:	f507 51e5 	add.w	r1, r7, #7328	; 0x1ca0
 80096a0:	e9d1 4500 	ldrd	r4, r5, [r1]
 80096a4:	4621      	mov	r1, r4
 80096a6:	1889      	adds	r1, r1, r2
 80096a8:	f641 4098 	movw	r0, #7320	; 0x1c98
 80096ac:	4438      	add	r0, r7
 80096ae:	6001      	str	r1, [r0, #0]
 80096b0:	4629      	mov	r1, r5
 80096b2:	eb43 0101 	adc.w	r1, r3, r1
 80096b6:	f641 439c 	movw	r3, #7324	; 0x1c9c
 80096ba:	443b      	add	r3, r7
 80096bc:	6019      	str	r1, [r3, #0]
 80096be:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f641 4298 	movw	r2, #7320	; 0x1c98
 80096c8:	443a      	add	r2, r7
 80096ca:	e9d2 1200 	ldrd	r1, r2, [r2]
 80096ce:	e9c3 1200 	strd	r1, r2, [r3]
 80096d2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	3378      	adds	r3, #120	; 0x78
 80096da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80096de:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e8:	ea80 0402 	eor.w	r4, r0, r2
 80096ec:	f641 4590 	movw	r5, #7312	; 0x1c90
 80096f0:	443d      	add	r5, r7
 80096f2:	602c      	str	r4, [r5, #0]
 80096f4:	404b      	eors	r3, r1
 80096f6:	f641 4294 	movw	r2, #7316	; 0x1c94
 80096fa:	443a      	add	r2, r7
 80096fc:	6013      	str	r3, [r2, #0]
 80096fe:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8009708:	2210      	movs	r2, #16
 800970a:	f641 4390 	movw	r3, #7312	; 0x1c90
 800970e:	443b      	add	r3, r7
 8009710:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009714:	f7fe ff14 	bl	8008540 <rotr64>
 8009718:	4602      	mov	r2, r0
 800971a:	460b      	mov	r3, r1
 800971c:	e9c4 2300 	strd	r2, r3, [r4]
 8009720:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	3350      	adds	r3, #80	; 0x50
 8009728:	e9d3 4500 	ldrd	r4, r5, [r3]
 800972c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	3378      	adds	r3, #120	; 0x78
 8009734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009738:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800973c:	6809      	ldr	r1, [r1, #0]
 800973e:	3150      	adds	r1, #80	; 0x50
 8009740:	18a0      	adds	r0, r4, r2
 8009742:	f641 4c88 	movw	ip, #7304	; 0x1c88
 8009746:	44bc      	add	ip, r7
 8009748:	f8cc 0000 	str.w	r0, [ip]
 800974c:	eb45 0303 	adc.w	r3, r5, r3
 8009750:	f641 428c 	movw	r2, #7308	; 0x1c8c
 8009754:	443a      	add	r2, r7
 8009756:	6013      	str	r3, [r2, #0]
 8009758:	f641 4388 	movw	r3, #7304	; 0x1c88
 800975c:	443b      	add	r3, r7
 800975e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009762:	e9c1 3400 	strd	r3, r4, [r1]
 8009766:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	3328      	adds	r3, #40	; 0x28
 800976e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009772:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	3350      	adds	r3, #80	; 0x50
 800977a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977e:	ea80 0402 	eor.w	r4, r0, r2
 8009782:	f507 55e4 	add.w	r5, r7, #7296	; 0x1c80
 8009786:	602c      	str	r4, [r5, #0]
 8009788:	404b      	eors	r3, r1
 800978a:	f641 4284 	movw	r2, #7300	; 0x1c84
 800978e:	443a      	add	r2, r7
 8009790:	6013      	str	r3, [r2, #0]
 8009792:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800979c:	223f      	movs	r2, #63	; 0x3f
 800979e:	f507 53e4 	add.w	r3, r7, #7296	; 0x1c80
 80097a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80097a6:	f7fe fecb 	bl	8008540 <rotr64>
 80097aa:	4602      	mov	r2, r0
 80097ac:	460b      	mov	r3, r1
 80097ae:	e9c4 2300 	strd	r2, r3, [r4]
 80097b2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	3308      	adds	r3, #8
 80097ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80097be:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	3330      	adds	r3, #48	; 0x30
 80097c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ca:	1884      	adds	r4, r0, r2
 80097cc:	f641 4578 	movw	r5, #7288	; 0x1c78
 80097d0:	443d      	add	r5, r7
 80097d2:	602c      	str	r4, [r5, #0]
 80097d4:	eb41 0303 	adc.w	r3, r1, r3
 80097d8:	f641 427c 	movw	r2, #7292	; 0x1c7c
 80097dc:	443a      	add	r2, r7
 80097de:	6013      	str	r3, [r2, #0]
 80097e0:	230a      	movs	r3, #10
 80097e2:	00da      	lsls	r2, r3, #3
 80097e4:	f641 6324 	movw	r3, #7716	; 0x1e24
 80097e8:	443b      	add	r3, r7
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4413      	add	r3, r2
 80097ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f2:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80097f6:	6809      	ldr	r1, [r1, #0]
 80097f8:	3108      	adds	r1, #8
 80097fa:	f641 4078 	movw	r0, #7288	; 0x1c78
 80097fe:	4438      	add	r0, r7
 8009800:	e9d0 4500 	ldrd	r4, r5, [r0]
 8009804:	4620      	mov	r0, r4
 8009806:	1880      	adds	r0, r0, r2
 8009808:	f641 4c70 	movw	ip, #7280	; 0x1c70
 800980c:	44bc      	add	ip, r7
 800980e:	f8cc 0000 	str.w	r0, [ip]
 8009812:	4628      	mov	r0, r5
 8009814:	eb43 0000 	adc.w	r0, r3, r0
 8009818:	f641 4374 	movw	r3, #7284	; 0x1c74
 800981c:	443b      	add	r3, r7
 800981e:	6018      	str	r0, [r3, #0]
 8009820:	f641 4370 	movw	r3, #7280	; 0x1c70
 8009824:	443b      	add	r3, r7
 8009826:	e9d3 3400 	ldrd	r3, r4, [r3]
 800982a:	e9c1 3400 	strd	r3, r4, [r1]
 800982e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	3360      	adds	r3, #96	; 0x60
 8009836:	e9d3 0100 	ldrd	r0, r1, [r3]
 800983a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	3308      	adds	r3, #8
 8009842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009846:	ea80 0402 	eor.w	r4, r0, r2
 800984a:	f641 4568 	movw	r5, #7272	; 0x1c68
 800984e:	443d      	add	r5, r7
 8009850:	602c      	str	r4, [r5, #0]
 8009852:	404b      	eors	r3, r1
 8009854:	f641 426c 	movw	r2, #7276	; 0x1c6c
 8009858:	443a      	add	r2, r7
 800985a:	6013      	str	r3, [r2, #0]
 800985c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8009866:	2220      	movs	r2, #32
 8009868:	f641 4368 	movw	r3, #7272	; 0x1c68
 800986c:	443b      	add	r3, r7
 800986e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009872:	f7fe fe65 	bl	8008540 <rotr64>
 8009876:	4602      	mov	r2, r0
 8009878:	460b      	mov	r3, r1
 800987a:	e9c4 2300 	strd	r2, r3, [r4]
 800987e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	3358      	adds	r3, #88	; 0x58
 8009886:	e9d3 4500 	ldrd	r4, r5, [r3]
 800988a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	3360      	adds	r3, #96	; 0x60
 8009892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009896:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800989a:	6809      	ldr	r1, [r1, #0]
 800989c:	3158      	adds	r1, #88	; 0x58
 800989e:	18a0      	adds	r0, r4, r2
 80098a0:	f507 5ce3 	add.w	ip, r7, #7264	; 0x1c60
 80098a4:	f8cc 0000 	str.w	r0, [ip]
 80098a8:	eb45 0303 	adc.w	r3, r5, r3
 80098ac:	f641 4264 	movw	r2, #7268	; 0x1c64
 80098b0:	443a      	add	r2, r7
 80098b2:	6013      	str	r3, [r2, #0]
 80098b4:	f507 53e3 	add.w	r3, r7, #7264	; 0x1c60
 80098b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80098bc:	e9c1 3400 	strd	r3, r4, [r1]
 80098c0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	3330      	adds	r3, #48	; 0x30
 80098c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80098cc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	3358      	adds	r3, #88	; 0x58
 80098d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d8:	ea80 0402 	eor.w	r4, r0, r2
 80098dc:	f641 4558 	movw	r5, #7256	; 0x1c58
 80098e0:	443d      	add	r5, r7
 80098e2:	602c      	str	r4, [r5, #0]
 80098e4:	404b      	eors	r3, r1
 80098e6:	f641 425c 	movw	r2, #7260	; 0x1c5c
 80098ea:	443a      	add	r2, r7
 80098ec:	6013      	str	r3, [r2, #0]
 80098ee:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80098f8:	2218      	movs	r2, #24
 80098fa:	f641 4358 	movw	r3, #7256	; 0x1c58
 80098fe:	443b      	add	r3, r7
 8009900:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009904:	f7fe fe1c 	bl	8008540 <rotr64>
 8009908:	4602      	mov	r2, r0
 800990a:	460b      	mov	r3, r1
 800990c:	e9c4 2300 	strd	r2, r3, [r4]
 8009910:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	3308      	adds	r3, #8
 8009918:	e9d3 0100 	ldrd	r0, r1, [r3]
 800991c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	3330      	adds	r3, #48	; 0x30
 8009924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009928:	1884      	adds	r4, r0, r2
 800992a:	f641 4550 	movw	r5, #7248	; 0x1c50
 800992e:	443d      	add	r5, r7
 8009930:	602c      	str	r4, [r5, #0]
 8009932:	eb41 0303 	adc.w	r3, r1, r3
 8009936:	f641 4254 	movw	r2, #7252	; 0x1c54
 800993a:	443a      	add	r2, r7
 800993c:	6013      	str	r3, [r2, #0]
 800993e:	230b      	movs	r3, #11
 8009940:	00da      	lsls	r2, r3, #3
 8009942:	f641 6324 	movw	r3, #7716	; 0x1e24
 8009946:	443b      	add	r3, r7
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4413      	add	r3, r2
 800994c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009950:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8009954:	6809      	ldr	r1, [r1, #0]
 8009956:	3108      	adds	r1, #8
 8009958:	f641 4050 	movw	r0, #7248	; 0x1c50
 800995c:	4438      	add	r0, r7
 800995e:	e9d0 4500 	ldrd	r4, r5, [r0]
 8009962:	4620      	mov	r0, r4
 8009964:	1880      	adds	r0, r0, r2
 8009966:	f641 4c48 	movw	ip, #7240	; 0x1c48
 800996a:	44bc      	add	ip, r7
 800996c:	f8cc 0000 	str.w	r0, [ip]
 8009970:	4628      	mov	r0, r5
 8009972:	eb43 0000 	adc.w	r0, r3, r0
 8009976:	f641 434c 	movw	r3, #7244	; 0x1c4c
 800997a:	443b      	add	r3, r7
 800997c:	6018      	str	r0, [r3, #0]
 800997e:	f641 4348 	movw	r3, #7240	; 0x1c48
 8009982:	443b      	add	r3, r7
 8009984:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009988:	e9c1 3400 	strd	r3, r4, [r1]
 800998c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	3360      	adds	r3, #96	; 0x60
 8009994:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009998:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	3308      	adds	r3, #8
 80099a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a4:	ea80 0402 	eor.w	r4, r0, r2
 80099a8:	f507 55e2 	add.w	r5, r7, #7232	; 0x1c40
 80099ac:	602c      	str	r4, [r5, #0]
 80099ae:	404b      	eors	r3, r1
 80099b0:	f641 4244 	movw	r2, #7236	; 0x1c44
 80099b4:	443a      	add	r2, r7
 80099b6:	6013      	str	r3, [r2, #0]
 80099b8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80099c2:	2210      	movs	r2, #16
 80099c4:	f507 53e2 	add.w	r3, r7, #7232	; 0x1c40
 80099c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80099cc:	f7fe fdb8 	bl	8008540 <rotr64>
 80099d0:	4602      	mov	r2, r0
 80099d2:	460b      	mov	r3, r1
 80099d4:	e9c4 2300 	strd	r2, r3, [r4]
 80099d8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	3358      	adds	r3, #88	; 0x58
 80099e0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80099e4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	3360      	adds	r3, #96	; 0x60
 80099ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f0:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80099f4:	6809      	ldr	r1, [r1, #0]
 80099f6:	3158      	adds	r1, #88	; 0x58
 80099f8:	18a0      	adds	r0, r4, r2
 80099fa:	f641 4c38 	movw	ip, #7224	; 0x1c38
 80099fe:	44bc      	add	ip, r7
 8009a00:	f8cc 0000 	str.w	r0, [ip]
 8009a04:	eb45 0303 	adc.w	r3, r5, r3
 8009a08:	f641 423c 	movw	r2, #7228	; 0x1c3c
 8009a0c:	443a      	add	r2, r7
 8009a0e:	6013      	str	r3, [r2, #0]
 8009a10:	f641 4338 	movw	r3, #7224	; 0x1c38
 8009a14:	443b      	add	r3, r7
 8009a16:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009a1a:	e9c1 3400 	strd	r3, r4, [r1]
 8009a1e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	3330      	adds	r3, #48	; 0x30
 8009a26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a2a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	3358      	adds	r3, #88	; 0x58
 8009a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a36:	ea80 0402 	eor.w	r4, r0, r2
 8009a3a:	f641 4530 	movw	r5, #7216	; 0x1c30
 8009a3e:	443d      	add	r5, r7
 8009a40:	602c      	str	r4, [r5, #0]
 8009a42:	404b      	eors	r3, r1
 8009a44:	f641 4234 	movw	r2, #7220	; 0x1c34
 8009a48:	443a      	add	r2, r7
 8009a4a:	6013      	str	r3, [r2, #0]
 8009a4c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8009a56:	223f      	movs	r2, #63	; 0x3f
 8009a58:	f641 4330 	movw	r3, #7216	; 0x1c30
 8009a5c:	443b      	add	r3, r7
 8009a5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a62:	f7fe fd6d 	bl	8008540 <rotr64>
 8009a66:	4602      	mov	r2, r0
 8009a68:	460b      	mov	r3, r1
 8009a6a:	e9c4 2300 	strd	r2, r3, [r4]
 8009a6e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	3310      	adds	r3, #16
 8009a76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a7a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	3338      	adds	r3, #56	; 0x38
 8009a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a86:	1884      	adds	r4, r0, r2
 8009a88:	f641 4528 	movw	r5, #7208	; 0x1c28
 8009a8c:	443d      	add	r5, r7
 8009a8e:	602c      	str	r4, [r5, #0]
 8009a90:	eb41 0303 	adc.w	r3, r1, r3
 8009a94:	f641 422c 	movw	r2, #7212	; 0x1c2c
 8009a98:	443a      	add	r2, r7
 8009a9a:	6013      	str	r3, [r2, #0]
 8009a9c:	230c      	movs	r3, #12
 8009a9e:	00da      	lsls	r2, r3, #3
 8009aa0:	f641 6324 	movw	r3, #7716	; 0x1e24
 8009aa4:	443b      	add	r3, r7
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4413      	add	r3, r2
 8009aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aae:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8009ab2:	6809      	ldr	r1, [r1, #0]
 8009ab4:	3110      	adds	r1, #16
 8009ab6:	f641 4028 	movw	r0, #7208	; 0x1c28
 8009aba:	4438      	add	r0, r7
 8009abc:	e9d0 4500 	ldrd	r4, r5, [r0]
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	1880      	adds	r0, r0, r2
 8009ac4:	f507 5ce1 	add.w	ip, r7, #7200	; 0x1c20
 8009ac8:	f8cc 0000 	str.w	r0, [ip]
 8009acc:	4628      	mov	r0, r5
 8009ace:	eb43 0000 	adc.w	r0, r3, r0
 8009ad2:	f641 4324 	movw	r3, #7204	; 0x1c24
 8009ad6:	443b      	add	r3, r7
 8009ad8:	6018      	str	r0, [r3, #0]
 8009ada:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8009ade:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009ae2:	e9c1 3400 	strd	r3, r4, [r1]
 8009ae6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	3368      	adds	r3, #104	; 0x68
 8009aee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009af2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	3310      	adds	r3, #16
 8009afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afe:	ea80 0402 	eor.w	r4, r0, r2
 8009b02:	f641 4518 	movw	r5, #7192	; 0x1c18
 8009b06:	443d      	add	r5, r7
 8009b08:	602c      	str	r4, [r5, #0]
 8009b0a:	404b      	eors	r3, r1
 8009b0c:	f641 421c 	movw	r2, #7196	; 0x1c1c
 8009b10:	443a      	add	r2, r7
 8009b12:	6013      	str	r3, [r2, #0]
 8009b14:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8009b1e:	2220      	movs	r2, #32
 8009b20:	f641 4318 	movw	r3, #7192	; 0x1c18
 8009b24:	443b      	add	r3, r7
 8009b26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009b2a:	f7fe fd09 	bl	8008540 <rotr64>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	460b      	mov	r3, r1
 8009b32:	e9c4 2300 	strd	r2, r3, [r4]
 8009b36:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	3340      	adds	r3, #64	; 0x40
 8009b3e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009b42:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	3368      	adds	r3, #104	; 0x68
 8009b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8009b52:	6809      	ldr	r1, [r1, #0]
 8009b54:	3140      	adds	r1, #64	; 0x40
 8009b56:	18a0      	adds	r0, r4, r2
 8009b58:	f641 4c10 	movw	ip, #7184	; 0x1c10
 8009b5c:	44bc      	add	ip, r7
 8009b5e:	f8cc 0000 	str.w	r0, [ip]
 8009b62:	eb45 0303 	adc.w	r3, r5, r3
 8009b66:	f641 4214 	movw	r2, #7188	; 0x1c14
 8009b6a:	443a      	add	r2, r7
 8009b6c:	6013      	str	r3, [r2, #0]
 8009b6e:	f641 4310 	movw	r3, #7184	; 0x1c10
 8009b72:	443b      	add	r3, r7
 8009b74:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009b78:	e9c1 3400 	strd	r3, r4, [r1]
 8009b7c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	3338      	adds	r3, #56	; 0x38
 8009b84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009b88:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	3340      	adds	r3, #64	; 0x40
 8009b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b94:	ea80 0402 	eor.w	r4, r0, r2
 8009b98:	f641 4508 	movw	r5, #7176	; 0x1c08
 8009b9c:	443d      	add	r5, r7
 8009b9e:	602c      	str	r4, [r5, #0]
 8009ba0:	404b      	eors	r3, r1
 8009ba2:	f641 420c 	movw	r2, #7180	; 0x1c0c
 8009ba6:	443a      	add	r2, r7
 8009ba8:	6013      	str	r3, [r2, #0]
 8009baa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8009bb4:	2218      	movs	r2, #24
 8009bb6:	f641 4308 	movw	r3, #7176	; 0x1c08
 8009bba:	443b      	add	r3, r7
 8009bbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009bc0:	f7fe fcbe 	bl	8008540 <rotr64>
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	460b      	mov	r3, r1
 8009bc8:	e9c4 2300 	strd	r2, r3, [r4]
 8009bcc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	3310      	adds	r3, #16
 8009bd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009bd8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	3338      	adds	r3, #56	; 0x38
 8009be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be4:	1884      	adds	r4, r0, r2
 8009be6:	f507 55e0 	add.w	r5, r7, #7168	; 0x1c00
 8009bea:	602c      	str	r4, [r5, #0]
 8009bec:	eb41 0303 	adc.w	r3, r1, r3
 8009bf0:	f641 4204 	movw	r2, #7172	; 0x1c04
 8009bf4:	443a      	add	r2, r7
 8009bf6:	6013      	str	r3, [r2, #0]
 8009bf8:	230d      	movs	r3, #13
 8009bfa:	00da      	lsls	r2, r3, #3
 8009bfc:	f641 6324 	movw	r3, #7716	; 0x1e24
 8009c00:	443b      	add	r3, r7
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4413      	add	r3, r2
 8009c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8009c0e:	6809      	ldr	r1, [r1, #0]
 8009c10:	3110      	adds	r1, #16
 8009c12:	f507 50e0 	add.w	r0, r7, #7168	; 0x1c00
 8009c16:	e9d0 4500 	ldrd	r4, r5, [r0]
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	1880      	adds	r0, r0, r2
 8009c1e:	f641 3cf8 	movw	ip, #7160	; 0x1bf8
 8009c22:	44bc      	add	ip, r7
 8009c24:	f8cc 0000 	str.w	r0, [ip]
 8009c28:	4628      	mov	r0, r5
 8009c2a:	eb43 0000 	adc.w	r0, r3, r0
 8009c2e:	f641 33fc 	movw	r3, #7164	; 0x1bfc
 8009c32:	443b      	add	r3, r7
 8009c34:	6018      	str	r0, [r3, #0]
 8009c36:	f641 33f8 	movw	r3, #7160	; 0x1bf8
 8009c3a:	443b      	add	r3, r7
 8009c3c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009c40:	e9c1 3400 	strd	r3, r4, [r1]
 8009c44:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	3368      	adds	r3, #104	; 0x68
 8009c4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009c50:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	3310      	adds	r3, #16
 8009c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5c:	ea80 0402 	eor.w	r4, r0, r2
 8009c60:	f641 35f0 	movw	r5, #7152	; 0x1bf0
 8009c64:	443d      	add	r5, r7
 8009c66:	602c      	str	r4, [r5, #0]
 8009c68:	404b      	eors	r3, r1
 8009c6a:	f641 32f4 	movw	r2, #7156	; 0x1bf4
 8009c6e:	443a      	add	r2, r7
 8009c70:	6013      	str	r3, [r2, #0]
 8009c72:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8009c7c:	2210      	movs	r2, #16
 8009c7e:	f641 33f0 	movw	r3, #7152	; 0x1bf0
 8009c82:	443b      	add	r3, r7
 8009c84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009c88:	f7fe fc5a 	bl	8008540 <rotr64>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	460b      	mov	r3, r1
 8009c90:	e9c4 2300 	strd	r2, r3, [r4]
 8009c94:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	3340      	adds	r3, #64	; 0x40
 8009c9c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009ca0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	3368      	adds	r3, #104	; 0x68
 8009ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cac:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8009cb0:	6809      	ldr	r1, [r1, #0]
 8009cb2:	3140      	adds	r1, #64	; 0x40
 8009cb4:	18a0      	adds	r0, r4, r2
 8009cb6:	f641 3ce8 	movw	ip, #7144	; 0x1be8
 8009cba:	44bc      	add	ip, r7
 8009cbc:	f8cc 0000 	str.w	r0, [ip]
 8009cc0:	eb45 0303 	adc.w	r3, r5, r3
 8009cc4:	f641 32ec 	movw	r2, #7148	; 0x1bec
 8009cc8:	443a      	add	r2, r7
 8009cca:	6013      	str	r3, [r2, #0]
 8009ccc:	f641 33e8 	movw	r3, #7144	; 0x1be8
 8009cd0:	443b      	add	r3, r7
 8009cd2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009cd6:	e9c1 3400 	strd	r3, r4, [r1]
 8009cda:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	3338      	adds	r3, #56	; 0x38
 8009ce2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009ce6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	3340      	adds	r3, #64	; 0x40
 8009cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf2:	ea80 0402 	eor.w	r4, r0, r2
 8009cf6:	f507 55df 	add.w	r5, r7, #7136	; 0x1be0
 8009cfa:	602c      	str	r4, [r5, #0]
 8009cfc:	404b      	eors	r3, r1
 8009cfe:	f641 32e4 	movw	r2, #7140	; 0x1be4
 8009d02:	443a      	add	r2, r7
 8009d04:	6013      	str	r3, [r2, #0]
 8009d06:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8009d10:	223f      	movs	r2, #63	; 0x3f
 8009d12:	f507 53df 	add.w	r3, r7, #7136	; 0x1be0
 8009d16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009d1a:	f7fe fc11 	bl	8008540 <rotr64>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	460b      	mov	r3, r1
 8009d22:	e9c4 2300 	strd	r2, r3, [r4]
 8009d26:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	3318      	adds	r3, #24
 8009d2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009d32:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	3320      	adds	r3, #32
 8009d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3e:	1884      	adds	r4, r0, r2
 8009d40:	f641 35d8 	movw	r5, #7128	; 0x1bd8
 8009d44:	443d      	add	r5, r7
 8009d46:	602c      	str	r4, [r5, #0]
 8009d48:	eb41 0303 	adc.w	r3, r1, r3
 8009d4c:	f641 32dc 	movw	r2, #7132	; 0x1bdc
 8009d50:	443a      	add	r2, r7
 8009d52:	6013      	str	r3, [r2, #0]
 8009d54:	230e      	movs	r3, #14
 8009d56:	00da      	lsls	r2, r3, #3
 8009d58:	f641 6324 	movw	r3, #7716	; 0x1e24
 8009d5c:	443b      	add	r3, r7
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4413      	add	r3, r2
 8009d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d66:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8009d6a:	6809      	ldr	r1, [r1, #0]
 8009d6c:	3118      	adds	r1, #24
 8009d6e:	f641 30d8 	movw	r0, #7128	; 0x1bd8
 8009d72:	4438      	add	r0, r7
 8009d74:	e9d0 4500 	ldrd	r4, r5, [r0]
 8009d78:	4620      	mov	r0, r4
 8009d7a:	1880      	adds	r0, r0, r2
 8009d7c:	f641 3cd0 	movw	ip, #7120	; 0x1bd0
 8009d80:	44bc      	add	ip, r7
 8009d82:	f8cc 0000 	str.w	r0, [ip]
 8009d86:	4628      	mov	r0, r5
 8009d88:	eb43 0000 	adc.w	r0, r3, r0
 8009d8c:	f641 33d4 	movw	r3, #7124	; 0x1bd4
 8009d90:	443b      	add	r3, r7
 8009d92:	6018      	str	r0, [r3, #0]
 8009d94:	f641 33d0 	movw	r3, #7120	; 0x1bd0
 8009d98:	443b      	add	r3, r7
 8009d9a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009d9e:	e9c1 3400 	strd	r3, r4, [r1]
 8009da2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	3370      	adds	r3, #112	; 0x70
 8009daa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009dae:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	3318      	adds	r3, #24
 8009db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dba:	ea80 0402 	eor.w	r4, r0, r2
 8009dbe:	f641 35c8 	movw	r5, #7112	; 0x1bc8
 8009dc2:	443d      	add	r5, r7
 8009dc4:	602c      	str	r4, [r5, #0]
 8009dc6:	404b      	eors	r3, r1
 8009dc8:	f641 32cc 	movw	r2, #7116	; 0x1bcc
 8009dcc:	443a      	add	r2, r7
 8009dce:	6013      	str	r3, [r2, #0]
 8009dd0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8009dda:	2220      	movs	r2, #32
 8009ddc:	f641 33c8 	movw	r3, #7112	; 0x1bc8
 8009de0:	443b      	add	r3, r7
 8009de2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009de6:	f7fe fbab 	bl	8008540 <rotr64>
 8009dea:	4602      	mov	r2, r0
 8009dec:	460b      	mov	r3, r1
 8009dee:	e9c4 2300 	strd	r2, r3, [r4]
 8009df2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	3348      	adds	r3, #72	; 0x48
 8009dfa:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009dfe:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	3370      	adds	r3, #112	; 0x70
 8009e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8009e0e:	6809      	ldr	r1, [r1, #0]
 8009e10:	3148      	adds	r1, #72	; 0x48
 8009e12:	18a0      	adds	r0, r4, r2
 8009e14:	f507 5cde 	add.w	ip, r7, #7104	; 0x1bc0
 8009e18:	f8cc 0000 	str.w	r0, [ip]
 8009e1c:	eb45 0303 	adc.w	r3, r5, r3
 8009e20:	f641 32c4 	movw	r2, #7108	; 0x1bc4
 8009e24:	443a      	add	r2, r7
 8009e26:	6013      	str	r3, [r2, #0]
 8009e28:	f507 53de 	add.w	r3, r7, #7104	; 0x1bc0
 8009e2c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e30:	e9c1 3400 	strd	r3, r4, [r1]
 8009e34:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	3320      	adds	r3, #32
 8009e3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009e40:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	3348      	adds	r3, #72	; 0x48
 8009e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4c:	ea80 0402 	eor.w	r4, r0, r2
 8009e50:	f641 35b8 	movw	r5, #7096	; 0x1bb8
 8009e54:	443d      	add	r5, r7
 8009e56:	602c      	str	r4, [r5, #0]
 8009e58:	404b      	eors	r3, r1
 8009e5a:	f641 32bc 	movw	r2, #7100	; 0x1bbc
 8009e5e:	443a      	add	r2, r7
 8009e60:	6013      	str	r3, [r2, #0]
 8009e62:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f103 0420 	add.w	r4, r3, #32
 8009e6c:	2218      	movs	r2, #24
 8009e6e:	f641 33b8 	movw	r3, #7096	; 0x1bb8
 8009e72:	443b      	add	r3, r7
 8009e74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009e78:	f7fe fb62 	bl	8008540 <rotr64>
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	460b      	mov	r3, r1
 8009e80:	e9c4 2300 	strd	r2, r3, [r4]
 8009e84:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	3318      	adds	r3, #24
 8009e8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009e90:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	3320      	adds	r3, #32
 8009e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9c:	1884      	adds	r4, r0, r2
 8009e9e:	f641 35b0 	movw	r5, #7088	; 0x1bb0
 8009ea2:	443d      	add	r5, r7
 8009ea4:	602c      	str	r4, [r5, #0]
 8009ea6:	eb41 0303 	adc.w	r3, r1, r3
 8009eaa:	f641 32b4 	movw	r2, #7092	; 0x1bb4
 8009eae:	443a      	add	r2, r7
 8009eb0:	6013      	str	r3, [r2, #0]
 8009eb2:	230f      	movs	r3, #15
 8009eb4:	00da      	lsls	r2, r3, #3
 8009eb6:	f641 6324 	movw	r3, #7716	; 0x1e24
 8009eba:	443b      	add	r3, r7
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4413      	add	r3, r2
 8009ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec4:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8009ec8:	6809      	ldr	r1, [r1, #0]
 8009eca:	3118      	adds	r1, #24
 8009ecc:	f641 30b0 	movw	r0, #7088	; 0x1bb0
 8009ed0:	4438      	add	r0, r7
 8009ed2:	e9d0 4500 	ldrd	r4, r5, [r0]
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	1880      	adds	r0, r0, r2
 8009eda:	f641 3ca8 	movw	ip, #7080	; 0x1ba8
 8009ede:	44bc      	add	ip, r7
 8009ee0:	f8cc 0000 	str.w	r0, [ip]
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	eb43 0000 	adc.w	r0, r3, r0
 8009eea:	f641 33ac 	movw	r3, #7084	; 0x1bac
 8009eee:	443b      	add	r3, r7
 8009ef0:	6018      	str	r0, [r3, #0]
 8009ef2:	f641 33a8 	movw	r3, #7080	; 0x1ba8
 8009ef6:	443b      	add	r3, r7
 8009ef8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009efc:	e9c1 3400 	strd	r3, r4, [r1]
 8009f00:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	3370      	adds	r3, #112	; 0x70
 8009f08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009f0c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	3318      	adds	r3, #24
 8009f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f18:	ea80 0402 	eor.w	r4, r0, r2
 8009f1c:	f507 55dd 	add.w	r5, r7, #7072	; 0x1ba0
 8009f20:	602c      	str	r4, [r5, #0]
 8009f22:	404b      	eors	r3, r1
 8009f24:	f641 32a4 	movw	r2, #7076	; 0x1ba4
 8009f28:	443a      	add	r2, r7
 8009f2a:	6013      	str	r3, [r2, #0]
 8009f2c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8009f36:	2210      	movs	r2, #16
 8009f38:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8009f3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009f40:	f7fe fafe 	bl	8008540 <rotr64>
 8009f44:	4602      	mov	r2, r0
 8009f46:	460b      	mov	r3, r1
 8009f48:	e9c4 2300 	strd	r2, r3, [r4]
 8009f4c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	3348      	adds	r3, #72	; 0x48
 8009f54:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009f58:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	3370      	adds	r3, #112	; 0x70
 8009f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f64:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8009f68:	6809      	ldr	r1, [r1, #0]
 8009f6a:	3148      	adds	r1, #72	; 0x48
 8009f6c:	18a0      	adds	r0, r4, r2
 8009f6e:	f641 3c98 	movw	ip, #7064	; 0x1b98
 8009f72:	44bc      	add	ip, r7
 8009f74:	f8cc 0000 	str.w	r0, [ip]
 8009f78:	eb45 0303 	adc.w	r3, r5, r3
 8009f7c:	f641 329c 	movw	r2, #7068	; 0x1b9c
 8009f80:	443a      	add	r2, r7
 8009f82:	6013      	str	r3, [r2, #0]
 8009f84:	f641 3398 	movw	r3, #7064	; 0x1b98
 8009f88:	443b      	add	r3, r7
 8009f8a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f8e:	e9c1 3400 	strd	r3, r4, [r1]
 8009f92:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	3320      	adds	r3, #32
 8009f9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009f9e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	3348      	adds	r3, #72	; 0x48
 8009fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009faa:	ea80 0402 	eor.w	r4, r0, r2
 8009fae:	f641 3590 	movw	r5, #7056	; 0x1b90
 8009fb2:	443d      	add	r5, r7
 8009fb4:	602c      	str	r4, [r5, #0]
 8009fb6:	404b      	eors	r3, r1
 8009fb8:	f641 3294 	movw	r2, #7060	; 0x1b94
 8009fbc:	443a      	add	r2, r7
 8009fbe:	6013      	str	r3, [r2, #0]
 8009fc0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f103 0420 	add.w	r4, r3, #32
 8009fca:	223f      	movs	r2, #63	; 0x3f
 8009fcc:	f641 3390 	movw	r3, #7056	; 0x1b90
 8009fd0:	443b      	add	r3, r7
 8009fd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009fd6:	f7fe fab3 	bl	8008540 <rotr64>
 8009fda:	4602      	mov	r2, r0
 8009fdc:	460b      	mov	r3, r1
 8009fde:	e9c4 2300 	strd	r2, r3, [r4]
  ROUND( 1 );
 8009fe2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009fec:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	3320      	adds	r3, #32
 8009ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff8:	1884      	adds	r4, r0, r2
 8009ffa:	f641 3588 	movw	r5, #7048	; 0x1b88
 8009ffe:	443d      	add	r5, r7
 800a000:	602c      	str	r4, [r5, #0]
 800a002:	eb41 0303 	adc.w	r3, r1, r3
 800a006:	f641 328c 	movw	r2, #7052	; 0x1b8c
 800a00a:	443a      	add	r2, r7
 800a00c:	6013      	str	r3, [r2, #0]
 800a00e:	230e      	movs	r3, #14
 800a010:	00da      	lsls	r2, r3, #3
 800a012:	f641 6324 	movw	r3, #7716	; 0x1e24
 800a016:	443b      	add	r3, r7
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4413      	add	r3, r2
 800a01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a020:	f641 3188 	movw	r1, #7048	; 0x1b88
 800a024:	4439      	add	r1, r7
 800a026:	e9d1 4500 	ldrd	r4, r5, [r1]
 800a02a:	4621      	mov	r1, r4
 800a02c:	1889      	adds	r1, r1, r2
 800a02e:	f507 50dc 	add.w	r0, r7, #7040	; 0x1b80
 800a032:	6001      	str	r1, [r0, #0]
 800a034:	4629      	mov	r1, r5
 800a036:	eb43 0101 	adc.w	r1, r3, r1
 800a03a:	f641 3384 	movw	r3, #7044	; 0x1b84
 800a03e:	443b      	add	r3, r7
 800a040:	6019      	str	r1, [r3, #0]
 800a042:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f507 52dc 	add.w	r2, r7, #7040	; 0x1b80
 800a04c:	e9d2 1200 	ldrd	r1, r2, [r2]
 800a050:	e9c3 1200 	strd	r1, r2, [r3]
 800a054:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	3360      	adds	r3, #96	; 0x60
 800a05c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a060:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06a:	ea80 0402 	eor.w	r4, r0, r2
 800a06e:	f641 3578 	movw	r5, #7032	; 0x1b78
 800a072:	443d      	add	r5, r7
 800a074:	602c      	str	r4, [r5, #0]
 800a076:	404b      	eors	r3, r1
 800a078:	f641 327c 	movw	r2, #7036	; 0x1b7c
 800a07c:	443a      	add	r2, r7
 800a07e:	6013      	str	r3, [r2, #0]
 800a080:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800a08a:	2220      	movs	r2, #32
 800a08c:	f641 3378 	movw	r3, #7032	; 0x1b78
 800a090:	443b      	add	r3, r7
 800a092:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a096:	f7fe fa53 	bl	8008540 <rotr64>
 800a09a:	4602      	mov	r2, r0
 800a09c:	460b      	mov	r3, r1
 800a09e:	e9c4 2300 	strd	r2, r3, [r4]
 800a0a2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	3340      	adds	r3, #64	; 0x40
 800a0aa:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a0ae:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	3360      	adds	r3, #96	; 0x60
 800a0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ba:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800a0be:	6809      	ldr	r1, [r1, #0]
 800a0c0:	3140      	adds	r1, #64	; 0x40
 800a0c2:	18a0      	adds	r0, r4, r2
 800a0c4:	f641 3c70 	movw	ip, #7024	; 0x1b70
 800a0c8:	44bc      	add	ip, r7
 800a0ca:	f8cc 0000 	str.w	r0, [ip]
 800a0ce:	eb45 0303 	adc.w	r3, r5, r3
 800a0d2:	f641 3274 	movw	r2, #7028	; 0x1b74
 800a0d6:	443a      	add	r2, r7
 800a0d8:	6013      	str	r3, [r2, #0]
 800a0da:	f641 3370 	movw	r3, #7024	; 0x1b70
 800a0de:	443b      	add	r3, r7
 800a0e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a0e4:	e9c1 3400 	strd	r3, r4, [r1]
 800a0e8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	3320      	adds	r3, #32
 800a0f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a0f4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	3340      	adds	r3, #64	; 0x40
 800a0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a100:	ea80 0402 	eor.w	r4, r0, r2
 800a104:	f641 3568 	movw	r5, #7016	; 0x1b68
 800a108:	443d      	add	r5, r7
 800a10a:	602c      	str	r4, [r5, #0]
 800a10c:	404b      	eors	r3, r1
 800a10e:	f641 326c 	movw	r2, #7020	; 0x1b6c
 800a112:	443a      	add	r2, r7
 800a114:	6013      	str	r3, [r2, #0]
 800a116:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f103 0420 	add.w	r4, r3, #32
 800a120:	2218      	movs	r2, #24
 800a122:	f641 3368 	movw	r3, #7016	; 0x1b68
 800a126:	443b      	add	r3, r7
 800a128:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a12c:	f7fe fa08 	bl	8008540 <rotr64>
 800a130:	4602      	mov	r2, r0
 800a132:	460b      	mov	r3, r1
 800a134:	e9c4 2300 	strd	r2, r3, [r4]
 800a138:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a142:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	3320      	adds	r3, #32
 800a14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14e:	1884      	adds	r4, r0, r2
 800a150:	f507 55db 	add.w	r5, r7, #7008	; 0x1b60
 800a154:	602c      	str	r4, [r5, #0]
 800a156:	eb41 0303 	adc.w	r3, r1, r3
 800a15a:	f641 3264 	movw	r2, #7012	; 0x1b64
 800a15e:	443a      	add	r2, r7
 800a160:	6013      	str	r3, [r2, #0]
 800a162:	230a      	movs	r3, #10
 800a164:	00da      	lsls	r2, r3, #3
 800a166:	f641 6324 	movw	r3, #7716	; 0x1e24
 800a16a:	443b      	add	r3, r7
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4413      	add	r3, r2
 800a170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a174:	f507 51db 	add.w	r1, r7, #7008	; 0x1b60
 800a178:	e9d1 4500 	ldrd	r4, r5, [r1]
 800a17c:	4621      	mov	r1, r4
 800a17e:	1889      	adds	r1, r1, r2
 800a180:	f641 3058 	movw	r0, #7000	; 0x1b58
 800a184:	4438      	add	r0, r7
 800a186:	6001      	str	r1, [r0, #0]
 800a188:	4629      	mov	r1, r5
 800a18a:	eb43 0101 	adc.w	r1, r3, r1
 800a18e:	f641 335c 	movw	r3, #7004	; 0x1b5c
 800a192:	443b      	add	r3, r7
 800a194:	6019      	str	r1, [r3, #0]
 800a196:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f641 3258 	movw	r2, #7000	; 0x1b58
 800a1a0:	443a      	add	r2, r7
 800a1a2:	e9d2 1200 	ldrd	r1, r2, [r2]
 800a1a6:	e9c3 1200 	strd	r1, r2, [r3]
 800a1aa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	3360      	adds	r3, #96	; 0x60
 800a1b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a1b6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c0:	ea80 0402 	eor.w	r4, r0, r2
 800a1c4:	f641 3550 	movw	r5, #6992	; 0x1b50
 800a1c8:	443d      	add	r5, r7
 800a1ca:	602c      	str	r4, [r5, #0]
 800a1cc:	404b      	eors	r3, r1
 800a1ce:	f641 3254 	movw	r2, #6996	; 0x1b54
 800a1d2:	443a      	add	r2, r7
 800a1d4:	6013      	str	r3, [r2, #0]
 800a1d6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800a1e0:	2210      	movs	r2, #16
 800a1e2:	f641 3350 	movw	r3, #6992	; 0x1b50
 800a1e6:	443b      	add	r3, r7
 800a1e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a1ec:	f7fe f9a8 	bl	8008540 <rotr64>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	460b      	mov	r3, r1
 800a1f4:	e9c4 2300 	strd	r2, r3, [r4]
 800a1f8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	3340      	adds	r3, #64	; 0x40
 800a200:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a204:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	3360      	adds	r3, #96	; 0x60
 800a20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a210:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800a214:	6809      	ldr	r1, [r1, #0]
 800a216:	3140      	adds	r1, #64	; 0x40
 800a218:	18a0      	adds	r0, r4, r2
 800a21a:	f641 3c48 	movw	ip, #6984	; 0x1b48
 800a21e:	44bc      	add	ip, r7
 800a220:	f8cc 0000 	str.w	r0, [ip]
 800a224:	eb45 0303 	adc.w	r3, r5, r3
 800a228:	f641 324c 	movw	r2, #6988	; 0x1b4c
 800a22c:	443a      	add	r2, r7
 800a22e:	6013      	str	r3, [r2, #0]
 800a230:	f641 3348 	movw	r3, #6984	; 0x1b48
 800a234:	443b      	add	r3, r7
 800a236:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a23a:	e9c1 3400 	strd	r3, r4, [r1]
 800a23e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	3320      	adds	r3, #32
 800a246:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a24a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	3340      	adds	r3, #64	; 0x40
 800a252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a256:	ea80 0402 	eor.w	r4, r0, r2
 800a25a:	f507 55da 	add.w	r5, r7, #6976	; 0x1b40
 800a25e:	602c      	str	r4, [r5, #0]
 800a260:	404b      	eors	r3, r1
 800a262:	f641 3244 	movw	r2, #6980	; 0x1b44
 800a266:	443a      	add	r2, r7
 800a268:	6013      	str	r3, [r2, #0]
 800a26a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f103 0420 	add.w	r4, r3, #32
 800a274:	223f      	movs	r2, #63	; 0x3f
 800a276:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 800a27a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a27e:	f7fe f95f 	bl	8008540 <rotr64>
 800a282:	4602      	mov	r2, r0
 800a284:	460b      	mov	r3, r1
 800a286:	e9c4 2300 	strd	r2, r3, [r4]
 800a28a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	3308      	adds	r3, #8
 800a292:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a296:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	3328      	adds	r3, #40	; 0x28
 800a29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a2:	1884      	adds	r4, r0, r2
 800a2a4:	f641 3538 	movw	r5, #6968	; 0x1b38
 800a2a8:	443d      	add	r5, r7
 800a2aa:	602c      	str	r4, [r5, #0]
 800a2ac:	eb41 0303 	adc.w	r3, r1, r3
 800a2b0:	f641 323c 	movw	r2, #6972	; 0x1b3c
 800a2b4:	443a      	add	r2, r7
 800a2b6:	6013      	str	r3, [r2, #0]
 800a2b8:	2304      	movs	r3, #4
 800a2ba:	00da      	lsls	r2, r3, #3
 800a2bc:	f641 6324 	movw	r3, #7716	; 0x1e24
 800a2c0:	443b      	add	r3, r7
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4413      	add	r3, r2
 800a2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ca:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800a2ce:	6809      	ldr	r1, [r1, #0]
 800a2d0:	3108      	adds	r1, #8
 800a2d2:	f641 3038 	movw	r0, #6968	; 0x1b38
 800a2d6:	4438      	add	r0, r7
 800a2d8:	e9d0 4500 	ldrd	r4, r5, [r0]
 800a2dc:	4620      	mov	r0, r4
 800a2de:	1880      	adds	r0, r0, r2
 800a2e0:	f641 3c30 	movw	ip, #6960	; 0x1b30
 800a2e4:	44bc      	add	ip, r7
 800a2e6:	f8cc 0000 	str.w	r0, [ip]
 800a2ea:	4628      	mov	r0, r5
 800a2ec:	eb43 0000 	adc.w	r0, r3, r0
 800a2f0:	f641 3334 	movw	r3, #6964	; 0x1b34
 800a2f4:	443b      	add	r3, r7
 800a2f6:	6018      	str	r0, [r3, #0]
 800a2f8:	f641 3330 	movw	r3, #6960	; 0x1b30
 800a2fc:	443b      	add	r3, r7
 800a2fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a302:	e9c1 3400 	strd	r3, r4, [r1]
 800a306:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	3368      	adds	r3, #104	; 0x68
 800a30e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a312:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	3308      	adds	r3, #8
 800a31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31e:	ea80 0402 	eor.w	r4, r0, r2
 800a322:	f641 3528 	movw	r5, #6952	; 0x1b28
 800a326:	443d      	add	r5, r7
 800a328:	602c      	str	r4, [r5, #0]
 800a32a:	404b      	eors	r3, r1
 800a32c:	f641 322c 	movw	r2, #6956	; 0x1b2c
 800a330:	443a      	add	r2, r7
 800a332:	6013      	str	r3, [r2, #0]
 800a334:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800a33e:	2220      	movs	r2, #32
 800a340:	f641 3328 	movw	r3, #6952	; 0x1b28
 800a344:	443b      	add	r3, r7
 800a346:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a34a:	f7fe f8f9 	bl	8008540 <rotr64>
 800a34e:	4602      	mov	r2, r0
 800a350:	460b      	mov	r3, r1
 800a352:	e9c4 2300 	strd	r2, r3, [r4]
 800a356:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	3348      	adds	r3, #72	; 0x48
 800a35e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a362:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	3368      	adds	r3, #104	; 0x68
 800a36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800a372:	6809      	ldr	r1, [r1, #0]
 800a374:	3148      	adds	r1, #72	; 0x48
 800a376:	18a0      	adds	r0, r4, r2
 800a378:	f507 5cd9 	add.w	ip, r7, #6944	; 0x1b20
 800a37c:	f8cc 0000 	str.w	r0, [ip]
 800a380:	eb45 0303 	adc.w	r3, r5, r3
 800a384:	f641 3224 	movw	r2, #6948	; 0x1b24
 800a388:	443a      	add	r2, r7
 800a38a:	6013      	str	r3, [r2, #0]
 800a38c:	f507 53d9 	add.w	r3, r7, #6944	; 0x1b20
 800a390:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a394:	e9c1 3400 	strd	r3, r4, [r1]
 800a398:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	3328      	adds	r3, #40	; 0x28
 800a3a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a3a4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	3348      	adds	r3, #72	; 0x48
 800a3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b0:	ea80 0402 	eor.w	r4, r0, r2
 800a3b4:	f641 3518 	movw	r5, #6936	; 0x1b18
 800a3b8:	443d      	add	r5, r7
 800a3ba:	602c      	str	r4, [r5, #0]
 800a3bc:	404b      	eors	r3, r1
 800a3be:	f641 321c 	movw	r2, #6940	; 0x1b1c
 800a3c2:	443a      	add	r2, r7
 800a3c4:	6013      	str	r3, [r2, #0]
 800a3c6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800a3d0:	2218      	movs	r2, #24
 800a3d2:	f641 3318 	movw	r3, #6936	; 0x1b18
 800a3d6:	443b      	add	r3, r7
 800a3d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a3dc:	f7fe f8b0 	bl	8008540 <rotr64>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	e9c4 2300 	strd	r2, r3, [r4]
 800a3e8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	3308      	adds	r3, #8
 800a3f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a3f4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	3328      	adds	r3, #40	; 0x28
 800a3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a400:	1884      	adds	r4, r0, r2
 800a402:	f641 3510 	movw	r5, #6928	; 0x1b10
 800a406:	443d      	add	r5, r7
 800a408:	602c      	str	r4, [r5, #0]
 800a40a:	eb41 0303 	adc.w	r3, r1, r3
 800a40e:	f641 3214 	movw	r2, #6932	; 0x1b14
 800a412:	443a      	add	r2, r7
 800a414:	6013      	str	r3, [r2, #0]
 800a416:	2308      	movs	r3, #8
 800a418:	00da      	lsls	r2, r3, #3
 800a41a:	f641 6324 	movw	r3, #7716	; 0x1e24
 800a41e:	443b      	add	r3, r7
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4413      	add	r3, r2
 800a424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a428:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800a42c:	6809      	ldr	r1, [r1, #0]
 800a42e:	3108      	adds	r1, #8
 800a430:	f641 3010 	movw	r0, #6928	; 0x1b10
 800a434:	4438      	add	r0, r7
 800a436:	e9d0 4500 	ldrd	r4, r5, [r0]
 800a43a:	4620      	mov	r0, r4
 800a43c:	1880      	adds	r0, r0, r2
 800a43e:	f641 3c08 	movw	ip, #6920	; 0x1b08
 800a442:	44bc      	add	ip, r7
 800a444:	f8cc 0000 	str.w	r0, [ip]
 800a448:	4628      	mov	r0, r5
 800a44a:	eb43 0000 	adc.w	r0, r3, r0
 800a44e:	f641 330c 	movw	r3, #6924	; 0x1b0c
 800a452:	443b      	add	r3, r7
 800a454:	6018      	str	r0, [r3, #0]
 800a456:	f641 3308 	movw	r3, #6920	; 0x1b08
 800a45a:	443b      	add	r3, r7
 800a45c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a460:	e9c1 3400 	strd	r3, r4, [r1]
 800a464:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	3368      	adds	r3, #104	; 0x68
 800a46c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a470:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	3308      	adds	r3, #8
 800a478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47c:	ea80 0402 	eor.w	r4, r0, r2
 800a480:	f507 55d8 	add.w	r5, r7, #6912	; 0x1b00
 800a484:	602c      	str	r4, [r5, #0]
 800a486:	404b      	eors	r3, r1
 800a488:	f641 3204 	movw	r2, #6916	; 0x1b04
 800a48c:	443a      	add	r2, r7
 800a48e:	6013      	str	r3, [r2, #0]
 800a490:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800a49a:	2210      	movs	r2, #16
 800a49c:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 800a4a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a4a4:	f7fe f84c 	bl	8008540 <rotr64>
 800a4a8:	4602      	mov	r2, r0
 800a4aa:	460b      	mov	r3, r1
 800a4ac:	e9c4 2300 	strd	r2, r3, [r4]
 800a4b0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	3348      	adds	r3, #72	; 0x48
 800a4b8:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a4bc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	3368      	adds	r3, #104	; 0x68
 800a4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c8:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800a4cc:	6809      	ldr	r1, [r1, #0]
 800a4ce:	3148      	adds	r1, #72	; 0x48
 800a4d0:	18a0      	adds	r0, r4, r2
 800a4d2:	f641 2cf8 	movw	ip, #6904	; 0x1af8
 800a4d6:	44bc      	add	ip, r7
 800a4d8:	f8cc 0000 	str.w	r0, [ip]
 800a4dc:	eb45 0303 	adc.w	r3, r5, r3
 800a4e0:	f641 22fc 	movw	r2, #6908	; 0x1afc
 800a4e4:	443a      	add	r2, r7
 800a4e6:	6013      	str	r3, [r2, #0]
 800a4e8:	f641 23f8 	movw	r3, #6904	; 0x1af8
 800a4ec:	443b      	add	r3, r7
 800a4ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a4f2:	e9c1 3400 	strd	r3, r4, [r1]
 800a4f6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	3328      	adds	r3, #40	; 0x28
 800a4fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a502:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	3348      	adds	r3, #72	; 0x48
 800a50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50e:	ea80 0402 	eor.w	r4, r0, r2
 800a512:	f641 25f0 	movw	r5, #6896	; 0x1af0
 800a516:	443d      	add	r5, r7
 800a518:	602c      	str	r4, [r5, #0]
 800a51a:	404b      	eors	r3, r1
 800a51c:	f641 22f4 	movw	r2, #6900	; 0x1af4
 800a520:	443a      	add	r2, r7
 800a522:	6013      	str	r3, [r2, #0]
 800a524:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800a52e:	223f      	movs	r2, #63	; 0x3f
 800a530:	f641 23f0 	movw	r3, #6896	; 0x1af0
 800a534:	443b      	add	r3, r7
 800a536:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a53a:	f7fe f801 	bl	8008540 <rotr64>
 800a53e:	4602      	mov	r2, r0
 800a540:	460b      	mov	r3, r1
 800a542:	e9c4 2300 	strd	r2, r3, [r4]
 800a546:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	3310      	adds	r3, #16
 800a54e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a552:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	3330      	adds	r3, #48	; 0x30
 800a55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55e:	1884      	adds	r4, r0, r2
 800a560:	f641 25e8 	movw	r5, #6888	; 0x1ae8
 800a564:	443d      	add	r5, r7
 800a566:	602c      	str	r4, [r5, #0]
 800a568:	eb41 0303 	adc.w	r3, r1, r3
 800a56c:	f641 22ec 	movw	r2, #6892	; 0x1aec
 800a570:	443a      	add	r2, r7
 800a572:	6013      	str	r3, [r2, #0]
 800a574:	2309      	movs	r3, #9
 800a576:	00da      	lsls	r2, r3, #3
 800a578:	f641 6324 	movw	r3, #7716	; 0x1e24
 800a57c:	443b      	add	r3, r7
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4413      	add	r3, r2
 800a582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a586:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800a58a:	6809      	ldr	r1, [r1, #0]
 800a58c:	3110      	adds	r1, #16
 800a58e:	f641 20e8 	movw	r0, #6888	; 0x1ae8
 800a592:	4438      	add	r0, r7
 800a594:	e9d0 4500 	ldrd	r4, r5, [r0]
 800a598:	4620      	mov	r0, r4
 800a59a:	1880      	adds	r0, r0, r2
 800a59c:	f507 5cd7 	add.w	ip, r7, #6880	; 0x1ae0
 800a5a0:	f8cc 0000 	str.w	r0, [ip]
 800a5a4:	4628      	mov	r0, r5
 800a5a6:	eb43 0000 	adc.w	r0, r3, r0
 800a5aa:	f641 23e4 	movw	r3, #6884	; 0x1ae4
 800a5ae:	443b      	add	r3, r7
 800a5b0:	6018      	str	r0, [r3, #0]
 800a5b2:	f507 53d7 	add.w	r3, r7, #6880	; 0x1ae0
 800a5b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a5ba:	e9c1 3400 	strd	r3, r4, [r1]
 800a5be:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	3370      	adds	r3, #112	; 0x70
 800a5c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a5ca:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	3310      	adds	r3, #16
 800a5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d6:	ea80 0402 	eor.w	r4, r0, r2
 800a5da:	f641 25d8 	movw	r5, #6872	; 0x1ad8
 800a5de:	443d      	add	r5, r7
 800a5e0:	602c      	str	r4, [r5, #0]
 800a5e2:	404b      	eors	r3, r1
 800a5e4:	f641 22dc 	movw	r2, #6876	; 0x1adc
 800a5e8:	443a      	add	r2, r7
 800a5ea:	6013      	str	r3, [r2, #0]
 800a5ec:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800a5f6:	2220      	movs	r2, #32
 800a5f8:	f641 23d8 	movw	r3, #6872	; 0x1ad8
 800a5fc:	443b      	add	r3, r7
 800a5fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a602:	f7fd ff9d 	bl	8008540 <rotr64>
 800a606:	4602      	mov	r2, r0
 800a608:	460b      	mov	r3, r1
 800a60a:	e9c4 2300 	strd	r2, r3, [r4]
 800a60e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	3350      	adds	r3, #80	; 0x50
 800a616:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a61a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	3370      	adds	r3, #112	; 0x70
 800a622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a626:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800a62a:	6809      	ldr	r1, [r1, #0]
 800a62c:	3150      	adds	r1, #80	; 0x50
 800a62e:	18a0      	adds	r0, r4, r2
 800a630:	f641 2cd0 	movw	ip, #6864	; 0x1ad0
 800a634:	44bc      	add	ip, r7
 800a636:	f8cc 0000 	str.w	r0, [ip]
 800a63a:	eb45 0303 	adc.w	r3, r5, r3
 800a63e:	f641 22d4 	movw	r2, #6868	; 0x1ad4
 800a642:	443a      	add	r2, r7
 800a644:	6013      	str	r3, [r2, #0]
 800a646:	f641 23d0 	movw	r3, #6864	; 0x1ad0
 800a64a:	443b      	add	r3, r7
 800a64c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a650:	e9c1 3400 	strd	r3, r4, [r1]
 800a654:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	3330      	adds	r3, #48	; 0x30
 800a65c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a660:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	3350      	adds	r3, #80	; 0x50
 800a668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66c:	ea80 0402 	eor.w	r4, r0, r2
 800a670:	f641 25c8 	movw	r5, #6856	; 0x1ac8
 800a674:	443d      	add	r5, r7
 800a676:	602c      	str	r4, [r5, #0]
 800a678:	404b      	eors	r3, r1
 800a67a:	f641 22cc 	movw	r2, #6860	; 0x1acc
 800a67e:	443a      	add	r2, r7
 800a680:	6013      	str	r3, [r2, #0]
 800a682:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800a68c:	2218      	movs	r2, #24
 800a68e:	f641 23c8 	movw	r3, #6856	; 0x1ac8
 800a692:	443b      	add	r3, r7
 800a694:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a698:	f7fd ff52 	bl	8008540 <rotr64>
 800a69c:	4602      	mov	r2, r0
 800a69e:	460b      	mov	r3, r1
 800a6a0:	e9c4 2300 	strd	r2, r3, [r4]
 800a6a4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	3310      	adds	r3, #16
 800a6ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a6b0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	3330      	adds	r3, #48	; 0x30
 800a6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6bc:	1884      	adds	r4, r0, r2
 800a6be:	f507 55d6 	add.w	r5, r7, #6848	; 0x1ac0
 800a6c2:	602c      	str	r4, [r5, #0]
 800a6c4:	eb41 0303 	adc.w	r3, r1, r3
 800a6c8:	f641 22c4 	movw	r2, #6852	; 0x1ac4
 800a6cc:	443a      	add	r2, r7
 800a6ce:	6013      	str	r3, [r2, #0]
 800a6d0:	230f      	movs	r3, #15
 800a6d2:	00da      	lsls	r2, r3, #3
 800a6d4:	f641 6324 	movw	r3, #7716	; 0x1e24
 800a6d8:	443b      	add	r3, r7
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4413      	add	r3, r2
 800a6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e2:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800a6e6:	6809      	ldr	r1, [r1, #0]
 800a6e8:	3110      	adds	r1, #16
 800a6ea:	f507 50d6 	add.w	r0, r7, #6848	; 0x1ac0
 800a6ee:	e9d0 4500 	ldrd	r4, r5, [r0]
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	1880      	adds	r0, r0, r2
 800a6f6:	f641 2cb8 	movw	ip, #6840	; 0x1ab8
 800a6fa:	44bc      	add	ip, r7
 800a6fc:	f8cc 0000 	str.w	r0, [ip]
 800a700:	4628      	mov	r0, r5
 800a702:	eb43 0000 	adc.w	r0, r3, r0
 800a706:	f641 23bc 	movw	r3, #6844	; 0x1abc
 800a70a:	443b      	add	r3, r7
 800a70c:	6018      	str	r0, [r3, #0]
 800a70e:	f641 23b8 	movw	r3, #6840	; 0x1ab8
 800a712:	443b      	add	r3, r7
 800a714:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a718:	e9c1 3400 	strd	r3, r4, [r1]
 800a71c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	3370      	adds	r3, #112	; 0x70
 800a724:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a728:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	3310      	adds	r3, #16
 800a730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a734:	ea80 0402 	eor.w	r4, r0, r2
 800a738:	f641 25b0 	movw	r5, #6832	; 0x1ab0
 800a73c:	443d      	add	r5, r7
 800a73e:	602c      	str	r4, [r5, #0]
 800a740:	404b      	eors	r3, r1
 800a742:	f641 22b4 	movw	r2, #6836	; 0x1ab4
 800a746:	443a      	add	r2, r7
 800a748:	6013      	str	r3, [r2, #0]
 800a74a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800a754:	2210      	movs	r2, #16
 800a756:	f641 23b0 	movw	r3, #6832	; 0x1ab0
 800a75a:	443b      	add	r3, r7
 800a75c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a760:	f7fd feee 	bl	8008540 <rotr64>
 800a764:	4602      	mov	r2, r0
 800a766:	460b      	mov	r3, r1
 800a768:	e9c4 2300 	strd	r2, r3, [r4]
 800a76c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	3350      	adds	r3, #80	; 0x50
 800a774:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a778:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	3370      	adds	r3, #112	; 0x70
 800a780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a784:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800a788:	6809      	ldr	r1, [r1, #0]
 800a78a:	3150      	adds	r1, #80	; 0x50
 800a78c:	18a0      	adds	r0, r4, r2
 800a78e:	f641 2ca8 	movw	ip, #6824	; 0x1aa8
 800a792:	44bc      	add	ip, r7
 800a794:	f8cc 0000 	str.w	r0, [ip]
 800a798:	eb45 0303 	adc.w	r3, r5, r3
 800a79c:	f641 22ac 	movw	r2, #6828	; 0x1aac
 800a7a0:	443a      	add	r2, r7
 800a7a2:	6013      	str	r3, [r2, #0]
 800a7a4:	f641 23a8 	movw	r3, #6824	; 0x1aa8
 800a7a8:	443b      	add	r3, r7
 800a7aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a7ae:	e9c1 3400 	strd	r3, r4, [r1]
 800a7b2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	3330      	adds	r3, #48	; 0x30
 800a7ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a7be:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	3350      	adds	r3, #80	; 0x50
 800a7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ca:	ea80 0402 	eor.w	r4, r0, r2
 800a7ce:	f507 55d5 	add.w	r5, r7, #6816	; 0x1aa0
 800a7d2:	602c      	str	r4, [r5, #0]
 800a7d4:	404b      	eors	r3, r1
 800a7d6:	f641 22a4 	movw	r2, #6820	; 0x1aa4
 800a7da:	443a      	add	r2, r7
 800a7dc:	6013      	str	r3, [r2, #0]
 800a7de:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800a7e8:	223f      	movs	r2, #63	; 0x3f
 800a7ea:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 800a7ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a7f2:	f7fd fea5 	bl	8008540 <rotr64>
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	e9c4 2300 	strd	r2, r3, [r4]
 800a7fe:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	3318      	adds	r3, #24
 800a806:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a80a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	3338      	adds	r3, #56	; 0x38
 800a812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a816:	1884      	adds	r4, r0, r2
 800a818:	f641 2598 	movw	r5, #6808	; 0x1a98
 800a81c:	443d      	add	r5, r7
 800a81e:	602c      	str	r4, [r5, #0]
 800a820:	eb41 0303 	adc.w	r3, r1, r3
 800a824:	f641 229c 	movw	r2, #6812	; 0x1a9c
 800a828:	443a      	add	r2, r7
 800a82a:	6013      	str	r3, [r2, #0]
 800a82c:	230d      	movs	r3, #13
 800a82e:	00da      	lsls	r2, r3, #3
 800a830:	f641 6324 	movw	r3, #7716	; 0x1e24
 800a834:	443b      	add	r3, r7
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4413      	add	r3, r2
 800a83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800a842:	6809      	ldr	r1, [r1, #0]
 800a844:	3118      	adds	r1, #24
 800a846:	f641 2098 	movw	r0, #6808	; 0x1a98
 800a84a:	4438      	add	r0, r7
 800a84c:	e9d0 4500 	ldrd	r4, r5, [r0]
 800a850:	4620      	mov	r0, r4
 800a852:	1880      	adds	r0, r0, r2
 800a854:	f641 2c90 	movw	ip, #6800	; 0x1a90
 800a858:	44bc      	add	ip, r7
 800a85a:	f8cc 0000 	str.w	r0, [ip]
 800a85e:	4628      	mov	r0, r5
 800a860:	eb43 0000 	adc.w	r0, r3, r0
 800a864:	f641 2394 	movw	r3, #6804	; 0x1a94
 800a868:	443b      	add	r3, r7
 800a86a:	6018      	str	r0, [r3, #0]
 800a86c:	f641 2390 	movw	r3, #6800	; 0x1a90
 800a870:	443b      	add	r3, r7
 800a872:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a876:	e9c1 3400 	strd	r3, r4, [r1]
 800a87a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	3378      	adds	r3, #120	; 0x78
 800a882:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a886:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	3318      	adds	r3, #24
 800a88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a892:	ea80 0402 	eor.w	r4, r0, r2
 800a896:	f641 2588 	movw	r5, #6792	; 0x1a88
 800a89a:	443d      	add	r5, r7
 800a89c:	602c      	str	r4, [r5, #0]
 800a89e:	404b      	eors	r3, r1
 800a8a0:	f641 228c 	movw	r2, #6796	; 0x1a8c
 800a8a4:	443a      	add	r2, r7
 800a8a6:	6013      	str	r3, [r2, #0]
 800a8a8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800a8b2:	2220      	movs	r2, #32
 800a8b4:	f641 2388 	movw	r3, #6792	; 0x1a88
 800a8b8:	443b      	add	r3, r7
 800a8ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a8be:	f7fd fe3f 	bl	8008540 <rotr64>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	e9c4 2300 	strd	r2, r3, [r4]
 800a8ca:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	3358      	adds	r3, #88	; 0x58
 800a8d2:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a8d6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	3378      	adds	r3, #120	; 0x78
 800a8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e2:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800a8e6:	6809      	ldr	r1, [r1, #0]
 800a8e8:	3158      	adds	r1, #88	; 0x58
 800a8ea:	18a0      	adds	r0, r4, r2
 800a8ec:	f507 5cd4 	add.w	ip, r7, #6784	; 0x1a80
 800a8f0:	f8cc 0000 	str.w	r0, [ip]
 800a8f4:	eb45 0303 	adc.w	r3, r5, r3
 800a8f8:	f641 2284 	movw	r2, #6788	; 0x1a84
 800a8fc:	443a      	add	r2, r7
 800a8fe:	6013      	str	r3, [r2, #0]
 800a900:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 800a904:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a908:	e9c1 3400 	strd	r3, r4, [r1]
 800a90c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	3338      	adds	r3, #56	; 0x38
 800a914:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a918:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	3358      	adds	r3, #88	; 0x58
 800a920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a924:	ea80 0402 	eor.w	r4, r0, r2
 800a928:	f641 2578 	movw	r5, #6776	; 0x1a78
 800a92c:	443d      	add	r5, r7
 800a92e:	602c      	str	r4, [r5, #0]
 800a930:	404b      	eors	r3, r1
 800a932:	f641 227c 	movw	r2, #6780	; 0x1a7c
 800a936:	443a      	add	r2, r7
 800a938:	6013      	str	r3, [r2, #0]
 800a93a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800a944:	2218      	movs	r2, #24
 800a946:	f641 2378 	movw	r3, #6776	; 0x1a78
 800a94a:	443b      	add	r3, r7
 800a94c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a950:	f7fd fdf6 	bl	8008540 <rotr64>
 800a954:	4602      	mov	r2, r0
 800a956:	460b      	mov	r3, r1
 800a958:	e9c4 2300 	strd	r2, r3, [r4]
 800a95c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	3318      	adds	r3, #24
 800a964:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a968:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	3338      	adds	r3, #56	; 0x38
 800a970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a974:	1884      	adds	r4, r0, r2
 800a976:	f641 2570 	movw	r5, #6768	; 0x1a70
 800a97a:	443d      	add	r5, r7
 800a97c:	602c      	str	r4, [r5, #0]
 800a97e:	eb41 0303 	adc.w	r3, r1, r3
 800a982:	f641 2274 	movw	r2, #6772	; 0x1a74
 800a986:	443a      	add	r2, r7
 800a988:	6013      	str	r3, [r2, #0]
 800a98a:	2306      	movs	r3, #6
 800a98c:	00da      	lsls	r2, r3, #3
 800a98e:	f641 6324 	movw	r3, #7716	; 0x1e24
 800a992:	443b      	add	r3, r7
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	4413      	add	r3, r2
 800a998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99c:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800a9a0:	6809      	ldr	r1, [r1, #0]
 800a9a2:	3118      	adds	r1, #24
 800a9a4:	f641 2070 	movw	r0, #6768	; 0x1a70
 800a9a8:	4438      	add	r0, r7
 800a9aa:	e9d0 4500 	ldrd	r4, r5, [r0]
 800a9ae:	4620      	mov	r0, r4
 800a9b0:	1880      	adds	r0, r0, r2
 800a9b2:	f641 2c68 	movw	ip, #6760	; 0x1a68
 800a9b6:	44bc      	add	ip, r7
 800a9b8:	f8cc 0000 	str.w	r0, [ip]
 800a9bc:	4628      	mov	r0, r5
 800a9be:	eb43 0000 	adc.w	r0, r3, r0
 800a9c2:	f641 236c 	movw	r3, #6764	; 0x1a6c
 800a9c6:	443b      	add	r3, r7
 800a9c8:	6018      	str	r0, [r3, #0]
 800a9ca:	f641 2368 	movw	r3, #6760	; 0x1a68
 800a9ce:	443b      	add	r3, r7
 800a9d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a9d4:	e9c1 3400 	strd	r3, r4, [r1]
 800a9d8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	3378      	adds	r3, #120	; 0x78
 800a9e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a9e4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	3318      	adds	r3, #24
 800a9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f0:	ea80 0402 	eor.w	r4, r0, r2
 800a9f4:	f507 55d3 	add.w	r5, r7, #6752	; 0x1a60
 800a9f8:	602c      	str	r4, [r5, #0]
 800a9fa:	404b      	eors	r3, r1
 800a9fc:	f641 2264 	movw	r2, #6756	; 0x1a64
 800aa00:	443a      	add	r2, r7
 800aa02:	6013      	str	r3, [r2, #0]
 800aa04:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800aa0e:	2210      	movs	r2, #16
 800aa10:	f507 53d3 	add.w	r3, r7, #6752	; 0x1a60
 800aa14:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aa18:	f7fd fd92 	bl	8008540 <rotr64>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	460b      	mov	r3, r1
 800aa20:	e9c4 2300 	strd	r2, r3, [r4]
 800aa24:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	3358      	adds	r3, #88	; 0x58
 800aa2c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800aa30:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	3378      	adds	r3, #120	; 0x78
 800aa38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa3c:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800aa40:	6809      	ldr	r1, [r1, #0]
 800aa42:	3158      	adds	r1, #88	; 0x58
 800aa44:	18a0      	adds	r0, r4, r2
 800aa46:	f641 2c58 	movw	ip, #6744	; 0x1a58
 800aa4a:	44bc      	add	ip, r7
 800aa4c:	f8cc 0000 	str.w	r0, [ip]
 800aa50:	eb45 0303 	adc.w	r3, r5, r3
 800aa54:	f641 225c 	movw	r2, #6748	; 0x1a5c
 800aa58:	443a      	add	r2, r7
 800aa5a:	6013      	str	r3, [r2, #0]
 800aa5c:	f641 2358 	movw	r3, #6744	; 0x1a58
 800aa60:	443b      	add	r3, r7
 800aa62:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa66:	e9c1 3400 	strd	r3, r4, [r1]
 800aa6a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	3338      	adds	r3, #56	; 0x38
 800aa72:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aa76:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	3358      	adds	r3, #88	; 0x58
 800aa7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa82:	ea80 0402 	eor.w	r4, r0, r2
 800aa86:	f641 2550 	movw	r5, #6736	; 0x1a50
 800aa8a:	443d      	add	r5, r7
 800aa8c:	602c      	str	r4, [r5, #0]
 800aa8e:	404b      	eors	r3, r1
 800aa90:	f641 2254 	movw	r2, #6740	; 0x1a54
 800aa94:	443a      	add	r2, r7
 800aa96:	6013      	str	r3, [r2, #0]
 800aa98:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800aaa2:	223f      	movs	r2, #63	; 0x3f
 800aaa4:	f641 2350 	movw	r3, #6736	; 0x1a50
 800aaa8:	443b      	add	r3, r7
 800aaaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aaae:	f7fd fd47 	bl	8008540 <rotr64>
 800aab2:	4602      	mov	r2, r0
 800aab4:	460b      	mov	r3, r1
 800aab6:	e9c4 2300 	strd	r2, r3, [r4]
 800aaba:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aac4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	3328      	adds	r3, #40	; 0x28
 800aacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad0:	1884      	adds	r4, r0, r2
 800aad2:	f641 2548 	movw	r5, #6728	; 0x1a48
 800aad6:	443d      	add	r5, r7
 800aad8:	602c      	str	r4, [r5, #0]
 800aada:	eb41 0303 	adc.w	r3, r1, r3
 800aade:	f641 224c 	movw	r2, #6732	; 0x1a4c
 800aae2:	443a      	add	r2, r7
 800aae4:	6013      	str	r3, [r2, #0]
 800aae6:	2301      	movs	r3, #1
 800aae8:	00da      	lsls	r2, r3, #3
 800aaea:	f641 6324 	movw	r3, #7716	; 0x1e24
 800aaee:	443b      	add	r3, r7
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4413      	add	r3, r2
 800aaf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf8:	f641 2148 	movw	r1, #6728	; 0x1a48
 800aafc:	4439      	add	r1, r7
 800aafe:	e9d1 4500 	ldrd	r4, r5, [r1]
 800ab02:	4621      	mov	r1, r4
 800ab04:	1889      	adds	r1, r1, r2
 800ab06:	f507 50d2 	add.w	r0, r7, #6720	; 0x1a40
 800ab0a:	6001      	str	r1, [r0, #0]
 800ab0c:	4629      	mov	r1, r5
 800ab0e:	eb43 0101 	adc.w	r1, r3, r1
 800ab12:	f641 2344 	movw	r3, #6724	; 0x1a44
 800ab16:	443b      	add	r3, r7
 800ab18:	6019      	str	r1, [r3, #0]
 800ab1a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f507 52d2 	add.w	r2, r7, #6720	; 0x1a40
 800ab24:	e9d2 1200 	ldrd	r1, r2, [r2]
 800ab28:	e9c3 1200 	strd	r1, r2, [r3]
 800ab2c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	3378      	adds	r3, #120	; 0x78
 800ab34:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ab38:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab42:	ea80 0402 	eor.w	r4, r0, r2
 800ab46:	f641 2538 	movw	r5, #6712	; 0x1a38
 800ab4a:	443d      	add	r5, r7
 800ab4c:	602c      	str	r4, [r5, #0]
 800ab4e:	404b      	eors	r3, r1
 800ab50:	f641 223c 	movw	r2, #6716	; 0x1a3c
 800ab54:	443a      	add	r2, r7
 800ab56:	6013      	str	r3, [r2, #0]
 800ab58:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800ab62:	2220      	movs	r2, #32
 800ab64:	f641 2338 	movw	r3, #6712	; 0x1a38
 800ab68:	443b      	add	r3, r7
 800ab6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ab6e:	f7fd fce7 	bl	8008540 <rotr64>
 800ab72:	4602      	mov	r2, r0
 800ab74:	460b      	mov	r3, r1
 800ab76:	e9c4 2300 	strd	r2, r3, [r4]
 800ab7a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	3350      	adds	r3, #80	; 0x50
 800ab82:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ab86:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	3378      	adds	r3, #120	; 0x78
 800ab8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab92:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800ab96:	6809      	ldr	r1, [r1, #0]
 800ab98:	3150      	adds	r1, #80	; 0x50
 800ab9a:	18a0      	adds	r0, r4, r2
 800ab9c:	f641 2c30 	movw	ip, #6704	; 0x1a30
 800aba0:	44bc      	add	ip, r7
 800aba2:	f8cc 0000 	str.w	r0, [ip]
 800aba6:	eb45 0303 	adc.w	r3, r5, r3
 800abaa:	f641 2234 	movw	r2, #6708	; 0x1a34
 800abae:	443a      	add	r2, r7
 800abb0:	6013      	str	r3, [r2, #0]
 800abb2:	f641 2330 	movw	r3, #6704	; 0x1a30
 800abb6:	443b      	add	r3, r7
 800abb8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800abbc:	e9c1 3400 	strd	r3, r4, [r1]
 800abc0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	3328      	adds	r3, #40	; 0x28
 800abc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800abcc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	3350      	adds	r3, #80	; 0x50
 800abd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd8:	ea80 0402 	eor.w	r4, r0, r2
 800abdc:	f641 2528 	movw	r5, #6696	; 0x1a28
 800abe0:	443d      	add	r5, r7
 800abe2:	602c      	str	r4, [r5, #0]
 800abe4:	404b      	eors	r3, r1
 800abe6:	f641 222c 	movw	r2, #6700	; 0x1a2c
 800abea:	443a      	add	r2, r7
 800abec:	6013      	str	r3, [r2, #0]
 800abee:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800abf8:	2218      	movs	r2, #24
 800abfa:	f641 2328 	movw	r3, #6696	; 0x1a28
 800abfe:	443b      	add	r3, r7
 800ac00:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ac04:	f7fd fc9c 	bl	8008540 <rotr64>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	460b      	mov	r3, r1
 800ac0c:	e9c4 2300 	strd	r2, r3, [r4]
 800ac10:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ac1a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	3328      	adds	r3, #40	; 0x28
 800ac22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac26:	1884      	adds	r4, r0, r2
 800ac28:	f507 55d1 	add.w	r5, r7, #6688	; 0x1a20
 800ac2c:	602c      	str	r4, [r5, #0]
 800ac2e:	eb41 0303 	adc.w	r3, r1, r3
 800ac32:	f641 2224 	movw	r2, #6692	; 0x1a24
 800ac36:	443a      	add	r2, r7
 800ac38:	6013      	str	r3, [r2, #0]
 800ac3a:	230c      	movs	r3, #12
 800ac3c:	00da      	lsls	r2, r3, #3
 800ac3e:	f641 6324 	movw	r3, #7716	; 0x1e24
 800ac42:	443b      	add	r3, r7
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4413      	add	r3, r2
 800ac48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4c:	f507 51d1 	add.w	r1, r7, #6688	; 0x1a20
 800ac50:	e9d1 4500 	ldrd	r4, r5, [r1]
 800ac54:	4621      	mov	r1, r4
 800ac56:	1889      	adds	r1, r1, r2
 800ac58:	f641 2018 	movw	r0, #6680	; 0x1a18
 800ac5c:	4438      	add	r0, r7
 800ac5e:	6001      	str	r1, [r0, #0]
 800ac60:	4629      	mov	r1, r5
 800ac62:	eb43 0101 	adc.w	r1, r3, r1
 800ac66:	f641 231c 	movw	r3, #6684	; 0x1a1c
 800ac6a:	443b      	add	r3, r7
 800ac6c:	6019      	str	r1, [r3, #0]
 800ac6e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f641 2218 	movw	r2, #6680	; 0x1a18
 800ac78:	443a      	add	r2, r7
 800ac7a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800ac7e:	e9c3 1200 	strd	r1, r2, [r3]
 800ac82:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	3378      	adds	r3, #120	; 0x78
 800ac8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ac8e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac98:	ea80 0402 	eor.w	r4, r0, r2
 800ac9c:	f641 2510 	movw	r5, #6672	; 0x1a10
 800aca0:	443d      	add	r5, r7
 800aca2:	602c      	str	r4, [r5, #0]
 800aca4:	404b      	eors	r3, r1
 800aca6:	f641 2214 	movw	r2, #6676	; 0x1a14
 800acaa:	443a      	add	r2, r7
 800acac:	6013      	str	r3, [r2, #0]
 800acae:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800acb8:	2210      	movs	r2, #16
 800acba:	f641 2310 	movw	r3, #6672	; 0x1a10
 800acbe:	443b      	add	r3, r7
 800acc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800acc4:	f7fd fc3c 	bl	8008540 <rotr64>
 800acc8:	4602      	mov	r2, r0
 800acca:	460b      	mov	r3, r1
 800accc:	e9c4 2300 	strd	r2, r3, [r4]
 800acd0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	3350      	adds	r3, #80	; 0x50
 800acd8:	e9d3 4500 	ldrd	r4, r5, [r3]
 800acdc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	3378      	adds	r3, #120	; 0x78
 800ace4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace8:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800acec:	6809      	ldr	r1, [r1, #0]
 800acee:	3150      	adds	r1, #80	; 0x50
 800acf0:	18a0      	adds	r0, r4, r2
 800acf2:	f641 2c08 	movw	ip, #6664	; 0x1a08
 800acf6:	44bc      	add	ip, r7
 800acf8:	f8cc 0000 	str.w	r0, [ip]
 800acfc:	eb45 0303 	adc.w	r3, r5, r3
 800ad00:	f641 220c 	movw	r2, #6668	; 0x1a0c
 800ad04:	443a      	add	r2, r7
 800ad06:	6013      	str	r3, [r2, #0]
 800ad08:	f641 2308 	movw	r3, #6664	; 0x1a08
 800ad0c:	443b      	add	r3, r7
 800ad0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ad12:	e9c1 3400 	strd	r3, r4, [r1]
 800ad16:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	3328      	adds	r3, #40	; 0x28
 800ad1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ad22:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	3350      	adds	r3, #80	; 0x50
 800ad2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2e:	ea80 0402 	eor.w	r4, r0, r2
 800ad32:	f507 55d0 	add.w	r5, r7, #6656	; 0x1a00
 800ad36:	602c      	str	r4, [r5, #0]
 800ad38:	404b      	eors	r3, r1
 800ad3a:	f641 2204 	movw	r2, #6660	; 0x1a04
 800ad3e:	443a      	add	r2, r7
 800ad40:	6013      	str	r3, [r2, #0]
 800ad42:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800ad4c:	223f      	movs	r2, #63	; 0x3f
 800ad4e:	f507 53d0 	add.w	r3, r7, #6656	; 0x1a00
 800ad52:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ad56:	f7fd fbf3 	bl	8008540 <rotr64>
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	e9c4 2300 	strd	r2, r3, [r4]
 800ad62:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	3308      	adds	r3, #8
 800ad6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ad6e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	3330      	adds	r3, #48	; 0x30
 800ad76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7a:	1884      	adds	r4, r0, r2
 800ad7c:	f641 15f8 	movw	r5, #6648	; 0x19f8
 800ad80:	443d      	add	r5, r7
 800ad82:	602c      	str	r4, [r5, #0]
 800ad84:	eb41 0303 	adc.w	r3, r1, r3
 800ad88:	f641 12fc 	movw	r2, #6652	; 0x19fc
 800ad8c:	443a      	add	r2, r7
 800ad8e:	6013      	str	r3, [r2, #0]
 800ad90:	2300      	movs	r3, #0
 800ad92:	00da      	lsls	r2, r3, #3
 800ad94:	f641 6324 	movw	r3, #7716	; 0x1e24
 800ad98:	443b      	add	r3, r7
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4413      	add	r3, r2
 800ad9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada2:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800ada6:	6809      	ldr	r1, [r1, #0]
 800ada8:	3108      	adds	r1, #8
 800adaa:	f641 10f8 	movw	r0, #6648	; 0x19f8
 800adae:	4438      	add	r0, r7
 800adb0:	e9d0 4500 	ldrd	r4, r5, [r0]
 800adb4:	4620      	mov	r0, r4
 800adb6:	1880      	adds	r0, r0, r2
 800adb8:	f641 1cf0 	movw	ip, #6640	; 0x19f0
 800adbc:	44bc      	add	ip, r7
 800adbe:	f8cc 0000 	str.w	r0, [ip]
 800adc2:	4628      	mov	r0, r5
 800adc4:	eb43 0000 	adc.w	r0, r3, r0
 800adc8:	f641 13f4 	movw	r3, #6644	; 0x19f4
 800adcc:	443b      	add	r3, r7
 800adce:	6018      	str	r0, [r3, #0]
 800add0:	f641 13f0 	movw	r3, #6640	; 0x19f0
 800add4:	443b      	add	r3, r7
 800add6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800adda:	e9c1 3400 	strd	r3, r4, [r1]
 800adde:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	3360      	adds	r3, #96	; 0x60
 800ade6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800adea:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	3308      	adds	r3, #8
 800adf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf6:	ea80 0402 	eor.w	r4, r0, r2
 800adfa:	f641 15e8 	movw	r5, #6632	; 0x19e8
 800adfe:	443d      	add	r5, r7
 800ae00:	602c      	str	r4, [r5, #0]
 800ae02:	404b      	eors	r3, r1
 800ae04:	f641 12ec 	movw	r2, #6636	; 0x19ec
 800ae08:	443a      	add	r2, r7
 800ae0a:	6013      	str	r3, [r2, #0]
 800ae0c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800ae16:	2220      	movs	r2, #32
 800ae18:	f641 13e8 	movw	r3, #6632	; 0x19e8
 800ae1c:	443b      	add	r3, r7
 800ae1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ae22:	f7fd fb8d 	bl	8008540 <rotr64>
 800ae26:	4602      	mov	r2, r0
 800ae28:	460b      	mov	r3, r1
 800ae2a:	e9c4 2300 	strd	r2, r3, [r4]
 800ae2e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	3358      	adds	r3, #88	; 0x58
 800ae36:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ae3a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	3360      	adds	r3, #96	; 0x60
 800ae42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae46:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800ae4a:	6809      	ldr	r1, [r1, #0]
 800ae4c:	3158      	adds	r1, #88	; 0x58
 800ae4e:	18a0      	adds	r0, r4, r2
 800ae50:	f507 5ccf 	add.w	ip, r7, #6624	; 0x19e0
 800ae54:	f8cc 0000 	str.w	r0, [ip]
 800ae58:	eb45 0303 	adc.w	r3, r5, r3
 800ae5c:	f641 12e4 	movw	r2, #6628	; 0x19e4
 800ae60:	443a      	add	r2, r7
 800ae62:	6013      	str	r3, [r2, #0]
 800ae64:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 800ae68:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae6c:	e9c1 3400 	strd	r3, r4, [r1]
 800ae70:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	3330      	adds	r3, #48	; 0x30
 800ae78:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ae7c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	3358      	adds	r3, #88	; 0x58
 800ae84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae88:	ea80 0402 	eor.w	r4, r0, r2
 800ae8c:	f641 15d8 	movw	r5, #6616	; 0x19d8
 800ae90:	443d      	add	r5, r7
 800ae92:	602c      	str	r4, [r5, #0]
 800ae94:	404b      	eors	r3, r1
 800ae96:	f641 12dc 	movw	r2, #6620	; 0x19dc
 800ae9a:	443a      	add	r2, r7
 800ae9c:	6013      	str	r3, [r2, #0]
 800ae9e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800aea8:	2218      	movs	r2, #24
 800aeaa:	f641 13d8 	movw	r3, #6616	; 0x19d8
 800aeae:	443b      	add	r3, r7
 800aeb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aeb4:	f7fd fb44 	bl	8008540 <rotr64>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	460b      	mov	r3, r1
 800aebc:	e9c4 2300 	strd	r2, r3, [r4]
 800aec0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	3308      	adds	r3, #8
 800aec8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aecc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	3330      	adds	r3, #48	; 0x30
 800aed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed8:	1884      	adds	r4, r0, r2
 800aeda:	f641 15d0 	movw	r5, #6608	; 0x19d0
 800aede:	443d      	add	r5, r7
 800aee0:	602c      	str	r4, [r5, #0]
 800aee2:	eb41 0303 	adc.w	r3, r1, r3
 800aee6:	f641 12d4 	movw	r2, #6612	; 0x19d4
 800aeea:	443a      	add	r2, r7
 800aeec:	6013      	str	r3, [r2, #0]
 800aeee:	2302      	movs	r3, #2
 800aef0:	00da      	lsls	r2, r3, #3
 800aef2:	f641 6324 	movw	r3, #7716	; 0x1e24
 800aef6:	443b      	add	r3, r7
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	4413      	add	r3, r2
 800aefc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af00:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800af04:	6809      	ldr	r1, [r1, #0]
 800af06:	3108      	adds	r1, #8
 800af08:	f641 10d0 	movw	r0, #6608	; 0x19d0
 800af0c:	4438      	add	r0, r7
 800af0e:	e9d0 4500 	ldrd	r4, r5, [r0]
 800af12:	4620      	mov	r0, r4
 800af14:	1880      	adds	r0, r0, r2
 800af16:	f641 1cc8 	movw	ip, #6600	; 0x19c8
 800af1a:	44bc      	add	ip, r7
 800af1c:	f8cc 0000 	str.w	r0, [ip]
 800af20:	4628      	mov	r0, r5
 800af22:	eb43 0000 	adc.w	r0, r3, r0
 800af26:	f641 13cc 	movw	r3, #6604	; 0x19cc
 800af2a:	443b      	add	r3, r7
 800af2c:	6018      	str	r0, [r3, #0]
 800af2e:	f641 13c8 	movw	r3, #6600	; 0x19c8
 800af32:	443b      	add	r3, r7
 800af34:	e9d3 3400 	ldrd	r3, r4, [r3]
 800af38:	e9c1 3400 	strd	r3, r4, [r1]
 800af3c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	3360      	adds	r3, #96	; 0x60
 800af44:	e9d3 0100 	ldrd	r0, r1, [r3]
 800af48:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	3308      	adds	r3, #8
 800af50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af54:	ea80 0402 	eor.w	r4, r0, r2
 800af58:	f507 55ce 	add.w	r5, r7, #6592	; 0x19c0
 800af5c:	602c      	str	r4, [r5, #0]
 800af5e:	404b      	eors	r3, r1
 800af60:	f641 12c4 	movw	r2, #6596	; 0x19c4
 800af64:	443a      	add	r2, r7
 800af66:	6013      	str	r3, [r2, #0]
 800af68:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800af72:	2210      	movs	r2, #16
 800af74:	f507 53ce 	add.w	r3, r7, #6592	; 0x19c0
 800af78:	e9d3 0100 	ldrd	r0, r1, [r3]
 800af7c:	f7fd fae0 	bl	8008540 <rotr64>
 800af80:	4602      	mov	r2, r0
 800af82:	460b      	mov	r3, r1
 800af84:	e9c4 2300 	strd	r2, r3, [r4]
 800af88:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	3358      	adds	r3, #88	; 0x58
 800af90:	e9d3 4500 	ldrd	r4, r5, [r3]
 800af94:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	3360      	adds	r3, #96	; 0x60
 800af9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa0:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800afa4:	6809      	ldr	r1, [r1, #0]
 800afa6:	3158      	adds	r1, #88	; 0x58
 800afa8:	18a0      	adds	r0, r4, r2
 800afaa:	f641 1cb8 	movw	ip, #6584	; 0x19b8
 800afae:	44bc      	add	ip, r7
 800afb0:	f8cc 0000 	str.w	r0, [ip]
 800afb4:	eb45 0303 	adc.w	r3, r5, r3
 800afb8:	f641 12bc 	movw	r2, #6588	; 0x19bc
 800afbc:	443a      	add	r2, r7
 800afbe:	6013      	str	r3, [r2, #0]
 800afc0:	f641 13b8 	movw	r3, #6584	; 0x19b8
 800afc4:	443b      	add	r3, r7
 800afc6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800afca:	e9c1 3400 	strd	r3, r4, [r1]
 800afce:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	3330      	adds	r3, #48	; 0x30
 800afd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800afda:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	3358      	adds	r3, #88	; 0x58
 800afe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe6:	ea80 0402 	eor.w	r4, r0, r2
 800afea:	f641 15b0 	movw	r5, #6576	; 0x19b0
 800afee:	443d      	add	r5, r7
 800aff0:	602c      	str	r4, [r5, #0]
 800aff2:	404b      	eors	r3, r1
 800aff4:	f641 12b4 	movw	r2, #6580	; 0x19b4
 800aff8:	443a      	add	r2, r7
 800affa:	6013      	str	r3, [r2, #0]
 800affc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800b006:	223f      	movs	r2, #63	; 0x3f
 800b008:	f641 13b0 	movw	r3, #6576	; 0x19b0
 800b00c:	443b      	add	r3, r7
 800b00e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b012:	f7fd fa95 	bl	8008540 <rotr64>
 800b016:	4602      	mov	r2, r0
 800b018:	460b      	mov	r3, r1
 800b01a:	e9c4 2300 	strd	r2, r3, [r4]
 800b01e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	3310      	adds	r3, #16
 800b026:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b02a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	3338      	adds	r3, #56	; 0x38
 800b032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b036:	1884      	adds	r4, r0, r2
 800b038:	f641 15a8 	movw	r5, #6568	; 0x19a8
 800b03c:	443d      	add	r5, r7
 800b03e:	602c      	str	r4, [r5, #0]
 800b040:	eb41 0303 	adc.w	r3, r1, r3
 800b044:	f641 12ac 	movw	r2, #6572	; 0x19ac
 800b048:	443a      	add	r2, r7
 800b04a:	6013      	str	r3, [r2, #0]
 800b04c:	230b      	movs	r3, #11
 800b04e:	00da      	lsls	r2, r3, #3
 800b050:	f641 6324 	movw	r3, #7716	; 0x1e24
 800b054:	443b      	add	r3, r7
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4413      	add	r3, r2
 800b05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800b062:	6809      	ldr	r1, [r1, #0]
 800b064:	3110      	adds	r1, #16
 800b066:	f641 10a8 	movw	r0, #6568	; 0x19a8
 800b06a:	4438      	add	r0, r7
 800b06c:	e9d0 4500 	ldrd	r4, r5, [r0]
 800b070:	4620      	mov	r0, r4
 800b072:	1880      	adds	r0, r0, r2
 800b074:	f507 5ccd 	add.w	ip, r7, #6560	; 0x19a0
 800b078:	f8cc 0000 	str.w	r0, [ip]
 800b07c:	4628      	mov	r0, r5
 800b07e:	eb43 0000 	adc.w	r0, r3, r0
 800b082:	f641 13a4 	movw	r3, #6564	; 0x19a4
 800b086:	443b      	add	r3, r7
 800b088:	6018      	str	r0, [r3, #0]
 800b08a:	f507 53cd 	add.w	r3, r7, #6560	; 0x19a0
 800b08e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b092:	e9c1 3400 	strd	r3, r4, [r1]
 800b096:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	3368      	adds	r3, #104	; 0x68
 800b09e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b0a2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	3310      	adds	r3, #16
 800b0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ae:	ea80 0402 	eor.w	r4, r0, r2
 800b0b2:	f641 1598 	movw	r5, #6552	; 0x1998
 800b0b6:	443d      	add	r5, r7
 800b0b8:	602c      	str	r4, [r5, #0]
 800b0ba:	404b      	eors	r3, r1
 800b0bc:	f641 129c 	movw	r2, #6556	; 0x199c
 800b0c0:	443a      	add	r2, r7
 800b0c2:	6013      	str	r3, [r2, #0]
 800b0c4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800b0ce:	2220      	movs	r2, #32
 800b0d0:	f641 1398 	movw	r3, #6552	; 0x1998
 800b0d4:	443b      	add	r3, r7
 800b0d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b0da:	f7fd fa31 	bl	8008540 <rotr64>
 800b0de:	4602      	mov	r2, r0
 800b0e0:	460b      	mov	r3, r1
 800b0e2:	e9c4 2300 	strd	r2, r3, [r4]
 800b0e6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	3340      	adds	r3, #64	; 0x40
 800b0ee:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b0f2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	3368      	adds	r3, #104	; 0x68
 800b0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fe:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800b102:	6809      	ldr	r1, [r1, #0]
 800b104:	3140      	adds	r1, #64	; 0x40
 800b106:	18a0      	adds	r0, r4, r2
 800b108:	f641 1c90 	movw	ip, #6544	; 0x1990
 800b10c:	44bc      	add	ip, r7
 800b10e:	f8cc 0000 	str.w	r0, [ip]
 800b112:	eb45 0303 	adc.w	r3, r5, r3
 800b116:	f641 1294 	movw	r2, #6548	; 0x1994
 800b11a:	443a      	add	r2, r7
 800b11c:	6013      	str	r3, [r2, #0]
 800b11e:	f641 1390 	movw	r3, #6544	; 0x1990
 800b122:	443b      	add	r3, r7
 800b124:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b128:	e9c1 3400 	strd	r3, r4, [r1]
 800b12c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	3338      	adds	r3, #56	; 0x38
 800b134:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b138:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	3340      	adds	r3, #64	; 0x40
 800b140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b144:	ea80 0402 	eor.w	r4, r0, r2
 800b148:	f641 1588 	movw	r5, #6536	; 0x1988
 800b14c:	443d      	add	r5, r7
 800b14e:	602c      	str	r4, [r5, #0]
 800b150:	404b      	eors	r3, r1
 800b152:	f641 128c 	movw	r2, #6540	; 0x198c
 800b156:	443a      	add	r2, r7
 800b158:	6013      	str	r3, [r2, #0]
 800b15a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800b164:	2218      	movs	r2, #24
 800b166:	f641 1388 	movw	r3, #6536	; 0x1988
 800b16a:	443b      	add	r3, r7
 800b16c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b170:	f7fd f9e6 	bl	8008540 <rotr64>
 800b174:	4602      	mov	r2, r0
 800b176:	460b      	mov	r3, r1
 800b178:	e9c4 2300 	strd	r2, r3, [r4]
 800b17c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	3310      	adds	r3, #16
 800b184:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b188:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	3338      	adds	r3, #56	; 0x38
 800b190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b194:	1884      	adds	r4, r0, r2
 800b196:	f507 55cc 	add.w	r5, r7, #6528	; 0x1980
 800b19a:	602c      	str	r4, [r5, #0]
 800b19c:	eb41 0303 	adc.w	r3, r1, r3
 800b1a0:	f641 1284 	movw	r2, #6532	; 0x1984
 800b1a4:	443a      	add	r2, r7
 800b1a6:	6013      	str	r3, [r2, #0]
 800b1a8:	2307      	movs	r3, #7
 800b1aa:	00da      	lsls	r2, r3, #3
 800b1ac:	f641 6324 	movw	r3, #7716	; 0x1e24
 800b1b0:	443b      	add	r3, r7
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4413      	add	r3, r2
 800b1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ba:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800b1be:	6809      	ldr	r1, [r1, #0]
 800b1c0:	3110      	adds	r1, #16
 800b1c2:	f507 50cc 	add.w	r0, r7, #6528	; 0x1980
 800b1c6:	e9d0 4500 	ldrd	r4, r5, [r0]
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	1880      	adds	r0, r0, r2
 800b1ce:	f641 1c78 	movw	ip, #6520	; 0x1978
 800b1d2:	44bc      	add	ip, r7
 800b1d4:	f8cc 0000 	str.w	r0, [ip]
 800b1d8:	4628      	mov	r0, r5
 800b1da:	eb43 0000 	adc.w	r0, r3, r0
 800b1de:	f641 137c 	movw	r3, #6524	; 0x197c
 800b1e2:	443b      	add	r3, r7
 800b1e4:	6018      	str	r0, [r3, #0]
 800b1e6:	f641 1378 	movw	r3, #6520	; 0x1978
 800b1ea:	443b      	add	r3, r7
 800b1ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b1f0:	e9c1 3400 	strd	r3, r4, [r1]
 800b1f4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	3368      	adds	r3, #104	; 0x68
 800b1fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b200:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	3310      	adds	r3, #16
 800b208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20c:	ea80 0402 	eor.w	r4, r0, r2
 800b210:	f641 1570 	movw	r5, #6512	; 0x1970
 800b214:	443d      	add	r5, r7
 800b216:	602c      	str	r4, [r5, #0]
 800b218:	404b      	eors	r3, r1
 800b21a:	f641 1274 	movw	r2, #6516	; 0x1974
 800b21e:	443a      	add	r2, r7
 800b220:	6013      	str	r3, [r2, #0]
 800b222:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800b22c:	2210      	movs	r2, #16
 800b22e:	f641 1370 	movw	r3, #6512	; 0x1970
 800b232:	443b      	add	r3, r7
 800b234:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b238:	f7fd f982 	bl	8008540 <rotr64>
 800b23c:	4602      	mov	r2, r0
 800b23e:	460b      	mov	r3, r1
 800b240:	e9c4 2300 	strd	r2, r3, [r4]
 800b244:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	3340      	adds	r3, #64	; 0x40
 800b24c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b250:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	3368      	adds	r3, #104	; 0x68
 800b258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25c:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800b260:	6809      	ldr	r1, [r1, #0]
 800b262:	3140      	adds	r1, #64	; 0x40
 800b264:	18a0      	adds	r0, r4, r2
 800b266:	f641 1c68 	movw	ip, #6504	; 0x1968
 800b26a:	44bc      	add	ip, r7
 800b26c:	f8cc 0000 	str.w	r0, [ip]
 800b270:	eb45 0303 	adc.w	r3, r5, r3
 800b274:	f641 126c 	movw	r2, #6508	; 0x196c
 800b278:	443a      	add	r2, r7
 800b27a:	6013      	str	r3, [r2, #0]
 800b27c:	f641 1368 	movw	r3, #6504	; 0x1968
 800b280:	443b      	add	r3, r7
 800b282:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b286:	e9c1 3400 	strd	r3, r4, [r1]
 800b28a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	3338      	adds	r3, #56	; 0x38
 800b292:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b296:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	3340      	adds	r3, #64	; 0x40
 800b29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a2:	ea80 0402 	eor.w	r4, r0, r2
 800b2a6:	f507 55cb 	add.w	r5, r7, #6496	; 0x1960
 800b2aa:	602c      	str	r4, [r5, #0]
 800b2ac:	404b      	eors	r3, r1
 800b2ae:	f641 1264 	movw	r2, #6500	; 0x1964
 800b2b2:	443a      	add	r2, r7
 800b2b4:	6013      	str	r3, [r2, #0]
 800b2b6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800b2c0:	223f      	movs	r2, #63	; 0x3f
 800b2c2:	f507 53cb 	add.w	r3, r7, #6496	; 0x1960
 800b2c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b2ca:	f7fd f939 	bl	8008540 <rotr64>
 800b2ce:	4602      	mov	r2, r0
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	e9c4 2300 	strd	r2, r3, [r4]
 800b2d6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	3318      	adds	r3, #24
 800b2de:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b2e2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	3320      	adds	r3, #32
 800b2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ee:	1884      	adds	r4, r0, r2
 800b2f0:	f641 1558 	movw	r5, #6488	; 0x1958
 800b2f4:	443d      	add	r5, r7
 800b2f6:	602c      	str	r4, [r5, #0]
 800b2f8:	eb41 0303 	adc.w	r3, r1, r3
 800b2fc:	f641 125c 	movw	r2, #6492	; 0x195c
 800b300:	443a      	add	r2, r7
 800b302:	6013      	str	r3, [r2, #0]
 800b304:	2305      	movs	r3, #5
 800b306:	00da      	lsls	r2, r3, #3
 800b308:	f641 6324 	movw	r3, #7716	; 0x1e24
 800b30c:	443b      	add	r3, r7
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4413      	add	r3, r2
 800b312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b316:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800b31a:	6809      	ldr	r1, [r1, #0]
 800b31c:	3118      	adds	r1, #24
 800b31e:	f641 1058 	movw	r0, #6488	; 0x1958
 800b322:	4438      	add	r0, r7
 800b324:	e9d0 4500 	ldrd	r4, r5, [r0]
 800b328:	4620      	mov	r0, r4
 800b32a:	1880      	adds	r0, r0, r2
 800b32c:	f641 1c50 	movw	ip, #6480	; 0x1950
 800b330:	44bc      	add	ip, r7
 800b332:	f8cc 0000 	str.w	r0, [ip]
 800b336:	4628      	mov	r0, r5
 800b338:	eb43 0000 	adc.w	r0, r3, r0
 800b33c:	f641 1354 	movw	r3, #6484	; 0x1954
 800b340:	443b      	add	r3, r7
 800b342:	6018      	str	r0, [r3, #0]
 800b344:	f641 1350 	movw	r3, #6480	; 0x1950
 800b348:	443b      	add	r3, r7
 800b34a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b34e:	e9c1 3400 	strd	r3, r4, [r1]
 800b352:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	3370      	adds	r3, #112	; 0x70
 800b35a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b35e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	3318      	adds	r3, #24
 800b366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b36a:	ea80 0402 	eor.w	r4, r0, r2
 800b36e:	f641 1548 	movw	r5, #6472	; 0x1948
 800b372:	443d      	add	r5, r7
 800b374:	602c      	str	r4, [r5, #0]
 800b376:	404b      	eors	r3, r1
 800b378:	f641 124c 	movw	r2, #6476	; 0x194c
 800b37c:	443a      	add	r2, r7
 800b37e:	6013      	str	r3, [r2, #0]
 800b380:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800b38a:	2220      	movs	r2, #32
 800b38c:	f641 1348 	movw	r3, #6472	; 0x1948
 800b390:	443b      	add	r3, r7
 800b392:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b396:	f7fd f8d3 	bl	8008540 <rotr64>
 800b39a:	4602      	mov	r2, r0
 800b39c:	460b      	mov	r3, r1
 800b39e:	e9c4 2300 	strd	r2, r3, [r4]
 800b3a2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	3348      	adds	r3, #72	; 0x48
 800b3aa:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b3ae:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	3370      	adds	r3, #112	; 0x70
 800b3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ba:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800b3be:	6809      	ldr	r1, [r1, #0]
 800b3c0:	3148      	adds	r1, #72	; 0x48
 800b3c2:	18a0      	adds	r0, r4, r2
 800b3c4:	f507 5cca 	add.w	ip, r7, #6464	; 0x1940
 800b3c8:	f8cc 0000 	str.w	r0, [ip]
 800b3cc:	eb45 0303 	adc.w	r3, r5, r3
 800b3d0:	f641 1244 	movw	r2, #6468	; 0x1944
 800b3d4:	443a      	add	r2, r7
 800b3d6:	6013      	str	r3, [r2, #0]
 800b3d8:	f507 53ca 	add.w	r3, r7, #6464	; 0x1940
 800b3dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b3e0:	e9c1 3400 	strd	r3, r4, [r1]
 800b3e4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	3320      	adds	r3, #32
 800b3ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b3f0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	3348      	adds	r3, #72	; 0x48
 800b3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3fc:	ea80 0402 	eor.w	r4, r0, r2
 800b400:	f641 1538 	movw	r5, #6456	; 0x1938
 800b404:	443d      	add	r5, r7
 800b406:	602c      	str	r4, [r5, #0]
 800b408:	404b      	eors	r3, r1
 800b40a:	f641 123c 	movw	r2, #6460	; 0x193c
 800b40e:	443a      	add	r2, r7
 800b410:	6013      	str	r3, [r2, #0]
 800b412:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f103 0420 	add.w	r4, r3, #32
 800b41c:	2218      	movs	r2, #24
 800b41e:	f641 1338 	movw	r3, #6456	; 0x1938
 800b422:	443b      	add	r3, r7
 800b424:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b428:	f7fd f88a 	bl	8008540 <rotr64>
 800b42c:	4602      	mov	r2, r0
 800b42e:	460b      	mov	r3, r1
 800b430:	e9c4 2300 	strd	r2, r3, [r4]
 800b434:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	3318      	adds	r3, #24
 800b43c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b440:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	3320      	adds	r3, #32
 800b448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b44c:	1884      	adds	r4, r0, r2
 800b44e:	f641 1530 	movw	r5, #6448	; 0x1930
 800b452:	443d      	add	r5, r7
 800b454:	602c      	str	r4, [r5, #0]
 800b456:	eb41 0303 	adc.w	r3, r1, r3
 800b45a:	f641 1234 	movw	r2, #6452	; 0x1934
 800b45e:	443a      	add	r2, r7
 800b460:	6013      	str	r3, [r2, #0]
 800b462:	2303      	movs	r3, #3
 800b464:	00da      	lsls	r2, r3, #3
 800b466:	f641 6324 	movw	r3, #7716	; 0x1e24
 800b46a:	443b      	add	r3, r7
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	4413      	add	r3, r2
 800b470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b474:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800b478:	6809      	ldr	r1, [r1, #0]
 800b47a:	3118      	adds	r1, #24
 800b47c:	f641 1030 	movw	r0, #6448	; 0x1930
 800b480:	4438      	add	r0, r7
 800b482:	e9d0 4500 	ldrd	r4, r5, [r0]
 800b486:	4620      	mov	r0, r4
 800b488:	1880      	adds	r0, r0, r2
 800b48a:	f641 1c28 	movw	ip, #6440	; 0x1928
 800b48e:	44bc      	add	ip, r7
 800b490:	f8cc 0000 	str.w	r0, [ip]
 800b494:	4628      	mov	r0, r5
 800b496:	eb43 0000 	adc.w	r0, r3, r0
 800b49a:	f641 132c 	movw	r3, #6444	; 0x192c
 800b49e:	443b      	add	r3, r7
 800b4a0:	6018      	str	r0, [r3, #0]
 800b4a2:	f641 1328 	movw	r3, #6440	; 0x1928
 800b4a6:	443b      	add	r3, r7
 800b4a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b4ac:	e9c1 3400 	strd	r3, r4, [r1]
 800b4b0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	3370      	adds	r3, #112	; 0x70
 800b4b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b4bc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	3318      	adds	r3, #24
 800b4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c8:	ea80 0402 	eor.w	r4, r0, r2
 800b4cc:	f507 55c9 	add.w	r5, r7, #6432	; 0x1920
 800b4d0:	602c      	str	r4, [r5, #0]
 800b4d2:	404b      	eors	r3, r1
 800b4d4:	f641 1224 	movw	r2, #6436	; 0x1924
 800b4d8:	443a      	add	r2, r7
 800b4da:	6013      	str	r3, [r2, #0]
 800b4dc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800b4e6:	2210      	movs	r2, #16
 800b4e8:	f507 53c9 	add.w	r3, r7, #6432	; 0x1920
 800b4ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b4f0:	f7fd f826 	bl	8008540 <rotr64>
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	e9c4 2300 	strd	r2, r3, [r4]
 800b4fc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	3348      	adds	r3, #72	; 0x48
 800b504:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b508:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	3370      	adds	r3, #112	; 0x70
 800b510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b514:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800b518:	6809      	ldr	r1, [r1, #0]
 800b51a:	3148      	adds	r1, #72	; 0x48
 800b51c:	18a0      	adds	r0, r4, r2
 800b51e:	f641 1c18 	movw	ip, #6424	; 0x1918
 800b522:	44bc      	add	ip, r7
 800b524:	f8cc 0000 	str.w	r0, [ip]
 800b528:	eb45 0303 	adc.w	r3, r5, r3
 800b52c:	f641 121c 	movw	r2, #6428	; 0x191c
 800b530:	443a      	add	r2, r7
 800b532:	6013      	str	r3, [r2, #0]
 800b534:	f641 1318 	movw	r3, #6424	; 0x1918
 800b538:	443b      	add	r3, r7
 800b53a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b53e:	e9c1 3400 	strd	r3, r4, [r1]
 800b542:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	3320      	adds	r3, #32
 800b54a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b54e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	3348      	adds	r3, #72	; 0x48
 800b556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55a:	ea80 0402 	eor.w	r4, r0, r2
 800b55e:	f641 1510 	movw	r5, #6416	; 0x1910
 800b562:	443d      	add	r5, r7
 800b564:	602c      	str	r4, [r5, #0]
 800b566:	404b      	eors	r3, r1
 800b568:	f641 1214 	movw	r2, #6420	; 0x1914
 800b56c:	443a      	add	r2, r7
 800b56e:	6013      	str	r3, [r2, #0]
 800b570:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f103 0420 	add.w	r4, r3, #32
 800b57a:	223f      	movs	r2, #63	; 0x3f
 800b57c:	f641 1310 	movw	r3, #6416	; 0x1910
 800b580:	443b      	add	r3, r7
 800b582:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b586:	f7fc ffdb 	bl	8008540 <rotr64>
 800b58a:	4602      	mov	r2, r0
 800b58c:	460b      	mov	r3, r1
 800b58e:	e9c4 2300 	strd	r2, r3, [r4]
  ROUND( 2 );
 800b592:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b59c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	3320      	adds	r3, #32
 800b5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a8:	1884      	adds	r4, r0, r2
 800b5aa:	f641 1508 	movw	r5, #6408	; 0x1908
 800b5ae:	443d      	add	r5, r7
 800b5b0:	602c      	str	r4, [r5, #0]
 800b5b2:	eb41 0303 	adc.w	r3, r1, r3
 800b5b6:	f641 120c 	movw	r2, #6412	; 0x190c
 800b5ba:	443a      	add	r2, r7
 800b5bc:	6013      	str	r3, [r2, #0]
 800b5be:	230b      	movs	r3, #11
 800b5c0:	00da      	lsls	r2, r3, #3
 800b5c2:	f641 6324 	movw	r3, #7716	; 0x1e24
 800b5c6:	443b      	add	r3, r7
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4413      	add	r3, r2
 800b5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d0:	f641 1108 	movw	r1, #6408	; 0x1908
 800b5d4:	4439      	add	r1, r7
 800b5d6:	e9d1 4500 	ldrd	r4, r5, [r1]
 800b5da:	4621      	mov	r1, r4
 800b5dc:	1889      	adds	r1, r1, r2
 800b5de:	f507 50c8 	add.w	r0, r7, #6400	; 0x1900
 800b5e2:	6001      	str	r1, [r0, #0]
 800b5e4:	4629      	mov	r1, r5
 800b5e6:	eb43 0101 	adc.w	r1, r3, r1
 800b5ea:	f641 1304 	movw	r3, #6404	; 0x1904
 800b5ee:	443b      	add	r3, r7
 800b5f0:	6019      	str	r1, [r3, #0]
 800b5f2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 800b5fc:	e9d2 1200 	ldrd	r1, r2, [r2]
 800b600:	e9c3 1200 	strd	r1, r2, [r3]
 800b604:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	3360      	adds	r3, #96	; 0x60
 800b60c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b610:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61a:	ea80 0402 	eor.w	r4, r0, r2
 800b61e:	f641 05f8 	movw	r5, #6392	; 0x18f8
 800b622:	443d      	add	r5, r7
 800b624:	602c      	str	r4, [r5, #0]
 800b626:	404b      	eors	r3, r1
 800b628:	f641 02fc 	movw	r2, #6396	; 0x18fc
 800b62c:	443a      	add	r2, r7
 800b62e:	6013      	str	r3, [r2, #0]
 800b630:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800b63a:	2220      	movs	r2, #32
 800b63c:	f641 03f8 	movw	r3, #6392	; 0x18f8
 800b640:	443b      	add	r3, r7
 800b642:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b646:	f7fc ff7b 	bl	8008540 <rotr64>
 800b64a:	4602      	mov	r2, r0
 800b64c:	460b      	mov	r3, r1
 800b64e:	e9c4 2300 	strd	r2, r3, [r4]
 800b652:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	3340      	adds	r3, #64	; 0x40
 800b65a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b65e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	3360      	adds	r3, #96	; 0x60
 800b666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800b66e:	6809      	ldr	r1, [r1, #0]
 800b670:	3140      	adds	r1, #64	; 0x40
 800b672:	18a0      	adds	r0, r4, r2
 800b674:	f641 0cf0 	movw	ip, #6384	; 0x18f0
 800b678:	44bc      	add	ip, r7
 800b67a:	f8cc 0000 	str.w	r0, [ip]
 800b67e:	eb45 0303 	adc.w	r3, r5, r3
 800b682:	f641 02f4 	movw	r2, #6388	; 0x18f4
 800b686:	443a      	add	r2, r7
 800b688:	6013      	str	r3, [r2, #0]
 800b68a:	f641 03f0 	movw	r3, #6384	; 0x18f0
 800b68e:	443b      	add	r3, r7
 800b690:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b694:	e9c1 3400 	strd	r3, r4, [r1]
 800b698:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	3320      	adds	r3, #32
 800b6a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b6a4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	3340      	adds	r3, #64	; 0x40
 800b6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b0:	ea80 0402 	eor.w	r4, r0, r2
 800b6b4:	f641 05e8 	movw	r5, #6376	; 0x18e8
 800b6b8:	443d      	add	r5, r7
 800b6ba:	602c      	str	r4, [r5, #0]
 800b6bc:	404b      	eors	r3, r1
 800b6be:	f641 02ec 	movw	r2, #6380	; 0x18ec
 800b6c2:	443a      	add	r2, r7
 800b6c4:	6013      	str	r3, [r2, #0]
 800b6c6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f103 0420 	add.w	r4, r3, #32
 800b6d0:	2218      	movs	r2, #24
 800b6d2:	f641 03e8 	movw	r3, #6376	; 0x18e8
 800b6d6:	443b      	add	r3, r7
 800b6d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b6dc:	f7fc ff30 	bl	8008540 <rotr64>
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	460b      	mov	r3, r1
 800b6e4:	e9c4 2300 	strd	r2, r3, [r4]
 800b6e8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b6f2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	3320      	adds	r3, #32
 800b6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fe:	1884      	adds	r4, r0, r2
 800b700:	f507 55c7 	add.w	r5, r7, #6368	; 0x18e0
 800b704:	602c      	str	r4, [r5, #0]
 800b706:	eb41 0303 	adc.w	r3, r1, r3
 800b70a:	f641 02e4 	movw	r2, #6372	; 0x18e4
 800b70e:	443a      	add	r2, r7
 800b710:	6013      	str	r3, [r2, #0]
 800b712:	2308      	movs	r3, #8
 800b714:	00da      	lsls	r2, r3, #3
 800b716:	f641 6324 	movw	r3, #7716	; 0x1e24
 800b71a:	443b      	add	r3, r7
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4413      	add	r3, r2
 800b720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b724:	f507 51c7 	add.w	r1, r7, #6368	; 0x18e0
 800b728:	e9d1 4500 	ldrd	r4, r5, [r1]
 800b72c:	4621      	mov	r1, r4
 800b72e:	1889      	adds	r1, r1, r2
 800b730:	f641 00d8 	movw	r0, #6360	; 0x18d8
 800b734:	4438      	add	r0, r7
 800b736:	6001      	str	r1, [r0, #0]
 800b738:	4629      	mov	r1, r5
 800b73a:	eb43 0101 	adc.w	r1, r3, r1
 800b73e:	f641 03dc 	movw	r3, #6364	; 0x18dc
 800b742:	443b      	add	r3, r7
 800b744:	6019      	str	r1, [r3, #0]
 800b746:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f641 02d8 	movw	r2, #6360	; 0x18d8
 800b750:	443a      	add	r2, r7
 800b752:	e9d2 1200 	ldrd	r1, r2, [r2]
 800b756:	e9c3 1200 	strd	r1, r2, [r3]
 800b75a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	3360      	adds	r3, #96	; 0x60
 800b762:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b766:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b770:	ea80 0402 	eor.w	r4, r0, r2
 800b774:	f641 05d0 	movw	r5, #6352	; 0x18d0
 800b778:	443d      	add	r5, r7
 800b77a:	602c      	str	r4, [r5, #0]
 800b77c:	404b      	eors	r3, r1
 800b77e:	f641 02d4 	movw	r2, #6356	; 0x18d4
 800b782:	443a      	add	r2, r7
 800b784:	6013      	str	r3, [r2, #0]
 800b786:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800b790:	2210      	movs	r2, #16
 800b792:	f641 03d0 	movw	r3, #6352	; 0x18d0
 800b796:	443b      	add	r3, r7
 800b798:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b79c:	f7fc fed0 	bl	8008540 <rotr64>
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	e9c4 2300 	strd	r2, r3, [r4]
 800b7a8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	3340      	adds	r3, #64	; 0x40
 800b7b0:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b7b4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	3360      	adds	r3, #96	; 0x60
 800b7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c0:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800b7c4:	6809      	ldr	r1, [r1, #0]
 800b7c6:	3140      	adds	r1, #64	; 0x40
 800b7c8:	18a0      	adds	r0, r4, r2
 800b7ca:	f641 0cc8 	movw	ip, #6344	; 0x18c8
 800b7ce:	44bc      	add	ip, r7
 800b7d0:	f8cc 0000 	str.w	r0, [ip]
 800b7d4:	eb45 0303 	adc.w	r3, r5, r3
 800b7d8:	f641 02cc 	movw	r2, #6348	; 0x18cc
 800b7dc:	443a      	add	r2, r7
 800b7de:	6013      	str	r3, [r2, #0]
 800b7e0:	f641 03c8 	movw	r3, #6344	; 0x18c8
 800b7e4:	443b      	add	r3, r7
 800b7e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b7ea:	e9c1 3400 	strd	r3, r4, [r1]
 800b7ee:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	3320      	adds	r3, #32
 800b7f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b7fa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	3340      	adds	r3, #64	; 0x40
 800b802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b806:	ea80 0402 	eor.w	r4, r0, r2
 800b80a:	f507 55c6 	add.w	r5, r7, #6336	; 0x18c0
 800b80e:	602c      	str	r4, [r5, #0]
 800b810:	404b      	eors	r3, r1
 800b812:	f641 02c4 	movw	r2, #6340	; 0x18c4
 800b816:	443a      	add	r2, r7
 800b818:	6013      	str	r3, [r2, #0]
 800b81a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f103 0420 	add.w	r4, r3, #32
 800b824:	223f      	movs	r2, #63	; 0x3f
 800b826:	f507 53c6 	add.w	r3, r7, #6336	; 0x18c0
 800b82a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b82e:	f7fc fe87 	bl	8008540 <rotr64>
 800b832:	4602      	mov	r2, r0
 800b834:	460b      	mov	r3, r1
 800b836:	e9c4 2300 	strd	r2, r3, [r4]
 800b83a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	3308      	adds	r3, #8
 800b842:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b846:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	3328      	adds	r3, #40	; 0x28
 800b84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b852:	1884      	adds	r4, r0, r2
 800b854:	f641 05b8 	movw	r5, #6328	; 0x18b8
 800b858:	443d      	add	r5, r7
 800b85a:	602c      	str	r4, [r5, #0]
 800b85c:	eb41 0303 	adc.w	r3, r1, r3
 800b860:	f641 02bc 	movw	r2, #6332	; 0x18bc
 800b864:	443a      	add	r2, r7
 800b866:	6013      	str	r3, [r2, #0]
 800b868:	230c      	movs	r3, #12
 800b86a:	00da      	lsls	r2, r3, #3
 800b86c:	f641 6324 	movw	r3, #7716	; 0x1e24
 800b870:	443b      	add	r3, r7
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	4413      	add	r3, r2
 800b876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800b87e:	6809      	ldr	r1, [r1, #0]
 800b880:	3108      	adds	r1, #8
 800b882:	f641 00b8 	movw	r0, #6328	; 0x18b8
 800b886:	4438      	add	r0, r7
 800b888:	e9d0 4500 	ldrd	r4, r5, [r0]
 800b88c:	4620      	mov	r0, r4
 800b88e:	1880      	adds	r0, r0, r2
 800b890:	f641 0cb0 	movw	ip, #6320	; 0x18b0
 800b894:	44bc      	add	ip, r7
 800b896:	f8cc 0000 	str.w	r0, [ip]
 800b89a:	4628      	mov	r0, r5
 800b89c:	eb43 0000 	adc.w	r0, r3, r0
 800b8a0:	f641 03b4 	movw	r3, #6324	; 0x18b4
 800b8a4:	443b      	add	r3, r7
 800b8a6:	6018      	str	r0, [r3, #0]
 800b8a8:	f641 03b0 	movw	r3, #6320	; 0x18b0
 800b8ac:	443b      	add	r3, r7
 800b8ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b8b2:	e9c1 3400 	strd	r3, r4, [r1]
 800b8b6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	3368      	adds	r3, #104	; 0x68
 800b8be:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b8c2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	3308      	adds	r3, #8
 800b8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ce:	ea80 0402 	eor.w	r4, r0, r2
 800b8d2:	f641 05a8 	movw	r5, #6312	; 0x18a8
 800b8d6:	443d      	add	r5, r7
 800b8d8:	602c      	str	r4, [r5, #0]
 800b8da:	404b      	eors	r3, r1
 800b8dc:	f641 02ac 	movw	r2, #6316	; 0x18ac
 800b8e0:	443a      	add	r2, r7
 800b8e2:	6013      	str	r3, [r2, #0]
 800b8e4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800b8ee:	2220      	movs	r2, #32
 800b8f0:	f641 03a8 	movw	r3, #6312	; 0x18a8
 800b8f4:	443b      	add	r3, r7
 800b8f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b8fa:	f7fc fe21 	bl	8008540 <rotr64>
 800b8fe:	4602      	mov	r2, r0
 800b900:	460b      	mov	r3, r1
 800b902:	e9c4 2300 	strd	r2, r3, [r4]
 800b906:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	3348      	adds	r3, #72	; 0x48
 800b90e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b912:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	3368      	adds	r3, #104	; 0x68
 800b91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800b922:	6809      	ldr	r1, [r1, #0]
 800b924:	3148      	adds	r1, #72	; 0x48
 800b926:	18a0      	adds	r0, r4, r2
 800b928:	f507 5cc5 	add.w	ip, r7, #6304	; 0x18a0
 800b92c:	f8cc 0000 	str.w	r0, [ip]
 800b930:	eb45 0303 	adc.w	r3, r5, r3
 800b934:	f641 02a4 	movw	r2, #6308	; 0x18a4
 800b938:	443a      	add	r2, r7
 800b93a:	6013      	str	r3, [r2, #0]
 800b93c:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800b940:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b944:	e9c1 3400 	strd	r3, r4, [r1]
 800b948:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	3328      	adds	r3, #40	; 0x28
 800b950:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b954:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	3348      	adds	r3, #72	; 0x48
 800b95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b960:	ea80 0402 	eor.w	r4, r0, r2
 800b964:	f641 0598 	movw	r5, #6296	; 0x1898
 800b968:	443d      	add	r5, r7
 800b96a:	602c      	str	r4, [r5, #0]
 800b96c:	404b      	eors	r3, r1
 800b96e:	f641 029c 	movw	r2, #6300	; 0x189c
 800b972:	443a      	add	r2, r7
 800b974:	6013      	str	r3, [r2, #0]
 800b976:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800b980:	2218      	movs	r2, #24
 800b982:	f641 0398 	movw	r3, #6296	; 0x1898
 800b986:	443b      	add	r3, r7
 800b988:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b98c:	f7fc fdd8 	bl	8008540 <rotr64>
 800b990:	4602      	mov	r2, r0
 800b992:	460b      	mov	r3, r1
 800b994:	e9c4 2300 	strd	r2, r3, [r4]
 800b998:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	3308      	adds	r3, #8
 800b9a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b9a4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	3328      	adds	r3, #40	; 0x28
 800b9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b0:	1884      	adds	r4, r0, r2
 800b9b2:	f641 0590 	movw	r5, #6288	; 0x1890
 800b9b6:	443d      	add	r5, r7
 800b9b8:	602c      	str	r4, [r5, #0]
 800b9ba:	eb41 0303 	adc.w	r3, r1, r3
 800b9be:	f641 0294 	movw	r2, #6292	; 0x1894
 800b9c2:	443a      	add	r2, r7
 800b9c4:	6013      	str	r3, [r2, #0]
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	00da      	lsls	r2, r3, #3
 800b9ca:	f641 6324 	movw	r3, #7716	; 0x1e24
 800b9ce:	443b      	add	r3, r7
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4413      	add	r3, r2
 800b9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d8:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800b9dc:	6809      	ldr	r1, [r1, #0]
 800b9de:	3108      	adds	r1, #8
 800b9e0:	f641 0090 	movw	r0, #6288	; 0x1890
 800b9e4:	4438      	add	r0, r7
 800b9e6:	e9d0 4500 	ldrd	r4, r5, [r0]
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	1880      	adds	r0, r0, r2
 800b9ee:	f641 0c88 	movw	ip, #6280	; 0x1888
 800b9f2:	44bc      	add	ip, r7
 800b9f4:	f8cc 0000 	str.w	r0, [ip]
 800b9f8:	4628      	mov	r0, r5
 800b9fa:	eb43 0000 	adc.w	r0, r3, r0
 800b9fe:	f641 038c 	movw	r3, #6284	; 0x188c
 800ba02:	443b      	add	r3, r7
 800ba04:	6018      	str	r0, [r3, #0]
 800ba06:	f641 0388 	movw	r3, #6280	; 0x1888
 800ba0a:	443b      	add	r3, r7
 800ba0c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ba10:	e9c1 3400 	strd	r3, r4, [r1]
 800ba14:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	3368      	adds	r3, #104	; 0x68
 800ba1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba20:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	3308      	adds	r3, #8
 800ba28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2c:	ea80 0402 	eor.w	r4, r0, r2
 800ba30:	f507 55c4 	add.w	r5, r7, #6272	; 0x1880
 800ba34:	602c      	str	r4, [r5, #0]
 800ba36:	404b      	eors	r3, r1
 800ba38:	f641 0284 	movw	r2, #6276	; 0x1884
 800ba3c:	443a      	add	r2, r7
 800ba3e:	6013      	str	r3, [r2, #0]
 800ba40:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800ba4a:	2210      	movs	r2, #16
 800ba4c:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 800ba50:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba54:	f7fc fd74 	bl	8008540 <rotr64>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	e9c4 2300 	strd	r2, r3, [r4]
 800ba60:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	3348      	adds	r3, #72	; 0x48
 800ba68:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ba6c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	3368      	adds	r3, #104	; 0x68
 800ba74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba78:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800ba7c:	6809      	ldr	r1, [r1, #0]
 800ba7e:	3148      	adds	r1, #72	; 0x48
 800ba80:	18a0      	adds	r0, r4, r2
 800ba82:	f641 0c78 	movw	ip, #6264	; 0x1878
 800ba86:	44bc      	add	ip, r7
 800ba88:	f8cc 0000 	str.w	r0, [ip]
 800ba8c:	eb45 0303 	adc.w	r3, r5, r3
 800ba90:	f641 027c 	movw	r2, #6268	; 0x187c
 800ba94:	443a      	add	r2, r7
 800ba96:	6013      	str	r3, [r2, #0]
 800ba98:	f641 0378 	movw	r3, #6264	; 0x1878
 800ba9c:	443b      	add	r3, r7
 800ba9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800baa2:	e9c1 3400 	strd	r3, r4, [r1]
 800baa6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	3328      	adds	r3, #40	; 0x28
 800baae:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bab2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	3348      	adds	r3, #72	; 0x48
 800baba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800babe:	ea80 0402 	eor.w	r4, r0, r2
 800bac2:	f641 0570 	movw	r5, #6256	; 0x1870
 800bac6:	443d      	add	r5, r7
 800bac8:	602c      	str	r4, [r5, #0]
 800baca:	404b      	eors	r3, r1
 800bacc:	f641 0274 	movw	r2, #6260	; 0x1874
 800bad0:	443a      	add	r2, r7
 800bad2:	6013      	str	r3, [r2, #0]
 800bad4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800bade:	223f      	movs	r2, #63	; 0x3f
 800bae0:	f641 0370 	movw	r3, #6256	; 0x1870
 800bae4:	443b      	add	r3, r7
 800bae6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800baea:	f7fc fd29 	bl	8008540 <rotr64>
 800baee:	4602      	mov	r2, r0
 800baf0:	460b      	mov	r3, r1
 800baf2:	e9c4 2300 	strd	r2, r3, [r4]
 800baf6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	3310      	adds	r3, #16
 800bafe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bb02:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	3330      	adds	r3, #48	; 0x30
 800bb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0e:	1884      	adds	r4, r0, r2
 800bb10:	f641 0568 	movw	r5, #6248	; 0x1868
 800bb14:	443d      	add	r5, r7
 800bb16:	602c      	str	r4, [r5, #0]
 800bb18:	eb41 0303 	adc.w	r3, r1, r3
 800bb1c:	f641 026c 	movw	r2, #6252	; 0x186c
 800bb20:	443a      	add	r2, r7
 800bb22:	6013      	str	r3, [r2, #0]
 800bb24:	2305      	movs	r3, #5
 800bb26:	00da      	lsls	r2, r3, #3
 800bb28:	f641 6324 	movw	r3, #7716	; 0x1e24
 800bb2c:	443b      	add	r3, r7
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	4413      	add	r3, r2
 800bb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb36:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800bb3a:	6809      	ldr	r1, [r1, #0]
 800bb3c:	3110      	adds	r1, #16
 800bb3e:	f641 0068 	movw	r0, #6248	; 0x1868
 800bb42:	4438      	add	r0, r7
 800bb44:	e9d0 4500 	ldrd	r4, r5, [r0]
 800bb48:	4620      	mov	r0, r4
 800bb4a:	1880      	adds	r0, r0, r2
 800bb4c:	f507 5cc3 	add.w	ip, r7, #6240	; 0x1860
 800bb50:	f8cc 0000 	str.w	r0, [ip]
 800bb54:	4628      	mov	r0, r5
 800bb56:	eb43 0000 	adc.w	r0, r3, r0
 800bb5a:	f641 0364 	movw	r3, #6244	; 0x1864
 800bb5e:	443b      	add	r3, r7
 800bb60:	6018      	str	r0, [r3, #0]
 800bb62:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 800bb66:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bb6a:	e9c1 3400 	strd	r3, r4, [r1]
 800bb6e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	3370      	adds	r3, #112	; 0x70
 800bb76:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bb7a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	3310      	adds	r3, #16
 800bb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb86:	ea80 0402 	eor.w	r4, r0, r2
 800bb8a:	f641 0558 	movw	r5, #6232	; 0x1858
 800bb8e:	443d      	add	r5, r7
 800bb90:	602c      	str	r4, [r5, #0]
 800bb92:	404b      	eors	r3, r1
 800bb94:	f641 025c 	movw	r2, #6236	; 0x185c
 800bb98:	443a      	add	r2, r7
 800bb9a:	6013      	str	r3, [r2, #0]
 800bb9c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800bba6:	2220      	movs	r2, #32
 800bba8:	f641 0358 	movw	r3, #6232	; 0x1858
 800bbac:	443b      	add	r3, r7
 800bbae:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bbb2:	f7fc fcc5 	bl	8008540 <rotr64>
 800bbb6:	4602      	mov	r2, r0
 800bbb8:	460b      	mov	r3, r1
 800bbba:	e9c4 2300 	strd	r2, r3, [r4]
 800bbbe:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	3350      	adds	r3, #80	; 0x50
 800bbc6:	e9d3 4500 	ldrd	r4, r5, [r3]
 800bbca:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	3370      	adds	r3, #112	; 0x70
 800bbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd6:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800bbda:	6809      	ldr	r1, [r1, #0]
 800bbdc:	3150      	adds	r1, #80	; 0x50
 800bbde:	18a0      	adds	r0, r4, r2
 800bbe0:	f641 0c50 	movw	ip, #6224	; 0x1850
 800bbe4:	44bc      	add	ip, r7
 800bbe6:	f8cc 0000 	str.w	r0, [ip]
 800bbea:	eb45 0303 	adc.w	r3, r5, r3
 800bbee:	f641 0254 	movw	r2, #6228	; 0x1854
 800bbf2:	443a      	add	r2, r7
 800bbf4:	6013      	str	r3, [r2, #0]
 800bbf6:	f641 0350 	movw	r3, #6224	; 0x1850
 800bbfa:	443b      	add	r3, r7
 800bbfc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bc00:	e9c1 3400 	strd	r3, r4, [r1]
 800bc04:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	3330      	adds	r3, #48	; 0x30
 800bc0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc10:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	3350      	adds	r3, #80	; 0x50
 800bc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc1c:	ea80 0402 	eor.w	r4, r0, r2
 800bc20:	f641 0548 	movw	r5, #6216	; 0x1848
 800bc24:	443d      	add	r5, r7
 800bc26:	602c      	str	r4, [r5, #0]
 800bc28:	404b      	eors	r3, r1
 800bc2a:	f641 024c 	movw	r2, #6220	; 0x184c
 800bc2e:	443a      	add	r2, r7
 800bc30:	6013      	str	r3, [r2, #0]
 800bc32:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800bc3c:	2218      	movs	r2, #24
 800bc3e:	f641 0348 	movw	r3, #6216	; 0x1848
 800bc42:	443b      	add	r3, r7
 800bc44:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc48:	f7fc fc7a 	bl	8008540 <rotr64>
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	460b      	mov	r3, r1
 800bc50:	e9c4 2300 	strd	r2, r3, [r4]
 800bc54:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	3310      	adds	r3, #16
 800bc5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc60:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	3330      	adds	r3, #48	; 0x30
 800bc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6c:	1884      	adds	r4, r0, r2
 800bc6e:	f507 55c2 	add.w	r5, r7, #6208	; 0x1840
 800bc72:	602c      	str	r4, [r5, #0]
 800bc74:	eb41 0303 	adc.w	r3, r1, r3
 800bc78:	f641 0244 	movw	r2, #6212	; 0x1844
 800bc7c:	443a      	add	r2, r7
 800bc7e:	6013      	str	r3, [r2, #0]
 800bc80:	2302      	movs	r3, #2
 800bc82:	00da      	lsls	r2, r3, #3
 800bc84:	f641 6324 	movw	r3, #7716	; 0x1e24
 800bc88:	443b      	add	r3, r7
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	4413      	add	r3, r2
 800bc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc92:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800bc96:	6809      	ldr	r1, [r1, #0]
 800bc98:	3110      	adds	r1, #16
 800bc9a:	f507 50c2 	add.w	r0, r7, #6208	; 0x1840
 800bc9e:	e9d0 4500 	ldrd	r4, r5, [r0]
 800bca2:	4620      	mov	r0, r4
 800bca4:	1880      	adds	r0, r0, r2
 800bca6:	f641 0c38 	movw	ip, #6200	; 0x1838
 800bcaa:	44bc      	add	ip, r7
 800bcac:	f8cc 0000 	str.w	r0, [ip]
 800bcb0:	4628      	mov	r0, r5
 800bcb2:	eb43 0000 	adc.w	r0, r3, r0
 800bcb6:	f641 033c 	movw	r3, #6204	; 0x183c
 800bcba:	443b      	add	r3, r7
 800bcbc:	6018      	str	r0, [r3, #0]
 800bcbe:	f641 0338 	movw	r3, #6200	; 0x1838
 800bcc2:	443b      	add	r3, r7
 800bcc4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bcc8:	e9c1 3400 	strd	r3, r4, [r1]
 800bccc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	3370      	adds	r3, #112	; 0x70
 800bcd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bcd8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	3310      	adds	r3, #16
 800bce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce4:	ea80 0402 	eor.w	r4, r0, r2
 800bce8:	f641 0530 	movw	r5, #6192	; 0x1830
 800bcec:	443d      	add	r5, r7
 800bcee:	602c      	str	r4, [r5, #0]
 800bcf0:	404b      	eors	r3, r1
 800bcf2:	f641 0234 	movw	r2, #6196	; 0x1834
 800bcf6:	443a      	add	r2, r7
 800bcf8:	6013      	str	r3, [r2, #0]
 800bcfa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800bd04:	2210      	movs	r2, #16
 800bd06:	f641 0330 	movw	r3, #6192	; 0x1830
 800bd0a:	443b      	add	r3, r7
 800bd0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd10:	f7fc fc16 	bl	8008540 <rotr64>
 800bd14:	4602      	mov	r2, r0
 800bd16:	460b      	mov	r3, r1
 800bd18:	e9c4 2300 	strd	r2, r3, [r4]
 800bd1c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	3350      	adds	r3, #80	; 0x50
 800bd24:	e9d3 4500 	ldrd	r4, r5, [r3]
 800bd28:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	3370      	adds	r3, #112	; 0x70
 800bd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd34:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800bd38:	6809      	ldr	r1, [r1, #0]
 800bd3a:	3150      	adds	r1, #80	; 0x50
 800bd3c:	18a0      	adds	r0, r4, r2
 800bd3e:	f641 0c28 	movw	ip, #6184	; 0x1828
 800bd42:	44bc      	add	ip, r7
 800bd44:	f8cc 0000 	str.w	r0, [ip]
 800bd48:	eb45 0303 	adc.w	r3, r5, r3
 800bd4c:	f641 022c 	movw	r2, #6188	; 0x182c
 800bd50:	443a      	add	r2, r7
 800bd52:	6013      	str	r3, [r2, #0]
 800bd54:	f641 0328 	movw	r3, #6184	; 0x1828
 800bd58:	443b      	add	r3, r7
 800bd5a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bd5e:	e9c1 3400 	strd	r3, r4, [r1]
 800bd62:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	3330      	adds	r3, #48	; 0x30
 800bd6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd6e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	3350      	adds	r3, #80	; 0x50
 800bd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7a:	ea80 0402 	eor.w	r4, r0, r2
 800bd7e:	f507 55c1 	add.w	r5, r7, #6176	; 0x1820
 800bd82:	602c      	str	r4, [r5, #0]
 800bd84:	404b      	eors	r3, r1
 800bd86:	f641 0224 	movw	r2, #6180	; 0x1824
 800bd8a:	443a      	add	r2, r7
 800bd8c:	6013      	str	r3, [r2, #0]
 800bd8e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800bd98:	223f      	movs	r2, #63	; 0x3f
 800bd9a:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 800bd9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bda2:	f7fc fbcd 	bl	8008540 <rotr64>
 800bda6:	4602      	mov	r2, r0
 800bda8:	460b      	mov	r3, r1
 800bdaa:	e9c4 2300 	strd	r2, r3, [r4]
 800bdae:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	3318      	adds	r3, #24
 800bdb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bdba:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	3338      	adds	r3, #56	; 0x38
 800bdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc6:	1884      	adds	r4, r0, r2
 800bdc8:	f641 0518 	movw	r5, #6168	; 0x1818
 800bdcc:	443d      	add	r5, r7
 800bdce:	602c      	str	r4, [r5, #0]
 800bdd0:	eb41 0303 	adc.w	r3, r1, r3
 800bdd4:	f641 021c 	movw	r2, #6172	; 0x181c
 800bdd8:	443a      	add	r2, r7
 800bdda:	6013      	str	r3, [r2, #0]
 800bddc:	230f      	movs	r3, #15
 800bdde:	00da      	lsls	r2, r3, #3
 800bde0:	f641 6324 	movw	r3, #7716	; 0x1e24
 800bde4:	443b      	add	r3, r7
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	4413      	add	r3, r2
 800bdea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdee:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800bdf2:	6809      	ldr	r1, [r1, #0]
 800bdf4:	3118      	adds	r1, #24
 800bdf6:	f641 0018 	movw	r0, #6168	; 0x1818
 800bdfa:	4438      	add	r0, r7
 800bdfc:	e9d0 4500 	ldrd	r4, r5, [r0]
 800be00:	4620      	mov	r0, r4
 800be02:	1880      	adds	r0, r0, r2
 800be04:	f641 0c10 	movw	ip, #6160	; 0x1810
 800be08:	44bc      	add	ip, r7
 800be0a:	f8cc 0000 	str.w	r0, [ip]
 800be0e:	4628      	mov	r0, r5
 800be10:	eb43 0000 	adc.w	r0, r3, r0
 800be14:	f641 0314 	movw	r3, #6164	; 0x1814
 800be18:	443b      	add	r3, r7
 800be1a:	6018      	str	r0, [r3, #0]
 800be1c:	f641 0310 	movw	r3, #6160	; 0x1810
 800be20:	443b      	add	r3, r7
 800be22:	e9d3 3400 	ldrd	r3, r4, [r3]
 800be26:	e9c1 3400 	strd	r3, r4, [r1]
 800be2a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	3378      	adds	r3, #120	; 0x78
 800be32:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be36:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	3318      	adds	r3, #24
 800be3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be42:	ea80 0402 	eor.w	r4, r0, r2
 800be46:	f641 0508 	movw	r5, #6152	; 0x1808
 800be4a:	443d      	add	r5, r7
 800be4c:	602c      	str	r4, [r5, #0]
 800be4e:	404b      	eors	r3, r1
 800be50:	f641 020c 	movw	r2, #6156	; 0x180c
 800be54:	443a      	add	r2, r7
 800be56:	6013      	str	r3, [r2, #0]
 800be58:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800be62:	2220      	movs	r2, #32
 800be64:	f641 0308 	movw	r3, #6152	; 0x1808
 800be68:	443b      	add	r3, r7
 800be6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be6e:	f7fc fb67 	bl	8008540 <rotr64>
 800be72:	4602      	mov	r2, r0
 800be74:	460b      	mov	r3, r1
 800be76:	e9c4 2300 	strd	r2, r3, [r4]
 800be7a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	3358      	adds	r3, #88	; 0x58
 800be82:	e9d3 4500 	ldrd	r4, r5, [r3]
 800be86:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	3378      	adds	r3, #120	; 0x78
 800be8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be92:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800be96:	6809      	ldr	r1, [r1, #0]
 800be98:	3158      	adds	r1, #88	; 0x58
 800be9a:	18a0      	adds	r0, r4, r2
 800be9c:	f507 5cc0 	add.w	ip, r7, #6144	; 0x1800
 800bea0:	f8cc 0000 	str.w	r0, [ip]
 800bea4:	eb45 0303 	adc.w	r3, r5, r3
 800bea8:	f641 0204 	movw	r2, #6148	; 0x1804
 800beac:	443a      	add	r2, r7
 800beae:	6013      	str	r3, [r2, #0]
 800beb0:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 800beb4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800beb8:	e9c1 3400 	strd	r3, r4, [r1]
 800bebc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	3338      	adds	r3, #56	; 0x38
 800bec4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bec8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	3358      	adds	r3, #88	; 0x58
 800bed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed4:	ea80 0402 	eor.w	r4, r0, r2
 800bed8:	f241 75f8 	movw	r5, #6136	; 0x17f8
 800bedc:	443d      	add	r5, r7
 800bede:	602c      	str	r4, [r5, #0]
 800bee0:	404b      	eors	r3, r1
 800bee2:	f241 72fc 	movw	r2, #6140	; 0x17fc
 800bee6:	443a      	add	r2, r7
 800bee8:	6013      	str	r3, [r2, #0]
 800beea:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800bef4:	2218      	movs	r2, #24
 800bef6:	f241 73f8 	movw	r3, #6136	; 0x17f8
 800befa:	443b      	add	r3, r7
 800befc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bf00:	f7fc fb1e 	bl	8008540 <rotr64>
 800bf04:	4602      	mov	r2, r0
 800bf06:	460b      	mov	r3, r1
 800bf08:	e9c4 2300 	strd	r2, r3, [r4]
 800bf0c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	3318      	adds	r3, #24
 800bf14:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bf18:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	3338      	adds	r3, #56	; 0x38
 800bf20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf24:	1884      	adds	r4, r0, r2
 800bf26:	f241 75f0 	movw	r5, #6128	; 0x17f0
 800bf2a:	443d      	add	r5, r7
 800bf2c:	602c      	str	r4, [r5, #0]
 800bf2e:	eb41 0303 	adc.w	r3, r1, r3
 800bf32:	f241 72f4 	movw	r2, #6132	; 0x17f4
 800bf36:	443a      	add	r2, r7
 800bf38:	6013      	str	r3, [r2, #0]
 800bf3a:	230d      	movs	r3, #13
 800bf3c:	00da      	lsls	r2, r3, #3
 800bf3e:	f641 6324 	movw	r3, #7716	; 0x1e24
 800bf42:	443b      	add	r3, r7
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	4413      	add	r3, r2
 800bf48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4c:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800bf50:	6809      	ldr	r1, [r1, #0]
 800bf52:	3118      	adds	r1, #24
 800bf54:	f241 70f0 	movw	r0, #6128	; 0x17f0
 800bf58:	4438      	add	r0, r7
 800bf5a:	e9d0 4500 	ldrd	r4, r5, [r0]
 800bf5e:	4620      	mov	r0, r4
 800bf60:	1880      	adds	r0, r0, r2
 800bf62:	f241 7ce8 	movw	ip, #6120	; 0x17e8
 800bf66:	44bc      	add	ip, r7
 800bf68:	f8cc 0000 	str.w	r0, [ip]
 800bf6c:	4628      	mov	r0, r5
 800bf6e:	eb43 0000 	adc.w	r0, r3, r0
 800bf72:	f241 73ec 	movw	r3, #6124	; 0x17ec
 800bf76:	443b      	add	r3, r7
 800bf78:	6018      	str	r0, [r3, #0]
 800bf7a:	f241 73e8 	movw	r3, #6120	; 0x17e8
 800bf7e:	443b      	add	r3, r7
 800bf80:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bf84:	e9c1 3400 	strd	r3, r4, [r1]
 800bf88:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	3378      	adds	r3, #120	; 0x78
 800bf90:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bf94:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	3318      	adds	r3, #24
 800bf9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa0:	ea80 0402 	eor.w	r4, r0, r2
 800bfa4:	f507 55bf 	add.w	r5, r7, #6112	; 0x17e0
 800bfa8:	602c      	str	r4, [r5, #0]
 800bfaa:	404b      	eors	r3, r1
 800bfac:	f241 72e4 	movw	r2, #6116	; 0x17e4
 800bfb0:	443a      	add	r2, r7
 800bfb2:	6013      	str	r3, [r2, #0]
 800bfb4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800bfbe:	2210      	movs	r2, #16
 800bfc0:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 800bfc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bfc8:	f7fc faba 	bl	8008540 <rotr64>
 800bfcc:	4602      	mov	r2, r0
 800bfce:	460b      	mov	r3, r1
 800bfd0:	e9c4 2300 	strd	r2, r3, [r4]
 800bfd4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	3358      	adds	r3, #88	; 0x58
 800bfdc:	e9d3 4500 	ldrd	r4, r5, [r3]
 800bfe0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	3378      	adds	r3, #120	; 0x78
 800bfe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfec:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800bff0:	6809      	ldr	r1, [r1, #0]
 800bff2:	3158      	adds	r1, #88	; 0x58
 800bff4:	18a0      	adds	r0, r4, r2
 800bff6:	f241 7cd8 	movw	ip, #6104	; 0x17d8
 800bffa:	44bc      	add	ip, r7
 800bffc:	f8cc 0000 	str.w	r0, [ip]
 800c000:	eb45 0303 	adc.w	r3, r5, r3
 800c004:	f241 72dc 	movw	r2, #6108	; 0x17dc
 800c008:	443a      	add	r2, r7
 800c00a:	6013      	str	r3, [r2, #0]
 800c00c:	f241 73d8 	movw	r3, #6104	; 0x17d8
 800c010:	443b      	add	r3, r7
 800c012:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c016:	e9c1 3400 	strd	r3, r4, [r1]
 800c01a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	3338      	adds	r3, #56	; 0x38
 800c022:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c026:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	3358      	adds	r3, #88	; 0x58
 800c02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c032:	ea80 0402 	eor.w	r4, r0, r2
 800c036:	f241 75d0 	movw	r5, #6096	; 0x17d0
 800c03a:	443d      	add	r5, r7
 800c03c:	602c      	str	r4, [r5, #0]
 800c03e:	404b      	eors	r3, r1
 800c040:	f241 72d4 	movw	r2, #6100	; 0x17d4
 800c044:	443a      	add	r2, r7
 800c046:	6013      	str	r3, [r2, #0]
 800c048:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800c052:	223f      	movs	r2, #63	; 0x3f
 800c054:	f241 73d0 	movw	r3, #6096	; 0x17d0
 800c058:	443b      	add	r3, r7
 800c05a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c05e:	f7fc fa6f 	bl	8008540 <rotr64>
 800c062:	4602      	mov	r2, r0
 800c064:	460b      	mov	r3, r1
 800c066:	e9c4 2300 	strd	r2, r3, [r4]
 800c06a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c074:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	3328      	adds	r3, #40	; 0x28
 800c07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c080:	1884      	adds	r4, r0, r2
 800c082:	f241 75c8 	movw	r5, #6088	; 0x17c8
 800c086:	443d      	add	r5, r7
 800c088:	602c      	str	r4, [r5, #0]
 800c08a:	eb41 0303 	adc.w	r3, r1, r3
 800c08e:	f241 72cc 	movw	r2, #6092	; 0x17cc
 800c092:	443a      	add	r2, r7
 800c094:	6013      	str	r3, [r2, #0]
 800c096:	230a      	movs	r3, #10
 800c098:	00da      	lsls	r2, r3, #3
 800c09a:	f641 6324 	movw	r3, #7716	; 0x1e24
 800c09e:	443b      	add	r3, r7
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	4413      	add	r3, r2
 800c0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a8:	f241 71c8 	movw	r1, #6088	; 0x17c8
 800c0ac:	4439      	add	r1, r7
 800c0ae:	e9d1 4500 	ldrd	r4, r5, [r1]
 800c0b2:	4621      	mov	r1, r4
 800c0b4:	1889      	adds	r1, r1, r2
 800c0b6:	f507 50be 	add.w	r0, r7, #6080	; 0x17c0
 800c0ba:	6001      	str	r1, [r0, #0]
 800c0bc:	4629      	mov	r1, r5
 800c0be:	eb43 0101 	adc.w	r1, r3, r1
 800c0c2:	f241 73c4 	movw	r3, #6084	; 0x17c4
 800c0c6:	443b      	add	r3, r7
 800c0c8:	6019      	str	r1, [r3, #0]
 800c0ca:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f507 52be 	add.w	r2, r7, #6080	; 0x17c0
 800c0d4:	e9d2 1200 	ldrd	r1, r2, [r2]
 800c0d8:	e9c3 1200 	strd	r1, r2, [r3]
 800c0dc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	3378      	adds	r3, #120	; 0x78
 800c0e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c0e8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f2:	ea80 0402 	eor.w	r4, r0, r2
 800c0f6:	f241 75b8 	movw	r5, #6072	; 0x17b8
 800c0fa:	443d      	add	r5, r7
 800c0fc:	602c      	str	r4, [r5, #0]
 800c0fe:	404b      	eors	r3, r1
 800c100:	f241 72bc 	movw	r2, #6076	; 0x17bc
 800c104:	443a      	add	r2, r7
 800c106:	6013      	str	r3, [r2, #0]
 800c108:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800c112:	2220      	movs	r2, #32
 800c114:	f241 73b8 	movw	r3, #6072	; 0x17b8
 800c118:	443b      	add	r3, r7
 800c11a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c11e:	f7fc fa0f 	bl	8008540 <rotr64>
 800c122:	4602      	mov	r2, r0
 800c124:	460b      	mov	r3, r1
 800c126:	e9c4 2300 	strd	r2, r3, [r4]
 800c12a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	3350      	adds	r3, #80	; 0x50
 800c132:	e9d3 4500 	ldrd	r4, r5, [r3]
 800c136:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	3378      	adds	r3, #120	; 0x78
 800c13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c142:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800c146:	6809      	ldr	r1, [r1, #0]
 800c148:	3150      	adds	r1, #80	; 0x50
 800c14a:	18a0      	adds	r0, r4, r2
 800c14c:	f241 7cb0 	movw	ip, #6064	; 0x17b0
 800c150:	44bc      	add	ip, r7
 800c152:	f8cc 0000 	str.w	r0, [ip]
 800c156:	eb45 0303 	adc.w	r3, r5, r3
 800c15a:	f241 72b4 	movw	r2, #6068	; 0x17b4
 800c15e:	443a      	add	r2, r7
 800c160:	6013      	str	r3, [r2, #0]
 800c162:	f241 73b0 	movw	r3, #6064	; 0x17b0
 800c166:	443b      	add	r3, r7
 800c168:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c16c:	e9c1 3400 	strd	r3, r4, [r1]
 800c170:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	3328      	adds	r3, #40	; 0x28
 800c178:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c17c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	3350      	adds	r3, #80	; 0x50
 800c184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c188:	ea80 0402 	eor.w	r4, r0, r2
 800c18c:	f241 75a8 	movw	r5, #6056	; 0x17a8
 800c190:	443d      	add	r5, r7
 800c192:	602c      	str	r4, [r5, #0]
 800c194:	404b      	eors	r3, r1
 800c196:	f241 72ac 	movw	r2, #6060	; 0x17ac
 800c19a:	443a      	add	r2, r7
 800c19c:	6013      	str	r3, [r2, #0]
 800c19e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800c1a8:	2218      	movs	r2, #24
 800c1aa:	f241 73a8 	movw	r3, #6056	; 0x17a8
 800c1ae:	443b      	add	r3, r7
 800c1b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c1b4:	f7fc f9c4 	bl	8008540 <rotr64>
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	460b      	mov	r3, r1
 800c1bc:	e9c4 2300 	strd	r2, r3, [r4]
 800c1c0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c1ca:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	3328      	adds	r3, #40	; 0x28
 800c1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d6:	1884      	adds	r4, r0, r2
 800c1d8:	f507 55bd 	add.w	r5, r7, #6048	; 0x17a0
 800c1dc:	602c      	str	r4, [r5, #0]
 800c1de:	eb41 0303 	adc.w	r3, r1, r3
 800c1e2:	f241 72a4 	movw	r2, #6052	; 0x17a4
 800c1e6:	443a      	add	r2, r7
 800c1e8:	6013      	str	r3, [r2, #0]
 800c1ea:	230e      	movs	r3, #14
 800c1ec:	00da      	lsls	r2, r3, #3
 800c1ee:	f641 6324 	movw	r3, #7716	; 0x1e24
 800c1f2:	443b      	add	r3, r7
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	4413      	add	r3, r2
 800c1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1fc:	f507 51bd 	add.w	r1, r7, #6048	; 0x17a0
 800c200:	e9d1 4500 	ldrd	r4, r5, [r1]
 800c204:	4621      	mov	r1, r4
 800c206:	1889      	adds	r1, r1, r2
 800c208:	f241 7098 	movw	r0, #6040	; 0x1798
 800c20c:	4438      	add	r0, r7
 800c20e:	6001      	str	r1, [r0, #0]
 800c210:	4629      	mov	r1, r5
 800c212:	eb43 0101 	adc.w	r1, r3, r1
 800c216:	f241 739c 	movw	r3, #6044	; 0x179c
 800c21a:	443b      	add	r3, r7
 800c21c:	6019      	str	r1, [r3, #0]
 800c21e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f241 7298 	movw	r2, #6040	; 0x1798
 800c228:	443a      	add	r2, r7
 800c22a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800c22e:	e9c3 1200 	strd	r1, r2, [r3]
 800c232:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	3378      	adds	r3, #120	; 0x78
 800c23a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c23e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c248:	ea80 0402 	eor.w	r4, r0, r2
 800c24c:	f241 7590 	movw	r5, #6032	; 0x1790
 800c250:	443d      	add	r5, r7
 800c252:	602c      	str	r4, [r5, #0]
 800c254:	404b      	eors	r3, r1
 800c256:	f241 7294 	movw	r2, #6036	; 0x1794
 800c25a:	443a      	add	r2, r7
 800c25c:	6013      	str	r3, [r2, #0]
 800c25e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800c268:	2210      	movs	r2, #16
 800c26a:	f241 7390 	movw	r3, #6032	; 0x1790
 800c26e:	443b      	add	r3, r7
 800c270:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c274:	f7fc f964 	bl	8008540 <rotr64>
 800c278:	4602      	mov	r2, r0
 800c27a:	460b      	mov	r3, r1
 800c27c:	e9c4 2300 	strd	r2, r3, [r4]
 800c280:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	3350      	adds	r3, #80	; 0x50
 800c288:	e9d3 4500 	ldrd	r4, r5, [r3]
 800c28c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	3378      	adds	r3, #120	; 0x78
 800c294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c298:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800c29c:	6809      	ldr	r1, [r1, #0]
 800c29e:	3150      	adds	r1, #80	; 0x50
 800c2a0:	18a0      	adds	r0, r4, r2
 800c2a2:	f241 7c88 	movw	ip, #6024	; 0x1788
 800c2a6:	44bc      	add	ip, r7
 800c2a8:	f8cc 0000 	str.w	r0, [ip]
 800c2ac:	eb45 0303 	adc.w	r3, r5, r3
 800c2b0:	f241 728c 	movw	r2, #6028	; 0x178c
 800c2b4:	443a      	add	r2, r7
 800c2b6:	6013      	str	r3, [r2, #0]
 800c2b8:	f241 7388 	movw	r3, #6024	; 0x1788
 800c2bc:	443b      	add	r3, r7
 800c2be:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c2c2:	e9c1 3400 	strd	r3, r4, [r1]
 800c2c6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	3328      	adds	r3, #40	; 0x28
 800c2ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c2d2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	3350      	adds	r3, #80	; 0x50
 800c2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2de:	ea80 0402 	eor.w	r4, r0, r2
 800c2e2:	f507 55bc 	add.w	r5, r7, #6016	; 0x1780
 800c2e6:	602c      	str	r4, [r5, #0]
 800c2e8:	404b      	eors	r3, r1
 800c2ea:	f241 7284 	movw	r2, #6020	; 0x1784
 800c2ee:	443a      	add	r2, r7
 800c2f0:	6013      	str	r3, [r2, #0]
 800c2f2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800c2fc:	223f      	movs	r2, #63	; 0x3f
 800c2fe:	f507 53bc 	add.w	r3, r7, #6016	; 0x1780
 800c302:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c306:	f7fc f91b 	bl	8008540 <rotr64>
 800c30a:	4602      	mov	r2, r0
 800c30c:	460b      	mov	r3, r1
 800c30e:	e9c4 2300 	strd	r2, r3, [r4]
 800c312:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	3308      	adds	r3, #8
 800c31a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c31e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	3330      	adds	r3, #48	; 0x30
 800c326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32a:	1884      	adds	r4, r0, r2
 800c32c:	f241 7578 	movw	r5, #6008	; 0x1778
 800c330:	443d      	add	r5, r7
 800c332:	602c      	str	r4, [r5, #0]
 800c334:	eb41 0303 	adc.w	r3, r1, r3
 800c338:	f241 727c 	movw	r2, #6012	; 0x177c
 800c33c:	443a      	add	r2, r7
 800c33e:	6013      	str	r3, [r2, #0]
 800c340:	2303      	movs	r3, #3
 800c342:	00da      	lsls	r2, r3, #3
 800c344:	f641 6324 	movw	r3, #7716	; 0x1e24
 800c348:	443b      	add	r3, r7
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	4413      	add	r3, r2
 800c34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c352:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800c356:	6809      	ldr	r1, [r1, #0]
 800c358:	3108      	adds	r1, #8
 800c35a:	f241 7078 	movw	r0, #6008	; 0x1778
 800c35e:	4438      	add	r0, r7
 800c360:	e9d0 4500 	ldrd	r4, r5, [r0]
 800c364:	4620      	mov	r0, r4
 800c366:	1880      	adds	r0, r0, r2
 800c368:	f241 7c70 	movw	ip, #6000	; 0x1770
 800c36c:	44bc      	add	ip, r7
 800c36e:	f8cc 0000 	str.w	r0, [ip]
 800c372:	4628      	mov	r0, r5
 800c374:	eb43 0000 	adc.w	r0, r3, r0
 800c378:	f241 7374 	movw	r3, #6004	; 0x1774
 800c37c:	443b      	add	r3, r7
 800c37e:	6018      	str	r0, [r3, #0]
 800c380:	f241 7370 	movw	r3, #6000	; 0x1770
 800c384:	443b      	add	r3, r7
 800c386:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c38a:	e9c1 3400 	strd	r3, r4, [r1]
 800c38e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	3360      	adds	r3, #96	; 0x60
 800c396:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c39a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	3308      	adds	r3, #8
 800c3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a6:	ea80 0402 	eor.w	r4, r0, r2
 800c3aa:	f241 7568 	movw	r5, #5992	; 0x1768
 800c3ae:	443d      	add	r5, r7
 800c3b0:	602c      	str	r4, [r5, #0]
 800c3b2:	404b      	eors	r3, r1
 800c3b4:	f241 726c 	movw	r2, #5996	; 0x176c
 800c3b8:	443a      	add	r2, r7
 800c3ba:	6013      	str	r3, [r2, #0]
 800c3bc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800c3c6:	2220      	movs	r2, #32
 800c3c8:	f241 7368 	movw	r3, #5992	; 0x1768
 800c3cc:	443b      	add	r3, r7
 800c3ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c3d2:	f7fc f8b5 	bl	8008540 <rotr64>
 800c3d6:	4602      	mov	r2, r0
 800c3d8:	460b      	mov	r3, r1
 800c3da:	e9c4 2300 	strd	r2, r3, [r4]
 800c3de:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	3358      	adds	r3, #88	; 0x58
 800c3e6:	e9d3 4500 	ldrd	r4, r5, [r3]
 800c3ea:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	3360      	adds	r3, #96	; 0x60
 800c3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f6:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800c3fa:	6809      	ldr	r1, [r1, #0]
 800c3fc:	3158      	adds	r1, #88	; 0x58
 800c3fe:	18a0      	adds	r0, r4, r2
 800c400:	f507 5cbb 	add.w	ip, r7, #5984	; 0x1760
 800c404:	f8cc 0000 	str.w	r0, [ip]
 800c408:	eb45 0303 	adc.w	r3, r5, r3
 800c40c:	f241 7264 	movw	r2, #5988	; 0x1764
 800c410:	443a      	add	r2, r7
 800c412:	6013      	str	r3, [r2, #0]
 800c414:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 800c418:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c41c:	e9c1 3400 	strd	r3, r4, [r1]
 800c420:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	3330      	adds	r3, #48	; 0x30
 800c428:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c42c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	3358      	adds	r3, #88	; 0x58
 800c434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c438:	ea80 0402 	eor.w	r4, r0, r2
 800c43c:	f241 7558 	movw	r5, #5976	; 0x1758
 800c440:	443d      	add	r5, r7
 800c442:	602c      	str	r4, [r5, #0]
 800c444:	404b      	eors	r3, r1
 800c446:	f241 725c 	movw	r2, #5980	; 0x175c
 800c44a:	443a      	add	r2, r7
 800c44c:	6013      	str	r3, [r2, #0]
 800c44e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800c458:	2218      	movs	r2, #24
 800c45a:	f241 7358 	movw	r3, #5976	; 0x1758
 800c45e:	443b      	add	r3, r7
 800c460:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c464:	f7fc f86c 	bl	8008540 <rotr64>
 800c468:	4602      	mov	r2, r0
 800c46a:	460b      	mov	r3, r1
 800c46c:	e9c4 2300 	strd	r2, r3, [r4]
 800c470:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	3308      	adds	r3, #8
 800c478:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c47c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	3330      	adds	r3, #48	; 0x30
 800c484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c488:	1884      	adds	r4, r0, r2
 800c48a:	f241 7550 	movw	r5, #5968	; 0x1750
 800c48e:	443d      	add	r5, r7
 800c490:	602c      	str	r4, [r5, #0]
 800c492:	eb41 0303 	adc.w	r3, r1, r3
 800c496:	f241 7254 	movw	r2, #5972	; 0x1754
 800c49a:	443a      	add	r2, r7
 800c49c:	6013      	str	r3, [r2, #0]
 800c49e:	2306      	movs	r3, #6
 800c4a0:	00da      	lsls	r2, r3, #3
 800c4a2:	f641 6324 	movw	r3, #7716	; 0x1e24
 800c4a6:	443b      	add	r3, r7
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	4413      	add	r3, r2
 800c4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b0:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800c4b4:	6809      	ldr	r1, [r1, #0]
 800c4b6:	3108      	adds	r1, #8
 800c4b8:	f241 7050 	movw	r0, #5968	; 0x1750
 800c4bc:	4438      	add	r0, r7
 800c4be:	e9d0 4500 	ldrd	r4, r5, [r0]
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	1880      	adds	r0, r0, r2
 800c4c6:	f241 7c48 	movw	ip, #5960	; 0x1748
 800c4ca:	44bc      	add	ip, r7
 800c4cc:	f8cc 0000 	str.w	r0, [ip]
 800c4d0:	4628      	mov	r0, r5
 800c4d2:	eb43 0000 	adc.w	r0, r3, r0
 800c4d6:	f241 734c 	movw	r3, #5964	; 0x174c
 800c4da:	443b      	add	r3, r7
 800c4dc:	6018      	str	r0, [r3, #0]
 800c4de:	f241 7348 	movw	r3, #5960	; 0x1748
 800c4e2:	443b      	add	r3, r7
 800c4e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c4e8:	e9c1 3400 	strd	r3, r4, [r1]
 800c4ec:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	3360      	adds	r3, #96	; 0x60
 800c4f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c4f8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	3308      	adds	r3, #8
 800c500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c504:	ea80 0402 	eor.w	r4, r0, r2
 800c508:	f507 55ba 	add.w	r5, r7, #5952	; 0x1740
 800c50c:	602c      	str	r4, [r5, #0]
 800c50e:	404b      	eors	r3, r1
 800c510:	f241 7244 	movw	r2, #5956	; 0x1744
 800c514:	443a      	add	r2, r7
 800c516:	6013      	str	r3, [r2, #0]
 800c518:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800c522:	2210      	movs	r2, #16
 800c524:	f507 53ba 	add.w	r3, r7, #5952	; 0x1740
 800c528:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c52c:	f7fc f808 	bl	8008540 <rotr64>
 800c530:	4602      	mov	r2, r0
 800c532:	460b      	mov	r3, r1
 800c534:	e9c4 2300 	strd	r2, r3, [r4]
 800c538:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	3358      	adds	r3, #88	; 0x58
 800c540:	e9d3 4500 	ldrd	r4, r5, [r3]
 800c544:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	3360      	adds	r3, #96	; 0x60
 800c54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c550:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800c554:	6809      	ldr	r1, [r1, #0]
 800c556:	3158      	adds	r1, #88	; 0x58
 800c558:	18a0      	adds	r0, r4, r2
 800c55a:	f241 7c38 	movw	ip, #5944	; 0x1738
 800c55e:	44bc      	add	ip, r7
 800c560:	f8cc 0000 	str.w	r0, [ip]
 800c564:	eb45 0303 	adc.w	r3, r5, r3
 800c568:	f241 723c 	movw	r2, #5948	; 0x173c
 800c56c:	443a      	add	r2, r7
 800c56e:	6013      	str	r3, [r2, #0]
 800c570:	f241 7338 	movw	r3, #5944	; 0x1738
 800c574:	443b      	add	r3, r7
 800c576:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c57a:	e9c1 3400 	strd	r3, r4, [r1]
 800c57e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	3330      	adds	r3, #48	; 0x30
 800c586:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c58a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	3358      	adds	r3, #88	; 0x58
 800c592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c596:	ea80 0402 	eor.w	r4, r0, r2
 800c59a:	f241 7530 	movw	r5, #5936	; 0x1730
 800c59e:	443d      	add	r5, r7
 800c5a0:	602c      	str	r4, [r5, #0]
 800c5a2:	404b      	eors	r3, r1
 800c5a4:	f241 7234 	movw	r2, #5940	; 0x1734
 800c5a8:	443a      	add	r2, r7
 800c5aa:	6013      	str	r3, [r2, #0]
 800c5ac:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800c5b6:	223f      	movs	r2, #63	; 0x3f
 800c5b8:	f241 7330 	movw	r3, #5936	; 0x1730
 800c5bc:	443b      	add	r3, r7
 800c5be:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c5c2:	f7fb ffbd 	bl	8008540 <rotr64>
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	460b      	mov	r3, r1
 800c5ca:	e9c4 2300 	strd	r2, r3, [r4]
 800c5ce:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	3310      	adds	r3, #16
 800c5d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c5da:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	3338      	adds	r3, #56	; 0x38
 800c5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e6:	1884      	adds	r4, r0, r2
 800c5e8:	f241 7528 	movw	r5, #5928	; 0x1728
 800c5ec:	443d      	add	r5, r7
 800c5ee:	602c      	str	r4, [r5, #0]
 800c5f0:	eb41 0303 	adc.w	r3, r1, r3
 800c5f4:	f241 722c 	movw	r2, #5932	; 0x172c
 800c5f8:	443a      	add	r2, r7
 800c5fa:	6013      	str	r3, [r2, #0]
 800c5fc:	2307      	movs	r3, #7
 800c5fe:	00da      	lsls	r2, r3, #3
 800c600:	f641 6324 	movw	r3, #7716	; 0x1e24
 800c604:	443b      	add	r3, r7
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	4413      	add	r3, r2
 800c60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c60e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800c612:	6809      	ldr	r1, [r1, #0]
 800c614:	3110      	adds	r1, #16
 800c616:	f241 7028 	movw	r0, #5928	; 0x1728
 800c61a:	4438      	add	r0, r7
 800c61c:	e9d0 4500 	ldrd	r4, r5, [r0]
 800c620:	4620      	mov	r0, r4
 800c622:	1880      	adds	r0, r0, r2
 800c624:	f507 5cb9 	add.w	ip, r7, #5920	; 0x1720
 800c628:	f8cc 0000 	str.w	r0, [ip]
 800c62c:	4628      	mov	r0, r5
 800c62e:	eb43 0000 	adc.w	r0, r3, r0
 800c632:	f241 7324 	movw	r3, #5924	; 0x1724
 800c636:	443b      	add	r3, r7
 800c638:	6018      	str	r0, [r3, #0]
 800c63a:	f507 53b9 	add.w	r3, r7, #5920	; 0x1720
 800c63e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c642:	e9c1 3400 	strd	r3, r4, [r1]
 800c646:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	3368      	adds	r3, #104	; 0x68
 800c64e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c652:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	3310      	adds	r3, #16
 800c65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c65e:	ea80 0402 	eor.w	r4, r0, r2
 800c662:	f241 7518 	movw	r5, #5912	; 0x1718
 800c666:	443d      	add	r5, r7
 800c668:	602c      	str	r4, [r5, #0]
 800c66a:	404b      	eors	r3, r1
 800c66c:	f241 721c 	movw	r2, #5916	; 0x171c
 800c670:	443a      	add	r2, r7
 800c672:	6013      	str	r3, [r2, #0]
 800c674:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800c67e:	2220      	movs	r2, #32
 800c680:	f241 7318 	movw	r3, #5912	; 0x1718
 800c684:	443b      	add	r3, r7
 800c686:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c68a:	f7fb ff59 	bl	8008540 <rotr64>
 800c68e:	4602      	mov	r2, r0
 800c690:	460b      	mov	r3, r1
 800c692:	e9c4 2300 	strd	r2, r3, [r4]
 800c696:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	3340      	adds	r3, #64	; 0x40
 800c69e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800c6a2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	3368      	adds	r3, #104	; 0x68
 800c6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ae:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800c6b2:	6809      	ldr	r1, [r1, #0]
 800c6b4:	3140      	adds	r1, #64	; 0x40
 800c6b6:	18a0      	adds	r0, r4, r2
 800c6b8:	f241 7c10 	movw	ip, #5904	; 0x1710
 800c6bc:	44bc      	add	ip, r7
 800c6be:	f8cc 0000 	str.w	r0, [ip]
 800c6c2:	eb45 0303 	adc.w	r3, r5, r3
 800c6c6:	f241 7214 	movw	r2, #5908	; 0x1714
 800c6ca:	443a      	add	r2, r7
 800c6cc:	6013      	str	r3, [r2, #0]
 800c6ce:	f241 7310 	movw	r3, #5904	; 0x1710
 800c6d2:	443b      	add	r3, r7
 800c6d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c6d8:	e9c1 3400 	strd	r3, r4, [r1]
 800c6dc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	3338      	adds	r3, #56	; 0x38
 800c6e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c6e8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	3340      	adds	r3, #64	; 0x40
 800c6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f4:	ea80 0402 	eor.w	r4, r0, r2
 800c6f8:	f241 7508 	movw	r5, #5896	; 0x1708
 800c6fc:	443d      	add	r5, r7
 800c6fe:	602c      	str	r4, [r5, #0]
 800c700:	404b      	eors	r3, r1
 800c702:	f241 720c 	movw	r2, #5900	; 0x170c
 800c706:	443a      	add	r2, r7
 800c708:	6013      	str	r3, [r2, #0]
 800c70a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800c714:	2218      	movs	r2, #24
 800c716:	f241 7308 	movw	r3, #5896	; 0x1708
 800c71a:	443b      	add	r3, r7
 800c71c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c720:	f7fb ff0e 	bl	8008540 <rotr64>
 800c724:	4602      	mov	r2, r0
 800c726:	460b      	mov	r3, r1
 800c728:	e9c4 2300 	strd	r2, r3, [r4]
 800c72c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	3310      	adds	r3, #16
 800c734:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c738:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	3338      	adds	r3, #56	; 0x38
 800c740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c744:	1884      	adds	r4, r0, r2
 800c746:	f507 55b8 	add.w	r5, r7, #5888	; 0x1700
 800c74a:	602c      	str	r4, [r5, #0]
 800c74c:	eb41 0303 	adc.w	r3, r1, r3
 800c750:	f241 7204 	movw	r2, #5892	; 0x1704
 800c754:	443a      	add	r2, r7
 800c756:	6013      	str	r3, [r2, #0]
 800c758:	2301      	movs	r3, #1
 800c75a:	00da      	lsls	r2, r3, #3
 800c75c:	f641 6324 	movw	r3, #7716	; 0x1e24
 800c760:	443b      	add	r3, r7
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	4413      	add	r3, r2
 800c766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800c76e:	6809      	ldr	r1, [r1, #0]
 800c770:	3110      	adds	r1, #16
 800c772:	f507 50b8 	add.w	r0, r7, #5888	; 0x1700
 800c776:	e9d0 4500 	ldrd	r4, r5, [r0]
 800c77a:	4620      	mov	r0, r4
 800c77c:	1880      	adds	r0, r0, r2
 800c77e:	f241 6cf8 	movw	ip, #5880	; 0x16f8
 800c782:	44bc      	add	ip, r7
 800c784:	f8cc 0000 	str.w	r0, [ip]
 800c788:	4628      	mov	r0, r5
 800c78a:	eb43 0000 	adc.w	r0, r3, r0
 800c78e:	f241 63fc 	movw	r3, #5884	; 0x16fc
 800c792:	443b      	add	r3, r7
 800c794:	6018      	str	r0, [r3, #0]
 800c796:	f241 63f8 	movw	r3, #5880	; 0x16f8
 800c79a:	443b      	add	r3, r7
 800c79c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c7a0:	e9c1 3400 	strd	r3, r4, [r1]
 800c7a4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	3368      	adds	r3, #104	; 0x68
 800c7ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c7b0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	3310      	adds	r3, #16
 800c7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7bc:	ea80 0402 	eor.w	r4, r0, r2
 800c7c0:	f241 65f0 	movw	r5, #5872	; 0x16f0
 800c7c4:	443d      	add	r5, r7
 800c7c6:	602c      	str	r4, [r5, #0]
 800c7c8:	404b      	eors	r3, r1
 800c7ca:	f241 62f4 	movw	r2, #5876	; 0x16f4
 800c7ce:	443a      	add	r2, r7
 800c7d0:	6013      	str	r3, [r2, #0]
 800c7d2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800c7dc:	2210      	movs	r2, #16
 800c7de:	f241 63f0 	movw	r3, #5872	; 0x16f0
 800c7e2:	443b      	add	r3, r7
 800c7e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c7e8:	f7fb feaa 	bl	8008540 <rotr64>
 800c7ec:	4602      	mov	r2, r0
 800c7ee:	460b      	mov	r3, r1
 800c7f0:	e9c4 2300 	strd	r2, r3, [r4]
 800c7f4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	3340      	adds	r3, #64	; 0x40
 800c7fc:	e9d3 4500 	ldrd	r4, r5, [r3]
 800c800:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	3368      	adds	r3, #104	; 0x68
 800c808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c80c:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800c810:	6809      	ldr	r1, [r1, #0]
 800c812:	3140      	adds	r1, #64	; 0x40
 800c814:	18a0      	adds	r0, r4, r2
 800c816:	f241 6ce8 	movw	ip, #5864	; 0x16e8
 800c81a:	44bc      	add	ip, r7
 800c81c:	f8cc 0000 	str.w	r0, [ip]
 800c820:	eb45 0303 	adc.w	r3, r5, r3
 800c824:	f241 62ec 	movw	r2, #5868	; 0x16ec
 800c828:	443a      	add	r2, r7
 800c82a:	6013      	str	r3, [r2, #0]
 800c82c:	f241 63e8 	movw	r3, #5864	; 0x16e8
 800c830:	443b      	add	r3, r7
 800c832:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c836:	e9c1 3400 	strd	r3, r4, [r1]
 800c83a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	3338      	adds	r3, #56	; 0x38
 800c842:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c846:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	3340      	adds	r3, #64	; 0x40
 800c84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c852:	ea80 0402 	eor.w	r4, r0, r2
 800c856:	f507 55b7 	add.w	r5, r7, #5856	; 0x16e0
 800c85a:	602c      	str	r4, [r5, #0]
 800c85c:	404b      	eors	r3, r1
 800c85e:	f241 62e4 	movw	r2, #5860	; 0x16e4
 800c862:	443a      	add	r2, r7
 800c864:	6013      	str	r3, [r2, #0]
 800c866:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800c870:	223f      	movs	r2, #63	; 0x3f
 800c872:	f507 53b7 	add.w	r3, r7, #5856	; 0x16e0
 800c876:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c87a:	f7fb fe61 	bl	8008540 <rotr64>
 800c87e:	4602      	mov	r2, r0
 800c880:	460b      	mov	r3, r1
 800c882:	e9c4 2300 	strd	r2, r3, [r4]
 800c886:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	3318      	adds	r3, #24
 800c88e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c892:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	3320      	adds	r3, #32
 800c89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c89e:	1884      	adds	r4, r0, r2
 800c8a0:	f241 65d8 	movw	r5, #5848	; 0x16d8
 800c8a4:	443d      	add	r5, r7
 800c8a6:	602c      	str	r4, [r5, #0]
 800c8a8:	eb41 0303 	adc.w	r3, r1, r3
 800c8ac:	f241 62dc 	movw	r2, #5852	; 0x16dc
 800c8b0:	443a      	add	r2, r7
 800c8b2:	6013      	str	r3, [r2, #0]
 800c8b4:	2309      	movs	r3, #9
 800c8b6:	00da      	lsls	r2, r3, #3
 800c8b8:	f641 6324 	movw	r3, #7716	; 0x1e24
 800c8bc:	443b      	add	r3, r7
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	4413      	add	r3, r2
 800c8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c6:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800c8ca:	6809      	ldr	r1, [r1, #0]
 800c8cc:	3118      	adds	r1, #24
 800c8ce:	f241 60d8 	movw	r0, #5848	; 0x16d8
 800c8d2:	4438      	add	r0, r7
 800c8d4:	e9d0 4500 	ldrd	r4, r5, [r0]
 800c8d8:	4620      	mov	r0, r4
 800c8da:	1880      	adds	r0, r0, r2
 800c8dc:	f241 6cd0 	movw	ip, #5840	; 0x16d0
 800c8e0:	44bc      	add	ip, r7
 800c8e2:	f8cc 0000 	str.w	r0, [ip]
 800c8e6:	4628      	mov	r0, r5
 800c8e8:	eb43 0000 	adc.w	r0, r3, r0
 800c8ec:	f241 63d4 	movw	r3, #5844	; 0x16d4
 800c8f0:	443b      	add	r3, r7
 800c8f2:	6018      	str	r0, [r3, #0]
 800c8f4:	f241 63d0 	movw	r3, #5840	; 0x16d0
 800c8f8:	443b      	add	r3, r7
 800c8fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c8fe:	e9c1 3400 	strd	r3, r4, [r1]
 800c902:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	3370      	adds	r3, #112	; 0x70
 800c90a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c90e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	3318      	adds	r3, #24
 800c916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c91a:	ea80 0402 	eor.w	r4, r0, r2
 800c91e:	f241 65c8 	movw	r5, #5832	; 0x16c8
 800c922:	443d      	add	r5, r7
 800c924:	602c      	str	r4, [r5, #0]
 800c926:	404b      	eors	r3, r1
 800c928:	f241 62cc 	movw	r2, #5836	; 0x16cc
 800c92c:	443a      	add	r2, r7
 800c92e:	6013      	str	r3, [r2, #0]
 800c930:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800c93a:	2220      	movs	r2, #32
 800c93c:	f241 63c8 	movw	r3, #5832	; 0x16c8
 800c940:	443b      	add	r3, r7
 800c942:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c946:	f7fb fdfb 	bl	8008540 <rotr64>
 800c94a:	4602      	mov	r2, r0
 800c94c:	460b      	mov	r3, r1
 800c94e:	e9c4 2300 	strd	r2, r3, [r4]
 800c952:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	3348      	adds	r3, #72	; 0x48
 800c95a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800c95e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	3370      	adds	r3, #112	; 0x70
 800c966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800c96e:	6809      	ldr	r1, [r1, #0]
 800c970:	3148      	adds	r1, #72	; 0x48
 800c972:	18a0      	adds	r0, r4, r2
 800c974:	f507 5cb6 	add.w	ip, r7, #5824	; 0x16c0
 800c978:	f8cc 0000 	str.w	r0, [ip]
 800c97c:	eb45 0303 	adc.w	r3, r5, r3
 800c980:	f241 62c4 	movw	r2, #5828	; 0x16c4
 800c984:	443a      	add	r2, r7
 800c986:	6013      	str	r3, [r2, #0]
 800c988:	f507 53b6 	add.w	r3, r7, #5824	; 0x16c0
 800c98c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c990:	e9c1 3400 	strd	r3, r4, [r1]
 800c994:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	3320      	adds	r3, #32
 800c99c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c9a0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	3348      	adds	r3, #72	; 0x48
 800c9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ac:	ea80 0402 	eor.w	r4, r0, r2
 800c9b0:	f241 65b8 	movw	r5, #5816	; 0x16b8
 800c9b4:	443d      	add	r5, r7
 800c9b6:	602c      	str	r4, [r5, #0]
 800c9b8:	404b      	eors	r3, r1
 800c9ba:	f241 62bc 	movw	r2, #5820	; 0x16bc
 800c9be:	443a      	add	r2, r7
 800c9c0:	6013      	str	r3, [r2, #0]
 800c9c2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f103 0420 	add.w	r4, r3, #32
 800c9cc:	2218      	movs	r2, #24
 800c9ce:	f241 63b8 	movw	r3, #5816	; 0x16b8
 800c9d2:	443b      	add	r3, r7
 800c9d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c9d8:	f7fb fdb2 	bl	8008540 <rotr64>
 800c9dc:	4602      	mov	r2, r0
 800c9de:	460b      	mov	r3, r1
 800c9e0:	e9c4 2300 	strd	r2, r3, [r4]
 800c9e4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	3318      	adds	r3, #24
 800c9ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c9f0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	3320      	adds	r3, #32
 800c9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fc:	1884      	adds	r4, r0, r2
 800c9fe:	f241 65b0 	movw	r5, #5808	; 0x16b0
 800ca02:	443d      	add	r5, r7
 800ca04:	602c      	str	r4, [r5, #0]
 800ca06:	eb41 0303 	adc.w	r3, r1, r3
 800ca0a:	f241 62b4 	movw	r2, #5812	; 0x16b4
 800ca0e:	443a      	add	r2, r7
 800ca10:	6013      	str	r3, [r2, #0]
 800ca12:	2304      	movs	r3, #4
 800ca14:	00da      	lsls	r2, r3, #3
 800ca16:	f641 6324 	movw	r3, #7716	; 0x1e24
 800ca1a:	443b      	add	r3, r7
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	4413      	add	r3, r2
 800ca20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca24:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800ca28:	6809      	ldr	r1, [r1, #0]
 800ca2a:	3118      	adds	r1, #24
 800ca2c:	f241 60b0 	movw	r0, #5808	; 0x16b0
 800ca30:	4438      	add	r0, r7
 800ca32:	e9d0 4500 	ldrd	r4, r5, [r0]
 800ca36:	4620      	mov	r0, r4
 800ca38:	1880      	adds	r0, r0, r2
 800ca3a:	f241 6ca8 	movw	ip, #5800	; 0x16a8
 800ca3e:	44bc      	add	ip, r7
 800ca40:	f8cc 0000 	str.w	r0, [ip]
 800ca44:	4628      	mov	r0, r5
 800ca46:	eb43 0000 	adc.w	r0, r3, r0
 800ca4a:	f241 63ac 	movw	r3, #5804	; 0x16ac
 800ca4e:	443b      	add	r3, r7
 800ca50:	6018      	str	r0, [r3, #0]
 800ca52:	f241 63a8 	movw	r3, #5800	; 0x16a8
 800ca56:	443b      	add	r3, r7
 800ca58:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ca5c:	e9c1 3400 	strd	r3, r4, [r1]
 800ca60:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	3370      	adds	r3, #112	; 0x70
 800ca68:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ca6c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	3318      	adds	r3, #24
 800ca74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca78:	ea80 0402 	eor.w	r4, r0, r2
 800ca7c:	f507 55b5 	add.w	r5, r7, #5792	; 0x16a0
 800ca80:	602c      	str	r4, [r5, #0]
 800ca82:	404b      	eors	r3, r1
 800ca84:	f241 62a4 	movw	r2, #5796	; 0x16a4
 800ca88:	443a      	add	r2, r7
 800ca8a:	6013      	str	r3, [r2, #0]
 800ca8c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800ca96:	2210      	movs	r2, #16
 800ca98:	f507 53b5 	add.w	r3, r7, #5792	; 0x16a0
 800ca9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800caa0:	f7fb fd4e 	bl	8008540 <rotr64>
 800caa4:	4602      	mov	r2, r0
 800caa6:	460b      	mov	r3, r1
 800caa8:	e9c4 2300 	strd	r2, r3, [r4]
 800caac:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	3348      	adds	r3, #72	; 0x48
 800cab4:	e9d3 4500 	ldrd	r4, r5, [r3]
 800cab8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	3370      	adds	r3, #112	; 0x70
 800cac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac4:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800cac8:	6809      	ldr	r1, [r1, #0]
 800caca:	3148      	adds	r1, #72	; 0x48
 800cacc:	18a0      	adds	r0, r4, r2
 800cace:	f241 6c98 	movw	ip, #5784	; 0x1698
 800cad2:	44bc      	add	ip, r7
 800cad4:	f8cc 0000 	str.w	r0, [ip]
 800cad8:	eb45 0303 	adc.w	r3, r5, r3
 800cadc:	f241 629c 	movw	r2, #5788	; 0x169c
 800cae0:	443a      	add	r2, r7
 800cae2:	6013      	str	r3, [r2, #0]
 800cae4:	f241 6398 	movw	r3, #5784	; 0x1698
 800cae8:	443b      	add	r3, r7
 800caea:	e9d3 3400 	ldrd	r3, r4, [r3]
 800caee:	e9c1 3400 	strd	r3, r4, [r1]
 800caf2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	3320      	adds	r3, #32
 800cafa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cafe:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	3348      	adds	r3, #72	; 0x48
 800cb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb0a:	ea80 0402 	eor.w	r4, r0, r2
 800cb0e:	f241 6590 	movw	r5, #5776	; 0x1690
 800cb12:	443d      	add	r5, r7
 800cb14:	602c      	str	r4, [r5, #0]
 800cb16:	404b      	eors	r3, r1
 800cb18:	f241 6294 	movw	r2, #5780	; 0x1694
 800cb1c:	443a      	add	r2, r7
 800cb1e:	6013      	str	r3, [r2, #0]
 800cb20:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	f103 0420 	add.w	r4, r3, #32
 800cb2a:	223f      	movs	r2, #63	; 0x3f
 800cb2c:	f241 6390 	movw	r3, #5776	; 0x1690
 800cb30:	443b      	add	r3, r7
 800cb32:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cb36:	f7fb fd03 	bl	8008540 <rotr64>
 800cb3a:	4602      	mov	r2, r0
 800cb3c:	460b      	mov	r3, r1
 800cb3e:	e9c4 2300 	strd	r2, r3, [r4]
  ROUND( 3 );
 800cb42:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cb4c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	3320      	adds	r3, #32
 800cb54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb58:	1884      	adds	r4, r0, r2
 800cb5a:	f241 6588 	movw	r5, #5768	; 0x1688
 800cb5e:	443d      	add	r5, r7
 800cb60:	602c      	str	r4, [r5, #0]
 800cb62:	eb41 0303 	adc.w	r3, r1, r3
 800cb66:	f241 628c 	movw	r2, #5772	; 0x168c
 800cb6a:	443a      	add	r2, r7
 800cb6c:	6013      	str	r3, [r2, #0]
 800cb6e:	2307      	movs	r3, #7
 800cb70:	00da      	lsls	r2, r3, #3
 800cb72:	f641 6324 	movw	r3, #7716	; 0x1e24
 800cb76:	443b      	add	r3, r7
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	4413      	add	r3, r2
 800cb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb80:	f241 6188 	movw	r1, #5768	; 0x1688
 800cb84:	4439      	add	r1, r7
 800cb86:	e9d1 4500 	ldrd	r4, r5, [r1]
 800cb8a:	4621      	mov	r1, r4
 800cb8c:	1889      	adds	r1, r1, r2
 800cb8e:	f507 50b4 	add.w	r0, r7, #5760	; 0x1680
 800cb92:	6001      	str	r1, [r0, #0]
 800cb94:	4629      	mov	r1, r5
 800cb96:	eb43 0101 	adc.w	r1, r3, r1
 800cb9a:	f241 6384 	movw	r3, #5764	; 0x1684
 800cb9e:	443b      	add	r3, r7
 800cba0:	6019      	str	r1, [r3, #0]
 800cba2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f507 52b4 	add.w	r2, r7, #5760	; 0x1680
 800cbac:	e9d2 1200 	ldrd	r1, r2, [r2]
 800cbb0:	e9c3 1200 	strd	r1, r2, [r3]
 800cbb4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	3360      	adds	r3, #96	; 0x60
 800cbbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cbc0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbca:	ea80 0402 	eor.w	r4, r0, r2
 800cbce:	f241 6578 	movw	r5, #5752	; 0x1678
 800cbd2:	443d      	add	r5, r7
 800cbd4:	602c      	str	r4, [r5, #0]
 800cbd6:	404b      	eors	r3, r1
 800cbd8:	f241 627c 	movw	r2, #5756	; 0x167c
 800cbdc:	443a      	add	r2, r7
 800cbde:	6013      	str	r3, [r2, #0]
 800cbe0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800cbea:	2220      	movs	r2, #32
 800cbec:	f241 6378 	movw	r3, #5752	; 0x1678
 800cbf0:	443b      	add	r3, r7
 800cbf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cbf6:	f7fb fca3 	bl	8008540 <rotr64>
 800cbfa:	4602      	mov	r2, r0
 800cbfc:	460b      	mov	r3, r1
 800cbfe:	e9c4 2300 	strd	r2, r3, [r4]
 800cc02:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	3340      	adds	r3, #64	; 0x40
 800cc0a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800cc0e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	3360      	adds	r3, #96	; 0x60
 800cc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc1a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800cc1e:	6809      	ldr	r1, [r1, #0]
 800cc20:	3140      	adds	r1, #64	; 0x40
 800cc22:	18a0      	adds	r0, r4, r2
 800cc24:	f241 6c70 	movw	ip, #5744	; 0x1670
 800cc28:	44bc      	add	ip, r7
 800cc2a:	f8cc 0000 	str.w	r0, [ip]
 800cc2e:	eb45 0303 	adc.w	r3, r5, r3
 800cc32:	f241 6274 	movw	r2, #5748	; 0x1674
 800cc36:	443a      	add	r2, r7
 800cc38:	6013      	str	r3, [r2, #0]
 800cc3a:	f241 6370 	movw	r3, #5744	; 0x1670
 800cc3e:	443b      	add	r3, r7
 800cc40:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cc44:	e9c1 3400 	strd	r3, r4, [r1]
 800cc48:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	3320      	adds	r3, #32
 800cc50:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cc54:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	3340      	adds	r3, #64	; 0x40
 800cc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc60:	ea80 0402 	eor.w	r4, r0, r2
 800cc64:	f241 6568 	movw	r5, #5736	; 0x1668
 800cc68:	443d      	add	r5, r7
 800cc6a:	602c      	str	r4, [r5, #0]
 800cc6c:	404b      	eors	r3, r1
 800cc6e:	f241 626c 	movw	r2, #5740	; 0x166c
 800cc72:	443a      	add	r2, r7
 800cc74:	6013      	str	r3, [r2, #0]
 800cc76:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f103 0420 	add.w	r4, r3, #32
 800cc80:	2218      	movs	r2, #24
 800cc82:	f241 6368 	movw	r3, #5736	; 0x1668
 800cc86:	443b      	add	r3, r7
 800cc88:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cc8c:	f7fb fc58 	bl	8008540 <rotr64>
 800cc90:	4602      	mov	r2, r0
 800cc92:	460b      	mov	r3, r1
 800cc94:	e9c4 2300 	strd	r2, r3, [r4]
 800cc98:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cca2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	3320      	adds	r3, #32
 800ccaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccae:	1884      	adds	r4, r0, r2
 800ccb0:	f507 55b3 	add.w	r5, r7, #5728	; 0x1660
 800ccb4:	602c      	str	r4, [r5, #0]
 800ccb6:	eb41 0303 	adc.w	r3, r1, r3
 800ccba:	f241 6264 	movw	r2, #5732	; 0x1664
 800ccbe:	443a      	add	r2, r7
 800ccc0:	6013      	str	r3, [r2, #0]
 800ccc2:	2309      	movs	r3, #9
 800ccc4:	00da      	lsls	r2, r3, #3
 800ccc6:	f641 6324 	movw	r3, #7716	; 0x1e24
 800ccca:	443b      	add	r3, r7
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	4413      	add	r3, r2
 800ccd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd4:	f507 51b3 	add.w	r1, r7, #5728	; 0x1660
 800ccd8:	e9d1 4500 	ldrd	r4, r5, [r1]
 800ccdc:	4621      	mov	r1, r4
 800ccde:	1889      	adds	r1, r1, r2
 800cce0:	f241 6058 	movw	r0, #5720	; 0x1658
 800cce4:	4438      	add	r0, r7
 800cce6:	6001      	str	r1, [r0, #0]
 800cce8:	4629      	mov	r1, r5
 800ccea:	eb43 0101 	adc.w	r1, r3, r1
 800ccee:	f241 635c 	movw	r3, #5724	; 0x165c
 800ccf2:	443b      	add	r3, r7
 800ccf4:	6019      	str	r1, [r3, #0]
 800ccf6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	f241 6258 	movw	r2, #5720	; 0x1658
 800cd00:	443a      	add	r2, r7
 800cd02:	e9d2 1200 	ldrd	r1, r2, [r2]
 800cd06:	e9c3 1200 	strd	r1, r2, [r3]
 800cd0a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	3360      	adds	r3, #96	; 0x60
 800cd12:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cd16:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd20:	ea80 0402 	eor.w	r4, r0, r2
 800cd24:	f241 6550 	movw	r5, #5712	; 0x1650
 800cd28:	443d      	add	r5, r7
 800cd2a:	602c      	str	r4, [r5, #0]
 800cd2c:	404b      	eors	r3, r1
 800cd2e:	f241 6254 	movw	r2, #5716	; 0x1654
 800cd32:	443a      	add	r2, r7
 800cd34:	6013      	str	r3, [r2, #0]
 800cd36:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800cd40:	2210      	movs	r2, #16
 800cd42:	f241 6350 	movw	r3, #5712	; 0x1650
 800cd46:	443b      	add	r3, r7
 800cd48:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cd4c:	f7fb fbf8 	bl	8008540 <rotr64>
 800cd50:	4602      	mov	r2, r0
 800cd52:	460b      	mov	r3, r1
 800cd54:	e9c4 2300 	strd	r2, r3, [r4]
 800cd58:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	3340      	adds	r3, #64	; 0x40
 800cd60:	e9d3 4500 	ldrd	r4, r5, [r3]
 800cd64:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	3360      	adds	r3, #96	; 0x60
 800cd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd70:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800cd74:	6809      	ldr	r1, [r1, #0]
 800cd76:	3140      	adds	r1, #64	; 0x40
 800cd78:	18a0      	adds	r0, r4, r2
 800cd7a:	f241 6c48 	movw	ip, #5704	; 0x1648
 800cd7e:	44bc      	add	ip, r7
 800cd80:	f8cc 0000 	str.w	r0, [ip]
 800cd84:	eb45 0303 	adc.w	r3, r5, r3
 800cd88:	f241 624c 	movw	r2, #5708	; 0x164c
 800cd8c:	443a      	add	r2, r7
 800cd8e:	6013      	str	r3, [r2, #0]
 800cd90:	f241 6348 	movw	r3, #5704	; 0x1648
 800cd94:	443b      	add	r3, r7
 800cd96:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cd9a:	e9c1 3400 	strd	r3, r4, [r1]
 800cd9e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	3320      	adds	r3, #32
 800cda6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cdaa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	3340      	adds	r3, #64	; 0x40
 800cdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb6:	ea80 0402 	eor.w	r4, r0, r2
 800cdba:	f507 55b2 	add.w	r5, r7, #5696	; 0x1640
 800cdbe:	602c      	str	r4, [r5, #0]
 800cdc0:	404b      	eors	r3, r1
 800cdc2:	f241 6244 	movw	r2, #5700	; 0x1644
 800cdc6:	443a      	add	r2, r7
 800cdc8:	6013      	str	r3, [r2, #0]
 800cdca:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	f103 0420 	add.w	r4, r3, #32
 800cdd4:	223f      	movs	r2, #63	; 0x3f
 800cdd6:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800cdda:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cdde:	f7fb fbaf 	bl	8008540 <rotr64>
 800cde2:	4602      	mov	r2, r0
 800cde4:	460b      	mov	r3, r1
 800cde6:	e9c4 2300 	strd	r2, r3, [r4]
 800cdea:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	3308      	adds	r3, #8
 800cdf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cdf6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	3328      	adds	r3, #40	; 0x28
 800cdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce02:	1884      	adds	r4, r0, r2
 800ce04:	f241 6538 	movw	r5, #5688	; 0x1638
 800ce08:	443d      	add	r5, r7
 800ce0a:	602c      	str	r4, [r5, #0]
 800ce0c:	eb41 0303 	adc.w	r3, r1, r3
 800ce10:	f241 623c 	movw	r2, #5692	; 0x163c
 800ce14:	443a      	add	r2, r7
 800ce16:	6013      	str	r3, [r2, #0]
 800ce18:	2303      	movs	r3, #3
 800ce1a:	00da      	lsls	r2, r3, #3
 800ce1c:	f641 6324 	movw	r3, #7716	; 0x1e24
 800ce20:	443b      	add	r3, r7
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	4413      	add	r3, r2
 800ce26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce2a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800ce2e:	6809      	ldr	r1, [r1, #0]
 800ce30:	3108      	adds	r1, #8
 800ce32:	f241 6038 	movw	r0, #5688	; 0x1638
 800ce36:	4438      	add	r0, r7
 800ce38:	e9d0 4500 	ldrd	r4, r5, [r0]
 800ce3c:	4620      	mov	r0, r4
 800ce3e:	1880      	adds	r0, r0, r2
 800ce40:	f241 6c30 	movw	ip, #5680	; 0x1630
 800ce44:	44bc      	add	ip, r7
 800ce46:	f8cc 0000 	str.w	r0, [ip]
 800ce4a:	4628      	mov	r0, r5
 800ce4c:	eb43 0000 	adc.w	r0, r3, r0
 800ce50:	f241 6334 	movw	r3, #5684	; 0x1634
 800ce54:	443b      	add	r3, r7
 800ce56:	6018      	str	r0, [r3, #0]
 800ce58:	f241 6330 	movw	r3, #5680	; 0x1630
 800ce5c:	443b      	add	r3, r7
 800ce5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ce62:	e9c1 3400 	strd	r3, r4, [r1]
 800ce66:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	3368      	adds	r3, #104	; 0x68
 800ce6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ce72:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	3308      	adds	r3, #8
 800ce7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce7e:	ea80 0402 	eor.w	r4, r0, r2
 800ce82:	f241 6528 	movw	r5, #5672	; 0x1628
 800ce86:	443d      	add	r5, r7
 800ce88:	602c      	str	r4, [r5, #0]
 800ce8a:	404b      	eors	r3, r1
 800ce8c:	f241 622c 	movw	r2, #5676	; 0x162c
 800ce90:	443a      	add	r2, r7
 800ce92:	6013      	str	r3, [r2, #0]
 800ce94:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800ce9e:	2220      	movs	r2, #32
 800cea0:	f241 6328 	movw	r3, #5672	; 0x1628
 800cea4:	443b      	add	r3, r7
 800cea6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ceaa:	f7fb fb49 	bl	8008540 <rotr64>
 800ceae:	4602      	mov	r2, r0
 800ceb0:	460b      	mov	r3, r1
 800ceb2:	e9c4 2300 	strd	r2, r3, [r4]
 800ceb6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	3348      	adds	r3, #72	; 0x48
 800cebe:	e9d3 4500 	ldrd	r4, r5, [r3]
 800cec2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	3368      	adds	r3, #104	; 0x68
 800ceca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cece:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800ced2:	6809      	ldr	r1, [r1, #0]
 800ced4:	3148      	adds	r1, #72	; 0x48
 800ced6:	18a0      	adds	r0, r4, r2
 800ced8:	f507 5cb1 	add.w	ip, r7, #5664	; 0x1620
 800cedc:	f8cc 0000 	str.w	r0, [ip]
 800cee0:	eb45 0303 	adc.w	r3, r5, r3
 800cee4:	f241 6224 	movw	r2, #5668	; 0x1624
 800cee8:	443a      	add	r2, r7
 800ceea:	6013      	str	r3, [r2, #0]
 800ceec:	f507 53b1 	add.w	r3, r7, #5664	; 0x1620
 800cef0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cef4:	e9c1 3400 	strd	r3, r4, [r1]
 800cef8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	3328      	adds	r3, #40	; 0x28
 800cf00:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cf04:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	3348      	adds	r3, #72	; 0x48
 800cf0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf10:	ea80 0402 	eor.w	r4, r0, r2
 800cf14:	f241 6518 	movw	r5, #5656	; 0x1618
 800cf18:	443d      	add	r5, r7
 800cf1a:	602c      	str	r4, [r5, #0]
 800cf1c:	404b      	eors	r3, r1
 800cf1e:	f241 621c 	movw	r2, #5660	; 0x161c
 800cf22:	443a      	add	r2, r7
 800cf24:	6013      	str	r3, [r2, #0]
 800cf26:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800cf30:	2218      	movs	r2, #24
 800cf32:	f241 6318 	movw	r3, #5656	; 0x1618
 800cf36:	443b      	add	r3, r7
 800cf38:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cf3c:	f7fb fb00 	bl	8008540 <rotr64>
 800cf40:	4602      	mov	r2, r0
 800cf42:	460b      	mov	r3, r1
 800cf44:	e9c4 2300 	strd	r2, r3, [r4]
 800cf48:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	3308      	adds	r3, #8
 800cf50:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cf54:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	3328      	adds	r3, #40	; 0x28
 800cf5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf60:	1884      	adds	r4, r0, r2
 800cf62:	f241 6510 	movw	r5, #5648	; 0x1610
 800cf66:	443d      	add	r5, r7
 800cf68:	602c      	str	r4, [r5, #0]
 800cf6a:	eb41 0303 	adc.w	r3, r1, r3
 800cf6e:	f241 6214 	movw	r2, #5652	; 0x1614
 800cf72:	443a      	add	r2, r7
 800cf74:	6013      	str	r3, [r2, #0]
 800cf76:	2301      	movs	r3, #1
 800cf78:	00da      	lsls	r2, r3, #3
 800cf7a:	f641 6324 	movw	r3, #7716	; 0x1e24
 800cf7e:	443b      	add	r3, r7
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	4413      	add	r3, r2
 800cf84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf88:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800cf8c:	6809      	ldr	r1, [r1, #0]
 800cf8e:	3108      	adds	r1, #8
 800cf90:	f241 6010 	movw	r0, #5648	; 0x1610
 800cf94:	4438      	add	r0, r7
 800cf96:	e9d0 4500 	ldrd	r4, r5, [r0]
 800cf9a:	4620      	mov	r0, r4
 800cf9c:	1880      	adds	r0, r0, r2
 800cf9e:	f241 6c08 	movw	ip, #5640	; 0x1608
 800cfa2:	44bc      	add	ip, r7
 800cfa4:	f8cc 0000 	str.w	r0, [ip]
 800cfa8:	4628      	mov	r0, r5
 800cfaa:	eb43 0000 	adc.w	r0, r3, r0
 800cfae:	f241 630c 	movw	r3, #5644	; 0x160c
 800cfb2:	443b      	add	r3, r7
 800cfb4:	6018      	str	r0, [r3, #0]
 800cfb6:	f241 6308 	movw	r3, #5640	; 0x1608
 800cfba:	443b      	add	r3, r7
 800cfbc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cfc0:	e9c1 3400 	strd	r3, r4, [r1]
 800cfc4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	3368      	adds	r3, #104	; 0x68
 800cfcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cfd0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	3308      	adds	r3, #8
 800cfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfdc:	ea80 0402 	eor.w	r4, r0, r2
 800cfe0:	f507 55b0 	add.w	r5, r7, #5632	; 0x1600
 800cfe4:	602c      	str	r4, [r5, #0]
 800cfe6:	404b      	eors	r3, r1
 800cfe8:	f241 6204 	movw	r2, #5636	; 0x1604
 800cfec:	443a      	add	r2, r7
 800cfee:	6013      	str	r3, [r2, #0]
 800cff0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800cffa:	2210      	movs	r2, #16
 800cffc:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 800d000:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d004:	f7fb fa9c 	bl	8008540 <rotr64>
 800d008:	4602      	mov	r2, r0
 800d00a:	460b      	mov	r3, r1
 800d00c:	e9c4 2300 	strd	r2, r3, [r4]
 800d010:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	3348      	adds	r3, #72	; 0x48
 800d018:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d01c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	3368      	adds	r3, #104	; 0x68
 800d024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d028:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800d02c:	6809      	ldr	r1, [r1, #0]
 800d02e:	3148      	adds	r1, #72	; 0x48
 800d030:	18a0      	adds	r0, r4, r2
 800d032:	f241 5cf8 	movw	ip, #5624	; 0x15f8
 800d036:	44bc      	add	ip, r7
 800d038:	f8cc 0000 	str.w	r0, [ip]
 800d03c:	eb45 0303 	adc.w	r3, r5, r3
 800d040:	f241 52fc 	movw	r2, #5628	; 0x15fc
 800d044:	443a      	add	r2, r7
 800d046:	6013      	str	r3, [r2, #0]
 800d048:	f241 53f8 	movw	r3, #5624	; 0x15f8
 800d04c:	443b      	add	r3, r7
 800d04e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d052:	e9c1 3400 	strd	r3, r4, [r1]
 800d056:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	3328      	adds	r3, #40	; 0x28
 800d05e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d062:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	3348      	adds	r3, #72	; 0x48
 800d06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d06e:	ea80 0402 	eor.w	r4, r0, r2
 800d072:	f241 55f0 	movw	r5, #5616	; 0x15f0
 800d076:	443d      	add	r5, r7
 800d078:	602c      	str	r4, [r5, #0]
 800d07a:	404b      	eors	r3, r1
 800d07c:	f241 52f4 	movw	r2, #5620	; 0x15f4
 800d080:	443a      	add	r2, r7
 800d082:	6013      	str	r3, [r2, #0]
 800d084:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800d08e:	223f      	movs	r2, #63	; 0x3f
 800d090:	f241 53f0 	movw	r3, #5616	; 0x15f0
 800d094:	443b      	add	r3, r7
 800d096:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d09a:	f7fb fa51 	bl	8008540 <rotr64>
 800d09e:	4602      	mov	r2, r0
 800d0a0:	460b      	mov	r3, r1
 800d0a2:	e9c4 2300 	strd	r2, r3, [r4]
 800d0a6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	3310      	adds	r3, #16
 800d0ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d0b2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	3330      	adds	r3, #48	; 0x30
 800d0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0be:	1884      	adds	r4, r0, r2
 800d0c0:	f241 55e8 	movw	r5, #5608	; 0x15e8
 800d0c4:	443d      	add	r5, r7
 800d0c6:	602c      	str	r4, [r5, #0]
 800d0c8:	eb41 0303 	adc.w	r3, r1, r3
 800d0cc:	f241 52ec 	movw	r2, #5612	; 0x15ec
 800d0d0:	443a      	add	r2, r7
 800d0d2:	6013      	str	r3, [r2, #0]
 800d0d4:	230d      	movs	r3, #13
 800d0d6:	00da      	lsls	r2, r3, #3
 800d0d8:	f641 6324 	movw	r3, #7716	; 0x1e24
 800d0dc:	443b      	add	r3, r7
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	4413      	add	r3, r2
 800d0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e6:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800d0ea:	6809      	ldr	r1, [r1, #0]
 800d0ec:	3110      	adds	r1, #16
 800d0ee:	f241 50e8 	movw	r0, #5608	; 0x15e8
 800d0f2:	4438      	add	r0, r7
 800d0f4:	e9d0 4500 	ldrd	r4, r5, [r0]
 800d0f8:	4620      	mov	r0, r4
 800d0fa:	1880      	adds	r0, r0, r2
 800d0fc:	f507 5caf 	add.w	ip, r7, #5600	; 0x15e0
 800d100:	f8cc 0000 	str.w	r0, [ip]
 800d104:	4628      	mov	r0, r5
 800d106:	eb43 0000 	adc.w	r0, r3, r0
 800d10a:	f241 53e4 	movw	r3, #5604	; 0x15e4
 800d10e:	443b      	add	r3, r7
 800d110:	6018      	str	r0, [r3, #0]
 800d112:	f507 53af 	add.w	r3, r7, #5600	; 0x15e0
 800d116:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d11a:	e9c1 3400 	strd	r3, r4, [r1]
 800d11e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	3370      	adds	r3, #112	; 0x70
 800d126:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d12a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	3310      	adds	r3, #16
 800d132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d136:	ea80 0402 	eor.w	r4, r0, r2
 800d13a:	f241 55d8 	movw	r5, #5592	; 0x15d8
 800d13e:	443d      	add	r5, r7
 800d140:	602c      	str	r4, [r5, #0]
 800d142:	404b      	eors	r3, r1
 800d144:	f241 52dc 	movw	r2, #5596	; 0x15dc
 800d148:	443a      	add	r2, r7
 800d14a:	6013      	str	r3, [r2, #0]
 800d14c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800d156:	2220      	movs	r2, #32
 800d158:	f241 53d8 	movw	r3, #5592	; 0x15d8
 800d15c:	443b      	add	r3, r7
 800d15e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d162:	f7fb f9ed 	bl	8008540 <rotr64>
 800d166:	4602      	mov	r2, r0
 800d168:	460b      	mov	r3, r1
 800d16a:	e9c4 2300 	strd	r2, r3, [r4]
 800d16e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	3350      	adds	r3, #80	; 0x50
 800d176:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d17a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	3370      	adds	r3, #112	; 0x70
 800d182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d186:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800d18a:	6809      	ldr	r1, [r1, #0]
 800d18c:	3150      	adds	r1, #80	; 0x50
 800d18e:	18a0      	adds	r0, r4, r2
 800d190:	f241 5cd0 	movw	ip, #5584	; 0x15d0
 800d194:	44bc      	add	ip, r7
 800d196:	f8cc 0000 	str.w	r0, [ip]
 800d19a:	eb45 0303 	adc.w	r3, r5, r3
 800d19e:	f241 52d4 	movw	r2, #5588	; 0x15d4
 800d1a2:	443a      	add	r2, r7
 800d1a4:	6013      	str	r3, [r2, #0]
 800d1a6:	f241 53d0 	movw	r3, #5584	; 0x15d0
 800d1aa:	443b      	add	r3, r7
 800d1ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d1b0:	e9c1 3400 	strd	r3, r4, [r1]
 800d1b4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	3330      	adds	r3, #48	; 0x30
 800d1bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d1c0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	3350      	adds	r3, #80	; 0x50
 800d1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1cc:	ea80 0402 	eor.w	r4, r0, r2
 800d1d0:	f241 55c8 	movw	r5, #5576	; 0x15c8
 800d1d4:	443d      	add	r5, r7
 800d1d6:	602c      	str	r4, [r5, #0]
 800d1d8:	404b      	eors	r3, r1
 800d1da:	f241 52cc 	movw	r2, #5580	; 0x15cc
 800d1de:	443a      	add	r2, r7
 800d1e0:	6013      	str	r3, [r2, #0]
 800d1e2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800d1ec:	2218      	movs	r2, #24
 800d1ee:	f241 53c8 	movw	r3, #5576	; 0x15c8
 800d1f2:	443b      	add	r3, r7
 800d1f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d1f8:	f7fb f9a2 	bl	8008540 <rotr64>
 800d1fc:	4602      	mov	r2, r0
 800d1fe:	460b      	mov	r3, r1
 800d200:	e9c4 2300 	strd	r2, r3, [r4]
 800d204:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	3310      	adds	r3, #16
 800d20c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d210:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	3330      	adds	r3, #48	; 0x30
 800d218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d21c:	1884      	adds	r4, r0, r2
 800d21e:	f507 55ae 	add.w	r5, r7, #5568	; 0x15c0
 800d222:	602c      	str	r4, [r5, #0]
 800d224:	eb41 0303 	adc.w	r3, r1, r3
 800d228:	f241 52c4 	movw	r2, #5572	; 0x15c4
 800d22c:	443a      	add	r2, r7
 800d22e:	6013      	str	r3, [r2, #0]
 800d230:	230c      	movs	r3, #12
 800d232:	00da      	lsls	r2, r3, #3
 800d234:	f641 6324 	movw	r3, #7716	; 0x1e24
 800d238:	443b      	add	r3, r7
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	4413      	add	r3, r2
 800d23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d242:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800d246:	6809      	ldr	r1, [r1, #0]
 800d248:	3110      	adds	r1, #16
 800d24a:	f507 50ae 	add.w	r0, r7, #5568	; 0x15c0
 800d24e:	e9d0 4500 	ldrd	r4, r5, [r0]
 800d252:	4620      	mov	r0, r4
 800d254:	1880      	adds	r0, r0, r2
 800d256:	f241 5cb8 	movw	ip, #5560	; 0x15b8
 800d25a:	44bc      	add	ip, r7
 800d25c:	f8cc 0000 	str.w	r0, [ip]
 800d260:	4628      	mov	r0, r5
 800d262:	eb43 0000 	adc.w	r0, r3, r0
 800d266:	f241 53bc 	movw	r3, #5564	; 0x15bc
 800d26a:	443b      	add	r3, r7
 800d26c:	6018      	str	r0, [r3, #0]
 800d26e:	f241 53b8 	movw	r3, #5560	; 0x15b8
 800d272:	443b      	add	r3, r7
 800d274:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d278:	e9c1 3400 	strd	r3, r4, [r1]
 800d27c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	3370      	adds	r3, #112	; 0x70
 800d284:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d288:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	3310      	adds	r3, #16
 800d290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d294:	ea80 0402 	eor.w	r4, r0, r2
 800d298:	f241 55b0 	movw	r5, #5552	; 0x15b0
 800d29c:	443d      	add	r5, r7
 800d29e:	602c      	str	r4, [r5, #0]
 800d2a0:	404b      	eors	r3, r1
 800d2a2:	f241 52b4 	movw	r2, #5556	; 0x15b4
 800d2a6:	443a      	add	r2, r7
 800d2a8:	6013      	str	r3, [r2, #0]
 800d2aa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800d2b4:	2210      	movs	r2, #16
 800d2b6:	f241 53b0 	movw	r3, #5552	; 0x15b0
 800d2ba:	443b      	add	r3, r7
 800d2bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d2c0:	f7fb f93e 	bl	8008540 <rotr64>
 800d2c4:	4602      	mov	r2, r0
 800d2c6:	460b      	mov	r3, r1
 800d2c8:	e9c4 2300 	strd	r2, r3, [r4]
 800d2cc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	3350      	adds	r3, #80	; 0x50
 800d2d4:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d2d8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	3370      	adds	r3, #112	; 0x70
 800d2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2e4:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800d2e8:	6809      	ldr	r1, [r1, #0]
 800d2ea:	3150      	adds	r1, #80	; 0x50
 800d2ec:	18a0      	adds	r0, r4, r2
 800d2ee:	f241 5ca8 	movw	ip, #5544	; 0x15a8
 800d2f2:	44bc      	add	ip, r7
 800d2f4:	f8cc 0000 	str.w	r0, [ip]
 800d2f8:	eb45 0303 	adc.w	r3, r5, r3
 800d2fc:	f241 52ac 	movw	r2, #5548	; 0x15ac
 800d300:	443a      	add	r2, r7
 800d302:	6013      	str	r3, [r2, #0]
 800d304:	f241 53a8 	movw	r3, #5544	; 0x15a8
 800d308:	443b      	add	r3, r7
 800d30a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d30e:	e9c1 3400 	strd	r3, r4, [r1]
 800d312:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	3330      	adds	r3, #48	; 0x30
 800d31a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d31e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	3350      	adds	r3, #80	; 0x50
 800d326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d32a:	ea80 0402 	eor.w	r4, r0, r2
 800d32e:	f507 55ad 	add.w	r5, r7, #5536	; 0x15a0
 800d332:	602c      	str	r4, [r5, #0]
 800d334:	404b      	eors	r3, r1
 800d336:	f241 52a4 	movw	r2, #5540	; 0x15a4
 800d33a:	443a      	add	r2, r7
 800d33c:	6013      	str	r3, [r2, #0]
 800d33e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800d348:	223f      	movs	r2, #63	; 0x3f
 800d34a:	f507 53ad 	add.w	r3, r7, #5536	; 0x15a0
 800d34e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d352:	f7fb f8f5 	bl	8008540 <rotr64>
 800d356:	4602      	mov	r2, r0
 800d358:	460b      	mov	r3, r1
 800d35a:	e9c4 2300 	strd	r2, r3, [r4]
 800d35e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	3318      	adds	r3, #24
 800d366:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d36a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	3338      	adds	r3, #56	; 0x38
 800d372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d376:	1884      	adds	r4, r0, r2
 800d378:	f241 5598 	movw	r5, #5528	; 0x1598
 800d37c:	443d      	add	r5, r7
 800d37e:	602c      	str	r4, [r5, #0]
 800d380:	eb41 0303 	adc.w	r3, r1, r3
 800d384:	f241 529c 	movw	r2, #5532	; 0x159c
 800d388:	443a      	add	r2, r7
 800d38a:	6013      	str	r3, [r2, #0]
 800d38c:	230b      	movs	r3, #11
 800d38e:	00da      	lsls	r2, r3, #3
 800d390:	f641 6324 	movw	r3, #7716	; 0x1e24
 800d394:	443b      	add	r3, r7
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4413      	add	r3, r2
 800d39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d39e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800d3a2:	6809      	ldr	r1, [r1, #0]
 800d3a4:	3118      	adds	r1, #24
 800d3a6:	f241 5098 	movw	r0, #5528	; 0x1598
 800d3aa:	4438      	add	r0, r7
 800d3ac:	e9d0 4500 	ldrd	r4, r5, [r0]
 800d3b0:	4620      	mov	r0, r4
 800d3b2:	1880      	adds	r0, r0, r2
 800d3b4:	f241 5c90 	movw	ip, #5520	; 0x1590
 800d3b8:	44bc      	add	ip, r7
 800d3ba:	f8cc 0000 	str.w	r0, [ip]
 800d3be:	4628      	mov	r0, r5
 800d3c0:	eb43 0000 	adc.w	r0, r3, r0
 800d3c4:	f241 5394 	movw	r3, #5524	; 0x1594
 800d3c8:	443b      	add	r3, r7
 800d3ca:	6018      	str	r0, [r3, #0]
 800d3cc:	f241 5390 	movw	r3, #5520	; 0x1590
 800d3d0:	443b      	add	r3, r7
 800d3d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d3d6:	e9c1 3400 	strd	r3, r4, [r1]
 800d3da:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	3378      	adds	r3, #120	; 0x78
 800d3e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d3e6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	3318      	adds	r3, #24
 800d3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f2:	ea80 0402 	eor.w	r4, r0, r2
 800d3f6:	f241 5588 	movw	r5, #5512	; 0x1588
 800d3fa:	443d      	add	r5, r7
 800d3fc:	602c      	str	r4, [r5, #0]
 800d3fe:	404b      	eors	r3, r1
 800d400:	f241 528c 	movw	r2, #5516	; 0x158c
 800d404:	443a      	add	r2, r7
 800d406:	6013      	str	r3, [r2, #0]
 800d408:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800d412:	2220      	movs	r2, #32
 800d414:	f241 5388 	movw	r3, #5512	; 0x1588
 800d418:	443b      	add	r3, r7
 800d41a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d41e:	f7fb f88f 	bl	8008540 <rotr64>
 800d422:	4602      	mov	r2, r0
 800d424:	460b      	mov	r3, r1
 800d426:	e9c4 2300 	strd	r2, r3, [r4]
 800d42a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	3358      	adds	r3, #88	; 0x58
 800d432:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d436:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	3378      	adds	r3, #120	; 0x78
 800d43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d442:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800d446:	6809      	ldr	r1, [r1, #0]
 800d448:	3158      	adds	r1, #88	; 0x58
 800d44a:	18a0      	adds	r0, r4, r2
 800d44c:	f507 5cac 	add.w	ip, r7, #5504	; 0x1580
 800d450:	f8cc 0000 	str.w	r0, [ip]
 800d454:	eb45 0303 	adc.w	r3, r5, r3
 800d458:	f241 5284 	movw	r2, #5508	; 0x1584
 800d45c:	443a      	add	r2, r7
 800d45e:	6013      	str	r3, [r2, #0]
 800d460:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 800d464:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d468:	e9c1 3400 	strd	r3, r4, [r1]
 800d46c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	3338      	adds	r3, #56	; 0x38
 800d474:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d478:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	3358      	adds	r3, #88	; 0x58
 800d480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d484:	ea80 0402 	eor.w	r4, r0, r2
 800d488:	f241 5578 	movw	r5, #5496	; 0x1578
 800d48c:	443d      	add	r5, r7
 800d48e:	602c      	str	r4, [r5, #0]
 800d490:	404b      	eors	r3, r1
 800d492:	f241 527c 	movw	r2, #5500	; 0x157c
 800d496:	443a      	add	r2, r7
 800d498:	6013      	str	r3, [r2, #0]
 800d49a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800d4a4:	2218      	movs	r2, #24
 800d4a6:	f241 5378 	movw	r3, #5496	; 0x1578
 800d4aa:	443b      	add	r3, r7
 800d4ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d4b0:	f7fb f846 	bl	8008540 <rotr64>
 800d4b4:	4602      	mov	r2, r0
 800d4b6:	460b      	mov	r3, r1
 800d4b8:	e9c4 2300 	strd	r2, r3, [r4]
 800d4bc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	3318      	adds	r3, #24
 800d4c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d4c8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	3338      	adds	r3, #56	; 0x38
 800d4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d4:	1884      	adds	r4, r0, r2
 800d4d6:	f241 5570 	movw	r5, #5488	; 0x1570
 800d4da:	443d      	add	r5, r7
 800d4dc:	602c      	str	r4, [r5, #0]
 800d4de:	eb41 0303 	adc.w	r3, r1, r3
 800d4e2:	f241 5274 	movw	r2, #5492	; 0x1574
 800d4e6:	443a      	add	r2, r7
 800d4e8:	6013      	str	r3, [r2, #0]
 800d4ea:	230e      	movs	r3, #14
 800d4ec:	00da      	lsls	r2, r3, #3
 800d4ee:	f641 6324 	movw	r3, #7716	; 0x1e24
 800d4f2:	443b      	add	r3, r7
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	4413      	add	r3, r2
 800d4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4fc:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800d500:	6809      	ldr	r1, [r1, #0]
 800d502:	3118      	adds	r1, #24
 800d504:	f241 5070 	movw	r0, #5488	; 0x1570
 800d508:	4438      	add	r0, r7
 800d50a:	e9d0 4500 	ldrd	r4, r5, [r0]
 800d50e:	4620      	mov	r0, r4
 800d510:	1880      	adds	r0, r0, r2
 800d512:	f241 5c68 	movw	ip, #5480	; 0x1568
 800d516:	44bc      	add	ip, r7
 800d518:	f8cc 0000 	str.w	r0, [ip]
 800d51c:	4628      	mov	r0, r5
 800d51e:	eb43 0000 	adc.w	r0, r3, r0
 800d522:	f241 536c 	movw	r3, #5484	; 0x156c
 800d526:	443b      	add	r3, r7
 800d528:	6018      	str	r0, [r3, #0]
 800d52a:	f241 5368 	movw	r3, #5480	; 0x1568
 800d52e:	443b      	add	r3, r7
 800d530:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d534:	e9c1 3400 	strd	r3, r4, [r1]
 800d538:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	3378      	adds	r3, #120	; 0x78
 800d540:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d544:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	3318      	adds	r3, #24
 800d54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d550:	ea80 0402 	eor.w	r4, r0, r2
 800d554:	f507 55ab 	add.w	r5, r7, #5472	; 0x1560
 800d558:	602c      	str	r4, [r5, #0]
 800d55a:	404b      	eors	r3, r1
 800d55c:	f241 5264 	movw	r2, #5476	; 0x1564
 800d560:	443a      	add	r2, r7
 800d562:	6013      	str	r3, [r2, #0]
 800d564:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800d56e:	2210      	movs	r2, #16
 800d570:	f507 53ab 	add.w	r3, r7, #5472	; 0x1560
 800d574:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d578:	f7fa ffe2 	bl	8008540 <rotr64>
 800d57c:	4602      	mov	r2, r0
 800d57e:	460b      	mov	r3, r1
 800d580:	e9c4 2300 	strd	r2, r3, [r4]
 800d584:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	3358      	adds	r3, #88	; 0x58
 800d58c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d590:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	3378      	adds	r3, #120	; 0x78
 800d598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d59c:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800d5a0:	6809      	ldr	r1, [r1, #0]
 800d5a2:	3158      	adds	r1, #88	; 0x58
 800d5a4:	18a0      	adds	r0, r4, r2
 800d5a6:	f241 5c58 	movw	ip, #5464	; 0x1558
 800d5aa:	44bc      	add	ip, r7
 800d5ac:	f8cc 0000 	str.w	r0, [ip]
 800d5b0:	eb45 0303 	adc.w	r3, r5, r3
 800d5b4:	f241 525c 	movw	r2, #5468	; 0x155c
 800d5b8:	443a      	add	r2, r7
 800d5ba:	6013      	str	r3, [r2, #0]
 800d5bc:	f241 5358 	movw	r3, #5464	; 0x1558
 800d5c0:	443b      	add	r3, r7
 800d5c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d5c6:	e9c1 3400 	strd	r3, r4, [r1]
 800d5ca:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	3338      	adds	r3, #56	; 0x38
 800d5d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d5d6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	3358      	adds	r3, #88	; 0x58
 800d5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e2:	ea80 0402 	eor.w	r4, r0, r2
 800d5e6:	f241 5550 	movw	r5, #5456	; 0x1550
 800d5ea:	443d      	add	r5, r7
 800d5ec:	602c      	str	r4, [r5, #0]
 800d5ee:	404b      	eors	r3, r1
 800d5f0:	f241 5254 	movw	r2, #5460	; 0x1554
 800d5f4:	443a      	add	r2, r7
 800d5f6:	6013      	str	r3, [r2, #0]
 800d5f8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800d602:	223f      	movs	r2, #63	; 0x3f
 800d604:	f241 5350 	movw	r3, #5456	; 0x1550
 800d608:	443b      	add	r3, r7
 800d60a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d60e:	f7fa ff97 	bl	8008540 <rotr64>
 800d612:	4602      	mov	r2, r0
 800d614:	460b      	mov	r3, r1
 800d616:	e9c4 2300 	strd	r2, r3, [r4]
 800d61a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d624:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	3328      	adds	r3, #40	; 0x28
 800d62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d630:	1884      	adds	r4, r0, r2
 800d632:	f241 5548 	movw	r5, #5448	; 0x1548
 800d636:	443d      	add	r5, r7
 800d638:	602c      	str	r4, [r5, #0]
 800d63a:	eb41 0303 	adc.w	r3, r1, r3
 800d63e:	f241 524c 	movw	r2, #5452	; 0x154c
 800d642:	443a      	add	r2, r7
 800d644:	6013      	str	r3, [r2, #0]
 800d646:	2302      	movs	r3, #2
 800d648:	00da      	lsls	r2, r3, #3
 800d64a:	f641 6324 	movw	r3, #7716	; 0x1e24
 800d64e:	443b      	add	r3, r7
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	4413      	add	r3, r2
 800d654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d658:	f241 5148 	movw	r1, #5448	; 0x1548
 800d65c:	4439      	add	r1, r7
 800d65e:	e9d1 4500 	ldrd	r4, r5, [r1]
 800d662:	4621      	mov	r1, r4
 800d664:	1889      	adds	r1, r1, r2
 800d666:	f507 50aa 	add.w	r0, r7, #5440	; 0x1540
 800d66a:	6001      	str	r1, [r0, #0]
 800d66c:	4629      	mov	r1, r5
 800d66e:	eb43 0101 	adc.w	r1, r3, r1
 800d672:	f241 5344 	movw	r3, #5444	; 0x1544
 800d676:	443b      	add	r3, r7
 800d678:	6019      	str	r1, [r3, #0]
 800d67a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	f507 52aa 	add.w	r2, r7, #5440	; 0x1540
 800d684:	e9d2 1200 	ldrd	r1, r2, [r2]
 800d688:	e9c3 1200 	strd	r1, r2, [r3]
 800d68c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	3378      	adds	r3, #120	; 0x78
 800d694:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d698:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a2:	ea80 0402 	eor.w	r4, r0, r2
 800d6a6:	f241 5538 	movw	r5, #5432	; 0x1538
 800d6aa:	443d      	add	r5, r7
 800d6ac:	602c      	str	r4, [r5, #0]
 800d6ae:	404b      	eors	r3, r1
 800d6b0:	f241 523c 	movw	r2, #5436	; 0x153c
 800d6b4:	443a      	add	r2, r7
 800d6b6:	6013      	str	r3, [r2, #0]
 800d6b8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800d6c2:	2220      	movs	r2, #32
 800d6c4:	f241 5338 	movw	r3, #5432	; 0x1538
 800d6c8:	443b      	add	r3, r7
 800d6ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d6ce:	f7fa ff37 	bl	8008540 <rotr64>
 800d6d2:	4602      	mov	r2, r0
 800d6d4:	460b      	mov	r3, r1
 800d6d6:	e9c4 2300 	strd	r2, r3, [r4]
 800d6da:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	3350      	adds	r3, #80	; 0x50
 800d6e2:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d6e6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	3378      	adds	r3, #120	; 0x78
 800d6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f2:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800d6f6:	6809      	ldr	r1, [r1, #0]
 800d6f8:	3150      	adds	r1, #80	; 0x50
 800d6fa:	18a0      	adds	r0, r4, r2
 800d6fc:	f241 5c30 	movw	ip, #5424	; 0x1530
 800d700:	44bc      	add	ip, r7
 800d702:	f8cc 0000 	str.w	r0, [ip]
 800d706:	eb45 0303 	adc.w	r3, r5, r3
 800d70a:	f241 5234 	movw	r2, #5428	; 0x1534
 800d70e:	443a      	add	r2, r7
 800d710:	6013      	str	r3, [r2, #0]
 800d712:	f241 5330 	movw	r3, #5424	; 0x1530
 800d716:	443b      	add	r3, r7
 800d718:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d71c:	e9c1 3400 	strd	r3, r4, [r1]
 800d720:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	3328      	adds	r3, #40	; 0x28
 800d728:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d72c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	3350      	adds	r3, #80	; 0x50
 800d734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d738:	ea80 0402 	eor.w	r4, r0, r2
 800d73c:	f241 5528 	movw	r5, #5416	; 0x1528
 800d740:	443d      	add	r5, r7
 800d742:	602c      	str	r4, [r5, #0]
 800d744:	404b      	eors	r3, r1
 800d746:	f241 522c 	movw	r2, #5420	; 0x152c
 800d74a:	443a      	add	r2, r7
 800d74c:	6013      	str	r3, [r2, #0]
 800d74e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800d758:	2218      	movs	r2, #24
 800d75a:	f241 5328 	movw	r3, #5416	; 0x1528
 800d75e:	443b      	add	r3, r7
 800d760:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d764:	f7fa feec 	bl	8008540 <rotr64>
 800d768:	4602      	mov	r2, r0
 800d76a:	460b      	mov	r3, r1
 800d76c:	e9c4 2300 	strd	r2, r3, [r4]
 800d770:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d77a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	3328      	adds	r3, #40	; 0x28
 800d782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d786:	1884      	adds	r4, r0, r2
 800d788:	f507 55a9 	add.w	r5, r7, #5408	; 0x1520
 800d78c:	602c      	str	r4, [r5, #0]
 800d78e:	eb41 0303 	adc.w	r3, r1, r3
 800d792:	f241 5224 	movw	r2, #5412	; 0x1524
 800d796:	443a      	add	r2, r7
 800d798:	6013      	str	r3, [r2, #0]
 800d79a:	2306      	movs	r3, #6
 800d79c:	00da      	lsls	r2, r3, #3
 800d79e:	f641 6324 	movw	r3, #7716	; 0x1e24
 800d7a2:	443b      	add	r3, r7
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	4413      	add	r3, r2
 800d7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ac:	f507 51a9 	add.w	r1, r7, #5408	; 0x1520
 800d7b0:	e9d1 4500 	ldrd	r4, r5, [r1]
 800d7b4:	4621      	mov	r1, r4
 800d7b6:	1889      	adds	r1, r1, r2
 800d7b8:	f241 5018 	movw	r0, #5400	; 0x1518
 800d7bc:	4438      	add	r0, r7
 800d7be:	6001      	str	r1, [r0, #0]
 800d7c0:	4629      	mov	r1, r5
 800d7c2:	eb43 0101 	adc.w	r1, r3, r1
 800d7c6:	f241 531c 	movw	r3, #5404	; 0x151c
 800d7ca:	443b      	add	r3, r7
 800d7cc:	6019      	str	r1, [r3, #0]
 800d7ce:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	f241 5218 	movw	r2, #5400	; 0x1518
 800d7d8:	443a      	add	r2, r7
 800d7da:	e9d2 1200 	ldrd	r1, r2, [r2]
 800d7de:	e9c3 1200 	strd	r1, r2, [r3]
 800d7e2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	3378      	adds	r3, #120	; 0x78
 800d7ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d7ee:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f8:	ea80 0402 	eor.w	r4, r0, r2
 800d7fc:	f241 5510 	movw	r5, #5392	; 0x1510
 800d800:	443d      	add	r5, r7
 800d802:	602c      	str	r4, [r5, #0]
 800d804:	404b      	eors	r3, r1
 800d806:	f241 5214 	movw	r2, #5396	; 0x1514
 800d80a:	443a      	add	r2, r7
 800d80c:	6013      	str	r3, [r2, #0]
 800d80e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800d818:	2210      	movs	r2, #16
 800d81a:	f241 5310 	movw	r3, #5392	; 0x1510
 800d81e:	443b      	add	r3, r7
 800d820:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d824:	f7fa fe8c 	bl	8008540 <rotr64>
 800d828:	4602      	mov	r2, r0
 800d82a:	460b      	mov	r3, r1
 800d82c:	e9c4 2300 	strd	r2, r3, [r4]
 800d830:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	3350      	adds	r3, #80	; 0x50
 800d838:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d83c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	3378      	adds	r3, #120	; 0x78
 800d844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d848:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800d84c:	6809      	ldr	r1, [r1, #0]
 800d84e:	3150      	adds	r1, #80	; 0x50
 800d850:	18a0      	adds	r0, r4, r2
 800d852:	f241 5c08 	movw	ip, #5384	; 0x1508
 800d856:	44bc      	add	ip, r7
 800d858:	f8cc 0000 	str.w	r0, [ip]
 800d85c:	eb45 0303 	adc.w	r3, r5, r3
 800d860:	f241 520c 	movw	r2, #5388	; 0x150c
 800d864:	443a      	add	r2, r7
 800d866:	6013      	str	r3, [r2, #0]
 800d868:	f241 5308 	movw	r3, #5384	; 0x1508
 800d86c:	443b      	add	r3, r7
 800d86e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d872:	e9c1 3400 	strd	r3, r4, [r1]
 800d876:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	3328      	adds	r3, #40	; 0x28
 800d87e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d882:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	3350      	adds	r3, #80	; 0x50
 800d88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d88e:	ea80 0402 	eor.w	r4, r0, r2
 800d892:	f507 55a8 	add.w	r5, r7, #5376	; 0x1500
 800d896:	602c      	str	r4, [r5, #0]
 800d898:	404b      	eors	r3, r1
 800d89a:	f241 5204 	movw	r2, #5380	; 0x1504
 800d89e:	443a      	add	r2, r7
 800d8a0:	6013      	str	r3, [r2, #0]
 800d8a2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800d8ac:	223f      	movs	r2, #63	; 0x3f
 800d8ae:	f507 53a8 	add.w	r3, r7, #5376	; 0x1500
 800d8b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d8b6:	f7fa fe43 	bl	8008540 <rotr64>
 800d8ba:	4602      	mov	r2, r0
 800d8bc:	460b      	mov	r3, r1
 800d8be:	e9c4 2300 	strd	r2, r3, [r4]
 800d8c2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	3308      	adds	r3, #8
 800d8ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d8ce:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	3330      	adds	r3, #48	; 0x30
 800d8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8da:	1884      	adds	r4, r0, r2
 800d8dc:	f241 45f8 	movw	r5, #5368	; 0x14f8
 800d8e0:	443d      	add	r5, r7
 800d8e2:	602c      	str	r4, [r5, #0]
 800d8e4:	eb41 0303 	adc.w	r3, r1, r3
 800d8e8:	f241 42fc 	movw	r2, #5372	; 0x14fc
 800d8ec:	443a      	add	r2, r7
 800d8ee:	6013      	str	r3, [r2, #0]
 800d8f0:	2305      	movs	r3, #5
 800d8f2:	00da      	lsls	r2, r3, #3
 800d8f4:	f641 6324 	movw	r3, #7716	; 0x1e24
 800d8f8:	443b      	add	r3, r7
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	4413      	add	r3, r2
 800d8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d902:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800d906:	6809      	ldr	r1, [r1, #0]
 800d908:	3108      	adds	r1, #8
 800d90a:	f241 40f8 	movw	r0, #5368	; 0x14f8
 800d90e:	4438      	add	r0, r7
 800d910:	e9d0 4500 	ldrd	r4, r5, [r0]
 800d914:	4620      	mov	r0, r4
 800d916:	1880      	adds	r0, r0, r2
 800d918:	f241 4cf0 	movw	ip, #5360	; 0x14f0
 800d91c:	44bc      	add	ip, r7
 800d91e:	f8cc 0000 	str.w	r0, [ip]
 800d922:	4628      	mov	r0, r5
 800d924:	eb43 0000 	adc.w	r0, r3, r0
 800d928:	f241 43f4 	movw	r3, #5364	; 0x14f4
 800d92c:	443b      	add	r3, r7
 800d92e:	6018      	str	r0, [r3, #0]
 800d930:	f241 43f0 	movw	r3, #5360	; 0x14f0
 800d934:	443b      	add	r3, r7
 800d936:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d93a:	e9c1 3400 	strd	r3, r4, [r1]
 800d93e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	3360      	adds	r3, #96	; 0x60
 800d946:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d94a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	3308      	adds	r3, #8
 800d952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d956:	ea80 0402 	eor.w	r4, r0, r2
 800d95a:	f241 45e8 	movw	r5, #5352	; 0x14e8
 800d95e:	443d      	add	r5, r7
 800d960:	602c      	str	r4, [r5, #0]
 800d962:	404b      	eors	r3, r1
 800d964:	f241 42ec 	movw	r2, #5356	; 0x14ec
 800d968:	443a      	add	r2, r7
 800d96a:	6013      	str	r3, [r2, #0]
 800d96c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800d976:	2220      	movs	r2, #32
 800d978:	f241 43e8 	movw	r3, #5352	; 0x14e8
 800d97c:	443b      	add	r3, r7
 800d97e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d982:	f7fa fddd 	bl	8008540 <rotr64>
 800d986:	4602      	mov	r2, r0
 800d988:	460b      	mov	r3, r1
 800d98a:	e9c4 2300 	strd	r2, r3, [r4]
 800d98e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	3358      	adds	r3, #88	; 0x58
 800d996:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d99a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	3360      	adds	r3, #96	; 0x60
 800d9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a6:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800d9aa:	6809      	ldr	r1, [r1, #0]
 800d9ac:	3158      	adds	r1, #88	; 0x58
 800d9ae:	18a0      	adds	r0, r4, r2
 800d9b0:	f507 5ca7 	add.w	ip, r7, #5344	; 0x14e0
 800d9b4:	f8cc 0000 	str.w	r0, [ip]
 800d9b8:	eb45 0303 	adc.w	r3, r5, r3
 800d9bc:	f241 42e4 	movw	r2, #5348	; 0x14e4
 800d9c0:	443a      	add	r2, r7
 800d9c2:	6013      	str	r3, [r2, #0]
 800d9c4:	f507 53a7 	add.w	r3, r7, #5344	; 0x14e0
 800d9c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d9cc:	e9c1 3400 	strd	r3, r4, [r1]
 800d9d0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	3330      	adds	r3, #48	; 0x30
 800d9d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d9dc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	3358      	adds	r3, #88	; 0x58
 800d9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e8:	ea80 0402 	eor.w	r4, r0, r2
 800d9ec:	f241 45d8 	movw	r5, #5336	; 0x14d8
 800d9f0:	443d      	add	r5, r7
 800d9f2:	602c      	str	r4, [r5, #0]
 800d9f4:	404b      	eors	r3, r1
 800d9f6:	f241 42dc 	movw	r2, #5340	; 0x14dc
 800d9fa:	443a      	add	r2, r7
 800d9fc:	6013      	str	r3, [r2, #0]
 800d9fe:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800da08:	2218      	movs	r2, #24
 800da0a:	f241 43d8 	movw	r3, #5336	; 0x14d8
 800da0e:	443b      	add	r3, r7
 800da10:	e9d3 0100 	ldrd	r0, r1, [r3]
 800da14:	f7fa fd94 	bl	8008540 <rotr64>
 800da18:	4602      	mov	r2, r0
 800da1a:	460b      	mov	r3, r1
 800da1c:	e9c4 2300 	strd	r2, r3, [r4]
 800da20:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	3308      	adds	r3, #8
 800da28:	e9d3 0100 	ldrd	r0, r1, [r3]
 800da2c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	3330      	adds	r3, #48	; 0x30
 800da34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da38:	1884      	adds	r4, r0, r2
 800da3a:	f241 45d0 	movw	r5, #5328	; 0x14d0
 800da3e:	443d      	add	r5, r7
 800da40:	602c      	str	r4, [r5, #0]
 800da42:	eb41 0303 	adc.w	r3, r1, r3
 800da46:	f241 42d4 	movw	r2, #5332	; 0x14d4
 800da4a:	443a      	add	r2, r7
 800da4c:	6013      	str	r3, [r2, #0]
 800da4e:	230a      	movs	r3, #10
 800da50:	00da      	lsls	r2, r3, #3
 800da52:	f641 6324 	movw	r3, #7716	; 0x1e24
 800da56:	443b      	add	r3, r7
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	4413      	add	r3, r2
 800da5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da60:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800da64:	6809      	ldr	r1, [r1, #0]
 800da66:	3108      	adds	r1, #8
 800da68:	f241 40d0 	movw	r0, #5328	; 0x14d0
 800da6c:	4438      	add	r0, r7
 800da6e:	e9d0 4500 	ldrd	r4, r5, [r0]
 800da72:	4620      	mov	r0, r4
 800da74:	1880      	adds	r0, r0, r2
 800da76:	f241 4cc8 	movw	ip, #5320	; 0x14c8
 800da7a:	44bc      	add	ip, r7
 800da7c:	f8cc 0000 	str.w	r0, [ip]
 800da80:	4628      	mov	r0, r5
 800da82:	eb43 0000 	adc.w	r0, r3, r0
 800da86:	f241 43cc 	movw	r3, #5324	; 0x14cc
 800da8a:	443b      	add	r3, r7
 800da8c:	6018      	str	r0, [r3, #0]
 800da8e:	f241 43c8 	movw	r3, #5320	; 0x14c8
 800da92:	443b      	add	r3, r7
 800da94:	e9d3 3400 	ldrd	r3, r4, [r3]
 800da98:	e9c1 3400 	strd	r3, r4, [r1]
 800da9c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	3360      	adds	r3, #96	; 0x60
 800daa4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800daa8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	3308      	adds	r3, #8
 800dab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab4:	ea80 0402 	eor.w	r4, r0, r2
 800dab8:	f507 55a6 	add.w	r5, r7, #5312	; 0x14c0
 800dabc:	602c      	str	r4, [r5, #0]
 800dabe:	404b      	eors	r3, r1
 800dac0:	f241 42c4 	movw	r2, #5316	; 0x14c4
 800dac4:	443a      	add	r2, r7
 800dac6:	6013      	str	r3, [r2, #0]
 800dac8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800dad2:	2210      	movs	r2, #16
 800dad4:	f507 53a6 	add.w	r3, r7, #5312	; 0x14c0
 800dad8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dadc:	f7fa fd30 	bl	8008540 <rotr64>
 800dae0:	4602      	mov	r2, r0
 800dae2:	460b      	mov	r3, r1
 800dae4:	e9c4 2300 	strd	r2, r3, [r4]
 800dae8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	3358      	adds	r3, #88	; 0x58
 800daf0:	e9d3 4500 	ldrd	r4, r5, [r3]
 800daf4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	3360      	adds	r3, #96	; 0x60
 800dafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db00:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800db04:	6809      	ldr	r1, [r1, #0]
 800db06:	3158      	adds	r1, #88	; 0x58
 800db08:	18a0      	adds	r0, r4, r2
 800db0a:	f241 4cb8 	movw	ip, #5304	; 0x14b8
 800db0e:	44bc      	add	ip, r7
 800db10:	f8cc 0000 	str.w	r0, [ip]
 800db14:	eb45 0303 	adc.w	r3, r5, r3
 800db18:	f241 42bc 	movw	r2, #5308	; 0x14bc
 800db1c:	443a      	add	r2, r7
 800db1e:	6013      	str	r3, [r2, #0]
 800db20:	f241 43b8 	movw	r3, #5304	; 0x14b8
 800db24:	443b      	add	r3, r7
 800db26:	e9d3 3400 	ldrd	r3, r4, [r3]
 800db2a:	e9c1 3400 	strd	r3, r4, [r1]
 800db2e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	3330      	adds	r3, #48	; 0x30
 800db36:	e9d3 0100 	ldrd	r0, r1, [r3]
 800db3a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	3358      	adds	r3, #88	; 0x58
 800db42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db46:	ea80 0402 	eor.w	r4, r0, r2
 800db4a:	f241 45b0 	movw	r5, #5296	; 0x14b0
 800db4e:	443d      	add	r5, r7
 800db50:	602c      	str	r4, [r5, #0]
 800db52:	404b      	eors	r3, r1
 800db54:	f241 42b4 	movw	r2, #5300	; 0x14b4
 800db58:	443a      	add	r2, r7
 800db5a:	6013      	str	r3, [r2, #0]
 800db5c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800db66:	223f      	movs	r2, #63	; 0x3f
 800db68:	f241 43b0 	movw	r3, #5296	; 0x14b0
 800db6c:	443b      	add	r3, r7
 800db6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800db72:	f7fa fce5 	bl	8008540 <rotr64>
 800db76:	4602      	mov	r2, r0
 800db78:	460b      	mov	r3, r1
 800db7a:	e9c4 2300 	strd	r2, r3, [r4]
 800db7e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	3310      	adds	r3, #16
 800db86:	e9d3 0100 	ldrd	r0, r1, [r3]
 800db8a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	3338      	adds	r3, #56	; 0x38
 800db92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db96:	1884      	adds	r4, r0, r2
 800db98:	f241 45a8 	movw	r5, #5288	; 0x14a8
 800db9c:	443d      	add	r5, r7
 800db9e:	602c      	str	r4, [r5, #0]
 800dba0:	eb41 0303 	adc.w	r3, r1, r3
 800dba4:	f241 42ac 	movw	r2, #5292	; 0x14ac
 800dba8:	443a      	add	r2, r7
 800dbaa:	6013      	str	r3, [r2, #0]
 800dbac:	2304      	movs	r3, #4
 800dbae:	00da      	lsls	r2, r3, #3
 800dbb0:	f641 6324 	movw	r3, #7716	; 0x1e24
 800dbb4:	443b      	add	r3, r7
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	4413      	add	r3, r2
 800dbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbbe:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800dbc2:	6809      	ldr	r1, [r1, #0]
 800dbc4:	3110      	adds	r1, #16
 800dbc6:	f241 40a8 	movw	r0, #5288	; 0x14a8
 800dbca:	4438      	add	r0, r7
 800dbcc:	e9d0 4500 	ldrd	r4, r5, [r0]
 800dbd0:	4620      	mov	r0, r4
 800dbd2:	1880      	adds	r0, r0, r2
 800dbd4:	f507 5ca5 	add.w	ip, r7, #5280	; 0x14a0
 800dbd8:	f8cc 0000 	str.w	r0, [ip]
 800dbdc:	4628      	mov	r0, r5
 800dbde:	eb43 0000 	adc.w	r0, r3, r0
 800dbe2:	f241 43a4 	movw	r3, #5284	; 0x14a4
 800dbe6:	443b      	add	r3, r7
 800dbe8:	6018      	str	r0, [r3, #0]
 800dbea:	f507 53a5 	add.w	r3, r7, #5280	; 0x14a0
 800dbee:	e9d3 3400 	ldrd	r3, r4, [r3]
 800dbf2:	e9c1 3400 	strd	r3, r4, [r1]
 800dbf6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	3368      	adds	r3, #104	; 0x68
 800dbfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dc02:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	3310      	adds	r3, #16
 800dc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc0e:	ea80 0402 	eor.w	r4, r0, r2
 800dc12:	f241 4598 	movw	r5, #5272	; 0x1498
 800dc16:	443d      	add	r5, r7
 800dc18:	602c      	str	r4, [r5, #0]
 800dc1a:	404b      	eors	r3, r1
 800dc1c:	f241 429c 	movw	r2, #5276	; 0x149c
 800dc20:	443a      	add	r2, r7
 800dc22:	6013      	str	r3, [r2, #0]
 800dc24:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800dc2e:	2220      	movs	r2, #32
 800dc30:	f241 4398 	movw	r3, #5272	; 0x1498
 800dc34:	443b      	add	r3, r7
 800dc36:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dc3a:	f7fa fc81 	bl	8008540 <rotr64>
 800dc3e:	4602      	mov	r2, r0
 800dc40:	460b      	mov	r3, r1
 800dc42:	e9c4 2300 	strd	r2, r3, [r4]
 800dc46:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	3340      	adds	r3, #64	; 0x40
 800dc4e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800dc52:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	3368      	adds	r3, #104	; 0x68
 800dc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc5e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800dc62:	6809      	ldr	r1, [r1, #0]
 800dc64:	3140      	adds	r1, #64	; 0x40
 800dc66:	18a0      	adds	r0, r4, r2
 800dc68:	f241 4c90 	movw	ip, #5264	; 0x1490
 800dc6c:	44bc      	add	ip, r7
 800dc6e:	f8cc 0000 	str.w	r0, [ip]
 800dc72:	eb45 0303 	adc.w	r3, r5, r3
 800dc76:	f241 4294 	movw	r2, #5268	; 0x1494
 800dc7a:	443a      	add	r2, r7
 800dc7c:	6013      	str	r3, [r2, #0]
 800dc7e:	f241 4390 	movw	r3, #5264	; 0x1490
 800dc82:	443b      	add	r3, r7
 800dc84:	e9d3 3400 	ldrd	r3, r4, [r3]
 800dc88:	e9c1 3400 	strd	r3, r4, [r1]
 800dc8c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	3338      	adds	r3, #56	; 0x38
 800dc94:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dc98:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	3340      	adds	r3, #64	; 0x40
 800dca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca4:	ea80 0402 	eor.w	r4, r0, r2
 800dca8:	f241 4588 	movw	r5, #5256	; 0x1488
 800dcac:	443d      	add	r5, r7
 800dcae:	602c      	str	r4, [r5, #0]
 800dcb0:	404b      	eors	r3, r1
 800dcb2:	f241 428c 	movw	r2, #5260	; 0x148c
 800dcb6:	443a      	add	r2, r7
 800dcb8:	6013      	str	r3, [r2, #0]
 800dcba:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800dcc4:	2218      	movs	r2, #24
 800dcc6:	f241 4388 	movw	r3, #5256	; 0x1488
 800dcca:	443b      	add	r3, r7
 800dccc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dcd0:	f7fa fc36 	bl	8008540 <rotr64>
 800dcd4:	4602      	mov	r2, r0
 800dcd6:	460b      	mov	r3, r1
 800dcd8:	e9c4 2300 	strd	r2, r3, [r4]
 800dcdc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	3310      	adds	r3, #16
 800dce4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dce8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	3338      	adds	r3, #56	; 0x38
 800dcf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf4:	1884      	adds	r4, r0, r2
 800dcf6:	f507 55a4 	add.w	r5, r7, #5248	; 0x1480
 800dcfa:	602c      	str	r4, [r5, #0]
 800dcfc:	eb41 0303 	adc.w	r3, r1, r3
 800dd00:	f241 4284 	movw	r2, #5252	; 0x1484
 800dd04:	443a      	add	r2, r7
 800dd06:	6013      	str	r3, [r2, #0]
 800dd08:	2300      	movs	r3, #0
 800dd0a:	00da      	lsls	r2, r3, #3
 800dd0c:	f641 6324 	movw	r3, #7716	; 0x1e24
 800dd10:	443b      	add	r3, r7
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	4413      	add	r3, r2
 800dd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd1a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800dd1e:	6809      	ldr	r1, [r1, #0]
 800dd20:	3110      	adds	r1, #16
 800dd22:	f507 50a4 	add.w	r0, r7, #5248	; 0x1480
 800dd26:	e9d0 4500 	ldrd	r4, r5, [r0]
 800dd2a:	4620      	mov	r0, r4
 800dd2c:	1880      	adds	r0, r0, r2
 800dd2e:	f241 4c78 	movw	ip, #5240	; 0x1478
 800dd32:	44bc      	add	ip, r7
 800dd34:	f8cc 0000 	str.w	r0, [ip]
 800dd38:	4628      	mov	r0, r5
 800dd3a:	eb43 0000 	adc.w	r0, r3, r0
 800dd3e:	f241 437c 	movw	r3, #5244	; 0x147c
 800dd42:	443b      	add	r3, r7
 800dd44:	6018      	str	r0, [r3, #0]
 800dd46:	f241 4378 	movw	r3, #5240	; 0x1478
 800dd4a:	443b      	add	r3, r7
 800dd4c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800dd50:	e9c1 3400 	strd	r3, r4, [r1]
 800dd54:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	3368      	adds	r3, #104	; 0x68
 800dd5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dd60:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	3310      	adds	r3, #16
 800dd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd6c:	ea80 0402 	eor.w	r4, r0, r2
 800dd70:	f241 4570 	movw	r5, #5232	; 0x1470
 800dd74:	443d      	add	r5, r7
 800dd76:	602c      	str	r4, [r5, #0]
 800dd78:	404b      	eors	r3, r1
 800dd7a:	f241 4274 	movw	r2, #5236	; 0x1474
 800dd7e:	443a      	add	r2, r7
 800dd80:	6013      	str	r3, [r2, #0]
 800dd82:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800dd8c:	2210      	movs	r2, #16
 800dd8e:	f241 4370 	movw	r3, #5232	; 0x1470
 800dd92:	443b      	add	r3, r7
 800dd94:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dd98:	f7fa fbd2 	bl	8008540 <rotr64>
 800dd9c:	4602      	mov	r2, r0
 800dd9e:	460b      	mov	r3, r1
 800dda0:	e9c4 2300 	strd	r2, r3, [r4]
 800dda4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	3340      	adds	r3, #64	; 0x40
 800ddac:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ddb0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	3368      	adds	r3, #104	; 0x68
 800ddb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddbc:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800ddc0:	6809      	ldr	r1, [r1, #0]
 800ddc2:	3140      	adds	r1, #64	; 0x40
 800ddc4:	18a0      	adds	r0, r4, r2
 800ddc6:	f241 4c68 	movw	ip, #5224	; 0x1468
 800ddca:	44bc      	add	ip, r7
 800ddcc:	f8cc 0000 	str.w	r0, [ip]
 800ddd0:	eb45 0303 	adc.w	r3, r5, r3
 800ddd4:	f241 426c 	movw	r2, #5228	; 0x146c
 800ddd8:	443a      	add	r2, r7
 800ddda:	6013      	str	r3, [r2, #0]
 800dddc:	f241 4368 	movw	r3, #5224	; 0x1468
 800dde0:	443b      	add	r3, r7
 800dde2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800dde6:	e9c1 3400 	strd	r3, r4, [r1]
 800ddea:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	3338      	adds	r3, #56	; 0x38
 800ddf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ddf6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	3340      	adds	r3, #64	; 0x40
 800ddfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de02:	ea80 0402 	eor.w	r4, r0, r2
 800de06:	f507 55a3 	add.w	r5, r7, #5216	; 0x1460
 800de0a:	602c      	str	r4, [r5, #0]
 800de0c:	404b      	eors	r3, r1
 800de0e:	f241 4264 	movw	r2, #5220	; 0x1464
 800de12:	443a      	add	r2, r7
 800de14:	6013      	str	r3, [r2, #0]
 800de16:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800de20:	223f      	movs	r2, #63	; 0x3f
 800de22:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 800de26:	e9d3 0100 	ldrd	r0, r1, [r3]
 800de2a:	f7fa fb89 	bl	8008540 <rotr64>
 800de2e:	4602      	mov	r2, r0
 800de30:	460b      	mov	r3, r1
 800de32:	e9c4 2300 	strd	r2, r3, [r4]
 800de36:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	3318      	adds	r3, #24
 800de3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800de42:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	3320      	adds	r3, #32
 800de4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de4e:	1884      	adds	r4, r0, r2
 800de50:	f241 4558 	movw	r5, #5208	; 0x1458
 800de54:	443d      	add	r5, r7
 800de56:	602c      	str	r4, [r5, #0]
 800de58:	eb41 0303 	adc.w	r3, r1, r3
 800de5c:	f241 425c 	movw	r2, #5212	; 0x145c
 800de60:	443a      	add	r2, r7
 800de62:	6013      	str	r3, [r2, #0]
 800de64:	230f      	movs	r3, #15
 800de66:	00da      	lsls	r2, r3, #3
 800de68:	f641 6324 	movw	r3, #7716	; 0x1e24
 800de6c:	443b      	add	r3, r7
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	4413      	add	r3, r2
 800de72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de76:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800de7a:	6809      	ldr	r1, [r1, #0]
 800de7c:	3118      	adds	r1, #24
 800de7e:	f241 4058 	movw	r0, #5208	; 0x1458
 800de82:	4438      	add	r0, r7
 800de84:	e9d0 4500 	ldrd	r4, r5, [r0]
 800de88:	4620      	mov	r0, r4
 800de8a:	1880      	adds	r0, r0, r2
 800de8c:	f241 4c50 	movw	ip, #5200	; 0x1450
 800de90:	44bc      	add	ip, r7
 800de92:	f8cc 0000 	str.w	r0, [ip]
 800de96:	4628      	mov	r0, r5
 800de98:	eb43 0000 	adc.w	r0, r3, r0
 800de9c:	f241 4354 	movw	r3, #5204	; 0x1454
 800dea0:	443b      	add	r3, r7
 800dea2:	6018      	str	r0, [r3, #0]
 800dea4:	f241 4350 	movw	r3, #5200	; 0x1450
 800dea8:	443b      	add	r3, r7
 800deaa:	e9d3 3400 	ldrd	r3, r4, [r3]
 800deae:	e9c1 3400 	strd	r3, r4, [r1]
 800deb2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	3370      	adds	r3, #112	; 0x70
 800deba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800debe:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	3318      	adds	r3, #24
 800dec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deca:	ea80 0402 	eor.w	r4, r0, r2
 800dece:	f241 4548 	movw	r5, #5192	; 0x1448
 800ded2:	443d      	add	r5, r7
 800ded4:	602c      	str	r4, [r5, #0]
 800ded6:	404b      	eors	r3, r1
 800ded8:	f241 424c 	movw	r2, #5196	; 0x144c
 800dedc:	443a      	add	r2, r7
 800dede:	6013      	str	r3, [r2, #0]
 800dee0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800deea:	2220      	movs	r2, #32
 800deec:	f241 4348 	movw	r3, #5192	; 0x1448
 800def0:	443b      	add	r3, r7
 800def2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800def6:	f7fa fb23 	bl	8008540 <rotr64>
 800defa:	4602      	mov	r2, r0
 800defc:	460b      	mov	r3, r1
 800defe:	e9c4 2300 	strd	r2, r3, [r4]
 800df02:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	3348      	adds	r3, #72	; 0x48
 800df0a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800df0e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	3370      	adds	r3, #112	; 0x70
 800df16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df1a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800df1e:	6809      	ldr	r1, [r1, #0]
 800df20:	3148      	adds	r1, #72	; 0x48
 800df22:	18a0      	adds	r0, r4, r2
 800df24:	f507 5ca2 	add.w	ip, r7, #5184	; 0x1440
 800df28:	f8cc 0000 	str.w	r0, [ip]
 800df2c:	eb45 0303 	adc.w	r3, r5, r3
 800df30:	f241 4244 	movw	r2, #5188	; 0x1444
 800df34:	443a      	add	r2, r7
 800df36:	6013      	str	r3, [r2, #0]
 800df38:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 800df3c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800df40:	e9c1 3400 	strd	r3, r4, [r1]
 800df44:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	3320      	adds	r3, #32
 800df4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800df50:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	3348      	adds	r3, #72	; 0x48
 800df58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df5c:	ea80 0402 	eor.w	r4, r0, r2
 800df60:	f241 4538 	movw	r5, #5176	; 0x1438
 800df64:	443d      	add	r5, r7
 800df66:	602c      	str	r4, [r5, #0]
 800df68:	404b      	eors	r3, r1
 800df6a:	f241 423c 	movw	r2, #5180	; 0x143c
 800df6e:	443a      	add	r2, r7
 800df70:	6013      	str	r3, [r2, #0]
 800df72:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	f103 0420 	add.w	r4, r3, #32
 800df7c:	2218      	movs	r2, #24
 800df7e:	f241 4338 	movw	r3, #5176	; 0x1438
 800df82:	443b      	add	r3, r7
 800df84:	e9d3 0100 	ldrd	r0, r1, [r3]
 800df88:	f7fa fada 	bl	8008540 <rotr64>
 800df8c:	4602      	mov	r2, r0
 800df8e:	460b      	mov	r3, r1
 800df90:	e9c4 2300 	strd	r2, r3, [r4]
 800df94:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	3318      	adds	r3, #24
 800df9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dfa0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	3320      	adds	r3, #32
 800dfa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfac:	1884      	adds	r4, r0, r2
 800dfae:	f241 4530 	movw	r5, #5168	; 0x1430
 800dfb2:	443d      	add	r5, r7
 800dfb4:	602c      	str	r4, [r5, #0]
 800dfb6:	eb41 0303 	adc.w	r3, r1, r3
 800dfba:	f241 4234 	movw	r2, #5172	; 0x1434
 800dfbe:	443a      	add	r2, r7
 800dfc0:	6013      	str	r3, [r2, #0]
 800dfc2:	2308      	movs	r3, #8
 800dfc4:	00da      	lsls	r2, r3, #3
 800dfc6:	f641 6324 	movw	r3, #7716	; 0x1e24
 800dfca:	443b      	add	r3, r7
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	4413      	add	r3, r2
 800dfd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd4:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800dfd8:	6809      	ldr	r1, [r1, #0]
 800dfda:	3118      	adds	r1, #24
 800dfdc:	f241 4030 	movw	r0, #5168	; 0x1430
 800dfe0:	4438      	add	r0, r7
 800dfe2:	e9d0 4500 	ldrd	r4, r5, [r0]
 800dfe6:	4620      	mov	r0, r4
 800dfe8:	1880      	adds	r0, r0, r2
 800dfea:	f241 4c28 	movw	ip, #5160	; 0x1428
 800dfee:	44bc      	add	ip, r7
 800dff0:	f8cc 0000 	str.w	r0, [ip]
 800dff4:	4628      	mov	r0, r5
 800dff6:	eb43 0000 	adc.w	r0, r3, r0
 800dffa:	f241 432c 	movw	r3, #5164	; 0x142c
 800dffe:	443b      	add	r3, r7
 800e000:	6018      	str	r0, [r3, #0]
 800e002:	f241 4328 	movw	r3, #5160	; 0x1428
 800e006:	443b      	add	r3, r7
 800e008:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e00c:	e9c1 3400 	strd	r3, r4, [r1]
 800e010:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	3370      	adds	r3, #112	; 0x70
 800e018:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e01c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	3318      	adds	r3, #24
 800e024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e028:	ea80 0402 	eor.w	r4, r0, r2
 800e02c:	f507 55a1 	add.w	r5, r7, #5152	; 0x1420
 800e030:	602c      	str	r4, [r5, #0]
 800e032:	404b      	eors	r3, r1
 800e034:	f241 4224 	movw	r2, #5156	; 0x1424
 800e038:	443a      	add	r2, r7
 800e03a:	6013      	str	r3, [r2, #0]
 800e03c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800e046:	2210      	movs	r2, #16
 800e048:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 800e04c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e050:	f7fa fa76 	bl	8008540 <rotr64>
 800e054:	4602      	mov	r2, r0
 800e056:	460b      	mov	r3, r1
 800e058:	e9c4 2300 	strd	r2, r3, [r4]
 800e05c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	3348      	adds	r3, #72	; 0x48
 800e064:	e9d3 4500 	ldrd	r4, r5, [r3]
 800e068:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	3370      	adds	r3, #112	; 0x70
 800e070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e074:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800e078:	6809      	ldr	r1, [r1, #0]
 800e07a:	3148      	adds	r1, #72	; 0x48
 800e07c:	18a0      	adds	r0, r4, r2
 800e07e:	f241 4c18 	movw	ip, #5144	; 0x1418
 800e082:	44bc      	add	ip, r7
 800e084:	f8cc 0000 	str.w	r0, [ip]
 800e088:	eb45 0303 	adc.w	r3, r5, r3
 800e08c:	f241 421c 	movw	r2, #5148	; 0x141c
 800e090:	443a      	add	r2, r7
 800e092:	6013      	str	r3, [r2, #0]
 800e094:	f241 4318 	movw	r3, #5144	; 0x1418
 800e098:	443b      	add	r3, r7
 800e09a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e09e:	e9c1 3400 	strd	r3, r4, [r1]
 800e0a2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	3320      	adds	r3, #32
 800e0aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e0ae:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	3348      	adds	r3, #72	; 0x48
 800e0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ba:	ea80 0402 	eor.w	r4, r0, r2
 800e0be:	f241 4510 	movw	r5, #5136	; 0x1410
 800e0c2:	443d      	add	r5, r7
 800e0c4:	602c      	str	r4, [r5, #0]
 800e0c6:	404b      	eors	r3, r1
 800e0c8:	f241 4214 	movw	r2, #5140	; 0x1414
 800e0cc:	443a      	add	r2, r7
 800e0ce:	6013      	str	r3, [r2, #0]
 800e0d0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	f103 0420 	add.w	r4, r3, #32
 800e0da:	223f      	movs	r2, #63	; 0x3f
 800e0dc:	f241 4310 	movw	r3, #5136	; 0x1410
 800e0e0:	443b      	add	r3, r7
 800e0e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e0e6:	f7fa fa2b 	bl	8008540 <rotr64>
 800e0ea:	4602      	mov	r2, r0
 800e0ec:	460b      	mov	r3, r1
 800e0ee:	e9c4 2300 	strd	r2, r3, [r4]
  ROUND( 4 );
 800e0f2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e0fc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	3320      	adds	r3, #32
 800e104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e108:	1884      	adds	r4, r0, r2
 800e10a:	f241 4508 	movw	r5, #5128	; 0x1408
 800e10e:	443d      	add	r5, r7
 800e110:	602c      	str	r4, [r5, #0]
 800e112:	eb41 0303 	adc.w	r3, r1, r3
 800e116:	f241 420c 	movw	r2, #5132	; 0x140c
 800e11a:	443a      	add	r2, r7
 800e11c:	6013      	str	r3, [r2, #0]
 800e11e:	2309      	movs	r3, #9
 800e120:	00da      	lsls	r2, r3, #3
 800e122:	f641 6324 	movw	r3, #7716	; 0x1e24
 800e126:	443b      	add	r3, r7
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	4413      	add	r3, r2
 800e12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e130:	f241 4108 	movw	r1, #5128	; 0x1408
 800e134:	4439      	add	r1, r7
 800e136:	e9d1 4500 	ldrd	r4, r5, [r1]
 800e13a:	4621      	mov	r1, r4
 800e13c:	1889      	adds	r1, r1, r2
 800e13e:	f507 50a0 	add.w	r0, r7, #5120	; 0x1400
 800e142:	6001      	str	r1, [r0, #0]
 800e144:	4629      	mov	r1, r5
 800e146:	eb43 0101 	adc.w	r1, r3, r1
 800e14a:	f241 4304 	movw	r3, #5124	; 0x1404
 800e14e:	443b      	add	r3, r7
 800e150:	6019      	str	r1, [r3, #0]
 800e152:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 800e15c:	e9d2 1200 	ldrd	r1, r2, [r2]
 800e160:	e9c3 1200 	strd	r1, r2, [r3]
 800e164:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	3360      	adds	r3, #96	; 0x60
 800e16c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e170:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e17a:	ea80 0402 	eor.w	r4, r0, r2
 800e17e:	f241 35f8 	movw	r5, #5112	; 0x13f8
 800e182:	443d      	add	r5, r7
 800e184:	602c      	str	r4, [r5, #0]
 800e186:	404b      	eors	r3, r1
 800e188:	f241 32fc 	movw	r2, #5116	; 0x13fc
 800e18c:	443a      	add	r2, r7
 800e18e:	6013      	str	r3, [r2, #0]
 800e190:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800e19a:	2220      	movs	r2, #32
 800e19c:	f241 33f8 	movw	r3, #5112	; 0x13f8
 800e1a0:	443b      	add	r3, r7
 800e1a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e1a6:	f7fa f9cb 	bl	8008540 <rotr64>
 800e1aa:	4602      	mov	r2, r0
 800e1ac:	460b      	mov	r3, r1
 800e1ae:	e9c4 2300 	strd	r2, r3, [r4]
 800e1b2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	3340      	adds	r3, #64	; 0x40
 800e1ba:	e9d3 4500 	ldrd	r4, r5, [r3]
 800e1be:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	3360      	adds	r3, #96	; 0x60
 800e1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ca:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800e1ce:	6809      	ldr	r1, [r1, #0]
 800e1d0:	3140      	adds	r1, #64	; 0x40
 800e1d2:	18a0      	adds	r0, r4, r2
 800e1d4:	f241 3cf0 	movw	ip, #5104	; 0x13f0
 800e1d8:	44bc      	add	ip, r7
 800e1da:	f8cc 0000 	str.w	r0, [ip]
 800e1de:	eb45 0303 	adc.w	r3, r5, r3
 800e1e2:	f241 32f4 	movw	r2, #5108	; 0x13f4
 800e1e6:	443a      	add	r2, r7
 800e1e8:	6013      	str	r3, [r2, #0]
 800e1ea:	f241 33f0 	movw	r3, #5104	; 0x13f0
 800e1ee:	443b      	add	r3, r7
 800e1f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e1f4:	e9c1 3400 	strd	r3, r4, [r1]
 800e1f8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	3320      	adds	r3, #32
 800e200:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e204:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	3340      	adds	r3, #64	; 0x40
 800e20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e210:	ea80 0402 	eor.w	r4, r0, r2
 800e214:	f241 35e8 	movw	r5, #5096	; 0x13e8
 800e218:	443d      	add	r5, r7
 800e21a:	602c      	str	r4, [r5, #0]
 800e21c:	404b      	eors	r3, r1
 800e21e:	f241 32ec 	movw	r2, #5100	; 0x13ec
 800e222:	443a      	add	r2, r7
 800e224:	6013      	str	r3, [r2, #0]
 800e226:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	f103 0420 	add.w	r4, r3, #32
 800e230:	2218      	movs	r2, #24
 800e232:	f241 33e8 	movw	r3, #5096	; 0x13e8
 800e236:	443b      	add	r3, r7
 800e238:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e23c:	f7fa f980 	bl	8008540 <rotr64>
 800e240:	4602      	mov	r2, r0
 800e242:	460b      	mov	r3, r1
 800e244:	e9c4 2300 	strd	r2, r3, [r4]
 800e248:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e252:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	3320      	adds	r3, #32
 800e25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e25e:	1884      	adds	r4, r0, r2
 800e260:	f507 559f 	add.w	r5, r7, #5088	; 0x13e0
 800e264:	602c      	str	r4, [r5, #0]
 800e266:	eb41 0303 	adc.w	r3, r1, r3
 800e26a:	f241 32e4 	movw	r2, #5092	; 0x13e4
 800e26e:	443a      	add	r2, r7
 800e270:	6013      	str	r3, [r2, #0]
 800e272:	2300      	movs	r3, #0
 800e274:	00da      	lsls	r2, r3, #3
 800e276:	f641 6324 	movw	r3, #7716	; 0x1e24
 800e27a:	443b      	add	r3, r7
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	4413      	add	r3, r2
 800e280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e284:	f507 519f 	add.w	r1, r7, #5088	; 0x13e0
 800e288:	e9d1 4500 	ldrd	r4, r5, [r1]
 800e28c:	4621      	mov	r1, r4
 800e28e:	1889      	adds	r1, r1, r2
 800e290:	f241 30d8 	movw	r0, #5080	; 0x13d8
 800e294:	4438      	add	r0, r7
 800e296:	6001      	str	r1, [r0, #0]
 800e298:	4629      	mov	r1, r5
 800e29a:	eb43 0101 	adc.w	r1, r3, r1
 800e29e:	f241 33dc 	movw	r3, #5084	; 0x13dc
 800e2a2:	443b      	add	r3, r7
 800e2a4:	6019      	str	r1, [r3, #0]
 800e2a6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	f241 32d8 	movw	r2, #5080	; 0x13d8
 800e2b0:	443a      	add	r2, r7
 800e2b2:	e9d2 1200 	ldrd	r1, r2, [r2]
 800e2b6:	e9c3 1200 	strd	r1, r2, [r3]
 800e2ba:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	3360      	adds	r3, #96	; 0x60
 800e2c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e2c6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2d0:	ea80 0402 	eor.w	r4, r0, r2
 800e2d4:	f241 35d0 	movw	r5, #5072	; 0x13d0
 800e2d8:	443d      	add	r5, r7
 800e2da:	602c      	str	r4, [r5, #0]
 800e2dc:	404b      	eors	r3, r1
 800e2de:	f241 32d4 	movw	r2, #5076	; 0x13d4
 800e2e2:	443a      	add	r2, r7
 800e2e4:	6013      	str	r3, [r2, #0]
 800e2e6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800e2f0:	2210      	movs	r2, #16
 800e2f2:	f241 33d0 	movw	r3, #5072	; 0x13d0
 800e2f6:	443b      	add	r3, r7
 800e2f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e2fc:	f7fa f920 	bl	8008540 <rotr64>
 800e300:	4602      	mov	r2, r0
 800e302:	460b      	mov	r3, r1
 800e304:	e9c4 2300 	strd	r2, r3, [r4]
 800e308:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	3340      	adds	r3, #64	; 0x40
 800e310:	e9d3 4500 	ldrd	r4, r5, [r3]
 800e314:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	3360      	adds	r3, #96	; 0x60
 800e31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e320:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800e324:	6809      	ldr	r1, [r1, #0]
 800e326:	3140      	adds	r1, #64	; 0x40
 800e328:	18a0      	adds	r0, r4, r2
 800e32a:	f241 3cc8 	movw	ip, #5064	; 0x13c8
 800e32e:	44bc      	add	ip, r7
 800e330:	f8cc 0000 	str.w	r0, [ip]
 800e334:	eb45 0303 	adc.w	r3, r5, r3
 800e338:	f241 32cc 	movw	r2, #5068	; 0x13cc
 800e33c:	443a      	add	r2, r7
 800e33e:	6013      	str	r3, [r2, #0]
 800e340:	f241 33c8 	movw	r3, #5064	; 0x13c8
 800e344:	443b      	add	r3, r7
 800e346:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e34a:	e9c1 3400 	strd	r3, r4, [r1]
 800e34e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	3320      	adds	r3, #32
 800e356:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e35a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	3340      	adds	r3, #64	; 0x40
 800e362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e366:	ea80 0402 	eor.w	r4, r0, r2
 800e36a:	f507 559e 	add.w	r5, r7, #5056	; 0x13c0
 800e36e:	602c      	str	r4, [r5, #0]
 800e370:	404b      	eors	r3, r1
 800e372:	f241 32c4 	movw	r2, #5060	; 0x13c4
 800e376:	443a      	add	r2, r7
 800e378:	6013      	str	r3, [r2, #0]
 800e37a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	f103 0420 	add.w	r4, r3, #32
 800e384:	223f      	movs	r2, #63	; 0x3f
 800e386:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800e38a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e38e:	f7fa f8d7 	bl	8008540 <rotr64>
 800e392:	4602      	mov	r2, r0
 800e394:	460b      	mov	r3, r1
 800e396:	e9c4 2300 	strd	r2, r3, [r4]
 800e39a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	3308      	adds	r3, #8
 800e3a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e3a6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	3328      	adds	r3, #40	; 0x28
 800e3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b2:	1884      	adds	r4, r0, r2
 800e3b4:	f241 35b8 	movw	r5, #5048	; 0x13b8
 800e3b8:	443d      	add	r5, r7
 800e3ba:	602c      	str	r4, [r5, #0]
 800e3bc:	eb41 0303 	adc.w	r3, r1, r3
 800e3c0:	f241 32bc 	movw	r2, #5052	; 0x13bc
 800e3c4:	443a      	add	r2, r7
 800e3c6:	6013      	str	r3, [r2, #0]
 800e3c8:	2305      	movs	r3, #5
 800e3ca:	00da      	lsls	r2, r3, #3
 800e3cc:	f641 6324 	movw	r3, #7716	; 0x1e24
 800e3d0:	443b      	add	r3, r7
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	4413      	add	r3, r2
 800e3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3da:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800e3de:	6809      	ldr	r1, [r1, #0]
 800e3e0:	3108      	adds	r1, #8
 800e3e2:	f241 30b8 	movw	r0, #5048	; 0x13b8
 800e3e6:	4438      	add	r0, r7
 800e3e8:	e9d0 4500 	ldrd	r4, r5, [r0]
 800e3ec:	4620      	mov	r0, r4
 800e3ee:	1880      	adds	r0, r0, r2
 800e3f0:	f241 3cb0 	movw	ip, #5040	; 0x13b0
 800e3f4:	44bc      	add	ip, r7
 800e3f6:	f8cc 0000 	str.w	r0, [ip]
 800e3fa:	4628      	mov	r0, r5
 800e3fc:	eb43 0000 	adc.w	r0, r3, r0
 800e400:	f241 33b4 	movw	r3, #5044	; 0x13b4
 800e404:	443b      	add	r3, r7
 800e406:	6018      	str	r0, [r3, #0]
 800e408:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e40c:	443b      	add	r3, r7
 800e40e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e412:	e9c1 3400 	strd	r3, r4, [r1]
 800e416:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	3368      	adds	r3, #104	; 0x68
 800e41e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e422:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	3308      	adds	r3, #8
 800e42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e42e:	ea80 0402 	eor.w	r4, r0, r2
 800e432:	f241 35a8 	movw	r5, #5032	; 0x13a8
 800e436:	443d      	add	r5, r7
 800e438:	602c      	str	r4, [r5, #0]
 800e43a:	404b      	eors	r3, r1
 800e43c:	f241 32ac 	movw	r2, #5036	; 0x13ac
 800e440:	443a      	add	r2, r7
 800e442:	6013      	str	r3, [r2, #0]
 800e444:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800e44e:	2220      	movs	r2, #32
 800e450:	f241 33a8 	movw	r3, #5032	; 0x13a8
 800e454:	443b      	add	r3, r7
 800e456:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e45a:	f7fa f871 	bl	8008540 <rotr64>
 800e45e:	4602      	mov	r2, r0
 800e460:	460b      	mov	r3, r1
 800e462:	e9c4 2300 	strd	r2, r3, [r4]
 800e466:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	3348      	adds	r3, #72	; 0x48
 800e46e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800e472:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	3368      	adds	r3, #104	; 0x68
 800e47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e47e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800e482:	6809      	ldr	r1, [r1, #0]
 800e484:	3148      	adds	r1, #72	; 0x48
 800e486:	18a0      	adds	r0, r4, r2
 800e488:	f507 5c9d 	add.w	ip, r7, #5024	; 0x13a0
 800e48c:	f8cc 0000 	str.w	r0, [ip]
 800e490:	eb45 0303 	adc.w	r3, r5, r3
 800e494:	f241 32a4 	movw	r2, #5028	; 0x13a4
 800e498:	443a      	add	r2, r7
 800e49a:	6013      	str	r3, [r2, #0]
 800e49c:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 800e4a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e4a4:	e9c1 3400 	strd	r3, r4, [r1]
 800e4a8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	3328      	adds	r3, #40	; 0x28
 800e4b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e4b4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	3348      	adds	r3, #72	; 0x48
 800e4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c0:	ea80 0402 	eor.w	r4, r0, r2
 800e4c4:	f241 3598 	movw	r5, #5016	; 0x1398
 800e4c8:	443d      	add	r5, r7
 800e4ca:	602c      	str	r4, [r5, #0]
 800e4cc:	404b      	eors	r3, r1
 800e4ce:	f241 329c 	movw	r2, #5020	; 0x139c
 800e4d2:	443a      	add	r2, r7
 800e4d4:	6013      	str	r3, [r2, #0]
 800e4d6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800e4e0:	2218      	movs	r2, #24
 800e4e2:	f241 3398 	movw	r3, #5016	; 0x1398
 800e4e6:	443b      	add	r3, r7
 800e4e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e4ec:	f7fa f828 	bl	8008540 <rotr64>
 800e4f0:	4602      	mov	r2, r0
 800e4f2:	460b      	mov	r3, r1
 800e4f4:	e9c4 2300 	strd	r2, r3, [r4]
 800e4f8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	3308      	adds	r3, #8
 800e500:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e504:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	3328      	adds	r3, #40	; 0x28
 800e50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e510:	1884      	adds	r4, r0, r2
 800e512:	f241 3590 	movw	r5, #5008	; 0x1390
 800e516:	443d      	add	r5, r7
 800e518:	602c      	str	r4, [r5, #0]
 800e51a:	eb41 0303 	adc.w	r3, r1, r3
 800e51e:	f241 3294 	movw	r2, #5012	; 0x1394
 800e522:	443a      	add	r2, r7
 800e524:	6013      	str	r3, [r2, #0]
 800e526:	2307      	movs	r3, #7
 800e528:	00da      	lsls	r2, r3, #3
 800e52a:	f641 6324 	movw	r3, #7716	; 0x1e24
 800e52e:	443b      	add	r3, r7
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	4413      	add	r3, r2
 800e534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e538:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800e53c:	6809      	ldr	r1, [r1, #0]
 800e53e:	3108      	adds	r1, #8
 800e540:	f241 3090 	movw	r0, #5008	; 0x1390
 800e544:	4438      	add	r0, r7
 800e546:	e9d0 4500 	ldrd	r4, r5, [r0]
 800e54a:	4620      	mov	r0, r4
 800e54c:	1880      	adds	r0, r0, r2
 800e54e:	f241 3c88 	movw	ip, #5000	; 0x1388
 800e552:	44bc      	add	ip, r7
 800e554:	f8cc 0000 	str.w	r0, [ip]
 800e558:	4628      	mov	r0, r5
 800e55a:	eb43 0000 	adc.w	r0, r3, r0
 800e55e:	f241 338c 	movw	r3, #5004	; 0x138c
 800e562:	443b      	add	r3, r7
 800e564:	6018      	str	r0, [r3, #0]
 800e566:	f241 3388 	movw	r3, #5000	; 0x1388
 800e56a:	443b      	add	r3, r7
 800e56c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e570:	e9c1 3400 	strd	r3, r4, [r1]
 800e574:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	3368      	adds	r3, #104	; 0x68
 800e57c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e580:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	3308      	adds	r3, #8
 800e588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e58c:	ea80 0402 	eor.w	r4, r0, r2
 800e590:	f507 559c 	add.w	r5, r7, #4992	; 0x1380
 800e594:	602c      	str	r4, [r5, #0]
 800e596:	404b      	eors	r3, r1
 800e598:	f241 3284 	movw	r2, #4996	; 0x1384
 800e59c:	443a      	add	r2, r7
 800e59e:	6013      	str	r3, [r2, #0]
 800e5a0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800e5aa:	2210      	movs	r2, #16
 800e5ac:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e5b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e5b4:	f7f9 ffc4 	bl	8008540 <rotr64>
 800e5b8:	4602      	mov	r2, r0
 800e5ba:	460b      	mov	r3, r1
 800e5bc:	e9c4 2300 	strd	r2, r3, [r4]
 800e5c0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	3348      	adds	r3, #72	; 0x48
 800e5c8:	e9d3 4500 	ldrd	r4, r5, [r3]
 800e5cc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	3368      	adds	r3, #104	; 0x68
 800e5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d8:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800e5dc:	6809      	ldr	r1, [r1, #0]
 800e5de:	3148      	adds	r1, #72	; 0x48
 800e5e0:	18a0      	adds	r0, r4, r2
 800e5e2:	f241 3c78 	movw	ip, #4984	; 0x1378
 800e5e6:	44bc      	add	ip, r7
 800e5e8:	f8cc 0000 	str.w	r0, [ip]
 800e5ec:	eb45 0303 	adc.w	r3, r5, r3
 800e5f0:	f241 327c 	movw	r2, #4988	; 0x137c
 800e5f4:	443a      	add	r2, r7
 800e5f6:	6013      	str	r3, [r2, #0]
 800e5f8:	f241 3378 	movw	r3, #4984	; 0x1378
 800e5fc:	443b      	add	r3, r7
 800e5fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e602:	e9c1 3400 	strd	r3, r4, [r1]
 800e606:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	3328      	adds	r3, #40	; 0x28
 800e60e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e612:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	3348      	adds	r3, #72	; 0x48
 800e61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e61e:	ea80 0402 	eor.w	r4, r0, r2
 800e622:	f241 3570 	movw	r5, #4976	; 0x1370
 800e626:	443d      	add	r5, r7
 800e628:	602c      	str	r4, [r5, #0]
 800e62a:	404b      	eors	r3, r1
 800e62c:	f241 3274 	movw	r2, #4980	; 0x1374
 800e630:	443a      	add	r2, r7
 800e632:	6013      	str	r3, [r2, #0]
 800e634:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800e63e:	223f      	movs	r2, #63	; 0x3f
 800e640:	f241 3370 	movw	r3, #4976	; 0x1370
 800e644:	443b      	add	r3, r7
 800e646:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e64a:	f7f9 ff79 	bl	8008540 <rotr64>
 800e64e:	4602      	mov	r2, r0
 800e650:	460b      	mov	r3, r1
 800e652:	e9c4 2300 	strd	r2, r3, [r4]
 800e656:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	3310      	adds	r3, #16
 800e65e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e662:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	3330      	adds	r3, #48	; 0x30
 800e66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e66e:	1884      	adds	r4, r0, r2
 800e670:	f241 3568 	movw	r5, #4968	; 0x1368
 800e674:	443d      	add	r5, r7
 800e676:	602c      	str	r4, [r5, #0]
 800e678:	eb41 0303 	adc.w	r3, r1, r3
 800e67c:	f241 326c 	movw	r2, #4972	; 0x136c
 800e680:	443a      	add	r2, r7
 800e682:	6013      	str	r3, [r2, #0]
 800e684:	2302      	movs	r3, #2
 800e686:	00da      	lsls	r2, r3, #3
 800e688:	f641 6324 	movw	r3, #7716	; 0x1e24
 800e68c:	443b      	add	r3, r7
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	4413      	add	r3, r2
 800e692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e696:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800e69a:	6809      	ldr	r1, [r1, #0]
 800e69c:	3110      	adds	r1, #16
 800e69e:	f241 3068 	movw	r0, #4968	; 0x1368
 800e6a2:	4438      	add	r0, r7
 800e6a4:	e9d0 4500 	ldrd	r4, r5, [r0]
 800e6a8:	4620      	mov	r0, r4
 800e6aa:	1880      	adds	r0, r0, r2
 800e6ac:	f507 5c9b 	add.w	ip, r7, #4960	; 0x1360
 800e6b0:	f8cc 0000 	str.w	r0, [ip]
 800e6b4:	4628      	mov	r0, r5
 800e6b6:	eb43 0000 	adc.w	r0, r3, r0
 800e6ba:	f241 3364 	movw	r3, #4964	; 0x1364
 800e6be:	443b      	add	r3, r7
 800e6c0:	6018      	str	r0, [r3, #0]
 800e6c2:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800e6c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e6ca:	e9c1 3400 	strd	r3, r4, [r1]
 800e6ce:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	3370      	adds	r3, #112	; 0x70
 800e6d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e6da:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	3310      	adds	r3, #16
 800e6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e6:	ea80 0402 	eor.w	r4, r0, r2
 800e6ea:	f241 3558 	movw	r5, #4952	; 0x1358
 800e6ee:	443d      	add	r5, r7
 800e6f0:	602c      	str	r4, [r5, #0]
 800e6f2:	404b      	eors	r3, r1
 800e6f4:	f241 325c 	movw	r2, #4956	; 0x135c
 800e6f8:	443a      	add	r2, r7
 800e6fa:	6013      	str	r3, [r2, #0]
 800e6fc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800e706:	2220      	movs	r2, #32
 800e708:	f241 3358 	movw	r3, #4952	; 0x1358
 800e70c:	443b      	add	r3, r7
 800e70e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e712:	f7f9 ff15 	bl	8008540 <rotr64>
 800e716:	4602      	mov	r2, r0
 800e718:	460b      	mov	r3, r1
 800e71a:	e9c4 2300 	strd	r2, r3, [r4]
 800e71e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	3350      	adds	r3, #80	; 0x50
 800e726:	e9d3 4500 	ldrd	r4, r5, [r3]
 800e72a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	3370      	adds	r3, #112	; 0x70
 800e732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e736:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800e73a:	6809      	ldr	r1, [r1, #0]
 800e73c:	3150      	adds	r1, #80	; 0x50
 800e73e:	18a0      	adds	r0, r4, r2
 800e740:	f241 3c50 	movw	ip, #4944	; 0x1350
 800e744:	44bc      	add	ip, r7
 800e746:	f8cc 0000 	str.w	r0, [ip]
 800e74a:	eb45 0303 	adc.w	r3, r5, r3
 800e74e:	f241 3254 	movw	r2, #4948	; 0x1354
 800e752:	443a      	add	r2, r7
 800e754:	6013      	str	r3, [r2, #0]
 800e756:	f241 3350 	movw	r3, #4944	; 0x1350
 800e75a:	443b      	add	r3, r7
 800e75c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e760:	e9c1 3400 	strd	r3, r4, [r1]
 800e764:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	3330      	adds	r3, #48	; 0x30
 800e76c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e770:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	3350      	adds	r3, #80	; 0x50
 800e778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e77c:	ea80 0402 	eor.w	r4, r0, r2
 800e780:	f241 3548 	movw	r5, #4936	; 0x1348
 800e784:	443d      	add	r5, r7
 800e786:	602c      	str	r4, [r5, #0]
 800e788:	404b      	eors	r3, r1
 800e78a:	f241 324c 	movw	r2, #4940	; 0x134c
 800e78e:	443a      	add	r2, r7
 800e790:	6013      	str	r3, [r2, #0]
 800e792:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800e79c:	2218      	movs	r2, #24
 800e79e:	f241 3348 	movw	r3, #4936	; 0x1348
 800e7a2:	443b      	add	r3, r7
 800e7a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e7a8:	f7f9 feca 	bl	8008540 <rotr64>
 800e7ac:	4602      	mov	r2, r0
 800e7ae:	460b      	mov	r3, r1
 800e7b0:	e9c4 2300 	strd	r2, r3, [r4]
 800e7b4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	3310      	adds	r3, #16
 800e7bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e7c0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	3330      	adds	r3, #48	; 0x30
 800e7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7cc:	1884      	adds	r4, r0, r2
 800e7ce:	f507 559a 	add.w	r5, r7, #4928	; 0x1340
 800e7d2:	602c      	str	r4, [r5, #0]
 800e7d4:	eb41 0303 	adc.w	r3, r1, r3
 800e7d8:	f241 3244 	movw	r2, #4932	; 0x1344
 800e7dc:	443a      	add	r2, r7
 800e7de:	6013      	str	r3, [r2, #0]
 800e7e0:	2304      	movs	r3, #4
 800e7e2:	00da      	lsls	r2, r3, #3
 800e7e4:	f641 6324 	movw	r3, #7716	; 0x1e24
 800e7e8:	443b      	add	r3, r7
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	4413      	add	r3, r2
 800e7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f2:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800e7f6:	6809      	ldr	r1, [r1, #0]
 800e7f8:	3110      	adds	r1, #16
 800e7fa:	f507 509a 	add.w	r0, r7, #4928	; 0x1340
 800e7fe:	e9d0 4500 	ldrd	r4, r5, [r0]
 800e802:	4620      	mov	r0, r4
 800e804:	1880      	adds	r0, r0, r2
 800e806:	f241 3c38 	movw	ip, #4920	; 0x1338
 800e80a:	44bc      	add	ip, r7
 800e80c:	f8cc 0000 	str.w	r0, [ip]
 800e810:	4628      	mov	r0, r5
 800e812:	eb43 0000 	adc.w	r0, r3, r0
 800e816:	f241 333c 	movw	r3, #4924	; 0x133c
 800e81a:	443b      	add	r3, r7
 800e81c:	6018      	str	r0, [r3, #0]
 800e81e:	f241 3338 	movw	r3, #4920	; 0x1338
 800e822:	443b      	add	r3, r7
 800e824:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e828:	e9c1 3400 	strd	r3, r4, [r1]
 800e82c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	3370      	adds	r3, #112	; 0x70
 800e834:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e838:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	3310      	adds	r3, #16
 800e840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e844:	ea80 0402 	eor.w	r4, r0, r2
 800e848:	f241 3530 	movw	r5, #4912	; 0x1330
 800e84c:	443d      	add	r5, r7
 800e84e:	602c      	str	r4, [r5, #0]
 800e850:	404b      	eors	r3, r1
 800e852:	f241 3234 	movw	r2, #4916	; 0x1334
 800e856:	443a      	add	r2, r7
 800e858:	6013      	str	r3, [r2, #0]
 800e85a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800e864:	2210      	movs	r2, #16
 800e866:	f241 3330 	movw	r3, #4912	; 0x1330
 800e86a:	443b      	add	r3, r7
 800e86c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e870:	f7f9 fe66 	bl	8008540 <rotr64>
 800e874:	4602      	mov	r2, r0
 800e876:	460b      	mov	r3, r1
 800e878:	e9c4 2300 	strd	r2, r3, [r4]
 800e87c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	3350      	adds	r3, #80	; 0x50
 800e884:	e9d3 4500 	ldrd	r4, r5, [r3]
 800e888:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	3370      	adds	r3, #112	; 0x70
 800e890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e894:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800e898:	6809      	ldr	r1, [r1, #0]
 800e89a:	3150      	adds	r1, #80	; 0x50
 800e89c:	18a0      	adds	r0, r4, r2
 800e89e:	f241 3c28 	movw	ip, #4904	; 0x1328
 800e8a2:	44bc      	add	ip, r7
 800e8a4:	f8cc 0000 	str.w	r0, [ip]
 800e8a8:	eb45 0303 	adc.w	r3, r5, r3
 800e8ac:	f241 322c 	movw	r2, #4908	; 0x132c
 800e8b0:	443a      	add	r2, r7
 800e8b2:	6013      	str	r3, [r2, #0]
 800e8b4:	f241 3328 	movw	r3, #4904	; 0x1328
 800e8b8:	443b      	add	r3, r7
 800e8ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e8be:	e9c1 3400 	strd	r3, r4, [r1]
 800e8c2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	3330      	adds	r3, #48	; 0x30
 800e8ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e8ce:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	3350      	adds	r3, #80	; 0x50
 800e8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8da:	ea80 0402 	eor.w	r4, r0, r2
 800e8de:	f507 5599 	add.w	r5, r7, #4896	; 0x1320
 800e8e2:	602c      	str	r4, [r5, #0]
 800e8e4:	404b      	eors	r3, r1
 800e8e6:	f241 3224 	movw	r2, #4900	; 0x1324
 800e8ea:	443a      	add	r2, r7
 800e8ec:	6013      	str	r3, [r2, #0]
 800e8ee:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800e8f8:	223f      	movs	r2, #63	; 0x3f
 800e8fa:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 800e8fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e902:	f7f9 fe1d 	bl	8008540 <rotr64>
 800e906:	4602      	mov	r2, r0
 800e908:	460b      	mov	r3, r1
 800e90a:	e9c4 2300 	strd	r2, r3, [r4]
 800e90e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	3318      	adds	r3, #24
 800e916:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e91a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	3338      	adds	r3, #56	; 0x38
 800e922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e926:	1884      	adds	r4, r0, r2
 800e928:	f241 3518 	movw	r5, #4888	; 0x1318
 800e92c:	443d      	add	r5, r7
 800e92e:	602c      	str	r4, [r5, #0]
 800e930:	eb41 0303 	adc.w	r3, r1, r3
 800e934:	f241 321c 	movw	r2, #4892	; 0x131c
 800e938:	443a      	add	r2, r7
 800e93a:	6013      	str	r3, [r2, #0]
 800e93c:	230a      	movs	r3, #10
 800e93e:	00da      	lsls	r2, r3, #3
 800e940:	f641 6324 	movw	r3, #7716	; 0x1e24
 800e944:	443b      	add	r3, r7
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	4413      	add	r3, r2
 800e94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e94e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800e952:	6809      	ldr	r1, [r1, #0]
 800e954:	3118      	adds	r1, #24
 800e956:	f241 3018 	movw	r0, #4888	; 0x1318
 800e95a:	4438      	add	r0, r7
 800e95c:	e9d0 4500 	ldrd	r4, r5, [r0]
 800e960:	4620      	mov	r0, r4
 800e962:	1880      	adds	r0, r0, r2
 800e964:	f241 3c10 	movw	ip, #4880	; 0x1310
 800e968:	44bc      	add	ip, r7
 800e96a:	f8cc 0000 	str.w	r0, [ip]
 800e96e:	4628      	mov	r0, r5
 800e970:	eb43 0000 	adc.w	r0, r3, r0
 800e974:	f241 3314 	movw	r3, #4884	; 0x1314
 800e978:	443b      	add	r3, r7
 800e97a:	6018      	str	r0, [r3, #0]
 800e97c:	f241 3310 	movw	r3, #4880	; 0x1310
 800e980:	443b      	add	r3, r7
 800e982:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e986:	e9c1 3400 	strd	r3, r4, [r1]
 800e98a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	3378      	adds	r3, #120	; 0x78
 800e992:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e996:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	3318      	adds	r3, #24
 800e99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a2:	ea80 0402 	eor.w	r4, r0, r2
 800e9a6:	f241 3508 	movw	r5, #4872	; 0x1308
 800e9aa:	443d      	add	r5, r7
 800e9ac:	602c      	str	r4, [r5, #0]
 800e9ae:	404b      	eors	r3, r1
 800e9b0:	f241 320c 	movw	r2, #4876	; 0x130c
 800e9b4:	443a      	add	r2, r7
 800e9b6:	6013      	str	r3, [r2, #0]
 800e9b8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800e9c2:	2220      	movs	r2, #32
 800e9c4:	f241 3308 	movw	r3, #4872	; 0x1308
 800e9c8:	443b      	add	r3, r7
 800e9ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e9ce:	f7f9 fdb7 	bl	8008540 <rotr64>
 800e9d2:	4602      	mov	r2, r0
 800e9d4:	460b      	mov	r3, r1
 800e9d6:	e9c4 2300 	strd	r2, r3, [r4]
 800e9da:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	3358      	adds	r3, #88	; 0x58
 800e9e2:	e9d3 4500 	ldrd	r4, r5, [r3]
 800e9e6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	3378      	adds	r3, #120	; 0x78
 800e9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9f2:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800e9f6:	6809      	ldr	r1, [r1, #0]
 800e9f8:	3158      	adds	r1, #88	; 0x58
 800e9fa:	18a0      	adds	r0, r4, r2
 800e9fc:	f507 5c98 	add.w	ip, r7, #4864	; 0x1300
 800ea00:	f8cc 0000 	str.w	r0, [ip]
 800ea04:	eb45 0303 	adc.w	r3, r5, r3
 800ea08:	f241 3204 	movw	r2, #4868	; 0x1304
 800ea0c:	443a      	add	r2, r7
 800ea0e:	6013      	str	r3, [r2, #0]
 800ea10:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800ea14:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ea18:	e9c1 3400 	strd	r3, r4, [r1]
 800ea1c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	3338      	adds	r3, #56	; 0x38
 800ea24:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ea28:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	3358      	adds	r3, #88	; 0x58
 800ea30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea34:	ea80 0402 	eor.w	r4, r0, r2
 800ea38:	f241 25f8 	movw	r5, #4856	; 0x12f8
 800ea3c:	443d      	add	r5, r7
 800ea3e:	602c      	str	r4, [r5, #0]
 800ea40:	404b      	eors	r3, r1
 800ea42:	f241 22fc 	movw	r2, #4860	; 0x12fc
 800ea46:	443a      	add	r2, r7
 800ea48:	6013      	str	r3, [r2, #0]
 800ea4a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800ea54:	2218      	movs	r2, #24
 800ea56:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800ea5a:	443b      	add	r3, r7
 800ea5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ea60:	f7f9 fd6e 	bl	8008540 <rotr64>
 800ea64:	4602      	mov	r2, r0
 800ea66:	460b      	mov	r3, r1
 800ea68:	e9c4 2300 	strd	r2, r3, [r4]
 800ea6c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	3318      	adds	r3, #24
 800ea74:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ea78:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	3338      	adds	r3, #56	; 0x38
 800ea80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea84:	1884      	adds	r4, r0, r2
 800ea86:	f241 25f0 	movw	r5, #4848	; 0x12f0
 800ea8a:	443d      	add	r5, r7
 800ea8c:	602c      	str	r4, [r5, #0]
 800ea8e:	eb41 0303 	adc.w	r3, r1, r3
 800ea92:	f241 22f4 	movw	r2, #4852	; 0x12f4
 800ea96:	443a      	add	r2, r7
 800ea98:	6013      	str	r3, [r2, #0]
 800ea9a:	230f      	movs	r3, #15
 800ea9c:	00da      	lsls	r2, r3, #3
 800ea9e:	f641 6324 	movw	r3, #7716	; 0x1e24
 800eaa2:	443b      	add	r3, r7
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	4413      	add	r3, r2
 800eaa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaac:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800eab0:	6809      	ldr	r1, [r1, #0]
 800eab2:	3118      	adds	r1, #24
 800eab4:	f241 20f0 	movw	r0, #4848	; 0x12f0
 800eab8:	4438      	add	r0, r7
 800eaba:	e9d0 4500 	ldrd	r4, r5, [r0]
 800eabe:	4620      	mov	r0, r4
 800eac0:	1880      	adds	r0, r0, r2
 800eac2:	f241 2ce8 	movw	ip, #4840	; 0x12e8
 800eac6:	44bc      	add	ip, r7
 800eac8:	f8cc 0000 	str.w	r0, [ip]
 800eacc:	4628      	mov	r0, r5
 800eace:	eb43 0000 	adc.w	r0, r3, r0
 800ead2:	f241 23ec 	movw	r3, #4844	; 0x12ec
 800ead6:	443b      	add	r3, r7
 800ead8:	6018      	str	r0, [r3, #0]
 800eada:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800eade:	443b      	add	r3, r7
 800eae0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800eae4:	e9c1 3400 	strd	r3, r4, [r1]
 800eae8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	3378      	adds	r3, #120	; 0x78
 800eaf0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eaf4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	3318      	adds	r3, #24
 800eafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb00:	ea80 0402 	eor.w	r4, r0, r2
 800eb04:	f507 5597 	add.w	r5, r7, #4832	; 0x12e0
 800eb08:	602c      	str	r4, [r5, #0]
 800eb0a:	404b      	eors	r3, r1
 800eb0c:	f241 22e4 	movw	r2, #4836	; 0x12e4
 800eb10:	443a      	add	r2, r7
 800eb12:	6013      	str	r3, [r2, #0]
 800eb14:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800eb1e:	2210      	movs	r2, #16
 800eb20:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800eb24:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eb28:	f7f9 fd0a 	bl	8008540 <rotr64>
 800eb2c:	4602      	mov	r2, r0
 800eb2e:	460b      	mov	r3, r1
 800eb30:	e9c4 2300 	strd	r2, r3, [r4]
 800eb34:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	3358      	adds	r3, #88	; 0x58
 800eb3c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800eb40:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	3378      	adds	r3, #120	; 0x78
 800eb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb4c:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800eb50:	6809      	ldr	r1, [r1, #0]
 800eb52:	3158      	adds	r1, #88	; 0x58
 800eb54:	18a0      	adds	r0, r4, r2
 800eb56:	f241 2cd8 	movw	ip, #4824	; 0x12d8
 800eb5a:	44bc      	add	ip, r7
 800eb5c:	f8cc 0000 	str.w	r0, [ip]
 800eb60:	eb45 0303 	adc.w	r3, r5, r3
 800eb64:	f241 22dc 	movw	r2, #4828	; 0x12dc
 800eb68:	443a      	add	r2, r7
 800eb6a:	6013      	str	r3, [r2, #0]
 800eb6c:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800eb70:	443b      	add	r3, r7
 800eb72:	e9d3 3400 	ldrd	r3, r4, [r3]
 800eb76:	e9c1 3400 	strd	r3, r4, [r1]
 800eb7a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	3338      	adds	r3, #56	; 0x38
 800eb82:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eb86:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	3358      	adds	r3, #88	; 0x58
 800eb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb92:	ea80 0402 	eor.w	r4, r0, r2
 800eb96:	f241 25d0 	movw	r5, #4816	; 0x12d0
 800eb9a:	443d      	add	r5, r7
 800eb9c:	602c      	str	r4, [r5, #0]
 800eb9e:	404b      	eors	r3, r1
 800eba0:	f241 22d4 	movw	r2, #4820	; 0x12d4
 800eba4:	443a      	add	r2, r7
 800eba6:	6013      	str	r3, [r2, #0]
 800eba8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800ebb2:	223f      	movs	r2, #63	; 0x3f
 800ebb4:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800ebb8:	443b      	add	r3, r7
 800ebba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ebbe:	f7f9 fcbf 	bl	8008540 <rotr64>
 800ebc2:	4602      	mov	r2, r0
 800ebc4:	460b      	mov	r3, r1
 800ebc6:	e9c4 2300 	strd	r2, r3, [r4]
 800ebca:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ebd4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	3328      	adds	r3, #40	; 0x28
 800ebdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebe0:	1884      	adds	r4, r0, r2
 800ebe2:	f241 25c8 	movw	r5, #4808	; 0x12c8
 800ebe6:	443d      	add	r5, r7
 800ebe8:	602c      	str	r4, [r5, #0]
 800ebea:	eb41 0303 	adc.w	r3, r1, r3
 800ebee:	f241 22cc 	movw	r2, #4812	; 0x12cc
 800ebf2:	443a      	add	r2, r7
 800ebf4:	6013      	str	r3, [r2, #0]
 800ebf6:	230e      	movs	r3, #14
 800ebf8:	00da      	lsls	r2, r3, #3
 800ebfa:	f641 6324 	movw	r3, #7716	; 0x1e24
 800ebfe:	443b      	add	r3, r7
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	4413      	add	r3, r2
 800ec04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec08:	f241 21c8 	movw	r1, #4808	; 0x12c8
 800ec0c:	4439      	add	r1, r7
 800ec0e:	e9d1 4500 	ldrd	r4, r5, [r1]
 800ec12:	4621      	mov	r1, r4
 800ec14:	1889      	adds	r1, r1, r2
 800ec16:	f507 5096 	add.w	r0, r7, #4800	; 0x12c0
 800ec1a:	6001      	str	r1, [r0, #0]
 800ec1c:	4629      	mov	r1, r5
 800ec1e:	eb43 0101 	adc.w	r1, r3, r1
 800ec22:	f241 23c4 	movw	r3, #4804	; 0x12c4
 800ec26:	443b      	add	r3, r7
 800ec28:	6019      	str	r1, [r3, #0]
 800ec2a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800ec34:	e9d2 1200 	ldrd	r1, r2, [r2]
 800ec38:	e9c3 1200 	strd	r1, r2, [r3]
 800ec3c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	3378      	adds	r3, #120	; 0x78
 800ec44:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ec48:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec52:	ea80 0402 	eor.w	r4, r0, r2
 800ec56:	f241 25b8 	movw	r5, #4792	; 0x12b8
 800ec5a:	443d      	add	r5, r7
 800ec5c:	602c      	str	r4, [r5, #0]
 800ec5e:	404b      	eors	r3, r1
 800ec60:	f241 22bc 	movw	r2, #4796	; 0x12bc
 800ec64:	443a      	add	r2, r7
 800ec66:	6013      	str	r3, [r2, #0]
 800ec68:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800ec72:	2220      	movs	r2, #32
 800ec74:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800ec78:	443b      	add	r3, r7
 800ec7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ec7e:	f7f9 fc5f 	bl	8008540 <rotr64>
 800ec82:	4602      	mov	r2, r0
 800ec84:	460b      	mov	r3, r1
 800ec86:	e9c4 2300 	strd	r2, r3, [r4]
 800ec8a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	3350      	adds	r3, #80	; 0x50
 800ec92:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ec96:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	3378      	adds	r3, #120	; 0x78
 800ec9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca2:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800eca6:	6809      	ldr	r1, [r1, #0]
 800eca8:	3150      	adds	r1, #80	; 0x50
 800ecaa:	18a0      	adds	r0, r4, r2
 800ecac:	f241 2cb0 	movw	ip, #4784	; 0x12b0
 800ecb0:	44bc      	add	ip, r7
 800ecb2:	f8cc 0000 	str.w	r0, [ip]
 800ecb6:	eb45 0303 	adc.w	r3, r5, r3
 800ecba:	f241 22b4 	movw	r2, #4788	; 0x12b4
 800ecbe:	443a      	add	r2, r7
 800ecc0:	6013      	str	r3, [r2, #0]
 800ecc2:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800ecc6:	443b      	add	r3, r7
 800ecc8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800eccc:	e9c1 3400 	strd	r3, r4, [r1]
 800ecd0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	3328      	adds	r3, #40	; 0x28
 800ecd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ecdc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	3350      	adds	r3, #80	; 0x50
 800ece4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ece8:	ea80 0402 	eor.w	r4, r0, r2
 800ecec:	f241 25a8 	movw	r5, #4776	; 0x12a8
 800ecf0:	443d      	add	r5, r7
 800ecf2:	602c      	str	r4, [r5, #0]
 800ecf4:	404b      	eors	r3, r1
 800ecf6:	f241 22ac 	movw	r2, #4780	; 0x12ac
 800ecfa:	443a      	add	r2, r7
 800ecfc:	6013      	str	r3, [r2, #0]
 800ecfe:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800ed08:	2218      	movs	r2, #24
 800ed0a:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800ed0e:	443b      	add	r3, r7
 800ed10:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ed14:	f7f9 fc14 	bl	8008540 <rotr64>
 800ed18:	4602      	mov	r2, r0
 800ed1a:	460b      	mov	r3, r1
 800ed1c:	e9c4 2300 	strd	r2, r3, [r4]
 800ed20:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ed2a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	3328      	adds	r3, #40	; 0x28
 800ed32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed36:	1884      	adds	r4, r0, r2
 800ed38:	f507 5595 	add.w	r5, r7, #4768	; 0x12a0
 800ed3c:	602c      	str	r4, [r5, #0]
 800ed3e:	eb41 0303 	adc.w	r3, r1, r3
 800ed42:	f241 22a4 	movw	r2, #4772	; 0x12a4
 800ed46:	443a      	add	r2, r7
 800ed48:	6013      	str	r3, [r2, #0]
 800ed4a:	2301      	movs	r3, #1
 800ed4c:	00da      	lsls	r2, r3, #3
 800ed4e:	f641 6324 	movw	r3, #7716	; 0x1e24
 800ed52:	443b      	add	r3, r7
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	4413      	add	r3, r2
 800ed58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed5c:	f507 5195 	add.w	r1, r7, #4768	; 0x12a0
 800ed60:	e9d1 4500 	ldrd	r4, r5, [r1]
 800ed64:	4621      	mov	r1, r4
 800ed66:	1889      	adds	r1, r1, r2
 800ed68:	f241 2098 	movw	r0, #4760	; 0x1298
 800ed6c:	4438      	add	r0, r7
 800ed6e:	6001      	str	r1, [r0, #0]
 800ed70:	4629      	mov	r1, r5
 800ed72:	eb43 0101 	adc.w	r1, r3, r1
 800ed76:	f241 239c 	movw	r3, #4764	; 0x129c
 800ed7a:	443b      	add	r3, r7
 800ed7c:	6019      	str	r1, [r3, #0]
 800ed7e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	f241 2298 	movw	r2, #4760	; 0x1298
 800ed88:	443a      	add	r2, r7
 800ed8a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800ed8e:	e9c3 1200 	strd	r1, r2, [r3]
 800ed92:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	3378      	adds	r3, #120	; 0x78
 800ed9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ed9e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda8:	ea80 0402 	eor.w	r4, r0, r2
 800edac:	f241 2590 	movw	r5, #4752	; 0x1290
 800edb0:	443d      	add	r5, r7
 800edb2:	602c      	str	r4, [r5, #0]
 800edb4:	404b      	eors	r3, r1
 800edb6:	f241 2294 	movw	r2, #4756	; 0x1294
 800edba:	443a      	add	r2, r7
 800edbc:	6013      	str	r3, [r2, #0]
 800edbe:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800edc8:	2210      	movs	r2, #16
 800edca:	f241 2390 	movw	r3, #4752	; 0x1290
 800edce:	443b      	add	r3, r7
 800edd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800edd4:	f7f9 fbb4 	bl	8008540 <rotr64>
 800edd8:	4602      	mov	r2, r0
 800edda:	460b      	mov	r3, r1
 800eddc:	e9c4 2300 	strd	r2, r3, [r4]
 800ede0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	3350      	adds	r3, #80	; 0x50
 800ede8:	e9d3 4500 	ldrd	r4, r5, [r3]
 800edec:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	3378      	adds	r3, #120	; 0x78
 800edf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf8:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800edfc:	6809      	ldr	r1, [r1, #0]
 800edfe:	3150      	adds	r1, #80	; 0x50
 800ee00:	18a0      	adds	r0, r4, r2
 800ee02:	f241 2c88 	movw	ip, #4744	; 0x1288
 800ee06:	44bc      	add	ip, r7
 800ee08:	f8cc 0000 	str.w	r0, [ip]
 800ee0c:	eb45 0303 	adc.w	r3, r5, r3
 800ee10:	f241 228c 	movw	r2, #4748	; 0x128c
 800ee14:	443a      	add	r2, r7
 800ee16:	6013      	str	r3, [r2, #0]
 800ee18:	f241 2388 	movw	r3, #4744	; 0x1288
 800ee1c:	443b      	add	r3, r7
 800ee1e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ee22:	e9c1 3400 	strd	r3, r4, [r1]
 800ee26:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	3328      	adds	r3, #40	; 0x28
 800ee2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ee32:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	3350      	adds	r3, #80	; 0x50
 800ee3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee3e:	ea80 0402 	eor.w	r4, r0, r2
 800ee42:	f507 5594 	add.w	r5, r7, #4736	; 0x1280
 800ee46:	602c      	str	r4, [r5, #0]
 800ee48:	404b      	eors	r3, r1
 800ee4a:	f241 2284 	movw	r2, #4740	; 0x1284
 800ee4e:	443a      	add	r2, r7
 800ee50:	6013      	str	r3, [r2, #0]
 800ee52:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800ee5c:	223f      	movs	r2, #63	; 0x3f
 800ee5e:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 800ee62:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ee66:	f7f9 fb6b 	bl	8008540 <rotr64>
 800ee6a:	4602      	mov	r2, r0
 800ee6c:	460b      	mov	r3, r1
 800ee6e:	e9c4 2300 	strd	r2, r3, [r4]
 800ee72:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	3308      	adds	r3, #8
 800ee7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ee7e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	3330      	adds	r3, #48	; 0x30
 800ee86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee8a:	1884      	adds	r4, r0, r2
 800ee8c:	f241 2578 	movw	r5, #4728	; 0x1278
 800ee90:	443d      	add	r5, r7
 800ee92:	602c      	str	r4, [r5, #0]
 800ee94:	eb41 0303 	adc.w	r3, r1, r3
 800ee98:	f241 227c 	movw	r2, #4732	; 0x127c
 800ee9c:	443a      	add	r2, r7
 800ee9e:	6013      	str	r3, [r2, #0]
 800eea0:	230b      	movs	r3, #11
 800eea2:	00da      	lsls	r2, r3, #3
 800eea4:	f641 6324 	movw	r3, #7716	; 0x1e24
 800eea8:	443b      	add	r3, r7
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	4413      	add	r3, r2
 800eeae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeb2:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800eeb6:	6809      	ldr	r1, [r1, #0]
 800eeb8:	3108      	adds	r1, #8
 800eeba:	f241 2078 	movw	r0, #4728	; 0x1278
 800eebe:	4438      	add	r0, r7
 800eec0:	e9d0 4500 	ldrd	r4, r5, [r0]
 800eec4:	4620      	mov	r0, r4
 800eec6:	1880      	adds	r0, r0, r2
 800eec8:	f241 2c70 	movw	ip, #4720	; 0x1270
 800eecc:	44bc      	add	ip, r7
 800eece:	f8cc 0000 	str.w	r0, [ip]
 800eed2:	4628      	mov	r0, r5
 800eed4:	eb43 0000 	adc.w	r0, r3, r0
 800eed8:	f241 2374 	movw	r3, #4724	; 0x1274
 800eedc:	443b      	add	r3, r7
 800eede:	6018      	str	r0, [r3, #0]
 800eee0:	f241 2370 	movw	r3, #4720	; 0x1270
 800eee4:	443b      	add	r3, r7
 800eee6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800eeea:	e9c1 3400 	strd	r3, r4, [r1]
 800eeee:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	3360      	adds	r3, #96	; 0x60
 800eef6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eefa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	3308      	adds	r3, #8
 800ef02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef06:	ea80 0402 	eor.w	r4, r0, r2
 800ef0a:	f241 2568 	movw	r5, #4712	; 0x1268
 800ef0e:	443d      	add	r5, r7
 800ef10:	602c      	str	r4, [r5, #0]
 800ef12:	404b      	eors	r3, r1
 800ef14:	f241 226c 	movw	r2, #4716	; 0x126c
 800ef18:	443a      	add	r2, r7
 800ef1a:	6013      	str	r3, [r2, #0]
 800ef1c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800ef26:	2220      	movs	r2, #32
 800ef28:	f241 2368 	movw	r3, #4712	; 0x1268
 800ef2c:	443b      	add	r3, r7
 800ef2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ef32:	f7f9 fb05 	bl	8008540 <rotr64>
 800ef36:	4602      	mov	r2, r0
 800ef38:	460b      	mov	r3, r1
 800ef3a:	e9c4 2300 	strd	r2, r3, [r4]
 800ef3e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	3358      	adds	r3, #88	; 0x58
 800ef46:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ef4a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	3360      	adds	r3, #96	; 0x60
 800ef52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef56:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800ef5a:	6809      	ldr	r1, [r1, #0]
 800ef5c:	3158      	adds	r1, #88	; 0x58
 800ef5e:	18a0      	adds	r0, r4, r2
 800ef60:	f507 5c93 	add.w	ip, r7, #4704	; 0x1260
 800ef64:	f8cc 0000 	str.w	r0, [ip]
 800ef68:	eb45 0303 	adc.w	r3, r5, r3
 800ef6c:	f241 2264 	movw	r2, #4708	; 0x1264
 800ef70:	443a      	add	r2, r7
 800ef72:	6013      	str	r3, [r2, #0]
 800ef74:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800ef78:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ef7c:	e9c1 3400 	strd	r3, r4, [r1]
 800ef80:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	3330      	adds	r3, #48	; 0x30
 800ef88:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ef8c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	3358      	adds	r3, #88	; 0x58
 800ef94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef98:	ea80 0402 	eor.w	r4, r0, r2
 800ef9c:	f241 2558 	movw	r5, #4696	; 0x1258
 800efa0:	443d      	add	r5, r7
 800efa2:	602c      	str	r4, [r5, #0]
 800efa4:	404b      	eors	r3, r1
 800efa6:	f241 225c 	movw	r2, #4700	; 0x125c
 800efaa:	443a      	add	r2, r7
 800efac:	6013      	str	r3, [r2, #0]
 800efae:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800efb8:	2218      	movs	r2, #24
 800efba:	f241 2358 	movw	r3, #4696	; 0x1258
 800efbe:	443b      	add	r3, r7
 800efc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800efc4:	f7f9 fabc 	bl	8008540 <rotr64>
 800efc8:	4602      	mov	r2, r0
 800efca:	460b      	mov	r3, r1
 800efcc:	e9c4 2300 	strd	r2, r3, [r4]
 800efd0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	3308      	adds	r3, #8
 800efd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800efdc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	3330      	adds	r3, #48	; 0x30
 800efe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efe8:	1884      	adds	r4, r0, r2
 800efea:	f241 2550 	movw	r5, #4688	; 0x1250
 800efee:	443d      	add	r5, r7
 800eff0:	602c      	str	r4, [r5, #0]
 800eff2:	eb41 0303 	adc.w	r3, r1, r3
 800eff6:	f241 2254 	movw	r2, #4692	; 0x1254
 800effa:	443a      	add	r2, r7
 800effc:	6013      	str	r3, [r2, #0]
 800effe:	230c      	movs	r3, #12
 800f000:	00da      	lsls	r2, r3, #3
 800f002:	f641 6324 	movw	r3, #7716	; 0x1e24
 800f006:	443b      	add	r3, r7
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	4413      	add	r3, r2
 800f00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f010:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800f014:	6809      	ldr	r1, [r1, #0]
 800f016:	3108      	adds	r1, #8
 800f018:	f241 2050 	movw	r0, #4688	; 0x1250
 800f01c:	4438      	add	r0, r7
 800f01e:	e9d0 4500 	ldrd	r4, r5, [r0]
 800f022:	4620      	mov	r0, r4
 800f024:	1880      	adds	r0, r0, r2
 800f026:	f241 2c48 	movw	ip, #4680	; 0x1248
 800f02a:	44bc      	add	ip, r7
 800f02c:	f8cc 0000 	str.w	r0, [ip]
 800f030:	4628      	mov	r0, r5
 800f032:	eb43 0000 	adc.w	r0, r3, r0
 800f036:	f241 234c 	movw	r3, #4684	; 0x124c
 800f03a:	443b      	add	r3, r7
 800f03c:	6018      	str	r0, [r3, #0]
 800f03e:	f241 2348 	movw	r3, #4680	; 0x1248
 800f042:	443b      	add	r3, r7
 800f044:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f048:	e9c1 3400 	strd	r3, r4, [r1]
 800f04c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	3360      	adds	r3, #96	; 0x60
 800f054:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f058:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	3308      	adds	r3, #8
 800f060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f064:	ea80 0402 	eor.w	r4, r0, r2
 800f068:	f507 5592 	add.w	r5, r7, #4672	; 0x1240
 800f06c:	602c      	str	r4, [r5, #0]
 800f06e:	404b      	eors	r3, r1
 800f070:	f241 2244 	movw	r2, #4676	; 0x1244
 800f074:	443a      	add	r2, r7
 800f076:	6013      	str	r3, [r2, #0]
 800f078:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800f082:	2210      	movs	r2, #16
 800f084:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800f088:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f08c:	f7f9 fa58 	bl	8008540 <rotr64>
 800f090:	4602      	mov	r2, r0
 800f092:	460b      	mov	r3, r1
 800f094:	e9c4 2300 	strd	r2, r3, [r4]
 800f098:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	3358      	adds	r3, #88	; 0x58
 800f0a0:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f0a4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	3360      	adds	r3, #96	; 0x60
 800f0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0b0:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800f0b4:	6809      	ldr	r1, [r1, #0]
 800f0b6:	3158      	adds	r1, #88	; 0x58
 800f0b8:	18a0      	adds	r0, r4, r2
 800f0ba:	f241 2c38 	movw	ip, #4664	; 0x1238
 800f0be:	44bc      	add	ip, r7
 800f0c0:	f8cc 0000 	str.w	r0, [ip]
 800f0c4:	eb45 0303 	adc.w	r3, r5, r3
 800f0c8:	f241 223c 	movw	r2, #4668	; 0x123c
 800f0cc:	443a      	add	r2, r7
 800f0ce:	6013      	str	r3, [r2, #0]
 800f0d0:	f241 2338 	movw	r3, #4664	; 0x1238
 800f0d4:	443b      	add	r3, r7
 800f0d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f0da:	e9c1 3400 	strd	r3, r4, [r1]
 800f0de:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	3330      	adds	r3, #48	; 0x30
 800f0e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f0ea:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	3358      	adds	r3, #88	; 0x58
 800f0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f6:	ea80 0402 	eor.w	r4, r0, r2
 800f0fa:	f241 2530 	movw	r5, #4656	; 0x1230
 800f0fe:	443d      	add	r5, r7
 800f100:	602c      	str	r4, [r5, #0]
 800f102:	404b      	eors	r3, r1
 800f104:	f241 2234 	movw	r2, #4660	; 0x1234
 800f108:	443a      	add	r2, r7
 800f10a:	6013      	str	r3, [r2, #0]
 800f10c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800f116:	223f      	movs	r2, #63	; 0x3f
 800f118:	f241 2330 	movw	r3, #4656	; 0x1230
 800f11c:	443b      	add	r3, r7
 800f11e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f122:	f7f9 fa0d 	bl	8008540 <rotr64>
 800f126:	4602      	mov	r2, r0
 800f128:	460b      	mov	r3, r1
 800f12a:	e9c4 2300 	strd	r2, r3, [r4]
 800f12e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	3310      	adds	r3, #16
 800f136:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f13a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	3338      	adds	r3, #56	; 0x38
 800f142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f146:	1884      	adds	r4, r0, r2
 800f148:	f241 2528 	movw	r5, #4648	; 0x1228
 800f14c:	443d      	add	r5, r7
 800f14e:	602c      	str	r4, [r5, #0]
 800f150:	eb41 0303 	adc.w	r3, r1, r3
 800f154:	f241 222c 	movw	r2, #4652	; 0x122c
 800f158:	443a      	add	r2, r7
 800f15a:	6013      	str	r3, [r2, #0]
 800f15c:	2306      	movs	r3, #6
 800f15e:	00da      	lsls	r2, r3, #3
 800f160:	f641 6324 	movw	r3, #7716	; 0x1e24
 800f164:	443b      	add	r3, r7
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	4413      	add	r3, r2
 800f16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f16e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800f172:	6809      	ldr	r1, [r1, #0]
 800f174:	3110      	adds	r1, #16
 800f176:	f241 2028 	movw	r0, #4648	; 0x1228
 800f17a:	4438      	add	r0, r7
 800f17c:	e9d0 4500 	ldrd	r4, r5, [r0]
 800f180:	4620      	mov	r0, r4
 800f182:	1880      	adds	r0, r0, r2
 800f184:	f507 5c91 	add.w	ip, r7, #4640	; 0x1220
 800f188:	f8cc 0000 	str.w	r0, [ip]
 800f18c:	4628      	mov	r0, r5
 800f18e:	eb43 0000 	adc.w	r0, r3, r0
 800f192:	f241 2324 	movw	r3, #4644	; 0x1224
 800f196:	443b      	add	r3, r7
 800f198:	6018      	str	r0, [r3, #0]
 800f19a:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 800f19e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f1a2:	e9c1 3400 	strd	r3, r4, [r1]
 800f1a6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	3368      	adds	r3, #104	; 0x68
 800f1ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f1b2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	3310      	adds	r3, #16
 800f1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1be:	ea80 0402 	eor.w	r4, r0, r2
 800f1c2:	f241 2518 	movw	r5, #4632	; 0x1218
 800f1c6:	443d      	add	r5, r7
 800f1c8:	602c      	str	r4, [r5, #0]
 800f1ca:	404b      	eors	r3, r1
 800f1cc:	f241 221c 	movw	r2, #4636	; 0x121c
 800f1d0:	443a      	add	r2, r7
 800f1d2:	6013      	str	r3, [r2, #0]
 800f1d4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800f1de:	2220      	movs	r2, #32
 800f1e0:	f241 2318 	movw	r3, #4632	; 0x1218
 800f1e4:	443b      	add	r3, r7
 800f1e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f1ea:	f7f9 f9a9 	bl	8008540 <rotr64>
 800f1ee:	4602      	mov	r2, r0
 800f1f0:	460b      	mov	r3, r1
 800f1f2:	e9c4 2300 	strd	r2, r3, [r4]
 800f1f6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	3340      	adds	r3, #64	; 0x40
 800f1fe:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f202:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	3368      	adds	r3, #104	; 0x68
 800f20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f20e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800f212:	6809      	ldr	r1, [r1, #0]
 800f214:	3140      	adds	r1, #64	; 0x40
 800f216:	18a0      	adds	r0, r4, r2
 800f218:	f241 2c10 	movw	ip, #4624	; 0x1210
 800f21c:	44bc      	add	ip, r7
 800f21e:	f8cc 0000 	str.w	r0, [ip]
 800f222:	eb45 0303 	adc.w	r3, r5, r3
 800f226:	f241 2214 	movw	r2, #4628	; 0x1214
 800f22a:	443a      	add	r2, r7
 800f22c:	6013      	str	r3, [r2, #0]
 800f22e:	f241 2310 	movw	r3, #4624	; 0x1210
 800f232:	443b      	add	r3, r7
 800f234:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f238:	e9c1 3400 	strd	r3, r4, [r1]
 800f23c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	3338      	adds	r3, #56	; 0x38
 800f244:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f248:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	3340      	adds	r3, #64	; 0x40
 800f250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f254:	ea80 0402 	eor.w	r4, r0, r2
 800f258:	f241 2508 	movw	r5, #4616	; 0x1208
 800f25c:	443d      	add	r5, r7
 800f25e:	602c      	str	r4, [r5, #0]
 800f260:	404b      	eors	r3, r1
 800f262:	f241 220c 	movw	r2, #4620	; 0x120c
 800f266:	443a      	add	r2, r7
 800f268:	6013      	str	r3, [r2, #0]
 800f26a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800f274:	2218      	movs	r2, #24
 800f276:	f241 2308 	movw	r3, #4616	; 0x1208
 800f27a:	443b      	add	r3, r7
 800f27c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f280:	f7f9 f95e 	bl	8008540 <rotr64>
 800f284:	4602      	mov	r2, r0
 800f286:	460b      	mov	r3, r1
 800f288:	e9c4 2300 	strd	r2, r3, [r4]
 800f28c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	3310      	adds	r3, #16
 800f294:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f298:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	3338      	adds	r3, #56	; 0x38
 800f2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a4:	1884      	adds	r4, r0, r2
 800f2a6:	f507 5590 	add.w	r5, r7, #4608	; 0x1200
 800f2aa:	602c      	str	r4, [r5, #0]
 800f2ac:	eb41 0303 	adc.w	r3, r1, r3
 800f2b0:	f241 2204 	movw	r2, #4612	; 0x1204
 800f2b4:	443a      	add	r2, r7
 800f2b6:	6013      	str	r3, [r2, #0]
 800f2b8:	2308      	movs	r3, #8
 800f2ba:	00da      	lsls	r2, r3, #3
 800f2bc:	f641 6324 	movw	r3, #7716	; 0x1e24
 800f2c0:	443b      	add	r3, r7
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	4413      	add	r3, r2
 800f2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ca:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800f2ce:	6809      	ldr	r1, [r1, #0]
 800f2d0:	3110      	adds	r1, #16
 800f2d2:	f507 5090 	add.w	r0, r7, #4608	; 0x1200
 800f2d6:	e9d0 4500 	ldrd	r4, r5, [r0]
 800f2da:	4620      	mov	r0, r4
 800f2dc:	1880      	adds	r0, r0, r2
 800f2de:	f241 1cf8 	movw	ip, #4600	; 0x11f8
 800f2e2:	44bc      	add	ip, r7
 800f2e4:	f8cc 0000 	str.w	r0, [ip]
 800f2e8:	4628      	mov	r0, r5
 800f2ea:	eb43 0000 	adc.w	r0, r3, r0
 800f2ee:	f241 13fc 	movw	r3, #4604	; 0x11fc
 800f2f2:	443b      	add	r3, r7
 800f2f4:	6018      	str	r0, [r3, #0]
 800f2f6:	f241 13f8 	movw	r3, #4600	; 0x11f8
 800f2fa:	443b      	add	r3, r7
 800f2fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f300:	e9c1 3400 	strd	r3, r4, [r1]
 800f304:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	3368      	adds	r3, #104	; 0x68
 800f30c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f310:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	3310      	adds	r3, #16
 800f318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f31c:	ea80 0402 	eor.w	r4, r0, r2
 800f320:	f241 15f0 	movw	r5, #4592	; 0x11f0
 800f324:	443d      	add	r5, r7
 800f326:	602c      	str	r4, [r5, #0]
 800f328:	404b      	eors	r3, r1
 800f32a:	f241 12f4 	movw	r2, #4596	; 0x11f4
 800f32e:	443a      	add	r2, r7
 800f330:	6013      	str	r3, [r2, #0]
 800f332:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800f33c:	2210      	movs	r2, #16
 800f33e:	f241 13f0 	movw	r3, #4592	; 0x11f0
 800f342:	443b      	add	r3, r7
 800f344:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f348:	f7f9 f8fa 	bl	8008540 <rotr64>
 800f34c:	4602      	mov	r2, r0
 800f34e:	460b      	mov	r3, r1
 800f350:	e9c4 2300 	strd	r2, r3, [r4]
 800f354:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	3340      	adds	r3, #64	; 0x40
 800f35c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f360:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	3368      	adds	r3, #104	; 0x68
 800f368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f36c:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800f370:	6809      	ldr	r1, [r1, #0]
 800f372:	3140      	adds	r1, #64	; 0x40
 800f374:	18a0      	adds	r0, r4, r2
 800f376:	f241 1ce8 	movw	ip, #4584	; 0x11e8
 800f37a:	44bc      	add	ip, r7
 800f37c:	f8cc 0000 	str.w	r0, [ip]
 800f380:	eb45 0303 	adc.w	r3, r5, r3
 800f384:	f241 12ec 	movw	r2, #4588	; 0x11ec
 800f388:	443a      	add	r2, r7
 800f38a:	6013      	str	r3, [r2, #0]
 800f38c:	f241 13e8 	movw	r3, #4584	; 0x11e8
 800f390:	443b      	add	r3, r7
 800f392:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f396:	e9c1 3400 	strd	r3, r4, [r1]
 800f39a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	3338      	adds	r3, #56	; 0x38
 800f3a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f3a6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	3340      	adds	r3, #64	; 0x40
 800f3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b2:	ea80 0402 	eor.w	r4, r0, r2
 800f3b6:	f507 558f 	add.w	r5, r7, #4576	; 0x11e0
 800f3ba:	602c      	str	r4, [r5, #0]
 800f3bc:	404b      	eors	r3, r1
 800f3be:	f241 12e4 	movw	r2, #4580	; 0x11e4
 800f3c2:	443a      	add	r2, r7
 800f3c4:	6013      	str	r3, [r2, #0]
 800f3c6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800f3d0:	223f      	movs	r2, #63	; 0x3f
 800f3d2:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 800f3d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f3da:	f7f9 f8b1 	bl	8008540 <rotr64>
 800f3de:	4602      	mov	r2, r0
 800f3e0:	460b      	mov	r3, r1
 800f3e2:	e9c4 2300 	strd	r2, r3, [r4]
 800f3e6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	3318      	adds	r3, #24
 800f3ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f3f2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	3320      	adds	r3, #32
 800f3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3fe:	1884      	adds	r4, r0, r2
 800f400:	f241 15d8 	movw	r5, #4568	; 0x11d8
 800f404:	443d      	add	r5, r7
 800f406:	602c      	str	r4, [r5, #0]
 800f408:	eb41 0303 	adc.w	r3, r1, r3
 800f40c:	f241 12dc 	movw	r2, #4572	; 0x11dc
 800f410:	443a      	add	r2, r7
 800f412:	6013      	str	r3, [r2, #0]
 800f414:	2303      	movs	r3, #3
 800f416:	00da      	lsls	r2, r3, #3
 800f418:	f641 6324 	movw	r3, #7716	; 0x1e24
 800f41c:	443b      	add	r3, r7
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	4413      	add	r3, r2
 800f422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f426:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800f42a:	6809      	ldr	r1, [r1, #0]
 800f42c:	3118      	adds	r1, #24
 800f42e:	f241 10d8 	movw	r0, #4568	; 0x11d8
 800f432:	4438      	add	r0, r7
 800f434:	e9d0 4500 	ldrd	r4, r5, [r0]
 800f438:	4620      	mov	r0, r4
 800f43a:	1880      	adds	r0, r0, r2
 800f43c:	f241 1cd0 	movw	ip, #4560	; 0x11d0
 800f440:	44bc      	add	ip, r7
 800f442:	f8cc 0000 	str.w	r0, [ip]
 800f446:	4628      	mov	r0, r5
 800f448:	eb43 0000 	adc.w	r0, r3, r0
 800f44c:	f241 13d4 	movw	r3, #4564	; 0x11d4
 800f450:	443b      	add	r3, r7
 800f452:	6018      	str	r0, [r3, #0]
 800f454:	f241 13d0 	movw	r3, #4560	; 0x11d0
 800f458:	443b      	add	r3, r7
 800f45a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f45e:	e9c1 3400 	strd	r3, r4, [r1]
 800f462:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	3370      	adds	r3, #112	; 0x70
 800f46a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f46e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	3318      	adds	r3, #24
 800f476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f47a:	ea80 0402 	eor.w	r4, r0, r2
 800f47e:	f241 15c8 	movw	r5, #4552	; 0x11c8
 800f482:	443d      	add	r5, r7
 800f484:	602c      	str	r4, [r5, #0]
 800f486:	404b      	eors	r3, r1
 800f488:	f241 12cc 	movw	r2, #4556	; 0x11cc
 800f48c:	443a      	add	r2, r7
 800f48e:	6013      	str	r3, [r2, #0]
 800f490:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800f49a:	2220      	movs	r2, #32
 800f49c:	f241 13c8 	movw	r3, #4552	; 0x11c8
 800f4a0:	443b      	add	r3, r7
 800f4a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f4a6:	f7f9 f84b 	bl	8008540 <rotr64>
 800f4aa:	4602      	mov	r2, r0
 800f4ac:	460b      	mov	r3, r1
 800f4ae:	e9c4 2300 	strd	r2, r3, [r4]
 800f4b2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	3348      	adds	r3, #72	; 0x48
 800f4ba:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f4be:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	3370      	adds	r3, #112	; 0x70
 800f4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ca:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800f4ce:	6809      	ldr	r1, [r1, #0]
 800f4d0:	3148      	adds	r1, #72	; 0x48
 800f4d2:	18a0      	adds	r0, r4, r2
 800f4d4:	f507 5c8e 	add.w	ip, r7, #4544	; 0x11c0
 800f4d8:	f8cc 0000 	str.w	r0, [ip]
 800f4dc:	eb45 0303 	adc.w	r3, r5, r3
 800f4e0:	f241 12c4 	movw	r2, #4548	; 0x11c4
 800f4e4:	443a      	add	r2, r7
 800f4e6:	6013      	str	r3, [r2, #0]
 800f4e8:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 800f4ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f4f0:	e9c1 3400 	strd	r3, r4, [r1]
 800f4f4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	3320      	adds	r3, #32
 800f4fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f500:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	3348      	adds	r3, #72	; 0x48
 800f508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f50c:	ea80 0402 	eor.w	r4, r0, r2
 800f510:	f241 15b8 	movw	r5, #4536	; 0x11b8
 800f514:	443d      	add	r5, r7
 800f516:	602c      	str	r4, [r5, #0]
 800f518:	404b      	eors	r3, r1
 800f51a:	f241 12bc 	movw	r2, #4540	; 0x11bc
 800f51e:	443a      	add	r2, r7
 800f520:	6013      	str	r3, [r2, #0]
 800f522:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	f103 0420 	add.w	r4, r3, #32
 800f52c:	2218      	movs	r2, #24
 800f52e:	f241 13b8 	movw	r3, #4536	; 0x11b8
 800f532:	443b      	add	r3, r7
 800f534:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f538:	f7f9 f802 	bl	8008540 <rotr64>
 800f53c:	4602      	mov	r2, r0
 800f53e:	460b      	mov	r3, r1
 800f540:	e9c4 2300 	strd	r2, r3, [r4]
 800f544:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	3318      	adds	r3, #24
 800f54c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f550:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	3320      	adds	r3, #32
 800f558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f55c:	1884      	adds	r4, r0, r2
 800f55e:	f241 15b0 	movw	r5, #4528	; 0x11b0
 800f562:	443d      	add	r5, r7
 800f564:	602c      	str	r4, [r5, #0]
 800f566:	eb41 0303 	adc.w	r3, r1, r3
 800f56a:	f241 12b4 	movw	r2, #4532	; 0x11b4
 800f56e:	443a      	add	r2, r7
 800f570:	6013      	str	r3, [r2, #0]
 800f572:	230d      	movs	r3, #13
 800f574:	00da      	lsls	r2, r3, #3
 800f576:	f641 6324 	movw	r3, #7716	; 0x1e24
 800f57a:	443b      	add	r3, r7
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	4413      	add	r3, r2
 800f580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f584:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800f588:	6809      	ldr	r1, [r1, #0]
 800f58a:	3118      	adds	r1, #24
 800f58c:	f241 10b0 	movw	r0, #4528	; 0x11b0
 800f590:	4438      	add	r0, r7
 800f592:	e9d0 4500 	ldrd	r4, r5, [r0]
 800f596:	4620      	mov	r0, r4
 800f598:	1880      	adds	r0, r0, r2
 800f59a:	f241 1ca8 	movw	ip, #4520	; 0x11a8
 800f59e:	44bc      	add	ip, r7
 800f5a0:	f8cc 0000 	str.w	r0, [ip]
 800f5a4:	4628      	mov	r0, r5
 800f5a6:	eb43 0000 	adc.w	r0, r3, r0
 800f5aa:	f241 13ac 	movw	r3, #4524	; 0x11ac
 800f5ae:	443b      	add	r3, r7
 800f5b0:	6018      	str	r0, [r3, #0]
 800f5b2:	f241 13a8 	movw	r3, #4520	; 0x11a8
 800f5b6:	443b      	add	r3, r7
 800f5b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f5bc:	e9c1 3400 	strd	r3, r4, [r1]
 800f5c0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	3370      	adds	r3, #112	; 0x70
 800f5c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f5cc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	3318      	adds	r3, #24
 800f5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d8:	ea80 0402 	eor.w	r4, r0, r2
 800f5dc:	f507 558d 	add.w	r5, r7, #4512	; 0x11a0
 800f5e0:	602c      	str	r4, [r5, #0]
 800f5e2:	404b      	eors	r3, r1
 800f5e4:	f241 12a4 	movw	r2, #4516	; 0x11a4
 800f5e8:	443a      	add	r2, r7
 800f5ea:	6013      	str	r3, [r2, #0]
 800f5ec:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800f5f6:	2210      	movs	r2, #16
 800f5f8:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 800f5fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f600:	f7f8 ff9e 	bl	8008540 <rotr64>
 800f604:	4602      	mov	r2, r0
 800f606:	460b      	mov	r3, r1
 800f608:	e9c4 2300 	strd	r2, r3, [r4]
 800f60c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	3348      	adds	r3, #72	; 0x48
 800f614:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f618:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	3370      	adds	r3, #112	; 0x70
 800f620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f624:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800f628:	6809      	ldr	r1, [r1, #0]
 800f62a:	3148      	adds	r1, #72	; 0x48
 800f62c:	18a0      	adds	r0, r4, r2
 800f62e:	f241 1c98 	movw	ip, #4504	; 0x1198
 800f632:	44bc      	add	ip, r7
 800f634:	f8cc 0000 	str.w	r0, [ip]
 800f638:	eb45 0303 	adc.w	r3, r5, r3
 800f63c:	f241 129c 	movw	r2, #4508	; 0x119c
 800f640:	443a      	add	r2, r7
 800f642:	6013      	str	r3, [r2, #0]
 800f644:	f241 1398 	movw	r3, #4504	; 0x1198
 800f648:	443b      	add	r3, r7
 800f64a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f64e:	e9c1 3400 	strd	r3, r4, [r1]
 800f652:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	3320      	adds	r3, #32
 800f65a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f65e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	3348      	adds	r3, #72	; 0x48
 800f666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f66a:	ea80 0402 	eor.w	r4, r0, r2
 800f66e:	f241 1590 	movw	r5, #4496	; 0x1190
 800f672:	443d      	add	r5, r7
 800f674:	602c      	str	r4, [r5, #0]
 800f676:	404b      	eors	r3, r1
 800f678:	f241 1294 	movw	r2, #4500	; 0x1194
 800f67c:	443a      	add	r2, r7
 800f67e:	6013      	str	r3, [r2, #0]
 800f680:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	f103 0420 	add.w	r4, r3, #32
 800f68a:	223f      	movs	r2, #63	; 0x3f
 800f68c:	f241 1390 	movw	r3, #4496	; 0x1190
 800f690:	443b      	add	r3, r7
 800f692:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f696:	f7f8 ff53 	bl	8008540 <rotr64>
 800f69a:	4602      	mov	r2, r0
 800f69c:	460b      	mov	r3, r1
 800f69e:	e9c4 2300 	strd	r2, r3, [r4]
  ROUND( 5 );
 800f6a2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f6ac:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	3320      	adds	r3, #32
 800f6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6b8:	1884      	adds	r4, r0, r2
 800f6ba:	f241 1588 	movw	r5, #4488	; 0x1188
 800f6be:	443d      	add	r5, r7
 800f6c0:	602c      	str	r4, [r5, #0]
 800f6c2:	eb41 0303 	adc.w	r3, r1, r3
 800f6c6:	f241 128c 	movw	r2, #4492	; 0x118c
 800f6ca:	443a      	add	r2, r7
 800f6cc:	6013      	str	r3, [r2, #0]
 800f6ce:	2302      	movs	r3, #2
 800f6d0:	00da      	lsls	r2, r3, #3
 800f6d2:	f641 6324 	movw	r3, #7716	; 0x1e24
 800f6d6:	443b      	add	r3, r7
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	4413      	add	r3, r2
 800f6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6e0:	f241 1188 	movw	r1, #4488	; 0x1188
 800f6e4:	4439      	add	r1, r7
 800f6e6:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f6ea:	4621      	mov	r1, r4
 800f6ec:	1889      	adds	r1, r1, r2
 800f6ee:	f507 508c 	add.w	r0, r7, #4480	; 0x1180
 800f6f2:	6001      	str	r1, [r0, #0]
 800f6f4:	4629      	mov	r1, r5
 800f6f6:	eb43 0101 	adc.w	r1, r3, r1
 800f6fa:	f241 1384 	movw	r3, #4484	; 0x1184
 800f6fe:	443b      	add	r3, r7
 800f700:	6019      	str	r1, [r3, #0]
 800f702:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 800f70c:	e9d2 1200 	ldrd	r1, r2, [r2]
 800f710:	e9c3 1200 	strd	r1, r2, [r3]
 800f714:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	3360      	adds	r3, #96	; 0x60
 800f71c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f720:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f72a:	ea80 0402 	eor.w	r4, r0, r2
 800f72e:	f241 1578 	movw	r5, #4472	; 0x1178
 800f732:	443d      	add	r5, r7
 800f734:	602c      	str	r4, [r5, #0]
 800f736:	404b      	eors	r3, r1
 800f738:	f241 127c 	movw	r2, #4476	; 0x117c
 800f73c:	443a      	add	r2, r7
 800f73e:	6013      	str	r3, [r2, #0]
 800f740:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800f74a:	2220      	movs	r2, #32
 800f74c:	f241 1378 	movw	r3, #4472	; 0x1178
 800f750:	443b      	add	r3, r7
 800f752:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f756:	f7f8 fef3 	bl	8008540 <rotr64>
 800f75a:	4602      	mov	r2, r0
 800f75c:	460b      	mov	r3, r1
 800f75e:	e9c4 2300 	strd	r2, r3, [r4]
 800f762:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	3340      	adds	r3, #64	; 0x40
 800f76a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f76e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	3360      	adds	r3, #96	; 0x60
 800f776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f77a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800f77e:	6809      	ldr	r1, [r1, #0]
 800f780:	3140      	adds	r1, #64	; 0x40
 800f782:	18a0      	adds	r0, r4, r2
 800f784:	f241 1c70 	movw	ip, #4464	; 0x1170
 800f788:	44bc      	add	ip, r7
 800f78a:	f8cc 0000 	str.w	r0, [ip]
 800f78e:	eb45 0303 	adc.w	r3, r5, r3
 800f792:	f241 1274 	movw	r2, #4468	; 0x1174
 800f796:	443a      	add	r2, r7
 800f798:	6013      	str	r3, [r2, #0]
 800f79a:	f241 1370 	movw	r3, #4464	; 0x1170
 800f79e:	443b      	add	r3, r7
 800f7a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f7a4:	e9c1 3400 	strd	r3, r4, [r1]
 800f7a8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	3320      	adds	r3, #32
 800f7b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f7b4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	3340      	adds	r3, #64	; 0x40
 800f7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7c0:	ea80 0402 	eor.w	r4, r0, r2
 800f7c4:	f241 1568 	movw	r5, #4456	; 0x1168
 800f7c8:	443d      	add	r5, r7
 800f7ca:	602c      	str	r4, [r5, #0]
 800f7cc:	404b      	eors	r3, r1
 800f7ce:	f241 126c 	movw	r2, #4460	; 0x116c
 800f7d2:	443a      	add	r2, r7
 800f7d4:	6013      	str	r3, [r2, #0]
 800f7d6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	f103 0420 	add.w	r4, r3, #32
 800f7e0:	2218      	movs	r2, #24
 800f7e2:	f241 1368 	movw	r3, #4456	; 0x1168
 800f7e6:	443b      	add	r3, r7
 800f7e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f7ec:	f7f8 fea8 	bl	8008540 <rotr64>
 800f7f0:	4602      	mov	r2, r0
 800f7f2:	460b      	mov	r3, r1
 800f7f4:	e9c4 2300 	strd	r2, r3, [r4]
 800f7f8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f802:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	3320      	adds	r3, #32
 800f80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f80e:	1884      	adds	r4, r0, r2
 800f810:	f507 558b 	add.w	r5, r7, #4448	; 0x1160
 800f814:	602c      	str	r4, [r5, #0]
 800f816:	eb41 0303 	adc.w	r3, r1, r3
 800f81a:	f241 1264 	movw	r2, #4452	; 0x1164
 800f81e:	443a      	add	r2, r7
 800f820:	6013      	str	r3, [r2, #0]
 800f822:	230c      	movs	r3, #12
 800f824:	00da      	lsls	r2, r3, #3
 800f826:	f641 6324 	movw	r3, #7716	; 0x1e24
 800f82a:	443b      	add	r3, r7
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	4413      	add	r3, r2
 800f830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f834:	f507 518b 	add.w	r1, r7, #4448	; 0x1160
 800f838:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f83c:	4621      	mov	r1, r4
 800f83e:	1889      	adds	r1, r1, r2
 800f840:	f241 1058 	movw	r0, #4440	; 0x1158
 800f844:	4438      	add	r0, r7
 800f846:	6001      	str	r1, [r0, #0]
 800f848:	4629      	mov	r1, r5
 800f84a:	eb43 0101 	adc.w	r1, r3, r1
 800f84e:	f241 135c 	movw	r3, #4444	; 0x115c
 800f852:	443b      	add	r3, r7
 800f854:	6019      	str	r1, [r3, #0]
 800f856:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	f241 1258 	movw	r2, #4440	; 0x1158
 800f860:	443a      	add	r2, r7
 800f862:	e9d2 1200 	ldrd	r1, r2, [r2]
 800f866:	e9c3 1200 	strd	r1, r2, [r3]
 800f86a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	3360      	adds	r3, #96	; 0x60
 800f872:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f876:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f880:	ea80 0402 	eor.w	r4, r0, r2
 800f884:	f241 1550 	movw	r5, #4432	; 0x1150
 800f888:	443d      	add	r5, r7
 800f88a:	602c      	str	r4, [r5, #0]
 800f88c:	404b      	eors	r3, r1
 800f88e:	f241 1254 	movw	r2, #4436	; 0x1154
 800f892:	443a      	add	r2, r7
 800f894:	6013      	str	r3, [r2, #0]
 800f896:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800f8a0:	2210      	movs	r2, #16
 800f8a2:	f241 1350 	movw	r3, #4432	; 0x1150
 800f8a6:	443b      	add	r3, r7
 800f8a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f8ac:	f7f8 fe48 	bl	8008540 <rotr64>
 800f8b0:	4602      	mov	r2, r0
 800f8b2:	460b      	mov	r3, r1
 800f8b4:	e9c4 2300 	strd	r2, r3, [r4]
 800f8b8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	3340      	adds	r3, #64	; 0x40
 800f8c0:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f8c4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	3360      	adds	r3, #96	; 0x60
 800f8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8d0:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800f8d4:	6809      	ldr	r1, [r1, #0]
 800f8d6:	3140      	adds	r1, #64	; 0x40
 800f8d8:	18a0      	adds	r0, r4, r2
 800f8da:	f241 1c48 	movw	ip, #4424	; 0x1148
 800f8de:	44bc      	add	ip, r7
 800f8e0:	f8cc 0000 	str.w	r0, [ip]
 800f8e4:	eb45 0303 	adc.w	r3, r5, r3
 800f8e8:	f241 124c 	movw	r2, #4428	; 0x114c
 800f8ec:	443a      	add	r2, r7
 800f8ee:	6013      	str	r3, [r2, #0]
 800f8f0:	f241 1348 	movw	r3, #4424	; 0x1148
 800f8f4:	443b      	add	r3, r7
 800f8f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f8fa:	e9c1 3400 	strd	r3, r4, [r1]
 800f8fe:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	3320      	adds	r3, #32
 800f906:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f90a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	3340      	adds	r3, #64	; 0x40
 800f912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f916:	ea80 0402 	eor.w	r4, r0, r2
 800f91a:	f507 558a 	add.w	r5, r7, #4416	; 0x1140
 800f91e:	602c      	str	r4, [r5, #0]
 800f920:	404b      	eors	r3, r1
 800f922:	f241 1244 	movw	r2, #4420	; 0x1144
 800f926:	443a      	add	r2, r7
 800f928:	6013      	str	r3, [r2, #0]
 800f92a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	f103 0420 	add.w	r4, r3, #32
 800f934:	223f      	movs	r2, #63	; 0x3f
 800f936:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800f93a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f93e:	f7f8 fdff 	bl	8008540 <rotr64>
 800f942:	4602      	mov	r2, r0
 800f944:	460b      	mov	r3, r1
 800f946:	e9c4 2300 	strd	r2, r3, [r4]
 800f94a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	3308      	adds	r3, #8
 800f952:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f956:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	3328      	adds	r3, #40	; 0x28
 800f95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f962:	1884      	adds	r4, r0, r2
 800f964:	f241 1538 	movw	r5, #4408	; 0x1138
 800f968:	443d      	add	r5, r7
 800f96a:	602c      	str	r4, [r5, #0]
 800f96c:	eb41 0303 	adc.w	r3, r1, r3
 800f970:	f241 123c 	movw	r2, #4412	; 0x113c
 800f974:	443a      	add	r2, r7
 800f976:	6013      	str	r3, [r2, #0]
 800f978:	2306      	movs	r3, #6
 800f97a:	00da      	lsls	r2, r3, #3
 800f97c:	f641 6324 	movw	r3, #7716	; 0x1e24
 800f980:	443b      	add	r3, r7
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	4413      	add	r3, r2
 800f986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f98a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800f98e:	6809      	ldr	r1, [r1, #0]
 800f990:	3108      	adds	r1, #8
 800f992:	f241 1038 	movw	r0, #4408	; 0x1138
 800f996:	4438      	add	r0, r7
 800f998:	e9d0 4500 	ldrd	r4, r5, [r0]
 800f99c:	4620      	mov	r0, r4
 800f99e:	1880      	adds	r0, r0, r2
 800f9a0:	f241 1c30 	movw	ip, #4400	; 0x1130
 800f9a4:	44bc      	add	ip, r7
 800f9a6:	f8cc 0000 	str.w	r0, [ip]
 800f9aa:	4628      	mov	r0, r5
 800f9ac:	eb43 0000 	adc.w	r0, r3, r0
 800f9b0:	f241 1334 	movw	r3, #4404	; 0x1134
 800f9b4:	443b      	add	r3, r7
 800f9b6:	6018      	str	r0, [r3, #0]
 800f9b8:	f241 1330 	movw	r3, #4400	; 0x1130
 800f9bc:	443b      	add	r3, r7
 800f9be:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f9c2:	e9c1 3400 	strd	r3, r4, [r1]
 800f9c6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	3368      	adds	r3, #104	; 0x68
 800f9ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f9d2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	3308      	adds	r3, #8
 800f9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9de:	ea80 0402 	eor.w	r4, r0, r2
 800f9e2:	f241 1528 	movw	r5, #4392	; 0x1128
 800f9e6:	443d      	add	r5, r7
 800f9e8:	602c      	str	r4, [r5, #0]
 800f9ea:	404b      	eors	r3, r1
 800f9ec:	f241 122c 	movw	r2, #4396	; 0x112c
 800f9f0:	443a      	add	r2, r7
 800f9f2:	6013      	str	r3, [r2, #0]
 800f9f4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800f9fe:	2220      	movs	r2, #32
 800fa00:	f241 1328 	movw	r3, #4392	; 0x1128
 800fa04:	443b      	add	r3, r7
 800fa06:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fa0a:	f7f8 fd99 	bl	8008540 <rotr64>
 800fa0e:	4602      	mov	r2, r0
 800fa10:	460b      	mov	r3, r1
 800fa12:	e9c4 2300 	strd	r2, r3, [r4]
 800fa16:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	3348      	adds	r3, #72	; 0x48
 800fa1e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800fa22:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	3368      	adds	r3, #104	; 0x68
 800fa2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa2e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800fa32:	6809      	ldr	r1, [r1, #0]
 800fa34:	3148      	adds	r1, #72	; 0x48
 800fa36:	18a0      	adds	r0, r4, r2
 800fa38:	f507 5c89 	add.w	ip, r7, #4384	; 0x1120
 800fa3c:	f8cc 0000 	str.w	r0, [ip]
 800fa40:	eb45 0303 	adc.w	r3, r5, r3
 800fa44:	f241 1224 	movw	r2, #4388	; 0x1124
 800fa48:	443a      	add	r2, r7
 800fa4a:	6013      	str	r3, [r2, #0]
 800fa4c:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 800fa50:	e9d3 3400 	ldrd	r3, r4, [r3]
 800fa54:	e9c1 3400 	strd	r3, r4, [r1]
 800fa58:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	3328      	adds	r3, #40	; 0x28
 800fa60:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fa64:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	3348      	adds	r3, #72	; 0x48
 800fa6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa70:	ea80 0402 	eor.w	r4, r0, r2
 800fa74:	f241 1518 	movw	r5, #4376	; 0x1118
 800fa78:	443d      	add	r5, r7
 800fa7a:	602c      	str	r4, [r5, #0]
 800fa7c:	404b      	eors	r3, r1
 800fa7e:	f241 121c 	movw	r2, #4380	; 0x111c
 800fa82:	443a      	add	r2, r7
 800fa84:	6013      	str	r3, [r2, #0]
 800fa86:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800fa90:	2218      	movs	r2, #24
 800fa92:	f241 1318 	movw	r3, #4376	; 0x1118
 800fa96:	443b      	add	r3, r7
 800fa98:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fa9c:	f7f8 fd50 	bl	8008540 <rotr64>
 800faa0:	4602      	mov	r2, r0
 800faa2:	460b      	mov	r3, r1
 800faa4:	e9c4 2300 	strd	r2, r3, [r4]
 800faa8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	3308      	adds	r3, #8
 800fab0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fab4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	3328      	adds	r3, #40	; 0x28
 800fabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fac0:	1884      	adds	r4, r0, r2
 800fac2:	f241 1510 	movw	r5, #4368	; 0x1110
 800fac6:	443d      	add	r5, r7
 800fac8:	602c      	str	r4, [r5, #0]
 800faca:	eb41 0303 	adc.w	r3, r1, r3
 800face:	f241 1214 	movw	r2, #4372	; 0x1114
 800fad2:	443a      	add	r2, r7
 800fad4:	6013      	str	r3, [r2, #0]
 800fad6:	230a      	movs	r3, #10
 800fad8:	00da      	lsls	r2, r3, #3
 800fada:	f641 6324 	movw	r3, #7716	; 0x1e24
 800fade:	443b      	add	r3, r7
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	4413      	add	r3, r2
 800fae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fae8:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800faec:	6809      	ldr	r1, [r1, #0]
 800faee:	3108      	adds	r1, #8
 800faf0:	f241 1010 	movw	r0, #4368	; 0x1110
 800faf4:	4438      	add	r0, r7
 800faf6:	e9d0 4500 	ldrd	r4, r5, [r0]
 800fafa:	4620      	mov	r0, r4
 800fafc:	1880      	adds	r0, r0, r2
 800fafe:	f241 1c08 	movw	ip, #4360	; 0x1108
 800fb02:	44bc      	add	ip, r7
 800fb04:	f8cc 0000 	str.w	r0, [ip]
 800fb08:	4628      	mov	r0, r5
 800fb0a:	eb43 0000 	adc.w	r0, r3, r0
 800fb0e:	f241 130c 	movw	r3, #4364	; 0x110c
 800fb12:	443b      	add	r3, r7
 800fb14:	6018      	str	r0, [r3, #0]
 800fb16:	f241 1308 	movw	r3, #4360	; 0x1108
 800fb1a:	443b      	add	r3, r7
 800fb1c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800fb20:	e9c1 3400 	strd	r3, r4, [r1]
 800fb24:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	3368      	adds	r3, #104	; 0x68
 800fb2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fb30:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	3308      	adds	r3, #8
 800fb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb3c:	ea80 0402 	eor.w	r4, r0, r2
 800fb40:	f507 5588 	add.w	r5, r7, #4352	; 0x1100
 800fb44:	602c      	str	r4, [r5, #0]
 800fb46:	404b      	eors	r3, r1
 800fb48:	f241 1204 	movw	r2, #4356	; 0x1104
 800fb4c:	443a      	add	r2, r7
 800fb4e:	6013      	str	r3, [r2, #0]
 800fb50:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800fb5a:	2210      	movs	r2, #16
 800fb5c:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800fb60:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fb64:	f7f8 fcec 	bl	8008540 <rotr64>
 800fb68:	4602      	mov	r2, r0
 800fb6a:	460b      	mov	r3, r1
 800fb6c:	e9c4 2300 	strd	r2, r3, [r4]
 800fb70:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	3348      	adds	r3, #72	; 0x48
 800fb78:	e9d3 4500 	ldrd	r4, r5, [r3]
 800fb7c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	3368      	adds	r3, #104	; 0x68
 800fb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb88:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800fb8c:	6809      	ldr	r1, [r1, #0]
 800fb8e:	3148      	adds	r1, #72	; 0x48
 800fb90:	18a0      	adds	r0, r4, r2
 800fb92:	f241 0cf8 	movw	ip, #4344	; 0x10f8
 800fb96:	44bc      	add	ip, r7
 800fb98:	f8cc 0000 	str.w	r0, [ip]
 800fb9c:	eb45 0303 	adc.w	r3, r5, r3
 800fba0:	f241 02fc 	movw	r2, #4348	; 0x10fc
 800fba4:	443a      	add	r2, r7
 800fba6:	6013      	str	r3, [r2, #0]
 800fba8:	f241 03f8 	movw	r3, #4344	; 0x10f8
 800fbac:	443b      	add	r3, r7
 800fbae:	e9d3 3400 	ldrd	r3, r4, [r3]
 800fbb2:	e9c1 3400 	strd	r3, r4, [r1]
 800fbb6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	3328      	adds	r3, #40	; 0x28
 800fbbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fbc2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	3348      	adds	r3, #72	; 0x48
 800fbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbce:	ea80 0402 	eor.w	r4, r0, r2
 800fbd2:	f241 05f0 	movw	r5, #4336	; 0x10f0
 800fbd6:	443d      	add	r5, r7
 800fbd8:	602c      	str	r4, [r5, #0]
 800fbda:	404b      	eors	r3, r1
 800fbdc:	f241 02f4 	movw	r2, #4340	; 0x10f4
 800fbe0:	443a      	add	r2, r7
 800fbe2:	6013      	str	r3, [r2, #0]
 800fbe4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800fbee:	223f      	movs	r2, #63	; 0x3f
 800fbf0:	f241 03f0 	movw	r3, #4336	; 0x10f0
 800fbf4:	443b      	add	r3, r7
 800fbf6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fbfa:	f7f8 fca1 	bl	8008540 <rotr64>
 800fbfe:	4602      	mov	r2, r0
 800fc00:	460b      	mov	r3, r1
 800fc02:	e9c4 2300 	strd	r2, r3, [r4]
 800fc06:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	3310      	adds	r3, #16
 800fc0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fc12:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	3330      	adds	r3, #48	; 0x30
 800fc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc1e:	1884      	adds	r4, r0, r2
 800fc20:	f241 05e8 	movw	r5, #4328	; 0x10e8
 800fc24:	443d      	add	r5, r7
 800fc26:	602c      	str	r4, [r5, #0]
 800fc28:	eb41 0303 	adc.w	r3, r1, r3
 800fc2c:	f241 02ec 	movw	r2, #4332	; 0x10ec
 800fc30:	443a      	add	r2, r7
 800fc32:	6013      	str	r3, [r2, #0]
 800fc34:	2300      	movs	r3, #0
 800fc36:	00da      	lsls	r2, r3, #3
 800fc38:	f641 6324 	movw	r3, #7716	; 0x1e24
 800fc3c:	443b      	add	r3, r7
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	4413      	add	r3, r2
 800fc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc46:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800fc4a:	6809      	ldr	r1, [r1, #0]
 800fc4c:	3110      	adds	r1, #16
 800fc4e:	f241 00e8 	movw	r0, #4328	; 0x10e8
 800fc52:	4438      	add	r0, r7
 800fc54:	e9d0 4500 	ldrd	r4, r5, [r0]
 800fc58:	4620      	mov	r0, r4
 800fc5a:	1880      	adds	r0, r0, r2
 800fc5c:	f507 5c87 	add.w	ip, r7, #4320	; 0x10e0
 800fc60:	f8cc 0000 	str.w	r0, [ip]
 800fc64:	4628      	mov	r0, r5
 800fc66:	eb43 0000 	adc.w	r0, r3, r0
 800fc6a:	f241 03e4 	movw	r3, #4324	; 0x10e4
 800fc6e:	443b      	add	r3, r7
 800fc70:	6018      	str	r0, [r3, #0]
 800fc72:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 800fc76:	e9d3 3400 	ldrd	r3, r4, [r3]
 800fc7a:	e9c1 3400 	strd	r3, r4, [r1]
 800fc7e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	3370      	adds	r3, #112	; 0x70
 800fc86:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fc8a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	3310      	adds	r3, #16
 800fc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc96:	ea80 0402 	eor.w	r4, r0, r2
 800fc9a:	f241 05d8 	movw	r5, #4312	; 0x10d8
 800fc9e:	443d      	add	r5, r7
 800fca0:	602c      	str	r4, [r5, #0]
 800fca2:	404b      	eors	r3, r1
 800fca4:	f241 02dc 	movw	r2, #4316	; 0x10dc
 800fca8:	443a      	add	r2, r7
 800fcaa:	6013      	str	r3, [r2, #0]
 800fcac:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800fcb6:	2220      	movs	r2, #32
 800fcb8:	f241 03d8 	movw	r3, #4312	; 0x10d8
 800fcbc:	443b      	add	r3, r7
 800fcbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fcc2:	f7f8 fc3d 	bl	8008540 <rotr64>
 800fcc6:	4602      	mov	r2, r0
 800fcc8:	460b      	mov	r3, r1
 800fcca:	e9c4 2300 	strd	r2, r3, [r4]
 800fcce:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	3350      	adds	r3, #80	; 0x50
 800fcd6:	e9d3 4500 	ldrd	r4, r5, [r3]
 800fcda:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	3370      	adds	r3, #112	; 0x70
 800fce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fce6:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800fcea:	6809      	ldr	r1, [r1, #0]
 800fcec:	3150      	adds	r1, #80	; 0x50
 800fcee:	18a0      	adds	r0, r4, r2
 800fcf0:	f241 0cd0 	movw	ip, #4304	; 0x10d0
 800fcf4:	44bc      	add	ip, r7
 800fcf6:	f8cc 0000 	str.w	r0, [ip]
 800fcfa:	eb45 0303 	adc.w	r3, r5, r3
 800fcfe:	f241 02d4 	movw	r2, #4308	; 0x10d4
 800fd02:	443a      	add	r2, r7
 800fd04:	6013      	str	r3, [r2, #0]
 800fd06:	f241 03d0 	movw	r3, #4304	; 0x10d0
 800fd0a:	443b      	add	r3, r7
 800fd0c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800fd10:	e9c1 3400 	strd	r3, r4, [r1]
 800fd14:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	3330      	adds	r3, #48	; 0x30
 800fd1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fd20:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	3350      	adds	r3, #80	; 0x50
 800fd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd2c:	ea80 0402 	eor.w	r4, r0, r2
 800fd30:	f241 05c8 	movw	r5, #4296	; 0x10c8
 800fd34:	443d      	add	r5, r7
 800fd36:	602c      	str	r4, [r5, #0]
 800fd38:	404b      	eors	r3, r1
 800fd3a:	f241 02cc 	movw	r2, #4300	; 0x10cc
 800fd3e:	443a      	add	r2, r7
 800fd40:	6013      	str	r3, [r2, #0]
 800fd42:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800fd4c:	2218      	movs	r2, #24
 800fd4e:	f241 03c8 	movw	r3, #4296	; 0x10c8
 800fd52:	443b      	add	r3, r7
 800fd54:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fd58:	f7f8 fbf2 	bl	8008540 <rotr64>
 800fd5c:	4602      	mov	r2, r0
 800fd5e:	460b      	mov	r3, r1
 800fd60:	e9c4 2300 	strd	r2, r3, [r4]
 800fd64:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	3310      	adds	r3, #16
 800fd6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fd70:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	3330      	adds	r3, #48	; 0x30
 800fd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd7c:	1884      	adds	r4, r0, r2
 800fd7e:	f507 5586 	add.w	r5, r7, #4288	; 0x10c0
 800fd82:	602c      	str	r4, [r5, #0]
 800fd84:	eb41 0303 	adc.w	r3, r1, r3
 800fd88:	f241 02c4 	movw	r2, #4292	; 0x10c4
 800fd8c:	443a      	add	r2, r7
 800fd8e:	6013      	str	r3, [r2, #0]
 800fd90:	230b      	movs	r3, #11
 800fd92:	00da      	lsls	r2, r3, #3
 800fd94:	f641 6324 	movw	r3, #7716	; 0x1e24
 800fd98:	443b      	add	r3, r7
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	4413      	add	r3, r2
 800fd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda2:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800fda6:	6809      	ldr	r1, [r1, #0]
 800fda8:	3110      	adds	r1, #16
 800fdaa:	f507 5086 	add.w	r0, r7, #4288	; 0x10c0
 800fdae:	e9d0 4500 	ldrd	r4, r5, [r0]
 800fdb2:	4620      	mov	r0, r4
 800fdb4:	1880      	adds	r0, r0, r2
 800fdb6:	f241 0cb8 	movw	ip, #4280	; 0x10b8
 800fdba:	44bc      	add	ip, r7
 800fdbc:	f8cc 0000 	str.w	r0, [ip]
 800fdc0:	4628      	mov	r0, r5
 800fdc2:	eb43 0000 	adc.w	r0, r3, r0
 800fdc6:	f241 03bc 	movw	r3, #4284	; 0x10bc
 800fdca:	443b      	add	r3, r7
 800fdcc:	6018      	str	r0, [r3, #0]
 800fdce:	f241 03b8 	movw	r3, #4280	; 0x10b8
 800fdd2:	443b      	add	r3, r7
 800fdd4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800fdd8:	e9c1 3400 	strd	r3, r4, [r1]
 800fddc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	3370      	adds	r3, #112	; 0x70
 800fde4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fde8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	3310      	adds	r3, #16
 800fdf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdf4:	ea80 0402 	eor.w	r4, r0, r2
 800fdf8:	f241 05b0 	movw	r5, #4272	; 0x10b0
 800fdfc:	443d      	add	r5, r7
 800fdfe:	602c      	str	r4, [r5, #0]
 800fe00:	404b      	eors	r3, r1
 800fe02:	f241 02b4 	movw	r2, #4276	; 0x10b4
 800fe06:	443a      	add	r2, r7
 800fe08:	6013      	str	r3, [r2, #0]
 800fe0a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800fe14:	2210      	movs	r2, #16
 800fe16:	f241 03b0 	movw	r3, #4272	; 0x10b0
 800fe1a:	443b      	add	r3, r7
 800fe1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fe20:	f7f8 fb8e 	bl	8008540 <rotr64>
 800fe24:	4602      	mov	r2, r0
 800fe26:	460b      	mov	r3, r1
 800fe28:	e9c4 2300 	strd	r2, r3, [r4]
 800fe2c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	3350      	adds	r3, #80	; 0x50
 800fe34:	e9d3 4500 	ldrd	r4, r5, [r3]
 800fe38:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	3370      	adds	r3, #112	; 0x70
 800fe40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe44:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800fe48:	6809      	ldr	r1, [r1, #0]
 800fe4a:	3150      	adds	r1, #80	; 0x50
 800fe4c:	18a0      	adds	r0, r4, r2
 800fe4e:	f241 0ca8 	movw	ip, #4264	; 0x10a8
 800fe52:	44bc      	add	ip, r7
 800fe54:	f8cc 0000 	str.w	r0, [ip]
 800fe58:	eb45 0303 	adc.w	r3, r5, r3
 800fe5c:	f241 02ac 	movw	r2, #4268	; 0x10ac
 800fe60:	443a      	add	r2, r7
 800fe62:	6013      	str	r3, [r2, #0]
 800fe64:	f241 03a8 	movw	r3, #4264	; 0x10a8
 800fe68:	443b      	add	r3, r7
 800fe6a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800fe6e:	e9c1 3400 	strd	r3, r4, [r1]
 800fe72:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	3330      	adds	r3, #48	; 0x30
 800fe7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fe7e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	3350      	adds	r3, #80	; 0x50
 800fe86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe8a:	ea80 0402 	eor.w	r4, r0, r2
 800fe8e:	f507 5585 	add.w	r5, r7, #4256	; 0x10a0
 800fe92:	602c      	str	r4, [r5, #0]
 800fe94:	404b      	eors	r3, r1
 800fe96:	f241 02a4 	movw	r2, #4260	; 0x10a4
 800fe9a:	443a      	add	r2, r7
 800fe9c:	6013      	str	r3, [r2, #0]
 800fe9e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800fea8:	223f      	movs	r2, #63	; 0x3f
 800feaa:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800feae:	e9d3 0100 	ldrd	r0, r1, [r3]
 800feb2:	f7f8 fb45 	bl	8008540 <rotr64>
 800feb6:	4602      	mov	r2, r0
 800feb8:	460b      	mov	r3, r1
 800feba:	e9c4 2300 	strd	r2, r3, [r4]
 800febe:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	3318      	adds	r3, #24
 800fec6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800feca:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	3338      	adds	r3, #56	; 0x38
 800fed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fed6:	1884      	adds	r4, r0, r2
 800fed8:	f241 0598 	movw	r5, #4248	; 0x1098
 800fedc:	443d      	add	r5, r7
 800fede:	602c      	str	r4, [r5, #0]
 800fee0:	eb41 0303 	adc.w	r3, r1, r3
 800fee4:	f241 029c 	movw	r2, #4252	; 0x109c
 800fee8:	443a      	add	r2, r7
 800feea:	6013      	str	r3, [r2, #0]
 800feec:	2308      	movs	r3, #8
 800feee:	00da      	lsls	r2, r3, #3
 800fef0:	f641 6324 	movw	r3, #7716	; 0x1e24
 800fef4:	443b      	add	r3, r7
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	4413      	add	r3, r2
 800fefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fefe:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800ff02:	6809      	ldr	r1, [r1, #0]
 800ff04:	3118      	adds	r1, #24
 800ff06:	f241 0098 	movw	r0, #4248	; 0x1098
 800ff0a:	4438      	add	r0, r7
 800ff0c:	e9d0 4500 	ldrd	r4, r5, [r0]
 800ff10:	4620      	mov	r0, r4
 800ff12:	1880      	adds	r0, r0, r2
 800ff14:	f241 0c90 	movw	ip, #4240	; 0x1090
 800ff18:	44bc      	add	ip, r7
 800ff1a:	f8cc 0000 	str.w	r0, [ip]
 800ff1e:	4628      	mov	r0, r5
 800ff20:	eb43 0000 	adc.w	r0, r3, r0
 800ff24:	f241 0394 	movw	r3, #4244	; 0x1094
 800ff28:	443b      	add	r3, r7
 800ff2a:	6018      	str	r0, [r3, #0]
 800ff2c:	f241 0390 	movw	r3, #4240	; 0x1090
 800ff30:	443b      	add	r3, r7
 800ff32:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ff36:	e9c1 3400 	strd	r3, r4, [r1]
 800ff3a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	3378      	adds	r3, #120	; 0x78
 800ff42:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ff46:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	3318      	adds	r3, #24
 800ff4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff52:	ea80 0402 	eor.w	r4, r0, r2
 800ff56:	f241 0588 	movw	r5, #4232	; 0x1088
 800ff5a:	443d      	add	r5, r7
 800ff5c:	602c      	str	r4, [r5, #0]
 800ff5e:	404b      	eors	r3, r1
 800ff60:	f241 028c 	movw	r2, #4236	; 0x108c
 800ff64:	443a      	add	r2, r7
 800ff66:	6013      	str	r3, [r2, #0]
 800ff68:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800ff72:	2220      	movs	r2, #32
 800ff74:	f241 0388 	movw	r3, #4232	; 0x1088
 800ff78:	443b      	add	r3, r7
 800ff7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ff7e:	f7f8 fadf 	bl	8008540 <rotr64>
 800ff82:	4602      	mov	r2, r0
 800ff84:	460b      	mov	r3, r1
 800ff86:	e9c4 2300 	strd	r2, r3, [r4]
 800ff8a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	3358      	adds	r3, #88	; 0x58
 800ff92:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ff96:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	3378      	adds	r3, #120	; 0x78
 800ff9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa2:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800ffa6:	6809      	ldr	r1, [r1, #0]
 800ffa8:	3158      	adds	r1, #88	; 0x58
 800ffaa:	18a0      	adds	r0, r4, r2
 800ffac:	f507 5c84 	add.w	ip, r7, #4224	; 0x1080
 800ffb0:	f8cc 0000 	str.w	r0, [ip]
 800ffb4:	eb45 0303 	adc.w	r3, r5, r3
 800ffb8:	f241 0284 	movw	r2, #4228	; 0x1084
 800ffbc:	443a      	add	r2, r7
 800ffbe:	6013      	str	r3, [r2, #0]
 800ffc0:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800ffc4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ffc8:	e9c1 3400 	strd	r3, r4, [r1]
 800ffcc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	3338      	adds	r3, #56	; 0x38
 800ffd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ffd8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	3358      	adds	r3, #88	; 0x58
 800ffe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffe4:	ea80 0402 	eor.w	r4, r0, r2
 800ffe8:	f241 0578 	movw	r5, #4216	; 0x1078
 800ffec:	443d      	add	r5, r7
 800ffee:	602c      	str	r4, [r5, #0]
 800fff0:	404b      	eors	r3, r1
 800fff2:	f241 027c 	movw	r2, #4220	; 0x107c
 800fff6:	443a      	add	r2, r7
 800fff8:	6013      	str	r3, [r2, #0]
 800fffa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8010004:	2218      	movs	r2, #24
 8010006:	f241 0378 	movw	r3, #4216	; 0x1078
 801000a:	443b      	add	r3, r7
 801000c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010010:	f7f8 fa96 	bl	8008540 <rotr64>
 8010014:	4602      	mov	r2, r0
 8010016:	460b      	mov	r3, r1
 8010018:	e9c4 2300 	strd	r2, r3, [r4]
 801001c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	3318      	adds	r3, #24
 8010024:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010028:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	3338      	adds	r3, #56	; 0x38
 8010030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010034:	1884      	adds	r4, r0, r2
 8010036:	f241 0570 	movw	r5, #4208	; 0x1070
 801003a:	443d      	add	r5, r7
 801003c:	602c      	str	r4, [r5, #0]
 801003e:	eb41 0303 	adc.w	r3, r1, r3
 8010042:	f241 0274 	movw	r2, #4212	; 0x1074
 8010046:	443a      	add	r2, r7
 8010048:	6013      	str	r3, [r2, #0]
 801004a:	2303      	movs	r3, #3
 801004c:	00da      	lsls	r2, r3, #3
 801004e:	f641 6324 	movw	r3, #7716	; 0x1e24
 8010052:	443b      	add	r3, r7
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	4413      	add	r3, r2
 8010058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801005c:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8010060:	6809      	ldr	r1, [r1, #0]
 8010062:	3118      	adds	r1, #24
 8010064:	f241 0070 	movw	r0, #4208	; 0x1070
 8010068:	4438      	add	r0, r7
 801006a:	e9d0 4500 	ldrd	r4, r5, [r0]
 801006e:	4620      	mov	r0, r4
 8010070:	1880      	adds	r0, r0, r2
 8010072:	f241 0c68 	movw	ip, #4200	; 0x1068
 8010076:	44bc      	add	ip, r7
 8010078:	f8cc 0000 	str.w	r0, [ip]
 801007c:	4628      	mov	r0, r5
 801007e:	eb43 0000 	adc.w	r0, r3, r0
 8010082:	f241 036c 	movw	r3, #4204	; 0x106c
 8010086:	443b      	add	r3, r7
 8010088:	6018      	str	r0, [r3, #0]
 801008a:	f241 0368 	movw	r3, #4200	; 0x1068
 801008e:	443b      	add	r3, r7
 8010090:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010094:	e9c1 3400 	strd	r3, r4, [r1]
 8010098:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	3378      	adds	r3, #120	; 0x78
 80100a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80100a4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	3318      	adds	r3, #24
 80100ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100b0:	ea80 0402 	eor.w	r4, r0, r2
 80100b4:	f507 5583 	add.w	r5, r7, #4192	; 0x1060
 80100b8:	602c      	str	r4, [r5, #0]
 80100ba:	404b      	eors	r3, r1
 80100bc:	f241 0264 	movw	r2, #4196	; 0x1064
 80100c0:	443a      	add	r2, r7
 80100c2:	6013      	str	r3, [r2, #0]
 80100c4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80100ce:	2210      	movs	r2, #16
 80100d0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80100d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80100d8:	f7f8 fa32 	bl	8008540 <rotr64>
 80100dc:	4602      	mov	r2, r0
 80100de:	460b      	mov	r3, r1
 80100e0:	e9c4 2300 	strd	r2, r3, [r4]
 80100e4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	3358      	adds	r3, #88	; 0x58
 80100ec:	e9d3 4500 	ldrd	r4, r5, [r3]
 80100f0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	3378      	adds	r3, #120	; 0x78
 80100f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100fc:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8010100:	6809      	ldr	r1, [r1, #0]
 8010102:	3158      	adds	r1, #88	; 0x58
 8010104:	18a0      	adds	r0, r4, r2
 8010106:	f241 0c58 	movw	ip, #4184	; 0x1058
 801010a:	44bc      	add	ip, r7
 801010c:	f8cc 0000 	str.w	r0, [ip]
 8010110:	eb45 0303 	adc.w	r3, r5, r3
 8010114:	f241 025c 	movw	r2, #4188	; 0x105c
 8010118:	443a      	add	r2, r7
 801011a:	6013      	str	r3, [r2, #0]
 801011c:	f241 0358 	movw	r3, #4184	; 0x1058
 8010120:	443b      	add	r3, r7
 8010122:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010126:	e9c1 3400 	strd	r3, r4, [r1]
 801012a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	3338      	adds	r3, #56	; 0x38
 8010132:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010136:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	3358      	adds	r3, #88	; 0x58
 801013e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010142:	ea80 0402 	eor.w	r4, r0, r2
 8010146:	f241 0550 	movw	r5, #4176	; 0x1050
 801014a:	443d      	add	r5, r7
 801014c:	602c      	str	r4, [r5, #0]
 801014e:	404b      	eors	r3, r1
 8010150:	f241 0254 	movw	r2, #4180	; 0x1054
 8010154:	443a      	add	r2, r7
 8010156:	6013      	str	r3, [r2, #0]
 8010158:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8010162:	223f      	movs	r2, #63	; 0x3f
 8010164:	f241 0350 	movw	r3, #4176	; 0x1050
 8010168:	443b      	add	r3, r7
 801016a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801016e:	f7f8 f9e7 	bl	8008540 <rotr64>
 8010172:	4602      	mov	r2, r0
 8010174:	460b      	mov	r3, r1
 8010176:	e9c4 2300 	strd	r2, r3, [r4]
 801017a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010184:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	3328      	adds	r3, #40	; 0x28
 801018c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010190:	1884      	adds	r4, r0, r2
 8010192:	f241 0548 	movw	r5, #4168	; 0x1048
 8010196:	443d      	add	r5, r7
 8010198:	602c      	str	r4, [r5, #0]
 801019a:	eb41 0303 	adc.w	r3, r1, r3
 801019e:	f241 024c 	movw	r2, #4172	; 0x104c
 80101a2:	443a      	add	r2, r7
 80101a4:	6013      	str	r3, [r2, #0]
 80101a6:	2304      	movs	r3, #4
 80101a8:	00da      	lsls	r2, r3, #3
 80101aa:	f641 6324 	movw	r3, #7716	; 0x1e24
 80101ae:	443b      	add	r3, r7
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	4413      	add	r3, r2
 80101b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101b8:	f241 0148 	movw	r1, #4168	; 0x1048
 80101bc:	4439      	add	r1, r7
 80101be:	e9d1 4500 	ldrd	r4, r5, [r1]
 80101c2:	4621      	mov	r1, r4
 80101c4:	1889      	adds	r1, r1, r2
 80101c6:	f507 5082 	add.w	r0, r7, #4160	; 0x1040
 80101ca:	6001      	str	r1, [r0, #0]
 80101cc:	4629      	mov	r1, r5
 80101ce:	eb43 0101 	adc.w	r1, r3, r1
 80101d2:	f241 0344 	movw	r3, #4164	; 0x1044
 80101d6:	443b      	add	r3, r7
 80101d8:	6019      	str	r1, [r3, #0]
 80101da:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80101e4:	e9d2 1200 	ldrd	r1, r2, [r2]
 80101e8:	e9c3 1200 	strd	r1, r2, [r3]
 80101ec:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	3378      	adds	r3, #120	; 0x78
 80101f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80101f8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010202:	ea80 0402 	eor.w	r4, r0, r2
 8010206:	f241 0538 	movw	r5, #4152	; 0x1038
 801020a:	443d      	add	r5, r7
 801020c:	602c      	str	r4, [r5, #0]
 801020e:	404b      	eors	r3, r1
 8010210:	f241 023c 	movw	r2, #4156	; 0x103c
 8010214:	443a      	add	r2, r7
 8010216:	6013      	str	r3, [r2, #0]
 8010218:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8010222:	2220      	movs	r2, #32
 8010224:	f241 0338 	movw	r3, #4152	; 0x1038
 8010228:	443b      	add	r3, r7
 801022a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801022e:	f7f8 f987 	bl	8008540 <rotr64>
 8010232:	4602      	mov	r2, r0
 8010234:	460b      	mov	r3, r1
 8010236:	e9c4 2300 	strd	r2, r3, [r4]
 801023a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	3350      	adds	r3, #80	; 0x50
 8010242:	e9d3 4500 	ldrd	r4, r5, [r3]
 8010246:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	3378      	adds	r3, #120	; 0x78
 801024e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010252:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8010256:	6809      	ldr	r1, [r1, #0]
 8010258:	3150      	adds	r1, #80	; 0x50
 801025a:	18a0      	adds	r0, r4, r2
 801025c:	f241 0c30 	movw	ip, #4144	; 0x1030
 8010260:	44bc      	add	ip, r7
 8010262:	f8cc 0000 	str.w	r0, [ip]
 8010266:	eb45 0303 	adc.w	r3, r5, r3
 801026a:	f241 0234 	movw	r2, #4148	; 0x1034
 801026e:	443a      	add	r2, r7
 8010270:	6013      	str	r3, [r2, #0]
 8010272:	f241 0330 	movw	r3, #4144	; 0x1030
 8010276:	443b      	add	r3, r7
 8010278:	e9d3 3400 	ldrd	r3, r4, [r3]
 801027c:	e9c1 3400 	strd	r3, r4, [r1]
 8010280:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	3328      	adds	r3, #40	; 0x28
 8010288:	e9d3 0100 	ldrd	r0, r1, [r3]
 801028c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	3350      	adds	r3, #80	; 0x50
 8010294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010298:	ea80 0402 	eor.w	r4, r0, r2
 801029c:	f241 0528 	movw	r5, #4136	; 0x1028
 80102a0:	443d      	add	r5, r7
 80102a2:	602c      	str	r4, [r5, #0]
 80102a4:	404b      	eors	r3, r1
 80102a6:	f241 022c 	movw	r2, #4140	; 0x102c
 80102aa:	443a      	add	r2, r7
 80102ac:	6013      	str	r3, [r2, #0]
 80102ae:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80102b8:	2218      	movs	r2, #24
 80102ba:	f241 0328 	movw	r3, #4136	; 0x1028
 80102be:	443b      	add	r3, r7
 80102c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80102c4:	f7f8 f93c 	bl	8008540 <rotr64>
 80102c8:	4602      	mov	r2, r0
 80102ca:	460b      	mov	r3, r1
 80102cc:	e9c4 2300 	strd	r2, r3, [r4]
 80102d0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80102da:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	3328      	adds	r3, #40	; 0x28
 80102e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102e6:	1884      	adds	r4, r0, r2
 80102e8:	f507 5581 	add.w	r5, r7, #4128	; 0x1020
 80102ec:	602c      	str	r4, [r5, #0]
 80102ee:	eb41 0303 	adc.w	r3, r1, r3
 80102f2:	f241 0224 	movw	r2, #4132	; 0x1024
 80102f6:	443a      	add	r2, r7
 80102f8:	6013      	str	r3, [r2, #0]
 80102fa:	230d      	movs	r3, #13
 80102fc:	00da      	lsls	r2, r3, #3
 80102fe:	f641 6324 	movw	r3, #7716	; 0x1e24
 8010302:	443b      	add	r3, r7
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	4413      	add	r3, r2
 8010308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801030c:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8010310:	e9d1 4500 	ldrd	r4, r5, [r1]
 8010314:	4621      	mov	r1, r4
 8010316:	1889      	adds	r1, r1, r2
 8010318:	f241 0018 	movw	r0, #4120	; 0x1018
 801031c:	4438      	add	r0, r7
 801031e:	6001      	str	r1, [r0, #0]
 8010320:	4629      	mov	r1, r5
 8010322:	eb43 0101 	adc.w	r1, r3, r1
 8010326:	f241 031c 	movw	r3, #4124	; 0x101c
 801032a:	443b      	add	r3, r7
 801032c:	6019      	str	r1, [r3, #0]
 801032e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	f241 0218 	movw	r2, #4120	; 0x1018
 8010338:	443a      	add	r2, r7
 801033a:	e9d2 1200 	ldrd	r1, r2, [r2]
 801033e:	e9c3 1200 	strd	r1, r2, [r3]
 8010342:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	3378      	adds	r3, #120	; 0x78
 801034a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801034e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010358:	ea80 0402 	eor.w	r4, r0, r2
 801035c:	f241 0510 	movw	r5, #4112	; 0x1010
 8010360:	443d      	add	r5, r7
 8010362:	602c      	str	r4, [r5, #0]
 8010364:	404b      	eors	r3, r1
 8010366:	f241 0214 	movw	r2, #4116	; 0x1014
 801036a:	443a      	add	r2, r7
 801036c:	6013      	str	r3, [r2, #0]
 801036e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8010378:	2210      	movs	r2, #16
 801037a:	f241 0310 	movw	r3, #4112	; 0x1010
 801037e:	443b      	add	r3, r7
 8010380:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010384:	f7f8 f8dc 	bl	8008540 <rotr64>
 8010388:	4602      	mov	r2, r0
 801038a:	460b      	mov	r3, r1
 801038c:	e9c4 2300 	strd	r2, r3, [r4]
 8010390:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	3350      	adds	r3, #80	; 0x50
 8010398:	e9d3 4500 	ldrd	r4, r5, [r3]
 801039c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	3378      	adds	r3, #120	; 0x78
 80103a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103a8:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80103ac:	6809      	ldr	r1, [r1, #0]
 80103ae:	3150      	adds	r1, #80	; 0x50
 80103b0:	18a0      	adds	r0, r4, r2
 80103b2:	f241 0c08 	movw	ip, #4104	; 0x1008
 80103b6:	44bc      	add	ip, r7
 80103b8:	f8cc 0000 	str.w	r0, [ip]
 80103bc:	eb45 0303 	adc.w	r3, r5, r3
 80103c0:	f241 020c 	movw	r2, #4108	; 0x100c
 80103c4:	443a      	add	r2, r7
 80103c6:	6013      	str	r3, [r2, #0]
 80103c8:	f241 0308 	movw	r3, #4104	; 0x1008
 80103cc:	443b      	add	r3, r7
 80103ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80103d2:	e9c1 3400 	strd	r3, r4, [r1]
 80103d6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	3328      	adds	r3, #40	; 0x28
 80103de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80103e2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	3350      	adds	r3, #80	; 0x50
 80103ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ee:	ea80 0402 	eor.w	r4, r0, r2
 80103f2:	f507 5580 	add.w	r5, r7, #4096	; 0x1000
 80103f6:	602c      	str	r4, [r5, #0]
 80103f8:	404b      	eors	r3, r1
 80103fa:	f241 0204 	movw	r2, #4100	; 0x1004
 80103fe:	443a      	add	r2, r7
 8010400:	6013      	str	r3, [r2, #0]
 8010402:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	f103 0428 	add.w	r4, r3, #40	; 0x28
 801040c:	223f      	movs	r2, #63	; 0x3f
 801040e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8010412:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010416:	f7f8 f893 	bl	8008540 <rotr64>
 801041a:	4602      	mov	r2, r0
 801041c:	460b      	mov	r3, r1
 801041e:	e9c4 2300 	strd	r2, r3, [r4]
 8010422:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	3308      	adds	r3, #8
 801042a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801042e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	3330      	adds	r3, #48	; 0x30
 8010436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801043a:	1884      	adds	r4, r0, r2
 801043c:	f8c7 4ff8 	str.w	r4, [r7, #4088]	; 0xff8
 8010440:	eb41 0303 	adc.w	r3, r1, r3
 8010444:	f8c7 3ffc 	str.w	r3, [r7, #4092]	; 0xffc
 8010448:	2307      	movs	r3, #7
 801044a:	00da      	lsls	r2, r3, #3
 801044c:	f641 6324 	movw	r3, #7716	; 0x1e24
 8010450:	443b      	add	r3, r7
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	4413      	add	r3, r2
 8010456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801045a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801045e:	6809      	ldr	r1, [r1, #0]
 8010460:	3108      	adds	r1, #8
 8010462:	f607 70f8 	addw	r0, r7, #4088	; 0xff8
 8010466:	e9d0 4500 	ldrd	r4, r5, [r0]
 801046a:	4620      	mov	r0, r4
 801046c:	1880      	adds	r0, r0, r2
 801046e:	f8c7 0ff0 	str.w	r0, [r7, #4080]	; 0xff0
 8010472:	4628      	mov	r0, r5
 8010474:	eb43 0000 	adc.w	r0, r3, r0
 8010478:	f8c7 0ff4 	str.w	r0, [r7, #4084]	; 0xff4
 801047c:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8010480:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010484:	e9c1 3400 	strd	r3, r4, [r1]
 8010488:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	3360      	adds	r3, #96	; 0x60
 8010490:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010494:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	3308      	adds	r3, #8
 801049c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104a0:	ea80 0402 	eor.w	r4, r0, r2
 80104a4:	f8c7 4fe8 	str.w	r4, [r7, #4072]	; 0xfe8
 80104a8:	404b      	eors	r3, r1
 80104aa:	f8c7 3fec 	str.w	r3, [r7, #4076]	; 0xfec
 80104ae:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80104b8:	2220      	movs	r2, #32
 80104ba:	f607 73e8 	addw	r3, r7, #4072	; 0xfe8
 80104be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80104c2:	f7f8 f83d 	bl	8008540 <rotr64>
 80104c6:	4602      	mov	r2, r0
 80104c8:	460b      	mov	r3, r1
 80104ca:	e9c4 2300 	strd	r2, r3, [r4]
 80104ce:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	3358      	adds	r3, #88	; 0x58
 80104d6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80104da:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	3360      	adds	r3, #96	; 0x60
 80104e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104e6:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80104ea:	6809      	ldr	r1, [r1, #0]
 80104ec:	3158      	adds	r1, #88	; 0x58
 80104ee:	18a0      	adds	r0, r4, r2
 80104f0:	f8c7 0fe0 	str.w	r0, [r7, #4064]	; 0xfe0
 80104f4:	eb45 0303 	adc.w	r3, r5, r3
 80104f8:	f8c7 3fe4 	str.w	r3, [r7, #4068]	; 0xfe4
 80104fc:	f507 637e 	add.w	r3, r7, #4064	; 0xfe0
 8010500:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010504:	e9c1 3400 	strd	r3, r4, [r1]
 8010508:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	3330      	adds	r3, #48	; 0x30
 8010510:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010514:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	3358      	adds	r3, #88	; 0x58
 801051c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010520:	ea80 0402 	eor.w	r4, r0, r2
 8010524:	f8c7 4fd8 	str.w	r4, [r7, #4056]	; 0xfd8
 8010528:	404b      	eors	r3, r1
 801052a:	f8c7 3fdc 	str.w	r3, [r7, #4060]	; 0xfdc
 801052e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8010538:	2218      	movs	r2, #24
 801053a:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 801053e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010542:	f7f7 fffd 	bl	8008540 <rotr64>
 8010546:	4602      	mov	r2, r0
 8010548:	460b      	mov	r3, r1
 801054a:	e9c4 2300 	strd	r2, r3, [r4]
 801054e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	3308      	adds	r3, #8
 8010556:	e9d3 0100 	ldrd	r0, r1, [r3]
 801055a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	3330      	adds	r3, #48	; 0x30
 8010562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010566:	1884      	adds	r4, r0, r2
 8010568:	f8c7 4fd0 	str.w	r4, [r7, #4048]	; 0xfd0
 801056c:	eb41 0303 	adc.w	r3, r1, r3
 8010570:	f8c7 3fd4 	str.w	r3, [r7, #4052]	; 0xfd4
 8010574:	2305      	movs	r3, #5
 8010576:	00da      	lsls	r2, r3, #3
 8010578:	f641 6324 	movw	r3, #7716	; 0x1e24
 801057c:	443b      	add	r3, r7
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	4413      	add	r3, r2
 8010582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010586:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801058a:	6809      	ldr	r1, [r1, #0]
 801058c:	3108      	adds	r1, #8
 801058e:	f507 607d 	add.w	r0, r7, #4048	; 0xfd0
 8010592:	e9d0 4500 	ldrd	r4, r5, [r0]
 8010596:	4620      	mov	r0, r4
 8010598:	1880      	adds	r0, r0, r2
 801059a:	f8c7 0fc8 	str.w	r0, [r7, #4040]	; 0xfc8
 801059e:	4628      	mov	r0, r5
 80105a0:	eb43 0000 	adc.w	r0, r3, r0
 80105a4:	f8c7 0fcc 	str.w	r0, [r7, #4044]	; 0xfcc
 80105a8:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 80105ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80105b0:	e9c1 3400 	strd	r3, r4, [r1]
 80105b4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	3360      	adds	r3, #96	; 0x60
 80105bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80105c0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	3308      	adds	r3, #8
 80105c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105cc:	ea80 0402 	eor.w	r4, r0, r2
 80105d0:	f8c7 4fc0 	str.w	r4, [r7, #4032]	; 0xfc0
 80105d4:	404b      	eors	r3, r1
 80105d6:	f8c7 3fc4 	str.w	r3, [r7, #4036]	; 0xfc4
 80105da:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80105e4:	2210      	movs	r2, #16
 80105e6:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 80105ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80105ee:	f7f7 ffa7 	bl	8008540 <rotr64>
 80105f2:	4602      	mov	r2, r0
 80105f4:	460b      	mov	r3, r1
 80105f6:	e9c4 2300 	strd	r2, r3, [r4]
 80105fa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	3358      	adds	r3, #88	; 0x58
 8010602:	e9d3 4500 	ldrd	r4, r5, [r3]
 8010606:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	3360      	adds	r3, #96	; 0x60
 801060e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010612:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8010616:	6809      	ldr	r1, [r1, #0]
 8010618:	3158      	adds	r1, #88	; 0x58
 801061a:	18a0      	adds	r0, r4, r2
 801061c:	f8c7 0fb8 	str.w	r0, [r7, #4024]	; 0xfb8
 8010620:	eb45 0303 	adc.w	r3, r5, r3
 8010624:	f8c7 3fbc 	str.w	r3, [r7, #4028]	; 0xfbc
 8010628:	f607 73b8 	addw	r3, r7, #4024	; 0xfb8
 801062c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010630:	e9c1 3400 	strd	r3, r4, [r1]
 8010634:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	3330      	adds	r3, #48	; 0x30
 801063c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010640:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	3358      	adds	r3, #88	; 0x58
 8010648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801064c:	ea80 0402 	eor.w	r4, r0, r2
 8010650:	f8c7 4fb0 	str.w	r4, [r7, #4016]	; 0xfb0
 8010654:	404b      	eors	r3, r1
 8010656:	f8c7 3fb4 	str.w	r3, [r7, #4020]	; 0xfb4
 801065a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8010664:	223f      	movs	r2, #63	; 0x3f
 8010666:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 801066a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801066e:	f7f7 ff67 	bl	8008540 <rotr64>
 8010672:	4602      	mov	r2, r0
 8010674:	460b      	mov	r3, r1
 8010676:	e9c4 2300 	strd	r2, r3, [r4]
 801067a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	3310      	adds	r3, #16
 8010682:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010686:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	3338      	adds	r3, #56	; 0x38
 801068e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010692:	1884      	adds	r4, r0, r2
 8010694:	f8c7 4fa8 	str.w	r4, [r7, #4008]	; 0xfa8
 8010698:	eb41 0303 	adc.w	r3, r1, r3
 801069c:	f8c7 3fac 	str.w	r3, [r7, #4012]	; 0xfac
 80106a0:	230f      	movs	r3, #15
 80106a2:	00da      	lsls	r2, r3, #3
 80106a4:	f641 6324 	movw	r3, #7716	; 0x1e24
 80106a8:	443b      	add	r3, r7
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	4413      	add	r3, r2
 80106ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106b2:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80106b6:	6809      	ldr	r1, [r1, #0]
 80106b8:	3110      	adds	r1, #16
 80106ba:	f607 70a8 	addw	r0, r7, #4008	; 0xfa8
 80106be:	e9d0 4500 	ldrd	r4, r5, [r0]
 80106c2:	4620      	mov	r0, r4
 80106c4:	1880      	adds	r0, r0, r2
 80106c6:	f8c7 0fa0 	str.w	r0, [r7, #4000]	; 0xfa0
 80106ca:	4628      	mov	r0, r5
 80106cc:	eb43 0000 	adc.w	r0, r3, r0
 80106d0:	f8c7 0fa4 	str.w	r0, [r7, #4004]	; 0xfa4
 80106d4:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 80106d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80106dc:	e9c1 3400 	strd	r3, r4, [r1]
 80106e0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	3368      	adds	r3, #104	; 0x68
 80106e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80106ec:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	3310      	adds	r3, #16
 80106f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106f8:	ea80 0402 	eor.w	r4, r0, r2
 80106fc:	f8c7 4f98 	str.w	r4, [r7, #3992]	; 0xf98
 8010700:	404b      	eors	r3, r1
 8010702:	f8c7 3f9c 	str.w	r3, [r7, #3996]	; 0xf9c
 8010706:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8010710:	2220      	movs	r2, #32
 8010712:	f607 7398 	addw	r3, r7, #3992	; 0xf98
 8010716:	e9d3 0100 	ldrd	r0, r1, [r3]
 801071a:	f7f7 ff11 	bl	8008540 <rotr64>
 801071e:	4602      	mov	r2, r0
 8010720:	460b      	mov	r3, r1
 8010722:	e9c4 2300 	strd	r2, r3, [r4]
 8010726:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	3340      	adds	r3, #64	; 0x40
 801072e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8010732:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	3368      	adds	r3, #104	; 0x68
 801073a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801073e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8010742:	6809      	ldr	r1, [r1, #0]
 8010744:	3140      	adds	r1, #64	; 0x40
 8010746:	18a0      	adds	r0, r4, r2
 8010748:	f8c7 0f90 	str.w	r0, [r7, #3984]	; 0xf90
 801074c:	eb45 0303 	adc.w	r3, r5, r3
 8010750:	f8c7 3f94 	str.w	r3, [r7, #3988]	; 0xf94
 8010754:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 8010758:	e9d3 3400 	ldrd	r3, r4, [r3]
 801075c:	e9c1 3400 	strd	r3, r4, [r1]
 8010760:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	3338      	adds	r3, #56	; 0x38
 8010768:	e9d3 0100 	ldrd	r0, r1, [r3]
 801076c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	3340      	adds	r3, #64	; 0x40
 8010774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010778:	ea80 0402 	eor.w	r4, r0, r2
 801077c:	f8c7 4f88 	str.w	r4, [r7, #3976]	; 0xf88
 8010780:	404b      	eors	r3, r1
 8010782:	f8c7 3f8c 	str.w	r3, [r7, #3980]	; 0xf8c
 8010786:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8010790:	2218      	movs	r2, #24
 8010792:	f607 7388 	addw	r3, r7, #3976	; 0xf88
 8010796:	e9d3 0100 	ldrd	r0, r1, [r3]
 801079a:	f7f7 fed1 	bl	8008540 <rotr64>
 801079e:	4602      	mov	r2, r0
 80107a0:	460b      	mov	r3, r1
 80107a2:	e9c4 2300 	strd	r2, r3, [r4]
 80107a6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	3310      	adds	r3, #16
 80107ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80107b2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	3338      	adds	r3, #56	; 0x38
 80107ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107be:	1884      	adds	r4, r0, r2
 80107c0:	f8c7 4f80 	str.w	r4, [r7, #3968]	; 0xf80
 80107c4:	eb41 0303 	adc.w	r3, r1, r3
 80107c8:	f8c7 3f84 	str.w	r3, [r7, #3972]	; 0xf84
 80107cc:	230e      	movs	r3, #14
 80107ce:	00da      	lsls	r2, r3, #3
 80107d0:	f641 6324 	movw	r3, #7716	; 0x1e24
 80107d4:	443b      	add	r3, r7
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	4413      	add	r3, r2
 80107da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107de:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80107e2:	6809      	ldr	r1, [r1, #0]
 80107e4:	3110      	adds	r1, #16
 80107e6:	f507 6078 	add.w	r0, r7, #3968	; 0xf80
 80107ea:	e9d0 4500 	ldrd	r4, r5, [r0]
 80107ee:	4620      	mov	r0, r4
 80107f0:	1880      	adds	r0, r0, r2
 80107f2:	f8c7 0f78 	str.w	r0, [r7, #3960]	; 0xf78
 80107f6:	4628      	mov	r0, r5
 80107f8:	eb43 0000 	adc.w	r0, r3, r0
 80107fc:	f8c7 0f7c 	str.w	r0, [r7, #3964]	; 0xf7c
 8010800:	f607 7378 	addw	r3, r7, #3960	; 0xf78
 8010804:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010808:	e9c1 3400 	strd	r3, r4, [r1]
 801080c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	3368      	adds	r3, #104	; 0x68
 8010814:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010818:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	3310      	adds	r3, #16
 8010820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010824:	ea80 0402 	eor.w	r4, r0, r2
 8010828:	f8c7 4f70 	str.w	r4, [r7, #3952]	; 0xf70
 801082c:	404b      	eors	r3, r1
 801082e:	f8c7 3f74 	str.w	r3, [r7, #3956]	; 0xf74
 8010832:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	f103 0468 	add.w	r4, r3, #104	; 0x68
 801083c:	2210      	movs	r2, #16
 801083e:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8010842:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010846:	f7f7 fe7b 	bl	8008540 <rotr64>
 801084a:	4602      	mov	r2, r0
 801084c:	460b      	mov	r3, r1
 801084e:	e9c4 2300 	strd	r2, r3, [r4]
 8010852:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	3340      	adds	r3, #64	; 0x40
 801085a:	e9d3 4500 	ldrd	r4, r5, [r3]
 801085e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	3368      	adds	r3, #104	; 0x68
 8010866:	e9d3 2300 	ldrd	r2, r3, [r3]
 801086a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801086e:	6809      	ldr	r1, [r1, #0]
 8010870:	3140      	adds	r1, #64	; 0x40
 8010872:	18a0      	adds	r0, r4, r2
 8010874:	f8c7 0f68 	str.w	r0, [r7, #3944]	; 0xf68
 8010878:	eb45 0303 	adc.w	r3, r5, r3
 801087c:	f8c7 3f6c 	str.w	r3, [r7, #3948]	; 0xf6c
 8010880:	f607 7368 	addw	r3, r7, #3944	; 0xf68
 8010884:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010888:	e9c1 3400 	strd	r3, r4, [r1]
 801088c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	3338      	adds	r3, #56	; 0x38
 8010894:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010898:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	3340      	adds	r3, #64	; 0x40
 80108a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108a4:	ea80 0402 	eor.w	r4, r0, r2
 80108a8:	f8c7 4f60 	str.w	r4, [r7, #3936]	; 0xf60
 80108ac:	404b      	eors	r3, r1
 80108ae:	f8c7 3f64 	str.w	r3, [r7, #3940]	; 0xf64
 80108b2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80108bc:	223f      	movs	r2, #63	; 0x3f
 80108be:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 80108c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80108c6:	f7f7 fe3b 	bl	8008540 <rotr64>
 80108ca:	4602      	mov	r2, r0
 80108cc:	460b      	mov	r3, r1
 80108ce:	e9c4 2300 	strd	r2, r3, [r4]
 80108d2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	3318      	adds	r3, #24
 80108da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80108de:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	3320      	adds	r3, #32
 80108e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ea:	1884      	adds	r4, r0, r2
 80108ec:	f8c7 4f58 	str.w	r4, [r7, #3928]	; 0xf58
 80108f0:	eb41 0303 	adc.w	r3, r1, r3
 80108f4:	f8c7 3f5c 	str.w	r3, [r7, #3932]	; 0xf5c
 80108f8:	2301      	movs	r3, #1
 80108fa:	00da      	lsls	r2, r3, #3
 80108fc:	f641 6324 	movw	r3, #7716	; 0x1e24
 8010900:	443b      	add	r3, r7
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	4413      	add	r3, r2
 8010906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801090a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801090e:	6809      	ldr	r1, [r1, #0]
 8010910:	3118      	adds	r1, #24
 8010912:	f607 7058 	addw	r0, r7, #3928	; 0xf58
 8010916:	e9d0 4500 	ldrd	r4, r5, [r0]
 801091a:	4620      	mov	r0, r4
 801091c:	1880      	adds	r0, r0, r2
 801091e:	f8c7 0f50 	str.w	r0, [r7, #3920]	; 0xf50
 8010922:	4628      	mov	r0, r5
 8010924:	eb43 0000 	adc.w	r0, r3, r0
 8010928:	f8c7 0f54 	str.w	r0, [r7, #3924]	; 0xf54
 801092c:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 8010930:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010934:	e9c1 3400 	strd	r3, r4, [r1]
 8010938:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	3370      	adds	r3, #112	; 0x70
 8010940:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010944:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	3318      	adds	r3, #24
 801094c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010950:	ea80 0402 	eor.w	r4, r0, r2
 8010954:	f8c7 4f48 	str.w	r4, [r7, #3912]	; 0xf48
 8010958:	404b      	eors	r3, r1
 801095a:	f8c7 3f4c 	str.w	r3, [r7, #3916]	; 0xf4c
 801095e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8010968:	2220      	movs	r2, #32
 801096a:	f607 7348 	addw	r3, r7, #3912	; 0xf48
 801096e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010972:	f7f7 fde5 	bl	8008540 <rotr64>
 8010976:	4602      	mov	r2, r0
 8010978:	460b      	mov	r3, r1
 801097a:	e9c4 2300 	strd	r2, r3, [r4]
 801097e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	3348      	adds	r3, #72	; 0x48
 8010986:	e9d3 4500 	ldrd	r4, r5, [r3]
 801098a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	3370      	adds	r3, #112	; 0x70
 8010992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010996:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801099a:	6809      	ldr	r1, [r1, #0]
 801099c:	3148      	adds	r1, #72	; 0x48
 801099e:	18a0      	adds	r0, r4, r2
 80109a0:	f8c7 0f40 	str.w	r0, [r7, #3904]	; 0xf40
 80109a4:	eb45 0303 	adc.w	r3, r5, r3
 80109a8:	f8c7 3f44 	str.w	r3, [r7, #3908]	; 0xf44
 80109ac:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 80109b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80109b4:	e9c1 3400 	strd	r3, r4, [r1]
 80109b8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	3320      	adds	r3, #32
 80109c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80109c4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	3348      	adds	r3, #72	; 0x48
 80109cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109d0:	ea80 0402 	eor.w	r4, r0, r2
 80109d4:	f8c7 4f38 	str.w	r4, [r7, #3896]	; 0xf38
 80109d8:	404b      	eors	r3, r1
 80109da:	f8c7 3f3c 	str.w	r3, [r7, #3900]	; 0xf3c
 80109de:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	f103 0420 	add.w	r4, r3, #32
 80109e8:	2218      	movs	r2, #24
 80109ea:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 80109ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80109f2:	f7f7 fda5 	bl	8008540 <rotr64>
 80109f6:	4602      	mov	r2, r0
 80109f8:	460b      	mov	r3, r1
 80109fa:	e9c4 2300 	strd	r2, r3, [r4]
 80109fe:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	3318      	adds	r3, #24
 8010a06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010a0a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	3320      	adds	r3, #32
 8010a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a16:	1884      	adds	r4, r0, r2
 8010a18:	f8c7 4f30 	str.w	r4, [r7, #3888]	; 0xf30
 8010a1c:	eb41 0303 	adc.w	r3, r1, r3
 8010a20:	f8c7 3f34 	str.w	r3, [r7, #3892]	; 0xf34
 8010a24:	2309      	movs	r3, #9
 8010a26:	00da      	lsls	r2, r3, #3
 8010a28:	f641 6324 	movw	r3, #7716	; 0x1e24
 8010a2c:	443b      	add	r3, r7
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	4413      	add	r3, r2
 8010a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a36:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8010a3a:	6809      	ldr	r1, [r1, #0]
 8010a3c:	3118      	adds	r1, #24
 8010a3e:	f507 6073 	add.w	r0, r7, #3888	; 0xf30
 8010a42:	e9d0 4500 	ldrd	r4, r5, [r0]
 8010a46:	4620      	mov	r0, r4
 8010a48:	1880      	adds	r0, r0, r2
 8010a4a:	f8c7 0f28 	str.w	r0, [r7, #3880]	; 0xf28
 8010a4e:	4628      	mov	r0, r5
 8010a50:	eb43 0000 	adc.w	r0, r3, r0
 8010a54:	f8c7 0f2c 	str.w	r0, [r7, #3884]	; 0xf2c
 8010a58:	f607 7328 	addw	r3, r7, #3880	; 0xf28
 8010a5c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010a60:	e9c1 3400 	strd	r3, r4, [r1]
 8010a64:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	3370      	adds	r3, #112	; 0x70
 8010a6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010a70:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	3318      	adds	r3, #24
 8010a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a7c:	ea80 0402 	eor.w	r4, r0, r2
 8010a80:	f8c7 4f20 	str.w	r4, [r7, #3872]	; 0xf20
 8010a84:	404b      	eors	r3, r1
 8010a86:	f8c7 3f24 	str.w	r3, [r7, #3876]	; 0xf24
 8010a8a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8010a94:	2210      	movs	r2, #16
 8010a96:	f507 6372 	add.w	r3, r7, #3872	; 0xf20
 8010a9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010a9e:	f7f7 fd4f 	bl	8008540 <rotr64>
 8010aa2:	4602      	mov	r2, r0
 8010aa4:	460b      	mov	r3, r1
 8010aa6:	e9c4 2300 	strd	r2, r3, [r4]
 8010aaa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	3348      	adds	r3, #72	; 0x48
 8010ab2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8010ab6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	3370      	adds	r3, #112	; 0x70
 8010abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ac2:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8010ac6:	6809      	ldr	r1, [r1, #0]
 8010ac8:	3148      	adds	r1, #72	; 0x48
 8010aca:	18a0      	adds	r0, r4, r2
 8010acc:	f8c7 0f18 	str.w	r0, [r7, #3864]	; 0xf18
 8010ad0:	eb45 0303 	adc.w	r3, r5, r3
 8010ad4:	f8c7 3f1c 	str.w	r3, [r7, #3868]	; 0xf1c
 8010ad8:	f607 7318 	addw	r3, r7, #3864	; 0xf18
 8010adc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010ae0:	e9c1 3400 	strd	r3, r4, [r1]
 8010ae4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	3320      	adds	r3, #32
 8010aec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010af0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	3348      	adds	r3, #72	; 0x48
 8010af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010afc:	ea80 0402 	eor.w	r4, r0, r2
 8010b00:	f8c7 4f10 	str.w	r4, [r7, #3856]	; 0xf10
 8010b04:	404b      	eors	r3, r1
 8010b06:	f8c7 3f14 	str.w	r3, [r7, #3860]	; 0xf14
 8010b0a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	f103 0420 	add.w	r4, r3, #32
 8010b14:	223f      	movs	r2, #63	; 0x3f
 8010b16:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 8010b1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010b1e:	f7f7 fd0f 	bl	8008540 <rotr64>
 8010b22:	4602      	mov	r2, r0
 8010b24:	460b      	mov	r3, r1
 8010b26:	e9c4 2300 	strd	r2, r3, [r4]
  ROUND( 6 );
 8010b2a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010b34:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	3320      	adds	r3, #32
 8010b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b40:	1884      	adds	r4, r0, r2
 8010b42:	f8c7 4f08 	str.w	r4, [r7, #3848]	; 0xf08
 8010b46:	eb41 0303 	adc.w	r3, r1, r3
 8010b4a:	f8c7 3f0c 	str.w	r3, [r7, #3852]	; 0xf0c
 8010b4e:	230c      	movs	r3, #12
 8010b50:	00da      	lsls	r2, r3, #3
 8010b52:	f641 6324 	movw	r3, #7716	; 0x1e24
 8010b56:	443b      	add	r3, r7
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	4413      	add	r3, r2
 8010b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b60:	f607 7108 	addw	r1, r7, #3848	; 0xf08
 8010b64:	e9d1 4500 	ldrd	r4, r5, [r1]
 8010b68:	4621      	mov	r1, r4
 8010b6a:	1889      	adds	r1, r1, r2
 8010b6c:	f8c7 1f00 	str.w	r1, [r7, #3840]	; 0xf00
 8010b70:	4629      	mov	r1, r5
 8010b72:	eb43 0101 	adc.w	r1, r3, r1
 8010b76:	f8c7 1f04 	str.w	r1, [r7, #3844]	; 0xf04
 8010b7a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	f507 6270 	add.w	r2, r7, #3840	; 0xf00
 8010b84:	e9d2 1200 	ldrd	r1, r2, [r2]
 8010b88:	e9c3 1200 	strd	r1, r2, [r3]
 8010b8c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	3360      	adds	r3, #96	; 0x60
 8010b94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010b98:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ba2:	ea80 0402 	eor.w	r4, r0, r2
 8010ba6:	f8c7 4ef8 	str.w	r4, [r7, #3832]	; 0xef8
 8010baa:	404b      	eors	r3, r1
 8010bac:	f8c7 3efc 	str.w	r3, [r7, #3836]	; 0xefc
 8010bb0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8010bba:	2220      	movs	r2, #32
 8010bbc:	f607 63f8 	addw	r3, r7, #3832	; 0xef8
 8010bc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010bc4:	f7f7 fcbc 	bl	8008540 <rotr64>
 8010bc8:	4602      	mov	r2, r0
 8010bca:	460b      	mov	r3, r1
 8010bcc:	e9c4 2300 	strd	r2, r3, [r4]
 8010bd0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	3340      	adds	r3, #64	; 0x40
 8010bd8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8010bdc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	3360      	adds	r3, #96	; 0x60
 8010be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be8:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8010bec:	6809      	ldr	r1, [r1, #0]
 8010bee:	3140      	adds	r1, #64	; 0x40
 8010bf0:	18a0      	adds	r0, r4, r2
 8010bf2:	f8c7 0ef0 	str.w	r0, [r7, #3824]	; 0xef0
 8010bf6:	eb45 0303 	adc.w	r3, r5, r3
 8010bfa:	f8c7 3ef4 	str.w	r3, [r7, #3828]	; 0xef4
 8010bfe:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8010c02:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010c06:	e9c1 3400 	strd	r3, r4, [r1]
 8010c0a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	3320      	adds	r3, #32
 8010c12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010c16:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	3340      	adds	r3, #64	; 0x40
 8010c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c22:	ea80 0402 	eor.w	r4, r0, r2
 8010c26:	f8c7 4ee8 	str.w	r4, [r7, #3816]	; 0xee8
 8010c2a:	404b      	eors	r3, r1
 8010c2c:	f8c7 3eec 	str.w	r3, [r7, #3820]	; 0xeec
 8010c30:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	f103 0420 	add.w	r4, r3, #32
 8010c3a:	2218      	movs	r2, #24
 8010c3c:	f607 63e8 	addw	r3, r7, #3816	; 0xee8
 8010c40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010c44:	f7f7 fc7c 	bl	8008540 <rotr64>
 8010c48:	4602      	mov	r2, r0
 8010c4a:	460b      	mov	r3, r1
 8010c4c:	e9c4 2300 	strd	r2, r3, [r4]
 8010c50:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010c5a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	3320      	adds	r3, #32
 8010c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c66:	1884      	adds	r4, r0, r2
 8010c68:	f8c7 4ee0 	str.w	r4, [r7, #3808]	; 0xee0
 8010c6c:	eb41 0303 	adc.w	r3, r1, r3
 8010c70:	f8c7 3ee4 	str.w	r3, [r7, #3812]	; 0xee4
 8010c74:	2305      	movs	r3, #5
 8010c76:	00da      	lsls	r2, r3, #3
 8010c78:	f641 6324 	movw	r3, #7716	; 0x1e24
 8010c7c:	443b      	add	r3, r7
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	4413      	add	r3, r2
 8010c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c86:	f507 616e 	add.w	r1, r7, #3808	; 0xee0
 8010c8a:	e9d1 4500 	ldrd	r4, r5, [r1]
 8010c8e:	4621      	mov	r1, r4
 8010c90:	1889      	adds	r1, r1, r2
 8010c92:	f8c7 1ed8 	str.w	r1, [r7, #3800]	; 0xed8
 8010c96:	4629      	mov	r1, r5
 8010c98:	eb43 0101 	adc.w	r1, r3, r1
 8010c9c:	f8c7 1edc 	str.w	r1, [r7, #3804]	; 0xedc
 8010ca0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	f607 62d8 	addw	r2, r7, #3800	; 0xed8
 8010caa:	e9d2 1200 	ldrd	r1, r2, [r2]
 8010cae:	e9c3 1200 	strd	r1, r2, [r3]
 8010cb2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	3360      	adds	r3, #96	; 0x60
 8010cba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010cbe:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cc8:	ea80 0402 	eor.w	r4, r0, r2
 8010ccc:	f8c7 4ed0 	str.w	r4, [r7, #3792]	; 0xed0
 8010cd0:	404b      	eors	r3, r1
 8010cd2:	f8c7 3ed4 	str.w	r3, [r7, #3796]	; 0xed4
 8010cd6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8010ce0:	2210      	movs	r2, #16
 8010ce2:	f507 636d 	add.w	r3, r7, #3792	; 0xed0
 8010ce6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010cea:	f7f7 fc29 	bl	8008540 <rotr64>
 8010cee:	4602      	mov	r2, r0
 8010cf0:	460b      	mov	r3, r1
 8010cf2:	e9c4 2300 	strd	r2, r3, [r4]
 8010cf6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	3340      	adds	r3, #64	; 0x40
 8010cfe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8010d02:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	3360      	adds	r3, #96	; 0x60
 8010d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d0e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8010d12:	6809      	ldr	r1, [r1, #0]
 8010d14:	3140      	adds	r1, #64	; 0x40
 8010d16:	18a0      	adds	r0, r4, r2
 8010d18:	f8c7 0ec8 	str.w	r0, [r7, #3784]	; 0xec8
 8010d1c:	eb45 0303 	adc.w	r3, r5, r3
 8010d20:	f8c7 3ecc 	str.w	r3, [r7, #3788]	; 0xecc
 8010d24:	f607 63c8 	addw	r3, r7, #3784	; 0xec8
 8010d28:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010d2c:	e9c1 3400 	strd	r3, r4, [r1]
 8010d30:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	3320      	adds	r3, #32
 8010d38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010d3c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	3340      	adds	r3, #64	; 0x40
 8010d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d48:	ea80 0402 	eor.w	r4, r0, r2
 8010d4c:	f8c7 4ec0 	str.w	r4, [r7, #3776]	; 0xec0
 8010d50:	404b      	eors	r3, r1
 8010d52:	f8c7 3ec4 	str.w	r3, [r7, #3780]	; 0xec4
 8010d56:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	f103 0420 	add.w	r4, r3, #32
 8010d60:	223f      	movs	r2, #63	; 0x3f
 8010d62:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 8010d66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010d6a:	f7f7 fbe9 	bl	8008540 <rotr64>
 8010d6e:	4602      	mov	r2, r0
 8010d70:	460b      	mov	r3, r1
 8010d72:	e9c4 2300 	strd	r2, r3, [r4]
 8010d76:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	3308      	adds	r3, #8
 8010d7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010d82:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	3328      	adds	r3, #40	; 0x28
 8010d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d8e:	1884      	adds	r4, r0, r2
 8010d90:	f8c7 4eb8 	str.w	r4, [r7, #3768]	; 0xeb8
 8010d94:	eb41 0303 	adc.w	r3, r1, r3
 8010d98:	f8c7 3ebc 	str.w	r3, [r7, #3772]	; 0xebc
 8010d9c:	2301      	movs	r3, #1
 8010d9e:	00da      	lsls	r2, r3, #3
 8010da0:	f641 6324 	movw	r3, #7716	; 0x1e24
 8010da4:	443b      	add	r3, r7
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	4413      	add	r3, r2
 8010daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dae:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8010db2:	6809      	ldr	r1, [r1, #0]
 8010db4:	3108      	adds	r1, #8
 8010db6:	f607 60b8 	addw	r0, r7, #3768	; 0xeb8
 8010dba:	e9d0 4500 	ldrd	r4, r5, [r0]
 8010dbe:	4620      	mov	r0, r4
 8010dc0:	1880      	adds	r0, r0, r2
 8010dc2:	f8c7 0eb0 	str.w	r0, [r7, #3760]	; 0xeb0
 8010dc6:	4628      	mov	r0, r5
 8010dc8:	eb43 0000 	adc.w	r0, r3, r0
 8010dcc:	f8c7 0eb4 	str.w	r0, [r7, #3764]	; 0xeb4
 8010dd0:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 8010dd4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010dd8:	e9c1 3400 	strd	r3, r4, [r1]
 8010ddc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	3368      	adds	r3, #104	; 0x68
 8010de4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010de8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	3308      	adds	r3, #8
 8010df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010df4:	ea80 0402 	eor.w	r4, r0, r2
 8010df8:	f8c7 4ea8 	str.w	r4, [r7, #3752]	; 0xea8
 8010dfc:	404b      	eors	r3, r1
 8010dfe:	f8c7 3eac 	str.w	r3, [r7, #3756]	; 0xeac
 8010e02:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8010e0c:	2220      	movs	r2, #32
 8010e0e:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 8010e12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010e16:	f7f7 fb93 	bl	8008540 <rotr64>
 8010e1a:	4602      	mov	r2, r0
 8010e1c:	460b      	mov	r3, r1
 8010e1e:	e9c4 2300 	strd	r2, r3, [r4]
 8010e22:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	3348      	adds	r3, #72	; 0x48
 8010e2a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8010e2e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	3368      	adds	r3, #104	; 0x68
 8010e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e3a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8010e3e:	6809      	ldr	r1, [r1, #0]
 8010e40:	3148      	adds	r1, #72	; 0x48
 8010e42:	18a0      	adds	r0, r4, r2
 8010e44:	f8c7 0ea0 	str.w	r0, [r7, #3744]	; 0xea0
 8010e48:	eb45 0303 	adc.w	r3, r5, r3
 8010e4c:	f8c7 3ea4 	str.w	r3, [r7, #3748]	; 0xea4
 8010e50:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8010e54:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010e58:	e9c1 3400 	strd	r3, r4, [r1]
 8010e5c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	3328      	adds	r3, #40	; 0x28
 8010e64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010e68:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	3348      	adds	r3, #72	; 0x48
 8010e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e74:	ea80 0402 	eor.w	r4, r0, r2
 8010e78:	f8c7 4e98 	str.w	r4, [r7, #3736]	; 0xe98
 8010e7c:	404b      	eors	r3, r1
 8010e7e:	f8c7 3e9c 	str.w	r3, [r7, #3740]	; 0xe9c
 8010e82:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8010e8c:	2218      	movs	r2, #24
 8010e8e:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8010e92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010e96:	f7f7 fb53 	bl	8008540 <rotr64>
 8010e9a:	4602      	mov	r2, r0
 8010e9c:	460b      	mov	r3, r1
 8010e9e:	e9c4 2300 	strd	r2, r3, [r4]
 8010ea2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	3308      	adds	r3, #8
 8010eaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010eae:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	3328      	adds	r3, #40	; 0x28
 8010eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eba:	1884      	adds	r4, r0, r2
 8010ebc:	f8c7 4e90 	str.w	r4, [r7, #3728]	; 0xe90
 8010ec0:	eb41 0303 	adc.w	r3, r1, r3
 8010ec4:	f8c7 3e94 	str.w	r3, [r7, #3732]	; 0xe94
 8010ec8:	230f      	movs	r3, #15
 8010eca:	00da      	lsls	r2, r3, #3
 8010ecc:	f641 6324 	movw	r3, #7716	; 0x1e24
 8010ed0:	443b      	add	r3, r7
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	4413      	add	r3, r2
 8010ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eda:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8010ede:	6809      	ldr	r1, [r1, #0]
 8010ee0:	3108      	adds	r1, #8
 8010ee2:	f507 6069 	add.w	r0, r7, #3728	; 0xe90
 8010ee6:	e9d0 4500 	ldrd	r4, r5, [r0]
 8010eea:	4620      	mov	r0, r4
 8010eec:	1880      	adds	r0, r0, r2
 8010eee:	f8c7 0e88 	str.w	r0, [r7, #3720]	; 0xe88
 8010ef2:	4628      	mov	r0, r5
 8010ef4:	eb43 0000 	adc.w	r0, r3, r0
 8010ef8:	f8c7 0e8c 	str.w	r0, [r7, #3724]	; 0xe8c
 8010efc:	f607 6388 	addw	r3, r7, #3720	; 0xe88
 8010f00:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010f04:	e9c1 3400 	strd	r3, r4, [r1]
 8010f08:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	3368      	adds	r3, #104	; 0x68
 8010f10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010f14:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	3308      	adds	r3, #8
 8010f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f20:	ea80 0402 	eor.w	r4, r0, r2
 8010f24:	f8c7 4e80 	str.w	r4, [r7, #3712]	; 0xe80
 8010f28:	404b      	eors	r3, r1
 8010f2a:	f8c7 3e84 	str.w	r3, [r7, #3716]	; 0xe84
 8010f2e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8010f38:	2210      	movs	r2, #16
 8010f3a:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8010f3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010f42:	f7f7 fafd 	bl	8008540 <rotr64>
 8010f46:	4602      	mov	r2, r0
 8010f48:	460b      	mov	r3, r1
 8010f4a:	e9c4 2300 	strd	r2, r3, [r4]
 8010f4e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	3348      	adds	r3, #72	; 0x48
 8010f56:	e9d3 4500 	ldrd	r4, r5, [r3]
 8010f5a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	3368      	adds	r3, #104	; 0x68
 8010f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f66:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8010f6a:	6809      	ldr	r1, [r1, #0]
 8010f6c:	3148      	adds	r1, #72	; 0x48
 8010f6e:	18a0      	adds	r0, r4, r2
 8010f70:	f8c7 0e78 	str.w	r0, [r7, #3704]	; 0xe78
 8010f74:	eb45 0303 	adc.w	r3, r5, r3
 8010f78:	f8c7 3e7c 	str.w	r3, [r7, #3708]	; 0xe7c
 8010f7c:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8010f80:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010f84:	e9c1 3400 	strd	r3, r4, [r1]
 8010f88:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	3328      	adds	r3, #40	; 0x28
 8010f90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010f94:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	3348      	adds	r3, #72	; 0x48
 8010f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fa0:	ea80 0402 	eor.w	r4, r0, r2
 8010fa4:	f8c7 4e70 	str.w	r4, [r7, #3696]	; 0xe70
 8010fa8:	404b      	eors	r3, r1
 8010faa:	f8c7 3e74 	str.w	r3, [r7, #3700]	; 0xe74
 8010fae:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8010fb8:	223f      	movs	r2, #63	; 0x3f
 8010fba:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 8010fbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010fc2:	f7f7 fabd 	bl	8008540 <rotr64>
 8010fc6:	4602      	mov	r2, r0
 8010fc8:	460b      	mov	r3, r1
 8010fca:	e9c4 2300 	strd	r2, r3, [r4]
 8010fce:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	3310      	adds	r3, #16
 8010fd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010fda:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	3330      	adds	r3, #48	; 0x30
 8010fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fe6:	1884      	adds	r4, r0, r2
 8010fe8:	f8c7 4e68 	str.w	r4, [r7, #3688]	; 0xe68
 8010fec:	eb41 0303 	adc.w	r3, r1, r3
 8010ff0:	f8c7 3e6c 	str.w	r3, [r7, #3692]	; 0xe6c
 8010ff4:	230e      	movs	r3, #14
 8010ff6:	00da      	lsls	r2, r3, #3
 8010ff8:	f641 6324 	movw	r3, #7716	; 0x1e24
 8010ffc:	443b      	add	r3, r7
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	4413      	add	r3, r2
 8011002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011006:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801100a:	6809      	ldr	r1, [r1, #0]
 801100c:	3110      	adds	r1, #16
 801100e:	f607 6068 	addw	r0, r7, #3688	; 0xe68
 8011012:	e9d0 4500 	ldrd	r4, r5, [r0]
 8011016:	4620      	mov	r0, r4
 8011018:	1880      	adds	r0, r0, r2
 801101a:	f8c7 0e60 	str.w	r0, [r7, #3680]	; 0xe60
 801101e:	4628      	mov	r0, r5
 8011020:	eb43 0000 	adc.w	r0, r3, r0
 8011024:	f8c7 0e64 	str.w	r0, [r7, #3684]	; 0xe64
 8011028:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 801102c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011030:	e9c1 3400 	strd	r3, r4, [r1]
 8011034:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	3370      	adds	r3, #112	; 0x70
 801103c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011040:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	3310      	adds	r3, #16
 8011048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801104c:	ea80 0402 	eor.w	r4, r0, r2
 8011050:	f8c7 4e58 	str.w	r4, [r7, #3672]	; 0xe58
 8011054:	404b      	eors	r3, r1
 8011056:	f8c7 3e5c 	str.w	r3, [r7, #3676]	; 0xe5c
 801105a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8011064:	2220      	movs	r2, #32
 8011066:	f607 6358 	addw	r3, r7, #3672	; 0xe58
 801106a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801106e:	f7f7 fa67 	bl	8008540 <rotr64>
 8011072:	4602      	mov	r2, r0
 8011074:	460b      	mov	r3, r1
 8011076:	e9c4 2300 	strd	r2, r3, [r4]
 801107a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	3350      	adds	r3, #80	; 0x50
 8011082:	e9d3 4500 	ldrd	r4, r5, [r3]
 8011086:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	3370      	adds	r3, #112	; 0x70
 801108e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011092:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8011096:	6809      	ldr	r1, [r1, #0]
 8011098:	3150      	adds	r1, #80	; 0x50
 801109a:	18a0      	adds	r0, r4, r2
 801109c:	f8c7 0e50 	str.w	r0, [r7, #3664]	; 0xe50
 80110a0:	eb45 0303 	adc.w	r3, r5, r3
 80110a4:	f8c7 3e54 	str.w	r3, [r7, #3668]	; 0xe54
 80110a8:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 80110ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80110b0:	e9c1 3400 	strd	r3, r4, [r1]
 80110b4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	3330      	adds	r3, #48	; 0x30
 80110bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80110c0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	3350      	adds	r3, #80	; 0x50
 80110c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110cc:	ea80 0402 	eor.w	r4, r0, r2
 80110d0:	f8c7 4e48 	str.w	r4, [r7, #3656]	; 0xe48
 80110d4:	404b      	eors	r3, r1
 80110d6:	f8c7 3e4c 	str.w	r3, [r7, #3660]	; 0xe4c
 80110da:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80110e4:	2218      	movs	r2, #24
 80110e6:	f607 6348 	addw	r3, r7, #3656	; 0xe48
 80110ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80110ee:	f7f7 fa27 	bl	8008540 <rotr64>
 80110f2:	4602      	mov	r2, r0
 80110f4:	460b      	mov	r3, r1
 80110f6:	e9c4 2300 	strd	r2, r3, [r4]
 80110fa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	3310      	adds	r3, #16
 8011102:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011106:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	3330      	adds	r3, #48	; 0x30
 801110e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011112:	1884      	adds	r4, r0, r2
 8011114:	f8c7 4e40 	str.w	r4, [r7, #3648]	; 0xe40
 8011118:	eb41 0303 	adc.w	r3, r1, r3
 801111c:	f8c7 3e44 	str.w	r3, [r7, #3652]	; 0xe44
 8011120:	230d      	movs	r3, #13
 8011122:	00da      	lsls	r2, r3, #3
 8011124:	f641 6324 	movw	r3, #7716	; 0x1e24
 8011128:	443b      	add	r3, r7
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	4413      	add	r3, r2
 801112e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011132:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8011136:	6809      	ldr	r1, [r1, #0]
 8011138:	3110      	adds	r1, #16
 801113a:	f507 6064 	add.w	r0, r7, #3648	; 0xe40
 801113e:	e9d0 4500 	ldrd	r4, r5, [r0]
 8011142:	4620      	mov	r0, r4
 8011144:	1880      	adds	r0, r0, r2
 8011146:	f8c7 0e38 	str.w	r0, [r7, #3640]	; 0xe38
 801114a:	4628      	mov	r0, r5
 801114c:	eb43 0000 	adc.w	r0, r3, r0
 8011150:	f8c7 0e3c 	str.w	r0, [r7, #3644]	; 0xe3c
 8011154:	f607 6338 	addw	r3, r7, #3640	; 0xe38
 8011158:	e9d3 3400 	ldrd	r3, r4, [r3]
 801115c:	e9c1 3400 	strd	r3, r4, [r1]
 8011160:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	3370      	adds	r3, #112	; 0x70
 8011168:	e9d3 0100 	ldrd	r0, r1, [r3]
 801116c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	3310      	adds	r3, #16
 8011174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011178:	ea80 0402 	eor.w	r4, r0, r2
 801117c:	f8c7 4e30 	str.w	r4, [r7, #3632]	; 0xe30
 8011180:	404b      	eors	r3, r1
 8011182:	f8c7 3e34 	str.w	r3, [r7, #3636]	; 0xe34
 8011186:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8011190:	2210      	movs	r2, #16
 8011192:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 8011196:	e9d3 0100 	ldrd	r0, r1, [r3]
 801119a:	f7f7 f9d1 	bl	8008540 <rotr64>
 801119e:	4602      	mov	r2, r0
 80111a0:	460b      	mov	r3, r1
 80111a2:	e9c4 2300 	strd	r2, r3, [r4]
 80111a6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	3350      	adds	r3, #80	; 0x50
 80111ae:	e9d3 4500 	ldrd	r4, r5, [r3]
 80111b2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	3370      	adds	r3, #112	; 0x70
 80111ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111be:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80111c2:	6809      	ldr	r1, [r1, #0]
 80111c4:	3150      	adds	r1, #80	; 0x50
 80111c6:	18a0      	adds	r0, r4, r2
 80111c8:	f8c7 0e28 	str.w	r0, [r7, #3624]	; 0xe28
 80111cc:	eb45 0303 	adc.w	r3, r5, r3
 80111d0:	f8c7 3e2c 	str.w	r3, [r7, #3628]	; 0xe2c
 80111d4:	f607 6328 	addw	r3, r7, #3624	; 0xe28
 80111d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80111dc:	e9c1 3400 	strd	r3, r4, [r1]
 80111e0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	3330      	adds	r3, #48	; 0x30
 80111e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80111ec:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	3350      	adds	r3, #80	; 0x50
 80111f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111f8:	ea80 0402 	eor.w	r4, r0, r2
 80111fc:	f8c7 4e20 	str.w	r4, [r7, #3616]	; 0xe20
 8011200:	404b      	eors	r3, r1
 8011202:	f8c7 3e24 	str.w	r3, [r7, #3620]	; 0xe24
 8011206:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8011210:	223f      	movs	r2, #63	; 0x3f
 8011212:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 8011216:	e9d3 0100 	ldrd	r0, r1, [r3]
 801121a:	f7f7 f991 	bl	8008540 <rotr64>
 801121e:	4602      	mov	r2, r0
 8011220:	460b      	mov	r3, r1
 8011222:	e9c4 2300 	strd	r2, r3, [r4]
 8011226:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	3318      	adds	r3, #24
 801122e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011232:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	3338      	adds	r3, #56	; 0x38
 801123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801123e:	1884      	adds	r4, r0, r2
 8011240:	f8c7 4e18 	str.w	r4, [r7, #3608]	; 0xe18
 8011244:	eb41 0303 	adc.w	r3, r1, r3
 8011248:	f8c7 3e1c 	str.w	r3, [r7, #3612]	; 0xe1c
 801124c:	2304      	movs	r3, #4
 801124e:	00da      	lsls	r2, r3, #3
 8011250:	f641 6324 	movw	r3, #7716	; 0x1e24
 8011254:	443b      	add	r3, r7
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	4413      	add	r3, r2
 801125a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801125e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8011262:	6809      	ldr	r1, [r1, #0]
 8011264:	3118      	adds	r1, #24
 8011266:	f607 6018 	addw	r0, r7, #3608	; 0xe18
 801126a:	e9d0 4500 	ldrd	r4, r5, [r0]
 801126e:	4620      	mov	r0, r4
 8011270:	1880      	adds	r0, r0, r2
 8011272:	f8c7 0e10 	str.w	r0, [r7, #3600]	; 0xe10
 8011276:	4628      	mov	r0, r5
 8011278:	eb43 0000 	adc.w	r0, r3, r0
 801127c:	f8c7 0e14 	str.w	r0, [r7, #3604]	; 0xe14
 8011280:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8011284:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011288:	e9c1 3400 	strd	r3, r4, [r1]
 801128c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	3378      	adds	r3, #120	; 0x78
 8011294:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011298:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	3318      	adds	r3, #24
 80112a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112a4:	ea80 0402 	eor.w	r4, r0, r2
 80112a8:	f8c7 4e08 	str.w	r4, [r7, #3592]	; 0xe08
 80112ac:	404b      	eors	r3, r1
 80112ae:	f8c7 3e0c 	str.w	r3, [r7, #3596]	; 0xe0c
 80112b2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80112bc:	2220      	movs	r2, #32
 80112be:	f607 6308 	addw	r3, r7, #3592	; 0xe08
 80112c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80112c6:	f7f7 f93b 	bl	8008540 <rotr64>
 80112ca:	4602      	mov	r2, r0
 80112cc:	460b      	mov	r3, r1
 80112ce:	e9c4 2300 	strd	r2, r3, [r4]
 80112d2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	3358      	adds	r3, #88	; 0x58
 80112da:	e9d3 4500 	ldrd	r4, r5, [r3]
 80112de:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	3378      	adds	r3, #120	; 0x78
 80112e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ea:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80112ee:	6809      	ldr	r1, [r1, #0]
 80112f0:	3158      	adds	r1, #88	; 0x58
 80112f2:	18a0      	adds	r0, r4, r2
 80112f4:	f8c7 0e00 	str.w	r0, [r7, #3584]	; 0xe00
 80112f8:	eb45 0303 	adc.w	r3, r5, r3
 80112fc:	f8c7 3e04 	str.w	r3, [r7, #3588]	; 0xe04
 8011300:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8011304:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011308:	e9c1 3400 	strd	r3, r4, [r1]
 801130c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	3338      	adds	r3, #56	; 0x38
 8011314:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011318:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	3358      	adds	r3, #88	; 0x58
 8011320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011324:	ea80 0402 	eor.w	r4, r0, r2
 8011328:	f8c7 4df8 	str.w	r4, [r7, #3576]	; 0xdf8
 801132c:	404b      	eors	r3, r1
 801132e:	f8c7 3dfc 	str.w	r3, [r7, #3580]	; 0xdfc
 8011332:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	f103 0438 	add.w	r4, r3, #56	; 0x38
 801133c:	2218      	movs	r2, #24
 801133e:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8011342:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011346:	f7f7 f8fb 	bl	8008540 <rotr64>
 801134a:	4602      	mov	r2, r0
 801134c:	460b      	mov	r3, r1
 801134e:	e9c4 2300 	strd	r2, r3, [r4]
 8011352:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	3318      	adds	r3, #24
 801135a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801135e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	3338      	adds	r3, #56	; 0x38
 8011366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801136a:	1884      	adds	r4, r0, r2
 801136c:	f8c7 4df0 	str.w	r4, [r7, #3568]	; 0xdf0
 8011370:	eb41 0303 	adc.w	r3, r1, r3
 8011374:	f8c7 3df4 	str.w	r3, [r7, #3572]	; 0xdf4
 8011378:	230a      	movs	r3, #10
 801137a:	00da      	lsls	r2, r3, #3
 801137c:	f641 6324 	movw	r3, #7716	; 0x1e24
 8011380:	443b      	add	r3, r7
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	4413      	add	r3, r2
 8011386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801138a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801138e:	6809      	ldr	r1, [r1, #0]
 8011390:	3118      	adds	r1, #24
 8011392:	f507 605f 	add.w	r0, r7, #3568	; 0xdf0
 8011396:	e9d0 4500 	ldrd	r4, r5, [r0]
 801139a:	4620      	mov	r0, r4
 801139c:	1880      	adds	r0, r0, r2
 801139e:	f8c7 0de8 	str.w	r0, [r7, #3560]	; 0xde8
 80113a2:	4628      	mov	r0, r5
 80113a4:	eb43 0000 	adc.w	r0, r3, r0
 80113a8:	f8c7 0dec 	str.w	r0, [r7, #3564]	; 0xdec
 80113ac:	f607 53e8 	addw	r3, r7, #3560	; 0xde8
 80113b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80113b4:	e9c1 3400 	strd	r3, r4, [r1]
 80113b8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	3378      	adds	r3, #120	; 0x78
 80113c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80113c4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	3318      	adds	r3, #24
 80113cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113d0:	ea80 0402 	eor.w	r4, r0, r2
 80113d4:	f8c7 4de0 	str.w	r4, [r7, #3552]	; 0xde0
 80113d8:	404b      	eors	r3, r1
 80113da:	f8c7 3de4 	str.w	r3, [r7, #3556]	; 0xde4
 80113de:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80113e8:	2210      	movs	r2, #16
 80113ea:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 80113ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80113f2:	f7f7 f8a5 	bl	8008540 <rotr64>
 80113f6:	4602      	mov	r2, r0
 80113f8:	460b      	mov	r3, r1
 80113fa:	e9c4 2300 	strd	r2, r3, [r4]
 80113fe:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	3358      	adds	r3, #88	; 0x58
 8011406:	e9d3 4500 	ldrd	r4, r5, [r3]
 801140a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	3378      	adds	r3, #120	; 0x78
 8011412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011416:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801141a:	6809      	ldr	r1, [r1, #0]
 801141c:	3158      	adds	r1, #88	; 0x58
 801141e:	18a0      	adds	r0, r4, r2
 8011420:	f8c7 0dd8 	str.w	r0, [r7, #3544]	; 0xdd8
 8011424:	eb45 0303 	adc.w	r3, r5, r3
 8011428:	f8c7 3ddc 	str.w	r3, [r7, #3548]	; 0xddc
 801142c:	f607 53d8 	addw	r3, r7, #3544	; 0xdd8
 8011430:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011434:	e9c1 3400 	strd	r3, r4, [r1]
 8011438:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	3338      	adds	r3, #56	; 0x38
 8011440:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011444:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	3358      	adds	r3, #88	; 0x58
 801144c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011450:	ea80 0402 	eor.w	r4, r0, r2
 8011454:	f8c7 4dd0 	str.w	r4, [r7, #3536]	; 0xdd0
 8011458:	404b      	eors	r3, r1
 801145a:	f8c7 3dd4 	str.w	r3, [r7, #3540]	; 0xdd4
 801145e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8011468:	223f      	movs	r2, #63	; 0x3f
 801146a:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 801146e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011472:	f7f7 f865 	bl	8008540 <rotr64>
 8011476:	4602      	mov	r2, r0
 8011478:	460b      	mov	r3, r1
 801147a:	e9c4 2300 	strd	r2, r3, [r4]
 801147e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011488:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	3328      	adds	r3, #40	; 0x28
 8011490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011494:	1884      	adds	r4, r0, r2
 8011496:	f8c7 4dc8 	str.w	r4, [r7, #3528]	; 0xdc8
 801149a:	eb41 0303 	adc.w	r3, r1, r3
 801149e:	f8c7 3dcc 	str.w	r3, [r7, #3532]	; 0xdcc
 80114a2:	2300      	movs	r3, #0
 80114a4:	00da      	lsls	r2, r3, #3
 80114a6:	f641 6324 	movw	r3, #7716	; 0x1e24
 80114aa:	443b      	add	r3, r7
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	4413      	add	r3, r2
 80114b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114b4:	f607 51c8 	addw	r1, r7, #3528	; 0xdc8
 80114b8:	e9d1 4500 	ldrd	r4, r5, [r1]
 80114bc:	4621      	mov	r1, r4
 80114be:	1889      	adds	r1, r1, r2
 80114c0:	f8c7 1dc0 	str.w	r1, [r7, #3520]	; 0xdc0
 80114c4:	4629      	mov	r1, r5
 80114c6:	eb43 0101 	adc.w	r1, r3, r1
 80114ca:	f8c7 1dc4 	str.w	r1, [r7, #3524]	; 0xdc4
 80114ce:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	f507 625c 	add.w	r2, r7, #3520	; 0xdc0
 80114d8:	e9d2 1200 	ldrd	r1, r2, [r2]
 80114dc:	e9c3 1200 	strd	r1, r2, [r3]
 80114e0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	3378      	adds	r3, #120	; 0x78
 80114e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80114ec:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114f6:	ea80 0402 	eor.w	r4, r0, r2
 80114fa:	f8c7 4db8 	str.w	r4, [r7, #3512]	; 0xdb8
 80114fe:	404b      	eors	r3, r1
 8011500:	f8c7 3dbc 	str.w	r3, [r7, #3516]	; 0xdbc
 8011504:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	f103 0478 	add.w	r4, r3, #120	; 0x78
 801150e:	2220      	movs	r2, #32
 8011510:	f607 53b8 	addw	r3, r7, #3512	; 0xdb8
 8011514:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011518:	f7f7 f812 	bl	8008540 <rotr64>
 801151c:	4602      	mov	r2, r0
 801151e:	460b      	mov	r3, r1
 8011520:	e9c4 2300 	strd	r2, r3, [r4]
 8011524:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	3350      	adds	r3, #80	; 0x50
 801152c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8011530:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	3378      	adds	r3, #120	; 0x78
 8011538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801153c:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8011540:	6809      	ldr	r1, [r1, #0]
 8011542:	3150      	adds	r1, #80	; 0x50
 8011544:	18a0      	adds	r0, r4, r2
 8011546:	f8c7 0db0 	str.w	r0, [r7, #3504]	; 0xdb0
 801154a:	eb45 0303 	adc.w	r3, r5, r3
 801154e:	f8c7 3db4 	str.w	r3, [r7, #3508]	; 0xdb4
 8011552:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 8011556:	e9d3 3400 	ldrd	r3, r4, [r3]
 801155a:	e9c1 3400 	strd	r3, r4, [r1]
 801155e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	3328      	adds	r3, #40	; 0x28
 8011566:	e9d3 0100 	ldrd	r0, r1, [r3]
 801156a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	3350      	adds	r3, #80	; 0x50
 8011572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011576:	ea80 0402 	eor.w	r4, r0, r2
 801157a:	f8c7 4da8 	str.w	r4, [r7, #3496]	; 0xda8
 801157e:	404b      	eors	r3, r1
 8011580:	f8c7 3dac 	str.w	r3, [r7, #3500]	; 0xdac
 8011584:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	f103 0428 	add.w	r4, r3, #40	; 0x28
 801158e:	2218      	movs	r2, #24
 8011590:	f607 53a8 	addw	r3, r7, #3496	; 0xda8
 8011594:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011598:	f7f6 ffd2 	bl	8008540 <rotr64>
 801159c:	4602      	mov	r2, r0
 801159e:	460b      	mov	r3, r1
 80115a0:	e9c4 2300 	strd	r2, r3, [r4]
 80115a4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80115ae:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	3328      	adds	r3, #40	; 0x28
 80115b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115ba:	1884      	adds	r4, r0, r2
 80115bc:	f8c7 4da0 	str.w	r4, [r7, #3488]	; 0xda0
 80115c0:	eb41 0303 	adc.w	r3, r1, r3
 80115c4:	f8c7 3da4 	str.w	r3, [r7, #3492]	; 0xda4
 80115c8:	2307      	movs	r3, #7
 80115ca:	00da      	lsls	r2, r3, #3
 80115cc:	f641 6324 	movw	r3, #7716	; 0x1e24
 80115d0:	443b      	add	r3, r7
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	4413      	add	r3, r2
 80115d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115da:	f507 615a 	add.w	r1, r7, #3488	; 0xda0
 80115de:	e9d1 4500 	ldrd	r4, r5, [r1]
 80115e2:	4621      	mov	r1, r4
 80115e4:	1889      	adds	r1, r1, r2
 80115e6:	f8c7 1d98 	str.w	r1, [r7, #3480]	; 0xd98
 80115ea:	4629      	mov	r1, r5
 80115ec:	eb43 0101 	adc.w	r1, r3, r1
 80115f0:	f8c7 1d9c 	str.w	r1, [r7, #3484]	; 0xd9c
 80115f4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	f607 5298 	addw	r2, r7, #3480	; 0xd98
 80115fe:	e9d2 1200 	ldrd	r1, r2, [r2]
 8011602:	e9c3 1200 	strd	r1, r2, [r3]
 8011606:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	3378      	adds	r3, #120	; 0x78
 801160e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011612:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801161c:	ea80 0402 	eor.w	r4, r0, r2
 8011620:	f8c7 4d90 	str.w	r4, [r7, #3472]	; 0xd90
 8011624:	404b      	eors	r3, r1
 8011626:	f8c7 3d94 	str.w	r3, [r7, #3476]	; 0xd94
 801162a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8011634:	2210      	movs	r2, #16
 8011636:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 801163a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801163e:	f7f6 ff7f 	bl	8008540 <rotr64>
 8011642:	4602      	mov	r2, r0
 8011644:	460b      	mov	r3, r1
 8011646:	e9c4 2300 	strd	r2, r3, [r4]
 801164a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	3350      	adds	r3, #80	; 0x50
 8011652:	e9d3 4500 	ldrd	r4, r5, [r3]
 8011656:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	3378      	adds	r3, #120	; 0x78
 801165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011662:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8011666:	6809      	ldr	r1, [r1, #0]
 8011668:	3150      	adds	r1, #80	; 0x50
 801166a:	18a0      	adds	r0, r4, r2
 801166c:	f8c7 0d88 	str.w	r0, [r7, #3464]	; 0xd88
 8011670:	eb45 0303 	adc.w	r3, r5, r3
 8011674:	f8c7 3d8c 	str.w	r3, [r7, #3468]	; 0xd8c
 8011678:	f607 5388 	addw	r3, r7, #3464	; 0xd88
 801167c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011680:	e9c1 3400 	strd	r3, r4, [r1]
 8011684:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	3328      	adds	r3, #40	; 0x28
 801168c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011690:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	3350      	adds	r3, #80	; 0x50
 8011698:	e9d3 2300 	ldrd	r2, r3, [r3]
 801169c:	ea80 0402 	eor.w	r4, r0, r2
 80116a0:	f8c7 4d80 	str.w	r4, [r7, #3456]	; 0xd80
 80116a4:	404b      	eors	r3, r1
 80116a6:	f8c7 3d84 	str.w	r3, [r7, #3460]	; 0xd84
 80116aa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80116b4:	223f      	movs	r2, #63	; 0x3f
 80116b6:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 80116ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80116be:	f7f6 ff3f 	bl	8008540 <rotr64>
 80116c2:	4602      	mov	r2, r0
 80116c4:	460b      	mov	r3, r1
 80116c6:	e9c4 2300 	strd	r2, r3, [r4]
 80116ca:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	3308      	adds	r3, #8
 80116d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80116d6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	3330      	adds	r3, #48	; 0x30
 80116de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116e2:	1884      	adds	r4, r0, r2
 80116e4:	f8c7 4d78 	str.w	r4, [r7, #3448]	; 0xd78
 80116e8:	eb41 0303 	adc.w	r3, r1, r3
 80116ec:	f8c7 3d7c 	str.w	r3, [r7, #3452]	; 0xd7c
 80116f0:	2306      	movs	r3, #6
 80116f2:	00da      	lsls	r2, r3, #3
 80116f4:	f641 6324 	movw	r3, #7716	; 0x1e24
 80116f8:	443b      	add	r3, r7
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	4413      	add	r3, r2
 80116fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011702:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8011706:	6809      	ldr	r1, [r1, #0]
 8011708:	3108      	adds	r1, #8
 801170a:	f607 5078 	addw	r0, r7, #3448	; 0xd78
 801170e:	e9d0 4500 	ldrd	r4, r5, [r0]
 8011712:	4620      	mov	r0, r4
 8011714:	1880      	adds	r0, r0, r2
 8011716:	f8c7 0d70 	str.w	r0, [r7, #3440]	; 0xd70
 801171a:	4628      	mov	r0, r5
 801171c:	eb43 0000 	adc.w	r0, r3, r0
 8011720:	f8c7 0d74 	str.w	r0, [r7, #3444]	; 0xd74
 8011724:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 8011728:	e9d3 3400 	ldrd	r3, r4, [r3]
 801172c:	e9c1 3400 	strd	r3, r4, [r1]
 8011730:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	3360      	adds	r3, #96	; 0x60
 8011738:	e9d3 0100 	ldrd	r0, r1, [r3]
 801173c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	3308      	adds	r3, #8
 8011744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011748:	ea80 0402 	eor.w	r4, r0, r2
 801174c:	f8c7 4d68 	str.w	r4, [r7, #3432]	; 0xd68
 8011750:	404b      	eors	r3, r1
 8011752:	f8c7 3d6c 	str.w	r3, [r7, #3436]	; 0xd6c
 8011756:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8011760:	2220      	movs	r2, #32
 8011762:	f607 5368 	addw	r3, r7, #3432	; 0xd68
 8011766:	e9d3 0100 	ldrd	r0, r1, [r3]
 801176a:	f7f6 fee9 	bl	8008540 <rotr64>
 801176e:	4602      	mov	r2, r0
 8011770:	460b      	mov	r3, r1
 8011772:	e9c4 2300 	strd	r2, r3, [r4]
 8011776:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	3358      	adds	r3, #88	; 0x58
 801177e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8011782:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	3360      	adds	r3, #96	; 0x60
 801178a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801178e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8011792:	6809      	ldr	r1, [r1, #0]
 8011794:	3158      	adds	r1, #88	; 0x58
 8011796:	18a0      	adds	r0, r4, r2
 8011798:	f8c7 0d60 	str.w	r0, [r7, #3424]	; 0xd60
 801179c:	eb45 0303 	adc.w	r3, r5, r3
 80117a0:	f8c7 3d64 	str.w	r3, [r7, #3428]	; 0xd64
 80117a4:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 80117a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80117ac:	e9c1 3400 	strd	r3, r4, [r1]
 80117b0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	3330      	adds	r3, #48	; 0x30
 80117b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80117bc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	3358      	adds	r3, #88	; 0x58
 80117c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117c8:	ea80 0402 	eor.w	r4, r0, r2
 80117cc:	f8c7 4d58 	str.w	r4, [r7, #3416]	; 0xd58
 80117d0:	404b      	eors	r3, r1
 80117d2:	f8c7 3d5c 	str.w	r3, [r7, #3420]	; 0xd5c
 80117d6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80117e0:	2218      	movs	r2, #24
 80117e2:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 80117e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80117ea:	f7f6 fea9 	bl	8008540 <rotr64>
 80117ee:	4602      	mov	r2, r0
 80117f0:	460b      	mov	r3, r1
 80117f2:	e9c4 2300 	strd	r2, r3, [r4]
 80117f6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	3308      	adds	r3, #8
 80117fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011802:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	3330      	adds	r3, #48	; 0x30
 801180a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801180e:	1884      	adds	r4, r0, r2
 8011810:	f8c7 4d50 	str.w	r4, [r7, #3408]	; 0xd50
 8011814:	eb41 0303 	adc.w	r3, r1, r3
 8011818:	f8c7 3d54 	str.w	r3, [r7, #3412]	; 0xd54
 801181c:	2303      	movs	r3, #3
 801181e:	00da      	lsls	r2, r3, #3
 8011820:	f641 6324 	movw	r3, #7716	; 0x1e24
 8011824:	443b      	add	r3, r7
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	4413      	add	r3, r2
 801182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801182e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8011832:	6809      	ldr	r1, [r1, #0]
 8011834:	3108      	adds	r1, #8
 8011836:	f507 6055 	add.w	r0, r7, #3408	; 0xd50
 801183a:	e9d0 4500 	ldrd	r4, r5, [r0]
 801183e:	4620      	mov	r0, r4
 8011840:	1880      	adds	r0, r0, r2
 8011842:	f8c7 0d48 	str.w	r0, [r7, #3400]	; 0xd48
 8011846:	4628      	mov	r0, r5
 8011848:	eb43 0000 	adc.w	r0, r3, r0
 801184c:	f8c7 0d4c 	str.w	r0, [r7, #3404]	; 0xd4c
 8011850:	f607 5348 	addw	r3, r7, #3400	; 0xd48
 8011854:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011858:	e9c1 3400 	strd	r3, r4, [r1]
 801185c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	3360      	adds	r3, #96	; 0x60
 8011864:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011868:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	3308      	adds	r3, #8
 8011870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011874:	ea80 0402 	eor.w	r4, r0, r2
 8011878:	f8c7 4d40 	str.w	r4, [r7, #3392]	; 0xd40
 801187c:	404b      	eors	r3, r1
 801187e:	f8c7 3d44 	str.w	r3, [r7, #3396]	; 0xd44
 8011882:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	f103 0460 	add.w	r4, r3, #96	; 0x60
 801188c:	2210      	movs	r2, #16
 801188e:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 8011892:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011896:	f7f6 fe53 	bl	8008540 <rotr64>
 801189a:	4602      	mov	r2, r0
 801189c:	460b      	mov	r3, r1
 801189e:	e9c4 2300 	strd	r2, r3, [r4]
 80118a2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	3358      	adds	r3, #88	; 0x58
 80118aa:	e9d3 4500 	ldrd	r4, r5, [r3]
 80118ae:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	3360      	adds	r3, #96	; 0x60
 80118b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118ba:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80118be:	6809      	ldr	r1, [r1, #0]
 80118c0:	3158      	adds	r1, #88	; 0x58
 80118c2:	18a0      	adds	r0, r4, r2
 80118c4:	f8c7 0d38 	str.w	r0, [r7, #3384]	; 0xd38
 80118c8:	eb45 0303 	adc.w	r3, r5, r3
 80118cc:	f8c7 3d3c 	str.w	r3, [r7, #3388]	; 0xd3c
 80118d0:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 80118d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80118d8:	e9c1 3400 	strd	r3, r4, [r1]
 80118dc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	3330      	adds	r3, #48	; 0x30
 80118e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80118e8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	3358      	adds	r3, #88	; 0x58
 80118f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118f4:	ea80 0402 	eor.w	r4, r0, r2
 80118f8:	f8c7 4d30 	str.w	r4, [r7, #3376]	; 0xd30
 80118fc:	404b      	eors	r3, r1
 80118fe:	f8c7 3d34 	str.w	r3, [r7, #3380]	; 0xd34
 8011902:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801190c:	223f      	movs	r2, #63	; 0x3f
 801190e:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8011912:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011916:	f7f6 fe13 	bl	8008540 <rotr64>
 801191a:	4602      	mov	r2, r0
 801191c:	460b      	mov	r3, r1
 801191e:	e9c4 2300 	strd	r2, r3, [r4]
 8011922:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	3310      	adds	r3, #16
 801192a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801192e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	3338      	adds	r3, #56	; 0x38
 8011936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801193a:	1884      	adds	r4, r0, r2
 801193c:	f8c7 4d28 	str.w	r4, [r7, #3368]	; 0xd28
 8011940:	eb41 0303 	adc.w	r3, r1, r3
 8011944:	f8c7 3d2c 	str.w	r3, [r7, #3372]	; 0xd2c
 8011948:	2309      	movs	r3, #9
 801194a:	00da      	lsls	r2, r3, #3
 801194c:	f641 6324 	movw	r3, #7716	; 0x1e24
 8011950:	443b      	add	r3, r7
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	4413      	add	r3, r2
 8011956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801195a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801195e:	6809      	ldr	r1, [r1, #0]
 8011960:	3110      	adds	r1, #16
 8011962:	f607 5028 	addw	r0, r7, #3368	; 0xd28
 8011966:	e9d0 4500 	ldrd	r4, r5, [r0]
 801196a:	4620      	mov	r0, r4
 801196c:	1880      	adds	r0, r0, r2
 801196e:	f8c7 0d20 	str.w	r0, [r7, #3360]	; 0xd20
 8011972:	4628      	mov	r0, r5
 8011974:	eb43 0000 	adc.w	r0, r3, r0
 8011978:	f8c7 0d24 	str.w	r0, [r7, #3364]	; 0xd24
 801197c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8011980:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011984:	e9c1 3400 	strd	r3, r4, [r1]
 8011988:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	3368      	adds	r3, #104	; 0x68
 8011990:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011994:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	3310      	adds	r3, #16
 801199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119a0:	ea80 0402 	eor.w	r4, r0, r2
 80119a4:	f8c7 4d18 	str.w	r4, [r7, #3352]	; 0xd18
 80119a8:	404b      	eors	r3, r1
 80119aa:	f8c7 3d1c 	str.w	r3, [r7, #3356]	; 0xd1c
 80119ae:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	f103 0468 	add.w	r4, r3, #104	; 0x68
 80119b8:	2220      	movs	r2, #32
 80119ba:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 80119be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80119c2:	f7f6 fdbd 	bl	8008540 <rotr64>
 80119c6:	4602      	mov	r2, r0
 80119c8:	460b      	mov	r3, r1
 80119ca:	e9c4 2300 	strd	r2, r3, [r4]
 80119ce:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	3340      	adds	r3, #64	; 0x40
 80119d6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80119da:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	3368      	adds	r3, #104	; 0x68
 80119e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119e6:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80119ea:	6809      	ldr	r1, [r1, #0]
 80119ec:	3140      	adds	r1, #64	; 0x40
 80119ee:	18a0      	adds	r0, r4, r2
 80119f0:	f8c7 0d10 	str.w	r0, [r7, #3344]	; 0xd10
 80119f4:	eb45 0303 	adc.w	r3, r5, r3
 80119f8:	f8c7 3d14 	str.w	r3, [r7, #3348]	; 0xd14
 80119fc:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8011a00:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011a04:	e9c1 3400 	strd	r3, r4, [r1]
 8011a08:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	3338      	adds	r3, #56	; 0x38
 8011a10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011a14:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	3340      	adds	r3, #64	; 0x40
 8011a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a20:	ea80 0402 	eor.w	r4, r0, r2
 8011a24:	f8c7 4d08 	str.w	r4, [r7, #3336]	; 0xd08
 8011a28:	404b      	eors	r3, r1
 8011a2a:	f8c7 3d0c 	str.w	r3, [r7, #3340]	; 0xd0c
 8011a2e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8011a38:	2218      	movs	r2, #24
 8011a3a:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8011a3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011a42:	f7f6 fd7d 	bl	8008540 <rotr64>
 8011a46:	4602      	mov	r2, r0
 8011a48:	460b      	mov	r3, r1
 8011a4a:	e9c4 2300 	strd	r2, r3, [r4]
 8011a4e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	3310      	adds	r3, #16
 8011a56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011a5a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	3338      	adds	r3, #56	; 0x38
 8011a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a66:	1884      	adds	r4, r0, r2
 8011a68:	f8c7 4d00 	str.w	r4, [r7, #3328]	; 0xd00
 8011a6c:	eb41 0303 	adc.w	r3, r1, r3
 8011a70:	f8c7 3d04 	str.w	r3, [r7, #3332]	; 0xd04
 8011a74:	2302      	movs	r3, #2
 8011a76:	00da      	lsls	r2, r3, #3
 8011a78:	f641 6324 	movw	r3, #7716	; 0x1e24
 8011a7c:	443b      	add	r3, r7
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	4413      	add	r3, r2
 8011a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a86:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8011a8a:	6809      	ldr	r1, [r1, #0]
 8011a8c:	3110      	adds	r1, #16
 8011a8e:	f507 6050 	add.w	r0, r7, #3328	; 0xd00
 8011a92:	e9d0 4500 	ldrd	r4, r5, [r0]
 8011a96:	4620      	mov	r0, r4
 8011a98:	1880      	adds	r0, r0, r2
 8011a9a:	f8c7 0cf8 	str.w	r0, [r7, #3320]	; 0xcf8
 8011a9e:	4628      	mov	r0, r5
 8011aa0:	eb43 0000 	adc.w	r0, r3, r0
 8011aa4:	f8c7 0cfc 	str.w	r0, [r7, #3324]	; 0xcfc
 8011aa8:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8011aac:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011ab0:	e9c1 3400 	strd	r3, r4, [r1]
 8011ab4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	3368      	adds	r3, #104	; 0x68
 8011abc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011ac0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	3310      	adds	r3, #16
 8011ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011acc:	ea80 0402 	eor.w	r4, r0, r2
 8011ad0:	f8c7 4cf0 	str.w	r4, [r7, #3312]	; 0xcf0
 8011ad4:	404b      	eors	r3, r1
 8011ad6:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
 8011ada:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8011ae4:	2210      	movs	r2, #16
 8011ae6:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8011aea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011aee:	f7f6 fd27 	bl	8008540 <rotr64>
 8011af2:	4602      	mov	r2, r0
 8011af4:	460b      	mov	r3, r1
 8011af6:	e9c4 2300 	strd	r2, r3, [r4]
 8011afa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	3340      	adds	r3, #64	; 0x40
 8011b02:	e9d3 4500 	ldrd	r4, r5, [r3]
 8011b06:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	3368      	adds	r3, #104	; 0x68
 8011b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b12:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8011b16:	6809      	ldr	r1, [r1, #0]
 8011b18:	3140      	adds	r1, #64	; 0x40
 8011b1a:	18a0      	adds	r0, r4, r2
 8011b1c:	f8c7 0ce8 	str.w	r0, [r7, #3304]	; 0xce8
 8011b20:	eb45 0303 	adc.w	r3, r5, r3
 8011b24:	f8c7 3cec 	str.w	r3, [r7, #3308]	; 0xcec
 8011b28:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8011b2c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011b30:	e9c1 3400 	strd	r3, r4, [r1]
 8011b34:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	3338      	adds	r3, #56	; 0x38
 8011b3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011b40:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	3340      	adds	r3, #64	; 0x40
 8011b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b4c:	ea80 0402 	eor.w	r4, r0, r2
 8011b50:	f8c7 4ce0 	str.w	r4, [r7, #3296]	; 0xce0
 8011b54:	404b      	eors	r3, r1
 8011b56:	f8c7 3ce4 	str.w	r3, [r7, #3300]	; 0xce4
 8011b5a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8011b64:	223f      	movs	r2, #63	; 0x3f
 8011b66:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 8011b6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011b6e:	f7f6 fce7 	bl	8008540 <rotr64>
 8011b72:	4602      	mov	r2, r0
 8011b74:	460b      	mov	r3, r1
 8011b76:	e9c4 2300 	strd	r2, r3, [r4]
 8011b7a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	3318      	adds	r3, #24
 8011b82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011b86:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	3320      	adds	r3, #32
 8011b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b92:	1884      	adds	r4, r0, r2
 8011b94:	f8c7 4cd8 	str.w	r4, [r7, #3288]	; 0xcd8
 8011b98:	eb41 0303 	adc.w	r3, r1, r3
 8011b9c:	f8c7 3cdc 	str.w	r3, [r7, #3292]	; 0xcdc
 8011ba0:	2308      	movs	r3, #8
 8011ba2:	00da      	lsls	r2, r3, #3
 8011ba4:	f641 6324 	movw	r3, #7716	; 0x1e24
 8011ba8:	443b      	add	r3, r7
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	4413      	add	r3, r2
 8011bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bb2:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8011bb6:	6809      	ldr	r1, [r1, #0]
 8011bb8:	3118      	adds	r1, #24
 8011bba:	f607 40d8 	addw	r0, r7, #3288	; 0xcd8
 8011bbe:	e9d0 4500 	ldrd	r4, r5, [r0]
 8011bc2:	4620      	mov	r0, r4
 8011bc4:	1880      	adds	r0, r0, r2
 8011bc6:	f8c7 0cd0 	str.w	r0, [r7, #3280]	; 0xcd0
 8011bca:	4628      	mov	r0, r5
 8011bcc:	eb43 0000 	adc.w	r0, r3, r0
 8011bd0:	f8c7 0cd4 	str.w	r0, [r7, #3284]	; 0xcd4
 8011bd4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8011bd8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011bdc:	e9c1 3400 	strd	r3, r4, [r1]
 8011be0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	3370      	adds	r3, #112	; 0x70
 8011be8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011bec:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	3318      	adds	r3, #24
 8011bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf8:	ea80 0402 	eor.w	r4, r0, r2
 8011bfc:	f8c7 4cc8 	str.w	r4, [r7, #3272]	; 0xcc8
 8011c00:	404b      	eors	r3, r1
 8011c02:	f8c7 3ccc 	str.w	r3, [r7, #3276]	; 0xccc
 8011c06:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8011c10:	2220      	movs	r2, #32
 8011c12:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8011c16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011c1a:	f7f6 fc91 	bl	8008540 <rotr64>
 8011c1e:	4602      	mov	r2, r0
 8011c20:	460b      	mov	r3, r1
 8011c22:	e9c4 2300 	strd	r2, r3, [r4]
 8011c26:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	3348      	adds	r3, #72	; 0x48
 8011c2e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8011c32:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	3370      	adds	r3, #112	; 0x70
 8011c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c3e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8011c42:	6809      	ldr	r1, [r1, #0]
 8011c44:	3148      	adds	r1, #72	; 0x48
 8011c46:	18a0      	adds	r0, r4, r2
 8011c48:	f8c7 0cc0 	str.w	r0, [r7, #3264]	; 0xcc0
 8011c4c:	eb45 0303 	adc.w	r3, r5, r3
 8011c50:	f8c7 3cc4 	str.w	r3, [r7, #3268]	; 0xcc4
 8011c54:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8011c58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011c5c:	e9c1 3400 	strd	r3, r4, [r1]
 8011c60:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	3320      	adds	r3, #32
 8011c68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011c6c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	3348      	adds	r3, #72	; 0x48
 8011c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c78:	ea80 0402 	eor.w	r4, r0, r2
 8011c7c:	f8c7 4cb8 	str.w	r4, [r7, #3256]	; 0xcb8
 8011c80:	404b      	eors	r3, r1
 8011c82:	f8c7 3cbc 	str.w	r3, [r7, #3260]	; 0xcbc
 8011c86:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	f103 0420 	add.w	r4, r3, #32
 8011c90:	2218      	movs	r2, #24
 8011c92:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 8011c96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011c9a:	f7f6 fc51 	bl	8008540 <rotr64>
 8011c9e:	4602      	mov	r2, r0
 8011ca0:	460b      	mov	r3, r1
 8011ca2:	e9c4 2300 	strd	r2, r3, [r4]
 8011ca6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	3318      	adds	r3, #24
 8011cae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011cb2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	3320      	adds	r3, #32
 8011cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cbe:	1884      	adds	r4, r0, r2
 8011cc0:	f8c7 4cb0 	str.w	r4, [r7, #3248]	; 0xcb0
 8011cc4:	eb41 0303 	adc.w	r3, r1, r3
 8011cc8:	f8c7 3cb4 	str.w	r3, [r7, #3252]	; 0xcb4
 8011ccc:	230b      	movs	r3, #11
 8011cce:	00da      	lsls	r2, r3, #3
 8011cd0:	f641 6324 	movw	r3, #7716	; 0x1e24
 8011cd4:	443b      	add	r3, r7
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	4413      	add	r3, r2
 8011cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cde:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8011ce2:	6809      	ldr	r1, [r1, #0]
 8011ce4:	3118      	adds	r1, #24
 8011ce6:	f507 604b 	add.w	r0, r7, #3248	; 0xcb0
 8011cea:	e9d0 4500 	ldrd	r4, r5, [r0]
 8011cee:	4620      	mov	r0, r4
 8011cf0:	1880      	adds	r0, r0, r2
 8011cf2:	f8c7 0ca8 	str.w	r0, [r7, #3240]	; 0xca8
 8011cf6:	4628      	mov	r0, r5
 8011cf8:	eb43 0000 	adc.w	r0, r3, r0
 8011cfc:	f8c7 0cac 	str.w	r0, [r7, #3244]	; 0xcac
 8011d00:	f607 43a8 	addw	r3, r7, #3240	; 0xca8
 8011d04:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011d08:	e9c1 3400 	strd	r3, r4, [r1]
 8011d0c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	3370      	adds	r3, #112	; 0x70
 8011d14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011d18:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	3318      	adds	r3, #24
 8011d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d24:	ea80 0402 	eor.w	r4, r0, r2
 8011d28:	f8c7 4ca0 	str.w	r4, [r7, #3232]	; 0xca0
 8011d2c:	404b      	eors	r3, r1
 8011d2e:	f8c7 3ca4 	str.w	r3, [r7, #3236]	; 0xca4
 8011d32:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8011d3c:	2210      	movs	r2, #16
 8011d3e:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 8011d42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011d46:	f7f6 fbfb 	bl	8008540 <rotr64>
 8011d4a:	4602      	mov	r2, r0
 8011d4c:	460b      	mov	r3, r1
 8011d4e:	e9c4 2300 	strd	r2, r3, [r4]
 8011d52:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	3348      	adds	r3, #72	; 0x48
 8011d5a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8011d5e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	3370      	adds	r3, #112	; 0x70
 8011d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d6a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8011d6e:	6809      	ldr	r1, [r1, #0]
 8011d70:	3148      	adds	r1, #72	; 0x48
 8011d72:	18a0      	adds	r0, r4, r2
 8011d74:	f8c7 0c98 	str.w	r0, [r7, #3224]	; 0xc98
 8011d78:	eb45 0303 	adc.w	r3, r5, r3
 8011d7c:	f8c7 3c9c 	str.w	r3, [r7, #3228]	; 0xc9c
 8011d80:	f607 4398 	addw	r3, r7, #3224	; 0xc98
 8011d84:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011d88:	e9c1 3400 	strd	r3, r4, [r1]
 8011d8c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	3320      	adds	r3, #32
 8011d94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011d98:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	3348      	adds	r3, #72	; 0x48
 8011da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011da4:	ea80 0402 	eor.w	r4, r0, r2
 8011da8:	f8c7 4c90 	str.w	r4, [r7, #3216]	; 0xc90
 8011dac:	404b      	eors	r3, r1
 8011dae:	f8c7 3c94 	str.w	r3, [r7, #3220]	; 0xc94
 8011db2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	f103 0420 	add.w	r4, r3, #32
 8011dbc:	223f      	movs	r2, #63	; 0x3f
 8011dbe:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8011dc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011dc6:	f7f6 fbbb 	bl	8008540 <rotr64>
 8011dca:	4602      	mov	r2, r0
 8011dcc:	460b      	mov	r3, r1
 8011dce:	e9c4 2300 	strd	r2, r3, [r4]
  ROUND( 7 );
 8011dd2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011ddc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	3320      	adds	r3, #32
 8011de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011de8:	1884      	adds	r4, r0, r2
 8011dea:	f8c7 4c88 	str.w	r4, [r7, #3208]	; 0xc88
 8011dee:	eb41 0303 	adc.w	r3, r1, r3
 8011df2:	f8c7 3c8c 	str.w	r3, [r7, #3212]	; 0xc8c
 8011df6:	230d      	movs	r3, #13
 8011df8:	00da      	lsls	r2, r3, #3
 8011dfa:	f641 6324 	movw	r3, #7716	; 0x1e24
 8011dfe:	443b      	add	r3, r7
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	4413      	add	r3, r2
 8011e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e08:	f607 4188 	addw	r1, r7, #3208	; 0xc88
 8011e0c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8011e10:	4621      	mov	r1, r4
 8011e12:	1889      	adds	r1, r1, r2
 8011e14:	f8c7 1c80 	str.w	r1, [r7, #3200]	; 0xc80
 8011e18:	4629      	mov	r1, r5
 8011e1a:	eb43 0101 	adc.w	r1, r3, r1
 8011e1e:	f8c7 1c84 	str.w	r1, [r7, #3204]	; 0xc84
 8011e22:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	f507 6248 	add.w	r2, r7, #3200	; 0xc80
 8011e2c:	e9d2 1200 	ldrd	r1, r2, [r2]
 8011e30:	e9c3 1200 	strd	r1, r2, [r3]
 8011e34:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	3360      	adds	r3, #96	; 0x60
 8011e3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011e40:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e4a:	ea80 0402 	eor.w	r4, r0, r2
 8011e4e:	f8c7 4c78 	str.w	r4, [r7, #3192]	; 0xc78
 8011e52:	404b      	eors	r3, r1
 8011e54:	f8c7 3c7c 	str.w	r3, [r7, #3196]	; 0xc7c
 8011e58:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8011e62:	2220      	movs	r2, #32
 8011e64:	f607 4378 	addw	r3, r7, #3192	; 0xc78
 8011e68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011e6c:	f7f6 fb68 	bl	8008540 <rotr64>
 8011e70:	4602      	mov	r2, r0
 8011e72:	460b      	mov	r3, r1
 8011e74:	e9c4 2300 	strd	r2, r3, [r4]
 8011e78:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	3340      	adds	r3, #64	; 0x40
 8011e80:	e9d3 4500 	ldrd	r4, r5, [r3]
 8011e84:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	3360      	adds	r3, #96	; 0x60
 8011e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e90:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8011e94:	6809      	ldr	r1, [r1, #0]
 8011e96:	3140      	adds	r1, #64	; 0x40
 8011e98:	18a0      	adds	r0, r4, r2
 8011e9a:	f8c7 0c70 	str.w	r0, [r7, #3184]	; 0xc70
 8011e9e:	eb45 0303 	adc.w	r3, r5, r3
 8011ea2:	f8c7 3c74 	str.w	r3, [r7, #3188]	; 0xc74
 8011ea6:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 8011eaa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011eae:	e9c1 3400 	strd	r3, r4, [r1]
 8011eb2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	3320      	adds	r3, #32
 8011eba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011ebe:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	3340      	adds	r3, #64	; 0x40
 8011ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eca:	ea80 0402 	eor.w	r4, r0, r2
 8011ece:	f8c7 4c68 	str.w	r4, [r7, #3176]	; 0xc68
 8011ed2:	404b      	eors	r3, r1
 8011ed4:	f8c7 3c6c 	str.w	r3, [r7, #3180]	; 0xc6c
 8011ed8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	f103 0420 	add.w	r4, r3, #32
 8011ee2:	2218      	movs	r2, #24
 8011ee4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8011ee8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011eec:	f7f6 fb28 	bl	8008540 <rotr64>
 8011ef0:	4602      	mov	r2, r0
 8011ef2:	460b      	mov	r3, r1
 8011ef4:	e9c4 2300 	strd	r2, r3, [r4]
 8011ef8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011f02:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	3320      	adds	r3, #32
 8011f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f0e:	1884      	adds	r4, r0, r2
 8011f10:	f8c7 4c60 	str.w	r4, [r7, #3168]	; 0xc60
 8011f14:	eb41 0303 	adc.w	r3, r1, r3
 8011f18:	f8c7 3c64 	str.w	r3, [r7, #3172]	; 0xc64
 8011f1c:	230b      	movs	r3, #11
 8011f1e:	00da      	lsls	r2, r3, #3
 8011f20:	f641 6324 	movw	r3, #7716	; 0x1e24
 8011f24:	443b      	add	r3, r7
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	4413      	add	r3, r2
 8011f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f2e:	f507 6146 	add.w	r1, r7, #3168	; 0xc60
 8011f32:	e9d1 4500 	ldrd	r4, r5, [r1]
 8011f36:	4621      	mov	r1, r4
 8011f38:	1889      	adds	r1, r1, r2
 8011f3a:	f8c7 1c58 	str.w	r1, [r7, #3160]	; 0xc58
 8011f3e:	4629      	mov	r1, r5
 8011f40:	eb43 0101 	adc.w	r1, r3, r1
 8011f44:	f8c7 1c5c 	str.w	r1, [r7, #3164]	; 0xc5c
 8011f48:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	f607 4258 	addw	r2, r7, #3160	; 0xc58
 8011f52:	e9d2 1200 	ldrd	r1, r2, [r2]
 8011f56:	e9c3 1200 	strd	r1, r2, [r3]
 8011f5a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	3360      	adds	r3, #96	; 0x60
 8011f62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011f66:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f70:	ea80 0402 	eor.w	r4, r0, r2
 8011f74:	f8c7 4c50 	str.w	r4, [r7, #3152]	; 0xc50
 8011f78:	404b      	eors	r3, r1
 8011f7a:	f8c7 3c54 	str.w	r3, [r7, #3156]	; 0xc54
 8011f7e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8011f88:	2210      	movs	r2, #16
 8011f8a:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8011f8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011f92:	f7f6 fad5 	bl	8008540 <rotr64>
 8011f96:	4602      	mov	r2, r0
 8011f98:	460b      	mov	r3, r1
 8011f9a:	e9c4 2300 	strd	r2, r3, [r4]
 8011f9e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	3340      	adds	r3, #64	; 0x40
 8011fa6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8011faa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	3360      	adds	r3, #96	; 0x60
 8011fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fb6:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8011fba:	6809      	ldr	r1, [r1, #0]
 8011fbc:	3140      	adds	r1, #64	; 0x40
 8011fbe:	18a0      	adds	r0, r4, r2
 8011fc0:	f8c7 0c48 	str.w	r0, [r7, #3144]	; 0xc48
 8011fc4:	eb45 0303 	adc.w	r3, r5, r3
 8011fc8:	f8c7 3c4c 	str.w	r3, [r7, #3148]	; 0xc4c
 8011fcc:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8011fd0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011fd4:	e9c1 3400 	strd	r3, r4, [r1]
 8011fd8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	3320      	adds	r3, #32
 8011fe0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011fe4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	3340      	adds	r3, #64	; 0x40
 8011fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ff0:	ea80 0402 	eor.w	r4, r0, r2
 8011ff4:	f8c7 4c40 	str.w	r4, [r7, #3136]	; 0xc40
 8011ff8:	404b      	eors	r3, r1
 8011ffa:	f8c7 3c44 	str.w	r3, [r7, #3140]	; 0xc44
 8011ffe:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	f103 0420 	add.w	r4, r3, #32
 8012008:	223f      	movs	r2, #63	; 0x3f
 801200a:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 801200e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012012:	f7f6 fa95 	bl	8008540 <rotr64>
 8012016:	4602      	mov	r2, r0
 8012018:	460b      	mov	r3, r1
 801201a:	e9c4 2300 	strd	r2, r3, [r4]
 801201e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	3308      	adds	r3, #8
 8012026:	e9d3 0100 	ldrd	r0, r1, [r3]
 801202a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	3328      	adds	r3, #40	; 0x28
 8012032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012036:	1884      	adds	r4, r0, r2
 8012038:	f8c7 4c38 	str.w	r4, [r7, #3128]	; 0xc38
 801203c:	eb41 0303 	adc.w	r3, r1, r3
 8012040:	f8c7 3c3c 	str.w	r3, [r7, #3132]	; 0xc3c
 8012044:	2307      	movs	r3, #7
 8012046:	00da      	lsls	r2, r3, #3
 8012048:	f641 6324 	movw	r3, #7716	; 0x1e24
 801204c:	443b      	add	r3, r7
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	4413      	add	r3, r2
 8012052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012056:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801205a:	6809      	ldr	r1, [r1, #0]
 801205c:	3108      	adds	r1, #8
 801205e:	f607 4038 	addw	r0, r7, #3128	; 0xc38
 8012062:	e9d0 4500 	ldrd	r4, r5, [r0]
 8012066:	4620      	mov	r0, r4
 8012068:	1880      	adds	r0, r0, r2
 801206a:	f8c7 0c30 	str.w	r0, [r7, #3120]	; 0xc30
 801206e:	4628      	mov	r0, r5
 8012070:	eb43 0000 	adc.w	r0, r3, r0
 8012074:	f8c7 0c34 	str.w	r0, [r7, #3124]	; 0xc34
 8012078:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 801207c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012080:	e9c1 3400 	strd	r3, r4, [r1]
 8012084:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	3368      	adds	r3, #104	; 0x68
 801208c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012090:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	3308      	adds	r3, #8
 8012098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801209c:	ea80 0402 	eor.w	r4, r0, r2
 80120a0:	f8c7 4c28 	str.w	r4, [r7, #3112]	; 0xc28
 80120a4:	404b      	eors	r3, r1
 80120a6:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 80120aa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	f103 0468 	add.w	r4, r3, #104	; 0x68
 80120b4:	2220      	movs	r2, #32
 80120b6:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 80120ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80120be:	f7f6 fa3f 	bl	8008540 <rotr64>
 80120c2:	4602      	mov	r2, r0
 80120c4:	460b      	mov	r3, r1
 80120c6:	e9c4 2300 	strd	r2, r3, [r4]
 80120ca:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	3348      	adds	r3, #72	; 0x48
 80120d2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80120d6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	3368      	adds	r3, #104	; 0x68
 80120de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120e2:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80120e6:	6809      	ldr	r1, [r1, #0]
 80120e8:	3148      	adds	r1, #72	; 0x48
 80120ea:	18a0      	adds	r0, r4, r2
 80120ec:	f8c7 0c20 	str.w	r0, [r7, #3104]	; 0xc20
 80120f0:	eb45 0303 	adc.w	r3, r5, r3
 80120f4:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 80120f8:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 80120fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012100:	e9c1 3400 	strd	r3, r4, [r1]
 8012104:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	3328      	adds	r3, #40	; 0x28
 801210c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012110:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	3348      	adds	r3, #72	; 0x48
 8012118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801211c:	ea80 0402 	eor.w	r4, r0, r2
 8012120:	f8c7 4c18 	str.w	r4, [r7, #3096]	; 0xc18
 8012124:	404b      	eors	r3, r1
 8012126:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 801212a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8012134:	2218      	movs	r2, #24
 8012136:	f607 4318 	addw	r3, r7, #3096	; 0xc18
 801213a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801213e:	f7f6 f9ff 	bl	8008540 <rotr64>
 8012142:	4602      	mov	r2, r0
 8012144:	460b      	mov	r3, r1
 8012146:	e9c4 2300 	strd	r2, r3, [r4]
 801214a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	3308      	adds	r3, #8
 8012152:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012156:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	3328      	adds	r3, #40	; 0x28
 801215e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012162:	1884      	adds	r4, r0, r2
 8012164:	f8c7 4c10 	str.w	r4, [r7, #3088]	; 0xc10
 8012168:	eb41 0303 	adc.w	r3, r1, r3
 801216c:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
 8012170:	230e      	movs	r3, #14
 8012172:	00da      	lsls	r2, r3, #3
 8012174:	f641 6324 	movw	r3, #7716	; 0x1e24
 8012178:	443b      	add	r3, r7
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	4413      	add	r3, r2
 801217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012182:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8012186:	6809      	ldr	r1, [r1, #0]
 8012188:	3108      	adds	r1, #8
 801218a:	f507 6041 	add.w	r0, r7, #3088	; 0xc10
 801218e:	e9d0 4500 	ldrd	r4, r5, [r0]
 8012192:	4620      	mov	r0, r4
 8012194:	1880      	adds	r0, r0, r2
 8012196:	f8c7 0c08 	str.w	r0, [r7, #3080]	; 0xc08
 801219a:	4628      	mov	r0, r5
 801219c:	eb43 0000 	adc.w	r0, r3, r0
 80121a0:	f8c7 0c0c 	str.w	r0, [r7, #3084]	; 0xc0c
 80121a4:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 80121a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80121ac:	e9c1 3400 	strd	r3, r4, [r1]
 80121b0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	3368      	adds	r3, #104	; 0x68
 80121b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80121bc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	3308      	adds	r3, #8
 80121c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121c8:	ea80 0402 	eor.w	r4, r0, r2
 80121cc:	f8c7 4c00 	str.w	r4, [r7, #3072]	; 0xc00
 80121d0:	404b      	eors	r3, r1
 80121d2:	f8c7 3c04 	str.w	r3, [r7, #3076]	; 0xc04
 80121d6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	f103 0468 	add.w	r4, r3, #104	; 0x68
 80121e0:	2210      	movs	r2, #16
 80121e2:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80121e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80121ea:	f7f6 f9a9 	bl	8008540 <rotr64>
 80121ee:	4602      	mov	r2, r0
 80121f0:	460b      	mov	r3, r1
 80121f2:	e9c4 2300 	strd	r2, r3, [r4]
 80121f6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	3348      	adds	r3, #72	; 0x48
 80121fe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8012202:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	3368      	adds	r3, #104	; 0x68
 801220a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801220e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8012212:	6809      	ldr	r1, [r1, #0]
 8012214:	3148      	adds	r1, #72	; 0x48
 8012216:	18a0      	adds	r0, r4, r2
 8012218:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
 801221c:	eb45 0303 	adc.w	r3, r5, r3
 8012220:	f8c7 3bfc 	str.w	r3, [r7, #3068]	; 0xbfc
 8012224:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8012228:	e9d3 3400 	ldrd	r3, r4, [r3]
 801222c:	e9c1 3400 	strd	r3, r4, [r1]
 8012230:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	3328      	adds	r3, #40	; 0x28
 8012238:	e9d3 0100 	ldrd	r0, r1, [r3]
 801223c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	3348      	adds	r3, #72	; 0x48
 8012244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012248:	ea80 0402 	eor.w	r4, r0, r2
 801224c:	f8c7 4bf0 	str.w	r4, [r7, #3056]	; 0xbf0
 8012250:	404b      	eors	r3, r1
 8012252:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
 8012256:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8012260:	223f      	movs	r2, #63	; 0x3f
 8012262:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 8012266:	e9d3 0100 	ldrd	r0, r1, [r3]
 801226a:	f7f6 f969 	bl	8008540 <rotr64>
 801226e:	4602      	mov	r2, r0
 8012270:	460b      	mov	r3, r1
 8012272:	e9c4 2300 	strd	r2, r3, [r4]
 8012276:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	3310      	adds	r3, #16
 801227e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012282:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	3330      	adds	r3, #48	; 0x30
 801228a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801228e:	1884      	adds	r4, r0, r2
 8012290:	f8c7 4be8 	str.w	r4, [r7, #3048]	; 0xbe8
 8012294:	eb41 0303 	adc.w	r3, r1, r3
 8012298:	f8c7 3bec 	str.w	r3, [r7, #3052]	; 0xbec
 801229c:	230c      	movs	r3, #12
 801229e:	00da      	lsls	r2, r3, #3
 80122a0:	f641 6324 	movw	r3, #7716	; 0x1e24
 80122a4:	443b      	add	r3, r7
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	4413      	add	r3, r2
 80122aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ae:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80122b2:	6809      	ldr	r1, [r1, #0]
 80122b4:	3110      	adds	r1, #16
 80122b6:	f607 30e8 	addw	r0, r7, #3048	; 0xbe8
 80122ba:	e9d0 4500 	ldrd	r4, r5, [r0]
 80122be:	4620      	mov	r0, r4
 80122c0:	1880      	adds	r0, r0, r2
 80122c2:	f8c7 0be0 	str.w	r0, [r7, #3040]	; 0xbe0
 80122c6:	4628      	mov	r0, r5
 80122c8:	eb43 0000 	adc.w	r0, r3, r0
 80122cc:	f8c7 0be4 	str.w	r0, [r7, #3044]	; 0xbe4
 80122d0:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 80122d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80122d8:	e9c1 3400 	strd	r3, r4, [r1]
 80122dc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	3370      	adds	r3, #112	; 0x70
 80122e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80122e8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	3310      	adds	r3, #16
 80122f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122f4:	ea80 0402 	eor.w	r4, r0, r2
 80122f8:	f8c7 4bd8 	str.w	r4, [r7, #3032]	; 0xbd8
 80122fc:	404b      	eors	r3, r1
 80122fe:	f8c7 3bdc 	str.w	r3, [r7, #3036]	; 0xbdc
 8012302:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801230c:	2220      	movs	r2, #32
 801230e:	f607 33d8 	addw	r3, r7, #3032	; 0xbd8
 8012312:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012316:	f7f6 f913 	bl	8008540 <rotr64>
 801231a:	4602      	mov	r2, r0
 801231c:	460b      	mov	r3, r1
 801231e:	e9c4 2300 	strd	r2, r3, [r4]
 8012322:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	3350      	adds	r3, #80	; 0x50
 801232a:	e9d3 4500 	ldrd	r4, r5, [r3]
 801232e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	3370      	adds	r3, #112	; 0x70
 8012336:	e9d3 2300 	ldrd	r2, r3, [r3]
 801233a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801233e:	6809      	ldr	r1, [r1, #0]
 8012340:	3150      	adds	r1, #80	; 0x50
 8012342:	18a0      	adds	r0, r4, r2
 8012344:	f8c7 0bd0 	str.w	r0, [r7, #3024]	; 0xbd0
 8012348:	eb45 0303 	adc.w	r3, r5, r3
 801234c:	f8c7 3bd4 	str.w	r3, [r7, #3028]	; 0xbd4
 8012350:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8012354:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012358:	e9c1 3400 	strd	r3, r4, [r1]
 801235c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	3330      	adds	r3, #48	; 0x30
 8012364:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012368:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	3350      	adds	r3, #80	; 0x50
 8012370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012374:	ea80 0402 	eor.w	r4, r0, r2
 8012378:	f8c7 4bc8 	str.w	r4, [r7, #3016]	; 0xbc8
 801237c:	404b      	eors	r3, r1
 801237e:	f8c7 3bcc 	str.w	r3, [r7, #3020]	; 0xbcc
 8012382:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801238c:	2218      	movs	r2, #24
 801238e:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 8012392:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012396:	f7f6 f8d3 	bl	8008540 <rotr64>
 801239a:	4602      	mov	r2, r0
 801239c:	460b      	mov	r3, r1
 801239e:	e9c4 2300 	strd	r2, r3, [r4]
 80123a2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	3310      	adds	r3, #16
 80123aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80123ae:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	3330      	adds	r3, #48	; 0x30
 80123b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ba:	1884      	adds	r4, r0, r2
 80123bc:	f8c7 4bc0 	str.w	r4, [r7, #3008]	; 0xbc0
 80123c0:	eb41 0303 	adc.w	r3, r1, r3
 80123c4:	f8c7 3bc4 	str.w	r3, [r7, #3012]	; 0xbc4
 80123c8:	2301      	movs	r3, #1
 80123ca:	00da      	lsls	r2, r3, #3
 80123cc:	f641 6324 	movw	r3, #7716	; 0x1e24
 80123d0:	443b      	add	r3, r7
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	4413      	add	r3, r2
 80123d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123da:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80123de:	6809      	ldr	r1, [r1, #0]
 80123e0:	3110      	adds	r1, #16
 80123e2:	f507 603c 	add.w	r0, r7, #3008	; 0xbc0
 80123e6:	e9d0 4500 	ldrd	r4, r5, [r0]
 80123ea:	4620      	mov	r0, r4
 80123ec:	1880      	adds	r0, r0, r2
 80123ee:	f8c7 0bb8 	str.w	r0, [r7, #3000]	; 0xbb8
 80123f2:	4628      	mov	r0, r5
 80123f4:	eb43 0000 	adc.w	r0, r3, r0
 80123f8:	f8c7 0bbc 	str.w	r0, [r7, #3004]	; 0xbbc
 80123fc:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012400:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012404:	e9c1 3400 	strd	r3, r4, [r1]
 8012408:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	3370      	adds	r3, #112	; 0x70
 8012410:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012414:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	3310      	adds	r3, #16
 801241c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012420:	ea80 0402 	eor.w	r4, r0, r2
 8012424:	f8c7 4bb0 	str.w	r4, [r7, #2992]	; 0xbb0
 8012428:	404b      	eors	r3, r1
 801242a:	f8c7 3bb4 	str.w	r3, [r7, #2996]	; 0xbb4
 801242e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8012438:	2210      	movs	r2, #16
 801243a:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 801243e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012442:	f7f6 f87d 	bl	8008540 <rotr64>
 8012446:	4602      	mov	r2, r0
 8012448:	460b      	mov	r3, r1
 801244a:	e9c4 2300 	strd	r2, r3, [r4]
 801244e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	3350      	adds	r3, #80	; 0x50
 8012456:	e9d3 4500 	ldrd	r4, r5, [r3]
 801245a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	3370      	adds	r3, #112	; 0x70
 8012462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012466:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801246a:	6809      	ldr	r1, [r1, #0]
 801246c:	3150      	adds	r1, #80	; 0x50
 801246e:	18a0      	adds	r0, r4, r2
 8012470:	f8c7 0ba8 	str.w	r0, [r7, #2984]	; 0xba8
 8012474:	eb45 0303 	adc.w	r3, r5, r3
 8012478:	f8c7 3bac 	str.w	r3, [r7, #2988]	; 0xbac
 801247c:	f607 33a8 	addw	r3, r7, #2984	; 0xba8
 8012480:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012484:	e9c1 3400 	strd	r3, r4, [r1]
 8012488:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	3330      	adds	r3, #48	; 0x30
 8012490:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012494:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	3350      	adds	r3, #80	; 0x50
 801249c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124a0:	ea80 0402 	eor.w	r4, r0, r2
 80124a4:	f8c7 4ba0 	str.w	r4, [r7, #2976]	; 0xba0
 80124a8:	404b      	eors	r3, r1
 80124aa:	f8c7 3ba4 	str.w	r3, [r7, #2980]	; 0xba4
 80124ae:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80124b8:	223f      	movs	r2, #63	; 0x3f
 80124ba:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 80124be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80124c2:	f7f6 f83d 	bl	8008540 <rotr64>
 80124c6:	4602      	mov	r2, r0
 80124c8:	460b      	mov	r3, r1
 80124ca:	e9c4 2300 	strd	r2, r3, [r4]
 80124ce:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	3318      	adds	r3, #24
 80124d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80124da:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	3338      	adds	r3, #56	; 0x38
 80124e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124e6:	1884      	adds	r4, r0, r2
 80124e8:	f8c7 4b98 	str.w	r4, [r7, #2968]	; 0xb98
 80124ec:	eb41 0303 	adc.w	r3, r1, r3
 80124f0:	f8c7 3b9c 	str.w	r3, [r7, #2972]	; 0xb9c
 80124f4:	2303      	movs	r3, #3
 80124f6:	00da      	lsls	r2, r3, #3
 80124f8:	f641 6324 	movw	r3, #7716	; 0x1e24
 80124fc:	443b      	add	r3, r7
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	4413      	add	r3, r2
 8012502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012506:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801250a:	6809      	ldr	r1, [r1, #0]
 801250c:	3118      	adds	r1, #24
 801250e:	f607 3098 	addw	r0, r7, #2968	; 0xb98
 8012512:	e9d0 4500 	ldrd	r4, r5, [r0]
 8012516:	4620      	mov	r0, r4
 8012518:	1880      	adds	r0, r0, r2
 801251a:	f8c7 0b90 	str.w	r0, [r7, #2960]	; 0xb90
 801251e:	4628      	mov	r0, r5
 8012520:	eb43 0000 	adc.w	r0, r3, r0
 8012524:	f8c7 0b94 	str.w	r0, [r7, #2964]	; 0xb94
 8012528:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 801252c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012530:	e9c1 3400 	strd	r3, r4, [r1]
 8012534:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	3378      	adds	r3, #120	; 0x78
 801253c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012540:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	3318      	adds	r3, #24
 8012548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801254c:	ea80 0402 	eor.w	r4, r0, r2
 8012550:	f8c7 4b88 	str.w	r4, [r7, #2952]	; 0xb88
 8012554:	404b      	eors	r3, r1
 8012556:	f8c7 3b8c 	str.w	r3, [r7, #2956]	; 0xb8c
 801255a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8012564:	2220      	movs	r2, #32
 8012566:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 801256a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801256e:	f7f5 ffe7 	bl	8008540 <rotr64>
 8012572:	4602      	mov	r2, r0
 8012574:	460b      	mov	r3, r1
 8012576:	e9c4 2300 	strd	r2, r3, [r4]
 801257a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	3358      	adds	r3, #88	; 0x58
 8012582:	e9d3 4500 	ldrd	r4, r5, [r3]
 8012586:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	3378      	adds	r3, #120	; 0x78
 801258e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012592:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8012596:	6809      	ldr	r1, [r1, #0]
 8012598:	3158      	adds	r1, #88	; 0x58
 801259a:	18a0      	adds	r0, r4, r2
 801259c:	f8c7 0b80 	str.w	r0, [r7, #2944]	; 0xb80
 80125a0:	eb45 0303 	adc.w	r3, r5, r3
 80125a4:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 80125a8:	f507 6338 	add.w	r3, r7, #2944	; 0xb80
 80125ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80125b0:	e9c1 3400 	strd	r3, r4, [r1]
 80125b4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	3338      	adds	r3, #56	; 0x38
 80125bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80125c0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	3358      	adds	r3, #88	; 0x58
 80125c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125cc:	ea80 0402 	eor.w	r4, r0, r2
 80125d0:	f8c7 4b78 	str.w	r4, [r7, #2936]	; 0xb78
 80125d4:	404b      	eors	r3, r1
 80125d6:	f8c7 3b7c 	str.w	r3, [r7, #2940]	; 0xb7c
 80125da:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80125e4:	2218      	movs	r2, #24
 80125e6:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80125ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80125ee:	f7f5 ffa7 	bl	8008540 <rotr64>
 80125f2:	4602      	mov	r2, r0
 80125f4:	460b      	mov	r3, r1
 80125f6:	e9c4 2300 	strd	r2, r3, [r4]
 80125fa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	3318      	adds	r3, #24
 8012602:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012606:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	3338      	adds	r3, #56	; 0x38
 801260e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012612:	1884      	adds	r4, r0, r2
 8012614:	f8c7 4b70 	str.w	r4, [r7, #2928]	; 0xb70
 8012618:	eb41 0303 	adc.w	r3, r1, r3
 801261c:	f8c7 3b74 	str.w	r3, [r7, #2932]	; 0xb74
 8012620:	2309      	movs	r3, #9
 8012622:	00da      	lsls	r2, r3, #3
 8012624:	f641 6324 	movw	r3, #7716	; 0x1e24
 8012628:	443b      	add	r3, r7
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	4413      	add	r3, r2
 801262e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012632:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8012636:	6809      	ldr	r1, [r1, #0]
 8012638:	3118      	adds	r1, #24
 801263a:	f507 6037 	add.w	r0, r7, #2928	; 0xb70
 801263e:	e9d0 4500 	ldrd	r4, r5, [r0]
 8012642:	4620      	mov	r0, r4
 8012644:	1880      	adds	r0, r0, r2
 8012646:	f8c7 0b68 	str.w	r0, [r7, #2920]	; 0xb68
 801264a:	4628      	mov	r0, r5
 801264c:	eb43 0000 	adc.w	r0, r3, r0
 8012650:	f8c7 0b6c 	str.w	r0, [r7, #2924]	; 0xb6c
 8012654:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 8012658:	e9d3 3400 	ldrd	r3, r4, [r3]
 801265c:	e9c1 3400 	strd	r3, r4, [r1]
 8012660:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	3378      	adds	r3, #120	; 0x78
 8012668:	e9d3 0100 	ldrd	r0, r1, [r3]
 801266c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	3318      	adds	r3, #24
 8012674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012678:	ea80 0402 	eor.w	r4, r0, r2
 801267c:	f8c7 4b60 	str.w	r4, [r7, #2912]	; 0xb60
 8012680:	404b      	eors	r3, r1
 8012682:	f8c7 3b64 	str.w	r3, [r7, #2916]	; 0xb64
 8012686:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8012690:	2210      	movs	r2, #16
 8012692:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8012696:	e9d3 0100 	ldrd	r0, r1, [r3]
 801269a:	f7f5 ff51 	bl	8008540 <rotr64>
 801269e:	4602      	mov	r2, r0
 80126a0:	460b      	mov	r3, r1
 80126a2:	e9c4 2300 	strd	r2, r3, [r4]
 80126a6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	3358      	adds	r3, #88	; 0x58
 80126ae:	e9d3 4500 	ldrd	r4, r5, [r3]
 80126b2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	3378      	adds	r3, #120	; 0x78
 80126ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126be:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80126c2:	6809      	ldr	r1, [r1, #0]
 80126c4:	3158      	adds	r1, #88	; 0x58
 80126c6:	18a0      	adds	r0, r4, r2
 80126c8:	f8c7 0b58 	str.w	r0, [r7, #2904]	; 0xb58
 80126cc:	eb45 0303 	adc.w	r3, r5, r3
 80126d0:	f8c7 3b5c 	str.w	r3, [r7, #2908]	; 0xb5c
 80126d4:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 80126d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80126dc:	e9c1 3400 	strd	r3, r4, [r1]
 80126e0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	3338      	adds	r3, #56	; 0x38
 80126e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80126ec:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	3358      	adds	r3, #88	; 0x58
 80126f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126f8:	ea80 0402 	eor.w	r4, r0, r2
 80126fc:	f8c7 4b50 	str.w	r4, [r7, #2896]	; 0xb50
 8012700:	404b      	eors	r3, r1
 8012702:	f8c7 3b54 	str.w	r3, [r7, #2900]	; 0xb54
 8012706:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8012710:	223f      	movs	r2, #63	; 0x3f
 8012712:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8012716:	e9d3 0100 	ldrd	r0, r1, [r3]
 801271a:	f7f5 ff11 	bl	8008540 <rotr64>
 801271e:	4602      	mov	r2, r0
 8012720:	460b      	mov	r3, r1
 8012722:	e9c4 2300 	strd	r2, r3, [r4]
 8012726:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012730:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	3328      	adds	r3, #40	; 0x28
 8012738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801273c:	1884      	adds	r4, r0, r2
 801273e:	f8c7 4b48 	str.w	r4, [r7, #2888]	; 0xb48
 8012742:	eb41 0303 	adc.w	r3, r1, r3
 8012746:	f8c7 3b4c 	str.w	r3, [r7, #2892]	; 0xb4c
 801274a:	2305      	movs	r3, #5
 801274c:	00da      	lsls	r2, r3, #3
 801274e:	f641 6324 	movw	r3, #7716	; 0x1e24
 8012752:	443b      	add	r3, r7
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	4413      	add	r3, r2
 8012758:	e9d3 2300 	ldrd	r2, r3, [r3]
 801275c:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 8012760:	e9d1 4500 	ldrd	r4, r5, [r1]
 8012764:	4621      	mov	r1, r4
 8012766:	1889      	adds	r1, r1, r2
 8012768:	f8c7 1b40 	str.w	r1, [r7, #2880]	; 0xb40
 801276c:	4629      	mov	r1, r5
 801276e:	eb43 0101 	adc.w	r1, r3, r1
 8012772:	f8c7 1b44 	str.w	r1, [r7, #2884]	; 0xb44
 8012776:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	f507 6234 	add.w	r2, r7, #2880	; 0xb40
 8012780:	e9d2 1200 	ldrd	r1, r2, [r2]
 8012784:	e9c3 1200 	strd	r1, r2, [r3]
 8012788:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	3378      	adds	r3, #120	; 0x78
 8012790:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012794:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801279e:	ea80 0402 	eor.w	r4, r0, r2
 80127a2:	f8c7 4b38 	str.w	r4, [r7, #2872]	; 0xb38
 80127a6:	404b      	eors	r3, r1
 80127a8:	f8c7 3b3c 	str.w	r3, [r7, #2876]	; 0xb3c
 80127ac:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80127b6:	2220      	movs	r2, #32
 80127b8:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 80127bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80127c0:	f7f5 febe 	bl	8008540 <rotr64>
 80127c4:	4602      	mov	r2, r0
 80127c6:	460b      	mov	r3, r1
 80127c8:	e9c4 2300 	strd	r2, r3, [r4]
 80127cc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	3350      	adds	r3, #80	; 0x50
 80127d4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80127d8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	3378      	adds	r3, #120	; 0x78
 80127e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127e4:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80127e8:	6809      	ldr	r1, [r1, #0]
 80127ea:	3150      	adds	r1, #80	; 0x50
 80127ec:	18a0      	adds	r0, r4, r2
 80127ee:	f8c7 0b30 	str.w	r0, [r7, #2864]	; 0xb30
 80127f2:	eb45 0303 	adc.w	r3, r5, r3
 80127f6:	f8c7 3b34 	str.w	r3, [r7, #2868]	; 0xb34
 80127fa:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 80127fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012802:	e9c1 3400 	strd	r3, r4, [r1]
 8012806:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	3328      	adds	r3, #40	; 0x28
 801280e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012812:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	3350      	adds	r3, #80	; 0x50
 801281a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801281e:	ea80 0402 	eor.w	r4, r0, r2
 8012822:	f8c7 4b28 	str.w	r4, [r7, #2856]	; 0xb28
 8012826:	404b      	eors	r3, r1
 8012828:	f8c7 3b2c 	str.w	r3, [r7, #2860]	; 0xb2c
 801282c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8012836:	2218      	movs	r2, #24
 8012838:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 801283c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012840:	f7f5 fe7e 	bl	8008540 <rotr64>
 8012844:	4602      	mov	r2, r0
 8012846:	460b      	mov	r3, r1
 8012848:	e9c4 2300 	strd	r2, r3, [r4]
 801284c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012856:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	3328      	adds	r3, #40	; 0x28
 801285e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012862:	1884      	adds	r4, r0, r2
 8012864:	f8c7 4b20 	str.w	r4, [r7, #2848]	; 0xb20
 8012868:	eb41 0303 	adc.w	r3, r1, r3
 801286c:	f8c7 3b24 	str.w	r3, [r7, #2852]	; 0xb24
 8012870:	2300      	movs	r3, #0
 8012872:	00da      	lsls	r2, r3, #3
 8012874:	f641 6324 	movw	r3, #7716	; 0x1e24
 8012878:	443b      	add	r3, r7
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	4413      	add	r3, r2
 801287e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012882:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 8012886:	e9d1 4500 	ldrd	r4, r5, [r1]
 801288a:	4621      	mov	r1, r4
 801288c:	1889      	adds	r1, r1, r2
 801288e:	f8c7 1b18 	str.w	r1, [r7, #2840]	; 0xb18
 8012892:	4629      	mov	r1, r5
 8012894:	eb43 0101 	adc.w	r1, r3, r1
 8012898:	f8c7 1b1c 	str.w	r1, [r7, #2844]	; 0xb1c
 801289c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	f607 3218 	addw	r2, r7, #2840	; 0xb18
 80128a6:	e9d2 1200 	ldrd	r1, r2, [r2]
 80128aa:	e9c3 1200 	strd	r1, r2, [r3]
 80128ae:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	3378      	adds	r3, #120	; 0x78
 80128b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80128ba:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128c4:	ea80 0402 	eor.w	r4, r0, r2
 80128c8:	f8c7 4b10 	str.w	r4, [r7, #2832]	; 0xb10
 80128cc:	404b      	eors	r3, r1
 80128ce:	f8c7 3b14 	str.w	r3, [r7, #2836]	; 0xb14
 80128d2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80128dc:	2210      	movs	r2, #16
 80128de:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 80128e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80128e6:	f7f5 fe2b 	bl	8008540 <rotr64>
 80128ea:	4602      	mov	r2, r0
 80128ec:	460b      	mov	r3, r1
 80128ee:	e9c4 2300 	strd	r2, r3, [r4]
 80128f2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	3350      	adds	r3, #80	; 0x50
 80128fa:	e9d3 4500 	ldrd	r4, r5, [r3]
 80128fe:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	3378      	adds	r3, #120	; 0x78
 8012906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801290a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801290e:	6809      	ldr	r1, [r1, #0]
 8012910:	3150      	adds	r1, #80	; 0x50
 8012912:	18a0      	adds	r0, r4, r2
 8012914:	f8c7 0b08 	str.w	r0, [r7, #2824]	; 0xb08
 8012918:	eb45 0303 	adc.w	r3, r5, r3
 801291c:	f8c7 3b0c 	str.w	r3, [r7, #2828]	; 0xb0c
 8012920:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8012924:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012928:	e9c1 3400 	strd	r3, r4, [r1]
 801292c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	3328      	adds	r3, #40	; 0x28
 8012934:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012938:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	3350      	adds	r3, #80	; 0x50
 8012940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012944:	ea80 0402 	eor.w	r4, r0, r2
 8012948:	f8c7 4b00 	str.w	r4, [r7, #2816]	; 0xb00
 801294c:	404b      	eors	r3, r1
 801294e:	f8c7 3b04 	str.w	r3, [r7, #2820]	; 0xb04
 8012952:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	f103 0428 	add.w	r4, r3, #40	; 0x28
 801295c:	223f      	movs	r2, #63	; 0x3f
 801295e:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8012962:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012966:	f7f5 fdeb 	bl	8008540 <rotr64>
 801296a:	4602      	mov	r2, r0
 801296c:	460b      	mov	r3, r1
 801296e:	e9c4 2300 	strd	r2, r3, [r4]
 8012972:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	3308      	adds	r3, #8
 801297a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801297e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	3330      	adds	r3, #48	; 0x30
 8012986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801298a:	1884      	adds	r4, r0, r2
 801298c:	f8c7 4af8 	str.w	r4, [r7, #2808]	; 0xaf8
 8012990:	eb41 0303 	adc.w	r3, r1, r3
 8012994:	f8c7 3afc 	str.w	r3, [r7, #2812]	; 0xafc
 8012998:	230f      	movs	r3, #15
 801299a:	00da      	lsls	r2, r3, #3
 801299c:	f641 6324 	movw	r3, #7716	; 0x1e24
 80129a0:	443b      	add	r3, r7
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	4413      	add	r3, r2
 80129a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129aa:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80129ae:	6809      	ldr	r1, [r1, #0]
 80129b0:	3108      	adds	r1, #8
 80129b2:	f607 20f8 	addw	r0, r7, #2808	; 0xaf8
 80129b6:	e9d0 4500 	ldrd	r4, r5, [r0]
 80129ba:	4620      	mov	r0, r4
 80129bc:	1880      	adds	r0, r0, r2
 80129be:	f8c7 0af0 	str.w	r0, [r7, #2800]	; 0xaf0
 80129c2:	4628      	mov	r0, r5
 80129c4:	eb43 0000 	adc.w	r0, r3, r0
 80129c8:	f8c7 0af4 	str.w	r0, [r7, #2804]	; 0xaf4
 80129cc:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 80129d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80129d4:	e9c1 3400 	strd	r3, r4, [r1]
 80129d8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	3360      	adds	r3, #96	; 0x60
 80129e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80129e4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	3308      	adds	r3, #8
 80129ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129f0:	ea80 0402 	eor.w	r4, r0, r2
 80129f4:	f8c7 4ae8 	str.w	r4, [r7, #2792]	; 0xae8
 80129f8:	404b      	eors	r3, r1
 80129fa:	f8c7 3aec 	str.w	r3, [r7, #2796]	; 0xaec
 80129fe:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8012a08:	2220      	movs	r2, #32
 8012a0a:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8012a0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012a12:	f7f5 fd95 	bl	8008540 <rotr64>
 8012a16:	4602      	mov	r2, r0
 8012a18:	460b      	mov	r3, r1
 8012a1a:	e9c4 2300 	strd	r2, r3, [r4]
 8012a1e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	3358      	adds	r3, #88	; 0x58
 8012a26:	e9d3 4500 	ldrd	r4, r5, [r3]
 8012a2a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	3360      	adds	r3, #96	; 0x60
 8012a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a36:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8012a3a:	6809      	ldr	r1, [r1, #0]
 8012a3c:	3158      	adds	r1, #88	; 0x58
 8012a3e:	18a0      	adds	r0, r4, r2
 8012a40:	f8c7 0ae0 	str.w	r0, [r7, #2784]	; 0xae0
 8012a44:	eb45 0303 	adc.w	r3, r5, r3
 8012a48:	f8c7 3ae4 	str.w	r3, [r7, #2788]	; 0xae4
 8012a4c:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8012a50:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012a54:	e9c1 3400 	strd	r3, r4, [r1]
 8012a58:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	3330      	adds	r3, #48	; 0x30
 8012a60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012a64:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	3358      	adds	r3, #88	; 0x58
 8012a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a70:	ea80 0402 	eor.w	r4, r0, r2
 8012a74:	f8c7 4ad8 	str.w	r4, [r7, #2776]	; 0xad8
 8012a78:	404b      	eors	r3, r1
 8012a7a:	f8c7 3adc 	str.w	r3, [r7, #2780]	; 0xadc
 8012a7e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8012a88:	2218      	movs	r2, #24
 8012a8a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8012a8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012a92:	f7f5 fd55 	bl	8008540 <rotr64>
 8012a96:	4602      	mov	r2, r0
 8012a98:	460b      	mov	r3, r1
 8012a9a:	e9c4 2300 	strd	r2, r3, [r4]
 8012a9e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	3308      	adds	r3, #8
 8012aa6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012aaa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	3330      	adds	r3, #48	; 0x30
 8012ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ab6:	1884      	adds	r4, r0, r2
 8012ab8:	f8c7 4ad0 	str.w	r4, [r7, #2768]	; 0xad0
 8012abc:	eb41 0303 	adc.w	r3, r1, r3
 8012ac0:	f8c7 3ad4 	str.w	r3, [r7, #2772]	; 0xad4
 8012ac4:	2304      	movs	r3, #4
 8012ac6:	00da      	lsls	r2, r3, #3
 8012ac8:	f641 6324 	movw	r3, #7716	; 0x1e24
 8012acc:	443b      	add	r3, r7
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	4413      	add	r3, r2
 8012ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ad6:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8012ada:	6809      	ldr	r1, [r1, #0]
 8012adc:	3108      	adds	r1, #8
 8012ade:	f507 602d 	add.w	r0, r7, #2768	; 0xad0
 8012ae2:	e9d0 4500 	ldrd	r4, r5, [r0]
 8012ae6:	4620      	mov	r0, r4
 8012ae8:	1880      	adds	r0, r0, r2
 8012aea:	f8c7 0ac8 	str.w	r0, [r7, #2760]	; 0xac8
 8012aee:	4628      	mov	r0, r5
 8012af0:	eb43 0000 	adc.w	r0, r3, r0
 8012af4:	f8c7 0acc 	str.w	r0, [r7, #2764]	; 0xacc
 8012af8:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 8012afc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012b00:	e9c1 3400 	strd	r3, r4, [r1]
 8012b04:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	3360      	adds	r3, #96	; 0x60
 8012b0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012b10:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	3308      	adds	r3, #8
 8012b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b1c:	ea80 0402 	eor.w	r4, r0, r2
 8012b20:	f8c7 4ac0 	str.w	r4, [r7, #2752]	; 0xac0
 8012b24:	404b      	eors	r3, r1
 8012b26:	f8c7 3ac4 	str.w	r3, [r7, #2756]	; 0xac4
 8012b2a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8012b34:	2210      	movs	r2, #16
 8012b36:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8012b3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012b3e:	f7f5 fcff 	bl	8008540 <rotr64>
 8012b42:	4602      	mov	r2, r0
 8012b44:	460b      	mov	r3, r1
 8012b46:	e9c4 2300 	strd	r2, r3, [r4]
 8012b4a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	3358      	adds	r3, #88	; 0x58
 8012b52:	e9d3 4500 	ldrd	r4, r5, [r3]
 8012b56:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	3360      	adds	r3, #96	; 0x60
 8012b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b62:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8012b66:	6809      	ldr	r1, [r1, #0]
 8012b68:	3158      	adds	r1, #88	; 0x58
 8012b6a:	18a0      	adds	r0, r4, r2
 8012b6c:	f8c7 0ab8 	str.w	r0, [r7, #2744]	; 0xab8
 8012b70:	eb45 0303 	adc.w	r3, r5, r3
 8012b74:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
 8012b78:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8012b7c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012b80:	e9c1 3400 	strd	r3, r4, [r1]
 8012b84:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	3330      	adds	r3, #48	; 0x30
 8012b8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012b90:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	3358      	adds	r3, #88	; 0x58
 8012b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b9c:	ea80 0402 	eor.w	r4, r0, r2
 8012ba0:	f8c7 4ab0 	str.w	r4, [r7, #2736]	; 0xab0
 8012ba4:	404b      	eors	r3, r1
 8012ba6:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
 8012baa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8012bb4:	223f      	movs	r2, #63	; 0x3f
 8012bb6:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8012bba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012bbe:	f7f5 fcbf 	bl	8008540 <rotr64>
 8012bc2:	4602      	mov	r2, r0
 8012bc4:	460b      	mov	r3, r1
 8012bc6:	e9c4 2300 	strd	r2, r3, [r4]
 8012bca:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	3310      	adds	r3, #16
 8012bd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012bd6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	3338      	adds	r3, #56	; 0x38
 8012bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012be2:	1884      	adds	r4, r0, r2
 8012be4:	f8c7 4aa8 	str.w	r4, [r7, #2728]	; 0xaa8
 8012be8:	eb41 0303 	adc.w	r3, r1, r3
 8012bec:	f8c7 3aac 	str.w	r3, [r7, #2732]	; 0xaac
 8012bf0:	2308      	movs	r3, #8
 8012bf2:	00da      	lsls	r2, r3, #3
 8012bf4:	f641 6324 	movw	r3, #7716	; 0x1e24
 8012bf8:	443b      	add	r3, r7
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	4413      	add	r3, r2
 8012bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c02:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8012c06:	6809      	ldr	r1, [r1, #0]
 8012c08:	3110      	adds	r1, #16
 8012c0a:	f607 20a8 	addw	r0, r7, #2728	; 0xaa8
 8012c0e:	e9d0 4500 	ldrd	r4, r5, [r0]
 8012c12:	4620      	mov	r0, r4
 8012c14:	1880      	adds	r0, r0, r2
 8012c16:	f8c7 0aa0 	str.w	r0, [r7, #2720]	; 0xaa0
 8012c1a:	4628      	mov	r0, r5
 8012c1c:	eb43 0000 	adc.w	r0, r3, r0
 8012c20:	f8c7 0aa4 	str.w	r0, [r7, #2724]	; 0xaa4
 8012c24:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8012c28:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012c2c:	e9c1 3400 	strd	r3, r4, [r1]
 8012c30:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	3368      	adds	r3, #104	; 0x68
 8012c38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012c3c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	3310      	adds	r3, #16
 8012c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c48:	ea80 0402 	eor.w	r4, r0, r2
 8012c4c:	f8c7 4a98 	str.w	r4, [r7, #2712]	; 0xa98
 8012c50:	404b      	eors	r3, r1
 8012c52:	f8c7 3a9c 	str.w	r3, [r7, #2716]	; 0xa9c
 8012c56:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8012c60:	2220      	movs	r2, #32
 8012c62:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8012c66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012c6a:	f7f5 fc69 	bl	8008540 <rotr64>
 8012c6e:	4602      	mov	r2, r0
 8012c70:	460b      	mov	r3, r1
 8012c72:	e9c4 2300 	strd	r2, r3, [r4]
 8012c76:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	3340      	adds	r3, #64	; 0x40
 8012c7e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8012c82:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	3368      	adds	r3, #104	; 0x68
 8012c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c8e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8012c92:	6809      	ldr	r1, [r1, #0]
 8012c94:	3140      	adds	r1, #64	; 0x40
 8012c96:	18a0      	adds	r0, r4, r2
 8012c98:	f8c7 0a90 	str.w	r0, [r7, #2704]	; 0xa90
 8012c9c:	eb45 0303 	adc.w	r3, r5, r3
 8012ca0:	f8c7 3a94 	str.w	r3, [r7, #2708]	; 0xa94
 8012ca4:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8012ca8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012cac:	e9c1 3400 	strd	r3, r4, [r1]
 8012cb0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	3338      	adds	r3, #56	; 0x38
 8012cb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012cbc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	3340      	adds	r3, #64	; 0x40
 8012cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cc8:	ea80 0402 	eor.w	r4, r0, r2
 8012ccc:	f8c7 4a88 	str.w	r4, [r7, #2696]	; 0xa88
 8012cd0:	404b      	eors	r3, r1
 8012cd2:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c
 8012cd6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8012ce0:	2218      	movs	r2, #24
 8012ce2:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8012ce6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012cea:	f7f5 fc29 	bl	8008540 <rotr64>
 8012cee:	4602      	mov	r2, r0
 8012cf0:	460b      	mov	r3, r1
 8012cf2:	e9c4 2300 	strd	r2, r3, [r4]
 8012cf6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	3310      	adds	r3, #16
 8012cfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012d02:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	3338      	adds	r3, #56	; 0x38
 8012d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d0e:	1884      	adds	r4, r0, r2
 8012d10:	f8c7 4a80 	str.w	r4, [r7, #2688]	; 0xa80
 8012d14:	eb41 0303 	adc.w	r3, r1, r3
 8012d18:	f8c7 3a84 	str.w	r3, [r7, #2692]	; 0xa84
 8012d1c:	2306      	movs	r3, #6
 8012d1e:	00da      	lsls	r2, r3, #3
 8012d20:	f641 6324 	movw	r3, #7716	; 0x1e24
 8012d24:	443b      	add	r3, r7
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	4413      	add	r3, r2
 8012d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d2e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8012d32:	6809      	ldr	r1, [r1, #0]
 8012d34:	3110      	adds	r1, #16
 8012d36:	f507 6028 	add.w	r0, r7, #2688	; 0xa80
 8012d3a:	e9d0 4500 	ldrd	r4, r5, [r0]
 8012d3e:	4620      	mov	r0, r4
 8012d40:	1880      	adds	r0, r0, r2
 8012d42:	f8c7 0a78 	str.w	r0, [r7, #2680]	; 0xa78
 8012d46:	4628      	mov	r0, r5
 8012d48:	eb43 0000 	adc.w	r0, r3, r0
 8012d4c:	f8c7 0a7c 	str.w	r0, [r7, #2684]	; 0xa7c
 8012d50:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8012d54:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012d58:	e9c1 3400 	strd	r3, r4, [r1]
 8012d5c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	3368      	adds	r3, #104	; 0x68
 8012d64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012d68:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	3310      	adds	r3, #16
 8012d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d74:	ea80 0402 	eor.w	r4, r0, r2
 8012d78:	f8c7 4a70 	str.w	r4, [r7, #2672]	; 0xa70
 8012d7c:	404b      	eors	r3, r1
 8012d7e:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
 8012d82:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8012d8c:	2210      	movs	r2, #16
 8012d8e:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8012d92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012d96:	f7f5 fbd3 	bl	8008540 <rotr64>
 8012d9a:	4602      	mov	r2, r0
 8012d9c:	460b      	mov	r3, r1
 8012d9e:	e9c4 2300 	strd	r2, r3, [r4]
 8012da2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	3340      	adds	r3, #64	; 0x40
 8012daa:	e9d3 4500 	ldrd	r4, r5, [r3]
 8012dae:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	3368      	adds	r3, #104	; 0x68
 8012db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dba:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8012dbe:	6809      	ldr	r1, [r1, #0]
 8012dc0:	3140      	adds	r1, #64	; 0x40
 8012dc2:	18a0      	adds	r0, r4, r2
 8012dc4:	f8c7 0a68 	str.w	r0, [r7, #2664]	; 0xa68
 8012dc8:	eb45 0303 	adc.w	r3, r5, r3
 8012dcc:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
 8012dd0:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8012dd4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012dd8:	e9c1 3400 	strd	r3, r4, [r1]
 8012ddc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	3338      	adds	r3, #56	; 0x38
 8012de4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012de8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	3340      	adds	r3, #64	; 0x40
 8012df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012df4:	ea80 0402 	eor.w	r4, r0, r2
 8012df8:	f8c7 4a60 	str.w	r4, [r7, #2656]	; 0xa60
 8012dfc:	404b      	eors	r3, r1
 8012dfe:	f8c7 3a64 	str.w	r3, [r7, #2660]	; 0xa64
 8012e02:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8012e0c:	223f      	movs	r2, #63	; 0x3f
 8012e0e:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8012e12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012e16:	f7f5 fb93 	bl	8008540 <rotr64>
 8012e1a:	4602      	mov	r2, r0
 8012e1c:	460b      	mov	r3, r1
 8012e1e:	e9c4 2300 	strd	r2, r3, [r4]
 8012e22:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	3318      	adds	r3, #24
 8012e2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012e2e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	3320      	adds	r3, #32
 8012e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e3a:	1884      	adds	r4, r0, r2
 8012e3c:	f8c7 4a58 	str.w	r4, [r7, #2648]	; 0xa58
 8012e40:	eb41 0303 	adc.w	r3, r1, r3
 8012e44:	f8c7 3a5c 	str.w	r3, [r7, #2652]	; 0xa5c
 8012e48:	2302      	movs	r3, #2
 8012e4a:	00da      	lsls	r2, r3, #3
 8012e4c:	f641 6324 	movw	r3, #7716	; 0x1e24
 8012e50:	443b      	add	r3, r7
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	4413      	add	r3, r2
 8012e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e5a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8012e5e:	6809      	ldr	r1, [r1, #0]
 8012e60:	3118      	adds	r1, #24
 8012e62:	f607 2058 	addw	r0, r7, #2648	; 0xa58
 8012e66:	e9d0 4500 	ldrd	r4, r5, [r0]
 8012e6a:	4620      	mov	r0, r4
 8012e6c:	1880      	adds	r0, r0, r2
 8012e6e:	f8c7 0a50 	str.w	r0, [r7, #2640]	; 0xa50
 8012e72:	4628      	mov	r0, r5
 8012e74:	eb43 0000 	adc.w	r0, r3, r0
 8012e78:	f8c7 0a54 	str.w	r0, [r7, #2644]	; 0xa54
 8012e7c:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8012e80:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012e84:	e9c1 3400 	strd	r3, r4, [r1]
 8012e88:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	3370      	adds	r3, #112	; 0x70
 8012e90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012e94:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	3318      	adds	r3, #24
 8012e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ea0:	ea80 0402 	eor.w	r4, r0, r2
 8012ea4:	f8c7 4a48 	str.w	r4, [r7, #2632]	; 0xa48
 8012ea8:	404b      	eors	r3, r1
 8012eaa:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
 8012eae:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8012eb8:	2220      	movs	r2, #32
 8012eba:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8012ebe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012ec2:	f7f5 fb3d 	bl	8008540 <rotr64>
 8012ec6:	4602      	mov	r2, r0
 8012ec8:	460b      	mov	r3, r1
 8012eca:	e9c4 2300 	strd	r2, r3, [r4]
 8012ece:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	3348      	adds	r3, #72	; 0x48
 8012ed6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8012eda:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	3370      	adds	r3, #112	; 0x70
 8012ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ee6:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8012eea:	6809      	ldr	r1, [r1, #0]
 8012eec:	3148      	adds	r1, #72	; 0x48
 8012eee:	18a0      	adds	r0, r4, r2
 8012ef0:	f8c7 0a40 	str.w	r0, [r7, #2624]	; 0xa40
 8012ef4:	eb45 0303 	adc.w	r3, r5, r3
 8012ef8:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
 8012efc:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8012f00:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012f04:	e9c1 3400 	strd	r3, r4, [r1]
 8012f08:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	3320      	adds	r3, #32
 8012f10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012f14:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	3348      	adds	r3, #72	; 0x48
 8012f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f20:	ea80 0402 	eor.w	r4, r0, r2
 8012f24:	f8c7 4a38 	str.w	r4, [r7, #2616]	; 0xa38
 8012f28:	404b      	eors	r3, r1
 8012f2a:	f8c7 3a3c 	str.w	r3, [r7, #2620]	; 0xa3c
 8012f2e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	f103 0420 	add.w	r4, r3, #32
 8012f38:	2218      	movs	r2, #24
 8012f3a:	f607 2338 	addw	r3, r7, #2616	; 0xa38
 8012f3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012f42:	f7f5 fafd 	bl	8008540 <rotr64>
 8012f46:	4602      	mov	r2, r0
 8012f48:	460b      	mov	r3, r1
 8012f4a:	e9c4 2300 	strd	r2, r3, [r4]
 8012f4e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	3318      	adds	r3, #24
 8012f56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012f5a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	3320      	adds	r3, #32
 8012f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f66:	1884      	adds	r4, r0, r2
 8012f68:	f8c7 4a30 	str.w	r4, [r7, #2608]	; 0xa30
 8012f6c:	eb41 0303 	adc.w	r3, r1, r3
 8012f70:	f8c7 3a34 	str.w	r3, [r7, #2612]	; 0xa34
 8012f74:	230a      	movs	r3, #10
 8012f76:	00da      	lsls	r2, r3, #3
 8012f78:	f641 6324 	movw	r3, #7716	; 0x1e24
 8012f7c:	443b      	add	r3, r7
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	4413      	add	r3, r2
 8012f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f86:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8012f8a:	6809      	ldr	r1, [r1, #0]
 8012f8c:	3118      	adds	r1, #24
 8012f8e:	f507 6023 	add.w	r0, r7, #2608	; 0xa30
 8012f92:	e9d0 4500 	ldrd	r4, r5, [r0]
 8012f96:	4620      	mov	r0, r4
 8012f98:	1880      	adds	r0, r0, r2
 8012f9a:	f8c7 0a28 	str.w	r0, [r7, #2600]	; 0xa28
 8012f9e:	4628      	mov	r0, r5
 8012fa0:	eb43 0000 	adc.w	r0, r3, r0
 8012fa4:	f8c7 0a2c 	str.w	r0, [r7, #2604]	; 0xa2c
 8012fa8:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 8012fac:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012fb0:	e9c1 3400 	strd	r3, r4, [r1]
 8012fb4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	3370      	adds	r3, #112	; 0x70
 8012fbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012fc0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	3318      	adds	r3, #24
 8012fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fcc:	ea80 0402 	eor.w	r4, r0, r2
 8012fd0:	f8c7 4a20 	str.w	r4, [r7, #2592]	; 0xa20
 8012fd4:	404b      	eors	r3, r1
 8012fd6:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
 8012fda:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8012fe4:	2210      	movs	r2, #16
 8012fe6:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 8012fea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012fee:	f7f5 faa7 	bl	8008540 <rotr64>
 8012ff2:	4602      	mov	r2, r0
 8012ff4:	460b      	mov	r3, r1
 8012ff6:	e9c4 2300 	strd	r2, r3, [r4]
 8012ffa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	3348      	adds	r3, #72	; 0x48
 8013002:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013006:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	3370      	adds	r3, #112	; 0x70
 801300e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013012:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8013016:	6809      	ldr	r1, [r1, #0]
 8013018:	3148      	adds	r1, #72	; 0x48
 801301a:	18a0      	adds	r0, r4, r2
 801301c:	f8c7 0a18 	str.w	r0, [r7, #2584]	; 0xa18
 8013020:	eb45 0303 	adc.w	r3, r5, r3
 8013024:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
 8013028:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 801302c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013030:	e9c1 3400 	strd	r3, r4, [r1]
 8013034:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	3320      	adds	r3, #32
 801303c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013040:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	3348      	adds	r3, #72	; 0x48
 8013048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801304c:	ea80 0402 	eor.w	r4, r0, r2
 8013050:	f8c7 4a10 	str.w	r4, [r7, #2576]	; 0xa10
 8013054:	404b      	eors	r3, r1
 8013056:	f8c7 3a14 	str.w	r3, [r7, #2580]	; 0xa14
 801305a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	f103 0420 	add.w	r4, r3, #32
 8013064:	223f      	movs	r2, #63	; 0x3f
 8013066:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 801306a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801306e:	f7f5 fa67 	bl	8008540 <rotr64>
 8013072:	4602      	mov	r2, r0
 8013074:	460b      	mov	r3, r1
 8013076:	e9c4 2300 	strd	r2, r3, [r4]
  ROUND( 8 );
 801307a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013084:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	3320      	adds	r3, #32
 801308c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013090:	1884      	adds	r4, r0, r2
 8013092:	f8c7 4a08 	str.w	r4, [r7, #2568]	; 0xa08
 8013096:	eb41 0303 	adc.w	r3, r1, r3
 801309a:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
 801309e:	2306      	movs	r3, #6
 80130a0:	00da      	lsls	r2, r3, #3
 80130a2:	f641 6324 	movw	r3, #7716	; 0x1e24
 80130a6:	443b      	add	r3, r7
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	4413      	add	r3, r2
 80130ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130b0:	f607 2108 	addw	r1, r7, #2568	; 0xa08
 80130b4:	e9d1 4500 	ldrd	r4, r5, [r1]
 80130b8:	4621      	mov	r1, r4
 80130ba:	1889      	adds	r1, r1, r2
 80130bc:	f8c7 1a00 	str.w	r1, [r7, #2560]	; 0xa00
 80130c0:	4629      	mov	r1, r5
 80130c2:	eb43 0101 	adc.w	r1, r3, r1
 80130c6:	f8c7 1a04 	str.w	r1, [r7, #2564]	; 0xa04
 80130ca:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 80130d4:	e9d2 1200 	ldrd	r1, r2, [r2]
 80130d8:	e9c3 1200 	strd	r1, r2, [r3]
 80130dc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	3360      	adds	r3, #96	; 0x60
 80130e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80130e8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130f2:	ea80 0402 	eor.w	r4, r0, r2
 80130f6:	f8c7 49f8 	str.w	r4, [r7, #2552]	; 0x9f8
 80130fa:	404b      	eors	r3, r1
 80130fc:	f8c7 39fc 	str.w	r3, [r7, #2556]	; 0x9fc
 8013100:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	f103 0460 	add.w	r4, r3, #96	; 0x60
 801310a:	2220      	movs	r2, #32
 801310c:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8013110:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013114:	f7f5 fa14 	bl	8008540 <rotr64>
 8013118:	4602      	mov	r2, r0
 801311a:	460b      	mov	r3, r1
 801311c:	e9c4 2300 	strd	r2, r3, [r4]
 8013120:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	3340      	adds	r3, #64	; 0x40
 8013128:	e9d3 4500 	ldrd	r4, r5, [r3]
 801312c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	3360      	adds	r3, #96	; 0x60
 8013134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013138:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801313c:	6809      	ldr	r1, [r1, #0]
 801313e:	3140      	adds	r1, #64	; 0x40
 8013140:	18a0      	adds	r0, r4, r2
 8013142:	f8c7 09f0 	str.w	r0, [r7, #2544]	; 0x9f0
 8013146:	eb45 0303 	adc.w	r3, r5, r3
 801314a:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4
 801314e:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8013152:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013156:	e9c1 3400 	strd	r3, r4, [r1]
 801315a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	3320      	adds	r3, #32
 8013162:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013166:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	3340      	adds	r3, #64	; 0x40
 801316e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013172:	ea80 0402 	eor.w	r4, r0, r2
 8013176:	f8c7 49e8 	str.w	r4, [r7, #2536]	; 0x9e8
 801317a:	404b      	eors	r3, r1
 801317c:	f8c7 39ec 	str.w	r3, [r7, #2540]	; 0x9ec
 8013180:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	f103 0420 	add.w	r4, r3, #32
 801318a:	2218      	movs	r2, #24
 801318c:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 8013190:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013194:	f7f5 f9d4 	bl	8008540 <rotr64>
 8013198:	4602      	mov	r2, r0
 801319a:	460b      	mov	r3, r1
 801319c:	e9c4 2300 	strd	r2, r3, [r4]
 80131a0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80131aa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	3320      	adds	r3, #32
 80131b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131b6:	1884      	adds	r4, r0, r2
 80131b8:	f8c7 49e0 	str.w	r4, [r7, #2528]	; 0x9e0
 80131bc:	eb41 0303 	adc.w	r3, r1, r3
 80131c0:	f8c7 39e4 	str.w	r3, [r7, #2532]	; 0x9e4
 80131c4:	230f      	movs	r3, #15
 80131c6:	00da      	lsls	r2, r3, #3
 80131c8:	f641 6324 	movw	r3, #7716	; 0x1e24
 80131cc:	443b      	add	r3, r7
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	4413      	add	r3, r2
 80131d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131d6:	f507 611e 	add.w	r1, r7, #2528	; 0x9e0
 80131da:	e9d1 4500 	ldrd	r4, r5, [r1]
 80131de:	4621      	mov	r1, r4
 80131e0:	1889      	adds	r1, r1, r2
 80131e2:	f8c7 19d8 	str.w	r1, [r7, #2520]	; 0x9d8
 80131e6:	4629      	mov	r1, r5
 80131e8:	eb43 0101 	adc.w	r1, r3, r1
 80131ec:	f8c7 19dc 	str.w	r1, [r7, #2524]	; 0x9dc
 80131f0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	f607 12d8 	addw	r2, r7, #2520	; 0x9d8
 80131fa:	e9d2 1200 	ldrd	r1, r2, [r2]
 80131fe:	e9c3 1200 	strd	r1, r2, [r3]
 8013202:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	3360      	adds	r3, #96	; 0x60
 801320a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801320e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013218:	ea80 0402 	eor.w	r4, r0, r2
 801321c:	f8c7 49d0 	str.w	r4, [r7, #2512]	; 0x9d0
 8013220:	404b      	eors	r3, r1
 8013222:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
 8013226:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8013230:	2210      	movs	r2, #16
 8013232:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8013236:	e9d3 0100 	ldrd	r0, r1, [r3]
 801323a:	f7f5 f981 	bl	8008540 <rotr64>
 801323e:	4602      	mov	r2, r0
 8013240:	460b      	mov	r3, r1
 8013242:	e9c4 2300 	strd	r2, r3, [r4]
 8013246:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	3340      	adds	r3, #64	; 0x40
 801324e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013252:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	3360      	adds	r3, #96	; 0x60
 801325a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801325e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8013262:	6809      	ldr	r1, [r1, #0]
 8013264:	3140      	adds	r1, #64	; 0x40
 8013266:	18a0      	adds	r0, r4, r2
 8013268:	f8c7 09c8 	str.w	r0, [r7, #2504]	; 0x9c8
 801326c:	eb45 0303 	adc.w	r3, r5, r3
 8013270:	f8c7 39cc 	str.w	r3, [r7, #2508]	; 0x9cc
 8013274:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 8013278:	e9d3 3400 	ldrd	r3, r4, [r3]
 801327c:	e9c1 3400 	strd	r3, r4, [r1]
 8013280:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	3320      	adds	r3, #32
 8013288:	e9d3 0100 	ldrd	r0, r1, [r3]
 801328c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	3340      	adds	r3, #64	; 0x40
 8013294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013298:	ea80 0402 	eor.w	r4, r0, r2
 801329c:	f8c7 49c0 	str.w	r4, [r7, #2496]	; 0x9c0
 80132a0:	404b      	eors	r3, r1
 80132a2:	f8c7 39c4 	str.w	r3, [r7, #2500]	; 0x9c4
 80132a6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	f103 0420 	add.w	r4, r3, #32
 80132b0:	223f      	movs	r2, #63	; 0x3f
 80132b2:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 80132b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80132ba:	f7f5 f941 	bl	8008540 <rotr64>
 80132be:	4602      	mov	r2, r0
 80132c0:	460b      	mov	r3, r1
 80132c2:	e9c4 2300 	strd	r2, r3, [r4]
 80132c6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	3308      	adds	r3, #8
 80132ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80132d2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	3328      	adds	r3, #40	; 0x28
 80132da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132de:	1884      	adds	r4, r0, r2
 80132e0:	f8c7 49b8 	str.w	r4, [r7, #2488]	; 0x9b8
 80132e4:	eb41 0303 	adc.w	r3, r1, r3
 80132e8:	f8c7 39bc 	str.w	r3, [r7, #2492]	; 0x9bc
 80132ec:	230e      	movs	r3, #14
 80132ee:	00da      	lsls	r2, r3, #3
 80132f0:	f641 6324 	movw	r3, #7716	; 0x1e24
 80132f4:	443b      	add	r3, r7
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	4413      	add	r3, r2
 80132fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132fe:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8013302:	6809      	ldr	r1, [r1, #0]
 8013304:	3108      	adds	r1, #8
 8013306:	f607 10b8 	addw	r0, r7, #2488	; 0x9b8
 801330a:	e9d0 4500 	ldrd	r4, r5, [r0]
 801330e:	4620      	mov	r0, r4
 8013310:	1880      	adds	r0, r0, r2
 8013312:	f8c7 09b0 	str.w	r0, [r7, #2480]	; 0x9b0
 8013316:	4628      	mov	r0, r5
 8013318:	eb43 0000 	adc.w	r0, r3, r0
 801331c:	f8c7 09b4 	str.w	r0, [r7, #2484]	; 0x9b4
 8013320:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8013324:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013328:	e9c1 3400 	strd	r3, r4, [r1]
 801332c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	3368      	adds	r3, #104	; 0x68
 8013334:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013338:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	3308      	adds	r3, #8
 8013340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013344:	ea80 0402 	eor.w	r4, r0, r2
 8013348:	f8c7 49a8 	str.w	r4, [r7, #2472]	; 0x9a8
 801334c:	404b      	eors	r3, r1
 801334e:	f8c7 39ac 	str.w	r3, [r7, #2476]	; 0x9ac
 8013352:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	f103 0468 	add.w	r4, r3, #104	; 0x68
 801335c:	2220      	movs	r2, #32
 801335e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8013362:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013366:	f7f5 f8eb 	bl	8008540 <rotr64>
 801336a:	4602      	mov	r2, r0
 801336c:	460b      	mov	r3, r1
 801336e:	e9c4 2300 	strd	r2, r3, [r4]
 8013372:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	3348      	adds	r3, #72	; 0x48
 801337a:	e9d3 4500 	ldrd	r4, r5, [r3]
 801337e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	3368      	adds	r3, #104	; 0x68
 8013386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801338a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801338e:	6809      	ldr	r1, [r1, #0]
 8013390:	3148      	adds	r1, #72	; 0x48
 8013392:	18a0      	adds	r0, r4, r2
 8013394:	f8c7 09a0 	str.w	r0, [r7, #2464]	; 0x9a0
 8013398:	eb45 0303 	adc.w	r3, r5, r3
 801339c:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 80133a0:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 80133a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80133a8:	e9c1 3400 	strd	r3, r4, [r1]
 80133ac:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	3328      	adds	r3, #40	; 0x28
 80133b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80133b8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	3348      	adds	r3, #72	; 0x48
 80133c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133c4:	ea80 0402 	eor.w	r4, r0, r2
 80133c8:	f8c7 4998 	str.w	r4, [r7, #2456]	; 0x998
 80133cc:	404b      	eors	r3, r1
 80133ce:	f8c7 399c 	str.w	r3, [r7, #2460]	; 0x99c
 80133d2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80133dc:	2218      	movs	r2, #24
 80133de:	f607 1398 	addw	r3, r7, #2456	; 0x998
 80133e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80133e6:	f7f5 f8ab 	bl	8008540 <rotr64>
 80133ea:	4602      	mov	r2, r0
 80133ec:	460b      	mov	r3, r1
 80133ee:	e9c4 2300 	strd	r2, r3, [r4]
 80133f2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	3308      	adds	r3, #8
 80133fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80133fe:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	3328      	adds	r3, #40	; 0x28
 8013406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801340a:	1884      	adds	r4, r0, r2
 801340c:	f8c7 4990 	str.w	r4, [r7, #2448]	; 0x990
 8013410:	eb41 0303 	adc.w	r3, r1, r3
 8013414:	f8c7 3994 	str.w	r3, [r7, #2452]	; 0x994
 8013418:	2309      	movs	r3, #9
 801341a:	00da      	lsls	r2, r3, #3
 801341c:	f641 6324 	movw	r3, #7716	; 0x1e24
 8013420:	443b      	add	r3, r7
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	4413      	add	r3, r2
 8013426:	e9d3 2300 	ldrd	r2, r3, [r3]
 801342a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801342e:	6809      	ldr	r1, [r1, #0]
 8013430:	3108      	adds	r1, #8
 8013432:	f507 6019 	add.w	r0, r7, #2448	; 0x990
 8013436:	e9d0 4500 	ldrd	r4, r5, [r0]
 801343a:	4620      	mov	r0, r4
 801343c:	1880      	adds	r0, r0, r2
 801343e:	f8c7 0988 	str.w	r0, [r7, #2440]	; 0x988
 8013442:	4628      	mov	r0, r5
 8013444:	eb43 0000 	adc.w	r0, r3, r0
 8013448:	f8c7 098c 	str.w	r0, [r7, #2444]	; 0x98c
 801344c:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8013450:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013454:	e9c1 3400 	strd	r3, r4, [r1]
 8013458:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	3368      	adds	r3, #104	; 0x68
 8013460:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013464:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	3308      	adds	r3, #8
 801346c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013470:	ea80 0402 	eor.w	r4, r0, r2
 8013474:	f8c7 4980 	str.w	r4, [r7, #2432]	; 0x980
 8013478:	404b      	eors	r3, r1
 801347a:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984
 801347e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8013488:	2210      	movs	r2, #16
 801348a:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 801348e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013492:	f7f5 f855 	bl	8008540 <rotr64>
 8013496:	4602      	mov	r2, r0
 8013498:	460b      	mov	r3, r1
 801349a:	e9c4 2300 	strd	r2, r3, [r4]
 801349e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	3348      	adds	r3, #72	; 0x48
 80134a6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80134aa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	3368      	adds	r3, #104	; 0x68
 80134b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134b6:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80134ba:	6809      	ldr	r1, [r1, #0]
 80134bc:	3148      	adds	r1, #72	; 0x48
 80134be:	18a0      	adds	r0, r4, r2
 80134c0:	f8c7 0978 	str.w	r0, [r7, #2424]	; 0x978
 80134c4:	eb45 0303 	adc.w	r3, r5, r3
 80134c8:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
 80134cc:	f607 1378 	addw	r3, r7, #2424	; 0x978
 80134d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80134d4:	e9c1 3400 	strd	r3, r4, [r1]
 80134d8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	3328      	adds	r3, #40	; 0x28
 80134e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80134e4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	3348      	adds	r3, #72	; 0x48
 80134ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134f0:	ea80 0402 	eor.w	r4, r0, r2
 80134f4:	f8c7 4970 	str.w	r4, [r7, #2416]	; 0x970
 80134f8:	404b      	eors	r3, r1
 80134fa:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
 80134fe:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8013508:	223f      	movs	r2, #63	; 0x3f
 801350a:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 801350e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013512:	f7f5 f815 	bl	8008540 <rotr64>
 8013516:	4602      	mov	r2, r0
 8013518:	460b      	mov	r3, r1
 801351a:	e9c4 2300 	strd	r2, r3, [r4]
 801351e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	3310      	adds	r3, #16
 8013526:	e9d3 0100 	ldrd	r0, r1, [r3]
 801352a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	3330      	adds	r3, #48	; 0x30
 8013532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013536:	1884      	adds	r4, r0, r2
 8013538:	f8c7 4968 	str.w	r4, [r7, #2408]	; 0x968
 801353c:	eb41 0303 	adc.w	r3, r1, r3
 8013540:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 8013544:	230b      	movs	r3, #11
 8013546:	00da      	lsls	r2, r3, #3
 8013548:	f641 6324 	movw	r3, #7716	; 0x1e24
 801354c:	443b      	add	r3, r7
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	4413      	add	r3, r2
 8013552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013556:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801355a:	6809      	ldr	r1, [r1, #0]
 801355c:	3110      	adds	r1, #16
 801355e:	f607 1068 	addw	r0, r7, #2408	; 0x968
 8013562:	e9d0 4500 	ldrd	r4, r5, [r0]
 8013566:	4620      	mov	r0, r4
 8013568:	1880      	adds	r0, r0, r2
 801356a:	f8c7 0960 	str.w	r0, [r7, #2400]	; 0x960
 801356e:	4628      	mov	r0, r5
 8013570:	eb43 0000 	adc.w	r0, r3, r0
 8013574:	f8c7 0964 	str.w	r0, [r7, #2404]	; 0x964
 8013578:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 801357c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013580:	e9c1 3400 	strd	r3, r4, [r1]
 8013584:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	3370      	adds	r3, #112	; 0x70
 801358c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013590:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	3310      	adds	r3, #16
 8013598:	e9d3 2300 	ldrd	r2, r3, [r3]
 801359c:	ea80 0402 	eor.w	r4, r0, r2
 80135a0:	f8c7 4958 	str.w	r4, [r7, #2392]	; 0x958
 80135a4:	404b      	eors	r3, r1
 80135a6:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
 80135aa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80135b4:	2220      	movs	r2, #32
 80135b6:	f607 1358 	addw	r3, r7, #2392	; 0x958
 80135ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80135be:	f7f4 ffbf 	bl	8008540 <rotr64>
 80135c2:	4602      	mov	r2, r0
 80135c4:	460b      	mov	r3, r1
 80135c6:	e9c4 2300 	strd	r2, r3, [r4]
 80135ca:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	3350      	adds	r3, #80	; 0x50
 80135d2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80135d6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	3370      	adds	r3, #112	; 0x70
 80135de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135e2:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80135e6:	6809      	ldr	r1, [r1, #0]
 80135e8:	3150      	adds	r1, #80	; 0x50
 80135ea:	18a0      	adds	r0, r4, r2
 80135ec:	f8c7 0950 	str.w	r0, [r7, #2384]	; 0x950
 80135f0:	eb45 0303 	adc.w	r3, r5, r3
 80135f4:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 80135f8:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 80135fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013600:	e9c1 3400 	strd	r3, r4, [r1]
 8013604:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	3330      	adds	r3, #48	; 0x30
 801360c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013610:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	3350      	adds	r3, #80	; 0x50
 8013618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801361c:	ea80 0402 	eor.w	r4, r0, r2
 8013620:	f8c7 4948 	str.w	r4, [r7, #2376]	; 0x948
 8013624:	404b      	eors	r3, r1
 8013626:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
 801362a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8013634:	2218      	movs	r2, #24
 8013636:	f607 1348 	addw	r3, r7, #2376	; 0x948
 801363a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801363e:	f7f4 ff7f 	bl	8008540 <rotr64>
 8013642:	4602      	mov	r2, r0
 8013644:	460b      	mov	r3, r1
 8013646:	e9c4 2300 	strd	r2, r3, [r4]
 801364a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	3310      	adds	r3, #16
 8013652:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013656:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	3330      	adds	r3, #48	; 0x30
 801365e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013662:	1884      	adds	r4, r0, r2
 8013664:	f8c7 4940 	str.w	r4, [r7, #2368]	; 0x940
 8013668:	eb41 0303 	adc.w	r3, r1, r3
 801366c:	f8c7 3944 	str.w	r3, [r7, #2372]	; 0x944
 8013670:	2303      	movs	r3, #3
 8013672:	00da      	lsls	r2, r3, #3
 8013674:	f641 6324 	movw	r3, #7716	; 0x1e24
 8013678:	443b      	add	r3, r7
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	4413      	add	r3, r2
 801367e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013682:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8013686:	6809      	ldr	r1, [r1, #0]
 8013688:	3110      	adds	r1, #16
 801368a:	f507 6014 	add.w	r0, r7, #2368	; 0x940
 801368e:	e9d0 4500 	ldrd	r4, r5, [r0]
 8013692:	4620      	mov	r0, r4
 8013694:	1880      	adds	r0, r0, r2
 8013696:	f8c7 0938 	str.w	r0, [r7, #2360]	; 0x938
 801369a:	4628      	mov	r0, r5
 801369c:	eb43 0000 	adc.w	r0, r3, r0
 80136a0:	f8c7 093c 	str.w	r0, [r7, #2364]	; 0x93c
 80136a4:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80136a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80136ac:	e9c1 3400 	strd	r3, r4, [r1]
 80136b0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	3370      	adds	r3, #112	; 0x70
 80136b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80136bc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	3310      	adds	r3, #16
 80136c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136c8:	ea80 0402 	eor.w	r4, r0, r2
 80136cc:	f8c7 4930 	str.w	r4, [r7, #2352]	; 0x930
 80136d0:	404b      	eors	r3, r1
 80136d2:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
 80136d6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80136e0:	2210      	movs	r2, #16
 80136e2:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 80136e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80136ea:	f7f4 ff29 	bl	8008540 <rotr64>
 80136ee:	4602      	mov	r2, r0
 80136f0:	460b      	mov	r3, r1
 80136f2:	e9c4 2300 	strd	r2, r3, [r4]
 80136f6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	3350      	adds	r3, #80	; 0x50
 80136fe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013702:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	3370      	adds	r3, #112	; 0x70
 801370a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801370e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8013712:	6809      	ldr	r1, [r1, #0]
 8013714:	3150      	adds	r1, #80	; 0x50
 8013716:	18a0      	adds	r0, r4, r2
 8013718:	f8c7 0928 	str.w	r0, [r7, #2344]	; 0x928
 801371c:	eb45 0303 	adc.w	r3, r5, r3
 8013720:	f8c7 392c 	str.w	r3, [r7, #2348]	; 0x92c
 8013724:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8013728:	e9d3 3400 	ldrd	r3, r4, [r3]
 801372c:	e9c1 3400 	strd	r3, r4, [r1]
 8013730:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	3330      	adds	r3, #48	; 0x30
 8013738:	e9d3 0100 	ldrd	r0, r1, [r3]
 801373c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	3350      	adds	r3, #80	; 0x50
 8013744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013748:	ea80 0402 	eor.w	r4, r0, r2
 801374c:	f8c7 4920 	str.w	r4, [r7, #2336]	; 0x920
 8013750:	404b      	eors	r3, r1
 8013752:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
 8013756:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8013760:	223f      	movs	r2, #63	; 0x3f
 8013762:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8013766:	e9d3 0100 	ldrd	r0, r1, [r3]
 801376a:	f7f4 fee9 	bl	8008540 <rotr64>
 801376e:	4602      	mov	r2, r0
 8013770:	460b      	mov	r3, r1
 8013772:	e9c4 2300 	strd	r2, r3, [r4]
 8013776:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	3318      	adds	r3, #24
 801377e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013782:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	3338      	adds	r3, #56	; 0x38
 801378a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801378e:	1884      	adds	r4, r0, r2
 8013790:	f8c7 4918 	str.w	r4, [r7, #2328]	; 0x918
 8013794:	eb41 0303 	adc.w	r3, r1, r3
 8013798:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 801379c:	2300      	movs	r3, #0
 801379e:	00da      	lsls	r2, r3, #3
 80137a0:	f641 6324 	movw	r3, #7716	; 0x1e24
 80137a4:	443b      	add	r3, r7
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	4413      	add	r3, r2
 80137aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137ae:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80137b2:	6809      	ldr	r1, [r1, #0]
 80137b4:	3118      	adds	r1, #24
 80137b6:	f607 1018 	addw	r0, r7, #2328	; 0x918
 80137ba:	e9d0 4500 	ldrd	r4, r5, [r0]
 80137be:	4620      	mov	r0, r4
 80137c0:	1880      	adds	r0, r0, r2
 80137c2:	f8c7 0910 	str.w	r0, [r7, #2320]	; 0x910
 80137c6:	4628      	mov	r0, r5
 80137c8:	eb43 0000 	adc.w	r0, r3, r0
 80137cc:	f8c7 0914 	str.w	r0, [r7, #2324]	; 0x914
 80137d0:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80137d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80137d8:	e9c1 3400 	strd	r3, r4, [r1]
 80137dc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	3378      	adds	r3, #120	; 0x78
 80137e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80137e8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	3318      	adds	r3, #24
 80137f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137f4:	ea80 0402 	eor.w	r4, r0, r2
 80137f8:	f8c7 4908 	str.w	r4, [r7, #2312]	; 0x908
 80137fc:	404b      	eors	r3, r1
 80137fe:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
 8013802:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	f103 0478 	add.w	r4, r3, #120	; 0x78
 801380c:	2220      	movs	r2, #32
 801380e:	f607 1308 	addw	r3, r7, #2312	; 0x908
 8013812:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013816:	f7f4 fe93 	bl	8008540 <rotr64>
 801381a:	4602      	mov	r2, r0
 801381c:	460b      	mov	r3, r1
 801381e:	e9c4 2300 	strd	r2, r3, [r4]
 8013822:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	3358      	adds	r3, #88	; 0x58
 801382a:	e9d3 4500 	ldrd	r4, r5, [r3]
 801382e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	3378      	adds	r3, #120	; 0x78
 8013836:	e9d3 2300 	ldrd	r2, r3, [r3]
 801383a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801383e:	6809      	ldr	r1, [r1, #0]
 8013840:	3158      	adds	r1, #88	; 0x58
 8013842:	18a0      	adds	r0, r4, r2
 8013844:	f8c7 0900 	str.w	r0, [r7, #2304]	; 0x900
 8013848:	eb45 0303 	adc.w	r3, r5, r3
 801384c:	f8c7 3904 	str.w	r3, [r7, #2308]	; 0x904
 8013850:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8013854:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013858:	e9c1 3400 	strd	r3, r4, [r1]
 801385c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	3338      	adds	r3, #56	; 0x38
 8013864:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013868:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	3358      	adds	r3, #88	; 0x58
 8013870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013874:	ea80 0402 	eor.w	r4, r0, r2
 8013878:	f8c7 48f8 	str.w	r4, [r7, #2296]	; 0x8f8
 801387c:	404b      	eors	r3, r1
 801387e:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
 8013882:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	f103 0438 	add.w	r4, r3, #56	; 0x38
 801388c:	2218      	movs	r2, #24
 801388e:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8013892:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013896:	f7f4 fe53 	bl	8008540 <rotr64>
 801389a:	4602      	mov	r2, r0
 801389c:	460b      	mov	r3, r1
 801389e:	e9c4 2300 	strd	r2, r3, [r4]
 80138a2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	3318      	adds	r3, #24
 80138aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80138ae:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	3338      	adds	r3, #56	; 0x38
 80138b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138ba:	1884      	adds	r4, r0, r2
 80138bc:	f8c7 48f0 	str.w	r4, [r7, #2288]	; 0x8f0
 80138c0:	eb41 0303 	adc.w	r3, r1, r3
 80138c4:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
 80138c8:	2308      	movs	r3, #8
 80138ca:	00da      	lsls	r2, r3, #3
 80138cc:	f641 6324 	movw	r3, #7716	; 0x1e24
 80138d0:	443b      	add	r3, r7
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	4413      	add	r3, r2
 80138d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138da:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80138de:	6809      	ldr	r1, [r1, #0]
 80138e0:	3118      	adds	r1, #24
 80138e2:	f507 600f 	add.w	r0, r7, #2288	; 0x8f0
 80138e6:	e9d0 4500 	ldrd	r4, r5, [r0]
 80138ea:	4620      	mov	r0, r4
 80138ec:	1880      	adds	r0, r0, r2
 80138ee:	f8c7 08e8 	str.w	r0, [r7, #2280]	; 0x8e8
 80138f2:	4628      	mov	r0, r5
 80138f4:	eb43 0000 	adc.w	r0, r3, r0
 80138f8:	f8c7 08ec 	str.w	r0, [r7, #2284]	; 0x8ec
 80138fc:	f607 03e8 	addw	r3, r7, #2280	; 0x8e8
 8013900:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013904:	e9c1 3400 	strd	r3, r4, [r1]
 8013908:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	3378      	adds	r3, #120	; 0x78
 8013910:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013914:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	3318      	adds	r3, #24
 801391c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013920:	ea80 0402 	eor.w	r4, r0, r2
 8013924:	f8c7 48e0 	str.w	r4, [r7, #2272]	; 0x8e0
 8013928:	404b      	eors	r3, r1
 801392a:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
 801392e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8013938:	2210      	movs	r2, #16
 801393a:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 801393e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013942:	f7f4 fdfd 	bl	8008540 <rotr64>
 8013946:	4602      	mov	r2, r0
 8013948:	460b      	mov	r3, r1
 801394a:	e9c4 2300 	strd	r2, r3, [r4]
 801394e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	3358      	adds	r3, #88	; 0x58
 8013956:	e9d3 4500 	ldrd	r4, r5, [r3]
 801395a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	3378      	adds	r3, #120	; 0x78
 8013962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013966:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801396a:	6809      	ldr	r1, [r1, #0]
 801396c:	3158      	adds	r1, #88	; 0x58
 801396e:	18a0      	adds	r0, r4, r2
 8013970:	f8c7 08d8 	str.w	r0, [r7, #2264]	; 0x8d8
 8013974:	eb45 0303 	adc.w	r3, r5, r3
 8013978:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
 801397c:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8013980:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013984:	e9c1 3400 	strd	r3, r4, [r1]
 8013988:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	3338      	adds	r3, #56	; 0x38
 8013990:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013994:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	3358      	adds	r3, #88	; 0x58
 801399c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139a0:	ea80 0402 	eor.w	r4, r0, r2
 80139a4:	f8c7 48d0 	str.w	r4, [r7, #2256]	; 0x8d0
 80139a8:	404b      	eors	r3, r1
 80139aa:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
 80139ae:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80139b8:	223f      	movs	r2, #63	; 0x3f
 80139ba:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 80139be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80139c2:	f7f4 fdbd 	bl	8008540 <rotr64>
 80139c6:	4602      	mov	r2, r0
 80139c8:	460b      	mov	r3, r1
 80139ca:	e9c4 2300 	strd	r2, r3, [r4]
 80139ce:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80139d8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	3328      	adds	r3, #40	; 0x28
 80139e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139e4:	1884      	adds	r4, r0, r2
 80139e6:	f8c7 48c8 	str.w	r4, [r7, #2248]	; 0x8c8
 80139ea:	eb41 0303 	adc.w	r3, r1, r3
 80139ee:	f8c7 38cc 	str.w	r3, [r7, #2252]	; 0x8cc
 80139f2:	230c      	movs	r3, #12
 80139f4:	00da      	lsls	r2, r3, #3
 80139f6:	f641 6324 	movw	r3, #7716	; 0x1e24
 80139fa:	443b      	add	r3, r7
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	4413      	add	r3, r2
 8013a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a04:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 8013a08:	e9d1 4500 	ldrd	r4, r5, [r1]
 8013a0c:	4621      	mov	r1, r4
 8013a0e:	1889      	adds	r1, r1, r2
 8013a10:	f8c7 18c0 	str.w	r1, [r7, #2240]	; 0x8c0
 8013a14:	4629      	mov	r1, r5
 8013a16:	eb43 0101 	adc.w	r1, r3, r1
 8013a1a:	f8c7 18c4 	str.w	r1, [r7, #2244]	; 0x8c4
 8013a1e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	f507 620c 	add.w	r2, r7, #2240	; 0x8c0
 8013a28:	e9d2 1200 	ldrd	r1, r2, [r2]
 8013a2c:	e9c3 1200 	strd	r1, r2, [r3]
 8013a30:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	3378      	adds	r3, #120	; 0x78
 8013a38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013a3c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a46:	ea80 0402 	eor.w	r4, r0, r2
 8013a4a:	f8c7 48b8 	str.w	r4, [r7, #2232]	; 0x8b8
 8013a4e:	404b      	eors	r3, r1
 8013a50:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8013a54:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8013a5e:	2220      	movs	r2, #32
 8013a60:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 8013a64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013a68:	f7f4 fd6a 	bl	8008540 <rotr64>
 8013a6c:	4602      	mov	r2, r0
 8013a6e:	460b      	mov	r3, r1
 8013a70:	e9c4 2300 	strd	r2, r3, [r4]
 8013a74:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	3350      	adds	r3, #80	; 0x50
 8013a7c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013a80:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	3378      	adds	r3, #120	; 0x78
 8013a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a8c:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8013a90:	6809      	ldr	r1, [r1, #0]
 8013a92:	3150      	adds	r1, #80	; 0x50
 8013a94:	18a0      	adds	r0, r4, r2
 8013a96:	f8c7 08b0 	str.w	r0, [r7, #2224]	; 0x8b0
 8013a9a:	eb45 0303 	adc.w	r3, r5, r3
 8013a9e:	f8c7 38b4 	str.w	r3, [r7, #2228]	; 0x8b4
 8013aa2:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8013aa6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013aaa:	e9c1 3400 	strd	r3, r4, [r1]
 8013aae:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	3328      	adds	r3, #40	; 0x28
 8013ab6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013aba:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	3350      	adds	r3, #80	; 0x50
 8013ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ac6:	ea80 0402 	eor.w	r4, r0, r2
 8013aca:	f8c7 48a8 	str.w	r4, [r7, #2216]	; 0x8a8
 8013ace:	404b      	eors	r3, r1
 8013ad0:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
 8013ad4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8013ade:	2218      	movs	r2, #24
 8013ae0:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8013ae4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013ae8:	f7f4 fd2a 	bl	8008540 <rotr64>
 8013aec:	4602      	mov	r2, r0
 8013aee:	460b      	mov	r3, r1
 8013af0:	e9c4 2300 	strd	r2, r3, [r4]
 8013af4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013afe:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	3328      	adds	r3, #40	; 0x28
 8013b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b0a:	1884      	adds	r4, r0, r2
 8013b0c:	f8c7 48a0 	str.w	r4, [r7, #2208]	; 0x8a0
 8013b10:	eb41 0303 	adc.w	r3, r1, r3
 8013b14:	f8c7 38a4 	str.w	r3, [r7, #2212]	; 0x8a4
 8013b18:	2302      	movs	r3, #2
 8013b1a:	00da      	lsls	r2, r3, #3
 8013b1c:	f641 6324 	movw	r3, #7716	; 0x1e24
 8013b20:	443b      	add	r3, r7
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	4413      	add	r3, r2
 8013b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b2a:	f507 610a 	add.w	r1, r7, #2208	; 0x8a0
 8013b2e:	e9d1 4500 	ldrd	r4, r5, [r1]
 8013b32:	4621      	mov	r1, r4
 8013b34:	1889      	adds	r1, r1, r2
 8013b36:	f8c7 1898 	str.w	r1, [r7, #2200]	; 0x898
 8013b3a:	4629      	mov	r1, r5
 8013b3c:	eb43 0101 	adc.w	r1, r3, r1
 8013b40:	f8c7 189c 	str.w	r1, [r7, #2204]	; 0x89c
 8013b44:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	f607 0298 	addw	r2, r7, #2200	; 0x898
 8013b4e:	e9d2 1200 	ldrd	r1, r2, [r2]
 8013b52:	e9c3 1200 	strd	r1, r2, [r3]
 8013b56:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	3378      	adds	r3, #120	; 0x78
 8013b5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013b62:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b6c:	ea80 0402 	eor.w	r4, r0, r2
 8013b70:	f8c7 4890 	str.w	r4, [r7, #2192]	; 0x890
 8013b74:	404b      	eors	r3, r1
 8013b76:	f8c7 3894 	str.w	r3, [r7, #2196]	; 0x894
 8013b7a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8013b84:	2210      	movs	r2, #16
 8013b86:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8013b8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013b8e:	f7f4 fcd7 	bl	8008540 <rotr64>
 8013b92:	4602      	mov	r2, r0
 8013b94:	460b      	mov	r3, r1
 8013b96:	e9c4 2300 	strd	r2, r3, [r4]
 8013b9a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	3350      	adds	r3, #80	; 0x50
 8013ba2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013ba6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	3378      	adds	r3, #120	; 0x78
 8013bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bb2:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8013bb6:	6809      	ldr	r1, [r1, #0]
 8013bb8:	3150      	adds	r1, #80	; 0x50
 8013bba:	18a0      	adds	r0, r4, r2
 8013bbc:	f8c7 0888 	str.w	r0, [r7, #2184]	; 0x888
 8013bc0:	eb45 0303 	adc.w	r3, r5, r3
 8013bc4:	f8c7 388c 	str.w	r3, [r7, #2188]	; 0x88c
 8013bc8:	f607 0388 	addw	r3, r7, #2184	; 0x888
 8013bcc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013bd0:	e9c1 3400 	strd	r3, r4, [r1]
 8013bd4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	3328      	adds	r3, #40	; 0x28
 8013bdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013be0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	3350      	adds	r3, #80	; 0x50
 8013be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bec:	ea80 0402 	eor.w	r4, r0, r2
 8013bf0:	f8c7 4880 	str.w	r4, [r7, #2176]	; 0x880
 8013bf4:	404b      	eors	r3, r1
 8013bf6:	f8c7 3884 	str.w	r3, [r7, #2180]	; 0x884
 8013bfa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8013c04:	223f      	movs	r2, #63	; 0x3f
 8013c06:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8013c0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013c0e:	f7f4 fc97 	bl	8008540 <rotr64>
 8013c12:	4602      	mov	r2, r0
 8013c14:	460b      	mov	r3, r1
 8013c16:	e9c4 2300 	strd	r2, r3, [r4]
 8013c1a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	3308      	adds	r3, #8
 8013c22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013c26:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	3330      	adds	r3, #48	; 0x30
 8013c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c32:	1884      	adds	r4, r0, r2
 8013c34:	f8c7 4878 	str.w	r4, [r7, #2168]	; 0x878
 8013c38:	eb41 0303 	adc.w	r3, r1, r3
 8013c3c:	f8c7 387c 	str.w	r3, [r7, #2172]	; 0x87c
 8013c40:	230d      	movs	r3, #13
 8013c42:	00da      	lsls	r2, r3, #3
 8013c44:	f641 6324 	movw	r3, #7716	; 0x1e24
 8013c48:	443b      	add	r3, r7
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	4413      	add	r3, r2
 8013c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c52:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8013c56:	6809      	ldr	r1, [r1, #0]
 8013c58:	3108      	adds	r1, #8
 8013c5a:	f607 0078 	addw	r0, r7, #2168	; 0x878
 8013c5e:	e9d0 4500 	ldrd	r4, r5, [r0]
 8013c62:	4620      	mov	r0, r4
 8013c64:	1880      	adds	r0, r0, r2
 8013c66:	f8c7 0870 	str.w	r0, [r7, #2160]	; 0x870
 8013c6a:	4628      	mov	r0, r5
 8013c6c:	eb43 0000 	adc.w	r0, r3, r0
 8013c70:	f8c7 0874 	str.w	r0, [r7, #2164]	; 0x874
 8013c74:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8013c78:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013c7c:	e9c1 3400 	strd	r3, r4, [r1]
 8013c80:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	3360      	adds	r3, #96	; 0x60
 8013c88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013c8c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	3308      	adds	r3, #8
 8013c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c98:	ea80 0402 	eor.w	r4, r0, r2
 8013c9c:	f8c7 4868 	str.w	r4, [r7, #2152]	; 0x868
 8013ca0:	404b      	eors	r3, r1
 8013ca2:	f8c7 386c 	str.w	r3, [r7, #2156]	; 0x86c
 8013ca6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8013cb0:	2220      	movs	r2, #32
 8013cb2:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8013cb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013cba:	f7f4 fc41 	bl	8008540 <rotr64>
 8013cbe:	4602      	mov	r2, r0
 8013cc0:	460b      	mov	r3, r1
 8013cc2:	e9c4 2300 	strd	r2, r3, [r4]
 8013cc6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	3358      	adds	r3, #88	; 0x58
 8013cce:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013cd2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	3360      	adds	r3, #96	; 0x60
 8013cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cde:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8013ce2:	6809      	ldr	r1, [r1, #0]
 8013ce4:	3158      	adds	r1, #88	; 0x58
 8013ce6:	18a0      	adds	r0, r4, r2
 8013ce8:	f8c7 0860 	str.w	r0, [r7, #2144]	; 0x860
 8013cec:	eb45 0303 	adc.w	r3, r5, r3
 8013cf0:	f8c7 3864 	str.w	r3, [r7, #2148]	; 0x864
 8013cf4:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8013cf8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013cfc:	e9c1 3400 	strd	r3, r4, [r1]
 8013d00:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	3330      	adds	r3, #48	; 0x30
 8013d08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013d0c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	3358      	adds	r3, #88	; 0x58
 8013d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d18:	ea80 0402 	eor.w	r4, r0, r2
 8013d1c:	f8c7 4858 	str.w	r4, [r7, #2136]	; 0x858
 8013d20:	404b      	eors	r3, r1
 8013d22:	f8c7 385c 	str.w	r3, [r7, #2140]	; 0x85c
 8013d26:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8013d30:	2218      	movs	r2, #24
 8013d32:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8013d36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013d3a:	f7f4 fc01 	bl	8008540 <rotr64>
 8013d3e:	4602      	mov	r2, r0
 8013d40:	460b      	mov	r3, r1
 8013d42:	e9c4 2300 	strd	r2, r3, [r4]
 8013d46:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	3308      	adds	r3, #8
 8013d4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013d52:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	3330      	adds	r3, #48	; 0x30
 8013d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d5e:	1884      	adds	r4, r0, r2
 8013d60:	f8c7 4850 	str.w	r4, [r7, #2128]	; 0x850
 8013d64:	eb41 0303 	adc.w	r3, r1, r3
 8013d68:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
 8013d6c:	2307      	movs	r3, #7
 8013d6e:	00da      	lsls	r2, r3, #3
 8013d70:	f641 6324 	movw	r3, #7716	; 0x1e24
 8013d74:	443b      	add	r3, r7
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	4413      	add	r3, r2
 8013d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d7e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8013d82:	6809      	ldr	r1, [r1, #0]
 8013d84:	3108      	adds	r1, #8
 8013d86:	f507 6005 	add.w	r0, r7, #2128	; 0x850
 8013d8a:	e9d0 4500 	ldrd	r4, r5, [r0]
 8013d8e:	4620      	mov	r0, r4
 8013d90:	1880      	adds	r0, r0, r2
 8013d92:	f8c7 0848 	str.w	r0, [r7, #2120]	; 0x848
 8013d96:	4628      	mov	r0, r5
 8013d98:	eb43 0000 	adc.w	r0, r3, r0
 8013d9c:	f8c7 084c 	str.w	r0, [r7, #2124]	; 0x84c
 8013da0:	f607 0348 	addw	r3, r7, #2120	; 0x848
 8013da4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013da8:	e9c1 3400 	strd	r3, r4, [r1]
 8013dac:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	3360      	adds	r3, #96	; 0x60
 8013db4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013db8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	3308      	adds	r3, #8
 8013dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dc4:	ea80 0402 	eor.w	r4, r0, r2
 8013dc8:	f8c7 4840 	str.w	r4, [r7, #2112]	; 0x840
 8013dcc:	404b      	eors	r3, r1
 8013dce:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
 8013dd2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8013ddc:	2210      	movs	r2, #16
 8013dde:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 8013de2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013de6:	f7f4 fbab 	bl	8008540 <rotr64>
 8013dea:	4602      	mov	r2, r0
 8013dec:	460b      	mov	r3, r1
 8013dee:	e9c4 2300 	strd	r2, r3, [r4]
 8013df2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	3358      	adds	r3, #88	; 0x58
 8013dfa:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013dfe:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	3360      	adds	r3, #96	; 0x60
 8013e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e0a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8013e0e:	6809      	ldr	r1, [r1, #0]
 8013e10:	3158      	adds	r1, #88	; 0x58
 8013e12:	18a0      	adds	r0, r4, r2
 8013e14:	f8c7 0838 	str.w	r0, [r7, #2104]	; 0x838
 8013e18:	eb45 0303 	adc.w	r3, r5, r3
 8013e1c:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
 8013e20:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8013e24:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013e28:	e9c1 3400 	strd	r3, r4, [r1]
 8013e2c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	3330      	adds	r3, #48	; 0x30
 8013e34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013e38:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	3358      	adds	r3, #88	; 0x58
 8013e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e44:	ea80 0402 	eor.w	r4, r0, r2
 8013e48:	f8c7 4830 	str.w	r4, [r7, #2096]	; 0x830
 8013e4c:	404b      	eors	r3, r1
 8013e4e:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 8013e52:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8013e5c:	223f      	movs	r2, #63	; 0x3f
 8013e5e:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8013e62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013e66:	f7f4 fb6b 	bl	8008540 <rotr64>
 8013e6a:	4602      	mov	r2, r0
 8013e6c:	460b      	mov	r3, r1
 8013e6e:	e9c4 2300 	strd	r2, r3, [r4]
 8013e72:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	3310      	adds	r3, #16
 8013e7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013e7e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	3338      	adds	r3, #56	; 0x38
 8013e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e8a:	1884      	adds	r4, r0, r2
 8013e8c:	f8c7 4828 	str.w	r4, [r7, #2088]	; 0x828
 8013e90:	eb41 0303 	adc.w	r3, r1, r3
 8013e94:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 8013e98:	2301      	movs	r3, #1
 8013e9a:	00da      	lsls	r2, r3, #3
 8013e9c:	f641 6324 	movw	r3, #7716	; 0x1e24
 8013ea0:	443b      	add	r3, r7
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	4413      	add	r3, r2
 8013ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eaa:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8013eae:	6809      	ldr	r1, [r1, #0]
 8013eb0:	3110      	adds	r1, #16
 8013eb2:	f607 0028 	addw	r0, r7, #2088	; 0x828
 8013eb6:	e9d0 4500 	ldrd	r4, r5, [r0]
 8013eba:	4620      	mov	r0, r4
 8013ebc:	1880      	adds	r0, r0, r2
 8013ebe:	f8c7 0820 	str.w	r0, [r7, #2080]	; 0x820
 8013ec2:	4628      	mov	r0, r5
 8013ec4:	eb43 0000 	adc.w	r0, r3, r0
 8013ec8:	f8c7 0824 	str.w	r0, [r7, #2084]	; 0x824
 8013ecc:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8013ed0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013ed4:	e9c1 3400 	strd	r3, r4, [r1]
 8013ed8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	3368      	adds	r3, #104	; 0x68
 8013ee0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013ee4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	3310      	adds	r3, #16
 8013eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ef0:	ea80 0402 	eor.w	r4, r0, r2
 8013ef4:	f8c7 4818 	str.w	r4, [r7, #2072]	; 0x818
 8013ef8:	404b      	eors	r3, r1
 8013efa:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 8013efe:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013f02:	681b      	ldr	r3, [r3, #0]
 8013f04:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8013f08:	2220      	movs	r2, #32
 8013f0a:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8013f0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013f12:	f7f4 fb15 	bl	8008540 <rotr64>
 8013f16:	4602      	mov	r2, r0
 8013f18:	460b      	mov	r3, r1
 8013f1a:	e9c4 2300 	strd	r2, r3, [r4]
 8013f1e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	3340      	adds	r3, #64	; 0x40
 8013f26:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013f2a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	3368      	adds	r3, #104	; 0x68
 8013f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f36:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8013f3a:	6809      	ldr	r1, [r1, #0]
 8013f3c:	3140      	adds	r1, #64	; 0x40
 8013f3e:	18a0      	adds	r0, r4, r2
 8013f40:	f8c7 0810 	str.w	r0, [r7, #2064]	; 0x810
 8013f44:	eb45 0303 	adc.w	r3, r5, r3
 8013f48:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 8013f4c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8013f50:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013f54:	e9c1 3400 	strd	r3, r4, [r1]
 8013f58:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	3338      	adds	r3, #56	; 0x38
 8013f60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013f64:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	3340      	adds	r3, #64	; 0x40
 8013f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f70:	ea80 0402 	eor.w	r4, r0, r2
 8013f74:	f8c7 4808 	str.w	r4, [r7, #2056]	; 0x808
 8013f78:	404b      	eors	r3, r1
 8013f7a:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8013f7e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8013f88:	2218      	movs	r2, #24
 8013f8a:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8013f8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013f92:	f7f4 fad5 	bl	8008540 <rotr64>
 8013f96:	4602      	mov	r2, r0
 8013f98:	460b      	mov	r3, r1
 8013f9a:	e9c4 2300 	strd	r2, r3, [r4]
 8013f9e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	3310      	adds	r3, #16
 8013fa6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013faa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	3338      	adds	r3, #56	; 0x38
 8013fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fb6:	1884      	adds	r4, r0, r2
 8013fb8:	f8c7 4800 	str.w	r4, [r7, #2048]	; 0x800
 8013fbc:	eb41 0303 	adc.w	r3, r1, r3
 8013fc0:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 8013fc4:	2304      	movs	r3, #4
 8013fc6:	00da      	lsls	r2, r3, #3
 8013fc8:	f641 6324 	movw	r3, #7716	; 0x1e24
 8013fcc:	443b      	add	r3, r7
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	4413      	add	r3, r2
 8013fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fd6:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8013fda:	6809      	ldr	r1, [r1, #0]
 8013fdc:	3110      	adds	r1, #16
 8013fde:	f507 6000 	add.w	r0, r7, #2048	; 0x800
 8013fe2:	e9d0 4500 	ldrd	r4, r5, [r0]
 8013fe6:	4620      	mov	r0, r4
 8013fe8:	1880      	adds	r0, r0, r2
 8013fea:	f8c7 07f8 	str.w	r0, [r7, #2040]	; 0x7f8
 8013fee:	4628      	mov	r0, r5
 8013ff0:	eb43 0000 	adc.w	r0, r3, r0
 8013ff4:	f8c7 07fc 	str.w	r0, [r7, #2044]	; 0x7fc
 8013ff8:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8013ffc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8014000:	e9c1 3400 	strd	r3, r4, [r1]
 8014004:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	3368      	adds	r3, #104	; 0x68
 801400c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014010:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	3310      	adds	r3, #16
 8014018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801401c:	ea80 0402 	eor.w	r4, r0, r2
 8014020:	f8c7 47f0 	str.w	r4, [r7, #2032]	; 0x7f0
 8014024:	404b      	eors	r3, r1
 8014026:	f8c7 37f4 	str.w	r3, [r7, #2036]	; 0x7f4
 801402a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8014034:	2210      	movs	r2, #16
 8014036:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 801403a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801403e:	f7f4 fa7f 	bl	8008540 <rotr64>
 8014042:	4602      	mov	r2, r0
 8014044:	460b      	mov	r3, r1
 8014046:	e9c4 2300 	strd	r2, r3, [r4]
 801404a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	3340      	adds	r3, #64	; 0x40
 8014052:	e9d3 4500 	ldrd	r4, r5, [r3]
 8014056:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	3368      	adds	r3, #104	; 0x68
 801405e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014062:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8014066:	6809      	ldr	r1, [r1, #0]
 8014068:	3140      	adds	r1, #64	; 0x40
 801406a:	18a0      	adds	r0, r4, r2
 801406c:	f8c7 07e8 	str.w	r0, [r7, #2024]	; 0x7e8
 8014070:	eb45 0303 	adc.w	r3, r5, r3
 8014074:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
 8014078:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 801407c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8014080:	e9c1 3400 	strd	r3, r4, [r1]
 8014084:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	3338      	adds	r3, #56	; 0x38
 801408c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014090:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	3340      	adds	r3, #64	; 0x40
 8014098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801409c:	ea80 0402 	eor.w	r4, r0, r2
 80140a0:	f8c7 47e0 	str.w	r4, [r7, #2016]	; 0x7e0
 80140a4:	404b      	eors	r3, r1
 80140a6:	f8c7 37e4 	str.w	r3, [r7, #2020]	; 0x7e4
 80140aa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80140b4:	223f      	movs	r2, #63	; 0x3f
 80140b6:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 80140ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80140be:	f7f4 fa3f 	bl	8008540 <rotr64>
 80140c2:	4602      	mov	r2, r0
 80140c4:	460b      	mov	r3, r1
 80140c6:	e9c4 2300 	strd	r2, r3, [r4]
 80140ca:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	3318      	adds	r3, #24
 80140d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80140d6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	3320      	adds	r3, #32
 80140de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140e2:	1884      	adds	r4, r0, r2
 80140e4:	f8c7 47d8 	str.w	r4, [r7, #2008]	; 0x7d8
 80140e8:	eb41 0303 	adc.w	r3, r1, r3
 80140ec:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
 80140f0:	230a      	movs	r3, #10
 80140f2:	00da      	lsls	r2, r3, #3
 80140f4:	f641 6324 	movw	r3, #7716	; 0x1e24
 80140f8:	443b      	add	r3, r7
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	4413      	add	r3, r2
 80140fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014102:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8014106:	6809      	ldr	r1, [r1, #0]
 8014108:	3118      	adds	r1, #24
 801410a:	f507 60fb 	add.w	r0, r7, #2008	; 0x7d8
 801410e:	e9d0 4500 	ldrd	r4, r5, [r0]
 8014112:	4620      	mov	r0, r4
 8014114:	1880      	adds	r0, r0, r2
 8014116:	f8c7 07d0 	str.w	r0, [r7, #2000]	; 0x7d0
 801411a:	4628      	mov	r0, r5
 801411c:	eb43 0000 	adc.w	r0, r3, r0
 8014120:	f8c7 07d4 	str.w	r0, [r7, #2004]	; 0x7d4
 8014124:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 8014128:	e9d3 3400 	ldrd	r3, r4, [r3]
 801412c:	e9c1 3400 	strd	r3, r4, [r1]
 8014130:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	3370      	adds	r3, #112	; 0x70
 8014138:	e9d3 0100 	ldrd	r0, r1, [r3]
 801413c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	3318      	adds	r3, #24
 8014144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014148:	ea80 0402 	eor.w	r4, r0, r2
 801414c:	f8c7 47c8 	str.w	r4, [r7, #1992]	; 0x7c8
 8014150:	404b      	eors	r3, r1
 8014152:	f8c7 37cc 	str.w	r3, [r7, #1996]	; 0x7cc
 8014156:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8014160:	2220      	movs	r2, #32
 8014162:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 8014166:	e9d3 0100 	ldrd	r0, r1, [r3]
 801416a:	f7f4 f9e9 	bl	8008540 <rotr64>
 801416e:	4602      	mov	r2, r0
 8014170:	460b      	mov	r3, r1
 8014172:	e9c4 2300 	strd	r2, r3, [r4]
 8014176:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	3348      	adds	r3, #72	; 0x48
 801417e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8014182:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	3370      	adds	r3, #112	; 0x70
 801418a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801418e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8014192:	6809      	ldr	r1, [r1, #0]
 8014194:	3148      	adds	r1, #72	; 0x48
 8014196:	18a0      	adds	r0, r4, r2
 8014198:	f8c7 07c0 	str.w	r0, [r7, #1984]	; 0x7c0
 801419c:	eb45 0303 	adc.w	r3, r5, r3
 80141a0:	f8c7 37c4 	str.w	r3, [r7, #1988]	; 0x7c4
 80141a4:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 80141a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80141ac:	e9c1 3400 	strd	r3, r4, [r1]
 80141b0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	3320      	adds	r3, #32
 80141b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80141bc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	3348      	adds	r3, #72	; 0x48
 80141c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141c8:	ea80 0402 	eor.w	r4, r0, r2
 80141cc:	f8c7 47b8 	str.w	r4, [r7, #1976]	; 0x7b8
 80141d0:	404b      	eors	r3, r1
 80141d2:	f8c7 37bc 	str.w	r3, [r7, #1980]	; 0x7bc
 80141d6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	f103 0420 	add.w	r4, r3, #32
 80141e0:	2218      	movs	r2, #24
 80141e2:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 80141e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80141ea:	f7f4 f9a9 	bl	8008540 <rotr64>
 80141ee:	4602      	mov	r2, r0
 80141f0:	460b      	mov	r3, r1
 80141f2:	e9c4 2300 	strd	r2, r3, [r4]
 80141f6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	3318      	adds	r3, #24
 80141fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014202:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	3320      	adds	r3, #32
 801420a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801420e:	1884      	adds	r4, r0, r2
 8014210:	f8c7 47b0 	str.w	r4, [r7, #1968]	; 0x7b0
 8014214:	eb41 0303 	adc.w	r3, r1, r3
 8014218:	f8c7 37b4 	str.w	r3, [r7, #1972]	; 0x7b4
 801421c:	2305      	movs	r3, #5
 801421e:	00da      	lsls	r2, r3, #3
 8014220:	f641 6324 	movw	r3, #7716	; 0x1e24
 8014224:	443b      	add	r3, r7
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	4413      	add	r3, r2
 801422a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801422e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8014232:	6809      	ldr	r1, [r1, #0]
 8014234:	3118      	adds	r1, #24
 8014236:	f507 60f6 	add.w	r0, r7, #1968	; 0x7b0
 801423a:	e9d0 4500 	ldrd	r4, r5, [r0]
 801423e:	4620      	mov	r0, r4
 8014240:	1880      	adds	r0, r0, r2
 8014242:	f8c7 07a8 	str.w	r0, [r7, #1960]	; 0x7a8
 8014246:	4628      	mov	r0, r5
 8014248:	eb43 0000 	adc.w	r0, r3, r0
 801424c:	f8c7 07ac 	str.w	r0, [r7, #1964]	; 0x7ac
 8014250:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 8014254:	e9d3 3400 	ldrd	r3, r4, [r3]
 8014258:	e9c1 3400 	strd	r3, r4, [r1]
 801425c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	3370      	adds	r3, #112	; 0x70
 8014264:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014268:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	3318      	adds	r3, #24
 8014270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014274:	ea80 0402 	eor.w	r4, r0, r2
 8014278:	f8c7 47a0 	str.w	r4, [r7, #1952]	; 0x7a0
 801427c:	404b      	eors	r3, r1
 801427e:	f8c7 37a4 	str.w	r3, [r7, #1956]	; 0x7a4
 8014282:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801428c:	2210      	movs	r2, #16
 801428e:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8014292:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014296:	f7f4 f953 	bl	8008540 <rotr64>
 801429a:	4602      	mov	r2, r0
 801429c:	460b      	mov	r3, r1
 801429e:	e9c4 2300 	strd	r2, r3, [r4]
 80142a2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	3348      	adds	r3, #72	; 0x48
 80142aa:	e9d3 4500 	ldrd	r4, r5, [r3]
 80142ae:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	3370      	adds	r3, #112	; 0x70
 80142b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142ba:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80142be:	6809      	ldr	r1, [r1, #0]
 80142c0:	3148      	adds	r1, #72	; 0x48
 80142c2:	18a0      	adds	r0, r4, r2
 80142c4:	f8c7 0798 	str.w	r0, [r7, #1944]	; 0x798
 80142c8:	eb45 0303 	adc.w	r3, r5, r3
 80142cc:	f8c7 379c 	str.w	r3, [r7, #1948]	; 0x79c
 80142d0:	f507 63f3 	add.w	r3, r7, #1944	; 0x798
 80142d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80142d8:	e9c1 3400 	strd	r3, r4, [r1]
 80142dc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	3320      	adds	r3, #32
 80142e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80142e8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	3348      	adds	r3, #72	; 0x48
 80142f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142f4:	ea80 0402 	eor.w	r4, r0, r2
 80142f8:	f8c7 4790 	str.w	r4, [r7, #1936]	; 0x790
 80142fc:	404b      	eors	r3, r1
 80142fe:	f8c7 3794 	str.w	r3, [r7, #1940]	; 0x794
 8014302:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	f103 0420 	add.w	r4, r3, #32
 801430c:	223f      	movs	r2, #63	; 0x3f
 801430e:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 8014312:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014316:	f7f4 f913 	bl	8008540 <rotr64>
 801431a:	4602      	mov	r2, r0
 801431c:	460b      	mov	r3, r1
 801431e:	e9c4 2300 	strd	r2, r3, [r4]
  ROUND( 9 );
 8014322:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	e9d3 0100 	ldrd	r0, r1, [r3]
 801432c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	3320      	adds	r3, #32
 8014334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014338:	1884      	adds	r4, r0, r2
 801433a:	f8c7 4788 	str.w	r4, [r7, #1928]	; 0x788
 801433e:	eb41 0303 	adc.w	r3, r1, r3
 8014342:	f8c7 378c 	str.w	r3, [r7, #1932]	; 0x78c
 8014346:	230a      	movs	r3, #10
 8014348:	00da      	lsls	r2, r3, #3
 801434a:	f641 6324 	movw	r3, #7716	; 0x1e24
 801434e:	443b      	add	r3, r7
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	4413      	add	r3, r2
 8014354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014358:	f507 61f1 	add.w	r1, r7, #1928	; 0x788
 801435c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8014360:	4621      	mov	r1, r4
 8014362:	1889      	adds	r1, r1, r2
 8014364:	f8c7 1780 	str.w	r1, [r7, #1920]	; 0x780
 8014368:	4629      	mov	r1, r5
 801436a:	eb43 0101 	adc.w	r1, r3, r1
 801436e:	f8c7 1784 	str.w	r1, [r7, #1924]	; 0x784
 8014372:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 801437c:	e9d2 1200 	ldrd	r1, r2, [r2]
 8014380:	e9c3 1200 	strd	r1, r2, [r3]
 8014384:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	3360      	adds	r3, #96	; 0x60
 801438c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014390:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801439a:	ea80 0402 	eor.w	r4, r0, r2
 801439e:	f8c7 4778 	str.w	r4, [r7, #1912]	; 0x778
 80143a2:	404b      	eors	r3, r1
 80143a4:	f8c7 377c 	str.w	r3, [r7, #1916]	; 0x77c
 80143a8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80143b2:	2220      	movs	r2, #32
 80143b4:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 80143b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80143bc:	f7f4 f8c0 	bl	8008540 <rotr64>
 80143c0:	4602      	mov	r2, r0
 80143c2:	460b      	mov	r3, r1
 80143c4:	e9c4 2300 	strd	r2, r3, [r4]
 80143c8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	3340      	adds	r3, #64	; 0x40
 80143d0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80143d4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	3360      	adds	r3, #96	; 0x60
 80143dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143e0:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80143e4:	6809      	ldr	r1, [r1, #0]
 80143e6:	3140      	adds	r1, #64	; 0x40
 80143e8:	18a0      	adds	r0, r4, r2
 80143ea:	f8c7 0770 	str.w	r0, [r7, #1904]	; 0x770
 80143ee:	eb45 0303 	adc.w	r3, r5, r3
 80143f2:	f8c7 3774 	str.w	r3, [r7, #1908]	; 0x774
 80143f6:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 80143fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80143fe:	e9c1 3400 	strd	r3, r4, [r1]
 8014402:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	3320      	adds	r3, #32
 801440a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801440e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	3340      	adds	r3, #64	; 0x40
 8014416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801441a:	ea80 0402 	eor.w	r4, r0, r2
 801441e:	f8c7 4768 	str.w	r4, [r7, #1896]	; 0x768
 8014422:	404b      	eors	r3, r1
 8014424:	f8c7 376c 	str.w	r3, [r7, #1900]	; 0x76c
 8014428:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	f103 0420 	add.w	r4, r3, #32
 8014432:	2218      	movs	r2, #24
 8014434:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8014438:	e9d3 0100 	ldrd	r0, r1, [r3]
 801443c:	f7f4 f880 	bl	8008540 <rotr64>
 8014440:	4602      	mov	r2, r0
 8014442:	460b      	mov	r3, r1
 8014444:	e9c4 2300 	strd	r2, r3, [r4]
 8014448:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014452:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	3320      	adds	r3, #32
 801445a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801445e:	1884      	adds	r4, r0, r2
 8014460:	f8c7 4760 	str.w	r4, [r7, #1888]	; 0x760
 8014464:	eb41 0303 	adc.w	r3, r1, r3
 8014468:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
 801446c:	2302      	movs	r3, #2
 801446e:	00da      	lsls	r2, r3, #3
 8014470:	f641 6324 	movw	r3, #7716	; 0x1e24
 8014474:	443b      	add	r3, r7
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	4413      	add	r3, r2
 801447a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801447e:	f507 61ec 	add.w	r1, r7, #1888	; 0x760
 8014482:	e9d1 4500 	ldrd	r4, r5, [r1]
 8014486:	4621      	mov	r1, r4
 8014488:	1889      	adds	r1, r1, r2
 801448a:	f8c7 1758 	str.w	r1, [r7, #1880]	; 0x758
 801448e:	4629      	mov	r1, r5
 8014490:	eb43 0101 	adc.w	r1, r3, r1
 8014494:	f8c7 175c 	str.w	r1, [r7, #1884]	; 0x75c
 8014498:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	f507 62eb 	add.w	r2, r7, #1880	; 0x758
 80144a2:	e9d2 1200 	ldrd	r1, r2, [r2]
 80144a6:	e9c3 1200 	strd	r1, r2, [r3]
 80144aa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	3360      	adds	r3, #96	; 0x60
 80144b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80144b6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144c0:	ea80 0402 	eor.w	r4, r0, r2
 80144c4:	f8c7 4750 	str.w	r4, [r7, #1872]	; 0x750
 80144c8:	404b      	eors	r3, r1
 80144ca:	f8c7 3754 	str.w	r3, [r7, #1876]	; 0x754
 80144ce:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80144d8:	2210      	movs	r2, #16
 80144da:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 80144de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80144e2:	f7f4 f82d 	bl	8008540 <rotr64>
 80144e6:	4602      	mov	r2, r0
 80144e8:	460b      	mov	r3, r1
 80144ea:	e9c4 2300 	strd	r2, r3, [r4]
 80144ee:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	3340      	adds	r3, #64	; 0x40
 80144f6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80144fa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	3360      	adds	r3, #96	; 0x60
 8014502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014506:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801450a:	6809      	ldr	r1, [r1, #0]
 801450c:	3140      	adds	r1, #64	; 0x40
 801450e:	18a0      	adds	r0, r4, r2
 8014510:	f8c7 0748 	str.w	r0, [r7, #1864]	; 0x748
 8014514:	eb45 0303 	adc.w	r3, r5, r3
 8014518:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
 801451c:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 8014520:	e9d3 3400 	ldrd	r3, r4, [r3]
 8014524:	e9c1 3400 	strd	r3, r4, [r1]
 8014528:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	3320      	adds	r3, #32
 8014530:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014534:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	3340      	adds	r3, #64	; 0x40
 801453c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014540:	ea80 0402 	eor.w	r4, r0, r2
 8014544:	f8c7 4740 	str.w	r4, [r7, #1856]	; 0x740
 8014548:	404b      	eors	r3, r1
 801454a:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
 801454e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	f103 0420 	add.w	r4, r3, #32
 8014558:	223f      	movs	r2, #63	; 0x3f
 801455a:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 801455e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014562:	f7f3 ffed 	bl	8008540 <rotr64>
 8014566:	4602      	mov	r2, r0
 8014568:	460b      	mov	r3, r1
 801456a:	e9c4 2300 	strd	r2, r3, [r4]
 801456e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	3308      	adds	r3, #8
 8014576:	e9d3 0100 	ldrd	r0, r1, [r3]
 801457a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	3328      	adds	r3, #40	; 0x28
 8014582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014586:	1884      	adds	r4, r0, r2
 8014588:	f8c7 4738 	str.w	r4, [r7, #1848]	; 0x738
 801458c:	eb41 0303 	adc.w	r3, r1, r3
 8014590:	f8c7 373c 	str.w	r3, [r7, #1852]	; 0x73c
 8014594:	2308      	movs	r3, #8
 8014596:	00da      	lsls	r2, r3, #3
 8014598:	f641 6324 	movw	r3, #7716	; 0x1e24
 801459c:	443b      	add	r3, r7
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	4413      	add	r3, r2
 80145a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145a6:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80145aa:	6809      	ldr	r1, [r1, #0]
 80145ac:	3108      	adds	r1, #8
 80145ae:	f507 60e7 	add.w	r0, r7, #1848	; 0x738
 80145b2:	e9d0 4500 	ldrd	r4, r5, [r0]
 80145b6:	4620      	mov	r0, r4
 80145b8:	1880      	adds	r0, r0, r2
 80145ba:	f8c7 0730 	str.w	r0, [r7, #1840]	; 0x730
 80145be:	4628      	mov	r0, r5
 80145c0:	eb43 0000 	adc.w	r0, r3, r0
 80145c4:	f8c7 0734 	str.w	r0, [r7, #1844]	; 0x734
 80145c8:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 80145cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80145d0:	e9c1 3400 	strd	r3, r4, [r1]
 80145d4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	3368      	adds	r3, #104	; 0x68
 80145dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80145e0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	3308      	adds	r3, #8
 80145e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145ec:	ea80 0402 	eor.w	r4, r0, r2
 80145f0:	f8c7 4728 	str.w	r4, [r7, #1832]	; 0x728
 80145f4:	404b      	eors	r3, r1
 80145f6:	f8c7 372c 	str.w	r3, [r7, #1836]	; 0x72c
 80145fa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8014604:	2220      	movs	r2, #32
 8014606:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 801460a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801460e:	f7f3 ff97 	bl	8008540 <rotr64>
 8014612:	4602      	mov	r2, r0
 8014614:	460b      	mov	r3, r1
 8014616:	e9c4 2300 	strd	r2, r3, [r4]
 801461a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	3348      	adds	r3, #72	; 0x48
 8014622:	e9d3 4500 	ldrd	r4, r5, [r3]
 8014626:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	3368      	adds	r3, #104	; 0x68
 801462e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014632:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8014636:	6809      	ldr	r1, [r1, #0]
 8014638:	3148      	adds	r1, #72	; 0x48
 801463a:	18a0      	adds	r0, r4, r2
 801463c:	f8c7 0720 	str.w	r0, [r7, #1824]	; 0x720
 8014640:	eb45 0303 	adc.w	r3, r5, r3
 8014644:	f8c7 3724 	str.w	r3, [r7, #1828]	; 0x724
 8014648:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 801464c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8014650:	e9c1 3400 	strd	r3, r4, [r1]
 8014654:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	3328      	adds	r3, #40	; 0x28
 801465c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014660:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	3348      	adds	r3, #72	; 0x48
 8014668:	e9d3 2300 	ldrd	r2, r3, [r3]
 801466c:	ea80 0402 	eor.w	r4, r0, r2
 8014670:	f8c7 4718 	str.w	r4, [r7, #1816]	; 0x718
 8014674:	404b      	eors	r3, r1
 8014676:	f8c7 371c 	str.w	r3, [r7, #1820]	; 0x71c
 801467a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8014684:	2218      	movs	r2, #24
 8014686:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 801468a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801468e:	f7f3 ff57 	bl	8008540 <rotr64>
 8014692:	4602      	mov	r2, r0
 8014694:	460b      	mov	r3, r1
 8014696:	e9c4 2300 	strd	r2, r3, [r4]
 801469a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	3308      	adds	r3, #8
 80146a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80146a6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	3328      	adds	r3, #40	; 0x28
 80146ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146b2:	1884      	adds	r4, r0, r2
 80146b4:	f8c7 4710 	str.w	r4, [r7, #1808]	; 0x710
 80146b8:	eb41 0303 	adc.w	r3, r1, r3
 80146bc:	f8c7 3714 	str.w	r3, [r7, #1812]	; 0x714
 80146c0:	2304      	movs	r3, #4
 80146c2:	00da      	lsls	r2, r3, #3
 80146c4:	f641 6324 	movw	r3, #7716	; 0x1e24
 80146c8:	443b      	add	r3, r7
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	4413      	add	r3, r2
 80146ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146d2:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80146d6:	6809      	ldr	r1, [r1, #0]
 80146d8:	3108      	adds	r1, #8
 80146da:	f507 60e2 	add.w	r0, r7, #1808	; 0x710
 80146de:	e9d0 4500 	ldrd	r4, r5, [r0]
 80146e2:	4620      	mov	r0, r4
 80146e4:	1880      	adds	r0, r0, r2
 80146e6:	f8c7 0708 	str.w	r0, [r7, #1800]	; 0x708
 80146ea:	4628      	mov	r0, r5
 80146ec:	eb43 0000 	adc.w	r0, r3, r0
 80146f0:	f8c7 070c 	str.w	r0, [r7, #1804]	; 0x70c
 80146f4:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 80146f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80146fc:	e9c1 3400 	strd	r3, r4, [r1]
 8014700:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	3368      	adds	r3, #104	; 0x68
 8014708:	e9d3 0100 	ldrd	r0, r1, [r3]
 801470c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014710:	681b      	ldr	r3, [r3, #0]
 8014712:	3308      	adds	r3, #8
 8014714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014718:	ea80 0402 	eor.w	r4, r0, r2
 801471c:	f8c7 4700 	str.w	r4, [r7, #1792]	; 0x700
 8014720:	404b      	eors	r3, r1
 8014722:	f8c7 3704 	str.w	r3, [r7, #1796]	; 0x704
 8014726:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8014730:	2210      	movs	r2, #16
 8014732:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 8014736:	e9d3 0100 	ldrd	r0, r1, [r3]
 801473a:	f7f3 ff01 	bl	8008540 <rotr64>
 801473e:	4602      	mov	r2, r0
 8014740:	460b      	mov	r3, r1
 8014742:	e9c4 2300 	strd	r2, r3, [r4]
 8014746:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	3348      	adds	r3, #72	; 0x48
 801474e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8014752:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	3368      	adds	r3, #104	; 0x68
 801475a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801475e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8014762:	6809      	ldr	r1, [r1, #0]
 8014764:	3148      	adds	r1, #72	; 0x48
 8014766:	18a0      	adds	r0, r4, r2
 8014768:	f8c7 06f8 	str.w	r0, [r7, #1784]	; 0x6f8
 801476c:	eb45 0303 	adc.w	r3, r5, r3
 8014770:	f8c7 36fc 	str.w	r3, [r7, #1788]	; 0x6fc
 8014774:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8014778:	e9d3 3400 	ldrd	r3, r4, [r3]
 801477c:	e9c1 3400 	strd	r3, r4, [r1]
 8014780:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	3328      	adds	r3, #40	; 0x28
 8014788:	e9d3 0100 	ldrd	r0, r1, [r3]
 801478c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	3348      	adds	r3, #72	; 0x48
 8014794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014798:	ea80 0402 	eor.w	r4, r0, r2
 801479c:	f8c7 46f0 	str.w	r4, [r7, #1776]	; 0x6f0
 80147a0:	404b      	eors	r3, r1
 80147a2:	f8c7 36f4 	str.w	r3, [r7, #1780]	; 0x6f4
 80147a6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80147b0:	223f      	movs	r2, #63	; 0x3f
 80147b2:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80147b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80147ba:	f7f3 fec1 	bl	8008540 <rotr64>
 80147be:	4602      	mov	r2, r0
 80147c0:	460b      	mov	r3, r1
 80147c2:	e9c4 2300 	strd	r2, r3, [r4]
 80147c6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	3310      	adds	r3, #16
 80147ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80147d2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	3330      	adds	r3, #48	; 0x30
 80147da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147de:	1884      	adds	r4, r0, r2
 80147e0:	f8c7 46e8 	str.w	r4, [r7, #1768]	; 0x6e8
 80147e4:	eb41 0303 	adc.w	r3, r1, r3
 80147e8:	f8c7 36ec 	str.w	r3, [r7, #1772]	; 0x6ec
 80147ec:	2307      	movs	r3, #7
 80147ee:	00da      	lsls	r2, r3, #3
 80147f0:	f641 6324 	movw	r3, #7716	; 0x1e24
 80147f4:	443b      	add	r3, r7
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	4413      	add	r3, r2
 80147fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147fe:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8014802:	6809      	ldr	r1, [r1, #0]
 8014804:	3110      	adds	r1, #16
 8014806:	f507 60dd 	add.w	r0, r7, #1768	; 0x6e8
 801480a:	e9d0 4500 	ldrd	r4, r5, [r0]
 801480e:	4620      	mov	r0, r4
 8014810:	1880      	adds	r0, r0, r2
 8014812:	f8c7 06e0 	str.w	r0, [r7, #1760]	; 0x6e0
 8014816:	4628      	mov	r0, r5
 8014818:	eb43 0000 	adc.w	r0, r3, r0
 801481c:	f8c7 06e4 	str.w	r0, [r7, #1764]	; 0x6e4
 8014820:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8014824:	e9d3 3400 	ldrd	r3, r4, [r3]
 8014828:	e9c1 3400 	strd	r3, r4, [r1]
 801482c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	3370      	adds	r3, #112	; 0x70
 8014834:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014838:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	3310      	adds	r3, #16
 8014840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014844:	ea80 0402 	eor.w	r4, r0, r2
 8014848:	f8c7 46d8 	str.w	r4, [r7, #1752]	; 0x6d8
 801484c:	404b      	eors	r3, r1
 801484e:	f8c7 36dc 	str.w	r3, [r7, #1756]	; 0x6dc
 8014852:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801485c:	2220      	movs	r2, #32
 801485e:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8014862:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014866:	f7f3 fe6b 	bl	8008540 <rotr64>
 801486a:	4602      	mov	r2, r0
 801486c:	460b      	mov	r3, r1
 801486e:	e9c4 2300 	strd	r2, r3, [r4]
 8014872:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	3350      	adds	r3, #80	; 0x50
 801487a:	e9d3 4500 	ldrd	r4, r5, [r3]
 801487e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	3370      	adds	r3, #112	; 0x70
 8014886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801488a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801488e:	6809      	ldr	r1, [r1, #0]
 8014890:	3150      	adds	r1, #80	; 0x50
 8014892:	18a0      	adds	r0, r4, r2
 8014894:	f8c7 06d0 	str.w	r0, [r7, #1744]	; 0x6d0
 8014898:	eb45 0303 	adc.w	r3, r5, r3
 801489c:	f8c7 36d4 	str.w	r3, [r7, #1748]	; 0x6d4
 80148a0:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 80148a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80148a8:	e9c1 3400 	strd	r3, r4, [r1]
 80148ac:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	3330      	adds	r3, #48	; 0x30
 80148b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80148b8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	3350      	adds	r3, #80	; 0x50
 80148c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148c4:	ea80 0402 	eor.w	r4, r0, r2
 80148c8:	f8c7 46c8 	str.w	r4, [r7, #1736]	; 0x6c8
 80148cc:	404b      	eors	r3, r1
 80148ce:	f8c7 36cc 	str.w	r3, [r7, #1740]	; 0x6cc
 80148d2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80148dc:	2218      	movs	r2, #24
 80148de:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 80148e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80148e6:	f7f3 fe2b 	bl	8008540 <rotr64>
 80148ea:	4602      	mov	r2, r0
 80148ec:	460b      	mov	r3, r1
 80148ee:	e9c4 2300 	strd	r2, r3, [r4]
 80148f2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	3310      	adds	r3, #16
 80148fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80148fe:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	3330      	adds	r3, #48	; 0x30
 8014906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801490a:	1884      	adds	r4, r0, r2
 801490c:	f8c7 46c0 	str.w	r4, [r7, #1728]	; 0x6c0
 8014910:	eb41 0303 	adc.w	r3, r1, r3
 8014914:	f8c7 36c4 	str.w	r3, [r7, #1732]	; 0x6c4
 8014918:	2306      	movs	r3, #6
 801491a:	00da      	lsls	r2, r3, #3
 801491c:	f641 6324 	movw	r3, #7716	; 0x1e24
 8014920:	443b      	add	r3, r7
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	4413      	add	r3, r2
 8014926:	e9d3 2300 	ldrd	r2, r3, [r3]
 801492a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801492e:	6809      	ldr	r1, [r1, #0]
 8014930:	3110      	adds	r1, #16
 8014932:	f507 60d8 	add.w	r0, r7, #1728	; 0x6c0
 8014936:	e9d0 4500 	ldrd	r4, r5, [r0]
 801493a:	4620      	mov	r0, r4
 801493c:	1880      	adds	r0, r0, r2
 801493e:	f8c7 06b8 	str.w	r0, [r7, #1720]	; 0x6b8
 8014942:	4628      	mov	r0, r5
 8014944:	eb43 0000 	adc.w	r0, r3, r0
 8014948:	f8c7 06bc 	str.w	r0, [r7, #1724]	; 0x6bc
 801494c:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8014950:	e9d3 3400 	ldrd	r3, r4, [r3]
 8014954:	e9c1 3400 	strd	r3, r4, [r1]
 8014958:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	3370      	adds	r3, #112	; 0x70
 8014960:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014964:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	3310      	adds	r3, #16
 801496c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014970:	ea80 0402 	eor.w	r4, r0, r2
 8014974:	f8c7 46b0 	str.w	r4, [r7, #1712]	; 0x6b0
 8014978:	404b      	eors	r3, r1
 801497a:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4
 801497e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8014988:	2210      	movs	r2, #16
 801498a:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 801498e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014992:	f7f3 fdd5 	bl	8008540 <rotr64>
 8014996:	4602      	mov	r2, r0
 8014998:	460b      	mov	r3, r1
 801499a:	e9c4 2300 	strd	r2, r3, [r4]
 801499e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	3350      	adds	r3, #80	; 0x50
 80149a6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80149aa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	3370      	adds	r3, #112	; 0x70
 80149b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149b6:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80149ba:	6809      	ldr	r1, [r1, #0]
 80149bc:	3150      	adds	r1, #80	; 0x50
 80149be:	18a0      	adds	r0, r4, r2
 80149c0:	f8c7 06a8 	str.w	r0, [r7, #1704]	; 0x6a8
 80149c4:	eb45 0303 	adc.w	r3, r5, r3
 80149c8:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
 80149cc:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 80149d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80149d4:	e9c1 3400 	strd	r3, r4, [r1]
 80149d8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	3330      	adds	r3, #48	; 0x30
 80149e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80149e4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	3350      	adds	r3, #80	; 0x50
 80149ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149f0:	ea80 0402 	eor.w	r4, r0, r2
 80149f4:	f8c7 46a0 	str.w	r4, [r7, #1696]	; 0x6a0
 80149f8:	404b      	eors	r3, r1
 80149fa:	f8c7 36a4 	str.w	r3, [r7, #1700]	; 0x6a4
 80149fe:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8014a08:	223f      	movs	r2, #63	; 0x3f
 8014a0a:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8014a0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014a12:	f7f3 fd95 	bl	8008540 <rotr64>
 8014a16:	4602      	mov	r2, r0
 8014a18:	460b      	mov	r3, r1
 8014a1a:	e9c4 2300 	strd	r2, r3, [r4]
 8014a1e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	3318      	adds	r3, #24
 8014a26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014a2a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	3338      	adds	r3, #56	; 0x38
 8014a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a36:	1884      	adds	r4, r0, r2
 8014a38:	f8c7 4698 	str.w	r4, [r7, #1688]	; 0x698
 8014a3c:	eb41 0303 	adc.w	r3, r1, r3
 8014a40:	f8c7 369c 	str.w	r3, [r7, #1692]	; 0x69c
 8014a44:	2301      	movs	r3, #1
 8014a46:	00da      	lsls	r2, r3, #3
 8014a48:	f641 6324 	movw	r3, #7716	; 0x1e24
 8014a4c:	443b      	add	r3, r7
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	4413      	add	r3, r2
 8014a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a56:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8014a5a:	6809      	ldr	r1, [r1, #0]
 8014a5c:	3118      	adds	r1, #24
 8014a5e:	f507 60d3 	add.w	r0, r7, #1688	; 0x698
 8014a62:	e9d0 4500 	ldrd	r4, r5, [r0]
 8014a66:	4620      	mov	r0, r4
 8014a68:	1880      	adds	r0, r0, r2
 8014a6a:	f8c7 0690 	str.w	r0, [r7, #1680]	; 0x690
 8014a6e:	4628      	mov	r0, r5
 8014a70:	eb43 0000 	adc.w	r0, r3, r0
 8014a74:	f8c7 0694 	str.w	r0, [r7, #1684]	; 0x694
 8014a78:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8014a7c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8014a80:	e9c1 3400 	strd	r3, r4, [r1]
 8014a84:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	3378      	adds	r3, #120	; 0x78
 8014a8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014a90:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	3318      	adds	r3, #24
 8014a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a9c:	ea80 0402 	eor.w	r4, r0, r2
 8014aa0:	f8c7 4688 	str.w	r4, [r7, #1672]	; 0x688
 8014aa4:	404b      	eors	r3, r1
 8014aa6:	f8c7 368c 	str.w	r3, [r7, #1676]	; 0x68c
 8014aaa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8014ab4:	2220      	movs	r2, #32
 8014ab6:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8014aba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014abe:	f7f3 fd3f 	bl	8008540 <rotr64>
 8014ac2:	4602      	mov	r2, r0
 8014ac4:	460b      	mov	r3, r1
 8014ac6:	e9c4 2300 	strd	r2, r3, [r4]
 8014aca:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	3358      	adds	r3, #88	; 0x58
 8014ad2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8014ad6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	3378      	adds	r3, #120	; 0x78
 8014ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ae2:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8014ae6:	6809      	ldr	r1, [r1, #0]
 8014ae8:	3158      	adds	r1, #88	; 0x58
 8014aea:	18a0      	adds	r0, r4, r2
 8014aec:	f8c7 0680 	str.w	r0, [r7, #1664]	; 0x680
 8014af0:	eb45 0303 	adc.w	r3, r5, r3
 8014af4:	f8c7 3684 	str.w	r3, [r7, #1668]	; 0x684
 8014af8:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 8014afc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8014b00:	e9c1 3400 	strd	r3, r4, [r1]
 8014b04:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	3338      	adds	r3, #56	; 0x38
 8014b0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014b10:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	3358      	adds	r3, #88	; 0x58
 8014b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b1c:	ea80 0402 	eor.w	r4, r0, r2
 8014b20:	f8c7 4678 	str.w	r4, [r7, #1656]	; 0x678
 8014b24:	404b      	eors	r3, r1
 8014b26:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 8014b2a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8014b34:	2218      	movs	r2, #24
 8014b36:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8014b3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014b3e:	f7f3 fcff 	bl	8008540 <rotr64>
 8014b42:	4602      	mov	r2, r0
 8014b44:	460b      	mov	r3, r1
 8014b46:	e9c4 2300 	strd	r2, r3, [r4]
 8014b4a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	3318      	adds	r3, #24
 8014b52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014b56:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	3338      	adds	r3, #56	; 0x38
 8014b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b62:	1884      	adds	r4, r0, r2
 8014b64:	f8c7 4670 	str.w	r4, [r7, #1648]	; 0x670
 8014b68:	eb41 0303 	adc.w	r3, r1, r3
 8014b6c:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
 8014b70:	2305      	movs	r3, #5
 8014b72:	00da      	lsls	r2, r3, #3
 8014b74:	f641 6324 	movw	r3, #7716	; 0x1e24
 8014b78:	443b      	add	r3, r7
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	4413      	add	r3, r2
 8014b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b82:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8014b86:	6809      	ldr	r1, [r1, #0]
 8014b88:	3118      	adds	r1, #24
 8014b8a:	f507 60ce 	add.w	r0, r7, #1648	; 0x670
 8014b8e:	e9d0 4500 	ldrd	r4, r5, [r0]
 8014b92:	4620      	mov	r0, r4
 8014b94:	1880      	adds	r0, r0, r2
 8014b96:	f8c7 0668 	str.w	r0, [r7, #1640]	; 0x668
 8014b9a:	4628      	mov	r0, r5
 8014b9c:	eb43 0000 	adc.w	r0, r3, r0
 8014ba0:	f8c7 066c 	str.w	r0, [r7, #1644]	; 0x66c
 8014ba4:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8014ba8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8014bac:	e9c1 3400 	strd	r3, r4, [r1]
 8014bb0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	3378      	adds	r3, #120	; 0x78
 8014bb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014bbc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014bc0:	681b      	ldr	r3, [r3, #0]
 8014bc2:	3318      	adds	r3, #24
 8014bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bc8:	ea80 0402 	eor.w	r4, r0, r2
 8014bcc:	f8c7 4660 	str.w	r4, [r7, #1632]	; 0x660
 8014bd0:	404b      	eors	r3, r1
 8014bd2:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 8014bd6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8014be0:	2210      	movs	r2, #16
 8014be2:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8014be6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014bea:	f7f3 fca9 	bl	8008540 <rotr64>
 8014bee:	4602      	mov	r2, r0
 8014bf0:	460b      	mov	r3, r1
 8014bf2:	e9c4 2300 	strd	r2, r3, [r4]
 8014bf6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	3358      	adds	r3, #88	; 0x58
 8014bfe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8014c02:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	3378      	adds	r3, #120	; 0x78
 8014c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c0e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8014c12:	6809      	ldr	r1, [r1, #0]
 8014c14:	3158      	adds	r1, #88	; 0x58
 8014c16:	18a0      	adds	r0, r4, r2
 8014c18:	f8c7 0658 	str.w	r0, [r7, #1624]	; 0x658
 8014c1c:	eb45 0303 	adc.w	r3, r5, r3
 8014c20:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8014c24:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8014c28:	e9d3 3400 	ldrd	r3, r4, [r3]
 8014c2c:	e9c1 3400 	strd	r3, r4, [r1]
 8014c30:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	3338      	adds	r3, #56	; 0x38
 8014c38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014c3c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	3358      	adds	r3, #88	; 0x58
 8014c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c48:	ea80 0402 	eor.w	r4, r0, r2
 8014c4c:	f8c7 4650 	str.w	r4, [r7, #1616]	; 0x650
 8014c50:	404b      	eors	r3, r1
 8014c52:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
 8014c56:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8014c60:	223f      	movs	r2, #63	; 0x3f
 8014c62:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8014c66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014c6a:	f7f3 fc69 	bl	8008540 <rotr64>
 8014c6e:	4602      	mov	r2, r0
 8014c70:	460b      	mov	r3, r1
 8014c72:	e9c4 2300 	strd	r2, r3, [r4]
 8014c76:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014c80:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	3328      	adds	r3, #40	; 0x28
 8014c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c8c:	1884      	adds	r4, r0, r2
 8014c8e:	f8c7 4648 	str.w	r4, [r7, #1608]	; 0x648
 8014c92:	eb41 0303 	adc.w	r3, r1, r3
 8014c96:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
 8014c9a:	230f      	movs	r3, #15
 8014c9c:	00da      	lsls	r2, r3, #3
 8014c9e:	f641 6324 	movw	r3, #7716	; 0x1e24
 8014ca2:	443b      	add	r3, r7
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	4413      	add	r3, r2
 8014ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cac:	f507 61c9 	add.w	r1, r7, #1608	; 0x648
 8014cb0:	e9d1 4500 	ldrd	r4, r5, [r1]
 8014cb4:	4621      	mov	r1, r4
 8014cb6:	1889      	adds	r1, r1, r2
 8014cb8:	f8c7 1640 	str.w	r1, [r7, #1600]	; 0x640
 8014cbc:	4629      	mov	r1, r5
 8014cbe:	eb43 0101 	adc.w	r1, r3, r1
 8014cc2:	f8c7 1644 	str.w	r1, [r7, #1604]	; 0x644
 8014cc6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8014cd0:	e9d2 1200 	ldrd	r1, r2, [r2]
 8014cd4:	e9c3 1200 	strd	r1, r2, [r3]
 8014cd8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	3378      	adds	r3, #120	; 0x78
 8014ce0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014ce4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cee:	ea80 0402 	eor.w	r4, r0, r2
 8014cf2:	f8c7 4638 	str.w	r4, [r7, #1592]	; 0x638
 8014cf6:	404b      	eors	r3, r1
 8014cf8:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
 8014cfc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8014d06:	2220      	movs	r2, #32
 8014d08:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8014d0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014d10:	f7f3 fc16 	bl	8008540 <rotr64>
 8014d14:	4602      	mov	r2, r0
 8014d16:	460b      	mov	r3, r1
 8014d18:	e9c4 2300 	strd	r2, r3, [r4]
 8014d1c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	3350      	adds	r3, #80	; 0x50
 8014d24:	e9d3 4500 	ldrd	r4, r5, [r3]
 8014d28:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	3378      	adds	r3, #120	; 0x78
 8014d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d34:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8014d38:	6809      	ldr	r1, [r1, #0]
 8014d3a:	3150      	adds	r1, #80	; 0x50
 8014d3c:	18a0      	adds	r0, r4, r2
 8014d3e:	f8c7 0630 	str.w	r0, [r7, #1584]	; 0x630
 8014d42:	eb45 0303 	adc.w	r3, r5, r3
 8014d46:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
 8014d4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014d4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8014d52:	e9c1 3400 	strd	r3, r4, [r1]
 8014d56:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	3328      	adds	r3, #40	; 0x28
 8014d5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014d62:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	3350      	adds	r3, #80	; 0x50
 8014d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d6e:	ea80 0402 	eor.w	r4, r0, r2
 8014d72:	f8c7 4628 	str.w	r4, [r7, #1576]	; 0x628
 8014d76:	404b      	eors	r3, r1
 8014d78:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 8014d7c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8014d86:	2218      	movs	r2, #24
 8014d88:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8014d8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014d90:	f7f3 fbd6 	bl	8008540 <rotr64>
 8014d94:	4602      	mov	r2, r0
 8014d96:	460b      	mov	r3, r1
 8014d98:	e9c4 2300 	strd	r2, r3, [r4]
 8014d9c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014da0:	681b      	ldr	r3, [r3, #0]
 8014da2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014da6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	3328      	adds	r3, #40	; 0x28
 8014dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014db2:	1884      	adds	r4, r0, r2
 8014db4:	f8c7 4620 	str.w	r4, [r7, #1568]	; 0x620
 8014db8:	eb41 0303 	adc.w	r3, r1, r3
 8014dbc:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
 8014dc0:	230b      	movs	r3, #11
 8014dc2:	00da      	lsls	r2, r3, #3
 8014dc4:	f641 6324 	movw	r3, #7716	; 0x1e24
 8014dc8:	443b      	add	r3, r7
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	4413      	add	r3, r2
 8014dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dd2:	f507 61c4 	add.w	r1, r7, #1568	; 0x620
 8014dd6:	e9d1 4500 	ldrd	r4, r5, [r1]
 8014dda:	4621      	mov	r1, r4
 8014ddc:	1889      	adds	r1, r1, r2
 8014dde:	f8c7 1618 	str.w	r1, [r7, #1560]	; 0x618
 8014de2:	4629      	mov	r1, r5
 8014de4:	eb43 0101 	adc.w	r1, r3, r1
 8014de8:	f8c7 161c 	str.w	r1, [r7, #1564]	; 0x61c
 8014dec:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	f507 62c3 	add.w	r2, r7, #1560	; 0x618
 8014df6:	e9d2 1200 	ldrd	r1, r2, [r2]
 8014dfa:	e9c3 1200 	strd	r1, r2, [r3]
 8014dfe:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014e02:	681b      	ldr	r3, [r3, #0]
 8014e04:	3378      	adds	r3, #120	; 0x78
 8014e06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014e0a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e14:	ea80 0402 	eor.w	r4, r0, r2
 8014e18:	f8c7 4610 	str.w	r4, [r7, #1552]	; 0x610
 8014e1c:	404b      	eors	r3, r1
 8014e1e:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 8014e22:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8014e2c:	2210      	movs	r2, #16
 8014e2e:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8014e32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014e36:	f7f3 fb83 	bl	8008540 <rotr64>
 8014e3a:	4602      	mov	r2, r0
 8014e3c:	460b      	mov	r3, r1
 8014e3e:	e9c4 2300 	strd	r2, r3, [r4]
 8014e42:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	3350      	adds	r3, #80	; 0x50
 8014e4a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8014e4e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	3378      	adds	r3, #120	; 0x78
 8014e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e5a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8014e5e:	6809      	ldr	r1, [r1, #0]
 8014e60:	3150      	adds	r1, #80	; 0x50
 8014e62:	18a0      	adds	r0, r4, r2
 8014e64:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
 8014e68:	eb45 0303 	adc.w	r3, r5, r3
 8014e6c:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 8014e70:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 8014e74:	e9d3 3400 	ldrd	r3, r4, [r3]
 8014e78:	e9c1 3400 	strd	r3, r4, [r1]
 8014e7c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	3328      	adds	r3, #40	; 0x28
 8014e84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014e88:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014e8c:	681b      	ldr	r3, [r3, #0]
 8014e8e:	3350      	adds	r3, #80	; 0x50
 8014e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e94:	ea80 0402 	eor.w	r4, r0, r2
 8014e98:	f8c7 4600 	str.w	r4, [r7, #1536]	; 0x600
 8014e9c:	404b      	eors	r3, r1
 8014e9e:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 8014ea2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8014eac:	223f      	movs	r2, #63	; 0x3f
 8014eae:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8014eb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014eb6:	f7f3 fb43 	bl	8008540 <rotr64>
 8014eba:	4602      	mov	r2, r0
 8014ebc:	460b      	mov	r3, r1
 8014ebe:	e9c4 2300 	strd	r2, r3, [r4]
 8014ec2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014ec6:	681b      	ldr	r3, [r3, #0]
 8014ec8:	3308      	adds	r3, #8
 8014eca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014ece:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	3330      	adds	r3, #48	; 0x30
 8014ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014eda:	1884      	adds	r4, r0, r2
 8014edc:	f8c7 45f8 	str.w	r4, [r7, #1528]	; 0x5f8
 8014ee0:	eb41 0303 	adc.w	r3, r1, r3
 8014ee4:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 8014ee8:	2309      	movs	r3, #9
 8014eea:	00da      	lsls	r2, r3, #3
 8014eec:	f641 6324 	movw	r3, #7716	; 0x1e24
 8014ef0:	443b      	add	r3, r7
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	4413      	add	r3, r2
 8014ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014efa:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8014efe:	6809      	ldr	r1, [r1, #0]
 8014f00:	3108      	adds	r1, #8
 8014f02:	f507 60bf 	add.w	r0, r7, #1528	; 0x5f8
 8014f06:	e9d0 4500 	ldrd	r4, r5, [r0]
 8014f0a:	4620      	mov	r0, r4
 8014f0c:	1880      	adds	r0, r0, r2
 8014f0e:	f8c7 05f0 	str.w	r0, [r7, #1520]	; 0x5f0
 8014f12:	4628      	mov	r0, r5
 8014f14:	eb43 0000 	adc.w	r0, r3, r0
 8014f18:	f8c7 05f4 	str.w	r0, [r7, #1524]	; 0x5f4
 8014f1c:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8014f20:	e9d3 3400 	ldrd	r3, r4, [r3]
 8014f24:	e9c1 3400 	strd	r3, r4, [r1]
 8014f28:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014f2c:	681b      	ldr	r3, [r3, #0]
 8014f2e:	3360      	adds	r3, #96	; 0x60
 8014f30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014f34:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	3308      	adds	r3, #8
 8014f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f40:	ea80 0402 	eor.w	r4, r0, r2
 8014f44:	f8c7 45e8 	str.w	r4, [r7, #1512]	; 0x5e8
 8014f48:	404b      	eors	r3, r1
 8014f4a:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
 8014f4e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8014f58:	2220      	movs	r2, #32
 8014f5a:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 8014f5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014f62:	f7f3 faed 	bl	8008540 <rotr64>
 8014f66:	4602      	mov	r2, r0
 8014f68:	460b      	mov	r3, r1
 8014f6a:	e9c4 2300 	strd	r2, r3, [r4]
 8014f6e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	3358      	adds	r3, #88	; 0x58
 8014f76:	e9d3 4500 	ldrd	r4, r5, [r3]
 8014f7a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	3360      	adds	r3, #96	; 0x60
 8014f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f86:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8014f8a:	6809      	ldr	r1, [r1, #0]
 8014f8c:	3158      	adds	r1, #88	; 0x58
 8014f8e:	18a0      	adds	r0, r4, r2
 8014f90:	f8c7 05e0 	str.w	r0, [r7, #1504]	; 0x5e0
 8014f94:	eb45 0303 	adc.w	r3, r5, r3
 8014f98:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
 8014f9c:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8014fa0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8014fa4:	e9c1 3400 	strd	r3, r4, [r1]
 8014fa8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	3330      	adds	r3, #48	; 0x30
 8014fb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014fb4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014fb8:	681b      	ldr	r3, [r3, #0]
 8014fba:	3358      	adds	r3, #88	; 0x58
 8014fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fc0:	ea80 0402 	eor.w	r4, r0, r2
 8014fc4:	f8c7 45d8 	str.w	r4, [r7, #1496]	; 0x5d8
 8014fc8:	404b      	eors	r3, r1
 8014fca:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
 8014fce:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8014fd8:	2218      	movs	r2, #24
 8014fda:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 8014fde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014fe2:	f7f3 faad 	bl	8008540 <rotr64>
 8014fe6:	4602      	mov	r2, r0
 8014fe8:	460b      	mov	r3, r1
 8014fea:	e9c4 2300 	strd	r2, r3, [r4]
 8014fee:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	3308      	adds	r3, #8
 8014ff6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014ffa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	3330      	adds	r3, #48	; 0x30
 8015002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015006:	1884      	adds	r4, r0, r2
 8015008:	f8c7 45d0 	str.w	r4, [r7, #1488]	; 0x5d0
 801500c:	eb41 0303 	adc.w	r3, r1, r3
 8015010:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 8015014:	230e      	movs	r3, #14
 8015016:	00da      	lsls	r2, r3, #3
 8015018:	f641 6324 	movw	r3, #7716	; 0x1e24
 801501c:	443b      	add	r3, r7
 801501e:	681b      	ldr	r3, [r3, #0]
 8015020:	4413      	add	r3, r2
 8015022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015026:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801502a:	6809      	ldr	r1, [r1, #0]
 801502c:	3108      	adds	r1, #8
 801502e:	f507 60ba 	add.w	r0, r7, #1488	; 0x5d0
 8015032:	e9d0 4500 	ldrd	r4, r5, [r0]
 8015036:	4620      	mov	r0, r4
 8015038:	1880      	adds	r0, r0, r2
 801503a:	f8c7 05c8 	str.w	r0, [r7, #1480]	; 0x5c8
 801503e:	4628      	mov	r0, r5
 8015040:	eb43 0000 	adc.w	r0, r3, r0
 8015044:	f8c7 05cc 	str.w	r0, [r7, #1484]	; 0x5cc
 8015048:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 801504c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8015050:	e9c1 3400 	strd	r3, r4, [r1]
 8015054:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	3360      	adds	r3, #96	; 0x60
 801505c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015060:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	3308      	adds	r3, #8
 8015068:	e9d3 2300 	ldrd	r2, r3, [r3]
 801506c:	ea80 0402 	eor.w	r4, r0, r2
 8015070:	f8c7 45c0 	str.w	r4, [r7, #1472]	; 0x5c0
 8015074:	404b      	eors	r3, r1
 8015076:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 801507a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8015084:	2210      	movs	r2, #16
 8015086:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 801508a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801508e:	f7f3 fa57 	bl	8008540 <rotr64>
 8015092:	4602      	mov	r2, r0
 8015094:	460b      	mov	r3, r1
 8015096:	e9c4 2300 	strd	r2, r3, [r4]
 801509a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	3358      	adds	r3, #88	; 0x58
 80150a2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80150a6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80150aa:	681b      	ldr	r3, [r3, #0]
 80150ac:	3360      	adds	r3, #96	; 0x60
 80150ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150b2:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80150b6:	6809      	ldr	r1, [r1, #0]
 80150b8:	3158      	adds	r1, #88	; 0x58
 80150ba:	18a0      	adds	r0, r4, r2
 80150bc:	f8c7 05b8 	str.w	r0, [r7, #1464]	; 0x5b8
 80150c0:	eb45 0303 	adc.w	r3, r5, r3
 80150c4:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 80150c8:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80150cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80150d0:	e9c1 3400 	strd	r3, r4, [r1]
 80150d4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	3330      	adds	r3, #48	; 0x30
 80150dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80150e0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	3358      	adds	r3, #88	; 0x58
 80150e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150ec:	ea80 0402 	eor.w	r4, r0, r2
 80150f0:	f8c7 45b0 	str.w	r4, [r7, #1456]	; 0x5b0
 80150f4:	404b      	eors	r3, r1
 80150f6:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 80150fa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8015104:	223f      	movs	r2, #63	; 0x3f
 8015106:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 801510a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801510e:	f7f3 fa17 	bl	8008540 <rotr64>
 8015112:	4602      	mov	r2, r0
 8015114:	460b      	mov	r3, r1
 8015116:	e9c4 2300 	strd	r2, r3, [r4]
 801511a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	3310      	adds	r3, #16
 8015122:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015126:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	3338      	adds	r3, #56	; 0x38
 801512e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015132:	1884      	adds	r4, r0, r2
 8015134:	f8c7 45a8 	str.w	r4, [r7, #1448]	; 0x5a8
 8015138:	eb41 0303 	adc.w	r3, r1, r3
 801513c:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 8015140:	2303      	movs	r3, #3
 8015142:	00da      	lsls	r2, r3, #3
 8015144:	f641 6324 	movw	r3, #7716	; 0x1e24
 8015148:	443b      	add	r3, r7
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	4413      	add	r3, r2
 801514e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015152:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8015156:	6809      	ldr	r1, [r1, #0]
 8015158:	3110      	adds	r1, #16
 801515a:	f507 60b5 	add.w	r0, r7, #1448	; 0x5a8
 801515e:	e9d0 4500 	ldrd	r4, r5, [r0]
 8015162:	4620      	mov	r0, r4
 8015164:	1880      	adds	r0, r0, r2
 8015166:	f8c7 05a0 	str.w	r0, [r7, #1440]	; 0x5a0
 801516a:	4628      	mov	r0, r5
 801516c:	eb43 0000 	adc.w	r0, r3, r0
 8015170:	f8c7 05a4 	str.w	r0, [r7, #1444]	; 0x5a4
 8015174:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 8015178:	e9d3 3400 	ldrd	r3, r4, [r3]
 801517c:	e9c1 3400 	strd	r3, r4, [r1]
 8015180:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	3368      	adds	r3, #104	; 0x68
 8015188:	e9d3 0100 	ldrd	r0, r1, [r3]
 801518c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	3310      	adds	r3, #16
 8015194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015198:	ea80 0402 	eor.w	r4, r0, r2
 801519c:	f8c7 4598 	str.w	r4, [r7, #1432]	; 0x598
 80151a0:	404b      	eors	r3, r1
 80151a2:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 80151a6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	f103 0468 	add.w	r4, r3, #104	; 0x68
 80151b0:	2220      	movs	r2, #32
 80151b2:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 80151b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80151ba:	f7f3 f9c1 	bl	8008540 <rotr64>
 80151be:	4602      	mov	r2, r0
 80151c0:	460b      	mov	r3, r1
 80151c2:	e9c4 2300 	strd	r2, r3, [r4]
 80151c6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	3340      	adds	r3, #64	; 0x40
 80151ce:	e9d3 4500 	ldrd	r4, r5, [r3]
 80151d2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	3368      	adds	r3, #104	; 0x68
 80151da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151de:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80151e2:	6809      	ldr	r1, [r1, #0]
 80151e4:	3140      	adds	r1, #64	; 0x40
 80151e6:	18a0      	adds	r0, r4, r2
 80151e8:	f8c7 0590 	str.w	r0, [r7, #1424]	; 0x590
 80151ec:	eb45 0303 	adc.w	r3, r5, r3
 80151f0:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 80151f4:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 80151f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80151fc:	e9c1 3400 	strd	r3, r4, [r1]
 8015200:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015204:	681b      	ldr	r3, [r3, #0]
 8015206:	3338      	adds	r3, #56	; 0x38
 8015208:	e9d3 0100 	ldrd	r0, r1, [r3]
 801520c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	3340      	adds	r3, #64	; 0x40
 8015214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015218:	ea80 0402 	eor.w	r4, r0, r2
 801521c:	f8c7 4588 	str.w	r4, [r7, #1416]	; 0x588
 8015220:	404b      	eors	r3, r1
 8015222:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 8015226:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8015230:	2218      	movs	r2, #24
 8015232:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 8015236:	e9d3 0100 	ldrd	r0, r1, [r3]
 801523a:	f7f3 f981 	bl	8008540 <rotr64>
 801523e:	4602      	mov	r2, r0
 8015240:	460b      	mov	r3, r1
 8015242:	e9c4 2300 	strd	r2, r3, [r4]
 8015246:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801524a:	681b      	ldr	r3, [r3, #0]
 801524c:	3310      	adds	r3, #16
 801524e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015252:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	3338      	adds	r3, #56	; 0x38
 801525a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801525e:	1884      	adds	r4, r0, r2
 8015260:	f8c7 4580 	str.w	r4, [r7, #1408]	; 0x580
 8015264:	eb41 0303 	adc.w	r3, r1, r3
 8015268:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 801526c:	230c      	movs	r3, #12
 801526e:	00da      	lsls	r2, r3, #3
 8015270:	f641 6324 	movw	r3, #7716	; 0x1e24
 8015274:	443b      	add	r3, r7
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	4413      	add	r3, r2
 801527a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801527e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8015282:	6809      	ldr	r1, [r1, #0]
 8015284:	3110      	adds	r1, #16
 8015286:	f507 60b0 	add.w	r0, r7, #1408	; 0x580
 801528a:	e9d0 4500 	ldrd	r4, r5, [r0]
 801528e:	4620      	mov	r0, r4
 8015290:	1880      	adds	r0, r0, r2
 8015292:	f8c7 0578 	str.w	r0, [r7, #1400]	; 0x578
 8015296:	4628      	mov	r0, r5
 8015298:	eb43 0000 	adc.w	r0, r3, r0
 801529c:	f8c7 057c 	str.w	r0, [r7, #1404]	; 0x57c
 80152a0:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 80152a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80152a8:	e9c1 3400 	strd	r3, r4, [r1]
 80152ac:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	3368      	adds	r3, #104	; 0x68
 80152b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80152b8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	3310      	adds	r3, #16
 80152c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152c4:	ea80 0402 	eor.w	r4, r0, r2
 80152c8:	f8c7 4570 	str.w	r4, [r7, #1392]	; 0x570
 80152cc:	404b      	eors	r3, r1
 80152ce:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 80152d2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80152d6:	681b      	ldr	r3, [r3, #0]
 80152d8:	f103 0468 	add.w	r4, r3, #104	; 0x68
 80152dc:	2210      	movs	r2, #16
 80152de:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80152e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80152e6:	f7f3 f92b 	bl	8008540 <rotr64>
 80152ea:	4602      	mov	r2, r0
 80152ec:	460b      	mov	r3, r1
 80152ee:	e9c4 2300 	strd	r2, r3, [r4]
 80152f2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	3340      	adds	r3, #64	; 0x40
 80152fa:	e9d3 4500 	ldrd	r4, r5, [r3]
 80152fe:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	3368      	adds	r3, #104	; 0x68
 8015306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801530a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801530e:	6809      	ldr	r1, [r1, #0]
 8015310:	3140      	adds	r1, #64	; 0x40
 8015312:	18a0      	adds	r0, r4, r2
 8015314:	f8c7 0568 	str.w	r0, [r7, #1384]	; 0x568
 8015318:	eb45 0303 	adc.w	r3, r5, r3
 801531c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8015320:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8015324:	e9d3 3400 	ldrd	r3, r4, [r3]
 8015328:	e9c1 3400 	strd	r3, r4, [r1]
 801532c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	3338      	adds	r3, #56	; 0x38
 8015334:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015338:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801533c:	681b      	ldr	r3, [r3, #0]
 801533e:	3340      	adds	r3, #64	; 0x40
 8015340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015344:	ea80 0402 	eor.w	r4, r0, r2
 8015348:	f8c7 4560 	str.w	r4, [r7, #1376]	; 0x560
 801534c:	404b      	eors	r3, r1
 801534e:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 8015352:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	f103 0438 	add.w	r4, r3, #56	; 0x38
 801535c:	223f      	movs	r2, #63	; 0x3f
 801535e:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8015362:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015366:	f7f3 f8eb 	bl	8008540 <rotr64>
 801536a:	4602      	mov	r2, r0
 801536c:	460b      	mov	r3, r1
 801536e:	e9c4 2300 	strd	r2, r3, [r4]
 8015372:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	3318      	adds	r3, #24
 801537a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801537e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	3320      	adds	r3, #32
 8015386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801538a:	1884      	adds	r4, r0, r2
 801538c:	f8c7 4558 	str.w	r4, [r7, #1368]	; 0x558
 8015390:	eb41 0303 	adc.w	r3, r1, r3
 8015394:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 8015398:	230d      	movs	r3, #13
 801539a:	00da      	lsls	r2, r3, #3
 801539c:	f641 6324 	movw	r3, #7716	; 0x1e24
 80153a0:	443b      	add	r3, r7
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	4413      	add	r3, r2
 80153a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153aa:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80153ae:	6809      	ldr	r1, [r1, #0]
 80153b0:	3118      	adds	r1, #24
 80153b2:	f507 60ab 	add.w	r0, r7, #1368	; 0x558
 80153b6:	e9d0 4500 	ldrd	r4, r5, [r0]
 80153ba:	4620      	mov	r0, r4
 80153bc:	1880      	adds	r0, r0, r2
 80153be:	f8c7 0550 	str.w	r0, [r7, #1360]	; 0x550
 80153c2:	4628      	mov	r0, r5
 80153c4:	eb43 0000 	adc.w	r0, r3, r0
 80153c8:	f8c7 0554 	str.w	r0, [r7, #1364]	; 0x554
 80153cc:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 80153d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80153d4:	e9c1 3400 	strd	r3, r4, [r1]
 80153d8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	3370      	adds	r3, #112	; 0x70
 80153e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80153e4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	3318      	adds	r3, #24
 80153ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153f0:	ea80 0402 	eor.w	r4, r0, r2
 80153f4:	f8c7 4548 	str.w	r4, [r7, #1352]	; 0x548
 80153f8:	404b      	eors	r3, r1
 80153fa:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 80153fe:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8015408:	2220      	movs	r2, #32
 801540a:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 801540e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015412:	f7f3 f895 	bl	8008540 <rotr64>
 8015416:	4602      	mov	r2, r0
 8015418:	460b      	mov	r3, r1
 801541a:	e9c4 2300 	strd	r2, r3, [r4]
 801541e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	3348      	adds	r3, #72	; 0x48
 8015426:	e9d3 4500 	ldrd	r4, r5, [r3]
 801542a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	3370      	adds	r3, #112	; 0x70
 8015432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015436:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801543a:	6809      	ldr	r1, [r1, #0]
 801543c:	3148      	adds	r1, #72	; 0x48
 801543e:	18a0      	adds	r0, r4, r2
 8015440:	f8c7 0540 	str.w	r0, [r7, #1344]	; 0x540
 8015444:	eb45 0303 	adc.w	r3, r5, r3
 8015448:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 801544c:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8015450:	e9d3 3400 	ldrd	r3, r4, [r3]
 8015454:	e9c1 3400 	strd	r3, r4, [r1]
 8015458:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	3320      	adds	r3, #32
 8015460:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015464:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	3348      	adds	r3, #72	; 0x48
 801546c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015470:	ea80 0402 	eor.w	r4, r0, r2
 8015474:	f8c7 4538 	str.w	r4, [r7, #1336]	; 0x538
 8015478:	404b      	eors	r3, r1
 801547a:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 801547e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	f103 0420 	add.w	r4, r3, #32
 8015488:	2218      	movs	r2, #24
 801548a:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 801548e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015492:	f7f3 f855 	bl	8008540 <rotr64>
 8015496:	4602      	mov	r2, r0
 8015498:	460b      	mov	r3, r1
 801549a:	e9c4 2300 	strd	r2, r3, [r4]
 801549e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	3318      	adds	r3, #24
 80154a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80154aa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	3320      	adds	r3, #32
 80154b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154b6:	1884      	adds	r4, r0, r2
 80154b8:	f8c7 4530 	str.w	r4, [r7, #1328]	; 0x530
 80154bc:	eb41 0303 	adc.w	r3, r1, r3
 80154c0:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 80154c4:	2300      	movs	r3, #0
 80154c6:	00da      	lsls	r2, r3, #3
 80154c8:	f641 6324 	movw	r3, #7716	; 0x1e24
 80154cc:	443b      	add	r3, r7
 80154ce:	681b      	ldr	r3, [r3, #0]
 80154d0:	4413      	add	r3, r2
 80154d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154d6:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80154da:	6809      	ldr	r1, [r1, #0]
 80154dc:	3118      	adds	r1, #24
 80154de:	f507 60a6 	add.w	r0, r7, #1328	; 0x530
 80154e2:	e9d0 4500 	ldrd	r4, r5, [r0]
 80154e6:	4620      	mov	r0, r4
 80154e8:	1880      	adds	r0, r0, r2
 80154ea:	f8c7 0528 	str.w	r0, [r7, #1320]	; 0x528
 80154ee:	4628      	mov	r0, r5
 80154f0:	eb43 0000 	adc.w	r0, r3, r0
 80154f4:	f8c7 052c 	str.w	r0, [r7, #1324]	; 0x52c
 80154f8:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80154fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8015500:	e9c1 3400 	strd	r3, r4, [r1]
 8015504:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	3370      	adds	r3, #112	; 0x70
 801550c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015510:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	3318      	adds	r3, #24
 8015518:	e9d3 2300 	ldrd	r2, r3, [r3]
 801551c:	ea80 0402 	eor.w	r4, r0, r2
 8015520:	f8c7 4520 	str.w	r4, [r7, #1312]	; 0x520
 8015524:	404b      	eors	r3, r1
 8015526:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 801552a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801552e:	681b      	ldr	r3, [r3, #0]
 8015530:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8015534:	2210      	movs	r2, #16
 8015536:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801553a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801553e:	f7f2 ffff 	bl	8008540 <rotr64>
 8015542:	4602      	mov	r2, r0
 8015544:	460b      	mov	r3, r1
 8015546:	e9c4 2300 	strd	r2, r3, [r4]
 801554a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	3348      	adds	r3, #72	; 0x48
 8015552:	e9d3 4500 	ldrd	r4, r5, [r3]
 8015556:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	3370      	adds	r3, #112	; 0x70
 801555e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015562:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8015566:	6809      	ldr	r1, [r1, #0]
 8015568:	3148      	adds	r1, #72	; 0x48
 801556a:	18a0      	adds	r0, r4, r2
 801556c:	f8c7 0518 	str.w	r0, [r7, #1304]	; 0x518
 8015570:	eb45 0303 	adc.w	r3, r5, r3
 8015574:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 8015578:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 801557c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8015580:	e9c1 3400 	strd	r3, r4, [r1]
 8015584:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015588:	681b      	ldr	r3, [r3, #0]
 801558a:	3320      	adds	r3, #32
 801558c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015590:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	3348      	adds	r3, #72	; 0x48
 8015598:	e9d3 2300 	ldrd	r2, r3, [r3]
 801559c:	ea80 0402 	eor.w	r4, r0, r2
 80155a0:	f8c7 4510 	str.w	r4, [r7, #1296]	; 0x510
 80155a4:	404b      	eors	r3, r1
 80155a6:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 80155aa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	f103 0420 	add.w	r4, r3, #32
 80155b4:	223f      	movs	r2, #63	; 0x3f
 80155b6:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80155ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80155be:	f7f2 ffbf 	bl	8008540 <rotr64>
 80155c2:	4602      	mov	r2, r0
 80155c4:	460b      	mov	r3, r1
 80155c6:	e9c4 2300 	strd	r2, r3, [r4]
  ROUND( 10 );
 80155ca:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80155d4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	3320      	adds	r3, #32
 80155dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155e0:	1884      	adds	r4, r0, r2
 80155e2:	f8c7 4508 	str.w	r4, [r7, #1288]	; 0x508
 80155e6:	eb41 0303 	adc.w	r3, r1, r3
 80155ea:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 80155ee:	2300      	movs	r3, #0
 80155f0:	00da      	lsls	r2, r3, #3
 80155f2:	f641 6324 	movw	r3, #7716	; 0x1e24
 80155f6:	443b      	add	r3, r7
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	4413      	add	r3, r2
 80155fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015600:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 8015604:	e9d1 4500 	ldrd	r4, r5, [r1]
 8015608:	4621      	mov	r1, r4
 801560a:	1889      	adds	r1, r1, r2
 801560c:	f8c7 1500 	str.w	r1, [r7, #1280]	; 0x500
 8015610:	4629      	mov	r1, r5
 8015612:	eb43 0101 	adc.w	r1, r3, r1
 8015616:	f8c7 1504 	str.w	r1, [r7, #1284]	; 0x504
 801561a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 8015624:	e9d2 1200 	ldrd	r1, r2, [r2]
 8015628:	e9c3 1200 	strd	r1, r2, [r3]
 801562c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015630:	681b      	ldr	r3, [r3, #0]
 8015632:	3360      	adds	r3, #96	; 0x60
 8015634:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015638:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015642:	ea80 0402 	eor.w	r4, r0, r2
 8015646:	f8c7 44f8 	str.w	r4, [r7, #1272]	; 0x4f8
 801564a:	404b      	eors	r3, r1
 801564c:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8015650:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	f103 0460 	add.w	r4, r3, #96	; 0x60
 801565a:	2220      	movs	r2, #32
 801565c:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 8015660:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015664:	f7f2 ff6c 	bl	8008540 <rotr64>
 8015668:	4602      	mov	r2, r0
 801566a:	460b      	mov	r3, r1
 801566c:	e9c4 2300 	strd	r2, r3, [r4]
 8015670:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	3340      	adds	r3, #64	; 0x40
 8015678:	e9d3 4500 	ldrd	r4, r5, [r3]
 801567c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	3360      	adds	r3, #96	; 0x60
 8015684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015688:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801568c:	6809      	ldr	r1, [r1, #0]
 801568e:	3140      	adds	r1, #64	; 0x40
 8015690:	18a0      	adds	r0, r4, r2
 8015692:	f8c7 04f0 	str.w	r0, [r7, #1264]	; 0x4f0
 8015696:	eb45 0303 	adc.w	r3, r5, r3
 801569a:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 801569e:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80156a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80156a6:	e9c1 3400 	strd	r3, r4, [r1]
 80156aa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	3320      	adds	r3, #32
 80156b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80156b6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80156ba:	681b      	ldr	r3, [r3, #0]
 80156bc:	3340      	adds	r3, #64	; 0x40
 80156be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156c2:	ea80 0402 	eor.w	r4, r0, r2
 80156c6:	f8c7 44e8 	str.w	r4, [r7, #1256]	; 0x4e8
 80156ca:	404b      	eors	r3, r1
 80156cc:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 80156d0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	f103 0420 	add.w	r4, r3, #32
 80156da:	2218      	movs	r2, #24
 80156dc:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80156e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80156e4:	f7f2 ff2c 	bl	8008540 <rotr64>
 80156e8:	4602      	mov	r2, r0
 80156ea:	460b      	mov	r3, r1
 80156ec:	e9c4 2300 	strd	r2, r3, [r4]
 80156f0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80156fa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	3320      	adds	r3, #32
 8015702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015706:	1884      	adds	r4, r0, r2
 8015708:	f8c7 44e0 	str.w	r4, [r7, #1248]	; 0x4e0
 801570c:	eb41 0303 	adc.w	r3, r1, r3
 8015710:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 8015714:	2301      	movs	r3, #1
 8015716:	00da      	lsls	r2, r3, #3
 8015718:	f641 6324 	movw	r3, #7716	; 0x1e24
 801571c:	443b      	add	r3, r7
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	4413      	add	r3, r2
 8015722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015726:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 801572a:	e9d1 4500 	ldrd	r4, r5, [r1]
 801572e:	4621      	mov	r1, r4
 8015730:	1889      	adds	r1, r1, r2
 8015732:	f8c7 14d8 	str.w	r1, [r7, #1240]	; 0x4d8
 8015736:	4629      	mov	r1, r5
 8015738:	eb43 0101 	adc.w	r1, r3, r1
 801573c:	f8c7 14dc 	str.w	r1, [r7, #1244]	; 0x4dc
 8015740:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015744:	681b      	ldr	r3, [r3, #0]
 8015746:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 801574a:	e9d2 1200 	ldrd	r1, r2, [r2]
 801574e:	e9c3 1200 	strd	r1, r2, [r3]
 8015752:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	3360      	adds	r3, #96	; 0x60
 801575a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801575e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015768:	ea80 0402 	eor.w	r4, r0, r2
 801576c:	f8c7 44d0 	str.w	r4, [r7, #1232]	; 0x4d0
 8015770:	404b      	eors	r3, r1
 8015772:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 8015776:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8015780:	2210      	movs	r2, #16
 8015782:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8015786:	e9d3 0100 	ldrd	r0, r1, [r3]
 801578a:	f7f2 fed9 	bl	8008540 <rotr64>
 801578e:	4602      	mov	r2, r0
 8015790:	460b      	mov	r3, r1
 8015792:	e9c4 2300 	strd	r2, r3, [r4]
 8015796:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	3340      	adds	r3, #64	; 0x40
 801579e:	e9d3 4500 	ldrd	r4, r5, [r3]
 80157a2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	3360      	adds	r3, #96	; 0x60
 80157aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157ae:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80157b2:	6809      	ldr	r1, [r1, #0]
 80157b4:	3140      	adds	r1, #64	; 0x40
 80157b6:	18a0      	adds	r0, r4, r2
 80157b8:	f8c7 04c8 	str.w	r0, [r7, #1224]	; 0x4c8
 80157bc:	eb45 0303 	adc.w	r3, r5, r3
 80157c0:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 80157c4:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 80157c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80157cc:	e9c1 3400 	strd	r3, r4, [r1]
 80157d0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	3320      	adds	r3, #32
 80157d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80157dc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	3340      	adds	r3, #64	; 0x40
 80157e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157e8:	ea80 0402 	eor.w	r4, r0, r2
 80157ec:	f8c7 44c0 	str.w	r4, [r7, #1216]	; 0x4c0
 80157f0:	404b      	eors	r3, r1
 80157f2:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 80157f6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	f103 0420 	add.w	r4, r3, #32
 8015800:	223f      	movs	r2, #63	; 0x3f
 8015802:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8015806:	e9d3 0100 	ldrd	r0, r1, [r3]
 801580a:	f7f2 fe99 	bl	8008540 <rotr64>
 801580e:	4602      	mov	r2, r0
 8015810:	460b      	mov	r3, r1
 8015812:	e9c4 2300 	strd	r2, r3, [r4]
 8015816:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	3308      	adds	r3, #8
 801581e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015822:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	3328      	adds	r3, #40	; 0x28
 801582a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801582e:	1884      	adds	r4, r0, r2
 8015830:	f8c7 44b8 	str.w	r4, [r7, #1208]	; 0x4b8
 8015834:	eb41 0303 	adc.w	r3, r1, r3
 8015838:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 801583c:	2302      	movs	r3, #2
 801583e:	00da      	lsls	r2, r3, #3
 8015840:	f641 6324 	movw	r3, #7716	; 0x1e24
 8015844:	443b      	add	r3, r7
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	4413      	add	r3, r2
 801584a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801584e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8015852:	6809      	ldr	r1, [r1, #0]
 8015854:	3108      	adds	r1, #8
 8015856:	f507 6097 	add.w	r0, r7, #1208	; 0x4b8
 801585a:	e9d0 4500 	ldrd	r4, r5, [r0]
 801585e:	4620      	mov	r0, r4
 8015860:	1880      	adds	r0, r0, r2
 8015862:	f8c7 04b0 	str.w	r0, [r7, #1200]	; 0x4b0
 8015866:	4628      	mov	r0, r5
 8015868:	eb43 0000 	adc.w	r0, r3, r0
 801586c:	f8c7 04b4 	str.w	r0, [r7, #1204]	; 0x4b4
 8015870:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8015874:	e9d3 3400 	ldrd	r3, r4, [r3]
 8015878:	e9c1 3400 	strd	r3, r4, [r1]
 801587c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015880:	681b      	ldr	r3, [r3, #0]
 8015882:	3368      	adds	r3, #104	; 0x68
 8015884:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015888:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	3308      	adds	r3, #8
 8015890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015894:	ea80 0402 	eor.w	r4, r0, r2
 8015898:	f8c7 44a8 	str.w	r4, [r7, #1192]	; 0x4a8
 801589c:	404b      	eors	r3, r1
 801589e:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 80158a2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	f103 0468 	add.w	r4, r3, #104	; 0x68
 80158ac:	2220      	movs	r2, #32
 80158ae:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80158b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80158b6:	f7f2 fe43 	bl	8008540 <rotr64>
 80158ba:	4602      	mov	r2, r0
 80158bc:	460b      	mov	r3, r1
 80158be:	e9c4 2300 	strd	r2, r3, [r4]
 80158c2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80158c6:	681b      	ldr	r3, [r3, #0]
 80158c8:	3348      	adds	r3, #72	; 0x48
 80158ca:	e9d3 4500 	ldrd	r4, r5, [r3]
 80158ce:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	3368      	adds	r3, #104	; 0x68
 80158d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158da:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80158de:	6809      	ldr	r1, [r1, #0]
 80158e0:	3148      	adds	r1, #72	; 0x48
 80158e2:	18a0      	adds	r0, r4, r2
 80158e4:	f8c7 04a0 	str.w	r0, [r7, #1184]	; 0x4a0
 80158e8:	eb45 0303 	adc.w	r3, r5, r3
 80158ec:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 80158f0:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80158f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80158f8:	e9c1 3400 	strd	r3, r4, [r1]
 80158fc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015900:	681b      	ldr	r3, [r3, #0]
 8015902:	3328      	adds	r3, #40	; 0x28
 8015904:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015908:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	3348      	adds	r3, #72	; 0x48
 8015910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015914:	ea80 0402 	eor.w	r4, r0, r2
 8015918:	f8c7 4498 	str.w	r4, [r7, #1176]	; 0x498
 801591c:	404b      	eors	r3, r1
 801591e:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 8015922:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	f103 0428 	add.w	r4, r3, #40	; 0x28
 801592c:	2218      	movs	r2, #24
 801592e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8015932:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015936:	f7f2 fe03 	bl	8008540 <rotr64>
 801593a:	4602      	mov	r2, r0
 801593c:	460b      	mov	r3, r1
 801593e:	e9c4 2300 	strd	r2, r3, [r4]
 8015942:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	3308      	adds	r3, #8
 801594a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801594e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	3328      	adds	r3, #40	; 0x28
 8015956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801595a:	1884      	adds	r4, r0, r2
 801595c:	f8c7 4490 	str.w	r4, [r7, #1168]	; 0x490
 8015960:	eb41 0303 	adc.w	r3, r1, r3
 8015964:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 8015968:	2303      	movs	r3, #3
 801596a:	00da      	lsls	r2, r3, #3
 801596c:	f641 6324 	movw	r3, #7716	; 0x1e24
 8015970:	443b      	add	r3, r7
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	4413      	add	r3, r2
 8015976:	e9d3 2300 	ldrd	r2, r3, [r3]
 801597a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801597e:	6809      	ldr	r1, [r1, #0]
 8015980:	3108      	adds	r1, #8
 8015982:	f507 6092 	add.w	r0, r7, #1168	; 0x490
 8015986:	e9d0 4500 	ldrd	r4, r5, [r0]
 801598a:	4620      	mov	r0, r4
 801598c:	1880      	adds	r0, r0, r2
 801598e:	f8c7 0488 	str.w	r0, [r7, #1160]	; 0x488
 8015992:	4628      	mov	r0, r5
 8015994:	eb43 0000 	adc.w	r0, r3, r0
 8015998:	f8c7 048c 	str.w	r0, [r7, #1164]	; 0x48c
 801599c:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 80159a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80159a4:	e9c1 3400 	strd	r3, r4, [r1]
 80159a8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	3368      	adds	r3, #104	; 0x68
 80159b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80159b4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	3308      	adds	r3, #8
 80159bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159c0:	ea80 0402 	eor.w	r4, r0, r2
 80159c4:	f8c7 4480 	str.w	r4, [r7, #1152]	; 0x480
 80159c8:	404b      	eors	r3, r1
 80159ca:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 80159ce:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	f103 0468 	add.w	r4, r3, #104	; 0x68
 80159d8:	2210      	movs	r2, #16
 80159da:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80159de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80159e2:	f7f2 fdad 	bl	8008540 <rotr64>
 80159e6:	4602      	mov	r2, r0
 80159e8:	460b      	mov	r3, r1
 80159ea:	e9c4 2300 	strd	r2, r3, [r4]
 80159ee:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	3348      	adds	r3, #72	; 0x48
 80159f6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80159fa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80159fe:	681b      	ldr	r3, [r3, #0]
 8015a00:	3368      	adds	r3, #104	; 0x68
 8015a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a06:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8015a0a:	6809      	ldr	r1, [r1, #0]
 8015a0c:	3148      	adds	r1, #72	; 0x48
 8015a0e:	18a0      	adds	r0, r4, r2
 8015a10:	f8c7 0478 	str.w	r0, [r7, #1144]	; 0x478
 8015a14:	eb45 0303 	adc.w	r3, r5, r3
 8015a18:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 8015a1c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8015a20:	e9d3 3400 	ldrd	r3, r4, [r3]
 8015a24:	e9c1 3400 	strd	r3, r4, [r1]
 8015a28:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015a2c:	681b      	ldr	r3, [r3, #0]
 8015a2e:	3328      	adds	r3, #40	; 0x28
 8015a30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015a34:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	3348      	adds	r3, #72	; 0x48
 8015a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a40:	ea80 0402 	eor.w	r4, r0, r2
 8015a44:	f8c7 4470 	str.w	r4, [r7, #1136]	; 0x470
 8015a48:	404b      	eors	r3, r1
 8015a4a:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 8015a4e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8015a58:	223f      	movs	r2, #63	; 0x3f
 8015a5a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8015a5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015a62:	f7f2 fd6d 	bl	8008540 <rotr64>
 8015a66:	4602      	mov	r2, r0
 8015a68:	460b      	mov	r3, r1
 8015a6a:	e9c4 2300 	strd	r2, r3, [r4]
 8015a6e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	3310      	adds	r3, #16
 8015a76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015a7a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015a7e:	681b      	ldr	r3, [r3, #0]
 8015a80:	3330      	adds	r3, #48	; 0x30
 8015a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a86:	1884      	adds	r4, r0, r2
 8015a88:	f8c7 4468 	str.w	r4, [r7, #1128]	; 0x468
 8015a8c:	eb41 0303 	adc.w	r3, r1, r3
 8015a90:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 8015a94:	2304      	movs	r3, #4
 8015a96:	00da      	lsls	r2, r3, #3
 8015a98:	f641 6324 	movw	r3, #7716	; 0x1e24
 8015a9c:	443b      	add	r3, r7
 8015a9e:	681b      	ldr	r3, [r3, #0]
 8015aa0:	4413      	add	r3, r2
 8015aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aa6:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8015aaa:	6809      	ldr	r1, [r1, #0]
 8015aac:	3110      	adds	r1, #16
 8015aae:	f507 608d 	add.w	r0, r7, #1128	; 0x468
 8015ab2:	e9d0 4500 	ldrd	r4, r5, [r0]
 8015ab6:	4620      	mov	r0, r4
 8015ab8:	1880      	adds	r0, r0, r2
 8015aba:	f8c7 0460 	str.w	r0, [r7, #1120]	; 0x460
 8015abe:	4628      	mov	r0, r5
 8015ac0:	eb43 0000 	adc.w	r0, r3, r0
 8015ac4:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464
 8015ac8:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8015acc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8015ad0:	e9c1 3400 	strd	r3, r4, [r1]
 8015ad4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	3370      	adds	r3, #112	; 0x70
 8015adc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015ae0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015ae4:	681b      	ldr	r3, [r3, #0]
 8015ae6:	3310      	adds	r3, #16
 8015ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aec:	ea80 0402 	eor.w	r4, r0, r2
 8015af0:	f8c7 4458 	str.w	r4, [r7, #1112]	; 0x458
 8015af4:	404b      	eors	r3, r1
 8015af6:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 8015afa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015afe:	681b      	ldr	r3, [r3, #0]
 8015b00:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8015b04:	2220      	movs	r2, #32
 8015b06:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8015b0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015b0e:	f7f2 fd17 	bl	8008540 <rotr64>
 8015b12:	4602      	mov	r2, r0
 8015b14:	460b      	mov	r3, r1
 8015b16:	e9c4 2300 	strd	r2, r3, [r4]
 8015b1a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015b1e:	681b      	ldr	r3, [r3, #0]
 8015b20:	3350      	adds	r3, #80	; 0x50
 8015b22:	e9d3 4500 	ldrd	r4, r5, [r3]
 8015b26:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015b2a:	681b      	ldr	r3, [r3, #0]
 8015b2c:	3370      	adds	r3, #112	; 0x70
 8015b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b32:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8015b36:	6809      	ldr	r1, [r1, #0]
 8015b38:	3150      	adds	r1, #80	; 0x50
 8015b3a:	18a0      	adds	r0, r4, r2
 8015b3c:	f8c7 0450 	str.w	r0, [r7, #1104]	; 0x450
 8015b40:	eb45 0303 	adc.w	r3, r5, r3
 8015b44:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 8015b48:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8015b4c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8015b50:	e9c1 3400 	strd	r3, r4, [r1]
 8015b54:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	3330      	adds	r3, #48	; 0x30
 8015b5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015b60:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	3350      	adds	r3, #80	; 0x50
 8015b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b6c:	ea80 0402 	eor.w	r4, r0, r2
 8015b70:	f8c7 4448 	str.w	r4, [r7, #1096]	; 0x448
 8015b74:	404b      	eors	r3, r1
 8015b76:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 8015b7a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8015b84:	2218      	movs	r2, #24
 8015b86:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8015b8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015b8e:	f7f2 fcd7 	bl	8008540 <rotr64>
 8015b92:	4602      	mov	r2, r0
 8015b94:	460b      	mov	r3, r1
 8015b96:	e9c4 2300 	strd	r2, r3, [r4]
 8015b9a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	3310      	adds	r3, #16
 8015ba2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015ba6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	3330      	adds	r3, #48	; 0x30
 8015bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bb2:	1884      	adds	r4, r0, r2
 8015bb4:	f8c7 4440 	str.w	r4, [r7, #1088]	; 0x440
 8015bb8:	eb41 0303 	adc.w	r3, r1, r3
 8015bbc:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 8015bc0:	2305      	movs	r3, #5
 8015bc2:	00da      	lsls	r2, r3, #3
 8015bc4:	f641 6324 	movw	r3, #7716	; 0x1e24
 8015bc8:	443b      	add	r3, r7
 8015bca:	681b      	ldr	r3, [r3, #0]
 8015bcc:	4413      	add	r3, r2
 8015bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bd2:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8015bd6:	6809      	ldr	r1, [r1, #0]
 8015bd8:	3110      	adds	r1, #16
 8015bda:	f507 6088 	add.w	r0, r7, #1088	; 0x440
 8015bde:	e9d0 4500 	ldrd	r4, r5, [r0]
 8015be2:	4620      	mov	r0, r4
 8015be4:	1880      	adds	r0, r0, r2
 8015be6:	f8c7 0438 	str.w	r0, [r7, #1080]	; 0x438
 8015bea:	4628      	mov	r0, r5
 8015bec:	eb43 0000 	adc.w	r0, r3, r0
 8015bf0:	f8c7 043c 	str.w	r0, [r7, #1084]	; 0x43c
 8015bf4:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8015bf8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8015bfc:	e9c1 3400 	strd	r3, r4, [r1]
 8015c00:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	3370      	adds	r3, #112	; 0x70
 8015c08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015c0c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	3310      	adds	r3, #16
 8015c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c18:	ea80 0402 	eor.w	r4, r0, r2
 8015c1c:	f8c7 4430 	str.w	r4, [r7, #1072]	; 0x430
 8015c20:	404b      	eors	r3, r1
 8015c22:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8015c26:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8015c30:	2210      	movs	r2, #16
 8015c32:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8015c36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015c3a:	f7f2 fc81 	bl	8008540 <rotr64>
 8015c3e:	4602      	mov	r2, r0
 8015c40:	460b      	mov	r3, r1
 8015c42:	e9c4 2300 	strd	r2, r3, [r4]
 8015c46:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	3350      	adds	r3, #80	; 0x50
 8015c4e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8015c52:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015c56:	681b      	ldr	r3, [r3, #0]
 8015c58:	3370      	adds	r3, #112	; 0x70
 8015c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c5e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8015c62:	6809      	ldr	r1, [r1, #0]
 8015c64:	3150      	adds	r1, #80	; 0x50
 8015c66:	18a0      	adds	r0, r4, r2
 8015c68:	f8c7 0428 	str.w	r0, [r7, #1064]	; 0x428
 8015c6c:	eb45 0303 	adc.w	r3, r5, r3
 8015c70:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 8015c74:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8015c78:	e9d3 3400 	ldrd	r3, r4, [r3]
 8015c7c:	e9c1 3400 	strd	r3, r4, [r1]
 8015c80:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015c84:	681b      	ldr	r3, [r3, #0]
 8015c86:	3330      	adds	r3, #48	; 0x30
 8015c88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015c8c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	3350      	adds	r3, #80	; 0x50
 8015c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c98:	ea80 0402 	eor.w	r4, r0, r2
 8015c9c:	f8c7 4420 	str.w	r4, [r7, #1056]	; 0x420
 8015ca0:	404b      	eors	r3, r1
 8015ca2:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8015ca6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015caa:	681b      	ldr	r3, [r3, #0]
 8015cac:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8015cb0:	223f      	movs	r2, #63	; 0x3f
 8015cb2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8015cb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015cba:	f7f2 fc41 	bl	8008540 <rotr64>
 8015cbe:	4602      	mov	r2, r0
 8015cc0:	460b      	mov	r3, r1
 8015cc2:	e9c4 2300 	strd	r2, r3, [r4]
 8015cc6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015cca:	681b      	ldr	r3, [r3, #0]
 8015ccc:	3318      	adds	r3, #24
 8015cce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015cd2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015cd6:	681b      	ldr	r3, [r3, #0]
 8015cd8:	3338      	adds	r3, #56	; 0x38
 8015cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cde:	1884      	adds	r4, r0, r2
 8015ce0:	f8c7 4418 	str.w	r4, [r7, #1048]	; 0x418
 8015ce4:	eb41 0303 	adc.w	r3, r1, r3
 8015ce8:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 8015cec:	2306      	movs	r3, #6
 8015cee:	00da      	lsls	r2, r3, #3
 8015cf0:	f641 6324 	movw	r3, #7716	; 0x1e24
 8015cf4:	443b      	add	r3, r7
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	4413      	add	r3, r2
 8015cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cfe:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8015d02:	6809      	ldr	r1, [r1, #0]
 8015d04:	3118      	adds	r1, #24
 8015d06:	f507 6083 	add.w	r0, r7, #1048	; 0x418
 8015d0a:	e9d0 4500 	ldrd	r4, r5, [r0]
 8015d0e:	4620      	mov	r0, r4
 8015d10:	1880      	adds	r0, r0, r2
 8015d12:	f8c7 0410 	str.w	r0, [r7, #1040]	; 0x410
 8015d16:	4628      	mov	r0, r5
 8015d18:	eb43 0000 	adc.w	r0, r3, r0
 8015d1c:	f8c7 0414 	str.w	r0, [r7, #1044]	; 0x414
 8015d20:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8015d24:	e9d3 3400 	ldrd	r3, r4, [r3]
 8015d28:	e9c1 3400 	strd	r3, r4, [r1]
 8015d2c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	3378      	adds	r3, #120	; 0x78
 8015d34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015d38:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	3318      	adds	r3, #24
 8015d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d44:	ea80 0402 	eor.w	r4, r0, r2
 8015d48:	f8c7 4408 	str.w	r4, [r7, #1032]	; 0x408
 8015d4c:	404b      	eors	r3, r1
 8015d4e:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8015d52:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8015d5c:	2220      	movs	r2, #32
 8015d5e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8015d62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015d66:	f7f2 fbeb 	bl	8008540 <rotr64>
 8015d6a:	4602      	mov	r2, r0
 8015d6c:	460b      	mov	r3, r1
 8015d6e:	e9c4 2300 	strd	r2, r3, [r4]
 8015d72:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	3358      	adds	r3, #88	; 0x58
 8015d7a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8015d7e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	3378      	adds	r3, #120	; 0x78
 8015d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d8a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8015d8e:	6809      	ldr	r1, [r1, #0]
 8015d90:	3158      	adds	r1, #88	; 0x58
 8015d92:	18a0      	adds	r0, r4, r2
 8015d94:	f8c7 0400 	str.w	r0, [r7, #1024]	; 0x400
 8015d98:	eb45 0303 	adc.w	r3, r5, r3
 8015d9c:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8015da0:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8015da4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8015da8:	e9c1 3400 	strd	r3, r4, [r1]
 8015dac:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	3338      	adds	r3, #56	; 0x38
 8015db4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015db8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	3358      	adds	r3, #88	; 0x58
 8015dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dc4:	ea80 0402 	eor.w	r4, r0, r2
 8015dc8:	f8c7 43f8 	str.w	r4, [r7, #1016]	; 0x3f8
 8015dcc:	404b      	eors	r3, r1
 8015dce:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8015dd2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8015ddc:	2218      	movs	r2, #24
 8015dde:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	; 0x3f8
 8015de2:	f7f2 fbad 	bl	8008540 <rotr64>
 8015de6:	4602      	mov	r2, r0
 8015de8:	460b      	mov	r3, r1
 8015dea:	e9c4 2300 	strd	r2, r3, [r4]
 8015dee:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	3318      	adds	r3, #24
 8015df6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015dfa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	3338      	adds	r3, #56	; 0x38
 8015e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e06:	1884      	adds	r4, r0, r2
 8015e08:	f8c7 43f0 	str.w	r4, [r7, #1008]	; 0x3f0
 8015e0c:	eb41 0303 	adc.w	r3, r1, r3
 8015e10:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 8015e14:	2307      	movs	r3, #7
 8015e16:	00da      	lsls	r2, r3, #3
 8015e18:	f641 6324 	movw	r3, #7716	; 0x1e24
 8015e1c:	443b      	add	r3, r7
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	4413      	add	r3, r2
 8015e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e26:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8015e2a:	6809      	ldr	r1, [r1, #0]
 8015e2c:	3118      	adds	r1, #24
 8015e2e:	e9d7 45fc 	ldrd	r4, r5, [r7, #1008]	; 0x3f0
 8015e32:	4620      	mov	r0, r4
 8015e34:	1880      	adds	r0, r0, r2
 8015e36:	f8c7 03e8 	str.w	r0, [r7, #1000]	; 0x3e8
 8015e3a:	4628      	mov	r0, r5
 8015e3c:	eb43 0000 	adc.w	r0, r3, r0
 8015e40:	f8c7 03ec 	str.w	r0, [r7, #1004]	; 0x3ec
 8015e44:	e9d7 34fa 	ldrd	r3, r4, [r7, #1000]	; 0x3e8
 8015e48:	e9c1 3400 	strd	r3, r4, [r1]
 8015e4c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015e50:	681b      	ldr	r3, [r3, #0]
 8015e52:	3378      	adds	r3, #120	; 0x78
 8015e54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015e58:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	3318      	adds	r3, #24
 8015e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e64:	ea80 0402 	eor.w	r4, r0, r2
 8015e68:	f8c7 43e0 	str.w	r4, [r7, #992]	; 0x3e0
 8015e6c:	404b      	eors	r3, r1
 8015e6e:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 8015e72:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8015e7c:	2210      	movs	r2, #16
 8015e7e:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	; 0x3e0
 8015e82:	f7f2 fb5d 	bl	8008540 <rotr64>
 8015e86:	4602      	mov	r2, r0
 8015e88:	460b      	mov	r3, r1
 8015e8a:	e9c4 2300 	strd	r2, r3, [r4]
 8015e8e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	3358      	adds	r3, #88	; 0x58
 8015e96:	e9d3 4500 	ldrd	r4, r5, [r3]
 8015e9a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	3378      	adds	r3, #120	; 0x78
 8015ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ea6:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8015eaa:	6809      	ldr	r1, [r1, #0]
 8015eac:	3158      	adds	r1, #88	; 0x58
 8015eae:	18a0      	adds	r0, r4, r2
 8015eb0:	f8c7 03d8 	str.w	r0, [r7, #984]	; 0x3d8
 8015eb4:	eb45 0303 	adc.w	r3, r5, r3
 8015eb8:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8015ebc:	e9d7 34f6 	ldrd	r3, r4, [r7, #984]	; 0x3d8
 8015ec0:	e9c1 3400 	strd	r3, r4, [r1]
 8015ec4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015ec8:	681b      	ldr	r3, [r3, #0]
 8015eca:	3338      	adds	r3, #56	; 0x38
 8015ecc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015ed0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	3358      	adds	r3, #88	; 0x58
 8015ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015edc:	ea80 0402 	eor.w	r4, r0, r2
 8015ee0:	f8c7 43d0 	str.w	r4, [r7, #976]	; 0x3d0
 8015ee4:	404b      	eors	r3, r1
 8015ee6:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 8015eea:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015eee:	681b      	ldr	r3, [r3, #0]
 8015ef0:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8015ef4:	223f      	movs	r2, #63	; 0x3f
 8015ef6:	e9d7 01f4 	ldrd	r0, r1, [r7, #976]	; 0x3d0
 8015efa:	f7f2 fb21 	bl	8008540 <rotr64>
 8015efe:	4602      	mov	r2, r0
 8015f00:	460b      	mov	r3, r1
 8015f02:	e9c4 2300 	strd	r2, r3, [r4]
 8015f06:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015f10:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	3328      	adds	r3, #40	; 0x28
 8015f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f1c:	1884      	adds	r4, r0, r2
 8015f1e:	f8c7 43c8 	str.w	r4, [r7, #968]	; 0x3c8
 8015f22:	eb41 0303 	adc.w	r3, r1, r3
 8015f26:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8015f2a:	2308      	movs	r3, #8
 8015f2c:	00da      	lsls	r2, r3, #3
 8015f2e:	f641 6324 	movw	r3, #7716	; 0x1e24
 8015f32:	443b      	add	r3, r7
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	4413      	add	r3, r2
 8015f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f3c:	e9d7 45f2 	ldrd	r4, r5, [r7, #968]	; 0x3c8
 8015f40:	4621      	mov	r1, r4
 8015f42:	1889      	adds	r1, r1, r2
 8015f44:	f8c7 13c0 	str.w	r1, [r7, #960]	; 0x3c0
 8015f48:	4629      	mov	r1, r5
 8015f4a:	eb43 0101 	adc.w	r1, r3, r1
 8015f4e:	f8c7 13c4 	str.w	r1, [r7, #964]	; 0x3c4
 8015f52:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015f56:	681b      	ldr	r3, [r3, #0]
 8015f58:	e9d7 12f0 	ldrd	r1, r2, [r7, #960]	; 0x3c0
 8015f5c:	e9c3 1200 	strd	r1, r2, [r3]
 8015f60:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015f64:	681b      	ldr	r3, [r3, #0]
 8015f66:	3378      	adds	r3, #120	; 0x78
 8015f68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015f6c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f76:	ea80 0402 	eor.w	r4, r0, r2
 8015f7a:	f8c7 43b8 	str.w	r4, [r7, #952]	; 0x3b8
 8015f7e:	404b      	eors	r3, r1
 8015f80:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 8015f84:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8015f8e:	2220      	movs	r2, #32
 8015f90:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 8015f94:	f7f2 fad4 	bl	8008540 <rotr64>
 8015f98:	4602      	mov	r2, r0
 8015f9a:	460b      	mov	r3, r1
 8015f9c:	e9c4 2300 	strd	r2, r3, [r4]
 8015fa0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	3350      	adds	r3, #80	; 0x50
 8015fa8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8015fac:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	3378      	adds	r3, #120	; 0x78
 8015fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fb8:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8015fbc:	6809      	ldr	r1, [r1, #0]
 8015fbe:	3150      	adds	r1, #80	; 0x50
 8015fc0:	18a0      	adds	r0, r4, r2
 8015fc2:	f8c7 03b0 	str.w	r0, [r7, #944]	; 0x3b0
 8015fc6:	eb45 0303 	adc.w	r3, r5, r3
 8015fca:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 8015fce:	e9d7 34ec 	ldrd	r3, r4, [r7, #944]	; 0x3b0
 8015fd2:	e9c1 3400 	strd	r3, r4, [r1]
 8015fd6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	3328      	adds	r3, #40	; 0x28
 8015fde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015fe2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	3350      	adds	r3, #80	; 0x50
 8015fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fee:	ea80 0402 	eor.w	r4, r0, r2
 8015ff2:	f8c7 43a8 	str.w	r4, [r7, #936]	; 0x3a8
 8015ff6:	404b      	eors	r3, r1
 8015ff8:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 8015ffc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8016006:	2218      	movs	r2, #24
 8016008:	e9d7 01ea 	ldrd	r0, r1, [r7, #936]	; 0x3a8
 801600c:	f7f2 fa98 	bl	8008540 <rotr64>
 8016010:	4602      	mov	r2, r0
 8016012:	460b      	mov	r3, r1
 8016014:	e9c4 2300 	strd	r2, r3, [r4]
 8016018:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016022:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	3328      	adds	r3, #40	; 0x28
 801602a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801602e:	1884      	adds	r4, r0, r2
 8016030:	f8c7 43a0 	str.w	r4, [r7, #928]	; 0x3a0
 8016034:	eb41 0303 	adc.w	r3, r1, r3
 8016038:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 801603c:	2309      	movs	r3, #9
 801603e:	00da      	lsls	r2, r3, #3
 8016040:	f641 6324 	movw	r3, #7716	; 0x1e24
 8016044:	443b      	add	r3, r7
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	4413      	add	r3, r2
 801604a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801604e:	e9d7 45e8 	ldrd	r4, r5, [r7, #928]	; 0x3a0
 8016052:	4621      	mov	r1, r4
 8016054:	1889      	adds	r1, r1, r2
 8016056:	f8c7 1398 	str.w	r1, [r7, #920]	; 0x398
 801605a:	4629      	mov	r1, r5
 801605c:	eb43 0101 	adc.w	r1, r3, r1
 8016060:	f8c7 139c 	str.w	r1, [r7, #924]	; 0x39c
 8016064:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	e9d7 12e6 	ldrd	r1, r2, [r7, #920]	; 0x398
 801606e:	e9c3 1200 	strd	r1, r2, [r3]
 8016072:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016076:	681b      	ldr	r3, [r3, #0]
 8016078:	3378      	adds	r3, #120	; 0x78
 801607a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801607e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016088:	ea80 0402 	eor.w	r4, r0, r2
 801608c:	f8c7 4390 	str.w	r4, [r7, #912]	; 0x390
 8016090:	404b      	eors	r3, r1
 8016092:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 8016096:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801609a:	681b      	ldr	r3, [r3, #0]
 801609c:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80160a0:	2210      	movs	r2, #16
 80160a2:	e9d7 01e4 	ldrd	r0, r1, [r7, #912]	; 0x390
 80160a6:	f7f2 fa4b 	bl	8008540 <rotr64>
 80160aa:	4602      	mov	r2, r0
 80160ac:	460b      	mov	r3, r1
 80160ae:	e9c4 2300 	strd	r2, r3, [r4]
 80160b2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	3350      	adds	r3, #80	; 0x50
 80160ba:	e9d3 4500 	ldrd	r4, r5, [r3]
 80160be:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	3378      	adds	r3, #120	; 0x78
 80160c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160ca:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80160ce:	6809      	ldr	r1, [r1, #0]
 80160d0:	3150      	adds	r1, #80	; 0x50
 80160d2:	18a0      	adds	r0, r4, r2
 80160d4:	f8c7 0388 	str.w	r0, [r7, #904]	; 0x388
 80160d8:	eb45 0303 	adc.w	r3, r5, r3
 80160dc:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 80160e0:	e9d7 34e2 	ldrd	r3, r4, [r7, #904]	; 0x388
 80160e4:	e9c1 3400 	strd	r3, r4, [r1]
 80160e8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	3328      	adds	r3, #40	; 0x28
 80160f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80160f4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	3350      	adds	r3, #80	; 0x50
 80160fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016100:	ea80 0402 	eor.w	r4, r0, r2
 8016104:	f8c7 4380 	str.w	r4, [r7, #896]	; 0x380
 8016108:	404b      	eors	r3, r1
 801610a:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 801610e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016112:	681b      	ldr	r3, [r3, #0]
 8016114:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8016118:	223f      	movs	r2, #63	; 0x3f
 801611a:	e9d7 01e0 	ldrd	r0, r1, [r7, #896]	; 0x380
 801611e:	f7f2 fa0f 	bl	8008540 <rotr64>
 8016122:	4602      	mov	r2, r0
 8016124:	460b      	mov	r3, r1
 8016126:	e9c4 2300 	strd	r2, r3, [r4]
 801612a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	3308      	adds	r3, #8
 8016132:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016136:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801613a:	681b      	ldr	r3, [r3, #0]
 801613c:	3330      	adds	r3, #48	; 0x30
 801613e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016142:	1884      	adds	r4, r0, r2
 8016144:	f8c7 4378 	str.w	r4, [r7, #888]	; 0x378
 8016148:	eb41 0303 	adc.w	r3, r1, r3
 801614c:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8016150:	230a      	movs	r3, #10
 8016152:	00da      	lsls	r2, r3, #3
 8016154:	f641 6324 	movw	r3, #7716	; 0x1e24
 8016158:	443b      	add	r3, r7
 801615a:	681b      	ldr	r3, [r3, #0]
 801615c:	4413      	add	r3, r2
 801615e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016162:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8016166:	6809      	ldr	r1, [r1, #0]
 8016168:	3108      	adds	r1, #8
 801616a:	e9d7 45de 	ldrd	r4, r5, [r7, #888]	; 0x378
 801616e:	4620      	mov	r0, r4
 8016170:	1880      	adds	r0, r0, r2
 8016172:	f8c7 0370 	str.w	r0, [r7, #880]	; 0x370
 8016176:	4628      	mov	r0, r5
 8016178:	eb43 0000 	adc.w	r0, r3, r0
 801617c:	f8c7 0374 	str.w	r0, [r7, #884]	; 0x374
 8016180:	e9d7 34dc 	ldrd	r3, r4, [r7, #880]	; 0x370
 8016184:	e9c1 3400 	strd	r3, r4, [r1]
 8016188:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	3360      	adds	r3, #96	; 0x60
 8016190:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016194:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	3308      	adds	r3, #8
 801619c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161a0:	ea80 0402 	eor.w	r4, r0, r2
 80161a4:	f8c7 4368 	str.w	r4, [r7, #872]	; 0x368
 80161a8:	404b      	eors	r3, r1
 80161aa:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80161ae:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80161b2:	681b      	ldr	r3, [r3, #0]
 80161b4:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80161b8:	2220      	movs	r2, #32
 80161ba:	e9d7 01da 	ldrd	r0, r1, [r7, #872]	; 0x368
 80161be:	f7f2 f9bf 	bl	8008540 <rotr64>
 80161c2:	4602      	mov	r2, r0
 80161c4:	460b      	mov	r3, r1
 80161c6:	e9c4 2300 	strd	r2, r3, [r4]
 80161ca:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	3358      	adds	r3, #88	; 0x58
 80161d2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80161d6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	3360      	adds	r3, #96	; 0x60
 80161de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161e2:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80161e6:	6809      	ldr	r1, [r1, #0]
 80161e8:	3158      	adds	r1, #88	; 0x58
 80161ea:	18a0      	adds	r0, r4, r2
 80161ec:	f8c7 0360 	str.w	r0, [r7, #864]	; 0x360
 80161f0:	eb45 0303 	adc.w	r3, r5, r3
 80161f4:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 80161f8:	e9d7 34d8 	ldrd	r3, r4, [r7, #864]	; 0x360
 80161fc:	e9c1 3400 	strd	r3, r4, [r1]
 8016200:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016204:	681b      	ldr	r3, [r3, #0]
 8016206:	3330      	adds	r3, #48	; 0x30
 8016208:	e9d3 0100 	ldrd	r0, r1, [r3]
 801620c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	3358      	adds	r3, #88	; 0x58
 8016214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016218:	ea80 0402 	eor.w	r4, r0, r2
 801621c:	f8c7 4358 	str.w	r4, [r7, #856]	; 0x358
 8016220:	404b      	eors	r3, r1
 8016222:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 8016226:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8016230:	2218      	movs	r2, #24
 8016232:	e9d7 01d6 	ldrd	r0, r1, [r7, #856]	; 0x358
 8016236:	f7f2 f983 	bl	8008540 <rotr64>
 801623a:	4602      	mov	r2, r0
 801623c:	460b      	mov	r3, r1
 801623e:	e9c4 2300 	strd	r2, r3, [r4]
 8016242:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	3308      	adds	r3, #8
 801624a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801624e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	3330      	adds	r3, #48	; 0x30
 8016256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801625a:	1884      	adds	r4, r0, r2
 801625c:	f8c7 4350 	str.w	r4, [r7, #848]	; 0x350
 8016260:	eb41 0303 	adc.w	r3, r1, r3
 8016264:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8016268:	230b      	movs	r3, #11
 801626a:	00da      	lsls	r2, r3, #3
 801626c:	f641 6324 	movw	r3, #7716	; 0x1e24
 8016270:	443b      	add	r3, r7
 8016272:	681b      	ldr	r3, [r3, #0]
 8016274:	4413      	add	r3, r2
 8016276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801627a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801627e:	6809      	ldr	r1, [r1, #0]
 8016280:	3108      	adds	r1, #8
 8016282:	e9d7 45d4 	ldrd	r4, r5, [r7, #848]	; 0x350
 8016286:	4620      	mov	r0, r4
 8016288:	1880      	adds	r0, r0, r2
 801628a:	f8c7 0348 	str.w	r0, [r7, #840]	; 0x348
 801628e:	4628      	mov	r0, r5
 8016290:	eb43 0000 	adc.w	r0, r3, r0
 8016294:	f8c7 034c 	str.w	r0, [r7, #844]	; 0x34c
 8016298:	e9d7 34d2 	ldrd	r3, r4, [r7, #840]	; 0x348
 801629c:	e9c1 3400 	strd	r3, r4, [r1]
 80162a0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	3360      	adds	r3, #96	; 0x60
 80162a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80162ac:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	3308      	adds	r3, #8
 80162b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162b8:	ea80 0402 	eor.w	r4, r0, r2
 80162bc:	f8c7 4340 	str.w	r4, [r7, #832]	; 0x340
 80162c0:	404b      	eors	r3, r1
 80162c2:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 80162c6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80162d0:	2210      	movs	r2, #16
 80162d2:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	; 0x340
 80162d6:	f7f2 f933 	bl	8008540 <rotr64>
 80162da:	4602      	mov	r2, r0
 80162dc:	460b      	mov	r3, r1
 80162de:	e9c4 2300 	strd	r2, r3, [r4]
 80162e2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	3358      	adds	r3, #88	; 0x58
 80162ea:	e9d3 4500 	ldrd	r4, r5, [r3]
 80162ee:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	3360      	adds	r3, #96	; 0x60
 80162f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162fa:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80162fe:	6809      	ldr	r1, [r1, #0]
 8016300:	3158      	adds	r1, #88	; 0x58
 8016302:	18a0      	adds	r0, r4, r2
 8016304:	f8c7 0338 	str.w	r0, [r7, #824]	; 0x338
 8016308:	eb45 0303 	adc.w	r3, r5, r3
 801630c:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8016310:	e9d7 34ce 	ldrd	r3, r4, [r7, #824]	; 0x338
 8016314:	e9c1 3400 	strd	r3, r4, [r1]
 8016318:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	3330      	adds	r3, #48	; 0x30
 8016320:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016324:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	3358      	adds	r3, #88	; 0x58
 801632c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016330:	ea80 0402 	eor.w	r4, r0, r2
 8016334:	f8c7 4330 	str.w	r4, [r7, #816]	; 0x330
 8016338:	404b      	eors	r3, r1
 801633a:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 801633e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8016348:	223f      	movs	r2, #63	; 0x3f
 801634a:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	; 0x330
 801634e:	f7f2 f8f7 	bl	8008540 <rotr64>
 8016352:	4602      	mov	r2, r0
 8016354:	460b      	mov	r3, r1
 8016356:	e9c4 2300 	strd	r2, r3, [r4]
 801635a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	3310      	adds	r3, #16
 8016362:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016366:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	3338      	adds	r3, #56	; 0x38
 801636e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016372:	1884      	adds	r4, r0, r2
 8016374:	f8c7 4328 	str.w	r4, [r7, #808]	; 0x328
 8016378:	eb41 0303 	adc.w	r3, r1, r3
 801637c:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 8016380:	230c      	movs	r3, #12
 8016382:	00da      	lsls	r2, r3, #3
 8016384:	f641 6324 	movw	r3, #7716	; 0x1e24
 8016388:	443b      	add	r3, r7
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	4413      	add	r3, r2
 801638e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016392:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8016396:	6809      	ldr	r1, [r1, #0]
 8016398:	3110      	adds	r1, #16
 801639a:	e9d7 45ca 	ldrd	r4, r5, [r7, #808]	; 0x328
 801639e:	4620      	mov	r0, r4
 80163a0:	1880      	adds	r0, r0, r2
 80163a2:	f8c7 0320 	str.w	r0, [r7, #800]	; 0x320
 80163a6:	4628      	mov	r0, r5
 80163a8:	eb43 0000 	adc.w	r0, r3, r0
 80163ac:	f8c7 0324 	str.w	r0, [r7, #804]	; 0x324
 80163b0:	e9d7 34c8 	ldrd	r3, r4, [r7, #800]	; 0x320
 80163b4:	e9c1 3400 	strd	r3, r4, [r1]
 80163b8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	3368      	adds	r3, #104	; 0x68
 80163c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80163c4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	3310      	adds	r3, #16
 80163cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163d0:	ea80 0402 	eor.w	r4, r0, r2
 80163d4:	f8c7 4318 	str.w	r4, [r7, #792]	; 0x318
 80163d8:	404b      	eors	r3, r1
 80163da:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 80163de:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80163e2:	681b      	ldr	r3, [r3, #0]
 80163e4:	f103 0468 	add.w	r4, r3, #104	; 0x68
 80163e8:	2220      	movs	r2, #32
 80163ea:	e9d7 01c6 	ldrd	r0, r1, [r7, #792]	; 0x318
 80163ee:	f7f2 f8a7 	bl	8008540 <rotr64>
 80163f2:	4602      	mov	r2, r0
 80163f4:	460b      	mov	r3, r1
 80163f6:	e9c4 2300 	strd	r2, r3, [r4]
 80163fa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80163fe:	681b      	ldr	r3, [r3, #0]
 8016400:	3340      	adds	r3, #64	; 0x40
 8016402:	e9d3 4500 	ldrd	r4, r5, [r3]
 8016406:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	3368      	adds	r3, #104	; 0x68
 801640e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016412:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8016416:	6809      	ldr	r1, [r1, #0]
 8016418:	3140      	adds	r1, #64	; 0x40
 801641a:	18a0      	adds	r0, r4, r2
 801641c:	f8c7 0310 	str.w	r0, [r7, #784]	; 0x310
 8016420:	eb45 0303 	adc.w	r3, r5, r3
 8016424:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8016428:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	; 0x310
 801642c:	e9c1 3400 	strd	r3, r4, [r1]
 8016430:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	3338      	adds	r3, #56	; 0x38
 8016438:	e9d3 0100 	ldrd	r0, r1, [r3]
 801643c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016440:	681b      	ldr	r3, [r3, #0]
 8016442:	3340      	adds	r3, #64	; 0x40
 8016444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016448:	ea80 0402 	eor.w	r4, r0, r2
 801644c:	f8c7 4308 	str.w	r4, [r7, #776]	; 0x308
 8016450:	404b      	eors	r3, r1
 8016452:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 8016456:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8016460:	2218      	movs	r2, #24
 8016462:	e9d7 01c2 	ldrd	r0, r1, [r7, #776]	; 0x308
 8016466:	f7f2 f86b 	bl	8008540 <rotr64>
 801646a:	4602      	mov	r2, r0
 801646c:	460b      	mov	r3, r1
 801646e:	e9c4 2300 	strd	r2, r3, [r4]
 8016472:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	3310      	adds	r3, #16
 801647a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801647e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	3338      	adds	r3, #56	; 0x38
 8016486:	e9d3 2300 	ldrd	r2, r3, [r3]
 801648a:	1884      	adds	r4, r0, r2
 801648c:	f8c7 4300 	str.w	r4, [r7, #768]	; 0x300
 8016490:	eb41 0303 	adc.w	r3, r1, r3
 8016494:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 8016498:	230d      	movs	r3, #13
 801649a:	00da      	lsls	r2, r3, #3
 801649c:	f641 6324 	movw	r3, #7716	; 0x1e24
 80164a0:	443b      	add	r3, r7
 80164a2:	681b      	ldr	r3, [r3, #0]
 80164a4:	4413      	add	r3, r2
 80164a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164aa:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80164ae:	6809      	ldr	r1, [r1, #0]
 80164b0:	3110      	adds	r1, #16
 80164b2:	e9d7 45c0 	ldrd	r4, r5, [r7, #768]	; 0x300
 80164b6:	4620      	mov	r0, r4
 80164b8:	1880      	adds	r0, r0, r2
 80164ba:	f8c7 02f8 	str.w	r0, [r7, #760]	; 0x2f8
 80164be:	4628      	mov	r0, r5
 80164c0:	eb43 0000 	adc.w	r0, r3, r0
 80164c4:	f8c7 02fc 	str.w	r0, [r7, #764]	; 0x2fc
 80164c8:	e9d7 34be 	ldrd	r3, r4, [r7, #760]	; 0x2f8
 80164cc:	e9c1 3400 	strd	r3, r4, [r1]
 80164d0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	3368      	adds	r3, #104	; 0x68
 80164d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80164dc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	3310      	adds	r3, #16
 80164e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164e8:	ea80 0402 	eor.w	r4, r0, r2
 80164ec:	f8c7 42f0 	str.w	r4, [r7, #752]	; 0x2f0
 80164f0:	404b      	eors	r3, r1
 80164f2:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 80164f6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80164fa:	681b      	ldr	r3, [r3, #0]
 80164fc:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8016500:	2210      	movs	r2, #16
 8016502:	e9d7 01bc 	ldrd	r0, r1, [r7, #752]	; 0x2f0
 8016506:	f7f2 f81b 	bl	8008540 <rotr64>
 801650a:	4602      	mov	r2, r0
 801650c:	460b      	mov	r3, r1
 801650e:	e9c4 2300 	strd	r2, r3, [r4]
 8016512:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	3340      	adds	r3, #64	; 0x40
 801651a:	e9d3 4500 	ldrd	r4, r5, [r3]
 801651e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	3368      	adds	r3, #104	; 0x68
 8016526:	e9d3 2300 	ldrd	r2, r3, [r3]
 801652a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801652e:	6809      	ldr	r1, [r1, #0]
 8016530:	3140      	adds	r1, #64	; 0x40
 8016532:	18a0      	adds	r0, r4, r2
 8016534:	f8c7 02e8 	str.w	r0, [r7, #744]	; 0x2e8
 8016538:	eb45 0303 	adc.w	r3, r5, r3
 801653c:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8016540:	e9d7 34ba 	ldrd	r3, r4, [r7, #744]	; 0x2e8
 8016544:	e9c1 3400 	strd	r3, r4, [r1]
 8016548:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	3338      	adds	r3, #56	; 0x38
 8016550:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016554:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	3340      	adds	r3, #64	; 0x40
 801655c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016560:	ea80 0402 	eor.w	r4, r0, r2
 8016564:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
 8016568:	404b      	eors	r3, r1
 801656a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 801656e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016572:	681b      	ldr	r3, [r3, #0]
 8016574:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8016578:	223f      	movs	r2, #63	; 0x3f
 801657a:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	; 0x2e0
 801657e:	f7f1 ffdf 	bl	8008540 <rotr64>
 8016582:	4602      	mov	r2, r0
 8016584:	460b      	mov	r3, r1
 8016586:	e9c4 2300 	strd	r2, r3, [r4]
 801658a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	3318      	adds	r3, #24
 8016592:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016596:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	3320      	adds	r3, #32
 801659e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165a2:	1884      	adds	r4, r0, r2
 80165a4:	f8c7 42d8 	str.w	r4, [r7, #728]	; 0x2d8
 80165a8:	eb41 0303 	adc.w	r3, r1, r3
 80165ac:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 80165b0:	230e      	movs	r3, #14
 80165b2:	00da      	lsls	r2, r3, #3
 80165b4:	f641 6324 	movw	r3, #7716	; 0x1e24
 80165b8:	443b      	add	r3, r7
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	4413      	add	r3, r2
 80165be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165c2:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80165c6:	6809      	ldr	r1, [r1, #0]
 80165c8:	3118      	adds	r1, #24
 80165ca:	e9d7 45b6 	ldrd	r4, r5, [r7, #728]	; 0x2d8
 80165ce:	4620      	mov	r0, r4
 80165d0:	1880      	adds	r0, r0, r2
 80165d2:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
 80165d6:	4628      	mov	r0, r5
 80165d8:	eb43 0000 	adc.w	r0, r3, r0
 80165dc:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
 80165e0:	e9d7 34b4 	ldrd	r3, r4, [r7, #720]	; 0x2d0
 80165e4:	e9c1 3400 	strd	r3, r4, [r1]
 80165e8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	3370      	adds	r3, #112	; 0x70
 80165f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80165f4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	3318      	adds	r3, #24
 80165fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016600:	ea80 0402 	eor.w	r4, r0, r2
 8016604:	f8c7 42c8 	str.w	r4, [r7, #712]	; 0x2c8
 8016608:	404b      	eors	r3, r1
 801660a:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 801660e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016612:	681b      	ldr	r3, [r3, #0]
 8016614:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8016618:	2220      	movs	r2, #32
 801661a:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	; 0x2c8
 801661e:	f7f1 ff8f 	bl	8008540 <rotr64>
 8016622:	4602      	mov	r2, r0
 8016624:	460b      	mov	r3, r1
 8016626:	e9c4 2300 	strd	r2, r3, [r4]
 801662a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	3348      	adds	r3, #72	; 0x48
 8016632:	e9d3 4500 	ldrd	r4, r5, [r3]
 8016636:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801663a:	681b      	ldr	r3, [r3, #0]
 801663c:	3370      	adds	r3, #112	; 0x70
 801663e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016642:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8016646:	6809      	ldr	r1, [r1, #0]
 8016648:	3148      	adds	r1, #72	; 0x48
 801664a:	18a0      	adds	r0, r4, r2
 801664c:	f8c7 02c0 	str.w	r0, [r7, #704]	; 0x2c0
 8016650:	eb45 0303 	adc.w	r3, r5, r3
 8016654:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8016658:	e9d7 34b0 	ldrd	r3, r4, [r7, #704]	; 0x2c0
 801665c:	e9c1 3400 	strd	r3, r4, [r1]
 8016660:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016664:	681b      	ldr	r3, [r3, #0]
 8016666:	3320      	adds	r3, #32
 8016668:	e9d3 0100 	ldrd	r0, r1, [r3]
 801666c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016670:	681b      	ldr	r3, [r3, #0]
 8016672:	3348      	adds	r3, #72	; 0x48
 8016674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016678:	ea80 0402 	eor.w	r4, r0, r2
 801667c:	f8c7 42b8 	str.w	r4, [r7, #696]	; 0x2b8
 8016680:	404b      	eors	r3, r1
 8016682:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8016686:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801668a:	681b      	ldr	r3, [r3, #0]
 801668c:	f103 0420 	add.w	r4, r3, #32
 8016690:	2218      	movs	r2, #24
 8016692:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 8016696:	f7f1 ff53 	bl	8008540 <rotr64>
 801669a:	4602      	mov	r2, r0
 801669c:	460b      	mov	r3, r1
 801669e:	e9c4 2300 	strd	r2, r3, [r4]
 80166a2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	3318      	adds	r3, #24
 80166aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80166ae:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	3320      	adds	r3, #32
 80166b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166ba:	1884      	adds	r4, r0, r2
 80166bc:	f8c7 42b0 	str.w	r4, [r7, #688]	; 0x2b0
 80166c0:	eb41 0303 	adc.w	r3, r1, r3
 80166c4:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 80166c8:	230f      	movs	r3, #15
 80166ca:	00da      	lsls	r2, r3, #3
 80166cc:	f641 6324 	movw	r3, #7716	; 0x1e24
 80166d0:	443b      	add	r3, r7
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	4413      	add	r3, r2
 80166d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166da:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80166de:	6809      	ldr	r1, [r1, #0]
 80166e0:	3118      	adds	r1, #24
 80166e2:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	; 0x2b0
 80166e6:	4620      	mov	r0, r4
 80166e8:	1880      	adds	r0, r0, r2
 80166ea:	f8c7 02a8 	str.w	r0, [r7, #680]	; 0x2a8
 80166ee:	4628      	mov	r0, r5
 80166f0:	eb43 0000 	adc.w	r0, r3, r0
 80166f4:	f8c7 02ac 	str.w	r0, [r7, #684]	; 0x2ac
 80166f8:	e9d7 34aa 	ldrd	r3, r4, [r7, #680]	; 0x2a8
 80166fc:	e9c1 3400 	strd	r3, r4, [r1]
 8016700:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	3370      	adds	r3, #112	; 0x70
 8016708:	e9d3 0100 	ldrd	r0, r1, [r3]
 801670c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	3318      	adds	r3, #24
 8016714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016718:	ea80 0402 	eor.w	r4, r0, r2
 801671c:	f8c7 42a0 	str.w	r4, [r7, #672]	; 0x2a0
 8016720:	404b      	eors	r3, r1
 8016722:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8016726:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8016730:	2210      	movs	r2, #16
 8016732:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 8016736:	f7f1 ff03 	bl	8008540 <rotr64>
 801673a:	4602      	mov	r2, r0
 801673c:	460b      	mov	r3, r1
 801673e:	e9c4 2300 	strd	r2, r3, [r4]
 8016742:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016746:	681b      	ldr	r3, [r3, #0]
 8016748:	3348      	adds	r3, #72	; 0x48
 801674a:	e9d3 4500 	ldrd	r4, r5, [r3]
 801674e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	3370      	adds	r3, #112	; 0x70
 8016756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801675a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801675e:	6809      	ldr	r1, [r1, #0]
 8016760:	3148      	adds	r1, #72	; 0x48
 8016762:	18a0      	adds	r0, r4, r2
 8016764:	f8c7 0298 	str.w	r0, [r7, #664]	; 0x298
 8016768:	eb45 0303 	adc.w	r3, r5, r3
 801676c:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8016770:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	; 0x298
 8016774:	e9c1 3400 	strd	r3, r4, [r1]
 8016778:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	3320      	adds	r3, #32
 8016780:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016784:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016788:	681b      	ldr	r3, [r3, #0]
 801678a:	3348      	adds	r3, #72	; 0x48
 801678c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016790:	ea80 0402 	eor.w	r4, r0, r2
 8016794:	f8c7 4290 	str.w	r4, [r7, #656]	; 0x290
 8016798:	404b      	eors	r3, r1
 801679a:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 801679e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80167a2:	681b      	ldr	r3, [r3, #0]
 80167a4:	f103 0420 	add.w	r4, r3, #32
 80167a8:	223f      	movs	r2, #63	; 0x3f
 80167aa:	e9d7 01a4 	ldrd	r0, r1, [r7, #656]	; 0x290
 80167ae:	f7f1 fec7 	bl	8008540 <rotr64>
 80167b2:	4602      	mov	r2, r0
 80167b4:	460b      	mov	r3, r1
 80167b6:	e9c4 2300 	strd	r2, r3, [r4]
  ROUND( 11 );
 80167ba:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80167c4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	3320      	adds	r3, #32
 80167cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167d0:	1884      	adds	r4, r0, r2
 80167d2:	f8c7 4288 	str.w	r4, [r7, #648]	; 0x288
 80167d6:	eb41 0303 	adc.w	r3, r1, r3
 80167da:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80167de:	230e      	movs	r3, #14
 80167e0:	00da      	lsls	r2, r3, #3
 80167e2:	f641 6324 	movw	r3, #7716	; 0x1e24
 80167e6:	443b      	add	r3, r7
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	4413      	add	r3, r2
 80167ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167f0:	e9d7 45a2 	ldrd	r4, r5, [r7, #648]	; 0x288
 80167f4:	4621      	mov	r1, r4
 80167f6:	1889      	adds	r1, r1, r2
 80167f8:	f8c7 1280 	str.w	r1, [r7, #640]	; 0x280
 80167fc:	4629      	mov	r1, r5
 80167fe:	eb43 0101 	adc.w	r1, r3, r1
 8016802:	f8c7 1284 	str.w	r1, [r7, #644]	; 0x284
 8016806:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801680a:	681b      	ldr	r3, [r3, #0]
 801680c:	e9d7 12a0 	ldrd	r1, r2, [r7, #640]	; 0x280
 8016810:	e9c3 1200 	strd	r1, r2, [r3]
 8016814:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	3360      	adds	r3, #96	; 0x60
 801681c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016820:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801682a:	ea80 0402 	eor.w	r4, r0, r2
 801682e:	f8c7 4278 	str.w	r4, [r7, #632]	; 0x278
 8016832:	404b      	eors	r3, r1
 8016834:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 8016838:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8016842:	2220      	movs	r2, #32
 8016844:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8016848:	f7f1 fe7a 	bl	8008540 <rotr64>
 801684c:	4602      	mov	r2, r0
 801684e:	460b      	mov	r3, r1
 8016850:	e9c4 2300 	strd	r2, r3, [r4]
 8016854:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016858:	681b      	ldr	r3, [r3, #0]
 801685a:	3340      	adds	r3, #64	; 0x40
 801685c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8016860:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016864:	681b      	ldr	r3, [r3, #0]
 8016866:	3360      	adds	r3, #96	; 0x60
 8016868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801686c:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8016870:	6809      	ldr	r1, [r1, #0]
 8016872:	3140      	adds	r1, #64	; 0x40
 8016874:	18a0      	adds	r0, r4, r2
 8016876:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
 801687a:	eb45 0303 	adc.w	r3, r5, r3
 801687e:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8016882:	e9d7 349c 	ldrd	r3, r4, [r7, #624]	; 0x270
 8016886:	e9c1 3400 	strd	r3, r4, [r1]
 801688a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	3320      	adds	r3, #32
 8016892:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016896:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	3340      	adds	r3, #64	; 0x40
 801689e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168a2:	ea80 0402 	eor.w	r4, r0, r2
 80168a6:	f8c7 4268 	str.w	r4, [r7, #616]	; 0x268
 80168aa:	404b      	eors	r3, r1
 80168ac:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 80168b0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	f103 0420 	add.w	r4, r3, #32
 80168ba:	2218      	movs	r2, #24
 80168bc:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	; 0x268
 80168c0:	f7f1 fe3e 	bl	8008540 <rotr64>
 80168c4:	4602      	mov	r2, r0
 80168c6:	460b      	mov	r3, r1
 80168c8:	e9c4 2300 	strd	r2, r3, [r4]
 80168cc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80168d0:	681b      	ldr	r3, [r3, #0]
 80168d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80168d6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80168da:	681b      	ldr	r3, [r3, #0]
 80168dc:	3320      	adds	r3, #32
 80168de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168e2:	1884      	adds	r4, r0, r2
 80168e4:	f8c7 4260 	str.w	r4, [r7, #608]	; 0x260
 80168e8:	eb41 0303 	adc.w	r3, r1, r3
 80168ec:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80168f0:	230a      	movs	r3, #10
 80168f2:	00da      	lsls	r2, r3, #3
 80168f4:	f641 6324 	movw	r3, #7716	; 0x1e24
 80168f8:	443b      	add	r3, r7
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	4413      	add	r3, r2
 80168fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016902:	e9d7 4598 	ldrd	r4, r5, [r7, #608]	; 0x260
 8016906:	4621      	mov	r1, r4
 8016908:	1889      	adds	r1, r1, r2
 801690a:	f8c7 1258 	str.w	r1, [r7, #600]	; 0x258
 801690e:	4629      	mov	r1, r5
 8016910:	eb43 0101 	adc.w	r1, r3, r1
 8016914:	f8c7 125c 	str.w	r1, [r7, #604]	; 0x25c
 8016918:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	e9d7 1296 	ldrd	r1, r2, [r7, #600]	; 0x258
 8016922:	e9c3 1200 	strd	r1, r2, [r3]
 8016926:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	3360      	adds	r3, #96	; 0x60
 801692e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016932:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	e9d3 2300 	ldrd	r2, r3, [r3]
 801693c:	ea80 0402 	eor.w	r4, r0, r2
 8016940:	f8c7 4250 	str.w	r4, [r7, #592]	; 0x250
 8016944:	404b      	eors	r3, r1
 8016946:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 801694a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8016954:	2210      	movs	r2, #16
 8016956:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	; 0x250
 801695a:	f7f1 fdf1 	bl	8008540 <rotr64>
 801695e:	4602      	mov	r2, r0
 8016960:	460b      	mov	r3, r1
 8016962:	e9c4 2300 	strd	r2, r3, [r4]
 8016966:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	3340      	adds	r3, #64	; 0x40
 801696e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8016972:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	3360      	adds	r3, #96	; 0x60
 801697a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801697e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8016982:	6809      	ldr	r1, [r1, #0]
 8016984:	3140      	adds	r1, #64	; 0x40
 8016986:	18a0      	adds	r0, r4, r2
 8016988:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
 801698c:	eb45 0303 	adc.w	r3, r5, r3
 8016990:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8016994:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 8016998:	e9c1 3400 	strd	r3, r4, [r1]
 801699c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	3320      	adds	r3, #32
 80169a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80169a8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	3340      	adds	r3, #64	; 0x40
 80169b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169b4:	ea80 0402 	eor.w	r4, r0, r2
 80169b8:	f8c7 4240 	str.w	r4, [r7, #576]	; 0x240
 80169bc:	404b      	eors	r3, r1
 80169be:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80169c2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	f103 0420 	add.w	r4, r3, #32
 80169cc:	223f      	movs	r2, #63	; 0x3f
 80169ce:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	; 0x240
 80169d2:	f7f1 fdb5 	bl	8008540 <rotr64>
 80169d6:	4602      	mov	r2, r0
 80169d8:	460b      	mov	r3, r1
 80169da:	e9c4 2300 	strd	r2, r3, [r4]
 80169de:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	3308      	adds	r3, #8
 80169e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80169ea:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	3328      	adds	r3, #40	; 0x28
 80169f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169f6:	1884      	adds	r4, r0, r2
 80169f8:	f8c7 4238 	str.w	r4, [r7, #568]	; 0x238
 80169fc:	eb41 0303 	adc.w	r3, r1, r3
 8016a00:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8016a04:	2304      	movs	r3, #4
 8016a06:	00da      	lsls	r2, r3, #3
 8016a08:	f641 6324 	movw	r3, #7716	; 0x1e24
 8016a0c:	443b      	add	r3, r7
 8016a0e:	681b      	ldr	r3, [r3, #0]
 8016a10:	4413      	add	r3, r2
 8016a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a16:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8016a1a:	6809      	ldr	r1, [r1, #0]
 8016a1c:	3108      	adds	r1, #8
 8016a1e:	e9d7 458e 	ldrd	r4, r5, [r7, #568]	; 0x238
 8016a22:	4620      	mov	r0, r4
 8016a24:	1880      	adds	r0, r0, r2
 8016a26:	f8c7 0230 	str.w	r0, [r7, #560]	; 0x230
 8016a2a:	4628      	mov	r0, r5
 8016a2c:	eb43 0000 	adc.w	r0, r3, r0
 8016a30:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234
 8016a34:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 8016a38:	e9c1 3400 	strd	r3, r4, [r1]
 8016a3c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	3368      	adds	r3, #104	; 0x68
 8016a44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016a48:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	3308      	adds	r3, #8
 8016a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a54:	ea80 0402 	eor.w	r4, r0, r2
 8016a58:	f8c7 4228 	str.w	r4, [r7, #552]	; 0x228
 8016a5c:	404b      	eors	r3, r1
 8016a5e:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8016a62:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8016a6c:	2220      	movs	r2, #32
 8016a6e:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8016a72:	f7f1 fd65 	bl	8008540 <rotr64>
 8016a76:	4602      	mov	r2, r0
 8016a78:	460b      	mov	r3, r1
 8016a7a:	e9c4 2300 	strd	r2, r3, [r4]
 8016a7e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	3348      	adds	r3, #72	; 0x48
 8016a86:	e9d3 4500 	ldrd	r4, r5, [r3]
 8016a8a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016a8e:	681b      	ldr	r3, [r3, #0]
 8016a90:	3368      	adds	r3, #104	; 0x68
 8016a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a96:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8016a9a:	6809      	ldr	r1, [r1, #0]
 8016a9c:	3148      	adds	r1, #72	; 0x48
 8016a9e:	18a0      	adds	r0, r4, r2
 8016aa0:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
 8016aa4:	eb45 0303 	adc.w	r3, r5, r3
 8016aa8:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8016aac:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 8016ab0:	e9c1 3400 	strd	r3, r4, [r1]
 8016ab4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	3328      	adds	r3, #40	; 0x28
 8016abc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016ac0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	3348      	adds	r3, #72	; 0x48
 8016ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016acc:	ea80 0402 	eor.w	r4, r0, r2
 8016ad0:	f8c7 4218 	str.w	r4, [r7, #536]	; 0x218
 8016ad4:	404b      	eors	r3, r1
 8016ad6:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8016ada:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8016ae4:	2218      	movs	r2, #24
 8016ae6:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8016aea:	f7f1 fd29 	bl	8008540 <rotr64>
 8016aee:	4602      	mov	r2, r0
 8016af0:	460b      	mov	r3, r1
 8016af2:	e9c4 2300 	strd	r2, r3, [r4]
 8016af6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016afa:	681b      	ldr	r3, [r3, #0]
 8016afc:	3308      	adds	r3, #8
 8016afe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016b02:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016b06:	681b      	ldr	r3, [r3, #0]
 8016b08:	3328      	adds	r3, #40	; 0x28
 8016b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b0e:	1884      	adds	r4, r0, r2
 8016b10:	f8c7 4210 	str.w	r4, [r7, #528]	; 0x210
 8016b14:	eb41 0303 	adc.w	r3, r1, r3
 8016b18:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8016b1c:	2308      	movs	r3, #8
 8016b1e:	00da      	lsls	r2, r3, #3
 8016b20:	f641 6324 	movw	r3, #7716	; 0x1e24
 8016b24:	443b      	add	r3, r7
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	4413      	add	r3, r2
 8016b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b2e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8016b32:	6809      	ldr	r1, [r1, #0]
 8016b34:	3108      	adds	r1, #8
 8016b36:	e9d7 4584 	ldrd	r4, r5, [r7, #528]	; 0x210
 8016b3a:	4620      	mov	r0, r4
 8016b3c:	1880      	adds	r0, r0, r2
 8016b3e:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208
 8016b42:	4628      	mov	r0, r5
 8016b44:	eb43 0000 	adc.w	r0, r3, r0
 8016b48:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
 8016b4c:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 8016b50:	e9c1 3400 	strd	r3, r4, [r1]
 8016b54:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	3368      	adds	r3, #104	; 0x68
 8016b5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016b60:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016b64:	681b      	ldr	r3, [r3, #0]
 8016b66:	3308      	adds	r3, #8
 8016b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b6c:	ea80 0402 	eor.w	r4, r0, r2
 8016b70:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 8016b74:	404b      	eors	r3, r1
 8016b76:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8016b7a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8016b84:	2210      	movs	r2, #16
 8016b86:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8016b8a:	f7f1 fcd9 	bl	8008540 <rotr64>
 8016b8e:	4602      	mov	r2, r0
 8016b90:	460b      	mov	r3, r1
 8016b92:	e9c4 2300 	strd	r2, r3, [r4]
 8016b96:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016b9a:	681b      	ldr	r3, [r3, #0]
 8016b9c:	3348      	adds	r3, #72	; 0x48
 8016b9e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8016ba2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	3368      	adds	r3, #104	; 0x68
 8016baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bae:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8016bb2:	6809      	ldr	r1, [r1, #0]
 8016bb4:	3148      	adds	r1, #72	; 0x48
 8016bb6:	18a0      	adds	r0, r4, r2
 8016bb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 8016bbc:	eb45 0303 	adc.w	r3, r5, r3
 8016bc0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8016bc4:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	; 0x1f8
 8016bc8:	e9c1 3400 	strd	r3, r4, [r1]
 8016bcc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016bd0:	681b      	ldr	r3, [r3, #0]
 8016bd2:	3328      	adds	r3, #40	; 0x28
 8016bd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016bd8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	3348      	adds	r3, #72	; 0x48
 8016be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016be4:	ea80 0402 	eor.w	r4, r0, r2
 8016be8:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 8016bec:	404b      	eors	r3, r1
 8016bee:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8016bf2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016bf6:	681b      	ldr	r3, [r3, #0]
 8016bf8:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8016bfc:	223f      	movs	r2, #63	; 0x3f
 8016bfe:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 8016c02:	f7f1 fc9d 	bl	8008540 <rotr64>
 8016c06:	4602      	mov	r2, r0
 8016c08:	460b      	mov	r3, r1
 8016c0a:	e9c4 2300 	strd	r2, r3, [r4]
 8016c0e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	3310      	adds	r3, #16
 8016c16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016c1a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	3330      	adds	r3, #48	; 0x30
 8016c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c26:	1884      	adds	r4, r0, r2
 8016c28:	f8c7 41e8 	str.w	r4, [r7, #488]	; 0x1e8
 8016c2c:	eb41 0303 	adc.w	r3, r1, r3
 8016c30:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8016c34:	2309      	movs	r3, #9
 8016c36:	00da      	lsls	r2, r3, #3
 8016c38:	f641 6324 	movw	r3, #7716	; 0x1e24
 8016c3c:	443b      	add	r3, r7
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	4413      	add	r3, r2
 8016c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c46:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8016c4a:	6809      	ldr	r1, [r1, #0]
 8016c4c:	3110      	adds	r1, #16
 8016c4e:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	; 0x1e8
 8016c52:	4620      	mov	r0, r4
 8016c54:	1880      	adds	r0, r0, r2
 8016c56:	f8c7 01e0 	str.w	r0, [r7, #480]	; 0x1e0
 8016c5a:	4628      	mov	r0, r5
 8016c5c:	eb43 0000 	adc.w	r0, r3, r0
 8016c60:	f8c7 01e4 	str.w	r0, [r7, #484]	; 0x1e4
 8016c64:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8016c68:	e9c1 3400 	strd	r3, r4, [r1]
 8016c6c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	3370      	adds	r3, #112	; 0x70
 8016c74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016c78:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016c7c:	681b      	ldr	r3, [r3, #0]
 8016c7e:	3310      	adds	r3, #16
 8016c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c84:	ea80 0402 	eor.w	r4, r0, r2
 8016c88:	f8c7 41d8 	str.w	r4, [r7, #472]	; 0x1d8
 8016c8c:	404b      	eors	r3, r1
 8016c8e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8016c92:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8016c9c:	2220      	movs	r2, #32
 8016c9e:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 8016ca2:	f7f1 fc4d 	bl	8008540 <rotr64>
 8016ca6:	4602      	mov	r2, r0
 8016ca8:	460b      	mov	r3, r1
 8016caa:	e9c4 2300 	strd	r2, r3, [r4]
 8016cae:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016cb2:	681b      	ldr	r3, [r3, #0]
 8016cb4:	3350      	adds	r3, #80	; 0x50
 8016cb6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8016cba:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	3370      	adds	r3, #112	; 0x70
 8016cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cc6:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8016cca:	6809      	ldr	r1, [r1, #0]
 8016ccc:	3150      	adds	r1, #80	; 0x50
 8016cce:	18a0      	adds	r0, r4, r2
 8016cd0:	f8c7 01d0 	str.w	r0, [r7, #464]	; 0x1d0
 8016cd4:	eb45 0303 	adc.w	r3, r5, r3
 8016cd8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8016cdc:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	; 0x1d0
 8016ce0:	e9c1 3400 	strd	r3, r4, [r1]
 8016ce4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016ce8:	681b      	ldr	r3, [r3, #0]
 8016cea:	3330      	adds	r3, #48	; 0x30
 8016cec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016cf0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016cf4:	681b      	ldr	r3, [r3, #0]
 8016cf6:	3350      	adds	r3, #80	; 0x50
 8016cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cfc:	ea80 0402 	eor.w	r4, r0, r2
 8016d00:	f8c7 41c8 	str.w	r4, [r7, #456]	; 0x1c8
 8016d04:	404b      	eors	r3, r1
 8016d06:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8016d0a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8016d14:	2218      	movs	r2, #24
 8016d16:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 8016d1a:	f7f1 fc11 	bl	8008540 <rotr64>
 8016d1e:	4602      	mov	r2, r0
 8016d20:	460b      	mov	r3, r1
 8016d22:	e9c4 2300 	strd	r2, r3, [r4]
 8016d26:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016d2a:	681b      	ldr	r3, [r3, #0]
 8016d2c:	3310      	adds	r3, #16
 8016d2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016d32:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	3330      	adds	r3, #48	; 0x30
 8016d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d3e:	1884      	adds	r4, r0, r2
 8016d40:	f8c7 41c0 	str.w	r4, [r7, #448]	; 0x1c0
 8016d44:	eb41 0303 	adc.w	r3, r1, r3
 8016d48:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8016d4c:	230f      	movs	r3, #15
 8016d4e:	00da      	lsls	r2, r3, #3
 8016d50:	f641 6324 	movw	r3, #7716	; 0x1e24
 8016d54:	443b      	add	r3, r7
 8016d56:	681b      	ldr	r3, [r3, #0]
 8016d58:	4413      	add	r3, r2
 8016d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d5e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8016d62:	6809      	ldr	r1, [r1, #0]
 8016d64:	3110      	adds	r1, #16
 8016d66:	e9d7 4570 	ldrd	r4, r5, [r7, #448]	; 0x1c0
 8016d6a:	4620      	mov	r0, r4
 8016d6c:	1880      	adds	r0, r0, r2
 8016d6e:	f8c7 01b8 	str.w	r0, [r7, #440]	; 0x1b8
 8016d72:	4628      	mov	r0, r5
 8016d74:	eb43 0000 	adc.w	r0, r3, r0
 8016d78:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
 8016d7c:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 8016d80:	e9c1 3400 	strd	r3, r4, [r1]
 8016d84:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	3370      	adds	r3, #112	; 0x70
 8016d8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016d90:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016d94:	681b      	ldr	r3, [r3, #0]
 8016d96:	3310      	adds	r3, #16
 8016d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d9c:	ea80 0402 	eor.w	r4, r0, r2
 8016da0:	f8c7 41b0 	str.w	r4, [r7, #432]	; 0x1b0
 8016da4:	404b      	eors	r3, r1
 8016da6:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8016daa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016dae:	681b      	ldr	r3, [r3, #0]
 8016db0:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8016db4:	2210      	movs	r2, #16
 8016db6:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 8016dba:	f7f1 fbc1 	bl	8008540 <rotr64>
 8016dbe:	4602      	mov	r2, r0
 8016dc0:	460b      	mov	r3, r1
 8016dc2:	e9c4 2300 	strd	r2, r3, [r4]
 8016dc6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	3350      	adds	r3, #80	; 0x50
 8016dce:	e9d3 4500 	ldrd	r4, r5, [r3]
 8016dd2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016dd6:	681b      	ldr	r3, [r3, #0]
 8016dd8:	3370      	adds	r3, #112	; 0x70
 8016dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dde:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8016de2:	6809      	ldr	r1, [r1, #0]
 8016de4:	3150      	adds	r1, #80	; 0x50
 8016de6:	18a0      	adds	r0, r4, r2
 8016de8:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
 8016dec:	eb45 0303 	adc.w	r3, r5, r3
 8016df0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8016df4:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 8016df8:	e9c1 3400 	strd	r3, r4, [r1]
 8016dfc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	3330      	adds	r3, #48	; 0x30
 8016e04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016e08:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016e0c:	681b      	ldr	r3, [r3, #0]
 8016e0e:	3350      	adds	r3, #80	; 0x50
 8016e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e14:	ea80 0402 	eor.w	r4, r0, r2
 8016e18:	f8c7 41a0 	str.w	r4, [r7, #416]	; 0x1a0
 8016e1c:	404b      	eors	r3, r1
 8016e1e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8016e22:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016e26:	681b      	ldr	r3, [r3, #0]
 8016e28:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8016e2c:	223f      	movs	r2, #63	; 0x3f
 8016e2e:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8016e32:	f7f1 fb85 	bl	8008540 <rotr64>
 8016e36:	4602      	mov	r2, r0
 8016e38:	460b      	mov	r3, r1
 8016e3a:	e9c4 2300 	strd	r2, r3, [r4]
 8016e3e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016e42:	681b      	ldr	r3, [r3, #0]
 8016e44:	3318      	adds	r3, #24
 8016e46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016e4a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	3338      	adds	r3, #56	; 0x38
 8016e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e56:	1884      	adds	r4, r0, r2
 8016e58:	f8c7 4198 	str.w	r4, [r7, #408]	; 0x198
 8016e5c:	eb41 0303 	adc.w	r3, r1, r3
 8016e60:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8016e64:	230d      	movs	r3, #13
 8016e66:	00da      	lsls	r2, r3, #3
 8016e68:	f641 6324 	movw	r3, #7716	; 0x1e24
 8016e6c:	443b      	add	r3, r7
 8016e6e:	681b      	ldr	r3, [r3, #0]
 8016e70:	4413      	add	r3, r2
 8016e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e76:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8016e7a:	6809      	ldr	r1, [r1, #0]
 8016e7c:	3118      	adds	r1, #24
 8016e7e:	e9d7 4566 	ldrd	r4, r5, [r7, #408]	; 0x198
 8016e82:	4620      	mov	r0, r4
 8016e84:	1880      	adds	r0, r0, r2
 8016e86:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 8016e8a:	4628      	mov	r0, r5
 8016e8c:	eb43 0000 	adc.w	r0, r3, r0
 8016e90:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
 8016e94:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 8016e98:	e9c1 3400 	strd	r3, r4, [r1]
 8016e9c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	3378      	adds	r3, #120	; 0x78
 8016ea4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016ea8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	3318      	adds	r3, #24
 8016eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016eb4:	ea80 0402 	eor.w	r4, r0, r2
 8016eb8:	f8c7 4188 	str.w	r4, [r7, #392]	; 0x188
 8016ebc:	404b      	eors	r3, r1
 8016ebe:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8016ec2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8016ecc:	2220      	movs	r2, #32
 8016ece:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8016ed2:	f7f1 fb35 	bl	8008540 <rotr64>
 8016ed6:	4602      	mov	r2, r0
 8016ed8:	460b      	mov	r3, r1
 8016eda:	e9c4 2300 	strd	r2, r3, [r4]
 8016ede:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016ee2:	681b      	ldr	r3, [r3, #0]
 8016ee4:	3358      	adds	r3, #88	; 0x58
 8016ee6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8016eea:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016eee:	681b      	ldr	r3, [r3, #0]
 8016ef0:	3378      	adds	r3, #120	; 0x78
 8016ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ef6:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8016efa:	6809      	ldr	r1, [r1, #0]
 8016efc:	3158      	adds	r1, #88	; 0x58
 8016efe:	18a0      	adds	r0, r4, r2
 8016f00:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
 8016f04:	eb45 0303 	adc.w	r3, r5, r3
 8016f08:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8016f0c:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 8016f10:	e9c1 3400 	strd	r3, r4, [r1]
 8016f14:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	3338      	adds	r3, #56	; 0x38
 8016f1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016f20:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016f24:	681b      	ldr	r3, [r3, #0]
 8016f26:	3358      	adds	r3, #88	; 0x58
 8016f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f2c:	ea80 0402 	eor.w	r4, r0, r2
 8016f30:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8016f34:	404b      	eors	r3, r1
 8016f36:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8016f3a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8016f44:	2218      	movs	r2, #24
 8016f46:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8016f4a:	f7f1 faf9 	bl	8008540 <rotr64>
 8016f4e:	4602      	mov	r2, r0
 8016f50:	460b      	mov	r3, r1
 8016f52:	e9c4 2300 	strd	r2, r3, [r4]
 8016f56:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016f5a:	681b      	ldr	r3, [r3, #0]
 8016f5c:	3318      	adds	r3, #24
 8016f5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016f62:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016f66:	681b      	ldr	r3, [r3, #0]
 8016f68:	3338      	adds	r3, #56	; 0x38
 8016f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f6e:	1884      	adds	r4, r0, r2
 8016f70:	f8c7 4170 	str.w	r4, [r7, #368]	; 0x170
 8016f74:	eb41 0303 	adc.w	r3, r1, r3
 8016f78:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8016f7c:	2306      	movs	r3, #6
 8016f7e:	00da      	lsls	r2, r3, #3
 8016f80:	f641 6324 	movw	r3, #7716	; 0x1e24
 8016f84:	443b      	add	r3, r7
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	4413      	add	r3, r2
 8016f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f8e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8016f92:	6809      	ldr	r1, [r1, #0]
 8016f94:	3118      	adds	r1, #24
 8016f96:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	; 0x170
 8016f9a:	4620      	mov	r0, r4
 8016f9c:	1880      	adds	r0, r0, r2
 8016f9e:	f8c7 0168 	str.w	r0, [r7, #360]	; 0x168
 8016fa2:	4628      	mov	r0, r5
 8016fa4:	eb43 0000 	adc.w	r0, r3, r0
 8016fa8:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
 8016fac:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8016fb0:	e9c1 3400 	strd	r3, r4, [r1]
 8016fb4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	3378      	adds	r3, #120	; 0x78
 8016fbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016fc0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016fc4:	681b      	ldr	r3, [r3, #0]
 8016fc6:	3318      	adds	r3, #24
 8016fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fcc:	ea80 0402 	eor.w	r4, r0, r2
 8016fd0:	f8c7 4160 	str.w	r4, [r7, #352]	; 0x160
 8016fd4:	404b      	eors	r3, r1
 8016fd6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8016fda:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8016fe4:	2210      	movs	r2, #16
 8016fe6:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8016fea:	f7f1 faa9 	bl	8008540 <rotr64>
 8016fee:	4602      	mov	r2, r0
 8016ff0:	460b      	mov	r3, r1
 8016ff2:	e9c4 2300 	strd	r2, r3, [r4]
 8016ff6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8016ffa:	681b      	ldr	r3, [r3, #0]
 8016ffc:	3358      	adds	r3, #88	; 0x58
 8016ffe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8017002:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	3378      	adds	r3, #120	; 0x78
 801700a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801700e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8017012:	6809      	ldr	r1, [r1, #0]
 8017014:	3158      	adds	r1, #88	; 0x58
 8017016:	18a0      	adds	r0, r4, r2
 8017018:	f8c7 0158 	str.w	r0, [r7, #344]	; 0x158
 801701c:	eb45 0303 	adc.w	r3, r5, r3
 8017020:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8017024:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 8017028:	e9c1 3400 	strd	r3, r4, [r1]
 801702c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8017030:	681b      	ldr	r3, [r3, #0]
 8017032:	3338      	adds	r3, #56	; 0x38
 8017034:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017038:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801703c:	681b      	ldr	r3, [r3, #0]
 801703e:	3358      	adds	r3, #88	; 0x58
 8017040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017044:	ea80 0402 	eor.w	r4, r0, r2
 8017048:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 801704c:	404b      	eors	r3, r1
 801704e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8017052:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	f103 0438 	add.w	r4, r3, #56	; 0x38
 801705c:	223f      	movs	r2, #63	; 0x3f
 801705e:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8017062:	f7f1 fa6d 	bl	8008540 <rotr64>
 8017066:	4602      	mov	r2, r0
 8017068:	460b      	mov	r3, r1
 801706a:	e9c4 2300 	strd	r2, r3, [r4]
 801706e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8017072:	681b      	ldr	r3, [r3, #0]
 8017074:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017078:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801707c:	681b      	ldr	r3, [r3, #0]
 801707e:	3328      	adds	r3, #40	; 0x28
 8017080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017084:	1884      	adds	r4, r0, r2
 8017086:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 801708a:	eb41 0303 	adc.w	r3, r1, r3
 801708e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8017092:	2301      	movs	r3, #1
 8017094:	00da      	lsls	r2, r3, #3
 8017096:	f641 6324 	movw	r3, #7716	; 0x1e24
 801709a:	443b      	add	r3, r7
 801709c:	681b      	ldr	r3, [r3, #0]
 801709e:	4413      	add	r3, r2
 80170a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170a4:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	; 0x148
 80170a8:	4621      	mov	r1, r4
 80170aa:	1889      	adds	r1, r1, r2
 80170ac:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 80170b0:	4629      	mov	r1, r5
 80170b2:	eb43 0101 	adc.w	r1, r3, r1
 80170b6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 80170ba:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80170be:	681b      	ldr	r3, [r3, #0]
 80170c0:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 80170c4:	e9c3 1200 	strd	r1, r2, [r3]
 80170c8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80170cc:	681b      	ldr	r3, [r3, #0]
 80170ce:	3378      	adds	r3, #120	; 0x78
 80170d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80170d4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80170d8:	681b      	ldr	r3, [r3, #0]
 80170da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170de:	ea80 0402 	eor.w	r4, r0, r2
 80170e2:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 80170e6:	404b      	eors	r3, r1
 80170e8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80170ec:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80170f6:	2220      	movs	r2, #32
 80170f8:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 80170fc:	f7f1 fa20 	bl	8008540 <rotr64>
 8017100:	4602      	mov	r2, r0
 8017102:	460b      	mov	r3, r1
 8017104:	e9c4 2300 	strd	r2, r3, [r4]
 8017108:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801710c:	681b      	ldr	r3, [r3, #0]
 801710e:	3350      	adds	r3, #80	; 0x50
 8017110:	e9d3 4500 	ldrd	r4, r5, [r3]
 8017114:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8017118:	681b      	ldr	r3, [r3, #0]
 801711a:	3378      	adds	r3, #120	; 0x78
 801711c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017120:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8017124:	6809      	ldr	r1, [r1, #0]
 8017126:	3150      	adds	r1, #80	; 0x50
 8017128:	18a0      	adds	r0, r4, r2
 801712a:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
 801712e:	eb45 0303 	adc.w	r3, r5, r3
 8017132:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8017136:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 801713a:	e9c1 3400 	strd	r3, r4, [r1]
 801713e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8017142:	681b      	ldr	r3, [r3, #0]
 8017144:	3328      	adds	r3, #40	; 0x28
 8017146:	e9d3 0100 	ldrd	r0, r1, [r3]
 801714a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801714e:	681b      	ldr	r3, [r3, #0]
 8017150:	3350      	adds	r3, #80	; 0x50
 8017152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017156:	ea80 0402 	eor.w	r4, r0, r2
 801715a:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 801715e:	404b      	eors	r3, r1
 8017160:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8017164:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8017168:	681b      	ldr	r3, [r3, #0]
 801716a:	f103 0428 	add.w	r4, r3, #40	; 0x28
 801716e:	2218      	movs	r2, #24
 8017170:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8017174:	f7f1 f9e4 	bl	8008540 <rotr64>
 8017178:	4602      	mov	r2, r0
 801717a:	460b      	mov	r3, r1
 801717c:	e9c4 2300 	strd	r2, r3, [r4]
 8017180:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	e9d3 0100 	ldrd	r0, r1, [r3]
 801718a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801718e:	681b      	ldr	r3, [r3, #0]
 8017190:	3328      	adds	r3, #40	; 0x28
 8017192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017196:	1884      	adds	r4, r0, r2
 8017198:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 801719c:	eb41 0303 	adc.w	r3, r1, r3
 80171a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80171a4:	230c      	movs	r3, #12
 80171a6:	00da      	lsls	r2, r3, #3
 80171a8:	f641 6324 	movw	r3, #7716	; 0x1e24
 80171ac:	443b      	add	r3, r7
 80171ae:	681b      	ldr	r3, [r3, #0]
 80171b0:	4413      	add	r3, r2
 80171b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171b6:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 80171ba:	4621      	mov	r1, r4
 80171bc:	1889      	adds	r1, r1, r2
 80171be:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 80171c2:	4629      	mov	r1, r5
 80171c4:	eb43 0101 	adc.w	r1, r3, r1
 80171c8:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 80171cc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80171d0:	681b      	ldr	r3, [r3, #0]
 80171d2:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 80171d6:	e9c3 1200 	strd	r1, r2, [r3]
 80171da:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80171de:	681b      	ldr	r3, [r3, #0]
 80171e0:	3378      	adds	r3, #120	; 0x78
 80171e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80171e6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80171ea:	681b      	ldr	r3, [r3, #0]
 80171ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171f0:	ea80 0402 	eor.w	r4, r0, r2
 80171f4:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80171f8:	404b      	eors	r3, r1
 80171fa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80171fe:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8017202:	681b      	ldr	r3, [r3, #0]
 8017204:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8017208:	2210      	movs	r2, #16
 801720a:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 801720e:	f7f1 f997 	bl	8008540 <rotr64>
 8017212:	4602      	mov	r2, r0
 8017214:	460b      	mov	r3, r1
 8017216:	e9c4 2300 	strd	r2, r3, [r4]
 801721a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801721e:	681b      	ldr	r3, [r3, #0]
 8017220:	3350      	adds	r3, #80	; 0x50
 8017222:	e9d3 4500 	ldrd	r4, r5, [r3]
 8017226:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801722a:	681b      	ldr	r3, [r3, #0]
 801722c:	3378      	adds	r3, #120	; 0x78
 801722e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017232:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8017236:	6809      	ldr	r1, [r1, #0]
 8017238:	3150      	adds	r1, #80	; 0x50
 801723a:	18a0      	adds	r0, r4, r2
 801723c:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8017240:	eb45 0303 	adc.w	r3, r5, r3
 8017244:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8017248:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 801724c:	e9c1 3400 	strd	r3, r4, [r1]
 8017250:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8017254:	681b      	ldr	r3, [r3, #0]
 8017256:	3328      	adds	r3, #40	; 0x28
 8017258:	e9d3 0100 	ldrd	r0, r1, [r3]
 801725c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8017260:	681b      	ldr	r3, [r3, #0]
 8017262:	3350      	adds	r3, #80	; 0x50
 8017264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017268:	ea80 0402 	eor.w	r4, r0, r2
 801726c:	f8c7 4100 	str.w	r4, [r7, #256]	; 0x100
 8017270:	404b      	eors	r3, r1
 8017272:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8017276:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801727a:	681b      	ldr	r3, [r3, #0]
 801727c:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8017280:	223f      	movs	r2, #63	; 0x3f
 8017282:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8017286:	f7f1 f95b 	bl	8008540 <rotr64>
 801728a:	4602      	mov	r2, r0
 801728c:	460b      	mov	r3, r1
 801728e:	e9c4 2300 	strd	r2, r3, [r4]
 8017292:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8017296:	681b      	ldr	r3, [r3, #0]
 8017298:	3308      	adds	r3, #8
 801729a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801729e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	3330      	adds	r3, #48	; 0x30
 80172a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172aa:	1884      	adds	r4, r0, r2
 80172ac:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 80172b0:	eb41 0303 	adc.w	r3, r1, r3
 80172b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80172b8:	2300      	movs	r3, #0
 80172ba:	00da      	lsls	r2, r3, #3
 80172bc:	f641 6324 	movw	r3, #7716	; 0x1e24
 80172c0:	443b      	add	r3, r7
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	4413      	add	r3, r2
 80172c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172ca:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80172ce:	6809      	ldr	r1, [r1, #0]
 80172d0:	3108      	adds	r1, #8
 80172d2:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80172d6:	4620      	mov	r0, r4
 80172d8:	1880      	adds	r0, r0, r2
 80172da:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 80172de:	4628      	mov	r0, r5
 80172e0:	eb43 0000 	adc.w	r0, r3, r0
 80172e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 80172e8:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80172ec:	e9c1 3400 	strd	r3, r4, [r1]
 80172f0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80172f4:	681b      	ldr	r3, [r3, #0]
 80172f6:	3360      	adds	r3, #96	; 0x60
 80172f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80172fc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8017300:	681b      	ldr	r3, [r3, #0]
 8017302:	3308      	adds	r3, #8
 8017304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017308:	ea80 0402 	eor.w	r4, r0, r2
 801730c:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 8017310:	404b      	eors	r3, r1
 8017312:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8017316:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801731a:	681b      	ldr	r3, [r3, #0]
 801731c:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8017320:	2220      	movs	r2, #32
 8017322:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8017326:	f7f1 f90b 	bl	8008540 <rotr64>
 801732a:	4602      	mov	r2, r0
 801732c:	460b      	mov	r3, r1
 801732e:	e9c4 2300 	strd	r2, r3, [r4]
 8017332:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8017336:	681b      	ldr	r3, [r3, #0]
 8017338:	3358      	adds	r3, #88	; 0x58
 801733a:	e9d3 4500 	ldrd	r4, r5, [r3]
 801733e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8017342:	681b      	ldr	r3, [r3, #0]
 8017344:	3360      	adds	r3, #96	; 0x60
 8017346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801734a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801734e:	6809      	ldr	r1, [r1, #0]
 8017350:	3158      	adds	r1, #88	; 0x58
 8017352:	18a0      	adds	r0, r4, r2
 8017354:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
 8017358:	eb45 0303 	adc.w	r3, r5, r3
 801735c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8017360:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8017364:	e9c1 3400 	strd	r3, r4, [r1]
 8017368:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801736c:	681b      	ldr	r3, [r3, #0]
 801736e:	3330      	adds	r3, #48	; 0x30
 8017370:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017374:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8017378:	681b      	ldr	r3, [r3, #0]
 801737a:	3358      	adds	r3, #88	; 0x58
 801737c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017380:	ea80 0402 	eor.w	r4, r0, r2
 8017384:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 8017388:	404b      	eors	r3, r1
 801738a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801738e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8017392:	681b      	ldr	r3, [r3, #0]
 8017394:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8017398:	2218      	movs	r2, #24
 801739a:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 801739e:	f7f1 f8cf 	bl	8008540 <rotr64>
 80173a2:	4602      	mov	r2, r0
 80173a4:	460b      	mov	r3, r1
 80173a6:	e9c4 2300 	strd	r2, r3, [r4]
 80173aa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80173ae:	681b      	ldr	r3, [r3, #0]
 80173b0:	3308      	adds	r3, #8
 80173b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80173b6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80173ba:	681b      	ldr	r3, [r3, #0]
 80173bc:	3330      	adds	r3, #48	; 0x30
 80173be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173c2:	1884      	adds	r4, r0, r2
 80173c4:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 80173c8:	eb41 0303 	adc.w	r3, r1, r3
 80173cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80173d0:	2302      	movs	r3, #2
 80173d2:	00da      	lsls	r2, r3, #3
 80173d4:	f641 6324 	movw	r3, #7716	; 0x1e24
 80173d8:	443b      	add	r3, r7
 80173da:	681b      	ldr	r3, [r3, #0]
 80173dc:	4413      	add	r3, r2
 80173de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173e2:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80173e6:	6809      	ldr	r1, [r1, #0]
 80173e8:	3108      	adds	r1, #8
 80173ea:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80173ee:	4620      	mov	r0, r4
 80173f0:	1880      	adds	r0, r0, r2
 80173f2:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
 80173f6:	4628      	mov	r0, r5
 80173f8:	eb43 0000 	adc.w	r0, r3, r0
 80173fc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 8017400:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8017404:	e9c1 3400 	strd	r3, r4, [r1]
 8017408:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801740c:	681b      	ldr	r3, [r3, #0]
 801740e:	3360      	adds	r3, #96	; 0x60
 8017410:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017414:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8017418:	681b      	ldr	r3, [r3, #0]
 801741a:	3308      	adds	r3, #8
 801741c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017420:	ea80 0402 	eor.w	r4, r0, r2
 8017424:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 8017428:	404b      	eors	r3, r1
 801742a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801742e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8017438:	2210      	movs	r2, #16
 801743a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 801743e:	f7f1 f87f 	bl	8008540 <rotr64>
 8017442:	4602      	mov	r2, r0
 8017444:	460b      	mov	r3, r1
 8017446:	e9c4 2300 	strd	r2, r3, [r4]
 801744a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	3358      	adds	r3, #88	; 0x58
 8017452:	e9d3 4500 	ldrd	r4, r5, [r3]
 8017456:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801745a:	681b      	ldr	r3, [r3, #0]
 801745c:	3360      	adds	r3, #96	; 0x60
 801745e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017462:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8017466:	6809      	ldr	r1, [r1, #0]
 8017468:	3158      	adds	r1, #88	; 0x58
 801746a:	18a0      	adds	r0, r4, r2
 801746c:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 8017470:	eb45 0303 	adc.w	r3, r5, r3
 8017474:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8017478:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 801747c:	e9c1 3400 	strd	r3, r4, [r1]
 8017480:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8017484:	681b      	ldr	r3, [r3, #0]
 8017486:	3330      	adds	r3, #48	; 0x30
 8017488:	e9d3 0100 	ldrd	r0, r1, [r3]
 801748c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	3358      	adds	r3, #88	; 0x58
 8017494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017498:	ea80 0402 	eor.w	r4, r0, r2
 801749c:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80174a0:	404b      	eors	r3, r1
 80174a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80174a6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80174aa:	681b      	ldr	r3, [r3, #0]
 80174ac:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80174b0:	223f      	movs	r2, #63	; 0x3f
 80174b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80174b6:	f7f1 f843 	bl	8008540 <rotr64>
 80174ba:	4602      	mov	r2, r0
 80174bc:	460b      	mov	r3, r1
 80174be:	e9c4 2300 	strd	r2, r3, [r4]
 80174c2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80174c6:	681b      	ldr	r3, [r3, #0]
 80174c8:	3310      	adds	r3, #16
 80174ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80174ce:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80174d2:	681b      	ldr	r3, [r3, #0]
 80174d4:	3338      	adds	r3, #56	; 0x38
 80174d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174da:	1884      	adds	r4, r0, r2
 80174dc:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80174e0:	eb41 0303 	adc.w	r3, r1, r3
 80174e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80174e8:	230b      	movs	r3, #11
 80174ea:	00da      	lsls	r2, r3, #3
 80174ec:	f641 6324 	movw	r3, #7716	; 0x1e24
 80174f0:	443b      	add	r3, r7
 80174f2:	681b      	ldr	r3, [r3, #0]
 80174f4:	4413      	add	r3, r2
 80174f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174fa:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80174fe:	6809      	ldr	r1, [r1, #0]
 8017500:	3110      	adds	r1, #16
 8017502:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8017506:	4620      	mov	r0, r4
 8017508:	1880      	adds	r0, r0, r2
 801750a:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 801750e:	4628      	mov	r0, r5
 8017510:	eb43 0000 	adc.w	r0, r3, r0
 8017514:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 8017518:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 801751c:	e9c1 3400 	strd	r3, r4, [r1]
 8017520:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8017524:	681b      	ldr	r3, [r3, #0]
 8017526:	3368      	adds	r3, #104	; 0x68
 8017528:	e9d3 0100 	ldrd	r0, r1, [r3]
 801752c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8017530:	681b      	ldr	r3, [r3, #0]
 8017532:	3310      	adds	r3, #16
 8017534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017538:	ea80 0402 	eor.w	r4, r0, r2
 801753c:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8017540:	404b      	eors	r3, r1
 8017542:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8017546:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801754a:	681b      	ldr	r3, [r3, #0]
 801754c:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8017550:	2220      	movs	r2, #32
 8017552:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8017556:	f7f0 fff3 	bl	8008540 <rotr64>
 801755a:	4602      	mov	r2, r0
 801755c:	460b      	mov	r3, r1
 801755e:	e9c4 2300 	strd	r2, r3, [r4]
 8017562:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8017566:	681b      	ldr	r3, [r3, #0]
 8017568:	3340      	adds	r3, #64	; 0x40
 801756a:	e9d3 4500 	ldrd	r4, r5, [r3]
 801756e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8017572:	681b      	ldr	r3, [r3, #0]
 8017574:	3368      	adds	r3, #104	; 0x68
 8017576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801757a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801757e:	6809      	ldr	r1, [r1, #0]
 8017580:	3140      	adds	r1, #64	; 0x40
 8017582:	18a0      	adds	r0, r4, r2
 8017584:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
 8017588:	eb45 0303 	adc.w	r3, r5, r3
 801758c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8017590:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8017594:	e9c1 3400 	strd	r3, r4, [r1]
 8017598:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801759c:	681b      	ldr	r3, [r3, #0]
 801759e:	3338      	adds	r3, #56	; 0x38
 80175a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80175a4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80175a8:	681b      	ldr	r3, [r3, #0]
 80175aa:	3340      	adds	r3, #64	; 0x40
 80175ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175b0:	ea80 0402 	eor.w	r4, r0, r2
 80175b4:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80175b8:	404b      	eors	r3, r1
 80175ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80175be:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80175c8:	2218      	movs	r2, #24
 80175ca:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80175ce:	f7f0 ffb7 	bl	8008540 <rotr64>
 80175d2:	4602      	mov	r2, r0
 80175d4:	460b      	mov	r3, r1
 80175d6:	e9c4 2300 	strd	r2, r3, [r4]
 80175da:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80175de:	681b      	ldr	r3, [r3, #0]
 80175e0:	3310      	adds	r3, #16
 80175e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80175e6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80175ea:	681b      	ldr	r3, [r3, #0]
 80175ec:	3338      	adds	r3, #56	; 0x38
 80175ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175f2:	1884      	adds	r4, r0, r2
 80175f4:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 80175f8:	eb41 0303 	adc.w	r3, r1, r3
 80175fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8017600:	2307      	movs	r3, #7
 8017602:	00da      	lsls	r2, r3, #3
 8017604:	f641 6324 	movw	r3, #7716	; 0x1e24
 8017608:	443b      	add	r3, r7
 801760a:	681b      	ldr	r3, [r3, #0]
 801760c:	4413      	add	r3, r2
 801760e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017612:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8017616:	6809      	ldr	r1, [r1, #0]
 8017618:	3110      	adds	r1, #16
 801761a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 801761e:	4620      	mov	r0, r4
 8017620:	1880      	adds	r0, r0, r2
 8017622:	67b8      	str	r0, [r7, #120]	; 0x78
 8017624:	4628      	mov	r0, r5
 8017626:	eb43 0000 	adc.w	r0, r3, r0
 801762a:	67f8      	str	r0, [r7, #124]	; 0x7c
 801762c:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8017630:	e9c1 3400 	strd	r3, r4, [r1]
 8017634:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8017638:	681b      	ldr	r3, [r3, #0]
 801763a:	3368      	adds	r3, #104	; 0x68
 801763c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017640:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8017644:	681b      	ldr	r3, [r3, #0]
 8017646:	3310      	adds	r3, #16
 8017648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801764c:	ea80 0402 	eor.w	r4, r0, r2
 8017650:	673c      	str	r4, [r7, #112]	; 0x70
 8017652:	404b      	eors	r3, r1
 8017654:	677b      	str	r3, [r7, #116]	; 0x74
 8017656:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801765a:	681b      	ldr	r3, [r3, #0]
 801765c:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8017660:	2210      	movs	r2, #16
 8017662:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8017666:	f7f0 ff6b 	bl	8008540 <rotr64>
 801766a:	4602      	mov	r2, r0
 801766c:	460b      	mov	r3, r1
 801766e:	e9c4 2300 	strd	r2, r3, [r4]
 8017672:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	3340      	adds	r3, #64	; 0x40
 801767a:	e9d3 4500 	ldrd	r4, r5, [r3]
 801767e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8017682:	681b      	ldr	r3, [r3, #0]
 8017684:	3368      	adds	r3, #104	; 0x68
 8017686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801768a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801768e:	6809      	ldr	r1, [r1, #0]
 8017690:	3140      	adds	r1, #64	; 0x40
 8017692:	18a0      	adds	r0, r4, r2
 8017694:	66b8      	str	r0, [r7, #104]	; 0x68
 8017696:	eb45 0303 	adc.w	r3, r5, r3
 801769a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801769c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80176a0:	e9c1 3400 	strd	r3, r4, [r1]
 80176a4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80176a8:	681b      	ldr	r3, [r3, #0]
 80176aa:	3338      	adds	r3, #56	; 0x38
 80176ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80176b0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80176b4:	681b      	ldr	r3, [r3, #0]
 80176b6:	3340      	adds	r3, #64	; 0x40
 80176b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176bc:	ea80 0402 	eor.w	r4, r0, r2
 80176c0:	663c      	str	r4, [r7, #96]	; 0x60
 80176c2:	404b      	eors	r3, r1
 80176c4:	667b      	str	r3, [r7, #100]	; 0x64
 80176c6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80176ca:	681b      	ldr	r3, [r3, #0]
 80176cc:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80176d0:	223f      	movs	r2, #63	; 0x3f
 80176d2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80176d6:	f7f0 ff33 	bl	8008540 <rotr64>
 80176da:	4602      	mov	r2, r0
 80176dc:	460b      	mov	r3, r1
 80176de:	e9c4 2300 	strd	r2, r3, [r4]
 80176e2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80176e6:	681b      	ldr	r3, [r3, #0]
 80176e8:	3318      	adds	r3, #24
 80176ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80176ee:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80176f2:	681b      	ldr	r3, [r3, #0]
 80176f4:	3320      	adds	r3, #32
 80176f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176fa:	1884      	adds	r4, r0, r2
 80176fc:	65bc      	str	r4, [r7, #88]	; 0x58
 80176fe:	eb41 0303 	adc.w	r3, r1, r3
 8017702:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017704:	2305      	movs	r3, #5
 8017706:	00da      	lsls	r2, r3, #3
 8017708:	f641 6324 	movw	r3, #7716	; 0x1e24
 801770c:	443b      	add	r3, r7
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	4413      	add	r3, r2
 8017712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017716:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801771a:	6809      	ldr	r1, [r1, #0]
 801771c:	3118      	adds	r1, #24
 801771e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8017722:	4620      	mov	r0, r4
 8017724:	1880      	adds	r0, r0, r2
 8017726:	6538      	str	r0, [r7, #80]	; 0x50
 8017728:	4628      	mov	r0, r5
 801772a:	eb43 0000 	adc.w	r0, r3, r0
 801772e:	6578      	str	r0, [r7, #84]	; 0x54
 8017730:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8017734:	e9c1 3400 	strd	r3, r4, [r1]
 8017738:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801773c:	681b      	ldr	r3, [r3, #0]
 801773e:	3370      	adds	r3, #112	; 0x70
 8017740:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017744:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8017748:	681b      	ldr	r3, [r3, #0]
 801774a:	3318      	adds	r3, #24
 801774c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017750:	ea80 0402 	eor.w	r4, r0, r2
 8017754:	64bc      	str	r4, [r7, #72]	; 0x48
 8017756:	404b      	eors	r3, r1
 8017758:	64fb      	str	r3, [r7, #76]	; 0x4c
 801775a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801775e:	681b      	ldr	r3, [r3, #0]
 8017760:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8017764:	2220      	movs	r2, #32
 8017766:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 801776a:	f7f0 fee9 	bl	8008540 <rotr64>
 801776e:	4602      	mov	r2, r0
 8017770:	460b      	mov	r3, r1
 8017772:	e9c4 2300 	strd	r2, r3, [r4]
 8017776:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801777a:	681b      	ldr	r3, [r3, #0]
 801777c:	3348      	adds	r3, #72	; 0x48
 801777e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8017782:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8017786:	681b      	ldr	r3, [r3, #0]
 8017788:	3370      	adds	r3, #112	; 0x70
 801778a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801778e:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8017792:	6809      	ldr	r1, [r1, #0]
 8017794:	3148      	adds	r1, #72	; 0x48
 8017796:	18a0      	adds	r0, r4, r2
 8017798:	6438      	str	r0, [r7, #64]	; 0x40
 801779a:	eb45 0303 	adc.w	r3, r5, r3
 801779e:	647b      	str	r3, [r7, #68]	; 0x44
 80177a0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80177a4:	e9c1 3400 	strd	r3, r4, [r1]
 80177a8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80177ac:	681b      	ldr	r3, [r3, #0]
 80177ae:	3320      	adds	r3, #32
 80177b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80177b4:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80177b8:	681b      	ldr	r3, [r3, #0]
 80177ba:	3348      	adds	r3, #72	; 0x48
 80177bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177c0:	ea80 0402 	eor.w	r4, r0, r2
 80177c4:	63bc      	str	r4, [r7, #56]	; 0x38
 80177c6:	404b      	eors	r3, r1
 80177c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80177ca:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80177ce:	681b      	ldr	r3, [r3, #0]
 80177d0:	f103 0420 	add.w	r4, r3, #32
 80177d4:	2218      	movs	r2, #24
 80177d6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80177da:	f7f0 feb1 	bl	8008540 <rotr64>
 80177de:	4602      	mov	r2, r0
 80177e0:	460b      	mov	r3, r1
 80177e2:	e9c4 2300 	strd	r2, r3, [r4]
 80177e6:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80177ea:	681b      	ldr	r3, [r3, #0]
 80177ec:	3318      	adds	r3, #24
 80177ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80177f2:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80177f6:	681b      	ldr	r3, [r3, #0]
 80177f8:	3320      	adds	r3, #32
 80177fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177fe:	1884      	adds	r4, r0, r2
 8017800:	633c      	str	r4, [r7, #48]	; 0x30
 8017802:	eb41 0303 	adc.w	r3, r1, r3
 8017806:	637b      	str	r3, [r7, #52]	; 0x34
 8017808:	2303      	movs	r3, #3
 801780a:	00da      	lsls	r2, r3, #3
 801780c:	f641 6324 	movw	r3, #7716	; 0x1e24
 8017810:	443b      	add	r3, r7
 8017812:	681b      	ldr	r3, [r3, #0]
 8017814:	4413      	add	r3, r2
 8017816:	e9d3 2300 	ldrd	r2, r3, [r3]
 801781a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 801781e:	6809      	ldr	r1, [r1, #0]
 8017820:	3118      	adds	r1, #24
 8017822:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8017826:	4620      	mov	r0, r4
 8017828:	1880      	adds	r0, r0, r2
 801782a:	62b8      	str	r0, [r7, #40]	; 0x28
 801782c:	4628      	mov	r0, r5
 801782e:	eb43 0000 	adc.w	r0, r3, r0
 8017832:	62f8      	str	r0, [r7, #44]	; 0x2c
 8017834:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8017838:	e9c1 3400 	strd	r3, r4, [r1]
 801783c:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8017840:	681b      	ldr	r3, [r3, #0]
 8017842:	3370      	adds	r3, #112	; 0x70
 8017844:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017848:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	3318      	adds	r3, #24
 8017850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017854:	ea80 0402 	eor.w	r4, r0, r2
 8017858:	623c      	str	r4, [r7, #32]
 801785a:	404b      	eors	r3, r1
 801785c:	627b      	str	r3, [r7, #36]	; 0x24
 801785e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8017862:	681b      	ldr	r3, [r3, #0]
 8017864:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8017868:	2210      	movs	r2, #16
 801786a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801786e:	f7f0 fe67 	bl	8008540 <rotr64>
 8017872:	4602      	mov	r2, r0
 8017874:	460b      	mov	r3, r1
 8017876:	e9c4 2300 	strd	r2, r3, [r4]
 801787a:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801787e:	681b      	ldr	r3, [r3, #0]
 8017880:	3348      	adds	r3, #72	; 0x48
 8017882:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017886:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	3370      	adds	r3, #112	; 0x70
 801788e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017892:	f507 54f1 	add.w	r4, r7, #7712	; 0x1e20
 8017896:	6824      	ldr	r4, [r4, #0]
 8017898:	3448      	adds	r4, #72	; 0x48
 801789a:	1885      	adds	r5, r0, r2
 801789c:	61bd      	str	r5, [r7, #24]
 801789e:	eb41 0303 	adc.w	r3, r1, r3
 80178a2:	61fb      	str	r3, [r7, #28]
 80178a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80178a8:	e9c4 2300 	strd	r2, r3, [r4]
 80178ac:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80178b0:	681b      	ldr	r3, [r3, #0]
 80178b2:	3320      	adds	r3, #32
 80178b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80178b8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80178bc:	681b      	ldr	r3, [r3, #0]
 80178be:	3348      	adds	r3, #72	; 0x48
 80178c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178c4:	ea80 0402 	eor.w	r4, r0, r2
 80178c8:	613c      	str	r4, [r7, #16]
 80178ca:	404b      	eors	r3, r1
 80178cc:	617b      	str	r3, [r7, #20]
 80178ce:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80178d2:	681b      	ldr	r3, [r3, #0]
 80178d4:	f103 0420 	add.w	r4, r3, #32
 80178d8:	223f      	movs	r2, #63	; 0x3f
 80178da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80178de:	f7f0 fe2f 	bl	8008540 <rotr64>
 80178e2:	4602      	mov	r2, r0
 80178e4:	460b      	mov	r3, r1
 80178e6:	e9c4 2300 	strd	r2, r3, [r4]

  for( i = 0; i < 8; ++i )
 80178ea:	2300      	movs	r3, #0
 80178ec:	f641 6234 	movw	r2, #7732	; 0x1e34
 80178f0:	443a      	add	r2, r7
 80178f2:	6013      	str	r3, [r2, #0]
 80178f4:	e048      	b.n	8017988 <blake2b_compress+0xf1b0>
    S->h[i] = S->h[i] ^ v[i] ^ v[i + 8];
 80178f6:	f641 632c 	movw	r3, #7724	; 0x1e2c
 80178fa:	443b      	add	r3, r7
 80178fc:	681a      	ldr	r2, [r3, #0]
 80178fe:	f641 6334 	movw	r3, #7732	; 0x1e34
 8017902:	443b      	add	r3, r7
 8017904:	681b      	ldr	r3, [r3, #0]
 8017906:	00db      	lsls	r3, r3, #3
 8017908:	18d1      	adds	r1, r2, r3
 801790a:	680a      	ldr	r2, [r1, #0]
 801790c:	684b      	ldr	r3, [r1, #4]
 801790e:	f641 6134 	movw	r1, #7732	; 0x1e34
 8017912:	4439      	add	r1, r7
 8017914:	6809      	ldr	r1, [r1, #0]
 8017916:	00c9      	lsls	r1, r1, #3
 8017918:	f507 50f1 	add.w	r0, r7, #7712	; 0x1e20
 801791c:	6800      	ldr	r0, [r0, #0]
 801791e:	4401      	add	r1, r0
 8017920:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017924:	ea82 0400 	eor.w	r4, r2, r0
 8017928:	60bc      	str	r4, [r7, #8]
 801792a:	404b      	eors	r3, r1
 801792c:	60fb      	str	r3, [r7, #12]
 801792e:	f641 6334 	movw	r3, #7732	; 0x1e34
 8017932:	443b      	add	r3, r7
 8017934:	681b      	ldr	r3, [r3, #0]
 8017936:	3308      	adds	r3, #8
 8017938:	00db      	lsls	r3, r3, #3
 801793a:	f507 52f1 	add.w	r2, r7, #7712	; 0x1e20
 801793e:	6812      	ldr	r2, [r2, #0]
 8017940:	4413      	add	r3, r2
 8017942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017946:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801794a:	4621      	mov	r1, r4
 801794c:	4051      	eors	r1, r2
 801794e:	6039      	str	r1, [r7, #0]
 8017950:	4629      	mov	r1, r5
 8017952:	404b      	eors	r3, r1
 8017954:	607b      	str	r3, [r7, #4]
 8017956:	f641 632c 	movw	r3, #7724	; 0x1e2c
 801795a:	443b      	add	r3, r7
 801795c:	681a      	ldr	r2, [r3, #0]
 801795e:	f641 6334 	movw	r3, #7732	; 0x1e34
 8017962:	443b      	add	r3, r7
 8017964:	681b      	ldr	r3, [r3, #0]
 8017966:	00db      	lsls	r3, r3, #3
 8017968:	4413      	add	r3, r2
 801796a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801796e:	4602      	mov	r2, r0
 8017970:	601a      	str	r2, [r3, #0]
 8017972:	460a      	mov	r2, r1
 8017974:	605a      	str	r2, [r3, #4]
  for( i = 0; i < 8; ++i )
 8017976:	f641 6334 	movw	r3, #7732	; 0x1e34
 801797a:	443b      	add	r3, r7
 801797c:	681b      	ldr	r3, [r3, #0]
 801797e:	3301      	adds	r3, #1
 8017980:	f641 6234 	movw	r2, #7732	; 0x1e34
 8017984:	443a      	add	r2, r7
 8017986:	6013      	str	r3, [r2, #0]
 8017988:	f641 6334 	movw	r3, #7732	; 0x1e34
 801798c:	443b      	add	r3, r7
 801798e:	681b      	ldr	r3, [r3, #0]
 8017990:	2b07      	cmp	r3, #7
 8017992:	ddb0      	ble.n	80178f6 <blake2b_compress+0xf11e>

#undef G
#undef ROUND

  return 0;
 8017994:	2300      	movs	r3, #0
}
 8017996:	4618      	mov	r0, r3
 8017998:	f507 57f1 	add.w	r7, r7, #7712	; 0x1e20
 801799c:	3718      	adds	r7, #24
 801799e:	46bd      	mov	sp, r7
 80179a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080179a4 <blake2b_update>:

/* inlen now in bytes */
int blake2b_update( blake2b_state *S, const byte *in, word64 inlen )
{
 80179a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179a8:	b093      	sub	sp, #76	; 0x4c
 80179aa:	af00      	add	r7, sp, #0
 80179ac:	61f8      	str	r0, [r7, #28]
 80179ae:	61b9      	str	r1, [r7, #24]
 80179b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
  int ret = 0;
 80179b4:	2300      	movs	r3, #0
 80179b6:	647b      	str	r3, [r7, #68]	; 0x44
#ifdef WOLFSSL_SMALL_STACK
  word64* m;
  word64* v;

  m = (word64*)XMALLOC(sizeof(word64) * 32, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 80179b8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80179bc:	f006 fc7a 	bl	801e2b4 <wolfSSL_Malloc>
 80179c0:	6438      	str	r0, [r7, #64]	; 0x40

  if ( m == NULL ) return MEMORY_E;
 80179c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d102      	bne.n	80179ce <blake2b_update+0x2a>
 80179c8:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 80179cc:	e0a5      	b.n	8017b1a <blake2b_update+0x176>

  v = &m[16];
 80179ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80179d0:	3380      	adds	r3, #128	; 0x80
 80179d2:	63fb      	str	r3, [r7, #60]	; 0x3c
#else
  word64 m[16];
  word64 v[16];
#endif

  while( inlen > 0 )
 80179d4:	e091      	b.n	8017afa <blake2b_update+0x156>
  {
    word64 left = S->buflen;
 80179d6:	69f9      	ldr	r1, [r7, #28]
 80179d8:	f8d1 2160 	ldr.w	r2, [r1, #352]	; 0x160
 80179dc:	f8d1 3164 	ldr.w	r3, [r1, #356]	; 0x164
 80179e0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    word64 fill = 2 * BLAKE2B_BLOCKBYTES - left;
 80179e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80179e8:	2100      	movs	r1, #0
 80179ea:	f5d2 7080 	rsbs	r0, r2, #256	; 0x100
 80179ee:	60b8      	str	r0, [r7, #8]
 80179f0:	eb61 0303 	sbc.w	r3, r1, r3
 80179f4:	60fb      	str	r3, [r7, #12]
 80179f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80179fa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    if( inlen > fill )
 80179fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8017a02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8017a06:	4290      	cmp	r0, r2
 8017a08:	eb71 0303 	sbcs.w	r3, r1, r3
 8017a0c:	d255      	bcs.n	8017aba <blake2b_update+0x116>
    {
      XMEMCPY( S->buf + left, in, (wolfssl_word)fill ); /* Fill buffer */
 8017a0e:	69fb      	ldr	r3, [r7, #28]
 8017a10:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8017a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a16:	4413      	add	r3, r2
 8017a18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017a1a:	69b9      	ldr	r1, [r7, #24]
 8017a1c:	4618      	mov	r0, r3
 8017a1e:	f012 fd53 	bl	802a4c8 <memcpy>
      S->buflen += fill;
 8017a22:	69f9      	ldr	r1, [r7, #28]
 8017a24:	f8d1 2160 	ldr.w	r2, [r1, #352]	; 0x160
 8017a28:	f8d1 3164 	ldr.w	r3, [r1, #356]	; 0x164
 8017a2c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8017a30:	1814      	adds	r4, r2, r0
 8017a32:	eb43 0501 	adc.w	r5, r3, r1
 8017a36:	69fb      	ldr	r3, [r7, #28]
 8017a38:	f8c3 4160 	str.w	r4, [r3, #352]	; 0x160
 8017a3c:	f8c3 5164 	str.w	r5, [r3, #356]	; 0x164
      blake2b_increment_counter( S, BLAKE2B_BLOCKBYTES );
 8017a40:	f04f 0280 	mov.w	r2, #128	; 0x80
 8017a44:	f04f 0300 	mov.w	r3, #0
 8017a48:	69f8      	ldr	r0, [r7, #28]
 8017a4a:	f7f0 fe12 	bl	8008672 <blake2b_increment_counter>

      {
          ret = blake2b_compress( S, S->buf, m, v );
 8017a4e:	69fb      	ldr	r3, [r7, #28]
 8017a50:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8017a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017a56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017a58:	69f8      	ldr	r0, [r7, #28]
 8017a5a:	f7f0 febd 	bl	80087d8 <blake2b_compress>
 8017a5e:	6478      	str	r0, [r7, #68]	; 0x44
          if (ret < 0) break;
 8017a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	db4f      	blt.n	8017b06 <blake2b_update+0x162>
      }

      XMEMCPY( S->buf, S->buf + BLAKE2B_BLOCKBYTES, BLAKE2B_BLOCKBYTES );
 8017a66:	69fb      	ldr	r3, [r7, #28]
 8017a68:	f103 0060 	add.w	r0, r3, #96	; 0x60
 8017a6c:	69fb      	ldr	r3, [r7, #28]
 8017a6e:	3360      	adds	r3, #96	; 0x60
 8017a70:	3380      	adds	r3, #128	; 0x80
 8017a72:	2280      	movs	r2, #128	; 0x80
 8017a74:	4619      	mov	r1, r3
 8017a76:	f012 fd27 	bl	802a4c8 <memcpy>
              /* Shift buffer left */
      S->buflen -= BLAKE2B_BLOCKBYTES;
 8017a7a:	69f9      	ldr	r1, [r7, #28]
 8017a7c:	f8d1 2160 	ldr.w	r2, [r1, #352]	; 0x160
 8017a80:	f8d1 3164 	ldr.w	r3, [r1, #356]	; 0x164
 8017a84:	f1b2 0880 	subs.w	r8, r2, #128	; 0x80
 8017a88:	f143 39ff 	adc.w	r9, r3, #4294967295
 8017a8c:	69fb      	ldr	r3, [r7, #28]
 8017a8e:	f8c3 8160 	str.w	r8, [r3, #352]	; 0x160
 8017a92:	f8c3 9164 	str.w	r9, [r3, #356]	; 0x164
      in += fill;
 8017a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a98:	69ba      	ldr	r2, [r7, #24]
 8017a9a:	4413      	add	r3, r2
 8017a9c:	61bb      	str	r3, [r7, #24]
      inlen -= fill;
 8017a9e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8017aa2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8017aa6:	1a86      	subs	r6, r0, r2
 8017aa8:	603e      	str	r6, [r7, #0]
 8017aaa:	eb61 0303 	sbc.w	r3, r1, r3
 8017aae:	607b      	str	r3, [r7, #4]
 8017ab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017ab4:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8017ab8:	e01f      	b.n	8017afa <blake2b_update+0x156>
    }
    else /* inlen <= fill */
    {
      XMEMCPY( S->buf + left, in, (wolfssl_word)inlen );
 8017aba:	69fb      	ldr	r3, [r7, #28]
 8017abc:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8017ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ac2:	4413      	add	r3, r2
 8017ac4:	693a      	ldr	r2, [r7, #16]
 8017ac6:	69b9      	ldr	r1, [r7, #24]
 8017ac8:	4618      	mov	r0, r3
 8017aca:	f012 fcfd 	bl	802a4c8 <memcpy>
      S->buflen += inlen; /* Be lazy, do not compress */
 8017ace:	69f9      	ldr	r1, [r7, #28]
 8017ad0:	f8d1 2160 	ldr.w	r2, [r1, #352]	; 0x160
 8017ad4:	f8d1 3164 	ldr.w	r3, [r1, #356]	; 0x164
 8017ad8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8017adc:	eb12 0a00 	adds.w	sl, r2, r0
 8017ae0:	eb43 0b01 	adc.w	fp, r3, r1
 8017ae4:	69fb      	ldr	r3, [r7, #28]
 8017ae6:	f8c3 a160 	str.w	sl, [r3, #352]	; 0x160
 8017aea:	f8c3 b164 	str.w	fp, [r3, #356]	; 0x164
      inlen = 0;
 8017aee:	f04f 0200 	mov.w	r2, #0
 8017af2:	f04f 0300 	mov.w	r3, #0
 8017af6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  while( inlen > 0 )
 8017afa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8017afe:	4313      	orrs	r3, r2
 8017b00:	f47f af69 	bne.w	80179d6 <blake2b_update+0x32>
 8017b04:	e000      	b.n	8017b08 <blake2b_update+0x164>
          if (ret < 0) break;
 8017b06:	bf00      	nop
    }
  }

#ifdef WOLFSSL_SMALL_STACK
  XFREE(m, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8017b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8017b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d002      	beq.n	8017b18 <blake2b_update+0x174>
 8017b12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017b14:	f006 fbea 	bl	801e2ec <wolfSSL_Free>
#endif

  return ret;
 8017b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8017b1a:	4618      	mov	r0, r3
 8017b1c:	374c      	adds	r7, #76	; 0x4c
 8017b1e:	46bd      	mov	sp, r7
 8017b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017b24 <blake2b_final>:

/* Is this correct? */
int blake2b_final( blake2b_state *S, byte *out, byte outlen )
{
 8017b24:	b5b0      	push	{r4, r5, r7, lr}
 8017b26:	b09a      	sub	sp, #104	; 0x68
 8017b28:	af00      	add	r7, sp, #0
 8017b2a:	60f8      	str	r0, [r7, #12]
 8017b2c:	60b9      	str	r1, [r7, #8]
 8017b2e:	4613      	mov	r3, r2
 8017b30:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
 8017b32:	2300      	movs	r3, #0
 8017b34:	667b      	str	r3, [r7, #100]	; 0x64
  int     i;
#ifdef WOLFSSL_SMALL_STACK
  word64* m;
  word64* v;

  m = (word64*)XMALLOC(sizeof(word64) * 32, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8017b36:	f44f 7080 	mov.w	r0, #256	; 0x100
 8017b3a:	f006 fbbb 	bl	801e2b4 <wolfSSL_Malloc>
 8017b3e:	65f8      	str	r0, [r7, #92]	; 0x5c

  if ( m == NULL ) return MEMORY_E;
 8017b40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d102      	bne.n	8017b4c <blake2b_final+0x28>
 8017b46:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8017b4a:	e094      	b.n	8017c76 <blake2b_final+0x152>

  v = &m[16];
 8017b4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017b4e:	3380      	adds	r3, #128	; 0x80
 8017b50:	65bb      	str	r3, [r7, #88]	; 0x58
#else
  word64 m[16];
  word64 v[16];
#endif

  if( S->buflen > BLAKE2B_BLOCKBYTES )
 8017b52:	68f9      	ldr	r1, [r7, #12]
 8017b54:	f8d1 2160 	ldr.w	r2, [r1, #352]	; 0x160
 8017b58:	f8d1 3164 	ldr.w	r3, [r1, #356]	; 0x164
 8017b5c:	2a81      	cmp	r2, #129	; 0x81
 8017b5e:	f173 0300 	sbcs.w	r3, r3, #0
 8017b62:	d331      	bcc.n	8017bc8 <blake2b_final+0xa4>
  {
    blake2b_increment_counter( S, BLAKE2B_BLOCKBYTES );
 8017b64:	f04f 0280 	mov.w	r2, #128	; 0x80
 8017b68:	f04f 0300 	mov.w	r3, #0
 8017b6c:	68f8      	ldr	r0, [r7, #12]
 8017b6e:	f7f0 fd80 	bl	8008672 <blake2b_increment_counter>

    {
      ret = blake2b_compress( S, S->buf, m, v );
 8017b72:	68fb      	ldr	r3, [r7, #12]
 8017b74:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8017b78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017b7a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017b7c:	68f8      	ldr	r0, [r7, #12]
 8017b7e:	f7f0 fe2b 	bl	80087d8 <blake2b_compress>
 8017b82:	6678      	str	r0, [r7, #100]	; 0x64
      if (ret < 0) goto out;
 8017b84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	db69      	blt.n	8017c5e <blake2b_final+0x13a>
    }

    S->buflen -= BLAKE2B_BLOCKBYTES;
 8017b8a:	68f9      	ldr	r1, [r7, #12]
 8017b8c:	f8d1 2160 	ldr.w	r2, [r1, #352]	; 0x160
 8017b90:	f8d1 3164 	ldr.w	r3, [r1, #356]	; 0x164
 8017b94:	f1b2 0480 	subs.w	r4, r2, #128	; 0x80
 8017b98:	f143 35ff 	adc.w	r5, r3, #4294967295
 8017b9c:	68fb      	ldr	r3, [r7, #12]
 8017b9e:	f8c3 4160 	str.w	r4, [r3, #352]	; 0x160
 8017ba2:	f8c3 5164 	str.w	r5, [r3, #356]	; 0x164
    XMEMCPY( S->buf, S->buf + BLAKE2B_BLOCKBYTES, (wolfssl_word)S->buflen );
 8017ba6:	68fb      	ldr	r3, [r7, #12]
 8017ba8:	f103 0060 	add.w	r0, r3, #96	; 0x60
 8017bac:	68fb      	ldr	r3, [r7, #12]
 8017bae:	3360      	adds	r3, #96	; 0x60
 8017bb0:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8017bb4:	68f9      	ldr	r1, [r7, #12]
 8017bb6:	f8d1 2160 	ldr.w	r2, [r1, #352]	; 0x160
 8017bba:	f8d1 3164 	ldr.w	r3, [r1, #356]	; 0x164
 8017bbe:	4613      	mov	r3, r2
 8017bc0:	461a      	mov	r2, r3
 8017bc2:	4621      	mov	r1, r4
 8017bc4:	f012 fc80 	bl	802a4c8 <memcpy>
  }

  blake2b_increment_counter( S, S->buflen );
 8017bc8:	68f9      	ldr	r1, [r7, #12]
 8017bca:	f8d1 2160 	ldr.w	r2, [r1, #352]	; 0x160
 8017bce:	f8d1 3164 	ldr.w	r3, [r1, #356]	; 0x164
 8017bd2:	68f8      	ldr	r0, [r7, #12]
 8017bd4:	f7f0 fd4d 	bl	8008672 <blake2b_increment_counter>
  blake2b_set_lastblock( S );
 8017bd8:	68f8      	ldr	r0, [r7, #12]
 8017bda:	f7f0 fd18 	bl	800860e <blake2b_set_lastblock>
  XMEMSET( S->buf + S->buflen, 0, (wolfssl_word)(2 * BLAKE2B_BLOCKBYTES - S->buflen) );
 8017bde:	68fb      	ldr	r3, [r7, #12]
 8017be0:	f103 0060 	add.w	r0, r3, #96	; 0x60
 8017be4:	68f9      	ldr	r1, [r7, #12]
 8017be6:	f8d1 2160 	ldr.w	r2, [r1, #352]	; 0x160
 8017bea:	f8d1 3164 	ldr.w	r3, [r1, #356]	; 0x164
 8017bee:	4613      	mov	r3, r2
 8017bf0:	4418      	add	r0, r3
 8017bf2:	68f9      	ldr	r1, [r7, #12]
 8017bf4:	f8d1 2160 	ldr.w	r2, [r1, #352]	; 0x160
 8017bf8:	f8d1 3164 	ldr.w	r3, [r1, #356]	; 0x164
 8017bfc:	4613      	mov	r3, r2
 8017bfe:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8017c02:	461a      	mov	r2, r3
 8017c04:	2100      	movs	r1, #0
 8017c06:	f012 fc87 	bl	802a518 <memset>
         /* Padding */
  {
    ret = blake2b_compress( S, S->buf, m, v );
 8017c0a:	68fb      	ldr	r3, [r7, #12]
 8017c0c:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8017c10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017c12:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017c14:	68f8      	ldr	r0, [r7, #12]
 8017c16:	f7f0 fddf 	bl	80087d8 <blake2b_compress>
 8017c1a:	6678      	str	r0, [r7, #100]	; 0x64
    if (ret < 0) goto out;
 8017c1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	db1f      	blt.n	8017c62 <blake2b_final+0x13e>
  }

  for( i = 0; i < 8; ++i ) /* Output full hash to temp buffer */
 8017c22:	2300      	movs	r3, #0
 8017c24:	663b      	str	r3, [r7, #96]	; 0x60
 8017c26:	e00f      	b.n	8017c48 <blake2b_final+0x124>
    store64( buffer + sizeof( S->h[i] ) * i, S->h[i] );
 8017c28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017c2a:	00db      	lsls	r3, r3, #3
 8017c2c:	f107 0214 	add.w	r2, r7, #20
 8017c30:	18d0      	adds	r0, r2, r3
 8017c32:	68fa      	ldr	r2, [r7, #12]
 8017c34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017c36:	00db      	lsls	r3, r3, #3
 8017c38:	18d1      	adds	r1, r2, r3
 8017c3a:	680a      	ldr	r2, [r1, #0]
 8017c3c:	684b      	ldr	r3, [r1, #4]
 8017c3e:	f7f0 fbf5 	bl	800842c <store64>
  for( i = 0; i < 8; ++i ) /* Output full hash to temp buffer */
 8017c42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017c44:	3301      	adds	r3, #1
 8017c46:	663b      	str	r3, [r7, #96]	; 0x60
 8017c48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017c4a:	2b07      	cmp	r3, #7
 8017c4c:	ddec      	ble.n	8017c28 <blake2b_final+0x104>

  XMEMCPY( out, buffer, outlen );
 8017c4e:	79fa      	ldrb	r2, [r7, #7]
 8017c50:	f107 0314 	add.w	r3, r7, #20
 8017c54:	4619      	mov	r1, r3
 8017c56:	68b8      	ldr	r0, [r7, #8]
 8017c58:	f012 fc36 	bl	802a4c8 <memcpy>
 8017c5c:	e002      	b.n	8017c64 <blake2b_final+0x140>
      if (ret < 0) goto out;
 8017c5e:	bf00      	nop
 8017c60:	e000      	b.n	8017c64 <blake2b_final+0x140>
    if (ret < 0) goto out;
 8017c62:	bf00      	nop

 out:

#ifdef WOLFSSL_SMALL_STACK
  XFREE(m, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 8017c64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017c66:	657b      	str	r3, [r7, #84]	; 0x54
 8017c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d002      	beq.n	8017c74 <blake2b_final+0x150>
 8017c6e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017c70:	f006 fb3c 	bl	801e2ec <wolfSSL_Free>
#endif

  return ret;
 8017c74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 8017c76:	4618      	mov	r0, r3
 8017c78:	3768      	adds	r7, #104	; 0x68
 8017c7a:	46bd      	mov	sp, r7
 8017c7c:	bdb0      	pop	{r4, r5, r7, pc}

08017c7e <wc_InitBlake2b>:

/* wolfCrypt API */

/* Init Blake2b digest, track size in case final doesn't want to "remember" */
int wc_InitBlake2b(Blake2b* b2b, word32 digestSz)
{
 8017c7e:	b580      	push	{r7, lr}
 8017c80:	b082      	sub	sp, #8
 8017c82:	af00      	add	r7, sp, #0
 8017c84:	6078      	str	r0, [r7, #4]
 8017c86:	6039      	str	r1, [r7, #0]
    if (b2b == NULL){
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d102      	bne.n	8017c94 <wc_InitBlake2b+0x16>
        return BAD_FUNC_ARG;
 8017c8e:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8017c92:	e00b      	b.n	8017cac <wc_InitBlake2b+0x2e>
    }
    b2b->digestSz = digestSz;
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	683a      	ldr	r2, [r7, #0]
 8017c98:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    return blake2b_init(b2b->S, (byte)digestSz);
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	683a      	ldr	r2, [r7, #0]
 8017ca0:	b2d2      	uxtb	r2, r2
 8017ca2:	4611      	mov	r1, r2
 8017ca4:	4618      	mov	r0, r3
 8017ca6:	f7f0 fd70 	bl	800878a <blake2b_init>
 8017caa:	4603      	mov	r3, r0
}
 8017cac:	4618      	mov	r0, r3
 8017cae:	3708      	adds	r7, #8
 8017cb0:	46bd      	mov	sp, r7
 8017cb2:	bd80      	pop	{r7, pc}

08017cb4 <wc_Blake2bUpdate>:
        return blake2b_init(b2b->S, (byte)digestSz);
}

/* Blake2b Update */
int wc_Blake2bUpdate(Blake2b* b2b, const byte* data, word32 sz)
{
 8017cb4:	b5b0      	push	{r4, r5, r7, lr}
 8017cb6:	b084      	sub	sp, #16
 8017cb8:	af00      	add	r7, sp, #0
 8017cba:	60f8      	str	r0, [r7, #12]
 8017cbc:	60b9      	str	r1, [r7, #8]
 8017cbe:	607a      	str	r2, [r7, #4]
    return blake2b_update(b2b->S, data, sz);
 8017cc0:	68f8      	ldr	r0, [r7, #12]
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	2200      	movs	r2, #0
 8017cc6:	461c      	mov	r4, r3
 8017cc8:	4615      	mov	r5, r2
 8017cca:	4622      	mov	r2, r4
 8017ccc:	462b      	mov	r3, r5
 8017cce:	68b9      	ldr	r1, [r7, #8]
 8017cd0:	f7ff fe68 	bl	80179a4 <blake2b_update>
 8017cd4:	4603      	mov	r3, r0
}
 8017cd6:	4618      	mov	r0, r3
 8017cd8:	3710      	adds	r7, #16
 8017cda:	46bd      	mov	sp, r7
 8017cdc:	bdb0      	pop	{r4, r5, r7, pc}

08017cde <wc_Blake2bFinal>:


/* Blake2b Final, if pass in zero size we use init digestSz */
int wc_Blake2bFinal(Blake2b* b2b, byte* final, word32 requestSz)
{
 8017cde:	b580      	push	{r7, lr}
 8017ce0:	b086      	sub	sp, #24
 8017ce2:	af00      	add	r7, sp, #0
 8017ce4:	60f8      	str	r0, [r7, #12]
 8017ce6:	60b9      	str	r1, [r7, #8]
 8017ce8:	607a      	str	r2, [r7, #4]
    word32 sz = requestSz ? requestSz : b2b->digestSz;
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d103      	bne.n	8017cf8 <wc_Blake2bFinal+0x1a>
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8017cf6:	e000      	b.n	8017cfa <wc_Blake2bFinal+0x1c>
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	617b      	str	r3, [r7, #20]

    return blake2b_final(b2b->S, final, (byte)sz);
 8017cfc:	68fb      	ldr	r3, [r7, #12]
 8017cfe:	697a      	ldr	r2, [r7, #20]
 8017d00:	b2d2      	uxtb	r2, r2
 8017d02:	68b9      	ldr	r1, [r7, #8]
 8017d04:	4618      	mov	r0, r3
 8017d06:	f7ff ff0d 	bl	8017b24 <blake2b_final>
 8017d0a:	4603      	mov	r3, r0
}
 8017d0c:	4618      	mov	r0, r3
 8017d0e:	3718      	adds	r7, #24
 8017d10:	46bd      	mov	sp, r7
 8017d12:	bd80      	pop	{r7, pc}

08017d14 <load32>:
{
 8017d14:	b480      	push	{r7}
 8017d16:	b083      	sub	sp, #12
 8017d18:	af00      	add	r7, sp, #0
 8017d1a:	6078      	str	r0, [r7, #4]
  return *( word32 * )( src );
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	681b      	ldr	r3, [r3, #0]
}
 8017d20:	4618      	mov	r0, r3
 8017d22:	370c      	adds	r7, #12
 8017d24:	46bd      	mov	sp, r7
 8017d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d2a:	4770      	bx	lr

08017d2c <store64>:
{
 8017d2c:	b480      	push	{r7}
 8017d2e:	b087      	sub	sp, #28
 8017d30:	af00      	add	r7, sp, #0
 8017d32:	60f8      	str	r0, [r7, #12]
 8017d34:	e9c7 2300 	strd	r2, r3, [r7]
  byte *p = ( byte * )dst;
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	617b      	str	r3, [r7, #20]
  *p++ = ( byte )w; w >>= 8;
 8017d3c:	697b      	ldr	r3, [r7, #20]
 8017d3e:	1c5a      	adds	r2, r3, #1
 8017d40:	617a      	str	r2, [r7, #20]
 8017d42:	783a      	ldrb	r2, [r7, #0]
 8017d44:	701a      	strb	r2, [r3, #0]
 8017d46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8017d4a:	f04f 0200 	mov.w	r2, #0
 8017d4e:	f04f 0300 	mov.w	r3, #0
 8017d52:	0a02      	lsrs	r2, r0, #8
 8017d54:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8017d58:	0a0b      	lsrs	r3, r1, #8
 8017d5a:	e9c7 2300 	strd	r2, r3, [r7]
  *p++ = ( byte )w; w >>= 8;
 8017d5e:	697b      	ldr	r3, [r7, #20]
 8017d60:	1c5a      	adds	r2, r3, #1
 8017d62:	617a      	str	r2, [r7, #20]
 8017d64:	783a      	ldrb	r2, [r7, #0]
 8017d66:	701a      	strb	r2, [r3, #0]
 8017d68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8017d6c:	f04f 0200 	mov.w	r2, #0
 8017d70:	f04f 0300 	mov.w	r3, #0
 8017d74:	0a02      	lsrs	r2, r0, #8
 8017d76:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8017d7a:	0a0b      	lsrs	r3, r1, #8
 8017d7c:	e9c7 2300 	strd	r2, r3, [r7]
  *p++ = ( byte )w; w >>= 8;
 8017d80:	697b      	ldr	r3, [r7, #20]
 8017d82:	1c5a      	adds	r2, r3, #1
 8017d84:	617a      	str	r2, [r7, #20]
 8017d86:	783a      	ldrb	r2, [r7, #0]
 8017d88:	701a      	strb	r2, [r3, #0]
 8017d8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8017d8e:	f04f 0200 	mov.w	r2, #0
 8017d92:	f04f 0300 	mov.w	r3, #0
 8017d96:	0a02      	lsrs	r2, r0, #8
 8017d98:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8017d9c:	0a0b      	lsrs	r3, r1, #8
 8017d9e:	e9c7 2300 	strd	r2, r3, [r7]
  *p++ = ( byte )w; w >>= 8;
 8017da2:	697b      	ldr	r3, [r7, #20]
 8017da4:	1c5a      	adds	r2, r3, #1
 8017da6:	617a      	str	r2, [r7, #20]
 8017da8:	783a      	ldrb	r2, [r7, #0]
 8017daa:	701a      	strb	r2, [r3, #0]
 8017dac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8017db0:	f04f 0200 	mov.w	r2, #0
 8017db4:	f04f 0300 	mov.w	r3, #0
 8017db8:	0a02      	lsrs	r2, r0, #8
 8017dba:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8017dbe:	0a0b      	lsrs	r3, r1, #8
 8017dc0:	e9c7 2300 	strd	r2, r3, [r7]
  *p++ = ( byte )w; w >>= 8;
 8017dc4:	697b      	ldr	r3, [r7, #20]
 8017dc6:	1c5a      	adds	r2, r3, #1
 8017dc8:	617a      	str	r2, [r7, #20]
 8017dca:	783a      	ldrb	r2, [r7, #0]
 8017dcc:	701a      	strb	r2, [r3, #0]
 8017dce:	e9d7 0100 	ldrd	r0, r1, [r7]
 8017dd2:	f04f 0200 	mov.w	r2, #0
 8017dd6:	f04f 0300 	mov.w	r3, #0
 8017dda:	0a02      	lsrs	r2, r0, #8
 8017ddc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8017de0:	0a0b      	lsrs	r3, r1, #8
 8017de2:	e9c7 2300 	strd	r2, r3, [r7]
  *p++ = ( byte )w; w >>= 8;
 8017de6:	697b      	ldr	r3, [r7, #20]
 8017de8:	1c5a      	adds	r2, r3, #1
 8017dea:	617a      	str	r2, [r7, #20]
 8017dec:	783a      	ldrb	r2, [r7, #0]
 8017dee:	701a      	strb	r2, [r3, #0]
 8017df0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8017df4:	f04f 0200 	mov.w	r2, #0
 8017df8:	f04f 0300 	mov.w	r3, #0
 8017dfc:	0a02      	lsrs	r2, r0, #8
 8017dfe:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8017e02:	0a0b      	lsrs	r3, r1, #8
 8017e04:	e9c7 2300 	strd	r2, r3, [r7]
  *p++ = ( byte )w; w >>= 8;
 8017e08:	697b      	ldr	r3, [r7, #20]
 8017e0a:	1c5a      	adds	r2, r3, #1
 8017e0c:	617a      	str	r2, [r7, #20]
 8017e0e:	783a      	ldrb	r2, [r7, #0]
 8017e10:	701a      	strb	r2, [r3, #0]
 8017e12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8017e16:	f04f 0200 	mov.w	r2, #0
 8017e1a:	f04f 0300 	mov.w	r3, #0
 8017e1e:	0a02      	lsrs	r2, r0, #8
 8017e20:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8017e24:	0a0b      	lsrs	r3, r1, #8
 8017e26:	e9c7 2300 	strd	r2, r3, [r7]
  *p++ = ( byte )w;
 8017e2a:	697b      	ldr	r3, [r7, #20]
 8017e2c:	1c5a      	adds	r2, r3, #1
 8017e2e:	617a      	str	r2, [r7, #20]
 8017e30:	783a      	ldrb	r2, [r7, #0]
 8017e32:	701a      	strb	r2, [r3, #0]
}
 8017e34:	bf00      	nop
 8017e36:	371c      	adds	r7, #28
 8017e38:	46bd      	mov	sp, r7
 8017e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e3e:	4770      	bx	lr

08017e40 <rotr32>:
{
 8017e40:	b480      	push	{r7}
 8017e42:	b083      	sub	sp, #12
 8017e44:	af00      	add	r7, sp, #0
 8017e46:	6078      	str	r0, [r7, #4]
 8017e48:	6039      	str	r1, [r7, #0]
  return ( w >> c ) | ( w << ( 32 - c ) );
 8017e4a:	687a      	ldr	r2, [r7, #4]
 8017e4c:	683b      	ldr	r3, [r7, #0]
 8017e4e:	fa62 f303 	ror.w	r3, r2, r3
}
 8017e52:	4618      	mov	r0, r3
 8017e54:	370c      	adds	r7, #12
 8017e56:	46bd      	mov	sp, r7
 8017e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e5c:	4770      	bx	lr

08017e5e <blake2s_set_lastnode>:
  { 10,  2,  8,  4,  7,  6,  1,  5, 15, 11,  9, 14,  3, 12, 13 , 0 }
};


static WC_INLINE int blake2s_set_lastnode( blake2s_state *S )
{
 8017e5e:	b480      	push	{r7}
 8017e60:	b083      	sub	sp, #12
 8017e62:	af00      	add	r7, sp, #0
 8017e64:	6078      	str	r0, [r7, #4]
  S->f[1] = ~0;
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	f04f 32ff 	mov.w	r2, #4294967295
 8017e6c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8017e70:	f04f 32ff 	mov.w	r2, #4294967295
 8017e74:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8017e78:	f04f 32ff 	mov.w	r2, #4294967295
 8017e7c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8017e80:	f04f 32ff 	mov.w	r2, #4294967295
 8017e84:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  return 0;
 8017e88:	2300      	movs	r3, #0
}
 8017e8a:	4618      	mov	r0, r3
 8017e8c:	370c      	adds	r7, #12
 8017e8e:	46bd      	mov	sp, r7
 8017e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e94:	4770      	bx	lr

08017e96 <blake2s_set_lastblock>:

/* Some helper functions, not necessarily useful */
static WC_INLINE int blake2s_set_lastblock( blake2s_state *S )
{
 8017e96:	b580      	push	{r7, lr}
 8017e98:	b082      	sub	sp, #8
 8017e9a:	af00      	add	r7, sp, #0
 8017e9c:	6078      	str	r0, [r7, #4]
  if( S->last_node ) blake2s_set_lastnode( S );
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d002      	beq.n	8017eae <blake2s_set_lastblock+0x18>
 8017ea8:	6878      	ldr	r0, [r7, #4]
 8017eaa:	f7ff ffd8 	bl	8017e5e <blake2s_set_lastnode>

  S->f[0] = ~0;
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8017eb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8017eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8017ebc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8017ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8017ec4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8017ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8017ecc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  return 0;
 8017ed0:	2300      	movs	r3, #0
}
 8017ed2:	4618      	mov	r0, r3
 8017ed4:	3708      	adds	r7, #8
 8017ed6:	46bd      	mov	sp, r7
 8017ed8:	bd80      	pop	{r7, pc}

08017eda <blake2s_increment_counter>:

static WC_INLINE int blake2s_increment_counter( blake2s_state *S, const word32
                                             inc )
{
 8017eda:	b480      	push	{r7}
 8017edc:	b083      	sub	sp, #12
 8017ede:	af00      	add	r7, sp, #0
 8017ee0:	6078      	str	r0, [r7, #4]
 8017ee2:	6039      	str	r1, [r7, #0]
  S->t[0] += inc;
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	6a1a      	ldr	r2, [r3, #32]
 8017ee8:	683b      	ldr	r3, [r7, #0]
 8017eea:	441a      	add	r2, r3
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	621a      	str	r2, [r3, #32]
  S->t[1] += ( S->t[0] < inc );
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ef4:	687a      	ldr	r2, [r7, #4]
 8017ef6:	6a12      	ldr	r2, [r2, #32]
 8017ef8:	6839      	ldr	r1, [r7, #0]
 8017efa:	4291      	cmp	r1, r2
 8017efc:	bf8c      	ite	hi
 8017efe:	2201      	movhi	r2, #1
 8017f00:	2200      	movls	r2, #0
 8017f02:	b2d2      	uxtb	r2, r2
 8017f04:	441a      	add	r2, r3
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	625a      	str	r2, [r3, #36]	; 0x24
  return 0;
 8017f0a:	2300      	movs	r3, #0
}
 8017f0c:	4618      	mov	r0, r3
 8017f0e:	370c      	adds	r7, #12
 8017f10:	46bd      	mov	sp, r7
 8017f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f16:	4770      	bx	lr

08017f18 <blake2s_init0>:

static WC_INLINE int blake2s_init0( blake2s_state *S )
{
 8017f18:	b580      	push	{r7, lr}
 8017f1a:	b084      	sub	sp, #16
 8017f1c:	af00      	add	r7, sp, #0
 8017f1e:	6078      	str	r0, [r7, #4]
  int i;
  XMEMSET( S, 0, sizeof( blake2s_state ) );
 8017f20:	22b5      	movs	r2, #181	; 0xb5
 8017f22:	2100      	movs	r1, #0
 8017f24:	6878      	ldr	r0, [r7, #4]
 8017f26:	f012 faf7 	bl	802a518 <memset>

  for( i = 0; i < 8; ++i ) S->h[i] = blake2s_IV[i];
 8017f2a:	2300      	movs	r3, #0
 8017f2c:	60fb      	str	r3, [r7, #12]
 8017f2e:	e00a      	b.n	8017f46 <blake2s_init0+0x2e>
 8017f30:	4a09      	ldr	r2, [pc, #36]	; (8017f58 <blake2s_init0+0x40>)
 8017f32:	68fb      	ldr	r3, [r7, #12]
 8017f34:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	68fa      	ldr	r2, [r7, #12]
 8017f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	3301      	adds	r3, #1
 8017f44:	60fb      	str	r3, [r7, #12]
 8017f46:	68fb      	ldr	r3, [r7, #12]
 8017f48:	2b07      	cmp	r3, #7
 8017f4a:	ddf1      	ble.n	8017f30 <blake2s_init0+0x18>

  return 0;
 8017f4c:	2300      	movs	r3, #0
}
 8017f4e:	4618      	mov	r0, r3
 8017f50:	3710      	adds	r7, #16
 8017f52:	46bd      	mov	sp, r7
 8017f54:	bd80      	pop	{r7, pc}
 8017f56:	bf00      	nop
 8017f58:	0802d668 	.word	0x0802d668

08017f5c <blake2s_init_param>:

/* init xors IV with input parameter block */
int blake2s_init_param( blake2s_state *S, const blake2s_param *P )
{
 8017f5c:	b580      	push	{r7, lr}
 8017f5e:	b084      	sub	sp, #16
 8017f60:	af00      	add	r7, sp, #0
 8017f62:	6078      	str	r0, [r7, #4]
 8017f64:	6039      	str	r1, [r7, #0]
  word32 i;
  byte *p ;
  blake2s_init0( S );
 8017f66:	6878      	ldr	r0, [r7, #4]
 8017f68:	f7ff ffd6 	bl	8017f18 <blake2s_init0>
  p =  ( byte * )( P );
 8017f6c:	683b      	ldr	r3, [r7, #0]
 8017f6e:	60bb      	str	r3, [r7, #8]

  /* IV XOR ParamBlock */
  for( i = 0; i < 8; ++i )
 8017f70:	2300      	movs	r3, #0
 8017f72:	60fb      	str	r3, [r7, #12]
 8017f74:	e013      	b.n	8017f9e <blake2s_init_param+0x42>
    S->h[i] ^= load32( p + sizeof( S->h[i] ) * i );
 8017f76:	68fb      	ldr	r3, [r7, #12]
 8017f78:	009b      	lsls	r3, r3, #2
 8017f7a:	68ba      	ldr	r2, [r7, #8]
 8017f7c:	4413      	add	r3, r2
 8017f7e:	4618      	mov	r0, r3
 8017f80:	f7ff fec8 	bl	8017d14 <load32>
 8017f84:	4601      	mov	r1, r0
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	68fa      	ldr	r2, [r7, #12]
 8017f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017f8e:	4059      	eors	r1, r3
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	68fa      	ldr	r2, [r7, #12]
 8017f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for( i = 0; i < 8; ++i )
 8017f98:	68fb      	ldr	r3, [r7, #12]
 8017f9a:	3301      	adds	r3, #1
 8017f9c:	60fb      	str	r3, [r7, #12]
 8017f9e:	68fb      	ldr	r3, [r7, #12]
 8017fa0:	2b07      	cmp	r3, #7
 8017fa2:	d9e8      	bls.n	8017f76 <blake2s_init_param+0x1a>

  return 0;
 8017fa4:	2300      	movs	r3, #0
}
 8017fa6:	4618      	mov	r0, r3
 8017fa8:	3710      	adds	r7, #16
 8017faa:	46bd      	mov	sp, r7
 8017fac:	bd80      	pop	{r7, pc}

08017fae <blake2s_init>:



int blake2s_init( blake2s_state *S, const byte outlen )
{
 8017fae:	b580      	push	{r7, lr}
 8017fb0:	b08a      	sub	sp, #40	; 0x28
 8017fb2:	af00      	add	r7, sp, #0
 8017fb4:	6078      	str	r0, [r7, #4]
 8017fb6:	460b      	mov	r3, r1
 8017fb8:	70fb      	strb	r3, [r7, #3]
  blake2s_param P[1];
#else
  volatile blake2s_param P[1];
#endif

  if ( ( !outlen ) || ( outlen > BLAKE2S_OUTBYTES ) ) return BAD_FUNC_ARG;
 8017fba:	78fb      	ldrb	r3, [r7, #3]
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	d002      	beq.n	8017fc6 <blake2s_init+0x18>
 8017fc0:	78fb      	ldrb	r3, [r7, #3]
 8017fc2:	2b20      	cmp	r3, #32
 8017fc4:	d902      	bls.n	8017fcc <blake2s_init+0x1e>
 8017fc6:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8017fca:	e013      	b.n	8017ff4 <blake2s_init+0x46>
  P->node_depth    = 0;
  P->inner_length  = 0;
  XMEMSET( P->salt,     0, sizeof( P->salt ) );
  XMEMSET( P->personal, 0, sizeof( P->personal ) );
#else
  XMEMSET( (blake2s_param *)P, 0, sizeof( *P ) );
 8017fcc:	f107 0308 	add.w	r3, r7, #8
 8017fd0:	2220      	movs	r2, #32
 8017fd2:	2100      	movs	r1, #0
 8017fd4:	4618      	mov	r0, r3
 8017fd6:	f012 fa9f 	bl	802a518 <memset>
  P->digest_length = outlen;
 8017fda:	78fb      	ldrb	r3, [r7, #3]
 8017fdc:	723b      	strb	r3, [r7, #8]
  P->fanout        = 1;
 8017fde:	2301      	movs	r3, #1
 8017fe0:	72bb      	strb	r3, [r7, #10]
  P->depth         = 1;
 8017fe2:	2301      	movs	r3, #1
 8017fe4:	72fb      	strb	r3, [r7, #11]
#endif
  return blake2s_init_param( S, (blake2s_param *)P );
 8017fe6:	f107 0308 	add.w	r3, r7, #8
 8017fea:	4619      	mov	r1, r3
 8017fec:	6878      	ldr	r0, [r7, #4]
 8017fee:	f7ff ffb5 	bl	8017f5c <blake2s_init_param>
 8017ff2:	4603      	mov	r3, r0
}
 8017ff4:	4618      	mov	r0, r3
 8017ff6:	3728      	adds	r7, #40	; 0x28
 8017ff8:	46bd      	mov	sp, r7
 8017ffa:	bd80      	pop	{r7, pc}

08017ffc <blake2s_compress>:
static WC_INLINE int blake2s_compress(
    blake2s_state *S,
    const byte block[BLAKE2S_BLOCKBYTES],
    word32* m,
    word32* v)
{
 8017ffc:	b590      	push	{r4, r7, lr}
 8017ffe:	b087      	sub	sp, #28
 8018000:	af00      	add	r7, sp, #0
 8018002:	60f8      	str	r0, [r7, #12]
 8018004:	60b9      	str	r1, [r7, #8]
 8018006:	607a      	str	r2, [r7, #4]
 8018008:	603b      	str	r3, [r7, #0]
  int i;

  for( i = 0; i < 16; ++i )
 801800a:	2300      	movs	r3, #0
 801800c:	617b      	str	r3, [r7, #20]
 801800e:	e00f      	b.n	8018030 <blake2s_compress+0x34>
    m[i] = load32( block + i * sizeof( m[i] ) );
 8018010:	697b      	ldr	r3, [r7, #20]
 8018012:	009b      	lsls	r3, r3, #2
 8018014:	68ba      	ldr	r2, [r7, #8]
 8018016:	18d1      	adds	r1, r2, r3
 8018018:	697b      	ldr	r3, [r7, #20]
 801801a:	009b      	lsls	r3, r3, #2
 801801c:	687a      	ldr	r2, [r7, #4]
 801801e:	18d4      	adds	r4, r2, r3
 8018020:	4608      	mov	r0, r1
 8018022:	f7ff fe77 	bl	8017d14 <load32>
 8018026:	4603      	mov	r3, r0
 8018028:	6023      	str	r3, [r4, #0]
  for( i = 0; i < 16; ++i )
 801802a:	697b      	ldr	r3, [r7, #20]
 801802c:	3301      	adds	r3, #1
 801802e:	617b      	str	r3, [r7, #20]
 8018030:	697b      	ldr	r3, [r7, #20]
 8018032:	2b0f      	cmp	r3, #15
 8018034:	ddec      	ble.n	8018010 <blake2s_compress+0x14>

  for( i = 0; i < 8; ++i )
 8018036:	2300      	movs	r3, #0
 8018038:	617b      	str	r3, [r7, #20]
 801803a:	e00b      	b.n	8018054 <blake2s_compress+0x58>
    v[i] = S->h[i];
 801803c:	697b      	ldr	r3, [r7, #20]
 801803e:	009b      	lsls	r3, r3, #2
 8018040:	683a      	ldr	r2, [r7, #0]
 8018042:	4413      	add	r3, r2
 8018044:	68fa      	ldr	r2, [r7, #12]
 8018046:	6979      	ldr	r1, [r7, #20]
 8018048:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801804c:	601a      	str	r2, [r3, #0]
  for( i = 0; i < 8; ++i )
 801804e:	697b      	ldr	r3, [r7, #20]
 8018050:	3301      	adds	r3, #1
 8018052:	617b      	str	r3, [r7, #20]
 8018054:	697b      	ldr	r3, [r7, #20]
 8018056:	2b07      	cmp	r3, #7
 8018058:	ddf0      	ble.n	801803c <blake2s_compress+0x40>

  v[ 8] = blake2s_IV[0];
 801805a:	683b      	ldr	r3, [r7, #0]
 801805c:	3320      	adds	r3, #32
 801805e:	4aab      	ldr	r2, [pc, #684]	; (801830c <blake2s_compress+0x310>)
 8018060:	601a      	str	r2, [r3, #0]
  v[ 9] = blake2s_IV[1];
 8018062:	683b      	ldr	r3, [r7, #0]
 8018064:	3324      	adds	r3, #36	; 0x24
 8018066:	4aaa      	ldr	r2, [pc, #680]	; (8018310 <blake2s_compress+0x314>)
 8018068:	601a      	str	r2, [r3, #0]
  v[10] = blake2s_IV[2];
 801806a:	683b      	ldr	r3, [r7, #0]
 801806c:	3328      	adds	r3, #40	; 0x28
 801806e:	4aa9      	ldr	r2, [pc, #676]	; (8018314 <blake2s_compress+0x318>)
 8018070:	601a      	str	r2, [r3, #0]
  v[11] = blake2s_IV[3];
 8018072:	683b      	ldr	r3, [r7, #0]
 8018074:	332c      	adds	r3, #44	; 0x2c
 8018076:	4aa8      	ldr	r2, [pc, #672]	; (8018318 <blake2s_compress+0x31c>)
 8018078:	601a      	str	r2, [r3, #0]
  v[12] = S->t[0] ^ blake2s_IV[4];
 801807a:	68fb      	ldr	r3, [r7, #12]
 801807c:	6a1a      	ldr	r2, [r3, #32]
 801807e:	49a7      	ldr	r1, [pc, #668]	; (801831c <blake2s_compress+0x320>)
 8018080:	683b      	ldr	r3, [r7, #0]
 8018082:	3330      	adds	r3, #48	; 0x30
 8018084:	404a      	eors	r2, r1
 8018086:	601a      	str	r2, [r3, #0]
  v[13] = S->t[1] ^ blake2s_IV[5];
 8018088:	68fb      	ldr	r3, [r7, #12]
 801808a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801808c:	49a4      	ldr	r1, [pc, #656]	; (8018320 <blake2s_compress+0x324>)
 801808e:	683b      	ldr	r3, [r7, #0]
 8018090:	3334      	adds	r3, #52	; 0x34
 8018092:	404a      	eors	r2, r1
 8018094:	601a      	str	r2, [r3, #0]
  v[14] = S->f[0] ^ blake2s_IV[6];
 8018096:	68fb      	ldr	r3, [r7, #12]
 8018098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801809a:	49a2      	ldr	r1, [pc, #648]	; (8018324 <blake2s_compress+0x328>)
 801809c:	683b      	ldr	r3, [r7, #0]
 801809e:	3338      	adds	r3, #56	; 0x38
 80180a0:	404a      	eors	r2, r1
 80180a2:	601a      	str	r2, [r3, #0]
  v[15] = S->f[1] ^ blake2s_IV[7];
 80180a4:	68fb      	ldr	r3, [r7, #12]
 80180a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80180a8:	499f      	ldr	r1, [pc, #636]	; (8018328 <blake2s_compress+0x32c>)
 80180aa:	683b      	ldr	r3, [r7, #0]
 80180ac:	333c      	adds	r3, #60	; 0x3c
 80180ae:	404a      	eors	r2, r1
 80180b0:	601a      	str	r2, [r3, #0]
    G(r,4,v[ 0],v[ 5],v[10],v[15]); \
    G(r,5,v[ 1],v[ 6],v[11],v[12]); \
    G(r,6,v[ 2],v[ 7],v[ 8],v[13]); \
    G(r,7,v[ 3],v[ 4],v[ 9],v[14]); \
  } while(0)
  ROUND( 0 );
 80180b2:	683b      	ldr	r3, [r7, #0]
 80180b4:	681a      	ldr	r2, [r3, #0]
 80180b6:	683b      	ldr	r3, [r7, #0]
 80180b8:	3310      	adds	r3, #16
 80180ba:	681b      	ldr	r3, [r3, #0]
 80180bc:	441a      	add	r2, r3
 80180be:	2300      	movs	r3, #0
 80180c0:	009b      	lsls	r3, r3, #2
 80180c2:	6879      	ldr	r1, [r7, #4]
 80180c4:	440b      	add	r3, r1
 80180c6:	681b      	ldr	r3, [r3, #0]
 80180c8:	441a      	add	r2, r3
 80180ca:	683b      	ldr	r3, [r7, #0]
 80180cc:	601a      	str	r2, [r3, #0]
 80180ce:	683b      	ldr	r3, [r7, #0]
 80180d0:	3330      	adds	r3, #48	; 0x30
 80180d2:	681a      	ldr	r2, [r3, #0]
 80180d4:	683b      	ldr	r3, [r7, #0]
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	405a      	eors	r2, r3
 80180da:	683b      	ldr	r3, [r7, #0]
 80180dc:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80180e0:	2110      	movs	r1, #16
 80180e2:	4610      	mov	r0, r2
 80180e4:	f7ff feac 	bl	8017e40 <rotr32>
 80180e8:	4603      	mov	r3, r0
 80180ea:	6023      	str	r3, [r4, #0]
 80180ec:	683b      	ldr	r3, [r7, #0]
 80180ee:	3320      	adds	r3, #32
 80180f0:	6819      	ldr	r1, [r3, #0]
 80180f2:	683b      	ldr	r3, [r7, #0]
 80180f4:	3330      	adds	r3, #48	; 0x30
 80180f6:	681a      	ldr	r2, [r3, #0]
 80180f8:	683b      	ldr	r3, [r7, #0]
 80180fa:	3320      	adds	r3, #32
 80180fc:	440a      	add	r2, r1
 80180fe:	601a      	str	r2, [r3, #0]
 8018100:	683b      	ldr	r3, [r7, #0]
 8018102:	3310      	adds	r3, #16
 8018104:	681a      	ldr	r2, [r3, #0]
 8018106:	683b      	ldr	r3, [r7, #0]
 8018108:	3320      	adds	r3, #32
 801810a:	681b      	ldr	r3, [r3, #0]
 801810c:	405a      	eors	r2, r3
 801810e:	683b      	ldr	r3, [r7, #0]
 8018110:	f103 0410 	add.w	r4, r3, #16
 8018114:	210c      	movs	r1, #12
 8018116:	4610      	mov	r0, r2
 8018118:	f7ff fe92 	bl	8017e40 <rotr32>
 801811c:	4603      	mov	r3, r0
 801811e:	6023      	str	r3, [r4, #0]
 8018120:	683b      	ldr	r3, [r7, #0]
 8018122:	681a      	ldr	r2, [r3, #0]
 8018124:	683b      	ldr	r3, [r7, #0]
 8018126:	3310      	adds	r3, #16
 8018128:	681b      	ldr	r3, [r3, #0]
 801812a:	441a      	add	r2, r3
 801812c:	2301      	movs	r3, #1
 801812e:	009b      	lsls	r3, r3, #2
 8018130:	6879      	ldr	r1, [r7, #4]
 8018132:	440b      	add	r3, r1
 8018134:	681b      	ldr	r3, [r3, #0]
 8018136:	441a      	add	r2, r3
 8018138:	683b      	ldr	r3, [r7, #0]
 801813a:	601a      	str	r2, [r3, #0]
 801813c:	683b      	ldr	r3, [r7, #0]
 801813e:	3330      	adds	r3, #48	; 0x30
 8018140:	681a      	ldr	r2, [r3, #0]
 8018142:	683b      	ldr	r3, [r7, #0]
 8018144:	681b      	ldr	r3, [r3, #0]
 8018146:	405a      	eors	r2, r3
 8018148:	683b      	ldr	r3, [r7, #0]
 801814a:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801814e:	2108      	movs	r1, #8
 8018150:	4610      	mov	r0, r2
 8018152:	f7ff fe75 	bl	8017e40 <rotr32>
 8018156:	4603      	mov	r3, r0
 8018158:	6023      	str	r3, [r4, #0]
 801815a:	683b      	ldr	r3, [r7, #0]
 801815c:	3320      	adds	r3, #32
 801815e:	6819      	ldr	r1, [r3, #0]
 8018160:	683b      	ldr	r3, [r7, #0]
 8018162:	3330      	adds	r3, #48	; 0x30
 8018164:	681a      	ldr	r2, [r3, #0]
 8018166:	683b      	ldr	r3, [r7, #0]
 8018168:	3320      	adds	r3, #32
 801816a:	440a      	add	r2, r1
 801816c:	601a      	str	r2, [r3, #0]
 801816e:	683b      	ldr	r3, [r7, #0]
 8018170:	3310      	adds	r3, #16
 8018172:	681a      	ldr	r2, [r3, #0]
 8018174:	683b      	ldr	r3, [r7, #0]
 8018176:	3320      	adds	r3, #32
 8018178:	681b      	ldr	r3, [r3, #0]
 801817a:	405a      	eors	r2, r3
 801817c:	683b      	ldr	r3, [r7, #0]
 801817e:	f103 0410 	add.w	r4, r3, #16
 8018182:	2107      	movs	r1, #7
 8018184:	4610      	mov	r0, r2
 8018186:	f7ff fe5b 	bl	8017e40 <rotr32>
 801818a:	4603      	mov	r3, r0
 801818c:	6023      	str	r3, [r4, #0]
 801818e:	683b      	ldr	r3, [r7, #0]
 8018190:	3304      	adds	r3, #4
 8018192:	681a      	ldr	r2, [r3, #0]
 8018194:	683b      	ldr	r3, [r7, #0]
 8018196:	3314      	adds	r3, #20
 8018198:	681b      	ldr	r3, [r3, #0]
 801819a:	18d1      	adds	r1, r2, r3
 801819c:	2302      	movs	r3, #2
 801819e:	009b      	lsls	r3, r3, #2
 80181a0:	687a      	ldr	r2, [r7, #4]
 80181a2:	4413      	add	r3, r2
 80181a4:	681a      	ldr	r2, [r3, #0]
 80181a6:	683b      	ldr	r3, [r7, #0]
 80181a8:	3304      	adds	r3, #4
 80181aa:	440a      	add	r2, r1
 80181ac:	601a      	str	r2, [r3, #0]
 80181ae:	683b      	ldr	r3, [r7, #0]
 80181b0:	3334      	adds	r3, #52	; 0x34
 80181b2:	681a      	ldr	r2, [r3, #0]
 80181b4:	683b      	ldr	r3, [r7, #0]
 80181b6:	3304      	adds	r3, #4
 80181b8:	681b      	ldr	r3, [r3, #0]
 80181ba:	405a      	eors	r2, r3
 80181bc:	683b      	ldr	r3, [r7, #0]
 80181be:	f103 0434 	add.w	r4, r3, #52	; 0x34
 80181c2:	2110      	movs	r1, #16
 80181c4:	4610      	mov	r0, r2
 80181c6:	f7ff fe3b 	bl	8017e40 <rotr32>
 80181ca:	4603      	mov	r3, r0
 80181cc:	6023      	str	r3, [r4, #0]
 80181ce:	683b      	ldr	r3, [r7, #0]
 80181d0:	3324      	adds	r3, #36	; 0x24
 80181d2:	6819      	ldr	r1, [r3, #0]
 80181d4:	683b      	ldr	r3, [r7, #0]
 80181d6:	3334      	adds	r3, #52	; 0x34
 80181d8:	681a      	ldr	r2, [r3, #0]
 80181da:	683b      	ldr	r3, [r7, #0]
 80181dc:	3324      	adds	r3, #36	; 0x24
 80181de:	440a      	add	r2, r1
 80181e0:	601a      	str	r2, [r3, #0]
 80181e2:	683b      	ldr	r3, [r7, #0]
 80181e4:	3314      	adds	r3, #20
 80181e6:	681a      	ldr	r2, [r3, #0]
 80181e8:	683b      	ldr	r3, [r7, #0]
 80181ea:	3324      	adds	r3, #36	; 0x24
 80181ec:	681b      	ldr	r3, [r3, #0]
 80181ee:	405a      	eors	r2, r3
 80181f0:	683b      	ldr	r3, [r7, #0]
 80181f2:	f103 0414 	add.w	r4, r3, #20
 80181f6:	210c      	movs	r1, #12
 80181f8:	4610      	mov	r0, r2
 80181fa:	f7ff fe21 	bl	8017e40 <rotr32>
 80181fe:	4603      	mov	r3, r0
 8018200:	6023      	str	r3, [r4, #0]
 8018202:	683b      	ldr	r3, [r7, #0]
 8018204:	3304      	adds	r3, #4
 8018206:	681a      	ldr	r2, [r3, #0]
 8018208:	683b      	ldr	r3, [r7, #0]
 801820a:	3314      	adds	r3, #20
 801820c:	681b      	ldr	r3, [r3, #0]
 801820e:	18d1      	adds	r1, r2, r3
 8018210:	2303      	movs	r3, #3
 8018212:	009b      	lsls	r3, r3, #2
 8018214:	687a      	ldr	r2, [r7, #4]
 8018216:	4413      	add	r3, r2
 8018218:	681a      	ldr	r2, [r3, #0]
 801821a:	683b      	ldr	r3, [r7, #0]
 801821c:	3304      	adds	r3, #4
 801821e:	440a      	add	r2, r1
 8018220:	601a      	str	r2, [r3, #0]
 8018222:	683b      	ldr	r3, [r7, #0]
 8018224:	3334      	adds	r3, #52	; 0x34
 8018226:	681a      	ldr	r2, [r3, #0]
 8018228:	683b      	ldr	r3, [r7, #0]
 801822a:	3304      	adds	r3, #4
 801822c:	681b      	ldr	r3, [r3, #0]
 801822e:	405a      	eors	r2, r3
 8018230:	683b      	ldr	r3, [r7, #0]
 8018232:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8018236:	2108      	movs	r1, #8
 8018238:	4610      	mov	r0, r2
 801823a:	f7ff fe01 	bl	8017e40 <rotr32>
 801823e:	4603      	mov	r3, r0
 8018240:	6023      	str	r3, [r4, #0]
 8018242:	683b      	ldr	r3, [r7, #0]
 8018244:	3324      	adds	r3, #36	; 0x24
 8018246:	6819      	ldr	r1, [r3, #0]
 8018248:	683b      	ldr	r3, [r7, #0]
 801824a:	3334      	adds	r3, #52	; 0x34
 801824c:	681a      	ldr	r2, [r3, #0]
 801824e:	683b      	ldr	r3, [r7, #0]
 8018250:	3324      	adds	r3, #36	; 0x24
 8018252:	440a      	add	r2, r1
 8018254:	601a      	str	r2, [r3, #0]
 8018256:	683b      	ldr	r3, [r7, #0]
 8018258:	3314      	adds	r3, #20
 801825a:	681a      	ldr	r2, [r3, #0]
 801825c:	683b      	ldr	r3, [r7, #0]
 801825e:	3324      	adds	r3, #36	; 0x24
 8018260:	681b      	ldr	r3, [r3, #0]
 8018262:	405a      	eors	r2, r3
 8018264:	683b      	ldr	r3, [r7, #0]
 8018266:	f103 0414 	add.w	r4, r3, #20
 801826a:	2107      	movs	r1, #7
 801826c:	4610      	mov	r0, r2
 801826e:	f7ff fde7 	bl	8017e40 <rotr32>
 8018272:	4603      	mov	r3, r0
 8018274:	6023      	str	r3, [r4, #0]
 8018276:	683b      	ldr	r3, [r7, #0]
 8018278:	3308      	adds	r3, #8
 801827a:	681a      	ldr	r2, [r3, #0]
 801827c:	683b      	ldr	r3, [r7, #0]
 801827e:	3318      	adds	r3, #24
 8018280:	681b      	ldr	r3, [r3, #0]
 8018282:	18d1      	adds	r1, r2, r3
 8018284:	2304      	movs	r3, #4
 8018286:	009b      	lsls	r3, r3, #2
 8018288:	687a      	ldr	r2, [r7, #4]
 801828a:	4413      	add	r3, r2
 801828c:	681a      	ldr	r2, [r3, #0]
 801828e:	683b      	ldr	r3, [r7, #0]
 8018290:	3308      	adds	r3, #8
 8018292:	440a      	add	r2, r1
 8018294:	601a      	str	r2, [r3, #0]
 8018296:	683b      	ldr	r3, [r7, #0]
 8018298:	3338      	adds	r3, #56	; 0x38
 801829a:	681a      	ldr	r2, [r3, #0]
 801829c:	683b      	ldr	r3, [r7, #0]
 801829e:	3308      	adds	r3, #8
 80182a0:	681b      	ldr	r3, [r3, #0]
 80182a2:	405a      	eors	r2, r3
 80182a4:	683b      	ldr	r3, [r7, #0]
 80182a6:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80182aa:	2110      	movs	r1, #16
 80182ac:	4610      	mov	r0, r2
 80182ae:	f7ff fdc7 	bl	8017e40 <rotr32>
 80182b2:	4603      	mov	r3, r0
 80182b4:	6023      	str	r3, [r4, #0]
 80182b6:	683b      	ldr	r3, [r7, #0]
 80182b8:	3328      	adds	r3, #40	; 0x28
 80182ba:	6819      	ldr	r1, [r3, #0]
 80182bc:	683b      	ldr	r3, [r7, #0]
 80182be:	3338      	adds	r3, #56	; 0x38
 80182c0:	681a      	ldr	r2, [r3, #0]
 80182c2:	683b      	ldr	r3, [r7, #0]
 80182c4:	3328      	adds	r3, #40	; 0x28
 80182c6:	440a      	add	r2, r1
 80182c8:	601a      	str	r2, [r3, #0]
 80182ca:	683b      	ldr	r3, [r7, #0]
 80182cc:	3318      	adds	r3, #24
 80182ce:	681a      	ldr	r2, [r3, #0]
 80182d0:	683b      	ldr	r3, [r7, #0]
 80182d2:	3328      	adds	r3, #40	; 0x28
 80182d4:	681b      	ldr	r3, [r3, #0]
 80182d6:	405a      	eors	r2, r3
 80182d8:	683b      	ldr	r3, [r7, #0]
 80182da:	f103 0418 	add.w	r4, r3, #24
 80182de:	210c      	movs	r1, #12
 80182e0:	4610      	mov	r0, r2
 80182e2:	f7ff fdad 	bl	8017e40 <rotr32>
 80182e6:	4603      	mov	r3, r0
 80182e8:	6023      	str	r3, [r4, #0]
 80182ea:	683b      	ldr	r3, [r7, #0]
 80182ec:	3308      	adds	r3, #8
 80182ee:	681a      	ldr	r2, [r3, #0]
 80182f0:	683b      	ldr	r3, [r7, #0]
 80182f2:	3318      	adds	r3, #24
 80182f4:	681b      	ldr	r3, [r3, #0]
 80182f6:	18d1      	adds	r1, r2, r3
 80182f8:	2305      	movs	r3, #5
 80182fa:	009b      	lsls	r3, r3, #2
 80182fc:	687a      	ldr	r2, [r7, #4]
 80182fe:	4413      	add	r3, r2
 8018300:	681a      	ldr	r2, [r3, #0]
 8018302:	683b      	ldr	r3, [r7, #0]
 8018304:	3308      	adds	r3, #8
 8018306:	440a      	add	r2, r1
 8018308:	601a      	str	r2, [r3, #0]
 801830a:	e00f      	b.n	801832c <blake2s_compress+0x330>
 801830c:	6a09e667 	.word	0x6a09e667
 8018310:	bb67ae85 	.word	0xbb67ae85
 8018314:	3c6ef372 	.word	0x3c6ef372
 8018318:	a54ff53a 	.word	0xa54ff53a
 801831c:	510e527f 	.word	0x510e527f
 8018320:	9b05688c 	.word	0x9b05688c
 8018324:	1f83d9ab 	.word	0x1f83d9ab
 8018328:	5be0cd19 	.word	0x5be0cd19
 801832c:	683b      	ldr	r3, [r7, #0]
 801832e:	3338      	adds	r3, #56	; 0x38
 8018330:	681a      	ldr	r2, [r3, #0]
 8018332:	683b      	ldr	r3, [r7, #0]
 8018334:	3308      	adds	r3, #8
 8018336:	681b      	ldr	r3, [r3, #0]
 8018338:	405a      	eors	r2, r3
 801833a:	683b      	ldr	r3, [r7, #0]
 801833c:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8018340:	2108      	movs	r1, #8
 8018342:	4610      	mov	r0, r2
 8018344:	f7ff fd7c 	bl	8017e40 <rotr32>
 8018348:	4603      	mov	r3, r0
 801834a:	6023      	str	r3, [r4, #0]
 801834c:	683b      	ldr	r3, [r7, #0]
 801834e:	3328      	adds	r3, #40	; 0x28
 8018350:	6819      	ldr	r1, [r3, #0]
 8018352:	683b      	ldr	r3, [r7, #0]
 8018354:	3338      	adds	r3, #56	; 0x38
 8018356:	681a      	ldr	r2, [r3, #0]
 8018358:	683b      	ldr	r3, [r7, #0]
 801835a:	3328      	adds	r3, #40	; 0x28
 801835c:	440a      	add	r2, r1
 801835e:	601a      	str	r2, [r3, #0]
 8018360:	683b      	ldr	r3, [r7, #0]
 8018362:	3318      	adds	r3, #24
 8018364:	681a      	ldr	r2, [r3, #0]
 8018366:	683b      	ldr	r3, [r7, #0]
 8018368:	3328      	adds	r3, #40	; 0x28
 801836a:	681b      	ldr	r3, [r3, #0]
 801836c:	405a      	eors	r2, r3
 801836e:	683b      	ldr	r3, [r7, #0]
 8018370:	f103 0418 	add.w	r4, r3, #24
 8018374:	2107      	movs	r1, #7
 8018376:	4610      	mov	r0, r2
 8018378:	f7ff fd62 	bl	8017e40 <rotr32>
 801837c:	4603      	mov	r3, r0
 801837e:	6023      	str	r3, [r4, #0]
 8018380:	683b      	ldr	r3, [r7, #0]
 8018382:	330c      	adds	r3, #12
 8018384:	681a      	ldr	r2, [r3, #0]
 8018386:	683b      	ldr	r3, [r7, #0]
 8018388:	331c      	adds	r3, #28
 801838a:	681b      	ldr	r3, [r3, #0]
 801838c:	18d1      	adds	r1, r2, r3
 801838e:	2306      	movs	r3, #6
 8018390:	009b      	lsls	r3, r3, #2
 8018392:	687a      	ldr	r2, [r7, #4]
 8018394:	4413      	add	r3, r2
 8018396:	681a      	ldr	r2, [r3, #0]
 8018398:	683b      	ldr	r3, [r7, #0]
 801839a:	330c      	adds	r3, #12
 801839c:	440a      	add	r2, r1
 801839e:	601a      	str	r2, [r3, #0]
 80183a0:	683b      	ldr	r3, [r7, #0]
 80183a2:	333c      	adds	r3, #60	; 0x3c
 80183a4:	681a      	ldr	r2, [r3, #0]
 80183a6:	683b      	ldr	r3, [r7, #0]
 80183a8:	330c      	adds	r3, #12
 80183aa:	681b      	ldr	r3, [r3, #0]
 80183ac:	405a      	eors	r2, r3
 80183ae:	683b      	ldr	r3, [r7, #0]
 80183b0:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 80183b4:	2110      	movs	r1, #16
 80183b6:	4610      	mov	r0, r2
 80183b8:	f7ff fd42 	bl	8017e40 <rotr32>
 80183bc:	4603      	mov	r3, r0
 80183be:	6023      	str	r3, [r4, #0]
 80183c0:	683b      	ldr	r3, [r7, #0]
 80183c2:	332c      	adds	r3, #44	; 0x2c
 80183c4:	6819      	ldr	r1, [r3, #0]
 80183c6:	683b      	ldr	r3, [r7, #0]
 80183c8:	333c      	adds	r3, #60	; 0x3c
 80183ca:	681a      	ldr	r2, [r3, #0]
 80183cc:	683b      	ldr	r3, [r7, #0]
 80183ce:	332c      	adds	r3, #44	; 0x2c
 80183d0:	440a      	add	r2, r1
 80183d2:	601a      	str	r2, [r3, #0]
 80183d4:	683b      	ldr	r3, [r7, #0]
 80183d6:	331c      	adds	r3, #28
 80183d8:	681a      	ldr	r2, [r3, #0]
 80183da:	683b      	ldr	r3, [r7, #0]
 80183dc:	332c      	adds	r3, #44	; 0x2c
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	405a      	eors	r2, r3
 80183e2:	683b      	ldr	r3, [r7, #0]
 80183e4:	f103 041c 	add.w	r4, r3, #28
 80183e8:	210c      	movs	r1, #12
 80183ea:	4610      	mov	r0, r2
 80183ec:	f7ff fd28 	bl	8017e40 <rotr32>
 80183f0:	4603      	mov	r3, r0
 80183f2:	6023      	str	r3, [r4, #0]
 80183f4:	683b      	ldr	r3, [r7, #0]
 80183f6:	330c      	adds	r3, #12
 80183f8:	681a      	ldr	r2, [r3, #0]
 80183fa:	683b      	ldr	r3, [r7, #0]
 80183fc:	331c      	adds	r3, #28
 80183fe:	681b      	ldr	r3, [r3, #0]
 8018400:	18d1      	adds	r1, r2, r3
 8018402:	2307      	movs	r3, #7
 8018404:	009b      	lsls	r3, r3, #2
 8018406:	687a      	ldr	r2, [r7, #4]
 8018408:	4413      	add	r3, r2
 801840a:	681a      	ldr	r2, [r3, #0]
 801840c:	683b      	ldr	r3, [r7, #0]
 801840e:	330c      	adds	r3, #12
 8018410:	440a      	add	r2, r1
 8018412:	601a      	str	r2, [r3, #0]
 8018414:	683b      	ldr	r3, [r7, #0]
 8018416:	333c      	adds	r3, #60	; 0x3c
 8018418:	681a      	ldr	r2, [r3, #0]
 801841a:	683b      	ldr	r3, [r7, #0]
 801841c:	330c      	adds	r3, #12
 801841e:	681b      	ldr	r3, [r3, #0]
 8018420:	405a      	eors	r2, r3
 8018422:	683b      	ldr	r3, [r7, #0]
 8018424:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8018428:	2108      	movs	r1, #8
 801842a:	4610      	mov	r0, r2
 801842c:	f7ff fd08 	bl	8017e40 <rotr32>
 8018430:	4603      	mov	r3, r0
 8018432:	6023      	str	r3, [r4, #0]
 8018434:	683b      	ldr	r3, [r7, #0]
 8018436:	332c      	adds	r3, #44	; 0x2c
 8018438:	6819      	ldr	r1, [r3, #0]
 801843a:	683b      	ldr	r3, [r7, #0]
 801843c:	333c      	adds	r3, #60	; 0x3c
 801843e:	681a      	ldr	r2, [r3, #0]
 8018440:	683b      	ldr	r3, [r7, #0]
 8018442:	332c      	adds	r3, #44	; 0x2c
 8018444:	440a      	add	r2, r1
 8018446:	601a      	str	r2, [r3, #0]
 8018448:	683b      	ldr	r3, [r7, #0]
 801844a:	331c      	adds	r3, #28
 801844c:	681a      	ldr	r2, [r3, #0]
 801844e:	683b      	ldr	r3, [r7, #0]
 8018450:	332c      	adds	r3, #44	; 0x2c
 8018452:	681b      	ldr	r3, [r3, #0]
 8018454:	405a      	eors	r2, r3
 8018456:	683b      	ldr	r3, [r7, #0]
 8018458:	f103 041c 	add.w	r4, r3, #28
 801845c:	2107      	movs	r1, #7
 801845e:	4610      	mov	r0, r2
 8018460:	f7ff fcee 	bl	8017e40 <rotr32>
 8018464:	4603      	mov	r3, r0
 8018466:	6023      	str	r3, [r4, #0]
 8018468:	683b      	ldr	r3, [r7, #0]
 801846a:	681a      	ldr	r2, [r3, #0]
 801846c:	683b      	ldr	r3, [r7, #0]
 801846e:	3314      	adds	r3, #20
 8018470:	681b      	ldr	r3, [r3, #0]
 8018472:	441a      	add	r2, r3
 8018474:	2308      	movs	r3, #8
 8018476:	009b      	lsls	r3, r3, #2
 8018478:	6879      	ldr	r1, [r7, #4]
 801847a:	440b      	add	r3, r1
 801847c:	681b      	ldr	r3, [r3, #0]
 801847e:	441a      	add	r2, r3
 8018480:	683b      	ldr	r3, [r7, #0]
 8018482:	601a      	str	r2, [r3, #0]
 8018484:	683b      	ldr	r3, [r7, #0]
 8018486:	333c      	adds	r3, #60	; 0x3c
 8018488:	681a      	ldr	r2, [r3, #0]
 801848a:	683b      	ldr	r3, [r7, #0]
 801848c:	681b      	ldr	r3, [r3, #0]
 801848e:	405a      	eors	r2, r3
 8018490:	683b      	ldr	r3, [r7, #0]
 8018492:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8018496:	2110      	movs	r1, #16
 8018498:	4610      	mov	r0, r2
 801849a:	f7ff fcd1 	bl	8017e40 <rotr32>
 801849e:	4603      	mov	r3, r0
 80184a0:	6023      	str	r3, [r4, #0]
 80184a2:	683b      	ldr	r3, [r7, #0]
 80184a4:	3328      	adds	r3, #40	; 0x28
 80184a6:	6819      	ldr	r1, [r3, #0]
 80184a8:	683b      	ldr	r3, [r7, #0]
 80184aa:	333c      	adds	r3, #60	; 0x3c
 80184ac:	681a      	ldr	r2, [r3, #0]
 80184ae:	683b      	ldr	r3, [r7, #0]
 80184b0:	3328      	adds	r3, #40	; 0x28
 80184b2:	440a      	add	r2, r1
 80184b4:	601a      	str	r2, [r3, #0]
 80184b6:	683b      	ldr	r3, [r7, #0]
 80184b8:	3314      	adds	r3, #20
 80184ba:	681a      	ldr	r2, [r3, #0]
 80184bc:	683b      	ldr	r3, [r7, #0]
 80184be:	3328      	adds	r3, #40	; 0x28
 80184c0:	681b      	ldr	r3, [r3, #0]
 80184c2:	405a      	eors	r2, r3
 80184c4:	683b      	ldr	r3, [r7, #0]
 80184c6:	f103 0414 	add.w	r4, r3, #20
 80184ca:	210c      	movs	r1, #12
 80184cc:	4610      	mov	r0, r2
 80184ce:	f7ff fcb7 	bl	8017e40 <rotr32>
 80184d2:	4603      	mov	r3, r0
 80184d4:	6023      	str	r3, [r4, #0]
 80184d6:	683b      	ldr	r3, [r7, #0]
 80184d8:	681a      	ldr	r2, [r3, #0]
 80184da:	683b      	ldr	r3, [r7, #0]
 80184dc:	3314      	adds	r3, #20
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	441a      	add	r2, r3
 80184e2:	2309      	movs	r3, #9
 80184e4:	009b      	lsls	r3, r3, #2
 80184e6:	6879      	ldr	r1, [r7, #4]
 80184e8:	440b      	add	r3, r1
 80184ea:	681b      	ldr	r3, [r3, #0]
 80184ec:	441a      	add	r2, r3
 80184ee:	683b      	ldr	r3, [r7, #0]
 80184f0:	601a      	str	r2, [r3, #0]
 80184f2:	683b      	ldr	r3, [r7, #0]
 80184f4:	333c      	adds	r3, #60	; 0x3c
 80184f6:	681a      	ldr	r2, [r3, #0]
 80184f8:	683b      	ldr	r3, [r7, #0]
 80184fa:	681b      	ldr	r3, [r3, #0]
 80184fc:	405a      	eors	r2, r3
 80184fe:	683b      	ldr	r3, [r7, #0]
 8018500:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8018504:	2108      	movs	r1, #8
 8018506:	4610      	mov	r0, r2
 8018508:	f7ff fc9a 	bl	8017e40 <rotr32>
 801850c:	4603      	mov	r3, r0
 801850e:	6023      	str	r3, [r4, #0]
 8018510:	683b      	ldr	r3, [r7, #0]
 8018512:	3328      	adds	r3, #40	; 0x28
 8018514:	6819      	ldr	r1, [r3, #0]
 8018516:	683b      	ldr	r3, [r7, #0]
 8018518:	333c      	adds	r3, #60	; 0x3c
 801851a:	681a      	ldr	r2, [r3, #0]
 801851c:	683b      	ldr	r3, [r7, #0]
 801851e:	3328      	adds	r3, #40	; 0x28
 8018520:	440a      	add	r2, r1
 8018522:	601a      	str	r2, [r3, #0]
 8018524:	683b      	ldr	r3, [r7, #0]
 8018526:	3314      	adds	r3, #20
 8018528:	681a      	ldr	r2, [r3, #0]
 801852a:	683b      	ldr	r3, [r7, #0]
 801852c:	3328      	adds	r3, #40	; 0x28
 801852e:	681b      	ldr	r3, [r3, #0]
 8018530:	405a      	eors	r2, r3
 8018532:	683b      	ldr	r3, [r7, #0]
 8018534:	f103 0414 	add.w	r4, r3, #20
 8018538:	2107      	movs	r1, #7
 801853a:	4610      	mov	r0, r2
 801853c:	f7ff fc80 	bl	8017e40 <rotr32>
 8018540:	4603      	mov	r3, r0
 8018542:	6023      	str	r3, [r4, #0]
 8018544:	683b      	ldr	r3, [r7, #0]
 8018546:	3304      	adds	r3, #4
 8018548:	681a      	ldr	r2, [r3, #0]
 801854a:	683b      	ldr	r3, [r7, #0]
 801854c:	3318      	adds	r3, #24
 801854e:	681b      	ldr	r3, [r3, #0]
 8018550:	18d1      	adds	r1, r2, r3
 8018552:	230a      	movs	r3, #10
 8018554:	009b      	lsls	r3, r3, #2
 8018556:	687a      	ldr	r2, [r7, #4]
 8018558:	4413      	add	r3, r2
 801855a:	681a      	ldr	r2, [r3, #0]
 801855c:	683b      	ldr	r3, [r7, #0]
 801855e:	3304      	adds	r3, #4
 8018560:	440a      	add	r2, r1
 8018562:	601a      	str	r2, [r3, #0]
 8018564:	683b      	ldr	r3, [r7, #0]
 8018566:	3330      	adds	r3, #48	; 0x30
 8018568:	681a      	ldr	r2, [r3, #0]
 801856a:	683b      	ldr	r3, [r7, #0]
 801856c:	3304      	adds	r3, #4
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	405a      	eors	r2, r3
 8018572:	683b      	ldr	r3, [r7, #0]
 8018574:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8018578:	2110      	movs	r1, #16
 801857a:	4610      	mov	r0, r2
 801857c:	f7ff fc60 	bl	8017e40 <rotr32>
 8018580:	4603      	mov	r3, r0
 8018582:	6023      	str	r3, [r4, #0]
 8018584:	683b      	ldr	r3, [r7, #0]
 8018586:	332c      	adds	r3, #44	; 0x2c
 8018588:	6819      	ldr	r1, [r3, #0]
 801858a:	683b      	ldr	r3, [r7, #0]
 801858c:	3330      	adds	r3, #48	; 0x30
 801858e:	681a      	ldr	r2, [r3, #0]
 8018590:	683b      	ldr	r3, [r7, #0]
 8018592:	332c      	adds	r3, #44	; 0x2c
 8018594:	440a      	add	r2, r1
 8018596:	601a      	str	r2, [r3, #0]
 8018598:	683b      	ldr	r3, [r7, #0]
 801859a:	3318      	adds	r3, #24
 801859c:	681a      	ldr	r2, [r3, #0]
 801859e:	683b      	ldr	r3, [r7, #0]
 80185a0:	332c      	adds	r3, #44	; 0x2c
 80185a2:	681b      	ldr	r3, [r3, #0]
 80185a4:	405a      	eors	r2, r3
 80185a6:	683b      	ldr	r3, [r7, #0]
 80185a8:	f103 0418 	add.w	r4, r3, #24
 80185ac:	210c      	movs	r1, #12
 80185ae:	4610      	mov	r0, r2
 80185b0:	f7ff fc46 	bl	8017e40 <rotr32>
 80185b4:	4603      	mov	r3, r0
 80185b6:	6023      	str	r3, [r4, #0]
 80185b8:	683b      	ldr	r3, [r7, #0]
 80185ba:	3304      	adds	r3, #4
 80185bc:	681a      	ldr	r2, [r3, #0]
 80185be:	683b      	ldr	r3, [r7, #0]
 80185c0:	3318      	adds	r3, #24
 80185c2:	681b      	ldr	r3, [r3, #0]
 80185c4:	18d1      	adds	r1, r2, r3
 80185c6:	230b      	movs	r3, #11
 80185c8:	009b      	lsls	r3, r3, #2
 80185ca:	687a      	ldr	r2, [r7, #4]
 80185cc:	4413      	add	r3, r2
 80185ce:	681a      	ldr	r2, [r3, #0]
 80185d0:	683b      	ldr	r3, [r7, #0]
 80185d2:	3304      	adds	r3, #4
 80185d4:	440a      	add	r2, r1
 80185d6:	601a      	str	r2, [r3, #0]
 80185d8:	683b      	ldr	r3, [r7, #0]
 80185da:	3330      	adds	r3, #48	; 0x30
 80185dc:	681a      	ldr	r2, [r3, #0]
 80185de:	683b      	ldr	r3, [r7, #0]
 80185e0:	3304      	adds	r3, #4
 80185e2:	681b      	ldr	r3, [r3, #0]
 80185e4:	405a      	eors	r2, r3
 80185e6:	683b      	ldr	r3, [r7, #0]
 80185e8:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80185ec:	2108      	movs	r1, #8
 80185ee:	4610      	mov	r0, r2
 80185f0:	f7ff fc26 	bl	8017e40 <rotr32>
 80185f4:	4603      	mov	r3, r0
 80185f6:	6023      	str	r3, [r4, #0]
 80185f8:	683b      	ldr	r3, [r7, #0]
 80185fa:	332c      	adds	r3, #44	; 0x2c
 80185fc:	6819      	ldr	r1, [r3, #0]
 80185fe:	683b      	ldr	r3, [r7, #0]
 8018600:	3330      	adds	r3, #48	; 0x30
 8018602:	681a      	ldr	r2, [r3, #0]
 8018604:	683b      	ldr	r3, [r7, #0]
 8018606:	332c      	adds	r3, #44	; 0x2c
 8018608:	440a      	add	r2, r1
 801860a:	601a      	str	r2, [r3, #0]
 801860c:	683b      	ldr	r3, [r7, #0]
 801860e:	3318      	adds	r3, #24
 8018610:	681a      	ldr	r2, [r3, #0]
 8018612:	683b      	ldr	r3, [r7, #0]
 8018614:	332c      	adds	r3, #44	; 0x2c
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	405a      	eors	r2, r3
 801861a:	683b      	ldr	r3, [r7, #0]
 801861c:	f103 0418 	add.w	r4, r3, #24
 8018620:	2107      	movs	r1, #7
 8018622:	4610      	mov	r0, r2
 8018624:	f7ff fc0c 	bl	8017e40 <rotr32>
 8018628:	4603      	mov	r3, r0
 801862a:	6023      	str	r3, [r4, #0]
 801862c:	683b      	ldr	r3, [r7, #0]
 801862e:	3308      	adds	r3, #8
 8018630:	681a      	ldr	r2, [r3, #0]
 8018632:	683b      	ldr	r3, [r7, #0]
 8018634:	331c      	adds	r3, #28
 8018636:	681b      	ldr	r3, [r3, #0]
 8018638:	18d1      	adds	r1, r2, r3
 801863a:	230c      	movs	r3, #12
 801863c:	009b      	lsls	r3, r3, #2
 801863e:	687a      	ldr	r2, [r7, #4]
 8018640:	4413      	add	r3, r2
 8018642:	681a      	ldr	r2, [r3, #0]
 8018644:	683b      	ldr	r3, [r7, #0]
 8018646:	3308      	adds	r3, #8
 8018648:	440a      	add	r2, r1
 801864a:	601a      	str	r2, [r3, #0]
 801864c:	683b      	ldr	r3, [r7, #0]
 801864e:	3334      	adds	r3, #52	; 0x34
 8018650:	681a      	ldr	r2, [r3, #0]
 8018652:	683b      	ldr	r3, [r7, #0]
 8018654:	3308      	adds	r3, #8
 8018656:	681b      	ldr	r3, [r3, #0]
 8018658:	405a      	eors	r2, r3
 801865a:	683b      	ldr	r3, [r7, #0]
 801865c:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8018660:	2110      	movs	r1, #16
 8018662:	4610      	mov	r0, r2
 8018664:	f7ff fbec 	bl	8017e40 <rotr32>
 8018668:	4603      	mov	r3, r0
 801866a:	6023      	str	r3, [r4, #0]
 801866c:	683b      	ldr	r3, [r7, #0]
 801866e:	3320      	adds	r3, #32
 8018670:	6819      	ldr	r1, [r3, #0]
 8018672:	683b      	ldr	r3, [r7, #0]
 8018674:	3334      	adds	r3, #52	; 0x34
 8018676:	681a      	ldr	r2, [r3, #0]
 8018678:	683b      	ldr	r3, [r7, #0]
 801867a:	3320      	adds	r3, #32
 801867c:	440a      	add	r2, r1
 801867e:	601a      	str	r2, [r3, #0]
 8018680:	683b      	ldr	r3, [r7, #0]
 8018682:	331c      	adds	r3, #28
 8018684:	681a      	ldr	r2, [r3, #0]
 8018686:	683b      	ldr	r3, [r7, #0]
 8018688:	3320      	adds	r3, #32
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	405a      	eors	r2, r3
 801868e:	683b      	ldr	r3, [r7, #0]
 8018690:	f103 041c 	add.w	r4, r3, #28
 8018694:	210c      	movs	r1, #12
 8018696:	4610      	mov	r0, r2
 8018698:	f7ff fbd2 	bl	8017e40 <rotr32>
 801869c:	4603      	mov	r3, r0
 801869e:	6023      	str	r3, [r4, #0]
 80186a0:	683b      	ldr	r3, [r7, #0]
 80186a2:	3308      	adds	r3, #8
 80186a4:	681a      	ldr	r2, [r3, #0]
 80186a6:	683b      	ldr	r3, [r7, #0]
 80186a8:	331c      	adds	r3, #28
 80186aa:	681b      	ldr	r3, [r3, #0]
 80186ac:	18d1      	adds	r1, r2, r3
 80186ae:	230d      	movs	r3, #13
 80186b0:	009b      	lsls	r3, r3, #2
 80186b2:	687a      	ldr	r2, [r7, #4]
 80186b4:	4413      	add	r3, r2
 80186b6:	681a      	ldr	r2, [r3, #0]
 80186b8:	683b      	ldr	r3, [r7, #0]
 80186ba:	3308      	adds	r3, #8
 80186bc:	440a      	add	r2, r1
 80186be:	601a      	str	r2, [r3, #0]
 80186c0:	683b      	ldr	r3, [r7, #0]
 80186c2:	3334      	adds	r3, #52	; 0x34
 80186c4:	681a      	ldr	r2, [r3, #0]
 80186c6:	683b      	ldr	r3, [r7, #0]
 80186c8:	3308      	adds	r3, #8
 80186ca:	681b      	ldr	r3, [r3, #0]
 80186cc:	405a      	eors	r2, r3
 80186ce:	683b      	ldr	r3, [r7, #0]
 80186d0:	f103 0434 	add.w	r4, r3, #52	; 0x34
 80186d4:	2108      	movs	r1, #8
 80186d6:	4610      	mov	r0, r2
 80186d8:	f7ff fbb2 	bl	8017e40 <rotr32>
 80186dc:	4603      	mov	r3, r0
 80186de:	6023      	str	r3, [r4, #0]
 80186e0:	683b      	ldr	r3, [r7, #0]
 80186e2:	3320      	adds	r3, #32
 80186e4:	6819      	ldr	r1, [r3, #0]
 80186e6:	683b      	ldr	r3, [r7, #0]
 80186e8:	3334      	adds	r3, #52	; 0x34
 80186ea:	681a      	ldr	r2, [r3, #0]
 80186ec:	683b      	ldr	r3, [r7, #0]
 80186ee:	3320      	adds	r3, #32
 80186f0:	440a      	add	r2, r1
 80186f2:	601a      	str	r2, [r3, #0]
 80186f4:	683b      	ldr	r3, [r7, #0]
 80186f6:	331c      	adds	r3, #28
 80186f8:	681a      	ldr	r2, [r3, #0]
 80186fa:	683b      	ldr	r3, [r7, #0]
 80186fc:	3320      	adds	r3, #32
 80186fe:	681b      	ldr	r3, [r3, #0]
 8018700:	405a      	eors	r2, r3
 8018702:	683b      	ldr	r3, [r7, #0]
 8018704:	f103 041c 	add.w	r4, r3, #28
 8018708:	2107      	movs	r1, #7
 801870a:	4610      	mov	r0, r2
 801870c:	f7ff fb98 	bl	8017e40 <rotr32>
 8018710:	4603      	mov	r3, r0
 8018712:	6023      	str	r3, [r4, #0]
 8018714:	683b      	ldr	r3, [r7, #0]
 8018716:	330c      	adds	r3, #12
 8018718:	681a      	ldr	r2, [r3, #0]
 801871a:	683b      	ldr	r3, [r7, #0]
 801871c:	3310      	adds	r3, #16
 801871e:	681b      	ldr	r3, [r3, #0]
 8018720:	18d1      	adds	r1, r2, r3
 8018722:	230e      	movs	r3, #14
 8018724:	009b      	lsls	r3, r3, #2
 8018726:	687a      	ldr	r2, [r7, #4]
 8018728:	4413      	add	r3, r2
 801872a:	681a      	ldr	r2, [r3, #0]
 801872c:	683b      	ldr	r3, [r7, #0]
 801872e:	330c      	adds	r3, #12
 8018730:	440a      	add	r2, r1
 8018732:	601a      	str	r2, [r3, #0]
 8018734:	683b      	ldr	r3, [r7, #0]
 8018736:	3338      	adds	r3, #56	; 0x38
 8018738:	681a      	ldr	r2, [r3, #0]
 801873a:	683b      	ldr	r3, [r7, #0]
 801873c:	330c      	adds	r3, #12
 801873e:	681b      	ldr	r3, [r3, #0]
 8018740:	405a      	eors	r2, r3
 8018742:	683b      	ldr	r3, [r7, #0]
 8018744:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8018748:	2110      	movs	r1, #16
 801874a:	4610      	mov	r0, r2
 801874c:	f7ff fb78 	bl	8017e40 <rotr32>
 8018750:	4603      	mov	r3, r0
 8018752:	6023      	str	r3, [r4, #0]
 8018754:	683b      	ldr	r3, [r7, #0]
 8018756:	3324      	adds	r3, #36	; 0x24
 8018758:	6819      	ldr	r1, [r3, #0]
 801875a:	683b      	ldr	r3, [r7, #0]
 801875c:	3338      	adds	r3, #56	; 0x38
 801875e:	681a      	ldr	r2, [r3, #0]
 8018760:	683b      	ldr	r3, [r7, #0]
 8018762:	3324      	adds	r3, #36	; 0x24
 8018764:	440a      	add	r2, r1
 8018766:	601a      	str	r2, [r3, #0]
 8018768:	683b      	ldr	r3, [r7, #0]
 801876a:	3310      	adds	r3, #16
 801876c:	681a      	ldr	r2, [r3, #0]
 801876e:	683b      	ldr	r3, [r7, #0]
 8018770:	3324      	adds	r3, #36	; 0x24
 8018772:	681b      	ldr	r3, [r3, #0]
 8018774:	405a      	eors	r2, r3
 8018776:	683b      	ldr	r3, [r7, #0]
 8018778:	f103 0410 	add.w	r4, r3, #16
 801877c:	210c      	movs	r1, #12
 801877e:	4610      	mov	r0, r2
 8018780:	f7ff fb5e 	bl	8017e40 <rotr32>
 8018784:	4603      	mov	r3, r0
 8018786:	6023      	str	r3, [r4, #0]
 8018788:	683b      	ldr	r3, [r7, #0]
 801878a:	330c      	adds	r3, #12
 801878c:	681a      	ldr	r2, [r3, #0]
 801878e:	683b      	ldr	r3, [r7, #0]
 8018790:	3310      	adds	r3, #16
 8018792:	681b      	ldr	r3, [r3, #0]
 8018794:	18d1      	adds	r1, r2, r3
 8018796:	230f      	movs	r3, #15
 8018798:	009b      	lsls	r3, r3, #2
 801879a:	687a      	ldr	r2, [r7, #4]
 801879c:	4413      	add	r3, r2
 801879e:	681a      	ldr	r2, [r3, #0]
 80187a0:	683b      	ldr	r3, [r7, #0]
 80187a2:	330c      	adds	r3, #12
 80187a4:	440a      	add	r2, r1
 80187a6:	601a      	str	r2, [r3, #0]
 80187a8:	683b      	ldr	r3, [r7, #0]
 80187aa:	3338      	adds	r3, #56	; 0x38
 80187ac:	681a      	ldr	r2, [r3, #0]
 80187ae:	683b      	ldr	r3, [r7, #0]
 80187b0:	330c      	adds	r3, #12
 80187b2:	681b      	ldr	r3, [r3, #0]
 80187b4:	405a      	eors	r2, r3
 80187b6:	683b      	ldr	r3, [r7, #0]
 80187b8:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80187bc:	2108      	movs	r1, #8
 80187be:	4610      	mov	r0, r2
 80187c0:	f7ff fb3e 	bl	8017e40 <rotr32>
 80187c4:	4603      	mov	r3, r0
 80187c6:	6023      	str	r3, [r4, #0]
 80187c8:	683b      	ldr	r3, [r7, #0]
 80187ca:	3324      	adds	r3, #36	; 0x24
 80187cc:	6819      	ldr	r1, [r3, #0]
 80187ce:	683b      	ldr	r3, [r7, #0]
 80187d0:	3338      	adds	r3, #56	; 0x38
 80187d2:	681a      	ldr	r2, [r3, #0]
 80187d4:	683b      	ldr	r3, [r7, #0]
 80187d6:	3324      	adds	r3, #36	; 0x24
 80187d8:	440a      	add	r2, r1
 80187da:	601a      	str	r2, [r3, #0]
 80187dc:	683b      	ldr	r3, [r7, #0]
 80187de:	3310      	adds	r3, #16
 80187e0:	681a      	ldr	r2, [r3, #0]
 80187e2:	683b      	ldr	r3, [r7, #0]
 80187e4:	3324      	adds	r3, #36	; 0x24
 80187e6:	681b      	ldr	r3, [r3, #0]
 80187e8:	405a      	eors	r2, r3
 80187ea:	683b      	ldr	r3, [r7, #0]
 80187ec:	f103 0410 	add.w	r4, r3, #16
 80187f0:	2107      	movs	r1, #7
 80187f2:	4610      	mov	r0, r2
 80187f4:	f7ff fb24 	bl	8017e40 <rotr32>
 80187f8:	4603      	mov	r3, r0
 80187fa:	6023      	str	r3, [r4, #0]
  ROUND( 1 );
 80187fc:	683b      	ldr	r3, [r7, #0]
 80187fe:	681a      	ldr	r2, [r3, #0]
 8018800:	683b      	ldr	r3, [r7, #0]
 8018802:	3310      	adds	r3, #16
 8018804:	681b      	ldr	r3, [r3, #0]
 8018806:	441a      	add	r2, r3
 8018808:	230e      	movs	r3, #14
 801880a:	009b      	lsls	r3, r3, #2
 801880c:	6879      	ldr	r1, [r7, #4]
 801880e:	440b      	add	r3, r1
 8018810:	681b      	ldr	r3, [r3, #0]
 8018812:	441a      	add	r2, r3
 8018814:	683b      	ldr	r3, [r7, #0]
 8018816:	601a      	str	r2, [r3, #0]
 8018818:	683b      	ldr	r3, [r7, #0]
 801881a:	3330      	adds	r3, #48	; 0x30
 801881c:	681a      	ldr	r2, [r3, #0]
 801881e:	683b      	ldr	r3, [r7, #0]
 8018820:	681b      	ldr	r3, [r3, #0]
 8018822:	405a      	eors	r2, r3
 8018824:	683b      	ldr	r3, [r7, #0]
 8018826:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801882a:	2110      	movs	r1, #16
 801882c:	4610      	mov	r0, r2
 801882e:	f7ff fb07 	bl	8017e40 <rotr32>
 8018832:	4603      	mov	r3, r0
 8018834:	6023      	str	r3, [r4, #0]
 8018836:	683b      	ldr	r3, [r7, #0]
 8018838:	3320      	adds	r3, #32
 801883a:	6819      	ldr	r1, [r3, #0]
 801883c:	683b      	ldr	r3, [r7, #0]
 801883e:	3330      	adds	r3, #48	; 0x30
 8018840:	681a      	ldr	r2, [r3, #0]
 8018842:	683b      	ldr	r3, [r7, #0]
 8018844:	3320      	adds	r3, #32
 8018846:	440a      	add	r2, r1
 8018848:	601a      	str	r2, [r3, #0]
 801884a:	683b      	ldr	r3, [r7, #0]
 801884c:	3310      	adds	r3, #16
 801884e:	681a      	ldr	r2, [r3, #0]
 8018850:	683b      	ldr	r3, [r7, #0]
 8018852:	3320      	adds	r3, #32
 8018854:	681b      	ldr	r3, [r3, #0]
 8018856:	405a      	eors	r2, r3
 8018858:	683b      	ldr	r3, [r7, #0]
 801885a:	f103 0410 	add.w	r4, r3, #16
 801885e:	210c      	movs	r1, #12
 8018860:	4610      	mov	r0, r2
 8018862:	f7ff faed 	bl	8017e40 <rotr32>
 8018866:	4603      	mov	r3, r0
 8018868:	6023      	str	r3, [r4, #0]
 801886a:	683b      	ldr	r3, [r7, #0]
 801886c:	681a      	ldr	r2, [r3, #0]
 801886e:	683b      	ldr	r3, [r7, #0]
 8018870:	3310      	adds	r3, #16
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	441a      	add	r2, r3
 8018876:	230a      	movs	r3, #10
 8018878:	009b      	lsls	r3, r3, #2
 801887a:	6879      	ldr	r1, [r7, #4]
 801887c:	440b      	add	r3, r1
 801887e:	681b      	ldr	r3, [r3, #0]
 8018880:	441a      	add	r2, r3
 8018882:	683b      	ldr	r3, [r7, #0]
 8018884:	601a      	str	r2, [r3, #0]
 8018886:	683b      	ldr	r3, [r7, #0]
 8018888:	3330      	adds	r3, #48	; 0x30
 801888a:	681a      	ldr	r2, [r3, #0]
 801888c:	683b      	ldr	r3, [r7, #0]
 801888e:	681b      	ldr	r3, [r3, #0]
 8018890:	405a      	eors	r2, r3
 8018892:	683b      	ldr	r3, [r7, #0]
 8018894:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8018898:	2108      	movs	r1, #8
 801889a:	4610      	mov	r0, r2
 801889c:	f7ff fad0 	bl	8017e40 <rotr32>
 80188a0:	4603      	mov	r3, r0
 80188a2:	6023      	str	r3, [r4, #0]
 80188a4:	683b      	ldr	r3, [r7, #0]
 80188a6:	3320      	adds	r3, #32
 80188a8:	6819      	ldr	r1, [r3, #0]
 80188aa:	683b      	ldr	r3, [r7, #0]
 80188ac:	3330      	adds	r3, #48	; 0x30
 80188ae:	681a      	ldr	r2, [r3, #0]
 80188b0:	683b      	ldr	r3, [r7, #0]
 80188b2:	3320      	adds	r3, #32
 80188b4:	440a      	add	r2, r1
 80188b6:	601a      	str	r2, [r3, #0]
 80188b8:	683b      	ldr	r3, [r7, #0]
 80188ba:	3310      	adds	r3, #16
 80188bc:	681a      	ldr	r2, [r3, #0]
 80188be:	683b      	ldr	r3, [r7, #0]
 80188c0:	3320      	adds	r3, #32
 80188c2:	681b      	ldr	r3, [r3, #0]
 80188c4:	405a      	eors	r2, r3
 80188c6:	683b      	ldr	r3, [r7, #0]
 80188c8:	f103 0410 	add.w	r4, r3, #16
 80188cc:	2107      	movs	r1, #7
 80188ce:	4610      	mov	r0, r2
 80188d0:	f7ff fab6 	bl	8017e40 <rotr32>
 80188d4:	4603      	mov	r3, r0
 80188d6:	6023      	str	r3, [r4, #0]
 80188d8:	683b      	ldr	r3, [r7, #0]
 80188da:	3304      	adds	r3, #4
 80188dc:	681a      	ldr	r2, [r3, #0]
 80188de:	683b      	ldr	r3, [r7, #0]
 80188e0:	3314      	adds	r3, #20
 80188e2:	681b      	ldr	r3, [r3, #0]
 80188e4:	18d1      	adds	r1, r2, r3
 80188e6:	2304      	movs	r3, #4
 80188e8:	009b      	lsls	r3, r3, #2
 80188ea:	687a      	ldr	r2, [r7, #4]
 80188ec:	4413      	add	r3, r2
 80188ee:	681a      	ldr	r2, [r3, #0]
 80188f0:	683b      	ldr	r3, [r7, #0]
 80188f2:	3304      	adds	r3, #4
 80188f4:	440a      	add	r2, r1
 80188f6:	601a      	str	r2, [r3, #0]
 80188f8:	683b      	ldr	r3, [r7, #0]
 80188fa:	3334      	adds	r3, #52	; 0x34
 80188fc:	681a      	ldr	r2, [r3, #0]
 80188fe:	683b      	ldr	r3, [r7, #0]
 8018900:	3304      	adds	r3, #4
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	405a      	eors	r2, r3
 8018906:	683b      	ldr	r3, [r7, #0]
 8018908:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801890c:	2110      	movs	r1, #16
 801890e:	4610      	mov	r0, r2
 8018910:	f7ff fa96 	bl	8017e40 <rotr32>
 8018914:	4603      	mov	r3, r0
 8018916:	6023      	str	r3, [r4, #0]
 8018918:	683b      	ldr	r3, [r7, #0]
 801891a:	3324      	adds	r3, #36	; 0x24
 801891c:	6819      	ldr	r1, [r3, #0]
 801891e:	683b      	ldr	r3, [r7, #0]
 8018920:	3334      	adds	r3, #52	; 0x34
 8018922:	681a      	ldr	r2, [r3, #0]
 8018924:	683b      	ldr	r3, [r7, #0]
 8018926:	3324      	adds	r3, #36	; 0x24
 8018928:	440a      	add	r2, r1
 801892a:	601a      	str	r2, [r3, #0]
 801892c:	683b      	ldr	r3, [r7, #0]
 801892e:	3314      	adds	r3, #20
 8018930:	681a      	ldr	r2, [r3, #0]
 8018932:	683b      	ldr	r3, [r7, #0]
 8018934:	3324      	adds	r3, #36	; 0x24
 8018936:	681b      	ldr	r3, [r3, #0]
 8018938:	405a      	eors	r2, r3
 801893a:	683b      	ldr	r3, [r7, #0]
 801893c:	f103 0414 	add.w	r4, r3, #20
 8018940:	210c      	movs	r1, #12
 8018942:	4610      	mov	r0, r2
 8018944:	f7ff fa7c 	bl	8017e40 <rotr32>
 8018948:	4603      	mov	r3, r0
 801894a:	6023      	str	r3, [r4, #0]
 801894c:	683b      	ldr	r3, [r7, #0]
 801894e:	3304      	adds	r3, #4
 8018950:	681a      	ldr	r2, [r3, #0]
 8018952:	683b      	ldr	r3, [r7, #0]
 8018954:	3314      	adds	r3, #20
 8018956:	681b      	ldr	r3, [r3, #0]
 8018958:	18d1      	adds	r1, r2, r3
 801895a:	2308      	movs	r3, #8
 801895c:	009b      	lsls	r3, r3, #2
 801895e:	687a      	ldr	r2, [r7, #4]
 8018960:	4413      	add	r3, r2
 8018962:	681a      	ldr	r2, [r3, #0]
 8018964:	683b      	ldr	r3, [r7, #0]
 8018966:	3304      	adds	r3, #4
 8018968:	440a      	add	r2, r1
 801896a:	601a      	str	r2, [r3, #0]
 801896c:	683b      	ldr	r3, [r7, #0]
 801896e:	3334      	adds	r3, #52	; 0x34
 8018970:	681a      	ldr	r2, [r3, #0]
 8018972:	683b      	ldr	r3, [r7, #0]
 8018974:	3304      	adds	r3, #4
 8018976:	681b      	ldr	r3, [r3, #0]
 8018978:	405a      	eors	r2, r3
 801897a:	683b      	ldr	r3, [r7, #0]
 801897c:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8018980:	2108      	movs	r1, #8
 8018982:	4610      	mov	r0, r2
 8018984:	f7ff fa5c 	bl	8017e40 <rotr32>
 8018988:	4603      	mov	r3, r0
 801898a:	6023      	str	r3, [r4, #0]
 801898c:	683b      	ldr	r3, [r7, #0]
 801898e:	3324      	adds	r3, #36	; 0x24
 8018990:	6819      	ldr	r1, [r3, #0]
 8018992:	683b      	ldr	r3, [r7, #0]
 8018994:	3334      	adds	r3, #52	; 0x34
 8018996:	681a      	ldr	r2, [r3, #0]
 8018998:	683b      	ldr	r3, [r7, #0]
 801899a:	3324      	adds	r3, #36	; 0x24
 801899c:	440a      	add	r2, r1
 801899e:	601a      	str	r2, [r3, #0]
 80189a0:	683b      	ldr	r3, [r7, #0]
 80189a2:	3314      	adds	r3, #20
 80189a4:	681a      	ldr	r2, [r3, #0]
 80189a6:	683b      	ldr	r3, [r7, #0]
 80189a8:	3324      	adds	r3, #36	; 0x24
 80189aa:	681b      	ldr	r3, [r3, #0]
 80189ac:	405a      	eors	r2, r3
 80189ae:	683b      	ldr	r3, [r7, #0]
 80189b0:	f103 0414 	add.w	r4, r3, #20
 80189b4:	2107      	movs	r1, #7
 80189b6:	4610      	mov	r0, r2
 80189b8:	f7ff fa42 	bl	8017e40 <rotr32>
 80189bc:	4603      	mov	r3, r0
 80189be:	6023      	str	r3, [r4, #0]
 80189c0:	683b      	ldr	r3, [r7, #0]
 80189c2:	3308      	adds	r3, #8
 80189c4:	681a      	ldr	r2, [r3, #0]
 80189c6:	683b      	ldr	r3, [r7, #0]
 80189c8:	3318      	adds	r3, #24
 80189ca:	681b      	ldr	r3, [r3, #0]
 80189cc:	18d1      	adds	r1, r2, r3
 80189ce:	2309      	movs	r3, #9
 80189d0:	009b      	lsls	r3, r3, #2
 80189d2:	687a      	ldr	r2, [r7, #4]
 80189d4:	4413      	add	r3, r2
 80189d6:	681a      	ldr	r2, [r3, #0]
 80189d8:	683b      	ldr	r3, [r7, #0]
 80189da:	3308      	adds	r3, #8
 80189dc:	440a      	add	r2, r1
 80189de:	601a      	str	r2, [r3, #0]
 80189e0:	683b      	ldr	r3, [r7, #0]
 80189e2:	3338      	adds	r3, #56	; 0x38
 80189e4:	681a      	ldr	r2, [r3, #0]
 80189e6:	683b      	ldr	r3, [r7, #0]
 80189e8:	3308      	adds	r3, #8
 80189ea:	681b      	ldr	r3, [r3, #0]
 80189ec:	405a      	eors	r2, r3
 80189ee:	683b      	ldr	r3, [r7, #0]
 80189f0:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80189f4:	2110      	movs	r1, #16
 80189f6:	4610      	mov	r0, r2
 80189f8:	f7ff fa22 	bl	8017e40 <rotr32>
 80189fc:	4603      	mov	r3, r0
 80189fe:	6023      	str	r3, [r4, #0]
 8018a00:	683b      	ldr	r3, [r7, #0]
 8018a02:	3328      	adds	r3, #40	; 0x28
 8018a04:	6819      	ldr	r1, [r3, #0]
 8018a06:	683b      	ldr	r3, [r7, #0]
 8018a08:	3338      	adds	r3, #56	; 0x38
 8018a0a:	681a      	ldr	r2, [r3, #0]
 8018a0c:	683b      	ldr	r3, [r7, #0]
 8018a0e:	3328      	adds	r3, #40	; 0x28
 8018a10:	440a      	add	r2, r1
 8018a12:	601a      	str	r2, [r3, #0]
 8018a14:	683b      	ldr	r3, [r7, #0]
 8018a16:	3318      	adds	r3, #24
 8018a18:	681a      	ldr	r2, [r3, #0]
 8018a1a:	683b      	ldr	r3, [r7, #0]
 8018a1c:	3328      	adds	r3, #40	; 0x28
 8018a1e:	681b      	ldr	r3, [r3, #0]
 8018a20:	405a      	eors	r2, r3
 8018a22:	683b      	ldr	r3, [r7, #0]
 8018a24:	f103 0418 	add.w	r4, r3, #24
 8018a28:	210c      	movs	r1, #12
 8018a2a:	4610      	mov	r0, r2
 8018a2c:	f7ff fa08 	bl	8017e40 <rotr32>
 8018a30:	4603      	mov	r3, r0
 8018a32:	6023      	str	r3, [r4, #0]
 8018a34:	683b      	ldr	r3, [r7, #0]
 8018a36:	3308      	adds	r3, #8
 8018a38:	681a      	ldr	r2, [r3, #0]
 8018a3a:	683b      	ldr	r3, [r7, #0]
 8018a3c:	3318      	adds	r3, #24
 8018a3e:	681b      	ldr	r3, [r3, #0]
 8018a40:	18d1      	adds	r1, r2, r3
 8018a42:	230f      	movs	r3, #15
 8018a44:	009b      	lsls	r3, r3, #2
 8018a46:	687a      	ldr	r2, [r7, #4]
 8018a48:	4413      	add	r3, r2
 8018a4a:	681a      	ldr	r2, [r3, #0]
 8018a4c:	683b      	ldr	r3, [r7, #0]
 8018a4e:	3308      	adds	r3, #8
 8018a50:	440a      	add	r2, r1
 8018a52:	601a      	str	r2, [r3, #0]
 8018a54:	683b      	ldr	r3, [r7, #0]
 8018a56:	3338      	adds	r3, #56	; 0x38
 8018a58:	681a      	ldr	r2, [r3, #0]
 8018a5a:	683b      	ldr	r3, [r7, #0]
 8018a5c:	3308      	adds	r3, #8
 8018a5e:	681b      	ldr	r3, [r3, #0]
 8018a60:	405a      	eors	r2, r3
 8018a62:	683b      	ldr	r3, [r7, #0]
 8018a64:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8018a68:	2108      	movs	r1, #8
 8018a6a:	4610      	mov	r0, r2
 8018a6c:	f7ff f9e8 	bl	8017e40 <rotr32>
 8018a70:	4603      	mov	r3, r0
 8018a72:	6023      	str	r3, [r4, #0]
 8018a74:	683b      	ldr	r3, [r7, #0]
 8018a76:	3328      	adds	r3, #40	; 0x28
 8018a78:	6819      	ldr	r1, [r3, #0]
 8018a7a:	683b      	ldr	r3, [r7, #0]
 8018a7c:	3338      	adds	r3, #56	; 0x38
 8018a7e:	681a      	ldr	r2, [r3, #0]
 8018a80:	683b      	ldr	r3, [r7, #0]
 8018a82:	3328      	adds	r3, #40	; 0x28
 8018a84:	440a      	add	r2, r1
 8018a86:	601a      	str	r2, [r3, #0]
 8018a88:	683b      	ldr	r3, [r7, #0]
 8018a8a:	3318      	adds	r3, #24
 8018a8c:	681a      	ldr	r2, [r3, #0]
 8018a8e:	683b      	ldr	r3, [r7, #0]
 8018a90:	3328      	adds	r3, #40	; 0x28
 8018a92:	681b      	ldr	r3, [r3, #0]
 8018a94:	405a      	eors	r2, r3
 8018a96:	683b      	ldr	r3, [r7, #0]
 8018a98:	f103 0418 	add.w	r4, r3, #24
 8018a9c:	2107      	movs	r1, #7
 8018a9e:	4610      	mov	r0, r2
 8018aa0:	f7ff f9ce 	bl	8017e40 <rotr32>
 8018aa4:	4603      	mov	r3, r0
 8018aa6:	6023      	str	r3, [r4, #0]
 8018aa8:	683b      	ldr	r3, [r7, #0]
 8018aaa:	330c      	adds	r3, #12
 8018aac:	681a      	ldr	r2, [r3, #0]
 8018aae:	683b      	ldr	r3, [r7, #0]
 8018ab0:	331c      	adds	r3, #28
 8018ab2:	681b      	ldr	r3, [r3, #0]
 8018ab4:	18d1      	adds	r1, r2, r3
 8018ab6:	230d      	movs	r3, #13
 8018ab8:	009b      	lsls	r3, r3, #2
 8018aba:	687a      	ldr	r2, [r7, #4]
 8018abc:	4413      	add	r3, r2
 8018abe:	681a      	ldr	r2, [r3, #0]
 8018ac0:	683b      	ldr	r3, [r7, #0]
 8018ac2:	330c      	adds	r3, #12
 8018ac4:	440a      	add	r2, r1
 8018ac6:	601a      	str	r2, [r3, #0]
 8018ac8:	683b      	ldr	r3, [r7, #0]
 8018aca:	333c      	adds	r3, #60	; 0x3c
 8018acc:	681a      	ldr	r2, [r3, #0]
 8018ace:	683b      	ldr	r3, [r7, #0]
 8018ad0:	330c      	adds	r3, #12
 8018ad2:	681b      	ldr	r3, [r3, #0]
 8018ad4:	405a      	eors	r2, r3
 8018ad6:	683b      	ldr	r3, [r7, #0]
 8018ad8:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8018adc:	2110      	movs	r1, #16
 8018ade:	4610      	mov	r0, r2
 8018ae0:	f7ff f9ae 	bl	8017e40 <rotr32>
 8018ae4:	4603      	mov	r3, r0
 8018ae6:	6023      	str	r3, [r4, #0]
 8018ae8:	683b      	ldr	r3, [r7, #0]
 8018aea:	332c      	adds	r3, #44	; 0x2c
 8018aec:	6819      	ldr	r1, [r3, #0]
 8018aee:	683b      	ldr	r3, [r7, #0]
 8018af0:	333c      	adds	r3, #60	; 0x3c
 8018af2:	681a      	ldr	r2, [r3, #0]
 8018af4:	683b      	ldr	r3, [r7, #0]
 8018af6:	332c      	adds	r3, #44	; 0x2c
 8018af8:	440a      	add	r2, r1
 8018afa:	601a      	str	r2, [r3, #0]
 8018afc:	683b      	ldr	r3, [r7, #0]
 8018afe:	331c      	adds	r3, #28
 8018b00:	681a      	ldr	r2, [r3, #0]
 8018b02:	683b      	ldr	r3, [r7, #0]
 8018b04:	332c      	adds	r3, #44	; 0x2c
 8018b06:	681b      	ldr	r3, [r3, #0]
 8018b08:	405a      	eors	r2, r3
 8018b0a:	683b      	ldr	r3, [r7, #0]
 8018b0c:	f103 041c 	add.w	r4, r3, #28
 8018b10:	210c      	movs	r1, #12
 8018b12:	4610      	mov	r0, r2
 8018b14:	f7ff f994 	bl	8017e40 <rotr32>
 8018b18:	4603      	mov	r3, r0
 8018b1a:	6023      	str	r3, [r4, #0]
 8018b1c:	683b      	ldr	r3, [r7, #0]
 8018b1e:	330c      	adds	r3, #12
 8018b20:	681a      	ldr	r2, [r3, #0]
 8018b22:	683b      	ldr	r3, [r7, #0]
 8018b24:	331c      	adds	r3, #28
 8018b26:	681b      	ldr	r3, [r3, #0]
 8018b28:	18d1      	adds	r1, r2, r3
 8018b2a:	2306      	movs	r3, #6
 8018b2c:	009b      	lsls	r3, r3, #2
 8018b2e:	687a      	ldr	r2, [r7, #4]
 8018b30:	4413      	add	r3, r2
 8018b32:	681a      	ldr	r2, [r3, #0]
 8018b34:	683b      	ldr	r3, [r7, #0]
 8018b36:	330c      	adds	r3, #12
 8018b38:	440a      	add	r2, r1
 8018b3a:	601a      	str	r2, [r3, #0]
 8018b3c:	683b      	ldr	r3, [r7, #0]
 8018b3e:	333c      	adds	r3, #60	; 0x3c
 8018b40:	681a      	ldr	r2, [r3, #0]
 8018b42:	683b      	ldr	r3, [r7, #0]
 8018b44:	330c      	adds	r3, #12
 8018b46:	681b      	ldr	r3, [r3, #0]
 8018b48:	405a      	eors	r2, r3
 8018b4a:	683b      	ldr	r3, [r7, #0]
 8018b4c:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8018b50:	2108      	movs	r1, #8
 8018b52:	4610      	mov	r0, r2
 8018b54:	f7ff f974 	bl	8017e40 <rotr32>
 8018b58:	4603      	mov	r3, r0
 8018b5a:	6023      	str	r3, [r4, #0]
 8018b5c:	683b      	ldr	r3, [r7, #0]
 8018b5e:	332c      	adds	r3, #44	; 0x2c
 8018b60:	6819      	ldr	r1, [r3, #0]
 8018b62:	683b      	ldr	r3, [r7, #0]
 8018b64:	333c      	adds	r3, #60	; 0x3c
 8018b66:	681a      	ldr	r2, [r3, #0]
 8018b68:	683b      	ldr	r3, [r7, #0]
 8018b6a:	332c      	adds	r3, #44	; 0x2c
 8018b6c:	440a      	add	r2, r1
 8018b6e:	601a      	str	r2, [r3, #0]
 8018b70:	683b      	ldr	r3, [r7, #0]
 8018b72:	331c      	adds	r3, #28
 8018b74:	681a      	ldr	r2, [r3, #0]
 8018b76:	683b      	ldr	r3, [r7, #0]
 8018b78:	332c      	adds	r3, #44	; 0x2c
 8018b7a:	681b      	ldr	r3, [r3, #0]
 8018b7c:	405a      	eors	r2, r3
 8018b7e:	683b      	ldr	r3, [r7, #0]
 8018b80:	f103 041c 	add.w	r4, r3, #28
 8018b84:	2107      	movs	r1, #7
 8018b86:	4610      	mov	r0, r2
 8018b88:	f7ff f95a 	bl	8017e40 <rotr32>
 8018b8c:	4603      	mov	r3, r0
 8018b8e:	6023      	str	r3, [r4, #0]
 8018b90:	683b      	ldr	r3, [r7, #0]
 8018b92:	681a      	ldr	r2, [r3, #0]
 8018b94:	683b      	ldr	r3, [r7, #0]
 8018b96:	3314      	adds	r3, #20
 8018b98:	681b      	ldr	r3, [r3, #0]
 8018b9a:	441a      	add	r2, r3
 8018b9c:	2301      	movs	r3, #1
 8018b9e:	009b      	lsls	r3, r3, #2
 8018ba0:	6879      	ldr	r1, [r7, #4]
 8018ba2:	440b      	add	r3, r1
 8018ba4:	681b      	ldr	r3, [r3, #0]
 8018ba6:	441a      	add	r2, r3
 8018ba8:	683b      	ldr	r3, [r7, #0]
 8018baa:	601a      	str	r2, [r3, #0]
 8018bac:	683b      	ldr	r3, [r7, #0]
 8018bae:	333c      	adds	r3, #60	; 0x3c
 8018bb0:	681a      	ldr	r2, [r3, #0]
 8018bb2:	683b      	ldr	r3, [r7, #0]
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	405a      	eors	r2, r3
 8018bb8:	683b      	ldr	r3, [r7, #0]
 8018bba:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8018bbe:	2110      	movs	r1, #16
 8018bc0:	4610      	mov	r0, r2
 8018bc2:	f7ff f93d 	bl	8017e40 <rotr32>
 8018bc6:	4603      	mov	r3, r0
 8018bc8:	6023      	str	r3, [r4, #0]
 8018bca:	683b      	ldr	r3, [r7, #0]
 8018bcc:	3328      	adds	r3, #40	; 0x28
 8018bce:	6819      	ldr	r1, [r3, #0]
 8018bd0:	683b      	ldr	r3, [r7, #0]
 8018bd2:	333c      	adds	r3, #60	; 0x3c
 8018bd4:	681a      	ldr	r2, [r3, #0]
 8018bd6:	683b      	ldr	r3, [r7, #0]
 8018bd8:	3328      	adds	r3, #40	; 0x28
 8018bda:	440a      	add	r2, r1
 8018bdc:	601a      	str	r2, [r3, #0]
 8018bde:	683b      	ldr	r3, [r7, #0]
 8018be0:	3314      	adds	r3, #20
 8018be2:	681a      	ldr	r2, [r3, #0]
 8018be4:	683b      	ldr	r3, [r7, #0]
 8018be6:	3328      	adds	r3, #40	; 0x28
 8018be8:	681b      	ldr	r3, [r3, #0]
 8018bea:	405a      	eors	r2, r3
 8018bec:	683b      	ldr	r3, [r7, #0]
 8018bee:	f103 0414 	add.w	r4, r3, #20
 8018bf2:	210c      	movs	r1, #12
 8018bf4:	4610      	mov	r0, r2
 8018bf6:	f7ff f923 	bl	8017e40 <rotr32>
 8018bfa:	4603      	mov	r3, r0
 8018bfc:	6023      	str	r3, [r4, #0]
 8018bfe:	683b      	ldr	r3, [r7, #0]
 8018c00:	681a      	ldr	r2, [r3, #0]
 8018c02:	683b      	ldr	r3, [r7, #0]
 8018c04:	3314      	adds	r3, #20
 8018c06:	681b      	ldr	r3, [r3, #0]
 8018c08:	441a      	add	r2, r3
 8018c0a:	230c      	movs	r3, #12
 8018c0c:	009b      	lsls	r3, r3, #2
 8018c0e:	6879      	ldr	r1, [r7, #4]
 8018c10:	440b      	add	r3, r1
 8018c12:	681b      	ldr	r3, [r3, #0]
 8018c14:	441a      	add	r2, r3
 8018c16:	683b      	ldr	r3, [r7, #0]
 8018c18:	601a      	str	r2, [r3, #0]
 8018c1a:	683b      	ldr	r3, [r7, #0]
 8018c1c:	333c      	adds	r3, #60	; 0x3c
 8018c1e:	681a      	ldr	r2, [r3, #0]
 8018c20:	683b      	ldr	r3, [r7, #0]
 8018c22:	681b      	ldr	r3, [r3, #0]
 8018c24:	405a      	eors	r2, r3
 8018c26:	683b      	ldr	r3, [r7, #0]
 8018c28:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8018c2c:	2108      	movs	r1, #8
 8018c2e:	4610      	mov	r0, r2
 8018c30:	f7ff f906 	bl	8017e40 <rotr32>
 8018c34:	4603      	mov	r3, r0
 8018c36:	6023      	str	r3, [r4, #0]
 8018c38:	683b      	ldr	r3, [r7, #0]
 8018c3a:	3328      	adds	r3, #40	; 0x28
 8018c3c:	6819      	ldr	r1, [r3, #0]
 8018c3e:	683b      	ldr	r3, [r7, #0]
 8018c40:	333c      	adds	r3, #60	; 0x3c
 8018c42:	681a      	ldr	r2, [r3, #0]
 8018c44:	683b      	ldr	r3, [r7, #0]
 8018c46:	3328      	adds	r3, #40	; 0x28
 8018c48:	440a      	add	r2, r1
 8018c4a:	601a      	str	r2, [r3, #0]
 8018c4c:	683b      	ldr	r3, [r7, #0]
 8018c4e:	3314      	adds	r3, #20
 8018c50:	681a      	ldr	r2, [r3, #0]
 8018c52:	683b      	ldr	r3, [r7, #0]
 8018c54:	3328      	adds	r3, #40	; 0x28
 8018c56:	681b      	ldr	r3, [r3, #0]
 8018c58:	405a      	eors	r2, r3
 8018c5a:	683b      	ldr	r3, [r7, #0]
 8018c5c:	f103 0414 	add.w	r4, r3, #20
 8018c60:	2107      	movs	r1, #7
 8018c62:	4610      	mov	r0, r2
 8018c64:	f7ff f8ec 	bl	8017e40 <rotr32>
 8018c68:	4603      	mov	r3, r0
 8018c6a:	6023      	str	r3, [r4, #0]
 8018c6c:	683b      	ldr	r3, [r7, #0]
 8018c6e:	3304      	adds	r3, #4
 8018c70:	681a      	ldr	r2, [r3, #0]
 8018c72:	683b      	ldr	r3, [r7, #0]
 8018c74:	3318      	adds	r3, #24
 8018c76:	681b      	ldr	r3, [r3, #0]
 8018c78:	18d1      	adds	r1, r2, r3
 8018c7a:	2300      	movs	r3, #0
 8018c7c:	009b      	lsls	r3, r3, #2
 8018c7e:	687a      	ldr	r2, [r7, #4]
 8018c80:	4413      	add	r3, r2
 8018c82:	681a      	ldr	r2, [r3, #0]
 8018c84:	683b      	ldr	r3, [r7, #0]
 8018c86:	3304      	adds	r3, #4
 8018c88:	440a      	add	r2, r1
 8018c8a:	601a      	str	r2, [r3, #0]
 8018c8c:	683b      	ldr	r3, [r7, #0]
 8018c8e:	3330      	adds	r3, #48	; 0x30
 8018c90:	681a      	ldr	r2, [r3, #0]
 8018c92:	683b      	ldr	r3, [r7, #0]
 8018c94:	3304      	adds	r3, #4
 8018c96:	681b      	ldr	r3, [r3, #0]
 8018c98:	405a      	eors	r2, r3
 8018c9a:	683b      	ldr	r3, [r7, #0]
 8018c9c:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8018ca0:	2110      	movs	r1, #16
 8018ca2:	4610      	mov	r0, r2
 8018ca4:	f7ff f8cc 	bl	8017e40 <rotr32>
 8018ca8:	4603      	mov	r3, r0
 8018caa:	6023      	str	r3, [r4, #0]
 8018cac:	683b      	ldr	r3, [r7, #0]
 8018cae:	332c      	adds	r3, #44	; 0x2c
 8018cb0:	6819      	ldr	r1, [r3, #0]
 8018cb2:	683b      	ldr	r3, [r7, #0]
 8018cb4:	3330      	adds	r3, #48	; 0x30
 8018cb6:	681a      	ldr	r2, [r3, #0]
 8018cb8:	683b      	ldr	r3, [r7, #0]
 8018cba:	332c      	adds	r3, #44	; 0x2c
 8018cbc:	440a      	add	r2, r1
 8018cbe:	601a      	str	r2, [r3, #0]
 8018cc0:	683b      	ldr	r3, [r7, #0]
 8018cc2:	3318      	adds	r3, #24
 8018cc4:	681a      	ldr	r2, [r3, #0]
 8018cc6:	683b      	ldr	r3, [r7, #0]
 8018cc8:	332c      	adds	r3, #44	; 0x2c
 8018cca:	681b      	ldr	r3, [r3, #0]
 8018ccc:	405a      	eors	r2, r3
 8018cce:	683b      	ldr	r3, [r7, #0]
 8018cd0:	f103 0418 	add.w	r4, r3, #24
 8018cd4:	210c      	movs	r1, #12
 8018cd6:	4610      	mov	r0, r2
 8018cd8:	f7ff f8b2 	bl	8017e40 <rotr32>
 8018cdc:	4603      	mov	r3, r0
 8018cde:	6023      	str	r3, [r4, #0]
 8018ce0:	683b      	ldr	r3, [r7, #0]
 8018ce2:	3304      	adds	r3, #4
 8018ce4:	681a      	ldr	r2, [r3, #0]
 8018ce6:	683b      	ldr	r3, [r7, #0]
 8018ce8:	3318      	adds	r3, #24
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	18d1      	adds	r1, r2, r3
 8018cee:	2302      	movs	r3, #2
 8018cf0:	009b      	lsls	r3, r3, #2
 8018cf2:	687a      	ldr	r2, [r7, #4]
 8018cf4:	4413      	add	r3, r2
 8018cf6:	681a      	ldr	r2, [r3, #0]
 8018cf8:	683b      	ldr	r3, [r7, #0]
 8018cfa:	3304      	adds	r3, #4
 8018cfc:	440a      	add	r2, r1
 8018cfe:	601a      	str	r2, [r3, #0]
 8018d00:	683b      	ldr	r3, [r7, #0]
 8018d02:	3330      	adds	r3, #48	; 0x30
 8018d04:	681a      	ldr	r2, [r3, #0]
 8018d06:	683b      	ldr	r3, [r7, #0]
 8018d08:	3304      	adds	r3, #4
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	405a      	eors	r2, r3
 8018d0e:	683b      	ldr	r3, [r7, #0]
 8018d10:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8018d14:	2108      	movs	r1, #8
 8018d16:	4610      	mov	r0, r2
 8018d18:	f7ff f892 	bl	8017e40 <rotr32>
 8018d1c:	4603      	mov	r3, r0
 8018d1e:	6023      	str	r3, [r4, #0]
 8018d20:	683b      	ldr	r3, [r7, #0]
 8018d22:	332c      	adds	r3, #44	; 0x2c
 8018d24:	6819      	ldr	r1, [r3, #0]
 8018d26:	683b      	ldr	r3, [r7, #0]
 8018d28:	3330      	adds	r3, #48	; 0x30
 8018d2a:	681a      	ldr	r2, [r3, #0]
 8018d2c:	683b      	ldr	r3, [r7, #0]
 8018d2e:	332c      	adds	r3, #44	; 0x2c
 8018d30:	440a      	add	r2, r1
 8018d32:	601a      	str	r2, [r3, #0]
 8018d34:	683b      	ldr	r3, [r7, #0]
 8018d36:	3318      	adds	r3, #24
 8018d38:	681a      	ldr	r2, [r3, #0]
 8018d3a:	683b      	ldr	r3, [r7, #0]
 8018d3c:	332c      	adds	r3, #44	; 0x2c
 8018d3e:	681b      	ldr	r3, [r3, #0]
 8018d40:	405a      	eors	r2, r3
 8018d42:	683b      	ldr	r3, [r7, #0]
 8018d44:	f103 0418 	add.w	r4, r3, #24
 8018d48:	2107      	movs	r1, #7
 8018d4a:	4610      	mov	r0, r2
 8018d4c:	f7ff f878 	bl	8017e40 <rotr32>
 8018d50:	4603      	mov	r3, r0
 8018d52:	6023      	str	r3, [r4, #0]
 8018d54:	683b      	ldr	r3, [r7, #0]
 8018d56:	3308      	adds	r3, #8
 8018d58:	681a      	ldr	r2, [r3, #0]
 8018d5a:	683b      	ldr	r3, [r7, #0]
 8018d5c:	331c      	adds	r3, #28
 8018d5e:	681b      	ldr	r3, [r3, #0]
 8018d60:	18d1      	adds	r1, r2, r3
 8018d62:	230b      	movs	r3, #11
 8018d64:	009b      	lsls	r3, r3, #2
 8018d66:	687a      	ldr	r2, [r7, #4]
 8018d68:	4413      	add	r3, r2
 8018d6a:	681a      	ldr	r2, [r3, #0]
 8018d6c:	683b      	ldr	r3, [r7, #0]
 8018d6e:	3308      	adds	r3, #8
 8018d70:	440a      	add	r2, r1
 8018d72:	601a      	str	r2, [r3, #0]
 8018d74:	683b      	ldr	r3, [r7, #0]
 8018d76:	3334      	adds	r3, #52	; 0x34
 8018d78:	681a      	ldr	r2, [r3, #0]
 8018d7a:	683b      	ldr	r3, [r7, #0]
 8018d7c:	3308      	adds	r3, #8
 8018d7e:	681b      	ldr	r3, [r3, #0]
 8018d80:	405a      	eors	r2, r3
 8018d82:	683b      	ldr	r3, [r7, #0]
 8018d84:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8018d88:	2110      	movs	r1, #16
 8018d8a:	4610      	mov	r0, r2
 8018d8c:	f7ff f858 	bl	8017e40 <rotr32>
 8018d90:	4603      	mov	r3, r0
 8018d92:	6023      	str	r3, [r4, #0]
 8018d94:	683b      	ldr	r3, [r7, #0]
 8018d96:	3320      	adds	r3, #32
 8018d98:	6819      	ldr	r1, [r3, #0]
 8018d9a:	683b      	ldr	r3, [r7, #0]
 8018d9c:	3334      	adds	r3, #52	; 0x34
 8018d9e:	681a      	ldr	r2, [r3, #0]
 8018da0:	683b      	ldr	r3, [r7, #0]
 8018da2:	3320      	adds	r3, #32
 8018da4:	440a      	add	r2, r1
 8018da6:	601a      	str	r2, [r3, #0]
 8018da8:	683b      	ldr	r3, [r7, #0]
 8018daa:	331c      	adds	r3, #28
 8018dac:	681a      	ldr	r2, [r3, #0]
 8018dae:	683b      	ldr	r3, [r7, #0]
 8018db0:	3320      	adds	r3, #32
 8018db2:	681b      	ldr	r3, [r3, #0]
 8018db4:	405a      	eors	r2, r3
 8018db6:	683b      	ldr	r3, [r7, #0]
 8018db8:	f103 041c 	add.w	r4, r3, #28
 8018dbc:	210c      	movs	r1, #12
 8018dbe:	4610      	mov	r0, r2
 8018dc0:	f7ff f83e 	bl	8017e40 <rotr32>
 8018dc4:	4603      	mov	r3, r0
 8018dc6:	6023      	str	r3, [r4, #0]
 8018dc8:	683b      	ldr	r3, [r7, #0]
 8018dca:	3308      	adds	r3, #8
 8018dcc:	681a      	ldr	r2, [r3, #0]
 8018dce:	683b      	ldr	r3, [r7, #0]
 8018dd0:	331c      	adds	r3, #28
 8018dd2:	681b      	ldr	r3, [r3, #0]
 8018dd4:	18d1      	adds	r1, r2, r3
 8018dd6:	2307      	movs	r3, #7
 8018dd8:	009b      	lsls	r3, r3, #2
 8018dda:	687a      	ldr	r2, [r7, #4]
 8018ddc:	4413      	add	r3, r2
 8018dde:	681a      	ldr	r2, [r3, #0]
 8018de0:	683b      	ldr	r3, [r7, #0]
 8018de2:	3308      	adds	r3, #8
 8018de4:	440a      	add	r2, r1
 8018de6:	601a      	str	r2, [r3, #0]
 8018de8:	683b      	ldr	r3, [r7, #0]
 8018dea:	3334      	adds	r3, #52	; 0x34
 8018dec:	681a      	ldr	r2, [r3, #0]
 8018dee:	683b      	ldr	r3, [r7, #0]
 8018df0:	3308      	adds	r3, #8
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	405a      	eors	r2, r3
 8018df6:	683b      	ldr	r3, [r7, #0]
 8018df8:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8018dfc:	2108      	movs	r1, #8
 8018dfe:	4610      	mov	r0, r2
 8018e00:	f7ff f81e 	bl	8017e40 <rotr32>
 8018e04:	4603      	mov	r3, r0
 8018e06:	6023      	str	r3, [r4, #0]
 8018e08:	683b      	ldr	r3, [r7, #0]
 8018e0a:	3320      	adds	r3, #32
 8018e0c:	6819      	ldr	r1, [r3, #0]
 8018e0e:	683b      	ldr	r3, [r7, #0]
 8018e10:	3334      	adds	r3, #52	; 0x34
 8018e12:	681a      	ldr	r2, [r3, #0]
 8018e14:	683b      	ldr	r3, [r7, #0]
 8018e16:	3320      	adds	r3, #32
 8018e18:	440a      	add	r2, r1
 8018e1a:	601a      	str	r2, [r3, #0]
 8018e1c:	683b      	ldr	r3, [r7, #0]
 8018e1e:	331c      	adds	r3, #28
 8018e20:	681a      	ldr	r2, [r3, #0]
 8018e22:	683b      	ldr	r3, [r7, #0]
 8018e24:	3320      	adds	r3, #32
 8018e26:	681b      	ldr	r3, [r3, #0]
 8018e28:	405a      	eors	r2, r3
 8018e2a:	683b      	ldr	r3, [r7, #0]
 8018e2c:	f103 041c 	add.w	r4, r3, #28
 8018e30:	2107      	movs	r1, #7
 8018e32:	4610      	mov	r0, r2
 8018e34:	f7ff f804 	bl	8017e40 <rotr32>
 8018e38:	4603      	mov	r3, r0
 8018e3a:	6023      	str	r3, [r4, #0]
 8018e3c:	683b      	ldr	r3, [r7, #0]
 8018e3e:	330c      	adds	r3, #12
 8018e40:	681a      	ldr	r2, [r3, #0]
 8018e42:	683b      	ldr	r3, [r7, #0]
 8018e44:	3310      	adds	r3, #16
 8018e46:	681b      	ldr	r3, [r3, #0]
 8018e48:	18d1      	adds	r1, r2, r3
 8018e4a:	2305      	movs	r3, #5
 8018e4c:	009b      	lsls	r3, r3, #2
 8018e4e:	687a      	ldr	r2, [r7, #4]
 8018e50:	4413      	add	r3, r2
 8018e52:	681a      	ldr	r2, [r3, #0]
 8018e54:	683b      	ldr	r3, [r7, #0]
 8018e56:	330c      	adds	r3, #12
 8018e58:	440a      	add	r2, r1
 8018e5a:	601a      	str	r2, [r3, #0]
 8018e5c:	683b      	ldr	r3, [r7, #0]
 8018e5e:	3338      	adds	r3, #56	; 0x38
 8018e60:	681a      	ldr	r2, [r3, #0]
 8018e62:	683b      	ldr	r3, [r7, #0]
 8018e64:	330c      	adds	r3, #12
 8018e66:	681b      	ldr	r3, [r3, #0]
 8018e68:	405a      	eors	r2, r3
 8018e6a:	683b      	ldr	r3, [r7, #0]
 8018e6c:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8018e70:	2110      	movs	r1, #16
 8018e72:	4610      	mov	r0, r2
 8018e74:	f7fe ffe4 	bl	8017e40 <rotr32>
 8018e78:	4603      	mov	r3, r0
 8018e7a:	6023      	str	r3, [r4, #0]
 8018e7c:	683b      	ldr	r3, [r7, #0]
 8018e7e:	3324      	adds	r3, #36	; 0x24
 8018e80:	6819      	ldr	r1, [r3, #0]
 8018e82:	683b      	ldr	r3, [r7, #0]
 8018e84:	3338      	adds	r3, #56	; 0x38
 8018e86:	681a      	ldr	r2, [r3, #0]
 8018e88:	683b      	ldr	r3, [r7, #0]
 8018e8a:	3324      	adds	r3, #36	; 0x24
 8018e8c:	440a      	add	r2, r1
 8018e8e:	601a      	str	r2, [r3, #0]
 8018e90:	683b      	ldr	r3, [r7, #0]
 8018e92:	3310      	adds	r3, #16
 8018e94:	681a      	ldr	r2, [r3, #0]
 8018e96:	683b      	ldr	r3, [r7, #0]
 8018e98:	3324      	adds	r3, #36	; 0x24
 8018e9a:	681b      	ldr	r3, [r3, #0]
 8018e9c:	405a      	eors	r2, r3
 8018e9e:	683b      	ldr	r3, [r7, #0]
 8018ea0:	f103 0410 	add.w	r4, r3, #16
 8018ea4:	210c      	movs	r1, #12
 8018ea6:	4610      	mov	r0, r2
 8018ea8:	f7fe ffca 	bl	8017e40 <rotr32>
 8018eac:	4603      	mov	r3, r0
 8018eae:	6023      	str	r3, [r4, #0]
 8018eb0:	683b      	ldr	r3, [r7, #0]
 8018eb2:	330c      	adds	r3, #12
 8018eb4:	681a      	ldr	r2, [r3, #0]
 8018eb6:	683b      	ldr	r3, [r7, #0]
 8018eb8:	3310      	adds	r3, #16
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	18d1      	adds	r1, r2, r3
 8018ebe:	2303      	movs	r3, #3
 8018ec0:	009b      	lsls	r3, r3, #2
 8018ec2:	687a      	ldr	r2, [r7, #4]
 8018ec4:	4413      	add	r3, r2
 8018ec6:	681a      	ldr	r2, [r3, #0]
 8018ec8:	683b      	ldr	r3, [r7, #0]
 8018eca:	330c      	adds	r3, #12
 8018ecc:	440a      	add	r2, r1
 8018ece:	601a      	str	r2, [r3, #0]
 8018ed0:	683b      	ldr	r3, [r7, #0]
 8018ed2:	3338      	adds	r3, #56	; 0x38
 8018ed4:	681a      	ldr	r2, [r3, #0]
 8018ed6:	683b      	ldr	r3, [r7, #0]
 8018ed8:	330c      	adds	r3, #12
 8018eda:	681b      	ldr	r3, [r3, #0]
 8018edc:	405a      	eors	r2, r3
 8018ede:	683b      	ldr	r3, [r7, #0]
 8018ee0:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8018ee4:	2108      	movs	r1, #8
 8018ee6:	4610      	mov	r0, r2
 8018ee8:	f7fe ffaa 	bl	8017e40 <rotr32>
 8018eec:	4603      	mov	r3, r0
 8018eee:	6023      	str	r3, [r4, #0]
 8018ef0:	683b      	ldr	r3, [r7, #0]
 8018ef2:	3324      	adds	r3, #36	; 0x24
 8018ef4:	6819      	ldr	r1, [r3, #0]
 8018ef6:	683b      	ldr	r3, [r7, #0]
 8018ef8:	3338      	adds	r3, #56	; 0x38
 8018efa:	681a      	ldr	r2, [r3, #0]
 8018efc:	683b      	ldr	r3, [r7, #0]
 8018efe:	3324      	adds	r3, #36	; 0x24
 8018f00:	440a      	add	r2, r1
 8018f02:	601a      	str	r2, [r3, #0]
 8018f04:	683b      	ldr	r3, [r7, #0]
 8018f06:	3310      	adds	r3, #16
 8018f08:	681a      	ldr	r2, [r3, #0]
 8018f0a:	683b      	ldr	r3, [r7, #0]
 8018f0c:	3324      	adds	r3, #36	; 0x24
 8018f0e:	681b      	ldr	r3, [r3, #0]
 8018f10:	405a      	eors	r2, r3
 8018f12:	683b      	ldr	r3, [r7, #0]
 8018f14:	f103 0410 	add.w	r4, r3, #16
 8018f18:	2107      	movs	r1, #7
 8018f1a:	4610      	mov	r0, r2
 8018f1c:	f7fe ff90 	bl	8017e40 <rotr32>
 8018f20:	4603      	mov	r3, r0
 8018f22:	6023      	str	r3, [r4, #0]
  ROUND( 2 );
 8018f24:	683b      	ldr	r3, [r7, #0]
 8018f26:	681a      	ldr	r2, [r3, #0]
 8018f28:	683b      	ldr	r3, [r7, #0]
 8018f2a:	3310      	adds	r3, #16
 8018f2c:	681b      	ldr	r3, [r3, #0]
 8018f2e:	441a      	add	r2, r3
 8018f30:	230b      	movs	r3, #11
 8018f32:	009b      	lsls	r3, r3, #2
 8018f34:	6879      	ldr	r1, [r7, #4]
 8018f36:	440b      	add	r3, r1
 8018f38:	681b      	ldr	r3, [r3, #0]
 8018f3a:	441a      	add	r2, r3
 8018f3c:	683b      	ldr	r3, [r7, #0]
 8018f3e:	601a      	str	r2, [r3, #0]
 8018f40:	683b      	ldr	r3, [r7, #0]
 8018f42:	3330      	adds	r3, #48	; 0x30
 8018f44:	681a      	ldr	r2, [r3, #0]
 8018f46:	683b      	ldr	r3, [r7, #0]
 8018f48:	681b      	ldr	r3, [r3, #0]
 8018f4a:	405a      	eors	r2, r3
 8018f4c:	683b      	ldr	r3, [r7, #0]
 8018f4e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8018f52:	2110      	movs	r1, #16
 8018f54:	4610      	mov	r0, r2
 8018f56:	f7fe ff73 	bl	8017e40 <rotr32>
 8018f5a:	4603      	mov	r3, r0
 8018f5c:	6023      	str	r3, [r4, #0]
 8018f5e:	683b      	ldr	r3, [r7, #0]
 8018f60:	3320      	adds	r3, #32
 8018f62:	6819      	ldr	r1, [r3, #0]
 8018f64:	683b      	ldr	r3, [r7, #0]
 8018f66:	3330      	adds	r3, #48	; 0x30
 8018f68:	681a      	ldr	r2, [r3, #0]
 8018f6a:	683b      	ldr	r3, [r7, #0]
 8018f6c:	3320      	adds	r3, #32
 8018f6e:	440a      	add	r2, r1
 8018f70:	601a      	str	r2, [r3, #0]
 8018f72:	683b      	ldr	r3, [r7, #0]
 8018f74:	3310      	adds	r3, #16
 8018f76:	681a      	ldr	r2, [r3, #0]
 8018f78:	683b      	ldr	r3, [r7, #0]
 8018f7a:	3320      	adds	r3, #32
 8018f7c:	681b      	ldr	r3, [r3, #0]
 8018f7e:	405a      	eors	r2, r3
 8018f80:	683b      	ldr	r3, [r7, #0]
 8018f82:	f103 0410 	add.w	r4, r3, #16
 8018f86:	210c      	movs	r1, #12
 8018f88:	4610      	mov	r0, r2
 8018f8a:	f7fe ff59 	bl	8017e40 <rotr32>
 8018f8e:	4603      	mov	r3, r0
 8018f90:	6023      	str	r3, [r4, #0]
 8018f92:	683b      	ldr	r3, [r7, #0]
 8018f94:	681a      	ldr	r2, [r3, #0]
 8018f96:	683b      	ldr	r3, [r7, #0]
 8018f98:	3310      	adds	r3, #16
 8018f9a:	681b      	ldr	r3, [r3, #0]
 8018f9c:	441a      	add	r2, r3
 8018f9e:	2308      	movs	r3, #8
 8018fa0:	009b      	lsls	r3, r3, #2
 8018fa2:	6879      	ldr	r1, [r7, #4]
 8018fa4:	440b      	add	r3, r1
 8018fa6:	681b      	ldr	r3, [r3, #0]
 8018fa8:	441a      	add	r2, r3
 8018faa:	683b      	ldr	r3, [r7, #0]
 8018fac:	601a      	str	r2, [r3, #0]
 8018fae:	683b      	ldr	r3, [r7, #0]
 8018fb0:	3330      	adds	r3, #48	; 0x30
 8018fb2:	681a      	ldr	r2, [r3, #0]
 8018fb4:	683b      	ldr	r3, [r7, #0]
 8018fb6:	681b      	ldr	r3, [r3, #0]
 8018fb8:	405a      	eors	r2, r3
 8018fba:	683b      	ldr	r3, [r7, #0]
 8018fbc:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8018fc0:	2108      	movs	r1, #8
 8018fc2:	4610      	mov	r0, r2
 8018fc4:	f7fe ff3c 	bl	8017e40 <rotr32>
 8018fc8:	4603      	mov	r3, r0
 8018fca:	6023      	str	r3, [r4, #0]
 8018fcc:	683b      	ldr	r3, [r7, #0]
 8018fce:	3320      	adds	r3, #32
 8018fd0:	6819      	ldr	r1, [r3, #0]
 8018fd2:	683b      	ldr	r3, [r7, #0]
 8018fd4:	3330      	adds	r3, #48	; 0x30
 8018fd6:	681a      	ldr	r2, [r3, #0]
 8018fd8:	683b      	ldr	r3, [r7, #0]
 8018fda:	3320      	adds	r3, #32
 8018fdc:	440a      	add	r2, r1
 8018fde:	601a      	str	r2, [r3, #0]
 8018fe0:	683b      	ldr	r3, [r7, #0]
 8018fe2:	3310      	adds	r3, #16
 8018fe4:	681a      	ldr	r2, [r3, #0]
 8018fe6:	683b      	ldr	r3, [r7, #0]
 8018fe8:	3320      	adds	r3, #32
 8018fea:	681b      	ldr	r3, [r3, #0]
 8018fec:	405a      	eors	r2, r3
 8018fee:	683b      	ldr	r3, [r7, #0]
 8018ff0:	f103 0410 	add.w	r4, r3, #16
 8018ff4:	2107      	movs	r1, #7
 8018ff6:	4610      	mov	r0, r2
 8018ff8:	f7fe ff22 	bl	8017e40 <rotr32>
 8018ffc:	4603      	mov	r3, r0
 8018ffe:	6023      	str	r3, [r4, #0]
 8019000:	683b      	ldr	r3, [r7, #0]
 8019002:	3304      	adds	r3, #4
 8019004:	681a      	ldr	r2, [r3, #0]
 8019006:	683b      	ldr	r3, [r7, #0]
 8019008:	3314      	adds	r3, #20
 801900a:	681b      	ldr	r3, [r3, #0]
 801900c:	18d1      	adds	r1, r2, r3
 801900e:	230c      	movs	r3, #12
 8019010:	009b      	lsls	r3, r3, #2
 8019012:	687a      	ldr	r2, [r7, #4]
 8019014:	4413      	add	r3, r2
 8019016:	681a      	ldr	r2, [r3, #0]
 8019018:	683b      	ldr	r3, [r7, #0]
 801901a:	3304      	adds	r3, #4
 801901c:	440a      	add	r2, r1
 801901e:	601a      	str	r2, [r3, #0]
 8019020:	683b      	ldr	r3, [r7, #0]
 8019022:	3334      	adds	r3, #52	; 0x34
 8019024:	681a      	ldr	r2, [r3, #0]
 8019026:	683b      	ldr	r3, [r7, #0]
 8019028:	3304      	adds	r3, #4
 801902a:	681b      	ldr	r3, [r3, #0]
 801902c:	405a      	eors	r2, r3
 801902e:	683b      	ldr	r3, [r7, #0]
 8019030:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8019034:	2110      	movs	r1, #16
 8019036:	4610      	mov	r0, r2
 8019038:	f7fe ff02 	bl	8017e40 <rotr32>
 801903c:	4603      	mov	r3, r0
 801903e:	6023      	str	r3, [r4, #0]
 8019040:	683b      	ldr	r3, [r7, #0]
 8019042:	3324      	adds	r3, #36	; 0x24
 8019044:	6819      	ldr	r1, [r3, #0]
 8019046:	683b      	ldr	r3, [r7, #0]
 8019048:	3334      	adds	r3, #52	; 0x34
 801904a:	681a      	ldr	r2, [r3, #0]
 801904c:	683b      	ldr	r3, [r7, #0]
 801904e:	3324      	adds	r3, #36	; 0x24
 8019050:	440a      	add	r2, r1
 8019052:	601a      	str	r2, [r3, #0]
 8019054:	683b      	ldr	r3, [r7, #0]
 8019056:	3314      	adds	r3, #20
 8019058:	681a      	ldr	r2, [r3, #0]
 801905a:	683b      	ldr	r3, [r7, #0]
 801905c:	3324      	adds	r3, #36	; 0x24
 801905e:	681b      	ldr	r3, [r3, #0]
 8019060:	405a      	eors	r2, r3
 8019062:	683b      	ldr	r3, [r7, #0]
 8019064:	f103 0414 	add.w	r4, r3, #20
 8019068:	210c      	movs	r1, #12
 801906a:	4610      	mov	r0, r2
 801906c:	f7fe fee8 	bl	8017e40 <rotr32>
 8019070:	4603      	mov	r3, r0
 8019072:	6023      	str	r3, [r4, #0]
 8019074:	683b      	ldr	r3, [r7, #0]
 8019076:	3304      	adds	r3, #4
 8019078:	681a      	ldr	r2, [r3, #0]
 801907a:	683b      	ldr	r3, [r7, #0]
 801907c:	3314      	adds	r3, #20
 801907e:	681b      	ldr	r3, [r3, #0]
 8019080:	18d1      	adds	r1, r2, r3
 8019082:	2300      	movs	r3, #0
 8019084:	009b      	lsls	r3, r3, #2
 8019086:	687a      	ldr	r2, [r7, #4]
 8019088:	4413      	add	r3, r2
 801908a:	681a      	ldr	r2, [r3, #0]
 801908c:	683b      	ldr	r3, [r7, #0]
 801908e:	3304      	adds	r3, #4
 8019090:	440a      	add	r2, r1
 8019092:	601a      	str	r2, [r3, #0]
 8019094:	683b      	ldr	r3, [r7, #0]
 8019096:	3334      	adds	r3, #52	; 0x34
 8019098:	681a      	ldr	r2, [r3, #0]
 801909a:	683b      	ldr	r3, [r7, #0]
 801909c:	3304      	adds	r3, #4
 801909e:	681b      	ldr	r3, [r3, #0]
 80190a0:	405a      	eors	r2, r3
 80190a2:	683b      	ldr	r3, [r7, #0]
 80190a4:	f103 0434 	add.w	r4, r3, #52	; 0x34
 80190a8:	2108      	movs	r1, #8
 80190aa:	4610      	mov	r0, r2
 80190ac:	f7fe fec8 	bl	8017e40 <rotr32>
 80190b0:	4603      	mov	r3, r0
 80190b2:	6023      	str	r3, [r4, #0]
 80190b4:	683b      	ldr	r3, [r7, #0]
 80190b6:	3324      	adds	r3, #36	; 0x24
 80190b8:	6819      	ldr	r1, [r3, #0]
 80190ba:	683b      	ldr	r3, [r7, #0]
 80190bc:	3334      	adds	r3, #52	; 0x34
 80190be:	681a      	ldr	r2, [r3, #0]
 80190c0:	683b      	ldr	r3, [r7, #0]
 80190c2:	3324      	adds	r3, #36	; 0x24
 80190c4:	440a      	add	r2, r1
 80190c6:	601a      	str	r2, [r3, #0]
 80190c8:	683b      	ldr	r3, [r7, #0]
 80190ca:	3314      	adds	r3, #20
 80190cc:	681a      	ldr	r2, [r3, #0]
 80190ce:	683b      	ldr	r3, [r7, #0]
 80190d0:	3324      	adds	r3, #36	; 0x24
 80190d2:	681b      	ldr	r3, [r3, #0]
 80190d4:	405a      	eors	r2, r3
 80190d6:	683b      	ldr	r3, [r7, #0]
 80190d8:	f103 0414 	add.w	r4, r3, #20
 80190dc:	2107      	movs	r1, #7
 80190de:	4610      	mov	r0, r2
 80190e0:	f7fe feae 	bl	8017e40 <rotr32>
 80190e4:	4603      	mov	r3, r0
 80190e6:	6023      	str	r3, [r4, #0]
 80190e8:	683b      	ldr	r3, [r7, #0]
 80190ea:	3308      	adds	r3, #8
 80190ec:	681a      	ldr	r2, [r3, #0]
 80190ee:	683b      	ldr	r3, [r7, #0]
 80190f0:	3318      	adds	r3, #24
 80190f2:	681b      	ldr	r3, [r3, #0]
 80190f4:	18d1      	adds	r1, r2, r3
 80190f6:	2305      	movs	r3, #5
 80190f8:	009b      	lsls	r3, r3, #2
 80190fa:	687a      	ldr	r2, [r7, #4]
 80190fc:	4413      	add	r3, r2
 80190fe:	681a      	ldr	r2, [r3, #0]
 8019100:	683b      	ldr	r3, [r7, #0]
 8019102:	3308      	adds	r3, #8
 8019104:	440a      	add	r2, r1
 8019106:	601a      	str	r2, [r3, #0]
 8019108:	683b      	ldr	r3, [r7, #0]
 801910a:	3338      	adds	r3, #56	; 0x38
 801910c:	681a      	ldr	r2, [r3, #0]
 801910e:	683b      	ldr	r3, [r7, #0]
 8019110:	3308      	adds	r3, #8
 8019112:	681b      	ldr	r3, [r3, #0]
 8019114:	405a      	eors	r2, r3
 8019116:	683b      	ldr	r3, [r7, #0]
 8019118:	f103 0438 	add.w	r4, r3, #56	; 0x38
 801911c:	2110      	movs	r1, #16
 801911e:	4610      	mov	r0, r2
 8019120:	f7fe fe8e 	bl	8017e40 <rotr32>
 8019124:	4603      	mov	r3, r0
 8019126:	6023      	str	r3, [r4, #0]
 8019128:	683b      	ldr	r3, [r7, #0]
 801912a:	3328      	adds	r3, #40	; 0x28
 801912c:	6819      	ldr	r1, [r3, #0]
 801912e:	683b      	ldr	r3, [r7, #0]
 8019130:	3338      	adds	r3, #56	; 0x38
 8019132:	681a      	ldr	r2, [r3, #0]
 8019134:	683b      	ldr	r3, [r7, #0]
 8019136:	3328      	adds	r3, #40	; 0x28
 8019138:	440a      	add	r2, r1
 801913a:	601a      	str	r2, [r3, #0]
 801913c:	683b      	ldr	r3, [r7, #0]
 801913e:	3318      	adds	r3, #24
 8019140:	681a      	ldr	r2, [r3, #0]
 8019142:	683b      	ldr	r3, [r7, #0]
 8019144:	3328      	adds	r3, #40	; 0x28
 8019146:	681b      	ldr	r3, [r3, #0]
 8019148:	405a      	eors	r2, r3
 801914a:	683b      	ldr	r3, [r7, #0]
 801914c:	f103 0418 	add.w	r4, r3, #24
 8019150:	210c      	movs	r1, #12
 8019152:	4610      	mov	r0, r2
 8019154:	f7fe fe74 	bl	8017e40 <rotr32>
 8019158:	4603      	mov	r3, r0
 801915a:	6023      	str	r3, [r4, #0]
 801915c:	683b      	ldr	r3, [r7, #0]
 801915e:	3308      	adds	r3, #8
 8019160:	681a      	ldr	r2, [r3, #0]
 8019162:	683b      	ldr	r3, [r7, #0]
 8019164:	3318      	adds	r3, #24
 8019166:	681b      	ldr	r3, [r3, #0]
 8019168:	18d1      	adds	r1, r2, r3
 801916a:	2302      	movs	r3, #2
 801916c:	009b      	lsls	r3, r3, #2
 801916e:	687a      	ldr	r2, [r7, #4]
 8019170:	4413      	add	r3, r2
 8019172:	681a      	ldr	r2, [r3, #0]
 8019174:	683b      	ldr	r3, [r7, #0]
 8019176:	3308      	adds	r3, #8
 8019178:	440a      	add	r2, r1
 801917a:	601a      	str	r2, [r3, #0]
 801917c:	683b      	ldr	r3, [r7, #0]
 801917e:	3338      	adds	r3, #56	; 0x38
 8019180:	681a      	ldr	r2, [r3, #0]
 8019182:	683b      	ldr	r3, [r7, #0]
 8019184:	3308      	adds	r3, #8
 8019186:	681b      	ldr	r3, [r3, #0]
 8019188:	405a      	eors	r2, r3
 801918a:	683b      	ldr	r3, [r7, #0]
 801918c:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8019190:	2108      	movs	r1, #8
 8019192:	4610      	mov	r0, r2
 8019194:	f7fe fe54 	bl	8017e40 <rotr32>
 8019198:	4603      	mov	r3, r0
 801919a:	6023      	str	r3, [r4, #0]
 801919c:	683b      	ldr	r3, [r7, #0]
 801919e:	3328      	adds	r3, #40	; 0x28
 80191a0:	6819      	ldr	r1, [r3, #0]
 80191a2:	683b      	ldr	r3, [r7, #0]
 80191a4:	3338      	adds	r3, #56	; 0x38
 80191a6:	681a      	ldr	r2, [r3, #0]
 80191a8:	683b      	ldr	r3, [r7, #0]
 80191aa:	3328      	adds	r3, #40	; 0x28
 80191ac:	440a      	add	r2, r1
 80191ae:	601a      	str	r2, [r3, #0]
 80191b0:	683b      	ldr	r3, [r7, #0]
 80191b2:	3318      	adds	r3, #24
 80191b4:	681a      	ldr	r2, [r3, #0]
 80191b6:	683b      	ldr	r3, [r7, #0]
 80191b8:	3328      	adds	r3, #40	; 0x28
 80191ba:	681b      	ldr	r3, [r3, #0]
 80191bc:	405a      	eors	r2, r3
 80191be:	683b      	ldr	r3, [r7, #0]
 80191c0:	f103 0418 	add.w	r4, r3, #24
 80191c4:	2107      	movs	r1, #7
 80191c6:	4610      	mov	r0, r2
 80191c8:	f7fe fe3a 	bl	8017e40 <rotr32>
 80191cc:	4603      	mov	r3, r0
 80191ce:	6023      	str	r3, [r4, #0]
 80191d0:	683b      	ldr	r3, [r7, #0]
 80191d2:	330c      	adds	r3, #12
 80191d4:	681a      	ldr	r2, [r3, #0]
 80191d6:	683b      	ldr	r3, [r7, #0]
 80191d8:	331c      	adds	r3, #28
 80191da:	681b      	ldr	r3, [r3, #0]
 80191dc:	18d1      	adds	r1, r2, r3
 80191de:	230f      	movs	r3, #15
 80191e0:	009b      	lsls	r3, r3, #2
 80191e2:	687a      	ldr	r2, [r7, #4]
 80191e4:	4413      	add	r3, r2
 80191e6:	681a      	ldr	r2, [r3, #0]
 80191e8:	683b      	ldr	r3, [r7, #0]
 80191ea:	330c      	adds	r3, #12
 80191ec:	440a      	add	r2, r1
 80191ee:	601a      	str	r2, [r3, #0]
 80191f0:	683b      	ldr	r3, [r7, #0]
 80191f2:	333c      	adds	r3, #60	; 0x3c
 80191f4:	681a      	ldr	r2, [r3, #0]
 80191f6:	683b      	ldr	r3, [r7, #0]
 80191f8:	330c      	adds	r3, #12
 80191fa:	681b      	ldr	r3, [r3, #0]
 80191fc:	405a      	eors	r2, r3
 80191fe:	683b      	ldr	r3, [r7, #0]
 8019200:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8019204:	2110      	movs	r1, #16
 8019206:	4610      	mov	r0, r2
 8019208:	f7fe fe1a 	bl	8017e40 <rotr32>
 801920c:	4603      	mov	r3, r0
 801920e:	6023      	str	r3, [r4, #0]
 8019210:	683b      	ldr	r3, [r7, #0]
 8019212:	332c      	adds	r3, #44	; 0x2c
 8019214:	6819      	ldr	r1, [r3, #0]
 8019216:	683b      	ldr	r3, [r7, #0]
 8019218:	333c      	adds	r3, #60	; 0x3c
 801921a:	681a      	ldr	r2, [r3, #0]
 801921c:	683b      	ldr	r3, [r7, #0]
 801921e:	332c      	adds	r3, #44	; 0x2c
 8019220:	440a      	add	r2, r1
 8019222:	601a      	str	r2, [r3, #0]
 8019224:	683b      	ldr	r3, [r7, #0]
 8019226:	331c      	adds	r3, #28
 8019228:	681a      	ldr	r2, [r3, #0]
 801922a:	683b      	ldr	r3, [r7, #0]
 801922c:	332c      	adds	r3, #44	; 0x2c
 801922e:	681b      	ldr	r3, [r3, #0]
 8019230:	405a      	eors	r2, r3
 8019232:	683b      	ldr	r3, [r7, #0]
 8019234:	f103 041c 	add.w	r4, r3, #28
 8019238:	210c      	movs	r1, #12
 801923a:	4610      	mov	r0, r2
 801923c:	f7fe fe00 	bl	8017e40 <rotr32>
 8019240:	4603      	mov	r3, r0
 8019242:	6023      	str	r3, [r4, #0]
 8019244:	683b      	ldr	r3, [r7, #0]
 8019246:	330c      	adds	r3, #12
 8019248:	681a      	ldr	r2, [r3, #0]
 801924a:	683b      	ldr	r3, [r7, #0]
 801924c:	331c      	adds	r3, #28
 801924e:	681b      	ldr	r3, [r3, #0]
 8019250:	18d1      	adds	r1, r2, r3
 8019252:	230d      	movs	r3, #13
 8019254:	009b      	lsls	r3, r3, #2
 8019256:	687a      	ldr	r2, [r7, #4]
 8019258:	4413      	add	r3, r2
 801925a:	681a      	ldr	r2, [r3, #0]
 801925c:	683b      	ldr	r3, [r7, #0]
 801925e:	330c      	adds	r3, #12
 8019260:	440a      	add	r2, r1
 8019262:	601a      	str	r2, [r3, #0]
 8019264:	683b      	ldr	r3, [r7, #0]
 8019266:	333c      	adds	r3, #60	; 0x3c
 8019268:	681a      	ldr	r2, [r3, #0]
 801926a:	683b      	ldr	r3, [r7, #0]
 801926c:	330c      	adds	r3, #12
 801926e:	681b      	ldr	r3, [r3, #0]
 8019270:	405a      	eors	r2, r3
 8019272:	683b      	ldr	r3, [r7, #0]
 8019274:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8019278:	2108      	movs	r1, #8
 801927a:	4610      	mov	r0, r2
 801927c:	f7fe fde0 	bl	8017e40 <rotr32>
 8019280:	4603      	mov	r3, r0
 8019282:	6023      	str	r3, [r4, #0]
 8019284:	683b      	ldr	r3, [r7, #0]
 8019286:	332c      	adds	r3, #44	; 0x2c
 8019288:	6819      	ldr	r1, [r3, #0]
 801928a:	683b      	ldr	r3, [r7, #0]
 801928c:	333c      	adds	r3, #60	; 0x3c
 801928e:	681a      	ldr	r2, [r3, #0]
 8019290:	683b      	ldr	r3, [r7, #0]
 8019292:	332c      	adds	r3, #44	; 0x2c
 8019294:	440a      	add	r2, r1
 8019296:	601a      	str	r2, [r3, #0]
 8019298:	683b      	ldr	r3, [r7, #0]
 801929a:	331c      	adds	r3, #28
 801929c:	681a      	ldr	r2, [r3, #0]
 801929e:	683b      	ldr	r3, [r7, #0]
 80192a0:	332c      	adds	r3, #44	; 0x2c
 80192a2:	681b      	ldr	r3, [r3, #0]
 80192a4:	405a      	eors	r2, r3
 80192a6:	683b      	ldr	r3, [r7, #0]
 80192a8:	f103 041c 	add.w	r4, r3, #28
 80192ac:	2107      	movs	r1, #7
 80192ae:	4610      	mov	r0, r2
 80192b0:	f7fe fdc6 	bl	8017e40 <rotr32>
 80192b4:	4603      	mov	r3, r0
 80192b6:	6023      	str	r3, [r4, #0]
 80192b8:	683b      	ldr	r3, [r7, #0]
 80192ba:	681a      	ldr	r2, [r3, #0]
 80192bc:	683b      	ldr	r3, [r7, #0]
 80192be:	3314      	adds	r3, #20
 80192c0:	681b      	ldr	r3, [r3, #0]
 80192c2:	441a      	add	r2, r3
 80192c4:	230a      	movs	r3, #10
 80192c6:	009b      	lsls	r3, r3, #2
 80192c8:	6879      	ldr	r1, [r7, #4]
 80192ca:	440b      	add	r3, r1
 80192cc:	681b      	ldr	r3, [r3, #0]
 80192ce:	441a      	add	r2, r3
 80192d0:	683b      	ldr	r3, [r7, #0]
 80192d2:	601a      	str	r2, [r3, #0]
 80192d4:	683b      	ldr	r3, [r7, #0]
 80192d6:	333c      	adds	r3, #60	; 0x3c
 80192d8:	681a      	ldr	r2, [r3, #0]
 80192da:	683b      	ldr	r3, [r7, #0]
 80192dc:	681b      	ldr	r3, [r3, #0]
 80192de:	405a      	eors	r2, r3
 80192e0:	683b      	ldr	r3, [r7, #0]
 80192e2:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 80192e6:	2110      	movs	r1, #16
 80192e8:	4610      	mov	r0, r2
 80192ea:	f7fe fda9 	bl	8017e40 <rotr32>
 80192ee:	4603      	mov	r3, r0
 80192f0:	6023      	str	r3, [r4, #0]
 80192f2:	683b      	ldr	r3, [r7, #0]
 80192f4:	3328      	adds	r3, #40	; 0x28
 80192f6:	6819      	ldr	r1, [r3, #0]
 80192f8:	683b      	ldr	r3, [r7, #0]
 80192fa:	333c      	adds	r3, #60	; 0x3c
 80192fc:	681a      	ldr	r2, [r3, #0]
 80192fe:	683b      	ldr	r3, [r7, #0]
 8019300:	3328      	adds	r3, #40	; 0x28
 8019302:	440a      	add	r2, r1
 8019304:	601a      	str	r2, [r3, #0]
 8019306:	683b      	ldr	r3, [r7, #0]
 8019308:	3314      	adds	r3, #20
 801930a:	681a      	ldr	r2, [r3, #0]
 801930c:	683b      	ldr	r3, [r7, #0]
 801930e:	3328      	adds	r3, #40	; 0x28
 8019310:	681b      	ldr	r3, [r3, #0]
 8019312:	405a      	eors	r2, r3
 8019314:	683b      	ldr	r3, [r7, #0]
 8019316:	f103 0414 	add.w	r4, r3, #20
 801931a:	210c      	movs	r1, #12
 801931c:	4610      	mov	r0, r2
 801931e:	f7fe fd8f 	bl	8017e40 <rotr32>
 8019322:	4603      	mov	r3, r0
 8019324:	6023      	str	r3, [r4, #0]
 8019326:	683b      	ldr	r3, [r7, #0]
 8019328:	681a      	ldr	r2, [r3, #0]
 801932a:	683b      	ldr	r3, [r7, #0]
 801932c:	3314      	adds	r3, #20
 801932e:	681b      	ldr	r3, [r3, #0]
 8019330:	441a      	add	r2, r3
 8019332:	230e      	movs	r3, #14
 8019334:	009b      	lsls	r3, r3, #2
 8019336:	6879      	ldr	r1, [r7, #4]
 8019338:	440b      	add	r3, r1
 801933a:	681b      	ldr	r3, [r3, #0]
 801933c:	441a      	add	r2, r3
 801933e:	683b      	ldr	r3, [r7, #0]
 8019340:	601a      	str	r2, [r3, #0]
 8019342:	683b      	ldr	r3, [r7, #0]
 8019344:	333c      	adds	r3, #60	; 0x3c
 8019346:	681a      	ldr	r2, [r3, #0]
 8019348:	683b      	ldr	r3, [r7, #0]
 801934a:	681b      	ldr	r3, [r3, #0]
 801934c:	405a      	eors	r2, r3
 801934e:	683b      	ldr	r3, [r7, #0]
 8019350:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8019354:	2108      	movs	r1, #8
 8019356:	4610      	mov	r0, r2
 8019358:	f7fe fd72 	bl	8017e40 <rotr32>
 801935c:	4603      	mov	r3, r0
 801935e:	6023      	str	r3, [r4, #0]
 8019360:	683b      	ldr	r3, [r7, #0]
 8019362:	3328      	adds	r3, #40	; 0x28
 8019364:	6819      	ldr	r1, [r3, #0]
 8019366:	683b      	ldr	r3, [r7, #0]
 8019368:	333c      	adds	r3, #60	; 0x3c
 801936a:	681a      	ldr	r2, [r3, #0]
 801936c:	683b      	ldr	r3, [r7, #0]
 801936e:	3328      	adds	r3, #40	; 0x28
 8019370:	440a      	add	r2, r1
 8019372:	601a      	str	r2, [r3, #0]
 8019374:	683b      	ldr	r3, [r7, #0]
 8019376:	3314      	adds	r3, #20
 8019378:	681a      	ldr	r2, [r3, #0]
 801937a:	683b      	ldr	r3, [r7, #0]
 801937c:	3328      	adds	r3, #40	; 0x28
 801937e:	681b      	ldr	r3, [r3, #0]
 8019380:	405a      	eors	r2, r3
 8019382:	683b      	ldr	r3, [r7, #0]
 8019384:	f103 0414 	add.w	r4, r3, #20
 8019388:	2107      	movs	r1, #7
 801938a:	4610      	mov	r0, r2
 801938c:	f7fe fd58 	bl	8017e40 <rotr32>
 8019390:	4603      	mov	r3, r0
 8019392:	6023      	str	r3, [r4, #0]
 8019394:	683b      	ldr	r3, [r7, #0]
 8019396:	3304      	adds	r3, #4
 8019398:	681a      	ldr	r2, [r3, #0]
 801939a:	683b      	ldr	r3, [r7, #0]
 801939c:	3318      	adds	r3, #24
 801939e:	681b      	ldr	r3, [r3, #0]
 80193a0:	18d1      	adds	r1, r2, r3
 80193a2:	2303      	movs	r3, #3
 80193a4:	009b      	lsls	r3, r3, #2
 80193a6:	687a      	ldr	r2, [r7, #4]
 80193a8:	4413      	add	r3, r2
 80193aa:	681a      	ldr	r2, [r3, #0]
 80193ac:	683b      	ldr	r3, [r7, #0]
 80193ae:	3304      	adds	r3, #4
 80193b0:	440a      	add	r2, r1
 80193b2:	601a      	str	r2, [r3, #0]
 80193b4:	683b      	ldr	r3, [r7, #0]
 80193b6:	3330      	adds	r3, #48	; 0x30
 80193b8:	681a      	ldr	r2, [r3, #0]
 80193ba:	683b      	ldr	r3, [r7, #0]
 80193bc:	3304      	adds	r3, #4
 80193be:	681b      	ldr	r3, [r3, #0]
 80193c0:	405a      	eors	r2, r3
 80193c2:	683b      	ldr	r3, [r7, #0]
 80193c4:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80193c8:	2110      	movs	r1, #16
 80193ca:	4610      	mov	r0, r2
 80193cc:	f7fe fd38 	bl	8017e40 <rotr32>
 80193d0:	4603      	mov	r3, r0
 80193d2:	6023      	str	r3, [r4, #0]
 80193d4:	683b      	ldr	r3, [r7, #0]
 80193d6:	332c      	adds	r3, #44	; 0x2c
 80193d8:	6819      	ldr	r1, [r3, #0]
 80193da:	683b      	ldr	r3, [r7, #0]
 80193dc:	3330      	adds	r3, #48	; 0x30
 80193de:	681a      	ldr	r2, [r3, #0]
 80193e0:	683b      	ldr	r3, [r7, #0]
 80193e2:	332c      	adds	r3, #44	; 0x2c
 80193e4:	440a      	add	r2, r1
 80193e6:	601a      	str	r2, [r3, #0]
 80193e8:	683b      	ldr	r3, [r7, #0]
 80193ea:	3318      	adds	r3, #24
 80193ec:	681a      	ldr	r2, [r3, #0]
 80193ee:	683b      	ldr	r3, [r7, #0]
 80193f0:	332c      	adds	r3, #44	; 0x2c
 80193f2:	681b      	ldr	r3, [r3, #0]
 80193f4:	405a      	eors	r2, r3
 80193f6:	683b      	ldr	r3, [r7, #0]
 80193f8:	f103 0418 	add.w	r4, r3, #24
 80193fc:	210c      	movs	r1, #12
 80193fe:	4610      	mov	r0, r2
 8019400:	f7fe fd1e 	bl	8017e40 <rotr32>
 8019404:	4603      	mov	r3, r0
 8019406:	6023      	str	r3, [r4, #0]
 8019408:	683b      	ldr	r3, [r7, #0]
 801940a:	3304      	adds	r3, #4
 801940c:	681a      	ldr	r2, [r3, #0]
 801940e:	683b      	ldr	r3, [r7, #0]
 8019410:	3318      	adds	r3, #24
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	18d1      	adds	r1, r2, r3
 8019416:	2306      	movs	r3, #6
 8019418:	009b      	lsls	r3, r3, #2
 801941a:	687a      	ldr	r2, [r7, #4]
 801941c:	4413      	add	r3, r2
 801941e:	681a      	ldr	r2, [r3, #0]
 8019420:	683b      	ldr	r3, [r7, #0]
 8019422:	3304      	adds	r3, #4
 8019424:	440a      	add	r2, r1
 8019426:	601a      	str	r2, [r3, #0]
 8019428:	683b      	ldr	r3, [r7, #0]
 801942a:	3330      	adds	r3, #48	; 0x30
 801942c:	681a      	ldr	r2, [r3, #0]
 801942e:	683b      	ldr	r3, [r7, #0]
 8019430:	3304      	adds	r3, #4
 8019432:	681b      	ldr	r3, [r3, #0]
 8019434:	405a      	eors	r2, r3
 8019436:	683b      	ldr	r3, [r7, #0]
 8019438:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801943c:	2108      	movs	r1, #8
 801943e:	4610      	mov	r0, r2
 8019440:	f7fe fcfe 	bl	8017e40 <rotr32>
 8019444:	4603      	mov	r3, r0
 8019446:	6023      	str	r3, [r4, #0]
 8019448:	683b      	ldr	r3, [r7, #0]
 801944a:	332c      	adds	r3, #44	; 0x2c
 801944c:	6819      	ldr	r1, [r3, #0]
 801944e:	683b      	ldr	r3, [r7, #0]
 8019450:	3330      	adds	r3, #48	; 0x30
 8019452:	681a      	ldr	r2, [r3, #0]
 8019454:	683b      	ldr	r3, [r7, #0]
 8019456:	332c      	adds	r3, #44	; 0x2c
 8019458:	440a      	add	r2, r1
 801945a:	601a      	str	r2, [r3, #0]
 801945c:	683b      	ldr	r3, [r7, #0]
 801945e:	3318      	adds	r3, #24
 8019460:	681a      	ldr	r2, [r3, #0]
 8019462:	683b      	ldr	r3, [r7, #0]
 8019464:	332c      	adds	r3, #44	; 0x2c
 8019466:	681b      	ldr	r3, [r3, #0]
 8019468:	405a      	eors	r2, r3
 801946a:	683b      	ldr	r3, [r7, #0]
 801946c:	f103 0418 	add.w	r4, r3, #24
 8019470:	2107      	movs	r1, #7
 8019472:	4610      	mov	r0, r2
 8019474:	f7fe fce4 	bl	8017e40 <rotr32>
 8019478:	4603      	mov	r3, r0
 801947a:	6023      	str	r3, [r4, #0]
 801947c:	683b      	ldr	r3, [r7, #0]
 801947e:	3308      	adds	r3, #8
 8019480:	681a      	ldr	r2, [r3, #0]
 8019482:	683b      	ldr	r3, [r7, #0]
 8019484:	331c      	adds	r3, #28
 8019486:	681b      	ldr	r3, [r3, #0]
 8019488:	18d1      	adds	r1, r2, r3
 801948a:	2307      	movs	r3, #7
 801948c:	009b      	lsls	r3, r3, #2
 801948e:	687a      	ldr	r2, [r7, #4]
 8019490:	4413      	add	r3, r2
 8019492:	681a      	ldr	r2, [r3, #0]
 8019494:	683b      	ldr	r3, [r7, #0]
 8019496:	3308      	adds	r3, #8
 8019498:	440a      	add	r2, r1
 801949a:	601a      	str	r2, [r3, #0]
 801949c:	683b      	ldr	r3, [r7, #0]
 801949e:	3334      	adds	r3, #52	; 0x34
 80194a0:	681a      	ldr	r2, [r3, #0]
 80194a2:	683b      	ldr	r3, [r7, #0]
 80194a4:	3308      	adds	r3, #8
 80194a6:	681b      	ldr	r3, [r3, #0]
 80194a8:	405a      	eors	r2, r3
 80194aa:	683b      	ldr	r3, [r7, #0]
 80194ac:	f103 0434 	add.w	r4, r3, #52	; 0x34
 80194b0:	2110      	movs	r1, #16
 80194b2:	4610      	mov	r0, r2
 80194b4:	f7fe fcc4 	bl	8017e40 <rotr32>
 80194b8:	4603      	mov	r3, r0
 80194ba:	6023      	str	r3, [r4, #0]
 80194bc:	683b      	ldr	r3, [r7, #0]
 80194be:	3320      	adds	r3, #32
 80194c0:	6819      	ldr	r1, [r3, #0]
 80194c2:	683b      	ldr	r3, [r7, #0]
 80194c4:	3334      	adds	r3, #52	; 0x34
 80194c6:	681a      	ldr	r2, [r3, #0]
 80194c8:	683b      	ldr	r3, [r7, #0]
 80194ca:	3320      	adds	r3, #32
 80194cc:	440a      	add	r2, r1
 80194ce:	601a      	str	r2, [r3, #0]
 80194d0:	683b      	ldr	r3, [r7, #0]
 80194d2:	331c      	adds	r3, #28
 80194d4:	681a      	ldr	r2, [r3, #0]
 80194d6:	683b      	ldr	r3, [r7, #0]
 80194d8:	3320      	adds	r3, #32
 80194da:	681b      	ldr	r3, [r3, #0]
 80194dc:	405a      	eors	r2, r3
 80194de:	683b      	ldr	r3, [r7, #0]
 80194e0:	f103 041c 	add.w	r4, r3, #28
 80194e4:	210c      	movs	r1, #12
 80194e6:	4610      	mov	r0, r2
 80194e8:	f7fe fcaa 	bl	8017e40 <rotr32>
 80194ec:	4603      	mov	r3, r0
 80194ee:	6023      	str	r3, [r4, #0]
 80194f0:	683b      	ldr	r3, [r7, #0]
 80194f2:	3308      	adds	r3, #8
 80194f4:	681a      	ldr	r2, [r3, #0]
 80194f6:	683b      	ldr	r3, [r7, #0]
 80194f8:	331c      	adds	r3, #28
 80194fa:	681b      	ldr	r3, [r3, #0]
 80194fc:	18d1      	adds	r1, r2, r3
 80194fe:	2301      	movs	r3, #1
 8019500:	009b      	lsls	r3, r3, #2
 8019502:	687a      	ldr	r2, [r7, #4]
 8019504:	4413      	add	r3, r2
 8019506:	681a      	ldr	r2, [r3, #0]
 8019508:	683b      	ldr	r3, [r7, #0]
 801950a:	3308      	adds	r3, #8
 801950c:	440a      	add	r2, r1
 801950e:	601a      	str	r2, [r3, #0]
 8019510:	683b      	ldr	r3, [r7, #0]
 8019512:	3334      	adds	r3, #52	; 0x34
 8019514:	681a      	ldr	r2, [r3, #0]
 8019516:	683b      	ldr	r3, [r7, #0]
 8019518:	3308      	adds	r3, #8
 801951a:	681b      	ldr	r3, [r3, #0]
 801951c:	405a      	eors	r2, r3
 801951e:	683b      	ldr	r3, [r7, #0]
 8019520:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8019524:	2108      	movs	r1, #8
 8019526:	4610      	mov	r0, r2
 8019528:	f7fe fc8a 	bl	8017e40 <rotr32>
 801952c:	4603      	mov	r3, r0
 801952e:	6023      	str	r3, [r4, #0]
 8019530:	683b      	ldr	r3, [r7, #0]
 8019532:	3320      	adds	r3, #32
 8019534:	6819      	ldr	r1, [r3, #0]
 8019536:	683b      	ldr	r3, [r7, #0]
 8019538:	3334      	adds	r3, #52	; 0x34
 801953a:	681a      	ldr	r2, [r3, #0]
 801953c:	683b      	ldr	r3, [r7, #0]
 801953e:	3320      	adds	r3, #32
 8019540:	440a      	add	r2, r1
 8019542:	601a      	str	r2, [r3, #0]
 8019544:	683b      	ldr	r3, [r7, #0]
 8019546:	331c      	adds	r3, #28
 8019548:	681a      	ldr	r2, [r3, #0]
 801954a:	683b      	ldr	r3, [r7, #0]
 801954c:	3320      	adds	r3, #32
 801954e:	681b      	ldr	r3, [r3, #0]
 8019550:	405a      	eors	r2, r3
 8019552:	683b      	ldr	r3, [r7, #0]
 8019554:	f103 041c 	add.w	r4, r3, #28
 8019558:	2107      	movs	r1, #7
 801955a:	4610      	mov	r0, r2
 801955c:	f7fe fc70 	bl	8017e40 <rotr32>
 8019560:	4603      	mov	r3, r0
 8019562:	6023      	str	r3, [r4, #0]
 8019564:	683b      	ldr	r3, [r7, #0]
 8019566:	330c      	adds	r3, #12
 8019568:	681a      	ldr	r2, [r3, #0]
 801956a:	683b      	ldr	r3, [r7, #0]
 801956c:	3310      	adds	r3, #16
 801956e:	681b      	ldr	r3, [r3, #0]
 8019570:	18d1      	adds	r1, r2, r3
 8019572:	2309      	movs	r3, #9
 8019574:	009b      	lsls	r3, r3, #2
 8019576:	687a      	ldr	r2, [r7, #4]
 8019578:	4413      	add	r3, r2
 801957a:	681a      	ldr	r2, [r3, #0]
 801957c:	683b      	ldr	r3, [r7, #0]
 801957e:	330c      	adds	r3, #12
 8019580:	440a      	add	r2, r1
 8019582:	601a      	str	r2, [r3, #0]
 8019584:	683b      	ldr	r3, [r7, #0]
 8019586:	3338      	adds	r3, #56	; 0x38
 8019588:	681a      	ldr	r2, [r3, #0]
 801958a:	683b      	ldr	r3, [r7, #0]
 801958c:	330c      	adds	r3, #12
 801958e:	681b      	ldr	r3, [r3, #0]
 8019590:	405a      	eors	r2, r3
 8019592:	683b      	ldr	r3, [r7, #0]
 8019594:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8019598:	2110      	movs	r1, #16
 801959a:	4610      	mov	r0, r2
 801959c:	f7fe fc50 	bl	8017e40 <rotr32>
 80195a0:	4603      	mov	r3, r0
 80195a2:	6023      	str	r3, [r4, #0]
 80195a4:	683b      	ldr	r3, [r7, #0]
 80195a6:	3324      	adds	r3, #36	; 0x24
 80195a8:	6819      	ldr	r1, [r3, #0]
 80195aa:	683b      	ldr	r3, [r7, #0]
 80195ac:	3338      	adds	r3, #56	; 0x38
 80195ae:	681a      	ldr	r2, [r3, #0]
 80195b0:	683b      	ldr	r3, [r7, #0]
 80195b2:	3324      	adds	r3, #36	; 0x24
 80195b4:	440a      	add	r2, r1
 80195b6:	601a      	str	r2, [r3, #0]
 80195b8:	683b      	ldr	r3, [r7, #0]
 80195ba:	3310      	adds	r3, #16
 80195bc:	681a      	ldr	r2, [r3, #0]
 80195be:	683b      	ldr	r3, [r7, #0]
 80195c0:	3324      	adds	r3, #36	; 0x24
 80195c2:	681b      	ldr	r3, [r3, #0]
 80195c4:	405a      	eors	r2, r3
 80195c6:	683b      	ldr	r3, [r7, #0]
 80195c8:	f103 0410 	add.w	r4, r3, #16
 80195cc:	210c      	movs	r1, #12
 80195ce:	4610      	mov	r0, r2
 80195d0:	f7fe fc36 	bl	8017e40 <rotr32>
 80195d4:	4603      	mov	r3, r0
 80195d6:	6023      	str	r3, [r4, #0]
 80195d8:	683b      	ldr	r3, [r7, #0]
 80195da:	330c      	adds	r3, #12
 80195dc:	681a      	ldr	r2, [r3, #0]
 80195de:	683b      	ldr	r3, [r7, #0]
 80195e0:	3310      	adds	r3, #16
 80195e2:	681b      	ldr	r3, [r3, #0]
 80195e4:	18d1      	adds	r1, r2, r3
 80195e6:	2304      	movs	r3, #4
 80195e8:	009b      	lsls	r3, r3, #2
 80195ea:	687a      	ldr	r2, [r7, #4]
 80195ec:	4413      	add	r3, r2
 80195ee:	681a      	ldr	r2, [r3, #0]
 80195f0:	683b      	ldr	r3, [r7, #0]
 80195f2:	330c      	adds	r3, #12
 80195f4:	440a      	add	r2, r1
 80195f6:	601a      	str	r2, [r3, #0]
 80195f8:	683b      	ldr	r3, [r7, #0]
 80195fa:	3338      	adds	r3, #56	; 0x38
 80195fc:	681a      	ldr	r2, [r3, #0]
 80195fe:	683b      	ldr	r3, [r7, #0]
 8019600:	330c      	adds	r3, #12
 8019602:	681b      	ldr	r3, [r3, #0]
 8019604:	405a      	eors	r2, r3
 8019606:	683b      	ldr	r3, [r7, #0]
 8019608:	f103 0438 	add.w	r4, r3, #56	; 0x38
 801960c:	2108      	movs	r1, #8
 801960e:	4610      	mov	r0, r2
 8019610:	f7fe fc16 	bl	8017e40 <rotr32>
 8019614:	4603      	mov	r3, r0
 8019616:	6023      	str	r3, [r4, #0]
 8019618:	683b      	ldr	r3, [r7, #0]
 801961a:	3324      	adds	r3, #36	; 0x24
 801961c:	6819      	ldr	r1, [r3, #0]
 801961e:	683b      	ldr	r3, [r7, #0]
 8019620:	3338      	adds	r3, #56	; 0x38
 8019622:	681a      	ldr	r2, [r3, #0]
 8019624:	683b      	ldr	r3, [r7, #0]
 8019626:	3324      	adds	r3, #36	; 0x24
 8019628:	440a      	add	r2, r1
 801962a:	601a      	str	r2, [r3, #0]
 801962c:	683b      	ldr	r3, [r7, #0]
 801962e:	3310      	adds	r3, #16
 8019630:	681a      	ldr	r2, [r3, #0]
 8019632:	683b      	ldr	r3, [r7, #0]
 8019634:	3324      	adds	r3, #36	; 0x24
 8019636:	681b      	ldr	r3, [r3, #0]
 8019638:	405a      	eors	r2, r3
 801963a:	683b      	ldr	r3, [r7, #0]
 801963c:	f103 0410 	add.w	r4, r3, #16
 8019640:	2107      	movs	r1, #7
 8019642:	4610      	mov	r0, r2
 8019644:	f7fe fbfc 	bl	8017e40 <rotr32>
 8019648:	4603      	mov	r3, r0
 801964a:	6023      	str	r3, [r4, #0]
  ROUND( 3 );
 801964c:	683b      	ldr	r3, [r7, #0]
 801964e:	681a      	ldr	r2, [r3, #0]
 8019650:	683b      	ldr	r3, [r7, #0]
 8019652:	3310      	adds	r3, #16
 8019654:	681b      	ldr	r3, [r3, #0]
 8019656:	441a      	add	r2, r3
 8019658:	2307      	movs	r3, #7
 801965a:	009b      	lsls	r3, r3, #2
 801965c:	6879      	ldr	r1, [r7, #4]
 801965e:	440b      	add	r3, r1
 8019660:	681b      	ldr	r3, [r3, #0]
 8019662:	441a      	add	r2, r3
 8019664:	683b      	ldr	r3, [r7, #0]
 8019666:	601a      	str	r2, [r3, #0]
 8019668:	683b      	ldr	r3, [r7, #0]
 801966a:	3330      	adds	r3, #48	; 0x30
 801966c:	681a      	ldr	r2, [r3, #0]
 801966e:	683b      	ldr	r3, [r7, #0]
 8019670:	681b      	ldr	r3, [r3, #0]
 8019672:	405a      	eors	r2, r3
 8019674:	683b      	ldr	r3, [r7, #0]
 8019676:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801967a:	2110      	movs	r1, #16
 801967c:	4610      	mov	r0, r2
 801967e:	f7fe fbdf 	bl	8017e40 <rotr32>
 8019682:	4603      	mov	r3, r0
 8019684:	6023      	str	r3, [r4, #0]
 8019686:	683b      	ldr	r3, [r7, #0]
 8019688:	3320      	adds	r3, #32
 801968a:	6819      	ldr	r1, [r3, #0]
 801968c:	683b      	ldr	r3, [r7, #0]
 801968e:	3330      	adds	r3, #48	; 0x30
 8019690:	681a      	ldr	r2, [r3, #0]
 8019692:	683b      	ldr	r3, [r7, #0]
 8019694:	3320      	adds	r3, #32
 8019696:	440a      	add	r2, r1
 8019698:	601a      	str	r2, [r3, #0]
 801969a:	683b      	ldr	r3, [r7, #0]
 801969c:	3310      	adds	r3, #16
 801969e:	681a      	ldr	r2, [r3, #0]
 80196a0:	683b      	ldr	r3, [r7, #0]
 80196a2:	3320      	adds	r3, #32
 80196a4:	681b      	ldr	r3, [r3, #0]
 80196a6:	405a      	eors	r2, r3
 80196a8:	683b      	ldr	r3, [r7, #0]
 80196aa:	f103 0410 	add.w	r4, r3, #16
 80196ae:	210c      	movs	r1, #12
 80196b0:	4610      	mov	r0, r2
 80196b2:	f7fe fbc5 	bl	8017e40 <rotr32>
 80196b6:	4603      	mov	r3, r0
 80196b8:	6023      	str	r3, [r4, #0]
 80196ba:	683b      	ldr	r3, [r7, #0]
 80196bc:	681a      	ldr	r2, [r3, #0]
 80196be:	683b      	ldr	r3, [r7, #0]
 80196c0:	3310      	adds	r3, #16
 80196c2:	681b      	ldr	r3, [r3, #0]
 80196c4:	441a      	add	r2, r3
 80196c6:	2309      	movs	r3, #9
 80196c8:	009b      	lsls	r3, r3, #2
 80196ca:	6879      	ldr	r1, [r7, #4]
 80196cc:	440b      	add	r3, r1
 80196ce:	681b      	ldr	r3, [r3, #0]
 80196d0:	441a      	add	r2, r3
 80196d2:	683b      	ldr	r3, [r7, #0]
 80196d4:	601a      	str	r2, [r3, #0]
 80196d6:	683b      	ldr	r3, [r7, #0]
 80196d8:	3330      	adds	r3, #48	; 0x30
 80196da:	681a      	ldr	r2, [r3, #0]
 80196dc:	683b      	ldr	r3, [r7, #0]
 80196de:	681b      	ldr	r3, [r3, #0]
 80196e0:	405a      	eors	r2, r3
 80196e2:	683b      	ldr	r3, [r7, #0]
 80196e4:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80196e8:	2108      	movs	r1, #8
 80196ea:	4610      	mov	r0, r2
 80196ec:	f7fe fba8 	bl	8017e40 <rotr32>
 80196f0:	4603      	mov	r3, r0
 80196f2:	6023      	str	r3, [r4, #0]
 80196f4:	683b      	ldr	r3, [r7, #0]
 80196f6:	3320      	adds	r3, #32
 80196f8:	6819      	ldr	r1, [r3, #0]
 80196fa:	683b      	ldr	r3, [r7, #0]
 80196fc:	3330      	adds	r3, #48	; 0x30
 80196fe:	681a      	ldr	r2, [r3, #0]
 8019700:	683b      	ldr	r3, [r7, #0]
 8019702:	3320      	adds	r3, #32
 8019704:	440a      	add	r2, r1
 8019706:	601a      	str	r2, [r3, #0]
 8019708:	683b      	ldr	r3, [r7, #0]
 801970a:	3310      	adds	r3, #16
 801970c:	681a      	ldr	r2, [r3, #0]
 801970e:	683b      	ldr	r3, [r7, #0]
 8019710:	3320      	adds	r3, #32
 8019712:	681b      	ldr	r3, [r3, #0]
 8019714:	405a      	eors	r2, r3
 8019716:	683b      	ldr	r3, [r7, #0]
 8019718:	f103 0410 	add.w	r4, r3, #16
 801971c:	2107      	movs	r1, #7
 801971e:	4610      	mov	r0, r2
 8019720:	f7fe fb8e 	bl	8017e40 <rotr32>
 8019724:	4603      	mov	r3, r0
 8019726:	6023      	str	r3, [r4, #0]
 8019728:	683b      	ldr	r3, [r7, #0]
 801972a:	3304      	adds	r3, #4
 801972c:	681a      	ldr	r2, [r3, #0]
 801972e:	683b      	ldr	r3, [r7, #0]
 8019730:	3314      	adds	r3, #20
 8019732:	681b      	ldr	r3, [r3, #0]
 8019734:	18d1      	adds	r1, r2, r3
 8019736:	2303      	movs	r3, #3
 8019738:	009b      	lsls	r3, r3, #2
 801973a:	687a      	ldr	r2, [r7, #4]
 801973c:	4413      	add	r3, r2
 801973e:	681a      	ldr	r2, [r3, #0]
 8019740:	683b      	ldr	r3, [r7, #0]
 8019742:	3304      	adds	r3, #4
 8019744:	440a      	add	r2, r1
 8019746:	601a      	str	r2, [r3, #0]
 8019748:	683b      	ldr	r3, [r7, #0]
 801974a:	3334      	adds	r3, #52	; 0x34
 801974c:	681a      	ldr	r2, [r3, #0]
 801974e:	683b      	ldr	r3, [r7, #0]
 8019750:	3304      	adds	r3, #4
 8019752:	681b      	ldr	r3, [r3, #0]
 8019754:	405a      	eors	r2, r3
 8019756:	683b      	ldr	r3, [r7, #0]
 8019758:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801975c:	2110      	movs	r1, #16
 801975e:	4610      	mov	r0, r2
 8019760:	f7fe fb6e 	bl	8017e40 <rotr32>
 8019764:	4603      	mov	r3, r0
 8019766:	6023      	str	r3, [r4, #0]
 8019768:	683b      	ldr	r3, [r7, #0]
 801976a:	3324      	adds	r3, #36	; 0x24
 801976c:	6819      	ldr	r1, [r3, #0]
 801976e:	683b      	ldr	r3, [r7, #0]
 8019770:	3334      	adds	r3, #52	; 0x34
 8019772:	681a      	ldr	r2, [r3, #0]
 8019774:	683b      	ldr	r3, [r7, #0]
 8019776:	3324      	adds	r3, #36	; 0x24
 8019778:	440a      	add	r2, r1
 801977a:	601a      	str	r2, [r3, #0]
 801977c:	683b      	ldr	r3, [r7, #0]
 801977e:	3314      	adds	r3, #20
 8019780:	681a      	ldr	r2, [r3, #0]
 8019782:	683b      	ldr	r3, [r7, #0]
 8019784:	3324      	adds	r3, #36	; 0x24
 8019786:	681b      	ldr	r3, [r3, #0]
 8019788:	405a      	eors	r2, r3
 801978a:	683b      	ldr	r3, [r7, #0]
 801978c:	f103 0414 	add.w	r4, r3, #20
 8019790:	210c      	movs	r1, #12
 8019792:	4610      	mov	r0, r2
 8019794:	f7fe fb54 	bl	8017e40 <rotr32>
 8019798:	4603      	mov	r3, r0
 801979a:	6023      	str	r3, [r4, #0]
 801979c:	683b      	ldr	r3, [r7, #0]
 801979e:	3304      	adds	r3, #4
 80197a0:	681a      	ldr	r2, [r3, #0]
 80197a2:	683b      	ldr	r3, [r7, #0]
 80197a4:	3314      	adds	r3, #20
 80197a6:	681b      	ldr	r3, [r3, #0]
 80197a8:	18d1      	adds	r1, r2, r3
 80197aa:	2301      	movs	r3, #1
 80197ac:	009b      	lsls	r3, r3, #2
 80197ae:	687a      	ldr	r2, [r7, #4]
 80197b0:	4413      	add	r3, r2
 80197b2:	681a      	ldr	r2, [r3, #0]
 80197b4:	683b      	ldr	r3, [r7, #0]
 80197b6:	3304      	adds	r3, #4
 80197b8:	440a      	add	r2, r1
 80197ba:	601a      	str	r2, [r3, #0]
 80197bc:	683b      	ldr	r3, [r7, #0]
 80197be:	3334      	adds	r3, #52	; 0x34
 80197c0:	681a      	ldr	r2, [r3, #0]
 80197c2:	683b      	ldr	r3, [r7, #0]
 80197c4:	3304      	adds	r3, #4
 80197c6:	681b      	ldr	r3, [r3, #0]
 80197c8:	405a      	eors	r2, r3
 80197ca:	683b      	ldr	r3, [r7, #0]
 80197cc:	f103 0434 	add.w	r4, r3, #52	; 0x34
 80197d0:	2108      	movs	r1, #8
 80197d2:	4610      	mov	r0, r2
 80197d4:	f7fe fb34 	bl	8017e40 <rotr32>
 80197d8:	4603      	mov	r3, r0
 80197da:	6023      	str	r3, [r4, #0]
 80197dc:	683b      	ldr	r3, [r7, #0]
 80197de:	3324      	adds	r3, #36	; 0x24
 80197e0:	6819      	ldr	r1, [r3, #0]
 80197e2:	683b      	ldr	r3, [r7, #0]
 80197e4:	3334      	adds	r3, #52	; 0x34
 80197e6:	681a      	ldr	r2, [r3, #0]
 80197e8:	683b      	ldr	r3, [r7, #0]
 80197ea:	3324      	adds	r3, #36	; 0x24
 80197ec:	440a      	add	r2, r1
 80197ee:	601a      	str	r2, [r3, #0]
 80197f0:	683b      	ldr	r3, [r7, #0]
 80197f2:	3314      	adds	r3, #20
 80197f4:	681a      	ldr	r2, [r3, #0]
 80197f6:	683b      	ldr	r3, [r7, #0]
 80197f8:	3324      	adds	r3, #36	; 0x24
 80197fa:	681b      	ldr	r3, [r3, #0]
 80197fc:	405a      	eors	r2, r3
 80197fe:	683b      	ldr	r3, [r7, #0]
 8019800:	f103 0414 	add.w	r4, r3, #20
 8019804:	2107      	movs	r1, #7
 8019806:	4610      	mov	r0, r2
 8019808:	f7fe fb1a 	bl	8017e40 <rotr32>
 801980c:	4603      	mov	r3, r0
 801980e:	6023      	str	r3, [r4, #0]
 8019810:	683b      	ldr	r3, [r7, #0]
 8019812:	3308      	adds	r3, #8
 8019814:	681a      	ldr	r2, [r3, #0]
 8019816:	683b      	ldr	r3, [r7, #0]
 8019818:	3318      	adds	r3, #24
 801981a:	681b      	ldr	r3, [r3, #0]
 801981c:	18d1      	adds	r1, r2, r3
 801981e:	230d      	movs	r3, #13
 8019820:	009b      	lsls	r3, r3, #2
 8019822:	687a      	ldr	r2, [r7, #4]
 8019824:	4413      	add	r3, r2
 8019826:	681a      	ldr	r2, [r3, #0]
 8019828:	683b      	ldr	r3, [r7, #0]
 801982a:	3308      	adds	r3, #8
 801982c:	440a      	add	r2, r1
 801982e:	601a      	str	r2, [r3, #0]
 8019830:	683b      	ldr	r3, [r7, #0]
 8019832:	3338      	adds	r3, #56	; 0x38
 8019834:	681a      	ldr	r2, [r3, #0]
 8019836:	683b      	ldr	r3, [r7, #0]
 8019838:	3308      	adds	r3, #8
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	405a      	eors	r2, r3
 801983e:	683b      	ldr	r3, [r7, #0]
 8019840:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8019844:	2110      	movs	r1, #16
 8019846:	4610      	mov	r0, r2
 8019848:	f7fe fafa 	bl	8017e40 <rotr32>
 801984c:	4603      	mov	r3, r0
 801984e:	6023      	str	r3, [r4, #0]
 8019850:	683b      	ldr	r3, [r7, #0]
 8019852:	3328      	adds	r3, #40	; 0x28
 8019854:	6819      	ldr	r1, [r3, #0]
 8019856:	683b      	ldr	r3, [r7, #0]
 8019858:	3338      	adds	r3, #56	; 0x38
 801985a:	681a      	ldr	r2, [r3, #0]
 801985c:	683b      	ldr	r3, [r7, #0]
 801985e:	3328      	adds	r3, #40	; 0x28
 8019860:	440a      	add	r2, r1
 8019862:	601a      	str	r2, [r3, #0]
 8019864:	683b      	ldr	r3, [r7, #0]
 8019866:	3318      	adds	r3, #24
 8019868:	681a      	ldr	r2, [r3, #0]
 801986a:	683b      	ldr	r3, [r7, #0]
 801986c:	3328      	adds	r3, #40	; 0x28
 801986e:	681b      	ldr	r3, [r3, #0]
 8019870:	405a      	eors	r2, r3
 8019872:	683b      	ldr	r3, [r7, #0]
 8019874:	f103 0418 	add.w	r4, r3, #24
 8019878:	210c      	movs	r1, #12
 801987a:	4610      	mov	r0, r2
 801987c:	f7fe fae0 	bl	8017e40 <rotr32>
 8019880:	4603      	mov	r3, r0
 8019882:	6023      	str	r3, [r4, #0]
 8019884:	683b      	ldr	r3, [r7, #0]
 8019886:	3308      	adds	r3, #8
 8019888:	681a      	ldr	r2, [r3, #0]
 801988a:	683b      	ldr	r3, [r7, #0]
 801988c:	3318      	adds	r3, #24
 801988e:	681b      	ldr	r3, [r3, #0]
 8019890:	18d1      	adds	r1, r2, r3
 8019892:	230c      	movs	r3, #12
 8019894:	009b      	lsls	r3, r3, #2
 8019896:	687a      	ldr	r2, [r7, #4]
 8019898:	4413      	add	r3, r2
 801989a:	681a      	ldr	r2, [r3, #0]
 801989c:	683b      	ldr	r3, [r7, #0]
 801989e:	3308      	adds	r3, #8
 80198a0:	440a      	add	r2, r1
 80198a2:	601a      	str	r2, [r3, #0]
 80198a4:	683b      	ldr	r3, [r7, #0]
 80198a6:	3338      	adds	r3, #56	; 0x38
 80198a8:	681a      	ldr	r2, [r3, #0]
 80198aa:	683b      	ldr	r3, [r7, #0]
 80198ac:	3308      	adds	r3, #8
 80198ae:	681b      	ldr	r3, [r3, #0]
 80198b0:	405a      	eors	r2, r3
 80198b2:	683b      	ldr	r3, [r7, #0]
 80198b4:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80198b8:	2108      	movs	r1, #8
 80198ba:	4610      	mov	r0, r2
 80198bc:	f7fe fac0 	bl	8017e40 <rotr32>
 80198c0:	4603      	mov	r3, r0
 80198c2:	6023      	str	r3, [r4, #0]
 80198c4:	683b      	ldr	r3, [r7, #0]
 80198c6:	3328      	adds	r3, #40	; 0x28
 80198c8:	6819      	ldr	r1, [r3, #0]
 80198ca:	683b      	ldr	r3, [r7, #0]
 80198cc:	3338      	adds	r3, #56	; 0x38
 80198ce:	681a      	ldr	r2, [r3, #0]
 80198d0:	683b      	ldr	r3, [r7, #0]
 80198d2:	3328      	adds	r3, #40	; 0x28
 80198d4:	440a      	add	r2, r1
 80198d6:	601a      	str	r2, [r3, #0]
 80198d8:	683b      	ldr	r3, [r7, #0]
 80198da:	3318      	adds	r3, #24
 80198dc:	681a      	ldr	r2, [r3, #0]
 80198de:	683b      	ldr	r3, [r7, #0]
 80198e0:	3328      	adds	r3, #40	; 0x28
 80198e2:	681b      	ldr	r3, [r3, #0]
 80198e4:	405a      	eors	r2, r3
 80198e6:	683b      	ldr	r3, [r7, #0]
 80198e8:	f103 0418 	add.w	r4, r3, #24
 80198ec:	2107      	movs	r1, #7
 80198ee:	4610      	mov	r0, r2
 80198f0:	f7fe faa6 	bl	8017e40 <rotr32>
 80198f4:	4603      	mov	r3, r0
 80198f6:	6023      	str	r3, [r4, #0]
 80198f8:	683b      	ldr	r3, [r7, #0]
 80198fa:	330c      	adds	r3, #12
 80198fc:	681a      	ldr	r2, [r3, #0]
 80198fe:	683b      	ldr	r3, [r7, #0]
 8019900:	331c      	adds	r3, #28
 8019902:	681b      	ldr	r3, [r3, #0]
 8019904:	18d1      	adds	r1, r2, r3
 8019906:	230b      	movs	r3, #11
 8019908:	009b      	lsls	r3, r3, #2
 801990a:	687a      	ldr	r2, [r7, #4]
 801990c:	4413      	add	r3, r2
 801990e:	681a      	ldr	r2, [r3, #0]
 8019910:	683b      	ldr	r3, [r7, #0]
 8019912:	330c      	adds	r3, #12
 8019914:	440a      	add	r2, r1
 8019916:	601a      	str	r2, [r3, #0]
 8019918:	683b      	ldr	r3, [r7, #0]
 801991a:	333c      	adds	r3, #60	; 0x3c
 801991c:	681a      	ldr	r2, [r3, #0]
 801991e:	683b      	ldr	r3, [r7, #0]
 8019920:	330c      	adds	r3, #12
 8019922:	681b      	ldr	r3, [r3, #0]
 8019924:	405a      	eors	r2, r3
 8019926:	683b      	ldr	r3, [r7, #0]
 8019928:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 801992c:	2110      	movs	r1, #16
 801992e:	4610      	mov	r0, r2
 8019930:	f7fe fa86 	bl	8017e40 <rotr32>
 8019934:	4603      	mov	r3, r0
 8019936:	6023      	str	r3, [r4, #0]
 8019938:	683b      	ldr	r3, [r7, #0]
 801993a:	332c      	adds	r3, #44	; 0x2c
 801993c:	6819      	ldr	r1, [r3, #0]
 801993e:	683b      	ldr	r3, [r7, #0]
 8019940:	333c      	adds	r3, #60	; 0x3c
 8019942:	681a      	ldr	r2, [r3, #0]
 8019944:	683b      	ldr	r3, [r7, #0]
 8019946:	332c      	adds	r3, #44	; 0x2c
 8019948:	440a      	add	r2, r1
 801994a:	601a      	str	r2, [r3, #0]
 801994c:	683b      	ldr	r3, [r7, #0]
 801994e:	331c      	adds	r3, #28
 8019950:	681a      	ldr	r2, [r3, #0]
 8019952:	683b      	ldr	r3, [r7, #0]
 8019954:	332c      	adds	r3, #44	; 0x2c
 8019956:	681b      	ldr	r3, [r3, #0]
 8019958:	405a      	eors	r2, r3
 801995a:	683b      	ldr	r3, [r7, #0]
 801995c:	f103 041c 	add.w	r4, r3, #28
 8019960:	210c      	movs	r1, #12
 8019962:	4610      	mov	r0, r2
 8019964:	f7fe fa6c 	bl	8017e40 <rotr32>
 8019968:	4603      	mov	r3, r0
 801996a:	6023      	str	r3, [r4, #0]
 801996c:	683b      	ldr	r3, [r7, #0]
 801996e:	330c      	adds	r3, #12
 8019970:	681a      	ldr	r2, [r3, #0]
 8019972:	683b      	ldr	r3, [r7, #0]
 8019974:	331c      	adds	r3, #28
 8019976:	681b      	ldr	r3, [r3, #0]
 8019978:	18d1      	adds	r1, r2, r3
 801997a:	230e      	movs	r3, #14
 801997c:	009b      	lsls	r3, r3, #2
 801997e:	687a      	ldr	r2, [r7, #4]
 8019980:	4413      	add	r3, r2
 8019982:	681a      	ldr	r2, [r3, #0]
 8019984:	683b      	ldr	r3, [r7, #0]
 8019986:	330c      	adds	r3, #12
 8019988:	440a      	add	r2, r1
 801998a:	601a      	str	r2, [r3, #0]
 801998c:	683b      	ldr	r3, [r7, #0]
 801998e:	333c      	adds	r3, #60	; 0x3c
 8019990:	681a      	ldr	r2, [r3, #0]
 8019992:	683b      	ldr	r3, [r7, #0]
 8019994:	330c      	adds	r3, #12
 8019996:	681b      	ldr	r3, [r3, #0]
 8019998:	405a      	eors	r2, r3
 801999a:	683b      	ldr	r3, [r7, #0]
 801999c:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 80199a0:	2108      	movs	r1, #8
 80199a2:	4610      	mov	r0, r2
 80199a4:	f7fe fa4c 	bl	8017e40 <rotr32>
 80199a8:	4603      	mov	r3, r0
 80199aa:	6023      	str	r3, [r4, #0]
 80199ac:	683b      	ldr	r3, [r7, #0]
 80199ae:	332c      	adds	r3, #44	; 0x2c
 80199b0:	6819      	ldr	r1, [r3, #0]
 80199b2:	683b      	ldr	r3, [r7, #0]
 80199b4:	333c      	adds	r3, #60	; 0x3c
 80199b6:	681a      	ldr	r2, [r3, #0]
 80199b8:	683b      	ldr	r3, [r7, #0]
 80199ba:	332c      	adds	r3, #44	; 0x2c
 80199bc:	440a      	add	r2, r1
 80199be:	601a      	str	r2, [r3, #0]
 80199c0:	683b      	ldr	r3, [r7, #0]
 80199c2:	331c      	adds	r3, #28
 80199c4:	681a      	ldr	r2, [r3, #0]
 80199c6:	683b      	ldr	r3, [r7, #0]
 80199c8:	332c      	adds	r3, #44	; 0x2c
 80199ca:	681b      	ldr	r3, [r3, #0]
 80199cc:	405a      	eors	r2, r3
 80199ce:	683b      	ldr	r3, [r7, #0]
 80199d0:	f103 041c 	add.w	r4, r3, #28
 80199d4:	2107      	movs	r1, #7
 80199d6:	4610      	mov	r0, r2
 80199d8:	f7fe fa32 	bl	8017e40 <rotr32>
 80199dc:	4603      	mov	r3, r0
 80199de:	6023      	str	r3, [r4, #0]
 80199e0:	683b      	ldr	r3, [r7, #0]
 80199e2:	681a      	ldr	r2, [r3, #0]
 80199e4:	683b      	ldr	r3, [r7, #0]
 80199e6:	3314      	adds	r3, #20
 80199e8:	681b      	ldr	r3, [r3, #0]
 80199ea:	441a      	add	r2, r3
 80199ec:	2302      	movs	r3, #2
 80199ee:	009b      	lsls	r3, r3, #2
 80199f0:	6879      	ldr	r1, [r7, #4]
 80199f2:	440b      	add	r3, r1
 80199f4:	681b      	ldr	r3, [r3, #0]
 80199f6:	441a      	add	r2, r3
 80199f8:	683b      	ldr	r3, [r7, #0]
 80199fa:	601a      	str	r2, [r3, #0]
 80199fc:	683b      	ldr	r3, [r7, #0]
 80199fe:	333c      	adds	r3, #60	; 0x3c
 8019a00:	681a      	ldr	r2, [r3, #0]
 8019a02:	683b      	ldr	r3, [r7, #0]
 8019a04:	681b      	ldr	r3, [r3, #0]
 8019a06:	405a      	eors	r2, r3
 8019a08:	683b      	ldr	r3, [r7, #0]
 8019a0a:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8019a0e:	2110      	movs	r1, #16
 8019a10:	4610      	mov	r0, r2
 8019a12:	f7fe fa15 	bl	8017e40 <rotr32>
 8019a16:	4603      	mov	r3, r0
 8019a18:	6023      	str	r3, [r4, #0]
 8019a1a:	683b      	ldr	r3, [r7, #0]
 8019a1c:	3328      	adds	r3, #40	; 0x28
 8019a1e:	6819      	ldr	r1, [r3, #0]
 8019a20:	683b      	ldr	r3, [r7, #0]
 8019a22:	333c      	adds	r3, #60	; 0x3c
 8019a24:	681a      	ldr	r2, [r3, #0]
 8019a26:	683b      	ldr	r3, [r7, #0]
 8019a28:	3328      	adds	r3, #40	; 0x28
 8019a2a:	440a      	add	r2, r1
 8019a2c:	601a      	str	r2, [r3, #0]
 8019a2e:	683b      	ldr	r3, [r7, #0]
 8019a30:	3314      	adds	r3, #20
 8019a32:	681a      	ldr	r2, [r3, #0]
 8019a34:	683b      	ldr	r3, [r7, #0]
 8019a36:	3328      	adds	r3, #40	; 0x28
 8019a38:	681b      	ldr	r3, [r3, #0]
 8019a3a:	405a      	eors	r2, r3
 8019a3c:	683b      	ldr	r3, [r7, #0]
 8019a3e:	f103 0414 	add.w	r4, r3, #20
 8019a42:	210c      	movs	r1, #12
 8019a44:	4610      	mov	r0, r2
 8019a46:	f7fe f9fb 	bl	8017e40 <rotr32>
 8019a4a:	4603      	mov	r3, r0
 8019a4c:	6023      	str	r3, [r4, #0]
 8019a4e:	683b      	ldr	r3, [r7, #0]
 8019a50:	681a      	ldr	r2, [r3, #0]
 8019a52:	683b      	ldr	r3, [r7, #0]
 8019a54:	3314      	adds	r3, #20
 8019a56:	681b      	ldr	r3, [r3, #0]
 8019a58:	441a      	add	r2, r3
 8019a5a:	2306      	movs	r3, #6
 8019a5c:	009b      	lsls	r3, r3, #2
 8019a5e:	6879      	ldr	r1, [r7, #4]
 8019a60:	440b      	add	r3, r1
 8019a62:	681b      	ldr	r3, [r3, #0]
 8019a64:	441a      	add	r2, r3
 8019a66:	683b      	ldr	r3, [r7, #0]
 8019a68:	601a      	str	r2, [r3, #0]
 8019a6a:	683b      	ldr	r3, [r7, #0]
 8019a6c:	333c      	adds	r3, #60	; 0x3c
 8019a6e:	681a      	ldr	r2, [r3, #0]
 8019a70:	683b      	ldr	r3, [r7, #0]
 8019a72:	681b      	ldr	r3, [r3, #0]
 8019a74:	405a      	eors	r2, r3
 8019a76:	683b      	ldr	r3, [r7, #0]
 8019a78:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8019a7c:	2108      	movs	r1, #8
 8019a7e:	4610      	mov	r0, r2
 8019a80:	f7fe f9de 	bl	8017e40 <rotr32>
 8019a84:	4603      	mov	r3, r0
 8019a86:	6023      	str	r3, [r4, #0]
 8019a88:	683b      	ldr	r3, [r7, #0]
 8019a8a:	3328      	adds	r3, #40	; 0x28
 8019a8c:	6819      	ldr	r1, [r3, #0]
 8019a8e:	683b      	ldr	r3, [r7, #0]
 8019a90:	333c      	adds	r3, #60	; 0x3c
 8019a92:	681a      	ldr	r2, [r3, #0]
 8019a94:	683b      	ldr	r3, [r7, #0]
 8019a96:	3328      	adds	r3, #40	; 0x28
 8019a98:	440a      	add	r2, r1
 8019a9a:	601a      	str	r2, [r3, #0]
 8019a9c:	683b      	ldr	r3, [r7, #0]
 8019a9e:	3314      	adds	r3, #20
 8019aa0:	681a      	ldr	r2, [r3, #0]
 8019aa2:	683b      	ldr	r3, [r7, #0]
 8019aa4:	3328      	adds	r3, #40	; 0x28
 8019aa6:	681b      	ldr	r3, [r3, #0]
 8019aa8:	405a      	eors	r2, r3
 8019aaa:	683b      	ldr	r3, [r7, #0]
 8019aac:	f103 0414 	add.w	r4, r3, #20
 8019ab0:	2107      	movs	r1, #7
 8019ab2:	4610      	mov	r0, r2
 8019ab4:	f7fe f9c4 	bl	8017e40 <rotr32>
 8019ab8:	4603      	mov	r3, r0
 8019aba:	6023      	str	r3, [r4, #0]
 8019abc:	683b      	ldr	r3, [r7, #0]
 8019abe:	3304      	adds	r3, #4
 8019ac0:	681a      	ldr	r2, [r3, #0]
 8019ac2:	683b      	ldr	r3, [r7, #0]
 8019ac4:	3318      	adds	r3, #24
 8019ac6:	681b      	ldr	r3, [r3, #0]
 8019ac8:	18d1      	adds	r1, r2, r3
 8019aca:	2305      	movs	r3, #5
 8019acc:	009b      	lsls	r3, r3, #2
 8019ace:	687a      	ldr	r2, [r7, #4]
 8019ad0:	4413      	add	r3, r2
 8019ad2:	681a      	ldr	r2, [r3, #0]
 8019ad4:	683b      	ldr	r3, [r7, #0]
 8019ad6:	3304      	adds	r3, #4
 8019ad8:	440a      	add	r2, r1
 8019ada:	601a      	str	r2, [r3, #0]
 8019adc:	683b      	ldr	r3, [r7, #0]
 8019ade:	3330      	adds	r3, #48	; 0x30
 8019ae0:	681a      	ldr	r2, [r3, #0]
 8019ae2:	683b      	ldr	r3, [r7, #0]
 8019ae4:	3304      	adds	r3, #4
 8019ae6:	681b      	ldr	r3, [r3, #0]
 8019ae8:	405a      	eors	r2, r3
 8019aea:	683b      	ldr	r3, [r7, #0]
 8019aec:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8019af0:	2110      	movs	r1, #16
 8019af2:	4610      	mov	r0, r2
 8019af4:	f7fe f9a4 	bl	8017e40 <rotr32>
 8019af8:	4603      	mov	r3, r0
 8019afa:	6023      	str	r3, [r4, #0]
 8019afc:	683b      	ldr	r3, [r7, #0]
 8019afe:	332c      	adds	r3, #44	; 0x2c
 8019b00:	6819      	ldr	r1, [r3, #0]
 8019b02:	683b      	ldr	r3, [r7, #0]
 8019b04:	3330      	adds	r3, #48	; 0x30
 8019b06:	681a      	ldr	r2, [r3, #0]
 8019b08:	683b      	ldr	r3, [r7, #0]
 8019b0a:	332c      	adds	r3, #44	; 0x2c
 8019b0c:	440a      	add	r2, r1
 8019b0e:	601a      	str	r2, [r3, #0]
 8019b10:	683b      	ldr	r3, [r7, #0]
 8019b12:	3318      	adds	r3, #24
 8019b14:	681a      	ldr	r2, [r3, #0]
 8019b16:	683b      	ldr	r3, [r7, #0]
 8019b18:	332c      	adds	r3, #44	; 0x2c
 8019b1a:	681b      	ldr	r3, [r3, #0]
 8019b1c:	405a      	eors	r2, r3
 8019b1e:	683b      	ldr	r3, [r7, #0]
 8019b20:	f103 0418 	add.w	r4, r3, #24
 8019b24:	210c      	movs	r1, #12
 8019b26:	4610      	mov	r0, r2
 8019b28:	f7fe f98a 	bl	8017e40 <rotr32>
 8019b2c:	4603      	mov	r3, r0
 8019b2e:	6023      	str	r3, [r4, #0]
 8019b30:	683b      	ldr	r3, [r7, #0]
 8019b32:	3304      	adds	r3, #4
 8019b34:	681a      	ldr	r2, [r3, #0]
 8019b36:	683b      	ldr	r3, [r7, #0]
 8019b38:	3318      	adds	r3, #24
 8019b3a:	681b      	ldr	r3, [r3, #0]
 8019b3c:	18d1      	adds	r1, r2, r3
 8019b3e:	230a      	movs	r3, #10
 8019b40:	009b      	lsls	r3, r3, #2
 8019b42:	687a      	ldr	r2, [r7, #4]
 8019b44:	4413      	add	r3, r2
 8019b46:	681a      	ldr	r2, [r3, #0]
 8019b48:	683b      	ldr	r3, [r7, #0]
 8019b4a:	3304      	adds	r3, #4
 8019b4c:	440a      	add	r2, r1
 8019b4e:	601a      	str	r2, [r3, #0]
 8019b50:	683b      	ldr	r3, [r7, #0]
 8019b52:	3330      	adds	r3, #48	; 0x30
 8019b54:	681a      	ldr	r2, [r3, #0]
 8019b56:	683b      	ldr	r3, [r7, #0]
 8019b58:	3304      	adds	r3, #4
 8019b5a:	681b      	ldr	r3, [r3, #0]
 8019b5c:	405a      	eors	r2, r3
 8019b5e:	683b      	ldr	r3, [r7, #0]
 8019b60:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8019b64:	2108      	movs	r1, #8
 8019b66:	4610      	mov	r0, r2
 8019b68:	f7fe f96a 	bl	8017e40 <rotr32>
 8019b6c:	4603      	mov	r3, r0
 8019b6e:	6023      	str	r3, [r4, #0]
 8019b70:	683b      	ldr	r3, [r7, #0]
 8019b72:	332c      	adds	r3, #44	; 0x2c
 8019b74:	6819      	ldr	r1, [r3, #0]
 8019b76:	683b      	ldr	r3, [r7, #0]
 8019b78:	3330      	adds	r3, #48	; 0x30
 8019b7a:	681a      	ldr	r2, [r3, #0]
 8019b7c:	683b      	ldr	r3, [r7, #0]
 8019b7e:	332c      	adds	r3, #44	; 0x2c
 8019b80:	440a      	add	r2, r1
 8019b82:	601a      	str	r2, [r3, #0]
 8019b84:	683b      	ldr	r3, [r7, #0]
 8019b86:	3318      	adds	r3, #24
 8019b88:	681a      	ldr	r2, [r3, #0]
 8019b8a:	683b      	ldr	r3, [r7, #0]
 8019b8c:	332c      	adds	r3, #44	; 0x2c
 8019b8e:	681b      	ldr	r3, [r3, #0]
 8019b90:	405a      	eors	r2, r3
 8019b92:	683b      	ldr	r3, [r7, #0]
 8019b94:	f103 0418 	add.w	r4, r3, #24
 8019b98:	2107      	movs	r1, #7
 8019b9a:	4610      	mov	r0, r2
 8019b9c:	f7fe f950 	bl	8017e40 <rotr32>
 8019ba0:	4603      	mov	r3, r0
 8019ba2:	6023      	str	r3, [r4, #0]
 8019ba4:	683b      	ldr	r3, [r7, #0]
 8019ba6:	3308      	adds	r3, #8
 8019ba8:	681a      	ldr	r2, [r3, #0]
 8019baa:	683b      	ldr	r3, [r7, #0]
 8019bac:	331c      	adds	r3, #28
 8019bae:	681b      	ldr	r3, [r3, #0]
 8019bb0:	18d1      	adds	r1, r2, r3
 8019bb2:	2304      	movs	r3, #4
 8019bb4:	009b      	lsls	r3, r3, #2
 8019bb6:	687a      	ldr	r2, [r7, #4]
 8019bb8:	4413      	add	r3, r2
 8019bba:	681a      	ldr	r2, [r3, #0]
 8019bbc:	683b      	ldr	r3, [r7, #0]
 8019bbe:	3308      	adds	r3, #8
 8019bc0:	440a      	add	r2, r1
 8019bc2:	601a      	str	r2, [r3, #0]
 8019bc4:	683b      	ldr	r3, [r7, #0]
 8019bc6:	3334      	adds	r3, #52	; 0x34
 8019bc8:	681a      	ldr	r2, [r3, #0]
 8019bca:	683b      	ldr	r3, [r7, #0]
 8019bcc:	3308      	adds	r3, #8
 8019bce:	681b      	ldr	r3, [r3, #0]
 8019bd0:	405a      	eors	r2, r3
 8019bd2:	683b      	ldr	r3, [r7, #0]
 8019bd4:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8019bd8:	2110      	movs	r1, #16
 8019bda:	4610      	mov	r0, r2
 8019bdc:	f7fe f930 	bl	8017e40 <rotr32>
 8019be0:	4603      	mov	r3, r0
 8019be2:	6023      	str	r3, [r4, #0]
 8019be4:	683b      	ldr	r3, [r7, #0]
 8019be6:	3320      	adds	r3, #32
 8019be8:	6819      	ldr	r1, [r3, #0]
 8019bea:	683b      	ldr	r3, [r7, #0]
 8019bec:	3334      	adds	r3, #52	; 0x34
 8019bee:	681a      	ldr	r2, [r3, #0]
 8019bf0:	683b      	ldr	r3, [r7, #0]
 8019bf2:	3320      	adds	r3, #32
 8019bf4:	440a      	add	r2, r1
 8019bf6:	601a      	str	r2, [r3, #0]
 8019bf8:	683b      	ldr	r3, [r7, #0]
 8019bfa:	331c      	adds	r3, #28
 8019bfc:	681a      	ldr	r2, [r3, #0]
 8019bfe:	683b      	ldr	r3, [r7, #0]
 8019c00:	3320      	adds	r3, #32
 8019c02:	681b      	ldr	r3, [r3, #0]
 8019c04:	405a      	eors	r2, r3
 8019c06:	683b      	ldr	r3, [r7, #0]
 8019c08:	f103 041c 	add.w	r4, r3, #28
 8019c0c:	210c      	movs	r1, #12
 8019c0e:	4610      	mov	r0, r2
 8019c10:	f7fe f916 	bl	8017e40 <rotr32>
 8019c14:	4603      	mov	r3, r0
 8019c16:	6023      	str	r3, [r4, #0]
 8019c18:	683b      	ldr	r3, [r7, #0]
 8019c1a:	3308      	adds	r3, #8
 8019c1c:	681a      	ldr	r2, [r3, #0]
 8019c1e:	683b      	ldr	r3, [r7, #0]
 8019c20:	331c      	adds	r3, #28
 8019c22:	681b      	ldr	r3, [r3, #0]
 8019c24:	18d1      	adds	r1, r2, r3
 8019c26:	2300      	movs	r3, #0
 8019c28:	009b      	lsls	r3, r3, #2
 8019c2a:	687a      	ldr	r2, [r7, #4]
 8019c2c:	4413      	add	r3, r2
 8019c2e:	681a      	ldr	r2, [r3, #0]
 8019c30:	683b      	ldr	r3, [r7, #0]
 8019c32:	3308      	adds	r3, #8
 8019c34:	440a      	add	r2, r1
 8019c36:	601a      	str	r2, [r3, #0]
 8019c38:	683b      	ldr	r3, [r7, #0]
 8019c3a:	3334      	adds	r3, #52	; 0x34
 8019c3c:	681a      	ldr	r2, [r3, #0]
 8019c3e:	683b      	ldr	r3, [r7, #0]
 8019c40:	3308      	adds	r3, #8
 8019c42:	681b      	ldr	r3, [r3, #0]
 8019c44:	405a      	eors	r2, r3
 8019c46:	683b      	ldr	r3, [r7, #0]
 8019c48:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8019c4c:	2108      	movs	r1, #8
 8019c4e:	4610      	mov	r0, r2
 8019c50:	f7fe f8f6 	bl	8017e40 <rotr32>
 8019c54:	4603      	mov	r3, r0
 8019c56:	6023      	str	r3, [r4, #0]
 8019c58:	683b      	ldr	r3, [r7, #0]
 8019c5a:	3320      	adds	r3, #32
 8019c5c:	6819      	ldr	r1, [r3, #0]
 8019c5e:	683b      	ldr	r3, [r7, #0]
 8019c60:	3334      	adds	r3, #52	; 0x34
 8019c62:	681a      	ldr	r2, [r3, #0]
 8019c64:	683b      	ldr	r3, [r7, #0]
 8019c66:	3320      	adds	r3, #32
 8019c68:	440a      	add	r2, r1
 8019c6a:	601a      	str	r2, [r3, #0]
 8019c6c:	683b      	ldr	r3, [r7, #0]
 8019c6e:	331c      	adds	r3, #28
 8019c70:	681a      	ldr	r2, [r3, #0]
 8019c72:	683b      	ldr	r3, [r7, #0]
 8019c74:	3320      	adds	r3, #32
 8019c76:	681b      	ldr	r3, [r3, #0]
 8019c78:	405a      	eors	r2, r3
 8019c7a:	683b      	ldr	r3, [r7, #0]
 8019c7c:	f103 041c 	add.w	r4, r3, #28
 8019c80:	2107      	movs	r1, #7
 8019c82:	4610      	mov	r0, r2
 8019c84:	f7fe f8dc 	bl	8017e40 <rotr32>
 8019c88:	4603      	mov	r3, r0
 8019c8a:	6023      	str	r3, [r4, #0]
 8019c8c:	683b      	ldr	r3, [r7, #0]
 8019c8e:	330c      	adds	r3, #12
 8019c90:	681a      	ldr	r2, [r3, #0]
 8019c92:	683b      	ldr	r3, [r7, #0]
 8019c94:	3310      	adds	r3, #16
 8019c96:	681b      	ldr	r3, [r3, #0]
 8019c98:	18d1      	adds	r1, r2, r3
 8019c9a:	230f      	movs	r3, #15
 8019c9c:	009b      	lsls	r3, r3, #2
 8019c9e:	687a      	ldr	r2, [r7, #4]
 8019ca0:	4413      	add	r3, r2
 8019ca2:	681a      	ldr	r2, [r3, #0]
 8019ca4:	683b      	ldr	r3, [r7, #0]
 8019ca6:	330c      	adds	r3, #12
 8019ca8:	440a      	add	r2, r1
 8019caa:	601a      	str	r2, [r3, #0]
 8019cac:	683b      	ldr	r3, [r7, #0]
 8019cae:	3338      	adds	r3, #56	; 0x38
 8019cb0:	681a      	ldr	r2, [r3, #0]
 8019cb2:	683b      	ldr	r3, [r7, #0]
 8019cb4:	330c      	adds	r3, #12
 8019cb6:	681b      	ldr	r3, [r3, #0]
 8019cb8:	405a      	eors	r2, r3
 8019cba:	683b      	ldr	r3, [r7, #0]
 8019cbc:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8019cc0:	2110      	movs	r1, #16
 8019cc2:	4610      	mov	r0, r2
 8019cc4:	f7fe f8bc 	bl	8017e40 <rotr32>
 8019cc8:	4603      	mov	r3, r0
 8019cca:	6023      	str	r3, [r4, #0]
 8019ccc:	683b      	ldr	r3, [r7, #0]
 8019cce:	3324      	adds	r3, #36	; 0x24
 8019cd0:	6819      	ldr	r1, [r3, #0]
 8019cd2:	683b      	ldr	r3, [r7, #0]
 8019cd4:	3338      	adds	r3, #56	; 0x38
 8019cd6:	681a      	ldr	r2, [r3, #0]
 8019cd8:	683b      	ldr	r3, [r7, #0]
 8019cda:	3324      	adds	r3, #36	; 0x24
 8019cdc:	440a      	add	r2, r1
 8019cde:	601a      	str	r2, [r3, #0]
 8019ce0:	683b      	ldr	r3, [r7, #0]
 8019ce2:	3310      	adds	r3, #16
 8019ce4:	681a      	ldr	r2, [r3, #0]
 8019ce6:	683b      	ldr	r3, [r7, #0]
 8019ce8:	3324      	adds	r3, #36	; 0x24
 8019cea:	681b      	ldr	r3, [r3, #0]
 8019cec:	405a      	eors	r2, r3
 8019cee:	683b      	ldr	r3, [r7, #0]
 8019cf0:	f103 0410 	add.w	r4, r3, #16
 8019cf4:	210c      	movs	r1, #12
 8019cf6:	4610      	mov	r0, r2
 8019cf8:	f7fe f8a2 	bl	8017e40 <rotr32>
 8019cfc:	4603      	mov	r3, r0
 8019cfe:	6023      	str	r3, [r4, #0]
 8019d00:	683b      	ldr	r3, [r7, #0]
 8019d02:	330c      	adds	r3, #12
 8019d04:	681a      	ldr	r2, [r3, #0]
 8019d06:	683b      	ldr	r3, [r7, #0]
 8019d08:	3310      	adds	r3, #16
 8019d0a:	681b      	ldr	r3, [r3, #0]
 8019d0c:	18d1      	adds	r1, r2, r3
 8019d0e:	2308      	movs	r3, #8
 8019d10:	009b      	lsls	r3, r3, #2
 8019d12:	687a      	ldr	r2, [r7, #4]
 8019d14:	4413      	add	r3, r2
 8019d16:	681a      	ldr	r2, [r3, #0]
 8019d18:	683b      	ldr	r3, [r7, #0]
 8019d1a:	330c      	adds	r3, #12
 8019d1c:	440a      	add	r2, r1
 8019d1e:	601a      	str	r2, [r3, #0]
 8019d20:	683b      	ldr	r3, [r7, #0]
 8019d22:	3338      	adds	r3, #56	; 0x38
 8019d24:	681a      	ldr	r2, [r3, #0]
 8019d26:	683b      	ldr	r3, [r7, #0]
 8019d28:	330c      	adds	r3, #12
 8019d2a:	681b      	ldr	r3, [r3, #0]
 8019d2c:	405a      	eors	r2, r3
 8019d2e:	683b      	ldr	r3, [r7, #0]
 8019d30:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8019d34:	2108      	movs	r1, #8
 8019d36:	4610      	mov	r0, r2
 8019d38:	f7fe f882 	bl	8017e40 <rotr32>
 8019d3c:	4603      	mov	r3, r0
 8019d3e:	6023      	str	r3, [r4, #0]
 8019d40:	683b      	ldr	r3, [r7, #0]
 8019d42:	3324      	adds	r3, #36	; 0x24
 8019d44:	6819      	ldr	r1, [r3, #0]
 8019d46:	683b      	ldr	r3, [r7, #0]
 8019d48:	3338      	adds	r3, #56	; 0x38
 8019d4a:	681a      	ldr	r2, [r3, #0]
 8019d4c:	683b      	ldr	r3, [r7, #0]
 8019d4e:	3324      	adds	r3, #36	; 0x24
 8019d50:	440a      	add	r2, r1
 8019d52:	601a      	str	r2, [r3, #0]
 8019d54:	683b      	ldr	r3, [r7, #0]
 8019d56:	3310      	adds	r3, #16
 8019d58:	681a      	ldr	r2, [r3, #0]
 8019d5a:	683b      	ldr	r3, [r7, #0]
 8019d5c:	3324      	adds	r3, #36	; 0x24
 8019d5e:	681b      	ldr	r3, [r3, #0]
 8019d60:	405a      	eors	r2, r3
 8019d62:	683b      	ldr	r3, [r7, #0]
 8019d64:	f103 0410 	add.w	r4, r3, #16
 8019d68:	2107      	movs	r1, #7
 8019d6a:	4610      	mov	r0, r2
 8019d6c:	f7fe f868 	bl	8017e40 <rotr32>
 8019d70:	4603      	mov	r3, r0
 8019d72:	6023      	str	r3, [r4, #0]
  ROUND( 4 );
 8019d74:	683b      	ldr	r3, [r7, #0]
 8019d76:	681a      	ldr	r2, [r3, #0]
 8019d78:	683b      	ldr	r3, [r7, #0]
 8019d7a:	3310      	adds	r3, #16
 8019d7c:	681b      	ldr	r3, [r3, #0]
 8019d7e:	441a      	add	r2, r3
 8019d80:	2309      	movs	r3, #9
 8019d82:	009b      	lsls	r3, r3, #2
 8019d84:	6879      	ldr	r1, [r7, #4]
 8019d86:	440b      	add	r3, r1
 8019d88:	681b      	ldr	r3, [r3, #0]
 8019d8a:	441a      	add	r2, r3
 8019d8c:	683b      	ldr	r3, [r7, #0]
 8019d8e:	601a      	str	r2, [r3, #0]
 8019d90:	683b      	ldr	r3, [r7, #0]
 8019d92:	3330      	adds	r3, #48	; 0x30
 8019d94:	681a      	ldr	r2, [r3, #0]
 8019d96:	683b      	ldr	r3, [r7, #0]
 8019d98:	681b      	ldr	r3, [r3, #0]
 8019d9a:	405a      	eors	r2, r3
 8019d9c:	683b      	ldr	r3, [r7, #0]
 8019d9e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8019da2:	2110      	movs	r1, #16
 8019da4:	4610      	mov	r0, r2
 8019da6:	f7fe f84b 	bl	8017e40 <rotr32>
 8019daa:	4603      	mov	r3, r0
 8019dac:	6023      	str	r3, [r4, #0]
 8019dae:	683b      	ldr	r3, [r7, #0]
 8019db0:	3320      	adds	r3, #32
 8019db2:	6819      	ldr	r1, [r3, #0]
 8019db4:	683b      	ldr	r3, [r7, #0]
 8019db6:	3330      	adds	r3, #48	; 0x30
 8019db8:	681a      	ldr	r2, [r3, #0]
 8019dba:	683b      	ldr	r3, [r7, #0]
 8019dbc:	3320      	adds	r3, #32
 8019dbe:	440a      	add	r2, r1
 8019dc0:	601a      	str	r2, [r3, #0]
 8019dc2:	683b      	ldr	r3, [r7, #0]
 8019dc4:	3310      	adds	r3, #16
 8019dc6:	681a      	ldr	r2, [r3, #0]
 8019dc8:	683b      	ldr	r3, [r7, #0]
 8019dca:	3320      	adds	r3, #32
 8019dcc:	681b      	ldr	r3, [r3, #0]
 8019dce:	405a      	eors	r2, r3
 8019dd0:	683b      	ldr	r3, [r7, #0]
 8019dd2:	f103 0410 	add.w	r4, r3, #16
 8019dd6:	210c      	movs	r1, #12
 8019dd8:	4610      	mov	r0, r2
 8019dda:	f7fe f831 	bl	8017e40 <rotr32>
 8019dde:	4603      	mov	r3, r0
 8019de0:	6023      	str	r3, [r4, #0]
 8019de2:	683b      	ldr	r3, [r7, #0]
 8019de4:	681a      	ldr	r2, [r3, #0]
 8019de6:	683b      	ldr	r3, [r7, #0]
 8019de8:	3310      	adds	r3, #16
 8019dea:	681b      	ldr	r3, [r3, #0]
 8019dec:	441a      	add	r2, r3
 8019dee:	2300      	movs	r3, #0
 8019df0:	009b      	lsls	r3, r3, #2
 8019df2:	6879      	ldr	r1, [r7, #4]
 8019df4:	440b      	add	r3, r1
 8019df6:	681b      	ldr	r3, [r3, #0]
 8019df8:	441a      	add	r2, r3
 8019dfa:	683b      	ldr	r3, [r7, #0]
 8019dfc:	601a      	str	r2, [r3, #0]
 8019dfe:	683b      	ldr	r3, [r7, #0]
 8019e00:	3330      	adds	r3, #48	; 0x30
 8019e02:	681a      	ldr	r2, [r3, #0]
 8019e04:	683b      	ldr	r3, [r7, #0]
 8019e06:	681b      	ldr	r3, [r3, #0]
 8019e08:	405a      	eors	r2, r3
 8019e0a:	683b      	ldr	r3, [r7, #0]
 8019e0c:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8019e10:	2108      	movs	r1, #8
 8019e12:	4610      	mov	r0, r2
 8019e14:	f7fe f814 	bl	8017e40 <rotr32>
 8019e18:	4603      	mov	r3, r0
 8019e1a:	6023      	str	r3, [r4, #0]
 8019e1c:	683b      	ldr	r3, [r7, #0]
 8019e1e:	3320      	adds	r3, #32
 8019e20:	6819      	ldr	r1, [r3, #0]
 8019e22:	683b      	ldr	r3, [r7, #0]
 8019e24:	3330      	adds	r3, #48	; 0x30
 8019e26:	681a      	ldr	r2, [r3, #0]
 8019e28:	683b      	ldr	r3, [r7, #0]
 8019e2a:	3320      	adds	r3, #32
 8019e2c:	440a      	add	r2, r1
 8019e2e:	601a      	str	r2, [r3, #0]
 8019e30:	683b      	ldr	r3, [r7, #0]
 8019e32:	3310      	adds	r3, #16
 8019e34:	681a      	ldr	r2, [r3, #0]
 8019e36:	683b      	ldr	r3, [r7, #0]
 8019e38:	3320      	adds	r3, #32
 8019e3a:	681b      	ldr	r3, [r3, #0]
 8019e3c:	405a      	eors	r2, r3
 8019e3e:	683b      	ldr	r3, [r7, #0]
 8019e40:	f103 0410 	add.w	r4, r3, #16
 8019e44:	2107      	movs	r1, #7
 8019e46:	4610      	mov	r0, r2
 8019e48:	f7fd fffa 	bl	8017e40 <rotr32>
 8019e4c:	4603      	mov	r3, r0
 8019e4e:	6023      	str	r3, [r4, #0]
 8019e50:	683b      	ldr	r3, [r7, #0]
 8019e52:	3304      	adds	r3, #4
 8019e54:	681a      	ldr	r2, [r3, #0]
 8019e56:	683b      	ldr	r3, [r7, #0]
 8019e58:	3314      	adds	r3, #20
 8019e5a:	681b      	ldr	r3, [r3, #0]
 8019e5c:	18d1      	adds	r1, r2, r3
 8019e5e:	2305      	movs	r3, #5
 8019e60:	009b      	lsls	r3, r3, #2
 8019e62:	687a      	ldr	r2, [r7, #4]
 8019e64:	4413      	add	r3, r2
 8019e66:	681a      	ldr	r2, [r3, #0]
 8019e68:	683b      	ldr	r3, [r7, #0]
 8019e6a:	3304      	adds	r3, #4
 8019e6c:	440a      	add	r2, r1
 8019e6e:	601a      	str	r2, [r3, #0]
 8019e70:	683b      	ldr	r3, [r7, #0]
 8019e72:	3334      	adds	r3, #52	; 0x34
 8019e74:	681a      	ldr	r2, [r3, #0]
 8019e76:	683b      	ldr	r3, [r7, #0]
 8019e78:	3304      	adds	r3, #4
 8019e7a:	681b      	ldr	r3, [r3, #0]
 8019e7c:	405a      	eors	r2, r3
 8019e7e:	683b      	ldr	r3, [r7, #0]
 8019e80:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8019e84:	2110      	movs	r1, #16
 8019e86:	4610      	mov	r0, r2
 8019e88:	f7fd ffda 	bl	8017e40 <rotr32>
 8019e8c:	4603      	mov	r3, r0
 8019e8e:	6023      	str	r3, [r4, #0]
 8019e90:	683b      	ldr	r3, [r7, #0]
 8019e92:	3324      	adds	r3, #36	; 0x24
 8019e94:	6819      	ldr	r1, [r3, #0]
 8019e96:	683b      	ldr	r3, [r7, #0]
 8019e98:	3334      	adds	r3, #52	; 0x34
 8019e9a:	681a      	ldr	r2, [r3, #0]
 8019e9c:	683b      	ldr	r3, [r7, #0]
 8019e9e:	3324      	adds	r3, #36	; 0x24
 8019ea0:	440a      	add	r2, r1
 8019ea2:	601a      	str	r2, [r3, #0]
 8019ea4:	683b      	ldr	r3, [r7, #0]
 8019ea6:	3314      	adds	r3, #20
 8019ea8:	681a      	ldr	r2, [r3, #0]
 8019eaa:	683b      	ldr	r3, [r7, #0]
 8019eac:	3324      	adds	r3, #36	; 0x24
 8019eae:	681b      	ldr	r3, [r3, #0]
 8019eb0:	405a      	eors	r2, r3
 8019eb2:	683b      	ldr	r3, [r7, #0]
 8019eb4:	f103 0414 	add.w	r4, r3, #20
 8019eb8:	210c      	movs	r1, #12
 8019eba:	4610      	mov	r0, r2
 8019ebc:	f7fd ffc0 	bl	8017e40 <rotr32>
 8019ec0:	4603      	mov	r3, r0
 8019ec2:	6023      	str	r3, [r4, #0]
 8019ec4:	683b      	ldr	r3, [r7, #0]
 8019ec6:	3304      	adds	r3, #4
 8019ec8:	681a      	ldr	r2, [r3, #0]
 8019eca:	683b      	ldr	r3, [r7, #0]
 8019ecc:	3314      	adds	r3, #20
 8019ece:	681b      	ldr	r3, [r3, #0]
 8019ed0:	18d1      	adds	r1, r2, r3
 8019ed2:	2307      	movs	r3, #7
 8019ed4:	009b      	lsls	r3, r3, #2
 8019ed6:	687a      	ldr	r2, [r7, #4]
 8019ed8:	4413      	add	r3, r2
 8019eda:	681a      	ldr	r2, [r3, #0]
 8019edc:	683b      	ldr	r3, [r7, #0]
 8019ede:	3304      	adds	r3, #4
 8019ee0:	440a      	add	r2, r1
 8019ee2:	601a      	str	r2, [r3, #0]
 8019ee4:	683b      	ldr	r3, [r7, #0]
 8019ee6:	3334      	adds	r3, #52	; 0x34
 8019ee8:	681a      	ldr	r2, [r3, #0]
 8019eea:	683b      	ldr	r3, [r7, #0]
 8019eec:	3304      	adds	r3, #4
 8019eee:	681b      	ldr	r3, [r3, #0]
 8019ef0:	405a      	eors	r2, r3
 8019ef2:	683b      	ldr	r3, [r7, #0]
 8019ef4:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8019ef8:	2108      	movs	r1, #8
 8019efa:	4610      	mov	r0, r2
 8019efc:	f7fd ffa0 	bl	8017e40 <rotr32>
 8019f00:	4603      	mov	r3, r0
 8019f02:	6023      	str	r3, [r4, #0]
 8019f04:	683b      	ldr	r3, [r7, #0]
 8019f06:	3324      	adds	r3, #36	; 0x24
 8019f08:	6819      	ldr	r1, [r3, #0]
 8019f0a:	683b      	ldr	r3, [r7, #0]
 8019f0c:	3334      	adds	r3, #52	; 0x34
 8019f0e:	681a      	ldr	r2, [r3, #0]
 8019f10:	683b      	ldr	r3, [r7, #0]
 8019f12:	3324      	adds	r3, #36	; 0x24
 8019f14:	440a      	add	r2, r1
 8019f16:	601a      	str	r2, [r3, #0]
 8019f18:	683b      	ldr	r3, [r7, #0]
 8019f1a:	3314      	adds	r3, #20
 8019f1c:	681a      	ldr	r2, [r3, #0]
 8019f1e:	683b      	ldr	r3, [r7, #0]
 8019f20:	3324      	adds	r3, #36	; 0x24
 8019f22:	681b      	ldr	r3, [r3, #0]
 8019f24:	405a      	eors	r2, r3
 8019f26:	683b      	ldr	r3, [r7, #0]
 8019f28:	f103 0414 	add.w	r4, r3, #20
 8019f2c:	2107      	movs	r1, #7
 8019f2e:	4610      	mov	r0, r2
 8019f30:	f7fd ff86 	bl	8017e40 <rotr32>
 8019f34:	4603      	mov	r3, r0
 8019f36:	6023      	str	r3, [r4, #0]
 8019f38:	683b      	ldr	r3, [r7, #0]
 8019f3a:	3308      	adds	r3, #8
 8019f3c:	681a      	ldr	r2, [r3, #0]
 8019f3e:	683b      	ldr	r3, [r7, #0]
 8019f40:	3318      	adds	r3, #24
 8019f42:	681b      	ldr	r3, [r3, #0]
 8019f44:	18d1      	adds	r1, r2, r3
 8019f46:	2302      	movs	r3, #2
 8019f48:	009b      	lsls	r3, r3, #2
 8019f4a:	687a      	ldr	r2, [r7, #4]
 8019f4c:	4413      	add	r3, r2
 8019f4e:	681a      	ldr	r2, [r3, #0]
 8019f50:	683b      	ldr	r3, [r7, #0]
 8019f52:	3308      	adds	r3, #8
 8019f54:	440a      	add	r2, r1
 8019f56:	601a      	str	r2, [r3, #0]
 8019f58:	683b      	ldr	r3, [r7, #0]
 8019f5a:	3338      	adds	r3, #56	; 0x38
 8019f5c:	681a      	ldr	r2, [r3, #0]
 8019f5e:	683b      	ldr	r3, [r7, #0]
 8019f60:	3308      	adds	r3, #8
 8019f62:	681b      	ldr	r3, [r3, #0]
 8019f64:	405a      	eors	r2, r3
 8019f66:	683b      	ldr	r3, [r7, #0]
 8019f68:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8019f6c:	2110      	movs	r1, #16
 8019f6e:	4610      	mov	r0, r2
 8019f70:	f7fd ff66 	bl	8017e40 <rotr32>
 8019f74:	4603      	mov	r3, r0
 8019f76:	6023      	str	r3, [r4, #0]
 8019f78:	683b      	ldr	r3, [r7, #0]
 8019f7a:	3328      	adds	r3, #40	; 0x28
 8019f7c:	6819      	ldr	r1, [r3, #0]
 8019f7e:	683b      	ldr	r3, [r7, #0]
 8019f80:	3338      	adds	r3, #56	; 0x38
 8019f82:	681a      	ldr	r2, [r3, #0]
 8019f84:	683b      	ldr	r3, [r7, #0]
 8019f86:	3328      	adds	r3, #40	; 0x28
 8019f88:	440a      	add	r2, r1
 8019f8a:	601a      	str	r2, [r3, #0]
 8019f8c:	683b      	ldr	r3, [r7, #0]
 8019f8e:	3318      	adds	r3, #24
 8019f90:	681a      	ldr	r2, [r3, #0]
 8019f92:	683b      	ldr	r3, [r7, #0]
 8019f94:	3328      	adds	r3, #40	; 0x28
 8019f96:	681b      	ldr	r3, [r3, #0]
 8019f98:	405a      	eors	r2, r3
 8019f9a:	683b      	ldr	r3, [r7, #0]
 8019f9c:	f103 0418 	add.w	r4, r3, #24
 8019fa0:	210c      	movs	r1, #12
 8019fa2:	4610      	mov	r0, r2
 8019fa4:	f7fd ff4c 	bl	8017e40 <rotr32>
 8019fa8:	4603      	mov	r3, r0
 8019faa:	6023      	str	r3, [r4, #0]
 8019fac:	683b      	ldr	r3, [r7, #0]
 8019fae:	3308      	adds	r3, #8
 8019fb0:	681a      	ldr	r2, [r3, #0]
 8019fb2:	683b      	ldr	r3, [r7, #0]
 8019fb4:	3318      	adds	r3, #24
 8019fb6:	681b      	ldr	r3, [r3, #0]
 8019fb8:	18d1      	adds	r1, r2, r3
 8019fba:	2304      	movs	r3, #4
 8019fbc:	009b      	lsls	r3, r3, #2
 8019fbe:	687a      	ldr	r2, [r7, #4]
 8019fc0:	4413      	add	r3, r2
 8019fc2:	681a      	ldr	r2, [r3, #0]
 8019fc4:	683b      	ldr	r3, [r7, #0]
 8019fc6:	3308      	adds	r3, #8
 8019fc8:	440a      	add	r2, r1
 8019fca:	601a      	str	r2, [r3, #0]
 8019fcc:	683b      	ldr	r3, [r7, #0]
 8019fce:	3338      	adds	r3, #56	; 0x38
 8019fd0:	681a      	ldr	r2, [r3, #0]
 8019fd2:	683b      	ldr	r3, [r7, #0]
 8019fd4:	3308      	adds	r3, #8
 8019fd6:	681b      	ldr	r3, [r3, #0]
 8019fd8:	405a      	eors	r2, r3
 8019fda:	683b      	ldr	r3, [r7, #0]
 8019fdc:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8019fe0:	2108      	movs	r1, #8
 8019fe2:	4610      	mov	r0, r2
 8019fe4:	f7fd ff2c 	bl	8017e40 <rotr32>
 8019fe8:	4603      	mov	r3, r0
 8019fea:	6023      	str	r3, [r4, #0]
 8019fec:	683b      	ldr	r3, [r7, #0]
 8019fee:	3328      	adds	r3, #40	; 0x28
 8019ff0:	6819      	ldr	r1, [r3, #0]
 8019ff2:	683b      	ldr	r3, [r7, #0]
 8019ff4:	3338      	adds	r3, #56	; 0x38
 8019ff6:	681a      	ldr	r2, [r3, #0]
 8019ff8:	683b      	ldr	r3, [r7, #0]
 8019ffa:	3328      	adds	r3, #40	; 0x28
 8019ffc:	440a      	add	r2, r1
 8019ffe:	601a      	str	r2, [r3, #0]
 801a000:	683b      	ldr	r3, [r7, #0]
 801a002:	3318      	adds	r3, #24
 801a004:	681a      	ldr	r2, [r3, #0]
 801a006:	683b      	ldr	r3, [r7, #0]
 801a008:	3328      	adds	r3, #40	; 0x28
 801a00a:	681b      	ldr	r3, [r3, #0]
 801a00c:	405a      	eors	r2, r3
 801a00e:	683b      	ldr	r3, [r7, #0]
 801a010:	f103 0418 	add.w	r4, r3, #24
 801a014:	2107      	movs	r1, #7
 801a016:	4610      	mov	r0, r2
 801a018:	f7fd ff12 	bl	8017e40 <rotr32>
 801a01c:	4603      	mov	r3, r0
 801a01e:	6023      	str	r3, [r4, #0]
 801a020:	683b      	ldr	r3, [r7, #0]
 801a022:	330c      	adds	r3, #12
 801a024:	681a      	ldr	r2, [r3, #0]
 801a026:	683b      	ldr	r3, [r7, #0]
 801a028:	331c      	adds	r3, #28
 801a02a:	681b      	ldr	r3, [r3, #0]
 801a02c:	18d1      	adds	r1, r2, r3
 801a02e:	230a      	movs	r3, #10
 801a030:	009b      	lsls	r3, r3, #2
 801a032:	687a      	ldr	r2, [r7, #4]
 801a034:	4413      	add	r3, r2
 801a036:	681a      	ldr	r2, [r3, #0]
 801a038:	683b      	ldr	r3, [r7, #0]
 801a03a:	330c      	adds	r3, #12
 801a03c:	440a      	add	r2, r1
 801a03e:	601a      	str	r2, [r3, #0]
 801a040:	683b      	ldr	r3, [r7, #0]
 801a042:	333c      	adds	r3, #60	; 0x3c
 801a044:	681a      	ldr	r2, [r3, #0]
 801a046:	683b      	ldr	r3, [r7, #0]
 801a048:	330c      	adds	r3, #12
 801a04a:	681b      	ldr	r3, [r3, #0]
 801a04c:	405a      	eors	r2, r3
 801a04e:	683b      	ldr	r3, [r7, #0]
 801a050:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 801a054:	2110      	movs	r1, #16
 801a056:	4610      	mov	r0, r2
 801a058:	f7fd fef2 	bl	8017e40 <rotr32>
 801a05c:	4603      	mov	r3, r0
 801a05e:	6023      	str	r3, [r4, #0]
 801a060:	683b      	ldr	r3, [r7, #0]
 801a062:	332c      	adds	r3, #44	; 0x2c
 801a064:	6819      	ldr	r1, [r3, #0]
 801a066:	683b      	ldr	r3, [r7, #0]
 801a068:	333c      	adds	r3, #60	; 0x3c
 801a06a:	681a      	ldr	r2, [r3, #0]
 801a06c:	683b      	ldr	r3, [r7, #0]
 801a06e:	332c      	adds	r3, #44	; 0x2c
 801a070:	440a      	add	r2, r1
 801a072:	601a      	str	r2, [r3, #0]
 801a074:	683b      	ldr	r3, [r7, #0]
 801a076:	331c      	adds	r3, #28
 801a078:	681a      	ldr	r2, [r3, #0]
 801a07a:	683b      	ldr	r3, [r7, #0]
 801a07c:	332c      	adds	r3, #44	; 0x2c
 801a07e:	681b      	ldr	r3, [r3, #0]
 801a080:	405a      	eors	r2, r3
 801a082:	683b      	ldr	r3, [r7, #0]
 801a084:	f103 041c 	add.w	r4, r3, #28
 801a088:	210c      	movs	r1, #12
 801a08a:	4610      	mov	r0, r2
 801a08c:	f7fd fed8 	bl	8017e40 <rotr32>
 801a090:	4603      	mov	r3, r0
 801a092:	6023      	str	r3, [r4, #0]
 801a094:	683b      	ldr	r3, [r7, #0]
 801a096:	330c      	adds	r3, #12
 801a098:	681a      	ldr	r2, [r3, #0]
 801a09a:	683b      	ldr	r3, [r7, #0]
 801a09c:	331c      	adds	r3, #28
 801a09e:	681b      	ldr	r3, [r3, #0]
 801a0a0:	18d1      	adds	r1, r2, r3
 801a0a2:	230f      	movs	r3, #15
 801a0a4:	009b      	lsls	r3, r3, #2
 801a0a6:	687a      	ldr	r2, [r7, #4]
 801a0a8:	4413      	add	r3, r2
 801a0aa:	681a      	ldr	r2, [r3, #0]
 801a0ac:	683b      	ldr	r3, [r7, #0]
 801a0ae:	330c      	adds	r3, #12
 801a0b0:	440a      	add	r2, r1
 801a0b2:	601a      	str	r2, [r3, #0]
 801a0b4:	683b      	ldr	r3, [r7, #0]
 801a0b6:	333c      	adds	r3, #60	; 0x3c
 801a0b8:	681a      	ldr	r2, [r3, #0]
 801a0ba:	683b      	ldr	r3, [r7, #0]
 801a0bc:	330c      	adds	r3, #12
 801a0be:	681b      	ldr	r3, [r3, #0]
 801a0c0:	405a      	eors	r2, r3
 801a0c2:	683b      	ldr	r3, [r7, #0]
 801a0c4:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 801a0c8:	2108      	movs	r1, #8
 801a0ca:	4610      	mov	r0, r2
 801a0cc:	f7fd feb8 	bl	8017e40 <rotr32>
 801a0d0:	4603      	mov	r3, r0
 801a0d2:	6023      	str	r3, [r4, #0]
 801a0d4:	683b      	ldr	r3, [r7, #0]
 801a0d6:	332c      	adds	r3, #44	; 0x2c
 801a0d8:	6819      	ldr	r1, [r3, #0]
 801a0da:	683b      	ldr	r3, [r7, #0]
 801a0dc:	333c      	adds	r3, #60	; 0x3c
 801a0de:	681a      	ldr	r2, [r3, #0]
 801a0e0:	683b      	ldr	r3, [r7, #0]
 801a0e2:	332c      	adds	r3, #44	; 0x2c
 801a0e4:	440a      	add	r2, r1
 801a0e6:	601a      	str	r2, [r3, #0]
 801a0e8:	683b      	ldr	r3, [r7, #0]
 801a0ea:	331c      	adds	r3, #28
 801a0ec:	681a      	ldr	r2, [r3, #0]
 801a0ee:	683b      	ldr	r3, [r7, #0]
 801a0f0:	332c      	adds	r3, #44	; 0x2c
 801a0f2:	681b      	ldr	r3, [r3, #0]
 801a0f4:	405a      	eors	r2, r3
 801a0f6:	683b      	ldr	r3, [r7, #0]
 801a0f8:	f103 041c 	add.w	r4, r3, #28
 801a0fc:	2107      	movs	r1, #7
 801a0fe:	4610      	mov	r0, r2
 801a100:	f7fd fe9e 	bl	8017e40 <rotr32>
 801a104:	4603      	mov	r3, r0
 801a106:	6023      	str	r3, [r4, #0]
 801a108:	683b      	ldr	r3, [r7, #0]
 801a10a:	681a      	ldr	r2, [r3, #0]
 801a10c:	683b      	ldr	r3, [r7, #0]
 801a10e:	3314      	adds	r3, #20
 801a110:	681b      	ldr	r3, [r3, #0]
 801a112:	441a      	add	r2, r3
 801a114:	230e      	movs	r3, #14
 801a116:	009b      	lsls	r3, r3, #2
 801a118:	6879      	ldr	r1, [r7, #4]
 801a11a:	440b      	add	r3, r1
 801a11c:	681b      	ldr	r3, [r3, #0]
 801a11e:	441a      	add	r2, r3
 801a120:	683b      	ldr	r3, [r7, #0]
 801a122:	601a      	str	r2, [r3, #0]
 801a124:	683b      	ldr	r3, [r7, #0]
 801a126:	333c      	adds	r3, #60	; 0x3c
 801a128:	681a      	ldr	r2, [r3, #0]
 801a12a:	683b      	ldr	r3, [r7, #0]
 801a12c:	681b      	ldr	r3, [r3, #0]
 801a12e:	405a      	eors	r2, r3
 801a130:	683b      	ldr	r3, [r7, #0]
 801a132:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 801a136:	2110      	movs	r1, #16
 801a138:	4610      	mov	r0, r2
 801a13a:	f7fd fe81 	bl	8017e40 <rotr32>
 801a13e:	4603      	mov	r3, r0
 801a140:	6023      	str	r3, [r4, #0]
 801a142:	683b      	ldr	r3, [r7, #0]
 801a144:	3328      	adds	r3, #40	; 0x28
 801a146:	6819      	ldr	r1, [r3, #0]
 801a148:	683b      	ldr	r3, [r7, #0]
 801a14a:	333c      	adds	r3, #60	; 0x3c
 801a14c:	681a      	ldr	r2, [r3, #0]
 801a14e:	683b      	ldr	r3, [r7, #0]
 801a150:	3328      	adds	r3, #40	; 0x28
 801a152:	440a      	add	r2, r1
 801a154:	601a      	str	r2, [r3, #0]
 801a156:	683b      	ldr	r3, [r7, #0]
 801a158:	3314      	adds	r3, #20
 801a15a:	681a      	ldr	r2, [r3, #0]
 801a15c:	683b      	ldr	r3, [r7, #0]
 801a15e:	3328      	adds	r3, #40	; 0x28
 801a160:	681b      	ldr	r3, [r3, #0]
 801a162:	405a      	eors	r2, r3
 801a164:	683b      	ldr	r3, [r7, #0]
 801a166:	f103 0414 	add.w	r4, r3, #20
 801a16a:	210c      	movs	r1, #12
 801a16c:	4610      	mov	r0, r2
 801a16e:	f7fd fe67 	bl	8017e40 <rotr32>
 801a172:	4603      	mov	r3, r0
 801a174:	6023      	str	r3, [r4, #0]
 801a176:	683b      	ldr	r3, [r7, #0]
 801a178:	681a      	ldr	r2, [r3, #0]
 801a17a:	683b      	ldr	r3, [r7, #0]
 801a17c:	3314      	adds	r3, #20
 801a17e:	681b      	ldr	r3, [r3, #0]
 801a180:	441a      	add	r2, r3
 801a182:	2301      	movs	r3, #1
 801a184:	009b      	lsls	r3, r3, #2
 801a186:	6879      	ldr	r1, [r7, #4]
 801a188:	440b      	add	r3, r1
 801a18a:	681b      	ldr	r3, [r3, #0]
 801a18c:	441a      	add	r2, r3
 801a18e:	683b      	ldr	r3, [r7, #0]
 801a190:	601a      	str	r2, [r3, #0]
 801a192:	683b      	ldr	r3, [r7, #0]
 801a194:	333c      	adds	r3, #60	; 0x3c
 801a196:	681a      	ldr	r2, [r3, #0]
 801a198:	683b      	ldr	r3, [r7, #0]
 801a19a:	681b      	ldr	r3, [r3, #0]
 801a19c:	405a      	eors	r2, r3
 801a19e:	683b      	ldr	r3, [r7, #0]
 801a1a0:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 801a1a4:	2108      	movs	r1, #8
 801a1a6:	4610      	mov	r0, r2
 801a1a8:	f7fd fe4a 	bl	8017e40 <rotr32>
 801a1ac:	4603      	mov	r3, r0
 801a1ae:	6023      	str	r3, [r4, #0]
 801a1b0:	683b      	ldr	r3, [r7, #0]
 801a1b2:	3328      	adds	r3, #40	; 0x28
 801a1b4:	6819      	ldr	r1, [r3, #0]
 801a1b6:	683b      	ldr	r3, [r7, #0]
 801a1b8:	333c      	adds	r3, #60	; 0x3c
 801a1ba:	681a      	ldr	r2, [r3, #0]
 801a1bc:	683b      	ldr	r3, [r7, #0]
 801a1be:	3328      	adds	r3, #40	; 0x28
 801a1c0:	440a      	add	r2, r1
 801a1c2:	601a      	str	r2, [r3, #0]
 801a1c4:	683b      	ldr	r3, [r7, #0]
 801a1c6:	3314      	adds	r3, #20
 801a1c8:	681a      	ldr	r2, [r3, #0]
 801a1ca:	683b      	ldr	r3, [r7, #0]
 801a1cc:	3328      	adds	r3, #40	; 0x28
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	405a      	eors	r2, r3
 801a1d2:	683b      	ldr	r3, [r7, #0]
 801a1d4:	f103 0414 	add.w	r4, r3, #20
 801a1d8:	2107      	movs	r1, #7
 801a1da:	4610      	mov	r0, r2
 801a1dc:	f7fd fe30 	bl	8017e40 <rotr32>
 801a1e0:	4603      	mov	r3, r0
 801a1e2:	6023      	str	r3, [r4, #0]
 801a1e4:	683b      	ldr	r3, [r7, #0]
 801a1e6:	3304      	adds	r3, #4
 801a1e8:	681a      	ldr	r2, [r3, #0]
 801a1ea:	683b      	ldr	r3, [r7, #0]
 801a1ec:	3318      	adds	r3, #24
 801a1ee:	681b      	ldr	r3, [r3, #0]
 801a1f0:	18d1      	adds	r1, r2, r3
 801a1f2:	230b      	movs	r3, #11
 801a1f4:	009b      	lsls	r3, r3, #2
 801a1f6:	687a      	ldr	r2, [r7, #4]
 801a1f8:	4413      	add	r3, r2
 801a1fa:	681a      	ldr	r2, [r3, #0]
 801a1fc:	683b      	ldr	r3, [r7, #0]
 801a1fe:	3304      	adds	r3, #4
 801a200:	440a      	add	r2, r1
 801a202:	601a      	str	r2, [r3, #0]
 801a204:	683b      	ldr	r3, [r7, #0]
 801a206:	3330      	adds	r3, #48	; 0x30
 801a208:	681a      	ldr	r2, [r3, #0]
 801a20a:	683b      	ldr	r3, [r7, #0]
 801a20c:	3304      	adds	r3, #4
 801a20e:	681b      	ldr	r3, [r3, #0]
 801a210:	405a      	eors	r2, r3
 801a212:	683b      	ldr	r3, [r7, #0]
 801a214:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801a218:	2110      	movs	r1, #16
 801a21a:	4610      	mov	r0, r2
 801a21c:	f7fd fe10 	bl	8017e40 <rotr32>
 801a220:	4603      	mov	r3, r0
 801a222:	6023      	str	r3, [r4, #0]
 801a224:	683b      	ldr	r3, [r7, #0]
 801a226:	332c      	adds	r3, #44	; 0x2c
 801a228:	6819      	ldr	r1, [r3, #0]
 801a22a:	683b      	ldr	r3, [r7, #0]
 801a22c:	3330      	adds	r3, #48	; 0x30
 801a22e:	681a      	ldr	r2, [r3, #0]
 801a230:	683b      	ldr	r3, [r7, #0]
 801a232:	332c      	adds	r3, #44	; 0x2c
 801a234:	440a      	add	r2, r1
 801a236:	601a      	str	r2, [r3, #0]
 801a238:	683b      	ldr	r3, [r7, #0]
 801a23a:	3318      	adds	r3, #24
 801a23c:	681a      	ldr	r2, [r3, #0]
 801a23e:	683b      	ldr	r3, [r7, #0]
 801a240:	332c      	adds	r3, #44	; 0x2c
 801a242:	681b      	ldr	r3, [r3, #0]
 801a244:	405a      	eors	r2, r3
 801a246:	683b      	ldr	r3, [r7, #0]
 801a248:	f103 0418 	add.w	r4, r3, #24
 801a24c:	210c      	movs	r1, #12
 801a24e:	4610      	mov	r0, r2
 801a250:	f7fd fdf6 	bl	8017e40 <rotr32>
 801a254:	4603      	mov	r3, r0
 801a256:	6023      	str	r3, [r4, #0]
 801a258:	683b      	ldr	r3, [r7, #0]
 801a25a:	3304      	adds	r3, #4
 801a25c:	681a      	ldr	r2, [r3, #0]
 801a25e:	683b      	ldr	r3, [r7, #0]
 801a260:	3318      	adds	r3, #24
 801a262:	681b      	ldr	r3, [r3, #0]
 801a264:	18d1      	adds	r1, r2, r3
 801a266:	230c      	movs	r3, #12
 801a268:	009b      	lsls	r3, r3, #2
 801a26a:	687a      	ldr	r2, [r7, #4]
 801a26c:	4413      	add	r3, r2
 801a26e:	681a      	ldr	r2, [r3, #0]
 801a270:	683b      	ldr	r3, [r7, #0]
 801a272:	3304      	adds	r3, #4
 801a274:	440a      	add	r2, r1
 801a276:	601a      	str	r2, [r3, #0]
 801a278:	683b      	ldr	r3, [r7, #0]
 801a27a:	3330      	adds	r3, #48	; 0x30
 801a27c:	681a      	ldr	r2, [r3, #0]
 801a27e:	683b      	ldr	r3, [r7, #0]
 801a280:	3304      	adds	r3, #4
 801a282:	681b      	ldr	r3, [r3, #0]
 801a284:	405a      	eors	r2, r3
 801a286:	683b      	ldr	r3, [r7, #0]
 801a288:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801a28c:	2108      	movs	r1, #8
 801a28e:	4610      	mov	r0, r2
 801a290:	f7fd fdd6 	bl	8017e40 <rotr32>
 801a294:	4603      	mov	r3, r0
 801a296:	6023      	str	r3, [r4, #0]
 801a298:	683b      	ldr	r3, [r7, #0]
 801a29a:	332c      	adds	r3, #44	; 0x2c
 801a29c:	6819      	ldr	r1, [r3, #0]
 801a29e:	683b      	ldr	r3, [r7, #0]
 801a2a0:	3330      	adds	r3, #48	; 0x30
 801a2a2:	681a      	ldr	r2, [r3, #0]
 801a2a4:	683b      	ldr	r3, [r7, #0]
 801a2a6:	332c      	adds	r3, #44	; 0x2c
 801a2a8:	440a      	add	r2, r1
 801a2aa:	601a      	str	r2, [r3, #0]
 801a2ac:	683b      	ldr	r3, [r7, #0]
 801a2ae:	3318      	adds	r3, #24
 801a2b0:	681a      	ldr	r2, [r3, #0]
 801a2b2:	683b      	ldr	r3, [r7, #0]
 801a2b4:	332c      	adds	r3, #44	; 0x2c
 801a2b6:	681b      	ldr	r3, [r3, #0]
 801a2b8:	405a      	eors	r2, r3
 801a2ba:	683b      	ldr	r3, [r7, #0]
 801a2bc:	f103 0418 	add.w	r4, r3, #24
 801a2c0:	2107      	movs	r1, #7
 801a2c2:	4610      	mov	r0, r2
 801a2c4:	f7fd fdbc 	bl	8017e40 <rotr32>
 801a2c8:	4603      	mov	r3, r0
 801a2ca:	6023      	str	r3, [r4, #0]
 801a2cc:	683b      	ldr	r3, [r7, #0]
 801a2ce:	3308      	adds	r3, #8
 801a2d0:	681a      	ldr	r2, [r3, #0]
 801a2d2:	683b      	ldr	r3, [r7, #0]
 801a2d4:	331c      	adds	r3, #28
 801a2d6:	681b      	ldr	r3, [r3, #0]
 801a2d8:	18d1      	adds	r1, r2, r3
 801a2da:	2306      	movs	r3, #6
 801a2dc:	009b      	lsls	r3, r3, #2
 801a2de:	687a      	ldr	r2, [r7, #4]
 801a2e0:	4413      	add	r3, r2
 801a2e2:	681a      	ldr	r2, [r3, #0]
 801a2e4:	683b      	ldr	r3, [r7, #0]
 801a2e6:	3308      	adds	r3, #8
 801a2e8:	440a      	add	r2, r1
 801a2ea:	601a      	str	r2, [r3, #0]
 801a2ec:	683b      	ldr	r3, [r7, #0]
 801a2ee:	3334      	adds	r3, #52	; 0x34
 801a2f0:	681a      	ldr	r2, [r3, #0]
 801a2f2:	683b      	ldr	r3, [r7, #0]
 801a2f4:	3308      	adds	r3, #8
 801a2f6:	681b      	ldr	r3, [r3, #0]
 801a2f8:	405a      	eors	r2, r3
 801a2fa:	683b      	ldr	r3, [r7, #0]
 801a2fc:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801a300:	2110      	movs	r1, #16
 801a302:	4610      	mov	r0, r2
 801a304:	f7fd fd9c 	bl	8017e40 <rotr32>
 801a308:	4603      	mov	r3, r0
 801a30a:	6023      	str	r3, [r4, #0]
 801a30c:	683b      	ldr	r3, [r7, #0]
 801a30e:	3320      	adds	r3, #32
 801a310:	6819      	ldr	r1, [r3, #0]
 801a312:	683b      	ldr	r3, [r7, #0]
 801a314:	3334      	adds	r3, #52	; 0x34
 801a316:	681a      	ldr	r2, [r3, #0]
 801a318:	683b      	ldr	r3, [r7, #0]
 801a31a:	3320      	adds	r3, #32
 801a31c:	440a      	add	r2, r1
 801a31e:	601a      	str	r2, [r3, #0]
 801a320:	683b      	ldr	r3, [r7, #0]
 801a322:	331c      	adds	r3, #28
 801a324:	681a      	ldr	r2, [r3, #0]
 801a326:	683b      	ldr	r3, [r7, #0]
 801a328:	3320      	adds	r3, #32
 801a32a:	681b      	ldr	r3, [r3, #0]
 801a32c:	405a      	eors	r2, r3
 801a32e:	683b      	ldr	r3, [r7, #0]
 801a330:	f103 041c 	add.w	r4, r3, #28
 801a334:	210c      	movs	r1, #12
 801a336:	4610      	mov	r0, r2
 801a338:	f7fd fd82 	bl	8017e40 <rotr32>
 801a33c:	4603      	mov	r3, r0
 801a33e:	6023      	str	r3, [r4, #0]
 801a340:	683b      	ldr	r3, [r7, #0]
 801a342:	3308      	adds	r3, #8
 801a344:	681a      	ldr	r2, [r3, #0]
 801a346:	683b      	ldr	r3, [r7, #0]
 801a348:	331c      	adds	r3, #28
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	18d1      	adds	r1, r2, r3
 801a34e:	2308      	movs	r3, #8
 801a350:	009b      	lsls	r3, r3, #2
 801a352:	687a      	ldr	r2, [r7, #4]
 801a354:	4413      	add	r3, r2
 801a356:	681a      	ldr	r2, [r3, #0]
 801a358:	683b      	ldr	r3, [r7, #0]
 801a35a:	3308      	adds	r3, #8
 801a35c:	440a      	add	r2, r1
 801a35e:	601a      	str	r2, [r3, #0]
 801a360:	683b      	ldr	r3, [r7, #0]
 801a362:	3334      	adds	r3, #52	; 0x34
 801a364:	681a      	ldr	r2, [r3, #0]
 801a366:	683b      	ldr	r3, [r7, #0]
 801a368:	3308      	adds	r3, #8
 801a36a:	681b      	ldr	r3, [r3, #0]
 801a36c:	405a      	eors	r2, r3
 801a36e:	683b      	ldr	r3, [r7, #0]
 801a370:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801a374:	2108      	movs	r1, #8
 801a376:	4610      	mov	r0, r2
 801a378:	f7fd fd62 	bl	8017e40 <rotr32>
 801a37c:	4603      	mov	r3, r0
 801a37e:	6023      	str	r3, [r4, #0]
 801a380:	683b      	ldr	r3, [r7, #0]
 801a382:	3320      	adds	r3, #32
 801a384:	6819      	ldr	r1, [r3, #0]
 801a386:	683b      	ldr	r3, [r7, #0]
 801a388:	3334      	adds	r3, #52	; 0x34
 801a38a:	681a      	ldr	r2, [r3, #0]
 801a38c:	683b      	ldr	r3, [r7, #0]
 801a38e:	3320      	adds	r3, #32
 801a390:	440a      	add	r2, r1
 801a392:	601a      	str	r2, [r3, #0]
 801a394:	683b      	ldr	r3, [r7, #0]
 801a396:	331c      	adds	r3, #28
 801a398:	681a      	ldr	r2, [r3, #0]
 801a39a:	683b      	ldr	r3, [r7, #0]
 801a39c:	3320      	adds	r3, #32
 801a39e:	681b      	ldr	r3, [r3, #0]
 801a3a0:	405a      	eors	r2, r3
 801a3a2:	683b      	ldr	r3, [r7, #0]
 801a3a4:	f103 041c 	add.w	r4, r3, #28
 801a3a8:	2107      	movs	r1, #7
 801a3aa:	4610      	mov	r0, r2
 801a3ac:	f7fd fd48 	bl	8017e40 <rotr32>
 801a3b0:	4603      	mov	r3, r0
 801a3b2:	6023      	str	r3, [r4, #0]
 801a3b4:	683b      	ldr	r3, [r7, #0]
 801a3b6:	330c      	adds	r3, #12
 801a3b8:	681a      	ldr	r2, [r3, #0]
 801a3ba:	683b      	ldr	r3, [r7, #0]
 801a3bc:	3310      	adds	r3, #16
 801a3be:	681b      	ldr	r3, [r3, #0]
 801a3c0:	18d1      	adds	r1, r2, r3
 801a3c2:	2303      	movs	r3, #3
 801a3c4:	009b      	lsls	r3, r3, #2
 801a3c6:	687a      	ldr	r2, [r7, #4]
 801a3c8:	4413      	add	r3, r2
 801a3ca:	681a      	ldr	r2, [r3, #0]
 801a3cc:	683b      	ldr	r3, [r7, #0]
 801a3ce:	330c      	adds	r3, #12
 801a3d0:	440a      	add	r2, r1
 801a3d2:	601a      	str	r2, [r3, #0]
 801a3d4:	683b      	ldr	r3, [r7, #0]
 801a3d6:	3338      	adds	r3, #56	; 0x38
 801a3d8:	681a      	ldr	r2, [r3, #0]
 801a3da:	683b      	ldr	r3, [r7, #0]
 801a3dc:	330c      	adds	r3, #12
 801a3de:	681b      	ldr	r3, [r3, #0]
 801a3e0:	405a      	eors	r2, r3
 801a3e2:	683b      	ldr	r3, [r7, #0]
 801a3e4:	f103 0438 	add.w	r4, r3, #56	; 0x38
 801a3e8:	2110      	movs	r1, #16
 801a3ea:	4610      	mov	r0, r2
 801a3ec:	f7fd fd28 	bl	8017e40 <rotr32>
 801a3f0:	4603      	mov	r3, r0
 801a3f2:	6023      	str	r3, [r4, #0]
 801a3f4:	683b      	ldr	r3, [r7, #0]
 801a3f6:	3324      	adds	r3, #36	; 0x24
 801a3f8:	6819      	ldr	r1, [r3, #0]
 801a3fa:	683b      	ldr	r3, [r7, #0]
 801a3fc:	3338      	adds	r3, #56	; 0x38
 801a3fe:	681a      	ldr	r2, [r3, #0]
 801a400:	683b      	ldr	r3, [r7, #0]
 801a402:	3324      	adds	r3, #36	; 0x24
 801a404:	440a      	add	r2, r1
 801a406:	601a      	str	r2, [r3, #0]
 801a408:	683b      	ldr	r3, [r7, #0]
 801a40a:	3310      	adds	r3, #16
 801a40c:	681a      	ldr	r2, [r3, #0]
 801a40e:	683b      	ldr	r3, [r7, #0]
 801a410:	3324      	adds	r3, #36	; 0x24
 801a412:	681b      	ldr	r3, [r3, #0]
 801a414:	405a      	eors	r2, r3
 801a416:	683b      	ldr	r3, [r7, #0]
 801a418:	f103 0410 	add.w	r4, r3, #16
 801a41c:	210c      	movs	r1, #12
 801a41e:	4610      	mov	r0, r2
 801a420:	f7fd fd0e 	bl	8017e40 <rotr32>
 801a424:	4603      	mov	r3, r0
 801a426:	6023      	str	r3, [r4, #0]
 801a428:	683b      	ldr	r3, [r7, #0]
 801a42a:	330c      	adds	r3, #12
 801a42c:	681a      	ldr	r2, [r3, #0]
 801a42e:	683b      	ldr	r3, [r7, #0]
 801a430:	3310      	adds	r3, #16
 801a432:	681b      	ldr	r3, [r3, #0]
 801a434:	18d1      	adds	r1, r2, r3
 801a436:	230d      	movs	r3, #13
 801a438:	009b      	lsls	r3, r3, #2
 801a43a:	687a      	ldr	r2, [r7, #4]
 801a43c:	4413      	add	r3, r2
 801a43e:	681a      	ldr	r2, [r3, #0]
 801a440:	683b      	ldr	r3, [r7, #0]
 801a442:	330c      	adds	r3, #12
 801a444:	440a      	add	r2, r1
 801a446:	601a      	str	r2, [r3, #0]
 801a448:	683b      	ldr	r3, [r7, #0]
 801a44a:	3338      	adds	r3, #56	; 0x38
 801a44c:	681a      	ldr	r2, [r3, #0]
 801a44e:	683b      	ldr	r3, [r7, #0]
 801a450:	330c      	adds	r3, #12
 801a452:	681b      	ldr	r3, [r3, #0]
 801a454:	405a      	eors	r2, r3
 801a456:	683b      	ldr	r3, [r7, #0]
 801a458:	f103 0438 	add.w	r4, r3, #56	; 0x38
 801a45c:	2108      	movs	r1, #8
 801a45e:	4610      	mov	r0, r2
 801a460:	f7fd fcee 	bl	8017e40 <rotr32>
 801a464:	4603      	mov	r3, r0
 801a466:	6023      	str	r3, [r4, #0]
 801a468:	683b      	ldr	r3, [r7, #0]
 801a46a:	3324      	adds	r3, #36	; 0x24
 801a46c:	6819      	ldr	r1, [r3, #0]
 801a46e:	683b      	ldr	r3, [r7, #0]
 801a470:	3338      	adds	r3, #56	; 0x38
 801a472:	681a      	ldr	r2, [r3, #0]
 801a474:	683b      	ldr	r3, [r7, #0]
 801a476:	3324      	adds	r3, #36	; 0x24
 801a478:	440a      	add	r2, r1
 801a47a:	601a      	str	r2, [r3, #0]
 801a47c:	683b      	ldr	r3, [r7, #0]
 801a47e:	3310      	adds	r3, #16
 801a480:	681a      	ldr	r2, [r3, #0]
 801a482:	683b      	ldr	r3, [r7, #0]
 801a484:	3324      	adds	r3, #36	; 0x24
 801a486:	681b      	ldr	r3, [r3, #0]
 801a488:	405a      	eors	r2, r3
 801a48a:	683b      	ldr	r3, [r7, #0]
 801a48c:	f103 0410 	add.w	r4, r3, #16
 801a490:	2107      	movs	r1, #7
 801a492:	4610      	mov	r0, r2
 801a494:	f7fd fcd4 	bl	8017e40 <rotr32>
 801a498:	4603      	mov	r3, r0
 801a49a:	6023      	str	r3, [r4, #0]
  ROUND( 5 );
 801a49c:	683b      	ldr	r3, [r7, #0]
 801a49e:	681a      	ldr	r2, [r3, #0]
 801a4a0:	683b      	ldr	r3, [r7, #0]
 801a4a2:	3310      	adds	r3, #16
 801a4a4:	681b      	ldr	r3, [r3, #0]
 801a4a6:	441a      	add	r2, r3
 801a4a8:	2302      	movs	r3, #2
 801a4aa:	009b      	lsls	r3, r3, #2
 801a4ac:	6879      	ldr	r1, [r7, #4]
 801a4ae:	440b      	add	r3, r1
 801a4b0:	681b      	ldr	r3, [r3, #0]
 801a4b2:	441a      	add	r2, r3
 801a4b4:	683b      	ldr	r3, [r7, #0]
 801a4b6:	601a      	str	r2, [r3, #0]
 801a4b8:	683b      	ldr	r3, [r7, #0]
 801a4ba:	3330      	adds	r3, #48	; 0x30
 801a4bc:	681a      	ldr	r2, [r3, #0]
 801a4be:	683b      	ldr	r3, [r7, #0]
 801a4c0:	681b      	ldr	r3, [r3, #0]
 801a4c2:	405a      	eors	r2, r3
 801a4c4:	683b      	ldr	r3, [r7, #0]
 801a4c6:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801a4ca:	2110      	movs	r1, #16
 801a4cc:	4610      	mov	r0, r2
 801a4ce:	f7fd fcb7 	bl	8017e40 <rotr32>
 801a4d2:	4603      	mov	r3, r0
 801a4d4:	6023      	str	r3, [r4, #0]
 801a4d6:	683b      	ldr	r3, [r7, #0]
 801a4d8:	3320      	adds	r3, #32
 801a4da:	6819      	ldr	r1, [r3, #0]
 801a4dc:	683b      	ldr	r3, [r7, #0]
 801a4de:	3330      	adds	r3, #48	; 0x30
 801a4e0:	681a      	ldr	r2, [r3, #0]
 801a4e2:	683b      	ldr	r3, [r7, #0]
 801a4e4:	3320      	adds	r3, #32
 801a4e6:	440a      	add	r2, r1
 801a4e8:	601a      	str	r2, [r3, #0]
 801a4ea:	683b      	ldr	r3, [r7, #0]
 801a4ec:	3310      	adds	r3, #16
 801a4ee:	681a      	ldr	r2, [r3, #0]
 801a4f0:	683b      	ldr	r3, [r7, #0]
 801a4f2:	3320      	adds	r3, #32
 801a4f4:	681b      	ldr	r3, [r3, #0]
 801a4f6:	405a      	eors	r2, r3
 801a4f8:	683b      	ldr	r3, [r7, #0]
 801a4fa:	f103 0410 	add.w	r4, r3, #16
 801a4fe:	210c      	movs	r1, #12
 801a500:	4610      	mov	r0, r2
 801a502:	f7fd fc9d 	bl	8017e40 <rotr32>
 801a506:	4603      	mov	r3, r0
 801a508:	6023      	str	r3, [r4, #0]
 801a50a:	683b      	ldr	r3, [r7, #0]
 801a50c:	681a      	ldr	r2, [r3, #0]
 801a50e:	683b      	ldr	r3, [r7, #0]
 801a510:	3310      	adds	r3, #16
 801a512:	681b      	ldr	r3, [r3, #0]
 801a514:	441a      	add	r2, r3
 801a516:	230c      	movs	r3, #12
 801a518:	009b      	lsls	r3, r3, #2
 801a51a:	6879      	ldr	r1, [r7, #4]
 801a51c:	440b      	add	r3, r1
 801a51e:	681b      	ldr	r3, [r3, #0]
 801a520:	441a      	add	r2, r3
 801a522:	683b      	ldr	r3, [r7, #0]
 801a524:	601a      	str	r2, [r3, #0]
 801a526:	683b      	ldr	r3, [r7, #0]
 801a528:	3330      	adds	r3, #48	; 0x30
 801a52a:	681a      	ldr	r2, [r3, #0]
 801a52c:	683b      	ldr	r3, [r7, #0]
 801a52e:	681b      	ldr	r3, [r3, #0]
 801a530:	405a      	eors	r2, r3
 801a532:	683b      	ldr	r3, [r7, #0]
 801a534:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801a538:	2108      	movs	r1, #8
 801a53a:	4610      	mov	r0, r2
 801a53c:	f7fd fc80 	bl	8017e40 <rotr32>
 801a540:	4603      	mov	r3, r0
 801a542:	6023      	str	r3, [r4, #0]
 801a544:	683b      	ldr	r3, [r7, #0]
 801a546:	3320      	adds	r3, #32
 801a548:	6819      	ldr	r1, [r3, #0]
 801a54a:	683b      	ldr	r3, [r7, #0]
 801a54c:	3330      	adds	r3, #48	; 0x30
 801a54e:	681a      	ldr	r2, [r3, #0]
 801a550:	683b      	ldr	r3, [r7, #0]
 801a552:	3320      	adds	r3, #32
 801a554:	440a      	add	r2, r1
 801a556:	601a      	str	r2, [r3, #0]
 801a558:	683b      	ldr	r3, [r7, #0]
 801a55a:	3310      	adds	r3, #16
 801a55c:	681a      	ldr	r2, [r3, #0]
 801a55e:	683b      	ldr	r3, [r7, #0]
 801a560:	3320      	adds	r3, #32
 801a562:	681b      	ldr	r3, [r3, #0]
 801a564:	405a      	eors	r2, r3
 801a566:	683b      	ldr	r3, [r7, #0]
 801a568:	f103 0410 	add.w	r4, r3, #16
 801a56c:	2107      	movs	r1, #7
 801a56e:	4610      	mov	r0, r2
 801a570:	f7fd fc66 	bl	8017e40 <rotr32>
 801a574:	4603      	mov	r3, r0
 801a576:	6023      	str	r3, [r4, #0]
 801a578:	683b      	ldr	r3, [r7, #0]
 801a57a:	3304      	adds	r3, #4
 801a57c:	681a      	ldr	r2, [r3, #0]
 801a57e:	683b      	ldr	r3, [r7, #0]
 801a580:	3314      	adds	r3, #20
 801a582:	681b      	ldr	r3, [r3, #0]
 801a584:	18d1      	adds	r1, r2, r3
 801a586:	2306      	movs	r3, #6
 801a588:	009b      	lsls	r3, r3, #2
 801a58a:	687a      	ldr	r2, [r7, #4]
 801a58c:	4413      	add	r3, r2
 801a58e:	681a      	ldr	r2, [r3, #0]
 801a590:	683b      	ldr	r3, [r7, #0]
 801a592:	3304      	adds	r3, #4
 801a594:	440a      	add	r2, r1
 801a596:	601a      	str	r2, [r3, #0]
 801a598:	683b      	ldr	r3, [r7, #0]
 801a59a:	3334      	adds	r3, #52	; 0x34
 801a59c:	681a      	ldr	r2, [r3, #0]
 801a59e:	683b      	ldr	r3, [r7, #0]
 801a5a0:	3304      	adds	r3, #4
 801a5a2:	681b      	ldr	r3, [r3, #0]
 801a5a4:	405a      	eors	r2, r3
 801a5a6:	683b      	ldr	r3, [r7, #0]
 801a5a8:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801a5ac:	2110      	movs	r1, #16
 801a5ae:	4610      	mov	r0, r2
 801a5b0:	f7fd fc46 	bl	8017e40 <rotr32>
 801a5b4:	4603      	mov	r3, r0
 801a5b6:	6023      	str	r3, [r4, #0]
 801a5b8:	683b      	ldr	r3, [r7, #0]
 801a5ba:	3324      	adds	r3, #36	; 0x24
 801a5bc:	6819      	ldr	r1, [r3, #0]
 801a5be:	683b      	ldr	r3, [r7, #0]
 801a5c0:	3334      	adds	r3, #52	; 0x34
 801a5c2:	681a      	ldr	r2, [r3, #0]
 801a5c4:	683b      	ldr	r3, [r7, #0]
 801a5c6:	3324      	adds	r3, #36	; 0x24
 801a5c8:	440a      	add	r2, r1
 801a5ca:	601a      	str	r2, [r3, #0]
 801a5cc:	683b      	ldr	r3, [r7, #0]
 801a5ce:	3314      	adds	r3, #20
 801a5d0:	681a      	ldr	r2, [r3, #0]
 801a5d2:	683b      	ldr	r3, [r7, #0]
 801a5d4:	3324      	adds	r3, #36	; 0x24
 801a5d6:	681b      	ldr	r3, [r3, #0]
 801a5d8:	405a      	eors	r2, r3
 801a5da:	683b      	ldr	r3, [r7, #0]
 801a5dc:	f103 0414 	add.w	r4, r3, #20
 801a5e0:	210c      	movs	r1, #12
 801a5e2:	4610      	mov	r0, r2
 801a5e4:	f7fd fc2c 	bl	8017e40 <rotr32>
 801a5e8:	4603      	mov	r3, r0
 801a5ea:	6023      	str	r3, [r4, #0]
 801a5ec:	683b      	ldr	r3, [r7, #0]
 801a5ee:	3304      	adds	r3, #4
 801a5f0:	681a      	ldr	r2, [r3, #0]
 801a5f2:	683b      	ldr	r3, [r7, #0]
 801a5f4:	3314      	adds	r3, #20
 801a5f6:	681b      	ldr	r3, [r3, #0]
 801a5f8:	18d1      	adds	r1, r2, r3
 801a5fa:	230a      	movs	r3, #10
 801a5fc:	009b      	lsls	r3, r3, #2
 801a5fe:	687a      	ldr	r2, [r7, #4]
 801a600:	4413      	add	r3, r2
 801a602:	681a      	ldr	r2, [r3, #0]
 801a604:	683b      	ldr	r3, [r7, #0]
 801a606:	3304      	adds	r3, #4
 801a608:	440a      	add	r2, r1
 801a60a:	601a      	str	r2, [r3, #0]
 801a60c:	683b      	ldr	r3, [r7, #0]
 801a60e:	3334      	adds	r3, #52	; 0x34
 801a610:	681a      	ldr	r2, [r3, #0]
 801a612:	683b      	ldr	r3, [r7, #0]
 801a614:	3304      	adds	r3, #4
 801a616:	681b      	ldr	r3, [r3, #0]
 801a618:	405a      	eors	r2, r3
 801a61a:	683b      	ldr	r3, [r7, #0]
 801a61c:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801a620:	2108      	movs	r1, #8
 801a622:	4610      	mov	r0, r2
 801a624:	f7fd fc0c 	bl	8017e40 <rotr32>
 801a628:	4603      	mov	r3, r0
 801a62a:	6023      	str	r3, [r4, #0]
 801a62c:	683b      	ldr	r3, [r7, #0]
 801a62e:	3324      	adds	r3, #36	; 0x24
 801a630:	6819      	ldr	r1, [r3, #0]
 801a632:	683b      	ldr	r3, [r7, #0]
 801a634:	3334      	adds	r3, #52	; 0x34
 801a636:	681a      	ldr	r2, [r3, #0]
 801a638:	683b      	ldr	r3, [r7, #0]
 801a63a:	3324      	adds	r3, #36	; 0x24
 801a63c:	440a      	add	r2, r1
 801a63e:	601a      	str	r2, [r3, #0]
 801a640:	683b      	ldr	r3, [r7, #0]
 801a642:	3314      	adds	r3, #20
 801a644:	681a      	ldr	r2, [r3, #0]
 801a646:	683b      	ldr	r3, [r7, #0]
 801a648:	3324      	adds	r3, #36	; 0x24
 801a64a:	681b      	ldr	r3, [r3, #0]
 801a64c:	405a      	eors	r2, r3
 801a64e:	683b      	ldr	r3, [r7, #0]
 801a650:	f103 0414 	add.w	r4, r3, #20
 801a654:	2107      	movs	r1, #7
 801a656:	4610      	mov	r0, r2
 801a658:	f7fd fbf2 	bl	8017e40 <rotr32>
 801a65c:	4603      	mov	r3, r0
 801a65e:	6023      	str	r3, [r4, #0]
 801a660:	683b      	ldr	r3, [r7, #0]
 801a662:	3308      	adds	r3, #8
 801a664:	681a      	ldr	r2, [r3, #0]
 801a666:	683b      	ldr	r3, [r7, #0]
 801a668:	3318      	adds	r3, #24
 801a66a:	681b      	ldr	r3, [r3, #0]
 801a66c:	18d1      	adds	r1, r2, r3
 801a66e:	2300      	movs	r3, #0
 801a670:	009b      	lsls	r3, r3, #2
 801a672:	687a      	ldr	r2, [r7, #4]
 801a674:	4413      	add	r3, r2
 801a676:	681a      	ldr	r2, [r3, #0]
 801a678:	683b      	ldr	r3, [r7, #0]
 801a67a:	3308      	adds	r3, #8
 801a67c:	440a      	add	r2, r1
 801a67e:	601a      	str	r2, [r3, #0]
 801a680:	683b      	ldr	r3, [r7, #0]
 801a682:	3338      	adds	r3, #56	; 0x38
 801a684:	681a      	ldr	r2, [r3, #0]
 801a686:	683b      	ldr	r3, [r7, #0]
 801a688:	3308      	adds	r3, #8
 801a68a:	681b      	ldr	r3, [r3, #0]
 801a68c:	405a      	eors	r2, r3
 801a68e:	683b      	ldr	r3, [r7, #0]
 801a690:	f103 0438 	add.w	r4, r3, #56	; 0x38
 801a694:	2110      	movs	r1, #16
 801a696:	4610      	mov	r0, r2
 801a698:	f7fd fbd2 	bl	8017e40 <rotr32>
 801a69c:	4603      	mov	r3, r0
 801a69e:	6023      	str	r3, [r4, #0]
 801a6a0:	683b      	ldr	r3, [r7, #0]
 801a6a2:	3328      	adds	r3, #40	; 0x28
 801a6a4:	6819      	ldr	r1, [r3, #0]
 801a6a6:	683b      	ldr	r3, [r7, #0]
 801a6a8:	3338      	adds	r3, #56	; 0x38
 801a6aa:	681a      	ldr	r2, [r3, #0]
 801a6ac:	683b      	ldr	r3, [r7, #0]
 801a6ae:	3328      	adds	r3, #40	; 0x28
 801a6b0:	440a      	add	r2, r1
 801a6b2:	601a      	str	r2, [r3, #0]
 801a6b4:	683b      	ldr	r3, [r7, #0]
 801a6b6:	3318      	adds	r3, #24
 801a6b8:	681a      	ldr	r2, [r3, #0]
 801a6ba:	683b      	ldr	r3, [r7, #0]
 801a6bc:	3328      	adds	r3, #40	; 0x28
 801a6be:	681b      	ldr	r3, [r3, #0]
 801a6c0:	405a      	eors	r2, r3
 801a6c2:	683b      	ldr	r3, [r7, #0]
 801a6c4:	f103 0418 	add.w	r4, r3, #24
 801a6c8:	210c      	movs	r1, #12
 801a6ca:	4610      	mov	r0, r2
 801a6cc:	f7fd fbb8 	bl	8017e40 <rotr32>
 801a6d0:	4603      	mov	r3, r0
 801a6d2:	6023      	str	r3, [r4, #0]
 801a6d4:	683b      	ldr	r3, [r7, #0]
 801a6d6:	3308      	adds	r3, #8
 801a6d8:	681a      	ldr	r2, [r3, #0]
 801a6da:	683b      	ldr	r3, [r7, #0]
 801a6dc:	3318      	adds	r3, #24
 801a6de:	681b      	ldr	r3, [r3, #0]
 801a6e0:	18d1      	adds	r1, r2, r3
 801a6e2:	230b      	movs	r3, #11
 801a6e4:	009b      	lsls	r3, r3, #2
 801a6e6:	687a      	ldr	r2, [r7, #4]
 801a6e8:	4413      	add	r3, r2
 801a6ea:	681a      	ldr	r2, [r3, #0]
 801a6ec:	683b      	ldr	r3, [r7, #0]
 801a6ee:	3308      	adds	r3, #8
 801a6f0:	440a      	add	r2, r1
 801a6f2:	601a      	str	r2, [r3, #0]
 801a6f4:	683b      	ldr	r3, [r7, #0]
 801a6f6:	3338      	adds	r3, #56	; 0x38
 801a6f8:	681a      	ldr	r2, [r3, #0]
 801a6fa:	683b      	ldr	r3, [r7, #0]
 801a6fc:	3308      	adds	r3, #8
 801a6fe:	681b      	ldr	r3, [r3, #0]
 801a700:	405a      	eors	r2, r3
 801a702:	683b      	ldr	r3, [r7, #0]
 801a704:	f103 0438 	add.w	r4, r3, #56	; 0x38
 801a708:	2108      	movs	r1, #8
 801a70a:	4610      	mov	r0, r2
 801a70c:	f7fd fb98 	bl	8017e40 <rotr32>
 801a710:	4603      	mov	r3, r0
 801a712:	6023      	str	r3, [r4, #0]
 801a714:	683b      	ldr	r3, [r7, #0]
 801a716:	3328      	adds	r3, #40	; 0x28
 801a718:	6819      	ldr	r1, [r3, #0]
 801a71a:	683b      	ldr	r3, [r7, #0]
 801a71c:	3338      	adds	r3, #56	; 0x38
 801a71e:	681a      	ldr	r2, [r3, #0]
 801a720:	683b      	ldr	r3, [r7, #0]
 801a722:	3328      	adds	r3, #40	; 0x28
 801a724:	440a      	add	r2, r1
 801a726:	601a      	str	r2, [r3, #0]
 801a728:	683b      	ldr	r3, [r7, #0]
 801a72a:	3318      	adds	r3, #24
 801a72c:	681a      	ldr	r2, [r3, #0]
 801a72e:	683b      	ldr	r3, [r7, #0]
 801a730:	3328      	adds	r3, #40	; 0x28
 801a732:	681b      	ldr	r3, [r3, #0]
 801a734:	405a      	eors	r2, r3
 801a736:	683b      	ldr	r3, [r7, #0]
 801a738:	f103 0418 	add.w	r4, r3, #24
 801a73c:	2107      	movs	r1, #7
 801a73e:	4610      	mov	r0, r2
 801a740:	f7fd fb7e 	bl	8017e40 <rotr32>
 801a744:	4603      	mov	r3, r0
 801a746:	6023      	str	r3, [r4, #0]
 801a748:	683b      	ldr	r3, [r7, #0]
 801a74a:	330c      	adds	r3, #12
 801a74c:	681a      	ldr	r2, [r3, #0]
 801a74e:	683b      	ldr	r3, [r7, #0]
 801a750:	331c      	adds	r3, #28
 801a752:	681b      	ldr	r3, [r3, #0]
 801a754:	18d1      	adds	r1, r2, r3
 801a756:	2308      	movs	r3, #8
 801a758:	009b      	lsls	r3, r3, #2
 801a75a:	687a      	ldr	r2, [r7, #4]
 801a75c:	4413      	add	r3, r2
 801a75e:	681a      	ldr	r2, [r3, #0]
 801a760:	683b      	ldr	r3, [r7, #0]
 801a762:	330c      	adds	r3, #12
 801a764:	440a      	add	r2, r1
 801a766:	601a      	str	r2, [r3, #0]
 801a768:	683b      	ldr	r3, [r7, #0]
 801a76a:	333c      	adds	r3, #60	; 0x3c
 801a76c:	681a      	ldr	r2, [r3, #0]
 801a76e:	683b      	ldr	r3, [r7, #0]
 801a770:	330c      	adds	r3, #12
 801a772:	681b      	ldr	r3, [r3, #0]
 801a774:	405a      	eors	r2, r3
 801a776:	683b      	ldr	r3, [r7, #0]
 801a778:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 801a77c:	2110      	movs	r1, #16
 801a77e:	4610      	mov	r0, r2
 801a780:	f7fd fb5e 	bl	8017e40 <rotr32>
 801a784:	4603      	mov	r3, r0
 801a786:	6023      	str	r3, [r4, #0]
 801a788:	683b      	ldr	r3, [r7, #0]
 801a78a:	332c      	adds	r3, #44	; 0x2c
 801a78c:	6819      	ldr	r1, [r3, #0]
 801a78e:	683b      	ldr	r3, [r7, #0]
 801a790:	333c      	adds	r3, #60	; 0x3c
 801a792:	681a      	ldr	r2, [r3, #0]
 801a794:	683b      	ldr	r3, [r7, #0]
 801a796:	332c      	adds	r3, #44	; 0x2c
 801a798:	440a      	add	r2, r1
 801a79a:	601a      	str	r2, [r3, #0]
 801a79c:	683b      	ldr	r3, [r7, #0]
 801a79e:	331c      	adds	r3, #28
 801a7a0:	681a      	ldr	r2, [r3, #0]
 801a7a2:	683b      	ldr	r3, [r7, #0]
 801a7a4:	332c      	adds	r3, #44	; 0x2c
 801a7a6:	681b      	ldr	r3, [r3, #0]
 801a7a8:	405a      	eors	r2, r3
 801a7aa:	683b      	ldr	r3, [r7, #0]
 801a7ac:	f103 041c 	add.w	r4, r3, #28
 801a7b0:	210c      	movs	r1, #12
 801a7b2:	4610      	mov	r0, r2
 801a7b4:	f7fd fb44 	bl	8017e40 <rotr32>
 801a7b8:	4603      	mov	r3, r0
 801a7ba:	6023      	str	r3, [r4, #0]
 801a7bc:	683b      	ldr	r3, [r7, #0]
 801a7be:	330c      	adds	r3, #12
 801a7c0:	681a      	ldr	r2, [r3, #0]
 801a7c2:	683b      	ldr	r3, [r7, #0]
 801a7c4:	331c      	adds	r3, #28
 801a7c6:	681b      	ldr	r3, [r3, #0]
 801a7c8:	18d1      	adds	r1, r2, r3
 801a7ca:	2303      	movs	r3, #3
 801a7cc:	009b      	lsls	r3, r3, #2
 801a7ce:	687a      	ldr	r2, [r7, #4]
 801a7d0:	4413      	add	r3, r2
 801a7d2:	681a      	ldr	r2, [r3, #0]
 801a7d4:	683b      	ldr	r3, [r7, #0]
 801a7d6:	330c      	adds	r3, #12
 801a7d8:	440a      	add	r2, r1
 801a7da:	601a      	str	r2, [r3, #0]
 801a7dc:	683b      	ldr	r3, [r7, #0]
 801a7de:	333c      	adds	r3, #60	; 0x3c
 801a7e0:	681a      	ldr	r2, [r3, #0]
 801a7e2:	683b      	ldr	r3, [r7, #0]
 801a7e4:	330c      	adds	r3, #12
 801a7e6:	681b      	ldr	r3, [r3, #0]
 801a7e8:	405a      	eors	r2, r3
 801a7ea:	683b      	ldr	r3, [r7, #0]
 801a7ec:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 801a7f0:	2108      	movs	r1, #8
 801a7f2:	4610      	mov	r0, r2
 801a7f4:	f7fd fb24 	bl	8017e40 <rotr32>
 801a7f8:	4603      	mov	r3, r0
 801a7fa:	6023      	str	r3, [r4, #0]
 801a7fc:	683b      	ldr	r3, [r7, #0]
 801a7fe:	332c      	adds	r3, #44	; 0x2c
 801a800:	6819      	ldr	r1, [r3, #0]
 801a802:	683b      	ldr	r3, [r7, #0]
 801a804:	333c      	adds	r3, #60	; 0x3c
 801a806:	681a      	ldr	r2, [r3, #0]
 801a808:	683b      	ldr	r3, [r7, #0]
 801a80a:	332c      	adds	r3, #44	; 0x2c
 801a80c:	440a      	add	r2, r1
 801a80e:	601a      	str	r2, [r3, #0]
 801a810:	683b      	ldr	r3, [r7, #0]
 801a812:	331c      	adds	r3, #28
 801a814:	681a      	ldr	r2, [r3, #0]
 801a816:	683b      	ldr	r3, [r7, #0]
 801a818:	332c      	adds	r3, #44	; 0x2c
 801a81a:	681b      	ldr	r3, [r3, #0]
 801a81c:	405a      	eors	r2, r3
 801a81e:	683b      	ldr	r3, [r7, #0]
 801a820:	f103 041c 	add.w	r4, r3, #28
 801a824:	2107      	movs	r1, #7
 801a826:	4610      	mov	r0, r2
 801a828:	f7fd fb0a 	bl	8017e40 <rotr32>
 801a82c:	4603      	mov	r3, r0
 801a82e:	6023      	str	r3, [r4, #0]
 801a830:	683b      	ldr	r3, [r7, #0]
 801a832:	681a      	ldr	r2, [r3, #0]
 801a834:	683b      	ldr	r3, [r7, #0]
 801a836:	3314      	adds	r3, #20
 801a838:	681b      	ldr	r3, [r3, #0]
 801a83a:	441a      	add	r2, r3
 801a83c:	2304      	movs	r3, #4
 801a83e:	009b      	lsls	r3, r3, #2
 801a840:	6879      	ldr	r1, [r7, #4]
 801a842:	440b      	add	r3, r1
 801a844:	681b      	ldr	r3, [r3, #0]
 801a846:	441a      	add	r2, r3
 801a848:	683b      	ldr	r3, [r7, #0]
 801a84a:	601a      	str	r2, [r3, #0]
 801a84c:	683b      	ldr	r3, [r7, #0]
 801a84e:	333c      	adds	r3, #60	; 0x3c
 801a850:	681a      	ldr	r2, [r3, #0]
 801a852:	683b      	ldr	r3, [r7, #0]
 801a854:	681b      	ldr	r3, [r3, #0]
 801a856:	405a      	eors	r2, r3
 801a858:	683b      	ldr	r3, [r7, #0]
 801a85a:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 801a85e:	2110      	movs	r1, #16
 801a860:	4610      	mov	r0, r2
 801a862:	f7fd faed 	bl	8017e40 <rotr32>
 801a866:	4603      	mov	r3, r0
 801a868:	6023      	str	r3, [r4, #0]
 801a86a:	683b      	ldr	r3, [r7, #0]
 801a86c:	3328      	adds	r3, #40	; 0x28
 801a86e:	6819      	ldr	r1, [r3, #0]
 801a870:	683b      	ldr	r3, [r7, #0]
 801a872:	333c      	adds	r3, #60	; 0x3c
 801a874:	681a      	ldr	r2, [r3, #0]
 801a876:	683b      	ldr	r3, [r7, #0]
 801a878:	3328      	adds	r3, #40	; 0x28
 801a87a:	440a      	add	r2, r1
 801a87c:	601a      	str	r2, [r3, #0]
 801a87e:	683b      	ldr	r3, [r7, #0]
 801a880:	3314      	adds	r3, #20
 801a882:	681a      	ldr	r2, [r3, #0]
 801a884:	683b      	ldr	r3, [r7, #0]
 801a886:	3328      	adds	r3, #40	; 0x28
 801a888:	681b      	ldr	r3, [r3, #0]
 801a88a:	405a      	eors	r2, r3
 801a88c:	683b      	ldr	r3, [r7, #0]
 801a88e:	f103 0414 	add.w	r4, r3, #20
 801a892:	210c      	movs	r1, #12
 801a894:	4610      	mov	r0, r2
 801a896:	f7fd fad3 	bl	8017e40 <rotr32>
 801a89a:	4603      	mov	r3, r0
 801a89c:	6023      	str	r3, [r4, #0]
 801a89e:	683b      	ldr	r3, [r7, #0]
 801a8a0:	681a      	ldr	r2, [r3, #0]
 801a8a2:	683b      	ldr	r3, [r7, #0]
 801a8a4:	3314      	adds	r3, #20
 801a8a6:	681b      	ldr	r3, [r3, #0]
 801a8a8:	441a      	add	r2, r3
 801a8aa:	230d      	movs	r3, #13
 801a8ac:	009b      	lsls	r3, r3, #2
 801a8ae:	6879      	ldr	r1, [r7, #4]
 801a8b0:	440b      	add	r3, r1
 801a8b2:	681b      	ldr	r3, [r3, #0]
 801a8b4:	441a      	add	r2, r3
 801a8b6:	683b      	ldr	r3, [r7, #0]
 801a8b8:	601a      	str	r2, [r3, #0]
 801a8ba:	683b      	ldr	r3, [r7, #0]
 801a8bc:	333c      	adds	r3, #60	; 0x3c
 801a8be:	681a      	ldr	r2, [r3, #0]
 801a8c0:	683b      	ldr	r3, [r7, #0]
 801a8c2:	681b      	ldr	r3, [r3, #0]
 801a8c4:	405a      	eors	r2, r3
 801a8c6:	683b      	ldr	r3, [r7, #0]
 801a8c8:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 801a8cc:	2108      	movs	r1, #8
 801a8ce:	4610      	mov	r0, r2
 801a8d0:	f7fd fab6 	bl	8017e40 <rotr32>
 801a8d4:	4603      	mov	r3, r0
 801a8d6:	6023      	str	r3, [r4, #0]
 801a8d8:	683b      	ldr	r3, [r7, #0]
 801a8da:	3328      	adds	r3, #40	; 0x28
 801a8dc:	6819      	ldr	r1, [r3, #0]
 801a8de:	683b      	ldr	r3, [r7, #0]
 801a8e0:	333c      	adds	r3, #60	; 0x3c
 801a8e2:	681a      	ldr	r2, [r3, #0]
 801a8e4:	683b      	ldr	r3, [r7, #0]
 801a8e6:	3328      	adds	r3, #40	; 0x28
 801a8e8:	440a      	add	r2, r1
 801a8ea:	601a      	str	r2, [r3, #0]
 801a8ec:	683b      	ldr	r3, [r7, #0]
 801a8ee:	3314      	adds	r3, #20
 801a8f0:	681a      	ldr	r2, [r3, #0]
 801a8f2:	683b      	ldr	r3, [r7, #0]
 801a8f4:	3328      	adds	r3, #40	; 0x28
 801a8f6:	681b      	ldr	r3, [r3, #0]
 801a8f8:	405a      	eors	r2, r3
 801a8fa:	683b      	ldr	r3, [r7, #0]
 801a8fc:	f103 0414 	add.w	r4, r3, #20
 801a900:	2107      	movs	r1, #7
 801a902:	4610      	mov	r0, r2
 801a904:	f7fd fa9c 	bl	8017e40 <rotr32>
 801a908:	4603      	mov	r3, r0
 801a90a:	6023      	str	r3, [r4, #0]
 801a90c:	683b      	ldr	r3, [r7, #0]
 801a90e:	3304      	adds	r3, #4
 801a910:	681a      	ldr	r2, [r3, #0]
 801a912:	683b      	ldr	r3, [r7, #0]
 801a914:	3318      	adds	r3, #24
 801a916:	681b      	ldr	r3, [r3, #0]
 801a918:	18d1      	adds	r1, r2, r3
 801a91a:	2307      	movs	r3, #7
 801a91c:	009b      	lsls	r3, r3, #2
 801a91e:	687a      	ldr	r2, [r7, #4]
 801a920:	4413      	add	r3, r2
 801a922:	681a      	ldr	r2, [r3, #0]
 801a924:	683b      	ldr	r3, [r7, #0]
 801a926:	3304      	adds	r3, #4
 801a928:	440a      	add	r2, r1
 801a92a:	601a      	str	r2, [r3, #0]
 801a92c:	683b      	ldr	r3, [r7, #0]
 801a92e:	3330      	adds	r3, #48	; 0x30
 801a930:	681a      	ldr	r2, [r3, #0]
 801a932:	683b      	ldr	r3, [r7, #0]
 801a934:	3304      	adds	r3, #4
 801a936:	681b      	ldr	r3, [r3, #0]
 801a938:	405a      	eors	r2, r3
 801a93a:	683b      	ldr	r3, [r7, #0]
 801a93c:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801a940:	2110      	movs	r1, #16
 801a942:	4610      	mov	r0, r2
 801a944:	f7fd fa7c 	bl	8017e40 <rotr32>
 801a948:	4603      	mov	r3, r0
 801a94a:	6023      	str	r3, [r4, #0]
 801a94c:	683b      	ldr	r3, [r7, #0]
 801a94e:	332c      	adds	r3, #44	; 0x2c
 801a950:	6819      	ldr	r1, [r3, #0]
 801a952:	683b      	ldr	r3, [r7, #0]
 801a954:	3330      	adds	r3, #48	; 0x30
 801a956:	681a      	ldr	r2, [r3, #0]
 801a958:	683b      	ldr	r3, [r7, #0]
 801a95a:	332c      	adds	r3, #44	; 0x2c
 801a95c:	440a      	add	r2, r1
 801a95e:	601a      	str	r2, [r3, #0]
 801a960:	683b      	ldr	r3, [r7, #0]
 801a962:	3318      	adds	r3, #24
 801a964:	681a      	ldr	r2, [r3, #0]
 801a966:	683b      	ldr	r3, [r7, #0]
 801a968:	332c      	adds	r3, #44	; 0x2c
 801a96a:	681b      	ldr	r3, [r3, #0]
 801a96c:	405a      	eors	r2, r3
 801a96e:	683b      	ldr	r3, [r7, #0]
 801a970:	f103 0418 	add.w	r4, r3, #24
 801a974:	210c      	movs	r1, #12
 801a976:	4610      	mov	r0, r2
 801a978:	f7fd fa62 	bl	8017e40 <rotr32>
 801a97c:	4603      	mov	r3, r0
 801a97e:	6023      	str	r3, [r4, #0]
 801a980:	683b      	ldr	r3, [r7, #0]
 801a982:	3304      	adds	r3, #4
 801a984:	681a      	ldr	r2, [r3, #0]
 801a986:	683b      	ldr	r3, [r7, #0]
 801a988:	3318      	adds	r3, #24
 801a98a:	681b      	ldr	r3, [r3, #0]
 801a98c:	18d1      	adds	r1, r2, r3
 801a98e:	2305      	movs	r3, #5
 801a990:	009b      	lsls	r3, r3, #2
 801a992:	687a      	ldr	r2, [r7, #4]
 801a994:	4413      	add	r3, r2
 801a996:	681a      	ldr	r2, [r3, #0]
 801a998:	683b      	ldr	r3, [r7, #0]
 801a99a:	3304      	adds	r3, #4
 801a99c:	440a      	add	r2, r1
 801a99e:	601a      	str	r2, [r3, #0]
 801a9a0:	683b      	ldr	r3, [r7, #0]
 801a9a2:	3330      	adds	r3, #48	; 0x30
 801a9a4:	681a      	ldr	r2, [r3, #0]
 801a9a6:	683b      	ldr	r3, [r7, #0]
 801a9a8:	3304      	adds	r3, #4
 801a9aa:	681b      	ldr	r3, [r3, #0]
 801a9ac:	405a      	eors	r2, r3
 801a9ae:	683b      	ldr	r3, [r7, #0]
 801a9b0:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801a9b4:	2108      	movs	r1, #8
 801a9b6:	4610      	mov	r0, r2
 801a9b8:	f7fd fa42 	bl	8017e40 <rotr32>
 801a9bc:	4603      	mov	r3, r0
 801a9be:	6023      	str	r3, [r4, #0]
 801a9c0:	683b      	ldr	r3, [r7, #0]
 801a9c2:	332c      	adds	r3, #44	; 0x2c
 801a9c4:	6819      	ldr	r1, [r3, #0]
 801a9c6:	683b      	ldr	r3, [r7, #0]
 801a9c8:	3330      	adds	r3, #48	; 0x30
 801a9ca:	681a      	ldr	r2, [r3, #0]
 801a9cc:	683b      	ldr	r3, [r7, #0]
 801a9ce:	332c      	adds	r3, #44	; 0x2c
 801a9d0:	440a      	add	r2, r1
 801a9d2:	601a      	str	r2, [r3, #0]
 801a9d4:	683b      	ldr	r3, [r7, #0]
 801a9d6:	3318      	adds	r3, #24
 801a9d8:	681a      	ldr	r2, [r3, #0]
 801a9da:	683b      	ldr	r3, [r7, #0]
 801a9dc:	332c      	adds	r3, #44	; 0x2c
 801a9de:	681b      	ldr	r3, [r3, #0]
 801a9e0:	405a      	eors	r2, r3
 801a9e2:	683b      	ldr	r3, [r7, #0]
 801a9e4:	f103 0418 	add.w	r4, r3, #24
 801a9e8:	2107      	movs	r1, #7
 801a9ea:	4610      	mov	r0, r2
 801a9ec:	f7fd fa28 	bl	8017e40 <rotr32>
 801a9f0:	4603      	mov	r3, r0
 801a9f2:	6023      	str	r3, [r4, #0]
 801a9f4:	683b      	ldr	r3, [r7, #0]
 801a9f6:	3308      	adds	r3, #8
 801a9f8:	681a      	ldr	r2, [r3, #0]
 801a9fa:	683b      	ldr	r3, [r7, #0]
 801a9fc:	331c      	adds	r3, #28
 801a9fe:	681b      	ldr	r3, [r3, #0]
 801aa00:	18d1      	adds	r1, r2, r3
 801aa02:	230f      	movs	r3, #15
 801aa04:	009b      	lsls	r3, r3, #2
 801aa06:	687a      	ldr	r2, [r7, #4]
 801aa08:	4413      	add	r3, r2
 801aa0a:	681a      	ldr	r2, [r3, #0]
 801aa0c:	683b      	ldr	r3, [r7, #0]
 801aa0e:	3308      	adds	r3, #8
 801aa10:	440a      	add	r2, r1
 801aa12:	601a      	str	r2, [r3, #0]
 801aa14:	683b      	ldr	r3, [r7, #0]
 801aa16:	3334      	adds	r3, #52	; 0x34
 801aa18:	681a      	ldr	r2, [r3, #0]
 801aa1a:	683b      	ldr	r3, [r7, #0]
 801aa1c:	3308      	adds	r3, #8
 801aa1e:	681b      	ldr	r3, [r3, #0]
 801aa20:	405a      	eors	r2, r3
 801aa22:	683b      	ldr	r3, [r7, #0]
 801aa24:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801aa28:	2110      	movs	r1, #16
 801aa2a:	4610      	mov	r0, r2
 801aa2c:	f7fd fa08 	bl	8017e40 <rotr32>
 801aa30:	4603      	mov	r3, r0
 801aa32:	6023      	str	r3, [r4, #0]
 801aa34:	683b      	ldr	r3, [r7, #0]
 801aa36:	3320      	adds	r3, #32
 801aa38:	6819      	ldr	r1, [r3, #0]
 801aa3a:	683b      	ldr	r3, [r7, #0]
 801aa3c:	3334      	adds	r3, #52	; 0x34
 801aa3e:	681a      	ldr	r2, [r3, #0]
 801aa40:	683b      	ldr	r3, [r7, #0]
 801aa42:	3320      	adds	r3, #32
 801aa44:	440a      	add	r2, r1
 801aa46:	601a      	str	r2, [r3, #0]
 801aa48:	683b      	ldr	r3, [r7, #0]
 801aa4a:	331c      	adds	r3, #28
 801aa4c:	681a      	ldr	r2, [r3, #0]
 801aa4e:	683b      	ldr	r3, [r7, #0]
 801aa50:	3320      	adds	r3, #32
 801aa52:	681b      	ldr	r3, [r3, #0]
 801aa54:	405a      	eors	r2, r3
 801aa56:	683b      	ldr	r3, [r7, #0]
 801aa58:	f103 041c 	add.w	r4, r3, #28
 801aa5c:	210c      	movs	r1, #12
 801aa5e:	4610      	mov	r0, r2
 801aa60:	f7fd f9ee 	bl	8017e40 <rotr32>
 801aa64:	4603      	mov	r3, r0
 801aa66:	6023      	str	r3, [r4, #0]
 801aa68:	683b      	ldr	r3, [r7, #0]
 801aa6a:	3308      	adds	r3, #8
 801aa6c:	681a      	ldr	r2, [r3, #0]
 801aa6e:	683b      	ldr	r3, [r7, #0]
 801aa70:	331c      	adds	r3, #28
 801aa72:	681b      	ldr	r3, [r3, #0]
 801aa74:	18d1      	adds	r1, r2, r3
 801aa76:	230e      	movs	r3, #14
 801aa78:	009b      	lsls	r3, r3, #2
 801aa7a:	687a      	ldr	r2, [r7, #4]
 801aa7c:	4413      	add	r3, r2
 801aa7e:	681a      	ldr	r2, [r3, #0]
 801aa80:	683b      	ldr	r3, [r7, #0]
 801aa82:	3308      	adds	r3, #8
 801aa84:	440a      	add	r2, r1
 801aa86:	601a      	str	r2, [r3, #0]
 801aa88:	683b      	ldr	r3, [r7, #0]
 801aa8a:	3334      	adds	r3, #52	; 0x34
 801aa8c:	681a      	ldr	r2, [r3, #0]
 801aa8e:	683b      	ldr	r3, [r7, #0]
 801aa90:	3308      	adds	r3, #8
 801aa92:	681b      	ldr	r3, [r3, #0]
 801aa94:	405a      	eors	r2, r3
 801aa96:	683b      	ldr	r3, [r7, #0]
 801aa98:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801aa9c:	2108      	movs	r1, #8
 801aa9e:	4610      	mov	r0, r2
 801aaa0:	f7fd f9ce 	bl	8017e40 <rotr32>
 801aaa4:	4603      	mov	r3, r0
 801aaa6:	6023      	str	r3, [r4, #0]
 801aaa8:	683b      	ldr	r3, [r7, #0]
 801aaaa:	3320      	adds	r3, #32
 801aaac:	6819      	ldr	r1, [r3, #0]
 801aaae:	683b      	ldr	r3, [r7, #0]
 801aab0:	3334      	adds	r3, #52	; 0x34
 801aab2:	681a      	ldr	r2, [r3, #0]
 801aab4:	683b      	ldr	r3, [r7, #0]
 801aab6:	3320      	adds	r3, #32
 801aab8:	440a      	add	r2, r1
 801aaba:	601a      	str	r2, [r3, #0]
 801aabc:	683b      	ldr	r3, [r7, #0]
 801aabe:	331c      	adds	r3, #28
 801aac0:	681a      	ldr	r2, [r3, #0]
 801aac2:	683b      	ldr	r3, [r7, #0]
 801aac4:	3320      	adds	r3, #32
 801aac6:	681b      	ldr	r3, [r3, #0]
 801aac8:	405a      	eors	r2, r3
 801aaca:	683b      	ldr	r3, [r7, #0]
 801aacc:	f103 041c 	add.w	r4, r3, #28
 801aad0:	2107      	movs	r1, #7
 801aad2:	4610      	mov	r0, r2
 801aad4:	f7fd f9b4 	bl	8017e40 <rotr32>
 801aad8:	4603      	mov	r3, r0
 801aada:	6023      	str	r3, [r4, #0]
 801aadc:	683b      	ldr	r3, [r7, #0]
 801aade:	330c      	adds	r3, #12
 801aae0:	681a      	ldr	r2, [r3, #0]
 801aae2:	683b      	ldr	r3, [r7, #0]
 801aae4:	3310      	adds	r3, #16
 801aae6:	681b      	ldr	r3, [r3, #0]
 801aae8:	18d1      	adds	r1, r2, r3
 801aaea:	2301      	movs	r3, #1
 801aaec:	009b      	lsls	r3, r3, #2
 801aaee:	687a      	ldr	r2, [r7, #4]
 801aaf0:	4413      	add	r3, r2
 801aaf2:	681a      	ldr	r2, [r3, #0]
 801aaf4:	683b      	ldr	r3, [r7, #0]
 801aaf6:	330c      	adds	r3, #12
 801aaf8:	440a      	add	r2, r1
 801aafa:	601a      	str	r2, [r3, #0]
 801aafc:	683b      	ldr	r3, [r7, #0]
 801aafe:	3338      	adds	r3, #56	; 0x38
 801ab00:	681a      	ldr	r2, [r3, #0]
 801ab02:	683b      	ldr	r3, [r7, #0]
 801ab04:	330c      	adds	r3, #12
 801ab06:	681b      	ldr	r3, [r3, #0]
 801ab08:	405a      	eors	r2, r3
 801ab0a:	683b      	ldr	r3, [r7, #0]
 801ab0c:	f103 0438 	add.w	r4, r3, #56	; 0x38
 801ab10:	2110      	movs	r1, #16
 801ab12:	4610      	mov	r0, r2
 801ab14:	f7fd f994 	bl	8017e40 <rotr32>
 801ab18:	4603      	mov	r3, r0
 801ab1a:	6023      	str	r3, [r4, #0]
 801ab1c:	683b      	ldr	r3, [r7, #0]
 801ab1e:	3324      	adds	r3, #36	; 0x24
 801ab20:	6819      	ldr	r1, [r3, #0]
 801ab22:	683b      	ldr	r3, [r7, #0]
 801ab24:	3338      	adds	r3, #56	; 0x38
 801ab26:	681a      	ldr	r2, [r3, #0]
 801ab28:	683b      	ldr	r3, [r7, #0]
 801ab2a:	3324      	adds	r3, #36	; 0x24
 801ab2c:	440a      	add	r2, r1
 801ab2e:	601a      	str	r2, [r3, #0]
 801ab30:	683b      	ldr	r3, [r7, #0]
 801ab32:	3310      	adds	r3, #16
 801ab34:	681a      	ldr	r2, [r3, #0]
 801ab36:	683b      	ldr	r3, [r7, #0]
 801ab38:	3324      	adds	r3, #36	; 0x24
 801ab3a:	681b      	ldr	r3, [r3, #0]
 801ab3c:	405a      	eors	r2, r3
 801ab3e:	683b      	ldr	r3, [r7, #0]
 801ab40:	f103 0410 	add.w	r4, r3, #16
 801ab44:	210c      	movs	r1, #12
 801ab46:	4610      	mov	r0, r2
 801ab48:	f7fd f97a 	bl	8017e40 <rotr32>
 801ab4c:	4603      	mov	r3, r0
 801ab4e:	6023      	str	r3, [r4, #0]
 801ab50:	683b      	ldr	r3, [r7, #0]
 801ab52:	330c      	adds	r3, #12
 801ab54:	681a      	ldr	r2, [r3, #0]
 801ab56:	683b      	ldr	r3, [r7, #0]
 801ab58:	3310      	adds	r3, #16
 801ab5a:	681b      	ldr	r3, [r3, #0]
 801ab5c:	18d1      	adds	r1, r2, r3
 801ab5e:	2309      	movs	r3, #9
 801ab60:	009b      	lsls	r3, r3, #2
 801ab62:	687a      	ldr	r2, [r7, #4]
 801ab64:	4413      	add	r3, r2
 801ab66:	681a      	ldr	r2, [r3, #0]
 801ab68:	683b      	ldr	r3, [r7, #0]
 801ab6a:	330c      	adds	r3, #12
 801ab6c:	440a      	add	r2, r1
 801ab6e:	601a      	str	r2, [r3, #0]
 801ab70:	683b      	ldr	r3, [r7, #0]
 801ab72:	3338      	adds	r3, #56	; 0x38
 801ab74:	681a      	ldr	r2, [r3, #0]
 801ab76:	683b      	ldr	r3, [r7, #0]
 801ab78:	330c      	adds	r3, #12
 801ab7a:	681b      	ldr	r3, [r3, #0]
 801ab7c:	405a      	eors	r2, r3
 801ab7e:	683b      	ldr	r3, [r7, #0]
 801ab80:	f103 0438 	add.w	r4, r3, #56	; 0x38
 801ab84:	2108      	movs	r1, #8
 801ab86:	4610      	mov	r0, r2
 801ab88:	f7fd f95a 	bl	8017e40 <rotr32>
 801ab8c:	4603      	mov	r3, r0
 801ab8e:	6023      	str	r3, [r4, #0]
 801ab90:	683b      	ldr	r3, [r7, #0]
 801ab92:	3324      	adds	r3, #36	; 0x24
 801ab94:	6819      	ldr	r1, [r3, #0]
 801ab96:	683b      	ldr	r3, [r7, #0]
 801ab98:	3338      	adds	r3, #56	; 0x38
 801ab9a:	681a      	ldr	r2, [r3, #0]
 801ab9c:	683b      	ldr	r3, [r7, #0]
 801ab9e:	3324      	adds	r3, #36	; 0x24
 801aba0:	440a      	add	r2, r1
 801aba2:	601a      	str	r2, [r3, #0]
 801aba4:	683b      	ldr	r3, [r7, #0]
 801aba6:	3310      	adds	r3, #16
 801aba8:	681a      	ldr	r2, [r3, #0]
 801abaa:	683b      	ldr	r3, [r7, #0]
 801abac:	3324      	adds	r3, #36	; 0x24
 801abae:	681b      	ldr	r3, [r3, #0]
 801abb0:	405a      	eors	r2, r3
 801abb2:	683b      	ldr	r3, [r7, #0]
 801abb4:	f103 0410 	add.w	r4, r3, #16
 801abb8:	2107      	movs	r1, #7
 801abba:	4610      	mov	r0, r2
 801abbc:	f7fd f940 	bl	8017e40 <rotr32>
 801abc0:	4603      	mov	r3, r0
 801abc2:	6023      	str	r3, [r4, #0]
  ROUND( 6 );
 801abc4:	683b      	ldr	r3, [r7, #0]
 801abc6:	681a      	ldr	r2, [r3, #0]
 801abc8:	683b      	ldr	r3, [r7, #0]
 801abca:	3310      	adds	r3, #16
 801abcc:	681b      	ldr	r3, [r3, #0]
 801abce:	441a      	add	r2, r3
 801abd0:	230c      	movs	r3, #12
 801abd2:	009b      	lsls	r3, r3, #2
 801abd4:	6879      	ldr	r1, [r7, #4]
 801abd6:	440b      	add	r3, r1
 801abd8:	681b      	ldr	r3, [r3, #0]
 801abda:	441a      	add	r2, r3
 801abdc:	683b      	ldr	r3, [r7, #0]
 801abde:	601a      	str	r2, [r3, #0]
 801abe0:	683b      	ldr	r3, [r7, #0]
 801abe2:	3330      	adds	r3, #48	; 0x30
 801abe4:	681a      	ldr	r2, [r3, #0]
 801abe6:	683b      	ldr	r3, [r7, #0]
 801abe8:	681b      	ldr	r3, [r3, #0]
 801abea:	405a      	eors	r2, r3
 801abec:	683b      	ldr	r3, [r7, #0]
 801abee:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801abf2:	2110      	movs	r1, #16
 801abf4:	4610      	mov	r0, r2
 801abf6:	f7fd f923 	bl	8017e40 <rotr32>
 801abfa:	4603      	mov	r3, r0
 801abfc:	6023      	str	r3, [r4, #0]
 801abfe:	683b      	ldr	r3, [r7, #0]
 801ac00:	3320      	adds	r3, #32
 801ac02:	6819      	ldr	r1, [r3, #0]
 801ac04:	683b      	ldr	r3, [r7, #0]
 801ac06:	3330      	adds	r3, #48	; 0x30
 801ac08:	681a      	ldr	r2, [r3, #0]
 801ac0a:	683b      	ldr	r3, [r7, #0]
 801ac0c:	3320      	adds	r3, #32
 801ac0e:	440a      	add	r2, r1
 801ac10:	601a      	str	r2, [r3, #0]
 801ac12:	683b      	ldr	r3, [r7, #0]
 801ac14:	3310      	adds	r3, #16
 801ac16:	681a      	ldr	r2, [r3, #0]
 801ac18:	683b      	ldr	r3, [r7, #0]
 801ac1a:	3320      	adds	r3, #32
 801ac1c:	681b      	ldr	r3, [r3, #0]
 801ac1e:	405a      	eors	r2, r3
 801ac20:	683b      	ldr	r3, [r7, #0]
 801ac22:	f103 0410 	add.w	r4, r3, #16
 801ac26:	210c      	movs	r1, #12
 801ac28:	4610      	mov	r0, r2
 801ac2a:	f7fd f909 	bl	8017e40 <rotr32>
 801ac2e:	4603      	mov	r3, r0
 801ac30:	6023      	str	r3, [r4, #0]
 801ac32:	683b      	ldr	r3, [r7, #0]
 801ac34:	681a      	ldr	r2, [r3, #0]
 801ac36:	683b      	ldr	r3, [r7, #0]
 801ac38:	3310      	adds	r3, #16
 801ac3a:	681b      	ldr	r3, [r3, #0]
 801ac3c:	441a      	add	r2, r3
 801ac3e:	2305      	movs	r3, #5
 801ac40:	009b      	lsls	r3, r3, #2
 801ac42:	6879      	ldr	r1, [r7, #4]
 801ac44:	440b      	add	r3, r1
 801ac46:	681b      	ldr	r3, [r3, #0]
 801ac48:	441a      	add	r2, r3
 801ac4a:	683b      	ldr	r3, [r7, #0]
 801ac4c:	601a      	str	r2, [r3, #0]
 801ac4e:	683b      	ldr	r3, [r7, #0]
 801ac50:	3330      	adds	r3, #48	; 0x30
 801ac52:	681a      	ldr	r2, [r3, #0]
 801ac54:	683b      	ldr	r3, [r7, #0]
 801ac56:	681b      	ldr	r3, [r3, #0]
 801ac58:	405a      	eors	r2, r3
 801ac5a:	683b      	ldr	r3, [r7, #0]
 801ac5c:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801ac60:	2108      	movs	r1, #8
 801ac62:	4610      	mov	r0, r2
 801ac64:	f7fd f8ec 	bl	8017e40 <rotr32>
 801ac68:	4603      	mov	r3, r0
 801ac6a:	6023      	str	r3, [r4, #0]
 801ac6c:	683b      	ldr	r3, [r7, #0]
 801ac6e:	3320      	adds	r3, #32
 801ac70:	6819      	ldr	r1, [r3, #0]
 801ac72:	683b      	ldr	r3, [r7, #0]
 801ac74:	3330      	adds	r3, #48	; 0x30
 801ac76:	681a      	ldr	r2, [r3, #0]
 801ac78:	683b      	ldr	r3, [r7, #0]
 801ac7a:	3320      	adds	r3, #32
 801ac7c:	440a      	add	r2, r1
 801ac7e:	601a      	str	r2, [r3, #0]
 801ac80:	683b      	ldr	r3, [r7, #0]
 801ac82:	3310      	adds	r3, #16
 801ac84:	681a      	ldr	r2, [r3, #0]
 801ac86:	683b      	ldr	r3, [r7, #0]
 801ac88:	3320      	adds	r3, #32
 801ac8a:	681b      	ldr	r3, [r3, #0]
 801ac8c:	405a      	eors	r2, r3
 801ac8e:	683b      	ldr	r3, [r7, #0]
 801ac90:	f103 0410 	add.w	r4, r3, #16
 801ac94:	2107      	movs	r1, #7
 801ac96:	4610      	mov	r0, r2
 801ac98:	f7fd f8d2 	bl	8017e40 <rotr32>
 801ac9c:	4603      	mov	r3, r0
 801ac9e:	6023      	str	r3, [r4, #0]
 801aca0:	683b      	ldr	r3, [r7, #0]
 801aca2:	3304      	adds	r3, #4
 801aca4:	681a      	ldr	r2, [r3, #0]
 801aca6:	683b      	ldr	r3, [r7, #0]
 801aca8:	3314      	adds	r3, #20
 801acaa:	681b      	ldr	r3, [r3, #0]
 801acac:	18d1      	adds	r1, r2, r3
 801acae:	2301      	movs	r3, #1
 801acb0:	009b      	lsls	r3, r3, #2
 801acb2:	687a      	ldr	r2, [r7, #4]
 801acb4:	4413      	add	r3, r2
 801acb6:	681a      	ldr	r2, [r3, #0]
 801acb8:	683b      	ldr	r3, [r7, #0]
 801acba:	3304      	adds	r3, #4
 801acbc:	440a      	add	r2, r1
 801acbe:	601a      	str	r2, [r3, #0]
 801acc0:	683b      	ldr	r3, [r7, #0]
 801acc2:	3334      	adds	r3, #52	; 0x34
 801acc4:	681a      	ldr	r2, [r3, #0]
 801acc6:	683b      	ldr	r3, [r7, #0]
 801acc8:	3304      	adds	r3, #4
 801acca:	681b      	ldr	r3, [r3, #0]
 801accc:	405a      	eors	r2, r3
 801acce:	683b      	ldr	r3, [r7, #0]
 801acd0:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801acd4:	2110      	movs	r1, #16
 801acd6:	4610      	mov	r0, r2
 801acd8:	f7fd f8b2 	bl	8017e40 <rotr32>
 801acdc:	4603      	mov	r3, r0
 801acde:	6023      	str	r3, [r4, #0]
 801ace0:	683b      	ldr	r3, [r7, #0]
 801ace2:	3324      	adds	r3, #36	; 0x24
 801ace4:	6819      	ldr	r1, [r3, #0]
 801ace6:	683b      	ldr	r3, [r7, #0]
 801ace8:	3334      	adds	r3, #52	; 0x34
 801acea:	681a      	ldr	r2, [r3, #0]
 801acec:	683b      	ldr	r3, [r7, #0]
 801acee:	3324      	adds	r3, #36	; 0x24
 801acf0:	440a      	add	r2, r1
 801acf2:	601a      	str	r2, [r3, #0]
 801acf4:	683b      	ldr	r3, [r7, #0]
 801acf6:	3314      	adds	r3, #20
 801acf8:	681a      	ldr	r2, [r3, #0]
 801acfa:	683b      	ldr	r3, [r7, #0]
 801acfc:	3324      	adds	r3, #36	; 0x24
 801acfe:	681b      	ldr	r3, [r3, #0]
 801ad00:	405a      	eors	r2, r3
 801ad02:	683b      	ldr	r3, [r7, #0]
 801ad04:	f103 0414 	add.w	r4, r3, #20
 801ad08:	210c      	movs	r1, #12
 801ad0a:	4610      	mov	r0, r2
 801ad0c:	f7fd f898 	bl	8017e40 <rotr32>
 801ad10:	4603      	mov	r3, r0
 801ad12:	6023      	str	r3, [r4, #0]
 801ad14:	683b      	ldr	r3, [r7, #0]
 801ad16:	3304      	adds	r3, #4
 801ad18:	681a      	ldr	r2, [r3, #0]
 801ad1a:	683b      	ldr	r3, [r7, #0]
 801ad1c:	3314      	adds	r3, #20
 801ad1e:	681b      	ldr	r3, [r3, #0]
 801ad20:	18d1      	adds	r1, r2, r3
 801ad22:	230f      	movs	r3, #15
 801ad24:	009b      	lsls	r3, r3, #2
 801ad26:	687a      	ldr	r2, [r7, #4]
 801ad28:	4413      	add	r3, r2
 801ad2a:	681a      	ldr	r2, [r3, #0]
 801ad2c:	683b      	ldr	r3, [r7, #0]
 801ad2e:	3304      	adds	r3, #4
 801ad30:	440a      	add	r2, r1
 801ad32:	601a      	str	r2, [r3, #0]
 801ad34:	683b      	ldr	r3, [r7, #0]
 801ad36:	3334      	adds	r3, #52	; 0x34
 801ad38:	681a      	ldr	r2, [r3, #0]
 801ad3a:	683b      	ldr	r3, [r7, #0]
 801ad3c:	3304      	adds	r3, #4
 801ad3e:	681b      	ldr	r3, [r3, #0]
 801ad40:	405a      	eors	r2, r3
 801ad42:	683b      	ldr	r3, [r7, #0]
 801ad44:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801ad48:	2108      	movs	r1, #8
 801ad4a:	4610      	mov	r0, r2
 801ad4c:	f7fd f878 	bl	8017e40 <rotr32>
 801ad50:	4603      	mov	r3, r0
 801ad52:	6023      	str	r3, [r4, #0]
 801ad54:	683b      	ldr	r3, [r7, #0]
 801ad56:	3324      	adds	r3, #36	; 0x24
 801ad58:	6819      	ldr	r1, [r3, #0]
 801ad5a:	683b      	ldr	r3, [r7, #0]
 801ad5c:	3334      	adds	r3, #52	; 0x34
 801ad5e:	681a      	ldr	r2, [r3, #0]
 801ad60:	683b      	ldr	r3, [r7, #0]
 801ad62:	3324      	adds	r3, #36	; 0x24
 801ad64:	440a      	add	r2, r1
 801ad66:	601a      	str	r2, [r3, #0]
 801ad68:	683b      	ldr	r3, [r7, #0]
 801ad6a:	3314      	adds	r3, #20
 801ad6c:	681a      	ldr	r2, [r3, #0]
 801ad6e:	683b      	ldr	r3, [r7, #0]
 801ad70:	3324      	adds	r3, #36	; 0x24
 801ad72:	681b      	ldr	r3, [r3, #0]
 801ad74:	405a      	eors	r2, r3
 801ad76:	683b      	ldr	r3, [r7, #0]
 801ad78:	f103 0414 	add.w	r4, r3, #20
 801ad7c:	2107      	movs	r1, #7
 801ad7e:	4610      	mov	r0, r2
 801ad80:	f7fd f85e 	bl	8017e40 <rotr32>
 801ad84:	4603      	mov	r3, r0
 801ad86:	6023      	str	r3, [r4, #0]
 801ad88:	683b      	ldr	r3, [r7, #0]
 801ad8a:	3308      	adds	r3, #8
 801ad8c:	681a      	ldr	r2, [r3, #0]
 801ad8e:	683b      	ldr	r3, [r7, #0]
 801ad90:	3318      	adds	r3, #24
 801ad92:	681b      	ldr	r3, [r3, #0]
 801ad94:	18d1      	adds	r1, r2, r3
 801ad96:	230e      	movs	r3, #14
 801ad98:	009b      	lsls	r3, r3, #2
 801ad9a:	687a      	ldr	r2, [r7, #4]
 801ad9c:	4413      	add	r3, r2
 801ad9e:	681a      	ldr	r2, [r3, #0]
 801ada0:	683b      	ldr	r3, [r7, #0]
 801ada2:	3308      	adds	r3, #8
 801ada4:	440a      	add	r2, r1
 801ada6:	601a      	str	r2, [r3, #0]
 801ada8:	683b      	ldr	r3, [r7, #0]
 801adaa:	3338      	adds	r3, #56	; 0x38
 801adac:	681a      	ldr	r2, [r3, #0]
 801adae:	683b      	ldr	r3, [r7, #0]
 801adb0:	3308      	adds	r3, #8
 801adb2:	681b      	ldr	r3, [r3, #0]
 801adb4:	405a      	eors	r2, r3
 801adb6:	683b      	ldr	r3, [r7, #0]
 801adb8:	f103 0438 	add.w	r4, r3, #56	; 0x38
 801adbc:	2110      	movs	r1, #16
 801adbe:	4610      	mov	r0, r2
 801adc0:	f7fd f83e 	bl	8017e40 <rotr32>
 801adc4:	4603      	mov	r3, r0
 801adc6:	6023      	str	r3, [r4, #0]
 801adc8:	683b      	ldr	r3, [r7, #0]
 801adca:	3328      	adds	r3, #40	; 0x28
 801adcc:	6819      	ldr	r1, [r3, #0]
 801adce:	683b      	ldr	r3, [r7, #0]
 801add0:	3338      	adds	r3, #56	; 0x38
 801add2:	681a      	ldr	r2, [r3, #0]
 801add4:	683b      	ldr	r3, [r7, #0]
 801add6:	3328      	adds	r3, #40	; 0x28
 801add8:	440a      	add	r2, r1
 801adda:	601a      	str	r2, [r3, #0]
 801addc:	683b      	ldr	r3, [r7, #0]
 801adde:	3318      	adds	r3, #24
 801ade0:	681a      	ldr	r2, [r3, #0]
 801ade2:	683b      	ldr	r3, [r7, #0]
 801ade4:	3328      	adds	r3, #40	; 0x28
 801ade6:	681b      	ldr	r3, [r3, #0]
 801ade8:	405a      	eors	r2, r3
 801adea:	683b      	ldr	r3, [r7, #0]
 801adec:	f103 0418 	add.w	r4, r3, #24
 801adf0:	210c      	movs	r1, #12
 801adf2:	4610      	mov	r0, r2
 801adf4:	f7fd f824 	bl	8017e40 <rotr32>
 801adf8:	4603      	mov	r3, r0
 801adfa:	6023      	str	r3, [r4, #0]
 801adfc:	683b      	ldr	r3, [r7, #0]
 801adfe:	3308      	adds	r3, #8
 801ae00:	681a      	ldr	r2, [r3, #0]
 801ae02:	683b      	ldr	r3, [r7, #0]
 801ae04:	3318      	adds	r3, #24
 801ae06:	681b      	ldr	r3, [r3, #0]
 801ae08:	18d1      	adds	r1, r2, r3
 801ae0a:	230d      	movs	r3, #13
 801ae0c:	009b      	lsls	r3, r3, #2
 801ae0e:	687a      	ldr	r2, [r7, #4]
 801ae10:	4413      	add	r3, r2
 801ae12:	681a      	ldr	r2, [r3, #0]
 801ae14:	683b      	ldr	r3, [r7, #0]
 801ae16:	3308      	adds	r3, #8
 801ae18:	440a      	add	r2, r1
 801ae1a:	601a      	str	r2, [r3, #0]
 801ae1c:	683b      	ldr	r3, [r7, #0]
 801ae1e:	3338      	adds	r3, #56	; 0x38
 801ae20:	681a      	ldr	r2, [r3, #0]
 801ae22:	683b      	ldr	r3, [r7, #0]
 801ae24:	3308      	adds	r3, #8
 801ae26:	681b      	ldr	r3, [r3, #0]
 801ae28:	405a      	eors	r2, r3
 801ae2a:	683b      	ldr	r3, [r7, #0]
 801ae2c:	f103 0438 	add.w	r4, r3, #56	; 0x38
 801ae30:	2108      	movs	r1, #8
 801ae32:	4610      	mov	r0, r2
 801ae34:	f7fd f804 	bl	8017e40 <rotr32>
 801ae38:	4603      	mov	r3, r0
 801ae3a:	6023      	str	r3, [r4, #0]
 801ae3c:	683b      	ldr	r3, [r7, #0]
 801ae3e:	3328      	adds	r3, #40	; 0x28
 801ae40:	6819      	ldr	r1, [r3, #0]
 801ae42:	683b      	ldr	r3, [r7, #0]
 801ae44:	3338      	adds	r3, #56	; 0x38
 801ae46:	681a      	ldr	r2, [r3, #0]
 801ae48:	683b      	ldr	r3, [r7, #0]
 801ae4a:	3328      	adds	r3, #40	; 0x28
 801ae4c:	440a      	add	r2, r1
 801ae4e:	601a      	str	r2, [r3, #0]
 801ae50:	683b      	ldr	r3, [r7, #0]
 801ae52:	3318      	adds	r3, #24
 801ae54:	681a      	ldr	r2, [r3, #0]
 801ae56:	683b      	ldr	r3, [r7, #0]
 801ae58:	3328      	adds	r3, #40	; 0x28
 801ae5a:	681b      	ldr	r3, [r3, #0]
 801ae5c:	405a      	eors	r2, r3
 801ae5e:	683b      	ldr	r3, [r7, #0]
 801ae60:	f103 0418 	add.w	r4, r3, #24
 801ae64:	2107      	movs	r1, #7
 801ae66:	4610      	mov	r0, r2
 801ae68:	f7fc ffea 	bl	8017e40 <rotr32>
 801ae6c:	4603      	mov	r3, r0
 801ae6e:	6023      	str	r3, [r4, #0]
 801ae70:	683b      	ldr	r3, [r7, #0]
 801ae72:	330c      	adds	r3, #12
 801ae74:	681a      	ldr	r2, [r3, #0]
 801ae76:	683b      	ldr	r3, [r7, #0]
 801ae78:	331c      	adds	r3, #28
 801ae7a:	681b      	ldr	r3, [r3, #0]
 801ae7c:	18d1      	adds	r1, r2, r3
 801ae7e:	2304      	movs	r3, #4
 801ae80:	009b      	lsls	r3, r3, #2
 801ae82:	687a      	ldr	r2, [r7, #4]
 801ae84:	4413      	add	r3, r2
 801ae86:	681a      	ldr	r2, [r3, #0]
 801ae88:	683b      	ldr	r3, [r7, #0]
 801ae8a:	330c      	adds	r3, #12
 801ae8c:	440a      	add	r2, r1
 801ae8e:	601a      	str	r2, [r3, #0]
 801ae90:	683b      	ldr	r3, [r7, #0]
 801ae92:	333c      	adds	r3, #60	; 0x3c
 801ae94:	681a      	ldr	r2, [r3, #0]
 801ae96:	683b      	ldr	r3, [r7, #0]
 801ae98:	330c      	adds	r3, #12
 801ae9a:	681b      	ldr	r3, [r3, #0]
 801ae9c:	405a      	eors	r2, r3
 801ae9e:	683b      	ldr	r3, [r7, #0]
 801aea0:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 801aea4:	2110      	movs	r1, #16
 801aea6:	4610      	mov	r0, r2
 801aea8:	f7fc ffca 	bl	8017e40 <rotr32>
 801aeac:	4603      	mov	r3, r0
 801aeae:	6023      	str	r3, [r4, #0]
 801aeb0:	683b      	ldr	r3, [r7, #0]
 801aeb2:	332c      	adds	r3, #44	; 0x2c
 801aeb4:	6819      	ldr	r1, [r3, #0]
 801aeb6:	683b      	ldr	r3, [r7, #0]
 801aeb8:	333c      	adds	r3, #60	; 0x3c
 801aeba:	681a      	ldr	r2, [r3, #0]
 801aebc:	683b      	ldr	r3, [r7, #0]
 801aebe:	332c      	adds	r3, #44	; 0x2c
 801aec0:	440a      	add	r2, r1
 801aec2:	601a      	str	r2, [r3, #0]
 801aec4:	683b      	ldr	r3, [r7, #0]
 801aec6:	331c      	adds	r3, #28
 801aec8:	681a      	ldr	r2, [r3, #0]
 801aeca:	683b      	ldr	r3, [r7, #0]
 801aecc:	332c      	adds	r3, #44	; 0x2c
 801aece:	681b      	ldr	r3, [r3, #0]
 801aed0:	405a      	eors	r2, r3
 801aed2:	683b      	ldr	r3, [r7, #0]
 801aed4:	f103 041c 	add.w	r4, r3, #28
 801aed8:	210c      	movs	r1, #12
 801aeda:	4610      	mov	r0, r2
 801aedc:	f7fc ffb0 	bl	8017e40 <rotr32>
 801aee0:	4603      	mov	r3, r0
 801aee2:	6023      	str	r3, [r4, #0]
 801aee4:	683b      	ldr	r3, [r7, #0]
 801aee6:	330c      	adds	r3, #12
 801aee8:	681a      	ldr	r2, [r3, #0]
 801aeea:	683b      	ldr	r3, [r7, #0]
 801aeec:	331c      	adds	r3, #28
 801aeee:	681b      	ldr	r3, [r3, #0]
 801aef0:	18d1      	adds	r1, r2, r3
 801aef2:	230a      	movs	r3, #10
 801aef4:	009b      	lsls	r3, r3, #2
 801aef6:	687a      	ldr	r2, [r7, #4]
 801aef8:	4413      	add	r3, r2
 801aefa:	681a      	ldr	r2, [r3, #0]
 801aefc:	683b      	ldr	r3, [r7, #0]
 801aefe:	330c      	adds	r3, #12
 801af00:	440a      	add	r2, r1
 801af02:	601a      	str	r2, [r3, #0]
 801af04:	683b      	ldr	r3, [r7, #0]
 801af06:	333c      	adds	r3, #60	; 0x3c
 801af08:	681a      	ldr	r2, [r3, #0]
 801af0a:	683b      	ldr	r3, [r7, #0]
 801af0c:	330c      	adds	r3, #12
 801af0e:	681b      	ldr	r3, [r3, #0]
 801af10:	405a      	eors	r2, r3
 801af12:	683b      	ldr	r3, [r7, #0]
 801af14:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 801af18:	2108      	movs	r1, #8
 801af1a:	4610      	mov	r0, r2
 801af1c:	f7fc ff90 	bl	8017e40 <rotr32>
 801af20:	4603      	mov	r3, r0
 801af22:	6023      	str	r3, [r4, #0]
 801af24:	683b      	ldr	r3, [r7, #0]
 801af26:	332c      	adds	r3, #44	; 0x2c
 801af28:	6819      	ldr	r1, [r3, #0]
 801af2a:	683b      	ldr	r3, [r7, #0]
 801af2c:	333c      	adds	r3, #60	; 0x3c
 801af2e:	681a      	ldr	r2, [r3, #0]
 801af30:	683b      	ldr	r3, [r7, #0]
 801af32:	332c      	adds	r3, #44	; 0x2c
 801af34:	440a      	add	r2, r1
 801af36:	601a      	str	r2, [r3, #0]
 801af38:	683b      	ldr	r3, [r7, #0]
 801af3a:	331c      	adds	r3, #28
 801af3c:	681a      	ldr	r2, [r3, #0]
 801af3e:	683b      	ldr	r3, [r7, #0]
 801af40:	332c      	adds	r3, #44	; 0x2c
 801af42:	681b      	ldr	r3, [r3, #0]
 801af44:	405a      	eors	r2, r3
 801af46:	683b      	ldr	r3, [r7, #0]
 801af48:	f103 041c 	add.w	r4, r3, #28
 801af4c:	2107      	movs	r1, #7
 801af4e:	4610      	mov	r0, r2
 801af50:	f7fc ff76 	bl	8017e40 <rotr32>
 801af54:	4603      	mov	r3, r0
 801af56:	6023      	str	r3, [r4, #0]
 801af58:	683b      	ldr	r3, [r7, #0]
 801af5a:	681a      	ldr	r2, [r3, #0]
 801af5c:	683b      	ldr	r3, [r7, #0]
 801af5e:	3314      	adds	r3, #20
 801af60:	681b      	ldr	r3, [r3, #0]
 801af62:	441a      	add	r2, r3
 801af64:	2300      	movs	r3, #0
 801af66:	009b      	lsls	r3, r3, #2
 801af68:	6879      	ldr	r1, [r7, #4]
 801af6a:	440b      	add	r3, r1
 801af6c:	681b      	ldr	r3, [r3, #0]
 801af6e:	441a      	add	r2, r3
 801af70:	683b      	ldr	r3, [r7, #0]
 801af72:	601a      	str	r2, [r3, #0]
 801af74:	683b      	ldr	r3, [r7, #0]
 801af76:	333c      	adds	r3, #60	; 0x3c
 801af78:	681a      	ldr	r2, [r3, #0]
 801af7a:	683b      	ldr	r3, [r7, #0]
 801af7c:	681b      	ldr	r3, [r3, #0]
 801af7e:	405a      	eors	r2, r3
 801af80:	683b      	ldr	r3, [r7, #0]
 801af82:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 801af86:	2110      	movs	r1, #16
 801af88:	4610      	mov	r0, r2
 801af8a:	f7fc ff59 	bl	8017e40 <rotr32>
 801af8e:	4603      	mov	r3, r0
 801af90:	6023      	str	r3, [r4, #0]
 801af92:	683b      	ldr	r3, [r7, #0]
 801af94:	3328      	adds	r3, #40	; 0x28
 801af96:	6819      	ldr	r1, [r3, #0]
 801af98:	683b      	ldr	r3, [r7, #0]
 801af9a:	333c      	adds	r3, #60	; 0x3c
 801af9c:	681a      	ldr	r2, [r3, #0]
 801af9e:	683b      	ldr	r3, [r7, #0]
 801afa0:	3328      	adds	r3, #40	; 0x28
 801afa2:	440a      	add	r2, r1
 801afa4:	601a      	str	r2, [r3, #0]
 801afa6:	683b      	ldr	r3, [r7, #0]
 801afa8:	3314      	adds	r3, #20
 801afaa:	681a      	ldr	r2, [r3, #0]
 801afac:	683b      	ldr	r3, [r7, #0]
 801afae:	3328      	adds	r3, #40	; 0x28
 801afb0:	681b      	ldr	r3, [r3, #0]
 801afb2:	405a      	eors	r2, r3
 801afb4:	683b      	ldr	r3, [r7, #0]
 801afb6:	f103 0414 	add.w	r4, r3, #20
 801afba:	210c      	movs	r1, #12
 801afbc:	4610      	mov	r0, r2
 801afbe:	f7fc ff3f 	bl	8017e40 <rotr32>
 801afc2:	4603      	mov	r3, r0
 801afc4:	6023      	str	r3, [r4, #0]
 801afc6:	683b      	ldr	r3, [r7, #0]
 801afc8:	681a      	ldr	r2, [r3, #0]
 801afca:	683b      	ldr	r3, [r7, #0]
 801afcc:	3314      	adds	r3, #20
 801afce:	681b      	ldr	r3, [r3, #0]
 801afd0:	441a      	add	r2, r3
 801afd2:	2307      	movs	r3, #7
 801afd4:	009b      	lsls	r3, r3, #2
 801afd6:	6879      	ldr	r1, [r7, #4]
 801afd8:	440b      	add	r3, r1
 801afda:	681b      	ldr	r3, [r3, #0]
 801afdc:	441a      	add	r2, r3
 801afde:	683b      	ldr	r3, [r7, #0]
 801afe0:	601a      	str	r2, [r3, #0]
 801afe2:	683b      	ldr	r3, [r7, #0]
 801afe4:	333c      	adds	r3, #60	; 0x3c
 801afe6:	681a      	ldr	r2, [r3, #0]
 801afe8:	683b      	ldr	r3, [r7, #0]
 801afea:	681b      	ldr	r3, [r3, #0]
 801afec:	405a      	eors	r2, r3
 801afee:	683b      	ldr	r3, [r7, #0]
 801aff0:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 801aff4:	2108      	movs	r1, #8
 801aff6:	4610      	mov	r0, r2
 801aff8:	f7fc ff22 	bl	8017e40 <rotr32>
 801affc:	4603      	mov	r3, r0
 801affe:	6023      	str	r3, [r4, #0]
 801b000:	683b      	ldr	r3, [r7, #0]
 801b002:	3328      	adds	r3, #40	; 0x28
 801b004:	6819      	ldr	r1, [r3, #0]
 801b006:	683b      	ldr	r3, [r7, #0]
 801b008:	333c      	adds	r3, #60	; 0x3c
 801b00a:	681a      	ldr	r2, [r3, #0]
 801b00c:	683b      	ldr	r3, [r7, #0]
 801b00e:	3328      	adds	r3, #40	; 0x28
 801b010:	440a      	add	r2, r1
 801b012:	601a      	str	r2, [r3, #0]
 801b014:	683b      	ldr	r3, [r7, #0]
 801b016:	3314      	adds	r3, #20
 801b018:	681a      	ldr	r2, [r3, #0]
 801b01a:	683b      	ldr	r3, [r7, #0]
 801b01c:	3328      	adds	r3, #40	; 0x28
 801b01e:	681b      	ldr	r3, [r3, #0]
 801b020:	405a      	eors	r2, r3
 801b022:	683b      	ldr	r3, [r7, #0]
 801b024:	f103 0414 	add.w	r4, r3, #20
 801b028:	2107      	movs	r1, #7
 801b02a:	4610      	mov	r0, r2
 801b02c:	f7fc ff08 	bl	8017e40 <rotr32>
 801b030:	4603      	mov	r3, r0
 801b032:	6023      	str	r3, [r4, #0]
 801b034:	683b      	ldr	r3, [r7, #0]
 801b036:	3304      	adds	r3, #4
 801b038:	681a      	ldr	r2, [r3, #0]
 801b03a:	683b      	ldr	r3, [r7, #0]
 801b03c:	3318      	adds	r3, #24
 801b03e:	681b      	ldr	r3, [r3, #0]
 801b040:	18d1      	adds	r1, r2, r3
 801b042:	2306      	movs	r3, #6
 801b044:	009b      	lsls	r3, r3, #2
 801b046:	687a      	ldr	r2, [r7, #4]
 801b048:	4413      	add	r3, r2
 801b04a:	681a      	ldr	r2, [r3, #0]
 801b04c:	683b      	ldr	r3, [r7, #0]
 801b04e:	3304      	adds	r3, #4
 801b050:	440a      	add	r2, r1
 801b052:	601a      	str	r2, [r3, #0]
 801b054:	683b      	ldr	r3, [r7, #0]
 801b056:	3330      	adds	r3, #48	; 0x30
 801b058:	681a      	ldr	r2, [r3, #0]
 801b05a:	683b      	ldr	r3, [r7, #0]
 801b05c:	3304      	adds	r3, #4
 801b05e:	681b      	ldr	r3, [r3, #0]
 801b060:	405a      	eors	r2, r3
 801b062:	683b      	ldr	r3, [r7, #0]
 801b064:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801b068:	2110      	movs	r1, #16
 801b06a:	4610      	mov	r0, r2
 801b06c:	f7fc fee8 	bl	8017e40 <rotr32>
 801b070:	4603      	mov	r3, r0
 801b072:	6023      	str	r3, [r4, #0]
 801b074:	683b      	ldr	r3, [r7, #0]
 801b076:	332c      	adds	r3, #44	; 0x2c
 801b078:	6819      	ldr	r1, [r3, #0]
 801b07a:	683b      	ldr	r3, [r7, #0]
 801b07c:	3330      	adds	r3, #48	; 0x30
 801b07e:	681a      	ldr	r2, [r3, #0]
 801b080:	683b      	ldr	r3, [r7, #0]
 801b082:	332c      	adds	r3, #44	; 0x2c
 801b084:	440a      	add	r2, r1
 801b086:	601a      	str	r2, [r3, #0]
 801b088:	683b      	ldr	r3, [r7, #0]
 801b08a:	3318      	adds	r3, #24
 801b08c:	681a      	ldr	r2, [r3, #0]
 801b08e:	683b      	ldr	r3, [r7, #0]
 801b090:	332c      	adds	r3, #44	; 0x2c
 801b092:	681b      	ldr	r3, [r3, #0]
 801b094:	405a      	eors	r2, r3
 801b096:	683b      	ldr	r3, [r7, #0]
 801b098:	f103 0418 	add.w	r4, r3, #24
 801b09c:	210c      	movs	r1, #12
 801b09e:	4610      	mov	r0, r2
 801b0a0:	f7fc fece 	bl	8017e40 <rotr32>
 801b0a4:	4603      	mov	r3, r0
 801b0a6:	6023      	str	r3, [r4, #0]
 801b0a8:	683b      	ldr	r3, [r7, #0]
 801b0aa:	3304      	adds	r3, #4
 801b0ac:	681a      	ldr	r2, [r3, #0]
 801b0ae:	683b      	ldr	r3, [r7, #0]
 801b0b0:	3318      	adds	r3, #24
 801b0b2:	681b      	ldr	r3, [r3, #0]
 801b0b4:	18d1      	adds	r1, r2, r3
 801b0b6:	2303      	movs	r3, #3
 801b0b8:	009b      	lsls	r3, r3, #2
 801b0ba:	687a      	ldr	r2, [r7, #4]
 801b0bc:	4413      	add	r3, r2
 801b0be:	681a      	ldr	r2, [r3, #0]
 801b0c0:	683b      	ldr	r3, [r7, #0]
 801b0c2:	3304      	adds	r3, #4
 801b0c4:	440a      	add	r2, r1
 801b0c6:	601a      	str	r2, [r3, #0]
 801b0c8:	683b      	ldr	r3, [r7, #0]
 801b0ca:	3330      	adds	r3, #48	; 0x30
 801b0cc:	681a      	ldr	r2, [r3, #0]
 801b0ce:	683b      	ldr	r3, [r7, #0]
 801b0d0:	3304      	adds	r3, #4
 801b0d2:	681b      	ldr	r3, [r3, #0]
 801b0d4:	405a      	eors	r2, r3
 801b0d6:	683b      	ldr	r3, [r7, #0]
 801b0d8:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801b0dc:	2108      	movs	r1, #8
 801b0de:	4610      	mov	r0, r2
 801b0e0:	f7fc feae 	bl	8017e40 <rotr32>
 801b0e4:	4603      	mov	r3, r0
 801b0e6:	6023      	str	r3, [r4, #0]
 801b0e8:	683b      	ldr	r3, [r7, #0]
 801b0ea:	332c      	adds	r3, #44	; 0x2c
 801b0ec:	6819      	ldr	r1, [r3, #0]
 801b0ee:	683b      	ldr	r3, [r7, #0]
 801b0f0:	3330      	adds	r3, #48	; 0x30
 801b0f2:	681a      	ldr	r2, [r3, #0]
 801b0f4:	683b      	ldr	r3, [r7, #0]
 801b0f6:	332c      	adds	r3, #44	; 0x2c
 801b0f8:	440a      	add	r2, r1
 801b0fa:	601a      	str	r2, [r3, #0]
 801b0fc:	683b      	ldr	r3, [r7, #0]
 801b0fe:	3318      	adds	r3, #24
 801b100:	681a      	ldr	r2, [r3, #0]
 801b102:	683b      	ldr	r3, [r7, #0]
 801b104:	332c      	adds	r3, #44	; 0x2c
 801b106:	681b      	ldr	r3, [r3, #0]
 801b108:	405a      	eors	r2, r3
 801b10a:	683b      	ldr	r3, [r7, #0]
 801b10c:	f103 0418 	add.w	r4, r3, #24
 801b110:	2107      	movs	r1, #7
 801b112:	4610      	mov	r0, r2
 801b114:	f7fc fe94 	bl	8017e40 <rotr32>
 801b118:	4603      	mov	r3, r0
 801b11a:	6023      	str	r3, [r4, #0]
 801b11c:	683b      	ldr	r3, [r7, #0]
 801b11e:	3308      	adds	r3, #8
 801b120:	681a      	ldr	r2, [r3, #0]
 801b122:	683b      	ldr	r3, [r7, #0]
 801b124:	331c      	adds	r3, #28
 801b126:	681b      	ldr	r3, [r3, #0]
 801b128:	18d1      	adds	r1, r2, r3
 801b12a:	2309      	movs	r3, #9
 801b12c:	009b      	lsls	r3, r3, #2
 801b12e:	687a      	ldr	r2, [r7, #4]
 801b130:	4413      	add	r3, r2
 801b132:	681a      	ldr	r2, [r3, #0]
 801b134:	683b      	ldr	r3, [r7, #0]
 801b136:	3308      	adds	r3, #8
 801b138:	440a      	add	r2, r1
 801b13a:	601a      	str	r2, [r3, #0]
 801b13c:	683b      	ldr	r3, [r7, #0]
 801b13e:	3334      	adds	r3, #52	; 0x34
 801b140:	681a      	ldr	r2, [r3, #0]
 801b142:	683b      	ldr	r3, [r7, #0]
 801b144:	3308      	adds	r3, #8
 801b146:	681b      	ldr	r3, [r3, #0]
 801b148:	405a      	eors	r2, r3
 801b14a:	683b      	ldr	r3, [r7, #0]
 801b14c:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801b150:	2110      	movs	r1, #16
 801b152:	4610      	mov	r0, r2
 801b154:	f7fc fe74 	bl	8017e40 <rotr32>
 801b158:	4603      	mov	r3, r0
 801b15a:	6023      	str	r3, [r4, #0]
 801b15c:	683b      	ldr	r3, [r7, #0]
 801b15e:	3320      	adds	r3, #32
 801b160:	6819      	ldr	r1, [r3, #0]
 801b162:	683b      	ldr	r3, [r7, #0]
 801b164:	3334      	adds	r3, #52	; 0x34
 801b166:	681a      	ldr	r2, [r3, #0]
 801b168:	683b      	ldr	r3, [r7, #0]
 801b16a:	3320      	adds	r3, #32
 801b16c:	440a      	add	r2, r1
 801b16e:	601a      	str	r2, [r3, #0]
 801b170:	683b      	ldr	r3, [r7, #0]
 801b172:	331c      	adds	r3, #28
 801b174:	681a      	ldr	r2, [r3, #0]
 801b176:	683b      	ldr	r3, [r7, #0]
 801b178:	3320      	adds	r3, #32
 801b17a:	681b      	ldr	r3, [r3, #0]
 801b17c:	405a      	eors	r2, r3
 801b17e:	683b      	ldr	r3, [r7, #0]
 801b180:	f103 041c 	add.w	r4, r3, #28
 801b184:	210c      	movs	r1, #12
 801b186:	4610      	mov	r0, r2
 801b188:	f7fc fe5a 	bl	8017e40 <rotr32>
 801b18c:	4603      	mov	r3, r0
 801b18e:	6023      	str	r3, [r4, #0]
 801b190:	683b      	ldr	r3, [r7, #0]
 801b192:	3308      	adds	r3, #8
 801b194:	681a      	ldr	r2, [r3, #0]
 801b196:	683b      	ldr	r3, [r7, #0]
 801b198:	331c      	adds	r3, #28
 801b19a:	681b      	ldr	r3, [r3, #0]
 801b19c:	18d1      	adds	r1, r2, r3
 801b19e:	2302      	movs	r3, #2
 801b1a0:	009b      	lsls	r3, r3, #2
 801b1a2:	687a      	ldr	r2, [r7, #4]
 801b1a4:	4413      	add	r3, r2
 801b1a6:	681a      	ldr	r2, [r3, #0]
 801b1a8:	683b      	ldr	r3, [r7, #0]
 801b1aa:	3308      	adds	r3, #8
 801b1ac:	440a      	add	r2, r1
 801b1ae:	601a      	str	r2, [r3, #0]
 801b1b0:	683b      	ldr	r3, [r7, #0]
 801b1b2:	3334      	adds	r3, #52	; 0x34
 801b1b4:	681a      	ldr	r2, [r3, #0]
 801b1b6:	683b      	ldr	r3, [r7, #0]
 801b1b8:	3308      	adds	r3, #8
 801b1ba:	681b      	ldr	r3, [r3, #0]
 801b1bc:	405a      	eors	r2, r3
 801b1be:	683b      	ldr	r3, [r7, #0]
 801b1c0:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801b1c4:	2108      	movs	r1, #8
 801b1c6:	4610      	mov	r0, r2
 801b1c8:	f7fc fe3a 	bl	8017e40 <rotr32>
 801b1cc:	4603      	mov	r3, r0
 801b1ce:	6023      	str	r3, [r4, #0]
 801b1d0:	683b      	ldr	r3, [r7, #0]
 801b1d2:	3320      	adds	r3, #32
 801b1d4:	6819      	ldr	r1, [r3, #0]
 801b1d6:	683b      	ldr	r3, [r7, #0]
 801b1d8:	3334      	adds	r3, #52	; 0x34
 801b1da:	681a      	ldr	r2, [r3, #0]
 801b1dc:	683b      	ldr	r3, [r7, #0]
 801b1de:	3320      	adds	r3, #32
 801b1e0:	440a      	add	r2, r1
 801b1e2:	601a      	str	r2, [r3, #0]
 801b1e4:	683b      	ldr	r3, [r7, #0]
 801b1e6:	331c      	adds	r3, #28
 801b1e8:	681a      	ldr	r2, [r3, #0]
 801b1ea:	683b      	ldr	r3, [r7, #0]
 801b1ec:	3320      	adds	r3, #32
 801b1ee:	681b      	ldr	r3, [r3, #0]
 801b1f0:	405a      	eors	r2, r3
 801b1f2:	683b      	ldr	r3, [r7, #0]
 801b1f4:	f103 041c 	add.w	r4, r3, #28
 801b1f8:	2107      	movs	r1, #7
 801b1fa:	4610      	mov	r0, r2
 801b1fc:	f7fc fe20 	bl	8017e40 <rotr32>
 801b200:	4603      	mov	r3, r0
 801b202:	6023      	str	r3, [r4, #0]
 801b204:	683b      	ldr	r3, [r7, #0]
 801b206:	330c      	adds	r3, #12
 801b208:	681a      	ldr	r2, [r3, #0]
 801b20a:	683b      	ldr	r3, [r7, #0]
 801b20c:	3310      	adds	r3, #16
 801b20e:	681b      	ldr	r3, [r3, #0]
 801b210:	18d1      	adds	r1, r2, r3
 801b212:	2308      	movs	r3, #8
 801b214:	009b      	lsls	r3, r3, #2
 801b216:	687a      	ldr	r2, [r7, #4]
 801b218:	4413      	add	r3, r2
 801b21a:	681a      	ldr	r2, [r3, #0]
 801b21c:	683b      	ldr	r3, [r7, #0]
 801b21e:	330c      	adds	r3, #12
 801b220:	440a      	add	r2, r1
 801b222:	601a      	str	r2, [r3, #0]
 801b224:	683b      	ldr	r3, [r7, #0]
 801b226:	3338      	adds	r3, #56	; 0x38
 801b228:	681a      	ldr	r2, [r3, #0]
 801b22a:	683b      	ldr	r3, [r7, #0]
 801b22c:	330c      	adds	r3, #12
 801b22e:	681b      	ldr	r3, [r3, #0]
 801b230:	405a      	eors	r2, r3
 801b232:	683b      	ldr	r3, [r7, #0]
 801b234:	f103 0438 	add.w	r4, r3, #56	; 0x38
 801b238:	2110      	movs	r1, #16
 801b23a:	4610      	mov	r0, r2
 801b23c:	f7fc fe00 	bl	8017e40 <rotr32>
 801b240:	4603      	mov	r3, r0
 801b242:	6023      	str	r3, [r4, #0]
 801b244:	683b      	ldr	r3, [r7, #0]
 801b246:	3324      	adds	r3, #36	; 0x24
 801b248:	6819      	ldr	r1, [r3, #0]
 801b24a:	683b      	ldr	r3, [r7, #0]
 801b24c:	3338      	adds	r3, #56	; 0x38
 801b24e:	681a      	ldr	r2, [r3, #0]
 801b250:	683b      	ldr	r3, [r7, #0]
 801b252:	3324      	adds	r3, #36	; 0x24
 801b254:	440a      	add	r2, r1
 801b256:	601a      	str	r2, [r3, #0]
 801b258:	683b      	ldr	r3, [r7, #0]
 801b25a:	3310      	adds	r3, #16
 801b25c:	681a      	ldr	r2, [r3, #0]
 801b25e:	683b      	ldr	r3, [r7, #0]
 801b260:	3324      	adds	r3, #36	; 0x24
 801b262:	681b      	ldr	r3, [r3, #0]
 801b264:	405a      	eors	r2, r3
 801b266:	683b      	ldr	r3, [r7, #0]
 801b268:	f103 0410 	add.w	r4, r3, #16
 801b26c:	210c      	movs	r1, #12
 801b26e:	4610      	mov	r0, r2
 801b270:	f7fc fde6 	bl	8017e40 <rotr32>
 801b274:	4603      	mov	r3, r0
 801b276:	6023      	str	r3, [r4, #0]
 801b278:	683b      	ldr	r3, [r7, #0]
 801b27a:	330c      	adds	r3, #12
 801b27c:	681a      	ldr	r2, [r3, #0]
 801b27e:	683b      	ldr	r3, [r7, #0]
 801b280:	3310      	adds	r3, #16
 801b282:	681b      	ldr	r3, [r3, #0]
 801b284:	18d1      	adds	r1, r2, r3
 801b286:	230b      	movs	r3, #11
 801b288:	009b      	lsls	r3, r3, #2
 801b28a:	687a      	ldr	r2, [r7, #4]
 801b28c:	4413      	add	r3, r2
 801b28e:	681a      	ldr	r2, [r3, #0]
 801b290:	683b      	ldr	r3, [r7, #0]
 801b292:	330c      	adds	r3, #12
 801b294:	440a      	add	r2, r1
 801b296:	601a      	str	r2, [r3, #0]
 801b298:	683b      	ldr	r3, [r7, #0]
 801b29a:	3338      	adds	r3, #56	; 0x38
 801b29c:	681a      	ldr	r2, [r3, #0]
 801b29e:	683b      	ldr	r3, [r7, #0]
 801b2a0:	330c      	adds	r3, #12
 801b2a2:	681b      	ldr	r3, [r3, #0]
 801b2a4:	405a      	eors	r2, r3
 801b2a6:	683b      	ldr	r3, [r7, #0]
 801b2a8:	f103 0438 	add.w	r4, r3, #56	; 0x38
 801b2ac:	2108      	movs	r1, #8
 801b2ae:	4610      	mov	r0, r2
 801b2b0:	f7fc fdc6 	bl	8017e40 <rotr32>
 801b2b4:	4603      	mov	r3, r0
 801b2b6:	6023      	str	r3, [r4, #0]
 801b2b8:	683b      	ldr	r3, [r7, #0]
 801b2ba:	3324      	adds	r3, #36	; 0x24
 801b2bc:	6819      	ldr	r1, [r3, #0]
 801b2be:	683b      	ldr	r3, [r7, #0]
 801b2c0:	3338      	adds	r3, #56	; 0x38
 801b2c2:	681a      	ldr	r2, [r3, #0]
 801b2c4:	683b      	ldr	r3, [r7, #0]
 801b2c6:	3324      	adds	r3, #36	; 0x24
 801b2c8:	440a      	add	r2, r1
 801b2ca:	601a      	str	r2, [r3, #0]
 801b2cc:	683b      	ldr	r3, [r7, #0]
 801b2ce:	3310      	adds	r3, #16
 801b2d0:	681a      	ldr	r2, [r3, #0]
 801b2d2:	683b      	ldr	r3, [r7, #0]
 801b2d4:	3324      	adds	r3, #36	; 0x24
 801b2d6:	681b      	ldr	r3, [r3, #0]
 801b2d8:	405a      	eors	r2, r3
 801b2da:	683b      	ldr	r3, [r7, #0]
 801b2dc:	f103 0410 	add.w	r4, r3, #16
 801b2e0:	2107      	movs	r1, #7
 801b2e2:	4610      	mov	r0, r2
 801b2e4:	f7fc fdac 	bl	8017e40 <rotr32>
 801b2e8:	4603      	mov	r3, r0
 801b2ea:	6023      	str	r3, [r4, #0]
  ROUND( 7 );
 801b2ec:	683b      	ldr	r3, [r7, #0]
 801b2ee:	681a      	ldr	r2, [r3, #0]
 801b2f0:	683b      	ldr	r3, [r7, #0]
 801b2f2:	3310      	adds	r3, #16
 801b2f4:	681b      	ldr	r3, [r3, #0]
 801b2f6:	441a      	add	r2, r3
 801b2f8:	230d      	movs	r3, #13
 801b2fa:	009b      	lsls	r3, r3, #2
 801b2fc:	6879      	ldr	r1, [r7, #4]
 801b2fe:	440b      	add	r3, r1
 801b300:	681b      	ldr	r3, [r3, #0]
 801b302:	441a      	add	r2, r3
 801b304:	683b      	ldr	r3, [r7, #0]
 801b306:	601a      	str	r2, [r3, #0]
 801b308:	683b      	ldr	r3, [r7, #0]
 801b30a:	3330      	adds	r3, #48	; 0x30
 801b30c:	681a      	ldr	r2, [r3, #0]
 801b30e:	683b      	ldr	r3, [r7, #0]
 801b310:	681b      	ldr	r3, [r3, #0]
 801b312:	405a      	eors	r2, r3
 801b314:	683b      	ldr	r3, [r7, #0]
 801b316:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801b31a:	2110      	movs	r1, #16
 801b31c:	4610      	mov	r0, r2
 801b31e:	f7fc fd8f 	bl	8017e40 <rotr32>
 801b322:	4603      	mov	r3, r0
 801b324:	6023      	str	r3, [r4, #0]
 801b326:	683b      	ldr	r3, [r7, #0]
 801b328:	3320      	adds	r3, #32
 801b32a:	6819      	ldr	r1, [r3, #0]
 801b32c:	683b      	ldr	r3, [r7, #0]
 801b32e:	3330      	adds	r3, #48	; 0x30
 801b330:	681a      	ldr	r2, [r3, #0]
 801b332:	683b      	ldr	r3, [r7, #0]
 801b334:	3320      	adds	r3, #32
 801b336:	440a      	add	r2, r1
 801b338:	601a      	str	r2, [r3, #0]
 801b33a:	683b      	ldr	r3, [r7, #0]
 801b33c:	3310      	adds	r3, #16
 801b33e:	681a      	ldr	r2, [r3, #0]
 801b340:	683b      	ldr	r3, [r7, #0]
 801b342:	3320      	adds	r3, #32
 801b344:	681b      	ldr	r3, [r3, #0]
 801b346:	405a      	eors	r2, r3
 801b348:	683b      	ldr	r3, [r7, #0]
 801b34a:	f103 0410 	add.w	r4, r3, #16
 801b34e:	210c      	movs	r1, #12
 801b350:	4610      	mov	r0, r2
 801b352:	f7fc fd75 	bl	8017e40 <rotr32>
 801b356:	4603      	mov	r3, r0
 801b358:	6023      	str	r3, [r4, #0]
 801b35a:	683b      	ldr	r3, [r7, #0]
 801b35c:	681a      	ldr	r2, [r3, #0]
 801b35e:	683b      	ldr	r3, [r7, #0]
 801b360:	3310      	adds	r3, #16
 801b362:	681b      	ldr	r3, [r3, #0]
 801b364:	441a      	add	r2, r3
 801b366:	230b      	movs	r3, #11
 801b368:	009b      	lsls	r3, r3, #2
 801b36a:	6879      	ldr	r1, [r7, #4]
 801b36c:	440b      	add	r3, r1
 801b36e:	681b      	ldr	r3, [r3, #0]
 801b370:	441a      	add	r2, r3
 801b372:	683b      	ldr	r3, [r7, #0]
 801b374:	601a      	str	r2, [r3, #0]
 801b376:	683b      	ldr	r3, [r7, #0]
 801b378:	3330      	adds	r3, #48	; 0x30
 801b37a:	681a      	ldr	r2, [r3, #0]
 801b37c:	683b      	ldr	r3, [r7, #0]
 801b37e:	681b      	ldr	r3, [r3, #0]
 801b380:	405a      	eors	r2, r3
 801b382:	683b      	ldr	r3, [r7, #0]
 801b384:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801b388:	2108      	movs	r1, #8
 801b38a:	4610      	mov	r0, r2
 801b38c:	f7fc fd58 	bl	8017e40 <rotr32>
 801b390:	4603      	mov	r3, r0
 801b392:	6023      	str	r3, [r4, #0]
 801b394:	683b      	ldr	r3, [r7, #0]
 801b396:	3320      	adds	r3, #32
 801b398:	6819      	ldr	r1, [r3, #0]
 801b39a:	683b      	ldr	r3, [r7, #0]
 801b39c:	3330      	adds	r3, #48	; 0x30
 801b39e:	681a      	ldr	r2, [r3, #0]
 801b3a0:	683b      	ldr	r3, [r7, #0]
 801b3a2:	3320      	adds	r3, #32
 801b3a4:	440a      	add	r2, r1
 801b3a6:	601a      	str	r2, [r3, #0]
 801b3a8:	683b      	ldr	r3, [r7, #0]
 801b3aa:	3310      	adds	r3, #16
 801b3ac:	681a      	ldr	r2, [r3, #0]
 801b3ae:	683b      	ldr	r3, [r7, #0]
 801b3b0:	3320      	adds	r3, #32
 801b3b2:	681b      	ldr	r3, [r3, #0]
 801b3b4:	405a      	eors	r2, r3
 801b3b6:	683b      	ldr	r3, [r7, #0]
 801b3b8:	f103 0410 	add.w	r4, r3, #16
 801b3bc:	2107      	movs	r1, #7
 801b3be:	4610      	mov	r0, r2
 801b3c0:	f7fc fd3e 	bl	8017e40 <rotr32>
 801b3c4:	4603      	mov	r3, r0
 801b3c6:	6023      	str	r3, [r4, #0]
 801b3c8:	683b      	ldr	r3, [r7, #0]
 801b3ca:	3304      	adds	r3, #4
 801b3cc:	681a      	ldr	r2, [r3, #0]
 801b3ce:	683b      	ldr	r3, [r7, #0]
 801b3d0:	3314      	adds	r3, #20
 801b3d2:	681b      	ldr	r3, [r3, #0]
 801b3d4:	18d1      	adds	r1, r2, r3
 801b3d6:	2307      	movs	r3, #7
 801b3d8:	009b      	lsls	r3, r3, #2
 801b3da:	687a      	ldr	r2, [r7, #4]
 801b3dc:	4413      	add	r3, r2
 801b3de:	681a      	ldr	r2, [r3, #0]
 801b3e0:	683b      	ldr	r3, [r7, #0]
 801b3e2:	3304      	adds	r3, #4
 801b3e4:	440a      	add	r2, r1
 801b3e6:	601a      	str	r2, [r3, #0]
 801b3e8:	683b      	ldr	r3, [r7, #0]
 801b3ea:	3334      	adds	r3, #52	; 0x34
 801b3ec:	681a      	ldr	r2, [r3, #0]
 801b3ee:	683b      	ldr	r3, [r7, #0]
 801b3f0:	3304      	adds	r3, #4
 801b3f2:	681b      	ldr	r3, [r3, #0]
 801b3f4:	405a      	eors	r2, r3
 801b3f6:	683b      	ldr	r3, [r7, #0]
 801b3f8:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801b3fc:	2110      	movs	r1, #16
 801b3fe:	4610      	mov	r0, r2
 801b400:	f7fc fd1e 	bl	8017e40 <rotr32>
 801b404:	4603      	mov	r3, r0
 801b406:	6023      	str	r3, [r4, #0]
 801b408:	683b      	ldr	r3, [r7, #0]
 801b40a:	3324      	adds	r3, #36	; 0x24
 801b40c:	6819      	ldr	r1, [r3, #0]
 801b40e:	683b      	ldr	r3, [r7, #0]
 801b410:	3334      	adds	r3, #52	; 0x34
 801b412:	681a      	ldr	r2, [r3, #0]
 801b414:	683b      	ldr	r3, [r7, #0]
 801b416:	3324      	adds	r3, #36	; 0x24
 801b418:	440a      	add	r2, r1
 801b41a:	601a      	str	r2, [r3, #0]
 801b41c:	683b      	ldr	r3, [r7, #0]
 801b41e:	3314      	adds	r3, #20
 801b420:	681a      	ldr	r2, [r3, #0]
 801b422:	683b      	ldr	r3, [r7, #0]
 801b424:	3324      	adds	r3, #36	; 0x24
 801b426:	681b      	ldr	r3, [r3, #0]
 801b428:	405a      	eors	r2, r3
 801b42a:	683b      	ldr	r3, [r7, #0]
 801b42c:	f103 0414 	add.w	r4, r3, #20
 801b430:	210c      	movs	r1, #12
 801b432:	4610      	mov	r0, r2
 801b434:	f7fc fd04 	bl	8017e40 <rotr32>
 801b438:	4603      	mov	r3, r0
 801b43a:	6023      	str	r3, [r4, #0]
 801b43c:	683b      	ldr	r3, [r7, #0]
 801b43e:	3304      	adds	r3, #4
 801b440:	681a      	ldr	r2, [r3, #0]
 801b442:	683b      	ldr	r3, [r7, #0]
 801b444:	3314      	adds	r3, #20
 801b446:	681b      	ldr	r3, [r3, #0]
 801b448:	18d1      	adds	r1, r2, r3
 801b44a:	230e      	movs	r3, #14
 801b44c:	009b      	lsls	r3, r3, #2
 801b44e:	687a      	ldr	r2, [r7, #4]
 801b450:	4413      	add	r3, r2
 801b452:	681a      	ldr	r2, [r3, #0]
 801b454:	683b      	ldr	r3, [r7, #0]
 801b456:	3304      	adds	r3, #4
 801b458:	440a      	add	r2, r1
 801b45a:	601a      	str	r2, [r3, #0]
 801b45c:	683b      	ldr	r3, [r7, #0]
 801b45e:	3334      	adds	r3, #52	; 0x34
 801b460:	681a      	ldr	r2, [r3, #0]
 801b462:	683b      	ldr	r3, [r7, #0]
 801b464:	3304      	adds	r3, #4
 801b466:	681b      	ldr	r3, [r3, #0]
 801b468:	405a      	eors	r2, r3
 801b46a:	683b      	ldr	r3, [r7, #0]
 801b46c:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801b470:	2108      	movs	r1, #8
 801b472:	4610      	mov	r0, r2
 801b474:	f7fc fce4 	bl	8017e40 <rotr32>
 801b478:	4603      	mov	r3, r0
 801b47a:	6023      	str	r3, [r4, #0]
 801b47c:	683b      	ldr	r3, [r7, #0]
 801b47e:	3324      	adds	r3, #36	; 0x24
 801b480:	6819      	ldr	r1, [r3, #0]
 801b482:	683b      	ldr	r3, [r7, #0]
 801b484:	3334      	adds	r3, #52	; 0x34
 801b486:	681a      	ldr	r2, [r3, #0]
 801b488:	683b      	ldr	r3, [r7, #0]
 801b48a:	3324      	adds	r3, #36	; 0x24
 801b48c:	440a      	add	r2, r1
 801b48e:	601a      	str	r2, [r3, #0]
 801b490:	683b      	ldr	r3, [r7, #0]
 801b492:	3314      	adds	r3, #20
 801b494:	681a      	ldr	r2, [r3, #0]
 801b496:	683b      	ldr	r3, [r7, #0]
 801b498:	3324      	adds	r3, #36	; 0x24
 801b49a:	681b      	ldr	r3, [r3, #0]
 801b49c:	405a      	eors	r2, r3
 801b49e:	683b      	ldr	r3, [r7, #0]
 801b4a0:	f103 0414 	add.w	r4, r3, #20
 801b4a4:	2107      	movs	r1, #7
 801b4a6:	4610      	mov	r0, r2
 801b4a8:	f7fc fcca 	bl	8017e40 <rotr32>
 801b4ac:	4603      	mov	r3, r0
 801b4ae:	6023      	str	r3, [r4, #0]
 801b4b0:	683b      	ldr	r3, [r7, #0]
 801b4b2:	3308      	adds	r3, #8
 801b4b4:	681a      	ldr	r2, [r3, #0]
 801b4b6:	683b      	ldr	r3, [r7, #0]
 801b4b8:	3318      	adds	r3, #24
 801b4ba:	681b      	ldr	r3, [r3, #0]
 801b4bc:	18d1      	adds	r1, r2, r3
 801b4be:	230c      	movs	r3, #12
 801b4c0:	009b      	lsls	r3, r3, #2
 801b4c2:	687a      	ldr	r2, [r7, #4]
 801b4c4:	4413      	add	r3, r2
 801b4c6:	681a      	ldr	r2, [r3, #0]
 801b4c8:	683b      	ldr	r3, [r7, #0]
 801b4ca:	3308      	adds	r3, #8
 801b4cc:	440a      	add	r2, r1
 801b4ce:	601a      	str	r2, [r3, #0]
 801b4d0:	683b      	ldr	r3, [r7, #0]
 801b4d2:	3338      	adds	r3, #56	; 0x38
 801b4d4:	681a      	ldr	r2, [r3, #0]
 801b4d6:	683b      	ldr	r3, [r7, #0]
 801b4d8:	3308      	adds	r3, #8
 801b4da:	681b      	ldr	r3, [r3, #0]
 801b4dc:	405a      	eors	r2, r3
 801b4de:	683b      	ldr	r3, [r7, #0]
 801b4e0:	f103 0438 	add.w	r4, r3, #56	; 0x38
 801b4e4:	2110      	movs	r1, #16
 801b4e6:	4610      	mov	r0, r2
 801b4e8:	f7fc fcaa 	bl	8017e40 <rotr32>
 801b4ec:	4603      	mov	r3, r0
 801b4ee:	6023      	str	r3, [r4, #0]
 801b4f0:	683b      	ldr	r3, [r7, #0]
 801b4f2:	3328      	adds	r3, #40	; 0x28
 801b4f4:	6819      	ldr	r1, [r3, #0]
 801b4f6:	683b      	ldr	r3, [r7, #0]
 801b4f8:	3338      	adds	r3, #56	; 0x38
 801b4fa:	681a      	ldr	r2, [r3, #0]
 801b4fc:	683b      	ldr	r3, [r7, #0]
 801b4fe:	3328      	adds	r3, #40	; 0x28
 801b500:	440a      	add	r2, r1
 801b502:	601a      	str	r2, [r3, #0]
 801b504:	683b      	ldr	r3, [r7, #0]
 801b506:	3318      	adds	r3, #24
 801b508:	681a      	ldr	r2, [r3, #0]
 801b50a:	683b      	ldr	r3, [r7, #0]
 801b50c:	3328      	adds	r3, #40	; 0x28
 801b50e:	681b      	ldr	r3, [r3, #0]
 801b510:	405a      	eors	r2, r3
 801b512:	683b      	ldr	r3, [r7, #0]
 801b514:	f103 0418 	add.w	r4, r3, #24
 801b518:	210c      	movs	r1, #12
 801b51a:	4610      	mov	r0, r2
 801b51c:	f7fc fc90 	bl	8017e40 <rotr32>
 801b520:	4603      	mov	r3, r0
 801b522:	6023      	str	r3, [r4, #0]
 801b524:	683b      	ldr	r3, [r7, #0]
 801b526:	3308      	adds	r3, #8
 801b528:	681a      	ldr	r2, [r3, #0]
 801b52a:	683b      	ldr	r3, [r7, #0]
 801b52c:	3318      	adds	r3, #24
 801b52e:	681b      	ldr	r3, [r3, #0]
 801b530:	18d1      	adds	r1, r2, r3
 801b532:	2301      	movs	r3, #1
 801b534:	009b      	lsls	r3, r3, #2
 801b536:	687a      	ldr	r2, [r7, #4]
 801b538:	4413      	add	r3, r2
 801b53a:	681a      	ldr	r2, [r3, #0]
 801b53c:	683b      	ldr	r3, [r7, #0]
 801b53e:	3308      	adds	r3, #8
 801b540:	440a      	add	r2, r1
 801b542:	601a      	str	r2, [r3, #0]
 801b544:	683b      	ldr	r3, [r7, #0]
 801b546:	3338      	adds	r3, #56	; 0x38
 801b548:	681a      	ldr	r2, [r3, #0]
 801b54a:	683b      	ldr	r3, [r7, #0]
 801b54c:	3308      	adds	r3, #8
 801b54e:	681b      	ldr	r3, [r3, #0]
 801b550:	405a      	eors	r2, r3
 801b552:	683b      	ldr	r3, [r7, #0]
 801b554:	f103 0438 	add.w	r4, r3, #56	; 0x38
 801b558:	2108      	movs	r1, #8
 801b55a:	4610      	mov	r0, r2
 801b55c:	f7fc fc70 	bl	8017e40 <rotr32>
 801b560:	4603      	mov	r3, r0
 801b562:	6023      	str	r3, [r4, #0]
 801b564:	683b      	ldr	r3, [r7, #0]
 801b566:	3328      	adds	r3, #40	; 0x28
 801b568:	6819      	ldr	r1, [r3, #0]
 801b56a:	683b      	ldr	r3, [r7, #0]
 801b56c:	3338      	adds	r3, #56	; 0x38
 801b56e:	681a      	ldr	r2, [r3, #0]
 801b570:	683b      	ldr	r3, [r7, #0]
 801b572:	3328      	adds	r3, #40	; 0x28
 801b574:	440a      	add	r2, r1
 801b576:	601a      	str	r2, [r3, #0]
 801b578:	683b      	ldr	r3, [r7, #0]
 801b57a:	3318      	adds	r3, #24
 801b57c:	681a      	ldr	r2, [r3, #0]
 801b57e:	683b      	ldr	r3, [r7, #0]
 801b580:	3328      	adds	r3, #40	; 0x28
 801b582:	681b      	ldr	r3, [r3, #0]
 801b584:	405a      	eors	r2, r3
 801b586:	683b      	ldr	r3, [r7, #0]
 801b588:	f103 0418 	add.w	r4, r3, #24
 801b58c:	2107      	movs	r1, #7
 801b58e:	4610      	mov	r0, r2
 801b590:	f7fc fc56 	bl	8017e40 <rotr32>
 801b594:	4603      	mov	r3, r0
 801b596:	6023      	str	r3, [r4, #0]
 801b598:	683b      	ldr	r3, [r7, #0]
 801b59a:	330c      	adds	r3, #12
 801b59c:	681a      	ldr	r2, [r3, #0]
 801b59e:	683b      	ldr	r3, [r7, #0]
 801b5a0:	331c      	adds	r3, #28
 801b5a2:	681b      	ldr	r3, [r3, #0]
 801b5a4:	18d1      	adds	r1, r2, r3
 801b5a6:	2303      	movs	r3, #3
 801b5a8:	009b      	lsls	r3, r3, #2
 801b5aa:	687a      	ldr	r2, [r7, #4]
 801b5ac:	4413      	add	r3, r2
 801b5ae:	681a      	ldr	r2, [r3, #0]
 801b5b0:	683b      	ldr	r3, [r7, #0]
 801b5b2:	330c      	adds	r3, #12
 801b5b4:	440a      	add	r2, r1
 801b5b6:	601a      	str	r2, [r3, #0]
 801b5b8:	683b      	ldr	r3, [r7, #0]
 801b5ba:	333c      	adds	r3, #60	; 0x3c
 801b5bc:	681a      	ldr	r2, [r3, #0]
 801b5be:	683b      	ldr	r3, [r7, #0]
 801b5c0:	330c      	adds	r3, #12
 801b5c2:	681b      	ldr	r3, [r3, #0]
 801b5c4:	405a      	eors	r2, r3
 801b5c6:	683b      	ldr	r3, [r7, #0]
 801b5c8:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 801b5cc:	2110      	movs	r1, #16
 801b5ce:	4610      	mov	r0, r2
 801b5d0:	f7fc fc36 	bl	8017e40 <rotr32>
 801b5d4:	4603      	mov	r3, r0
 801b5d6:	6023      	str	r3, [r4, #0]
 801b5d8:	683b      	ldr	r3, [r7, #0]
 801b5da:	332c      	adds	r3, #44	; 0x2c
 801b5dc:	6819      	ldr	r1, [r3, #0]
 801b5de:	683b      	ldr	r3, [r7, #0]
 801b5e0:	333c      	adds	r3, #60	; 0x3c
 801b5e2:	681a      	ldr	r2, [r3, #0]
 801b5e4:	683b      	ldr	r3, [r7, #0]
 801b5e6:	332c      	adds	r3, #44	; 0x2c
 801b5e8:	440a      	add	r2, r1
 801b5ea:	601a      	str	r2, [r3, #0]
 801b5ec:	683b      	ldr	r3, [r7, #0]
 801b5ee:	331c      	adds	r3, #28
 801b5f0:	681a      	ldr	r2, [r3, #0]
 801b5f2:	683b      	ldr	r3, [r7, #0]
 801b5f4:	332c      	adds	r3, #44	; 0x2c
 801b5f6:	681b      	ldr	r3, [r3, #0]
 801b5f8:	405a      	eors	r2, r3
 801b5fa:	683b      	ldr	r3, [r7, #0]
 801b5fc:	f103 041c 	add.w	r4, r3, #28
 801b600:	210c      	movs	r1, #12
 801b602:	4610      	mov	r0, r2
 801b604:	f7fc fc1c 	bl	8017e40 <rotr32>
 801b608:	4603      	mov	r3, r0
 801b60a:	6023      	str	r3, [r4, #0]
 801b60c:	683b      	ldr	r3, [r7, #0]
 801b60e:	330c      	adds	r3, #12
 801b610:	681a      	ldr	r2, [r3, #0]
 801b612:	683b      	ldr	r3, [r7, #0]
 801b614:	331c      	adds	r3, #28
 801b616:	681b      	ldr	r3, [r3, #0]
 801b618:	18d1      	adds	r1, r2, r3
 801b61a:	2309      	movs	r3, #9
 801b61c:	009b      	lsls	r3, r3, #2
 801b61e:	687a      	ldr	r2, [r7, #4]
 801b620:	4413      	add	r3, r2
 801b622:	681a      	ldr	r2, [r3, #0]
 801b624:	683b      	ldr	r3, [r7, #0]
 801b626:	330c      	adds	r3, #12
 801b628:	440a      	add	r2, r1
 801b62a:	601a      	str	r2, [r3, #0]
 801b62c:	683b      	ldr	r3, [r7, #0]
 801b62e:	333c      	adds	r3, #60	; 0x3c
 801b630:	681a      	ldr	r2, [r3, #0]
 801b632:	683b      	ldr	r3, [r7, #0]
 801b634:	330c      	adds	r3, #12
 801b636:	681b      	ldr	r3, [r3, #0]
 801b638:	405a      	eors	r2, r3
 801b63a:	683b      	ldr	r3, [r7, #0]
 801b63c:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 801b640:	2108      	movs	r1, #8
 801b642:	4610      	mov	r0, r2
 801b644:	f7fc fbfc 	bl	8017e40 <rotr32>
 801b648:	4603      	mov	r3, r0
 801b64a:	6023      	str	r3, [r4, #0]
 801b64c:	683b      	ldr	r3, [r7, #0]
 801b64e:	332c      	adds	r3, #44	; 0x2c
 801b650:	6819      	ldr	r1, [r3, #0]
 801b652:	683b      	ldr	r3, [r7, #0]
 801b654:	333c      	adds	r3, #60	; 0x3c
 801b656:	681a      	ldr	r2, [r3, #0]
 801b658:	683b      	ldr	r3, [r7, #0]
 801b65a:	332c      	adds	r3, #44	; 0x2c
 801b65c:	440a      	add	r2, r1
 801b65e:	601a      	str	r2, [r3, #0]
 801b660:	683b      	ldr	r3, [r7, #0]
 801b662:	331c      	adds	r3, #28
 801b664:	681a      	ldr	r2, [r3, #0]
 801b666:	683b      	ldr	r3, [r7, #0]
 801b668:	332c      	adds	r3, #44	; 0x2c
 801b66a:	681b      	ldr	r3, [r3, #0]
 801b66c:	405a      	eors	r2, r3
 801b66e:	683b      	ldr	r3, [r7, #0]
 801b670:	f103 041c 	add.w	r4, r3, #28
 801b674:	2107      	movs	r1, #7
 801b676:	4610      	mov	r0, r2
 801b678:	f7fc fbe2 	bl	8017e40 <rotr32>
 801b67c:	4603      	mov	r3, r0
 801b67e:	6023      	str	r3, [r4, #0]
 801b680:	683b      	ldr	r3, [r7, #0]
 801b682:	681a      	ldr	r2, [r3, #0]
 801b684:	683b      	ldr	r3, [r7, #0]
 801b686:	3314      	adds	r3, #20
 801b688:	681b      	ldr	r3, [r3, #0]
 801b68a:	441a      	add	r2, r3
 801b68c:	2305      	movs	r3, #5
 801b68e:	009b      	lsls	r3, r3, #2
 801b690:	6879      	ldr	r1, [r7, #4]
 801b692:	440b      	add	r3, r1
 801b694:	681b      	ldr	r3, [r3, #0]
 801b696:	441a      	add	r2, r3
 801b698:	683b      	ldr	r3, [r7, #0]
 801b69a:	601a      	str	r2, [r3, #0]
 801b69c:	683b      	ldr	r3, [r7, #0]
 801b69e:	333c      	adds	r3, #60	; 0x3c
 801b6a0:	681a      	ldr	r2, [r3, #0]
 801b6a2:	683b      	ldr	r3, [r7, #0]
 801b6a4:	681b      	ldr	r3, [r3, #0]
 801b6a6:	405a      	eors	r2, r3
 801b6a8:	683b      	ldr	r3, [r7, #0]
 801b6aa:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 801b6ae:	2110      	movs	r1, #16
 801b6b0:	4610      	mov	r0, r2
 801b6b2:	f7fc fbc5 	bl	8017e40 <rotr32>
 801b6b6:	4603      	mov	r3, r0
 801b6b8:	6023      	str	r3, [r4, #0]
 801b6ba:	683b      	ldr	r3, [r7, #0]
 801b6bc:	3328      	adds	r3, #40	; 0x28
 801b6be:	6819      	ldr	r1, [r3, #0]
 801b6c0:	683b      	ldr	r3, [r7, #0]
 801b6c2:	333c      	adds	r3, #60	; 0x3c
 801b6c4:	681a      	ldr	r2, [r3, #0]
 801b6c6:	683b      	ldr	r3, [r7, #0]
 801b6c8:	3328      	adds	r3, #40	; 0x28
 801b6ca:	440a      	add	r2, r1
 801b6cc:	601a      	str	r2, [r3, #0]
 801b6ce:	683b      	ldr	r3, [r7, #0]
 801b6d0:	3314      	adds	r3, #20
 801b6d2:	681a      	ldr	r2, [r3, #0]
 801b6d4:	683b      	ldr	r3, [r7, #0]
 801b6d6:	3328      	adds	r3, #40	; 0x28
 801b6d8:	681b      	ldr	r3, [r3, #0]
 801b6da:	405a      	eors	r2, r3
 801b6dc:	683b      	ldr	r3, [r7, #0]
 801b6de:	f103 0414 	add.w	r4, r3, #20
 801b6e2:	210c      	movs	r1, #12
 801b6e4:	4610      	mov	r0, r2
 801b6e6:	f7fc fbab 	bl	8017e40 <rotr32>
 801b6ea:	4603      	mov	r3, r0
 801b6ec:	6023      	str	r3, [r4, #0]
 801b6ee:	683b      	ldr	r3, [r7, #0]
 801b6f0:	681a      	ldr	r2, [r3, #0]
 801b6f2:	683b      	ldr	r3, [r7, #0]
 801b6f4:	3314      	adds	r3, #20
 801b6f6:	681b      	ldr	r3, [r3, #0]
 801b6f8:	441a      	add	r2, r3
 801b6fa:	2300      	movs	r3, #0
 801b6fc:	009b      	lsls	r3, r3, #2
 801b6fe:	6879      	ldr	r1, [r7, #4]
 801b700:	440b      	add	r3, r1
 801b702:	681b      	ldr	r3, [r3, #0]
 801b704:	441a      	add	r2, r3
 801b706:	683b      	ldr	r3, [r7, #0]
 801b708:	601a      	str	r2, [r3, #0]
 801b70a:	683b      	ldr	r3, [r7, #0]
 801b70c:	333c      	adds	r3, #60	; 0x3c
 801b70e:	681a      	ldr	r2, [r3, #0]
 801b710:	683b      	ldr	r3, [r7, #0]
 801b712:	681b      	ldr	r3, [r3, #0]
 801b714:	405a      	eors	r2, r3
 801b716:	683b      	ldr	r3, [r7, #0]
 801b718:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 801b71c:	2108      	movs	r1, #8
 801b71e:	4610      	mov	r0, r2
 801b720:	f7fc fb8e 	bl	8017e40 <rotr32>
 801b724:	4603      	mov	r3, r0
 801b726:	6023      	str	r3, [r4, #0]
 801b728:	683b      	ldr	r3, [r7, #0]
 801b72a:	3328      	adds	r3, #40	; 0x28
 801b72c:	6819      	ldr	r1, [r3, #0]
 801b72e:	683b      	ldr	r3, [r7, #0]
 801b730:	333c      	adds	r3, #60	; 0x3c
 801b732:	681a      	ldr	r2, [r3, #0]
 801b734:	683b      	ldr	r3, [r7, #0]
 801b736:	3328      	adds	r3, #40	; 0x28
 801b738:	440a      	add	r2, r1
 801b73a:	601a      	str	r2, [r3, #0]
 801b73c:	683b      	ldr	r3, [r7, #0]
 801b73e:	3314      	adds	r3, #20
 801b740:	681a      	ldr	r2, [r3, #0]
 801b742:	683b      	ldr	r3, [r7, #0]
 801b744:	3328      	adds	r3, #40	; 0x28
 801b746:	681b      	ldr	r3, [r3, #0]
 801b748:	405a      	eors	r2, r3
 801b74a:	683b      	ldr	r3, [r7, #0]
 801b74c:	f103 0414 	add.w	r4, r3, #20
 801b750:	2107      	movs	r1, #7
 801b752:	4610      	mov	r0, r2
 801b754:	f7fc fb74 	bl	8017e40 <rotr32>
 801b758:	4603      	mov	r3, r0
 801b75a:	6023      	str	r3, [r4, #0]
 801b75c:	683b      	ldr	r3, [r7, #0]
 801b75e:	3304      	adds	r3, #4
 801b760:	681a      	ldr	r2, [r3, #0]
 801b762:	683b      	ldr	r3, [r7, #0]
 801b764:	3318      	adds	r3, #24
 801b766:	681b      	ldr	r3, [r3, #0]
 801b768:	18d1      	adds	r1, r2, r3
 801b76a:	230f      	movs	r3, #15
 801b76c:	009b      	lsls	r3, r3, #2
 801b76e:	687a      	ldr	r2, [r7, #4]
 801b770:	4413      	add	r3, r2
 801b772:	681a      	ldr	r2, [r3, #0]
 801b774:	683b      	ldr	r3, [r7, #0]
 801b776:	3304      	adds	r3, #4
 801b778:	440a      	add	r2, r1
 801b77a:	601a      	str	r2, [r3, #0]
 801b77c:	683b      	ldr	r3, [r7, #0]
 801b77e:	3330      	adds	r3, #48	; 0x30
 801b780:	681a      	ldr	r2, [r3, #0]
 801b782:	683b      	ldr	r3, [r7, #0]
 801b784:	3304      	adds	r3, #4
 801b786:	681b      	ldr	r3, [r3, #0]
 801b788:	405a      	eors	r2, r3
 801b78a:	683b      	ldr	r3, [r7, #0]
 801b78c:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801b790:	2110      	movs	r1, #16
 801b792:	4610      	mov	r0, r2
 801b794:	f7fc fb54 	bl	8017e40 <rotr32>
 801b798:	4603      	mov	r3, r0
 801b79a:	6023      	str	r3, [r4, #0]
 801b79c:	683b      	ldr	r3, [r7, #0]
 801b79e:	332c      	adds	r3, #44	; 0x2c
 801b7a0:	6819      	ldr	r1, [r3, #0]
 801b7a2:	683b      	ldr	r3, [r7, #0]
 801b7a4:	3330      	adds	r3, #48	; 0x30
 801b7a6:	681a      	ldr	r2, [r3, #0]
 801b7a8:	683b      	ldr	r3, [r7, #0]
 801b7aa:	332c      	adds	r3, #44	; 0x2c
 801b7ac:	440a      	add	r2, r1
 801b7ae:	601a      	str	r2, [r3, #0]
 801b7b0:	683b      	ldr	r3, [r7, #0]
 801b7b2:	3318      	adds	r3, #24
 801b7b4:	681a      	ldr	r2, [r3, #0]
 801b7b6:	683b      	ldr	r3, [r7, #0]
 801b7b8:	332c      	adds	r3, #44	; 0x2c
 801b7ba:	681b      	ldr	r3, [r3, #0]
 801b7bc:	405a      	eors	r2, r3
 801b7be:	683b      	ldr	r3, [r7, #0]
 801b7c0:	f103 0418 	add.w	r4, r3, #24
 801b7c4:	210c      	movs	r1, #12
 801b7c6:	4610      	mov	r0, r2
 801b7c8:	f7fc fb3a 	bl	8017e40 <rotr32>
 801b7cc:	4603      	mov	r3, r0
 801b7ce:	6023      	str	r3, [r4, #0]
 801b7d0:	683b      	ldr	r3, [r7, #0]
 801b7d2:	3304      	adds	r3, #4
 801b7d4:	681a      	ldr	r2, [r3, #0]
 801b7d6:	683b      	ldr	r3, [r7, #0]
 801b7d8:	3318      	adds	r3, #24
 801b7da:	681b      	ldr	r3, [r3, #0]
 801b7dc:	18d1      	adds	r1, r2, r3
 801b7de:	2304      	movs	r3, #4
 801b7e0:	009b      	lsls	r3, r3, #2
 801b7e2:	687a      	ldr	r2, [r7, #4]
 801b7e4:	4413      	add	r3, r2
 801b7e6:	681a      	ldr	r2, [r3, #0]
 801b7e8:	683b      	ldr	r3, [r7, #0]
 801b7ea:	3304      	adds	r3, #4
 801b7ec:	440a      	add	r2, r1
 801b7ee:	601a      	str	r2, [r3, #0]
 801b7f0:	683b      	ldr	r3, [r7, #0]
 801b7f2:	3330      	adds	r3, #48	; 0x30
 801b7f4:	681a      	ldr	r2, [r3, #0]
 801b7f6:	683b      	ldr	r3, [r7, #0]
 801b7f8:	3304      	adds	r3, #4
 801b7fa:	681b      	ldr	r3, [r3, #0]
 801b7fc:	405a      	eors	r2, r3
 801b7fe:	683b      	ldr	r3, [r7, #0]
 801b800:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801b804:	2108      	movs	r1, #8
 801b806:	4610      	mov	r0, r2
 801b808:	f7fc fb1a 	bl	8017e40 <rotr32>
 801b80c:	4603      	mov	r3, r0
 801b80e:	6023      	str	r3, [r4, #0]
 801b810:	683b      	ldr	r3, [r7, #0]
 801b812:	332c      	adds	r3, #44	; 0x2c
 801b814:	6819      	ldr	r1, [r3, #0]
 801b816:	683b      	ldr	r3, [r7, #0]
 801b818:	3330      	adds	r3, #48	; 0x30
 801b81a:	681a      	ldr	r2, [r3, #0]
 801b81c:	683b      	ldr	r3, [r7, #0]
 801b81e:	332c      	adds	r3, #44	; 0x2c
 801b820:	440a      	add	r2, r1
 801b822:	601a      	str	r2, [r3, #0]
 801b824:	683b      	ldr	r3, [r7, #0]
 801b826:	3318      	adds	r3, #24
 801b828:	681a      	ldr	r2, [r3, #0]
 801b82a:	683b      	ldr	r3, [r7, #0]
 801b82c:	332c      	adds	r3, #44	; 0x2c
 801b82e:	681b      	ldr	r3, [r3, #0]
 801b830:	405a      	eors	r2, r3
 801b832:	683b      	ldr	r3, [r7, #0]
 801b834:	f103 0418 	add.w	r4, r3, #24
 801b838:	2107      	movs	r1, #7
 801b83a:	4610      	mov	r0, r2
 801b83c:	f7fc fb00 	bl	8017e40 <rotr32>
 801b840:	4603      	mov	r3, r0
 801b842:	6023      	str	r3, [r4, #0]
 801b844:	683b      	ldr	r3, [r7, #0]
 801b846:	3308      	adds	r3, #8
 801b848:	681a      	ldr	r2, [r3, #0]
 801b84a:	683b      	ldr	r3, [r7, #0]
 801b84c:	331c      	adds	r3, #28
 801b84e:	681b      	ldr	r3, [r3, #0]
 801b850:	18d1      	adds	r1, r2, r3
 801b852:	2308      	movs	r3, #8
 801b854:	009b      	lsls	r3, r3, #2
 801b856:	687a      	ldr	r2, [r7, #4]
 801b858:	4413      	add	r3, r2
 801b85a:	681a      	ldr	r2, [r3, #0]
 801b85c:	683b      	ldr	r3, [r7, #0]
 801b85e:	3308      	adds	r3, #8
 801b860:	440a      	add	r2, r1
 801b862:	601a      	str	r2, [r3, #0]
 801b864:	683b      	ldr	r3, [r7, #0]
 801b866:	3334      	adds	r3, #52	; 0x34
 801b868:	681a      	ldr	r2, [r3, #0]
 801b86a:	683b      	ldr	r3, [r7, #0]
 801b86c:	3308      	adds	r3, #8
 801b86e:	681b      	ldr	r3, [r3, #0]
 801b870:	405a      	eors	r2, r3
 801b872:	683b      	ldr	r3, [r7, #0]
 801b874:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801b878:	2110      	movs	r1, #16
 801b87a:	4610      	mov	r0, r2
 801b87c:	f7fc fae0 	bl	8017e40 <rotr32>
 801b880:	4603      	mov	r3, r0
 801b882:	6023      	str	r3, [r4, #0]
 801b884:	683b      	ldr	r3, [r7, #0]
 801b886:	3320      	adds	r3, #32
 801b888:	6819      	ldr	r1, [r3, #0]
 801b88a:	683b      	ldr	r3, [r7, #0]
 801b88c:	3334      	adds	r3, #52	; 0x34
 801b88e:	681a      	ldr	r2, [r3, #0]
 801b890:	683b      	ldr	r3, [r7, #0]
 801b892:	3320      	adds	r3, #32
 801b894:	440a      	add	r2, r1
 801b896:	601a      	str	r2, [r3, #0]
 801b898:	683b      	ldr	r3, [r7, #0]
 801b89a:	331c      	adds	r3, #28
 801b89c:	681a      	ldr	r2, [r3, #0]
 801b89e:	683b      	ldr	r3, [r7, #0]
 801b8a0:	3320      	adds	r3, #32
 801b8a2:	681b      	ldr	r3, [r3, #0]
 801b8a4:	405a      	eors	r2, r3
 801b8a6:	683b      	ldr	r3, [r7, #0]
 801b8a8:	f103 041c 	add.w	r4, r3, #28
 801b8ac:	210c      	movs	r1, #12
 801b8ae:	4610      	mov	r0, r2
 801b8b0:	f7fc fac6 	bl	8017e40 <rotr32>
 801b8b4:	4603      	mov	r3, r0
 801b8b6:	6023      	str	r3, [r4, #0]
 801b8b8:	683b      	ldr	r3, [r7, #0]
 801b8ba:	3308      	adds	r3, #8
 801b8bc:	681a      	ldr	r2, [r3, #0]
 801b8be:	683b      	ldr	r3, [r7, #0]
 801b8c0:	331c      	adds	r3, #28
 801b8c2:	681b      	ldr	r3, [r3, #0]
 801b8c4:	18d1      	adds	r1, r2, r3
 801b8c6:	2306      	movs	r3, #6
 801b8c8:	009b      	lsls	r3, r3, #2
 801b8ca:	687a      	ldr	r2, [r7, #4]
 801b8cc:	4413      	add	r3, r2
 801b8ce:	681a      	ldr	r2, [r3, #0]
 801b8d0:	683b      	ldr	r3, [r7, #0]
 801b8d2:	3308      	adds	r3, #8
 801b8d4:	440a      	add	r2, r1
 801b8d6:	601a      	str	r2, [r3, #0]
 801b8d8:	683b      	ldr	r3, [r7, #0]
 801b8da:	3334      	adds	r3, #52	; 0x34
 801b8dc:	681a      	ldr	r2, [r3, #0]
 801b8de:	683b      	ldr	r3, [r7, #0]
 801b8e0:	3308      	adds	r3, #8
 801b8e2:	681b      	ldr	r3, [r3, #0]
 801b8e4:	405a      	eors	r2, r3
 801b8e6:	683b      	ldr	r3, [r7, #0]
 801b8e8:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801b8ec:	2108      	movs	r1, #8
 801b8ee:	4610      	mov	r0, r2
 801b8f0:	f7fc faa6 	bl	8017e40 <rotr32>
 801b8f4:	4603      	mov	r3, r0
 801b8f6:	6023      	str	r3, [r4, #0]
 801b8f8:	683b      	ldr	r3, [r7, #0]
 801b8fa:	3320      	adds	r3, #32
 801b8fc:	6819      	ldr	r1, [r3, #0]
 801b8fe:	683b      	ldr	r3, [r7, #0]
 801b900:	3334      	adds	r3, #52	; 0x34
 801b902:	681a      	ldr	r2, [r3, #0]
 801b904:	683b      	ldr	r3, [r7, #0]
 801b906:	3320      	adds	r3, #32
 801b908:	440a      	add	r2, r1
 801b90a:	601a      	str	r2, [r3, #0]
 801b90c:	683b      	ldr	r3, [r7, #0]
 801b90e:	331c      	adds	r3, #28
 801b910:	681a      	ldr	r2, [r3, #0]
 801b912:	683b      	ldr	r3, [r7, #0]
 801b914:	3320      	adds	r3, #32
 801b916:	681b      	ldr	r3, [r3, #0]
 801b918:	405a      	eors	r2, r3
 801b91a:	683b      	ldr	r3, [r7, #0]
 801b91c:	f103 041c 	add.w	r4, r3, #28
 801b920:	2107      	movs	r1, #7
 801b922:	4610      	mov	r0, r2
 801b924:	f7fc fa8c 	bl	8017e40 <rotr32>
 801b928:	4603      	mov	r3, r0
 801b92a:	6023      	str	r3, [r4, #0]
 801b92c:	683b      	ldr	r3, [r7, #0]
 801b92e:	330c      	adds	r3, #12
 801b930:	681a      	ldr	r2, [r3, #0]
 801b932:	683b      	ldr	r3, [r7, #0]
 801b934:	3310      	adds	r3, #16
 801b936:	681b      	ldr	r3, [r3, #0]
 801b938:	18d1      	adds	r1, r2, r3
 801b93a:	2302      	movs	r3, #2
 801b93c:	009b      	lsls	r3, r3, #2
 801b93e:	687a      	ldr	r2, [r7, #4]
 801b940:	4413      	add	r3, r2
 801b942:	681a      	ldr	r2, [r3, #0]
 801b944:	683b      	ldr	r3, [r7, #0]
 801b946:	330c      	adds	r3, #12
 801b948:	440a      	add	r2, r1
 801b94a:	601a      	str	r2, [r3, #0]
 801b94c:	683b      	ldr	r3, [r7, #0]
 801b94e:	3338      	adds	r3, #56	; 0x38
 801b950:	681a      	ldr	r2, [r3, #0]
 801b952:	683b      	ldr	r3, [r7, #0]
 801b954:	330c      	adds	r3, #12
 801b956:	681b      	ldr	r3, [r3, #0]
 801b958:	405a      	eors	r2, r3
 801b95a:	683b      	ldr	r3, [r7, #0]
 801b95c:	f103 0438 	add.w	r4, r3, #56	; 0x38
 801b960:	2110      	movs	r1, #16
 801b962:	4610      	mov	r0, r2
 801b964:	f7fc fa6c 	bl	8017e40 <rotr32>
 801b968:	4603      	mov	r3, r0
 801b96a:	6023      	str	r3, [r4, #0]
 801b96c:	683b      	ldr	r3, [r7, #0]
 801b96e:	3324      	adds	r3, #36	; 0x24
 801b970:	6819      	ldr	r1, [r3, #0]
 801b972:	683b      	ldr	r3, [r7, #0]
 801b974:	3338      	adds	r3, #56	; 0x38
 801b976:	681a      	ldr	r2, [r3, #0]
 801b978:	683b      	ldr	r3, [r7, #0]
 801b97a:	3324      	adds	r3, #36	; 0x24
 801b97c:	440a      	add	r2, r1
 801b97e:	601a      	str	r2, [r3, #0]
 801b980:	683b      	ldr	r3, [r7, #0]
 801b982:	3310      	adds	r3, #16
 801b984:	681a      	ldr	r2, [r3, #0]
 801b986:	683b      	ldr	r3, [r7, #0]
 801b988:	3324      	adds	r3, #36	; 0x24
 801b98a:	681b      	ldr	r3, [r3, #0]
 801b98c:	405a      	eors	r2, r3
 801b98e:	683b      	ldr	r3, [r7, #0]
 801b990:	f103 0410 	add.w	r4, r3, #16
 801b994:	210c      	movs	r1, #12
 801b996:	4610      	mov	r0, r2
 801b998:	f7fc fa52 	bl	8017e40 <rotr32>
 801b99c:	4603      	mov	r3, r0
 801b99e:	6023      	str	r3, [r4, #0]
 801b9a0:	683b      	ldr	r3, [r7, #0]
 801b9a2:	330c      	adds	r3, #12
 801b9a4:	681a      	ldr	r2, [r3, #0]
 801b9a6:	683b      	ldr	r3, [r7, #0]
 801b9a8:	3310      	adds	r3, #16
 801b9aa:	681b      	ldr	r3, [r3, #0]
 801b9ac:	18d1      	adds	r1, r2, r3
 801b9ae:	230a      	movs	r3, #10
 801b9b0:	009b      	lsls	r3, r3, #2
 801b9b2:	687a      	ldr	r2, [r7, #4]
 801b9b4:	4413      	add	r3, r2
 801b9b6:	681a      	ldr	r2, [r3, #0]
 801b9b8:	683b      	ldr	r3, [r7, #0]
 801b9ba:	330c      	adds	r3, #12
 801b9bc:	440a      	add	r2, r1
 801b9be:	601a      	str	r2, [r3, #0]
 801b9c0:	683b      	ldr	r3, [r7, #0]
 801b9c2:	3338      	adds	r3, #56	; 0x38
 801b9c4:	681a      	ldr	r2, [r3, #0]
 801b9c6:	683b      	ldr	r3, [r7, #0]
 801b9c8:	330c      	adds	r3, #12
 801b9ca:	681b      	ldr	r3, [r3, #0]
 801b9cc:	405a      	eors	r2, r3
 801b9ce:	683b      	ldr	r3, [r7, #0]
 801b9d0:	f103 0438 	add.w	r4, r3, #56	; 0x38
 801b9d4:	2108      	movs	r1, #8
 801b9d6:	4610      	mov	r0, r2
 801b9d8:	f7fc fa32 	bl	8017e40 <rotr32>
 801b9dc:	4603      	mov	r3, r0
 801b9de:	6023      	str	r3, [r4, #0]
 801b9e0:	683b      	ldr	r3, [r7, #0]
 801b9e2:	3324      	adds	r3, #36	; 0x24
 801b9e4:	6819      	ldr	r1, [r3, #0]
 801b9e6:	683b      	ldr	r3, [r7, #0]
 801b9e8:	3338      	adds	r3, #56	; 0x38
 801b9ea:	681a      	ldr	r2, [r3, #0]
 801b9ec:	683b      	ldr	r3, [r7, #0]
 801b9ee:	3324      	adds	r3, #36	; 0x24
 801b9f0:	440a      	add	r2, r1
 801b9f2:	601a      	str	r2, [r3, #0]
 801b9f4:	683b      	ldr	r3, [r7, #0]
 801b9f6:	3310      	adds	r3, #16
 801b9f8:	681a      	ldr	r2, [r3, #0]
 801b9fa:	683b      	ldr	r3, [r7, #0]
 801b9fc:	3324      	adds	r3, #36	; 0x24
 801b9fe:	681b      	ldr	r3, [r3, #0]
 801ba00:	405a      	eors	r2, r3
 801ba02:	683b      	ldr	r3, [r7, #0]
 801ba04:	f103 0410 	add.w	r4, r3, #16
 801ba08:	2107      	movs	r1, #7
 801ba0a:	4610      	mov	r0, r2
 801ba0c:	f7fc fa18 	bl	8017e40 <rotr32>
 801ba10:	4603      	mov	r3, r0
 801ba12:	6023      	str	r3, [r4, #0]
  ROUND( 8 );
 801ba14:	683b      	ldr	r3, [r7, #0]
 801ba16:	681a      	ldr	r2, [r3, #0]
 801ba18:	683b      	ldr	r3, [r7, #0]
 801ba1a:	3310      	adds	r3, #16
 801ba1c:	681b      	ldr	r3, [r3, #0]
 801ba1e:	441a      	add	r2, r3
 801ba20:	2306      	movs	r3, #6
 801ba22:	009b      	lsls	r3, r3, #2
 801ba24:	6879      	ldr	r1, [r7, #4]
 801ba26:	440b      	add	r3, r1
 801ba28:	681b      	ldr	r3, [r3, #0]
 801ba2a:	441a      	add	r2, r3
 801ba2c:	683b      	ldr	r3, [r7, #0]
 801ba2e:	601a      	str	r2, [r3, #0]
 801ba30:	683b      	ldr	r3, [r7, #0]
 801ba32:	3330      	adds	r3, #48	; 0x30
 801ba34:	681a      	ldr	r2, [r3, #0]
 801ba36:	683b      	ldr	r3, [r7, #0]
 801ba38:	681b      	ldr	r3, [r3, #0]
 801ba3a:	405a      	eors	r2, r3
 801ba3c:	683b      	ldr	r3, [r7, #0]
 801ba3e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801ba42:	2110      	movs	r1, #16
 801ba44:	4610      	mov	r0, r2
 801ba46:	f7fc f9fb 	bl	8017e40 <rotr32>
 801ba4a:	4603      	mov	r3, r0
 801ba4c:	6023      	str	r3, [r4, #0]
 801ba4e:	683b      	ldr	r3, [r7, #0]
 801ba50:	3320      	adds	r3, #32
 801ba52:	6819      	ldr	r1, [r3, #0]
 801ba54:	683b      	ldr	r3, [r7, #0]
 801ba56:	3330      	adds	r3, #48	; 0x30
 801ba58:	681a      	ldr	r2, [r3, #0]
 801ba5a:	683b      	ldr	r3, [r7, #0]
 801ba5c:	3320      	adds	r3, #32
 801ba5e:	440a      	add	r2, r1
 801ba60:	601a      	str	r2, [r3, #0]
 801ba62:	683b      	ldr	r3, [r7, #0]
 801ba64:	3310      	adds	r3, #16
 801ba66:	681a      	ldr	r2, [r3, #0]
 801ba68:	683b      	ldr	r3, [r7, #0]
 801ba6a:	3320      	adds	r3, #32
 801ba6c:	681b      	ldr	r3, [r3, #0]
 801ba6e:	405a      	eors	r2, r3
 801ba70:	683b      	ldr	r3, [r7, #0]
 801ba72:	f103 0410 	add.w	r4, r3, #16
 801ba76:	210c      	movs	r1, #12
 801ba78:	4610      	mov	r0, r2
 801ba7a:	f7fc f9e1 	bl	8017e40 <rotr32>
 801ba7e:	4603      	mov	r3, r0
 801ba80:	6023      	str	r3, [r4, #0]
 801ba82:	683b      	ldr	r3, [r7, #0]
 801ba84:	681a      	ldr	r2, [r3, #0]
 801ba86:	683b      	ldr	r3, [r7, #0]
 801ba88:	3310      	adds	r3, #16
 801ba8a:	681b      	ldr	r3, [r3, #0]
 801ba8c:	441a      	add	r2, r3
 801ba8e:	230f      	movs	r3, #15
 801ba90:	009b      	lsls	r3, r3, #2
 801ba92:	6879      	ldr	r1, [r7, #4]
 801ba94:	440b      	add	r3, r1
 801ba96:	681b      	ldr	r3, [r3, #0]
 801ba98:	441a      	add	r2, r3
 801ba9a:	683b      	ldr	r3, [r7, #0]
 801ba9c:	601a      	str	r2, [r3, #0]
 801ba9e:	683b      	ldr	r3, [r7, #0]
 801baa0:	3330      	adds	r3, #48	; 0x30
 801baa2:	681a      	ldr	r2, [r3, #0]
 801baa4:	683b      	ldr	r3, [r7, #0]
 801baa6:	681b      	ldr	r3, [r3, #0]
 801baa8:	405a      	eors	r2, r3
 801baaa:	683b      	ldr	r3, [r7, #0]
 801baac:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801bab0:	2108      	movs	r1, #8
 801bab2:	4610      	mov	r0, r2
 801bab4:	f7fc f9c4 	bl	8017e40 <rotr32>
 801bab8:	4603      	mov	r3, r0
 801baba:	6023      	str	r3, [r4, #0]
 801babc:	683b      	ldr	r3, [r7, #0]
 801babe:	3320      	adds	r3, #32
 801bac0:	6819      	ldr	r1, [r3, #0]
 801bac2:	683b      	ldr	r3, [r7, #0]
 801bac4:	3330      	adds	r3, #48	; 0x30
 801bac6:	681a      	ldr	r2, [r3, #0]
 801bac8:	683b      	ldr	r3, [r7, #0]
 801baca:	3320      	adds	r3, #32
 801bacc:	440a      	add	r2, r1
 801bace:	601a      	str	r2, [r3, #0]
 801bad0:	683b      	ldr	r3, [r7, #0]
 801bad2:	3310      	adds	r3, #16
 801bad4:	681a      	ldr	r2, [r3, #0]
 801bad6:	683b      	ldr	r3, [r7, #0]
 801bad8:	3320      	adds	r3, #32
 801bada:	681b      	ldr	r3, [r3, #0]
 801badc:	405a      	eors	r2, r3
 801bade:	683b      	ldr	r3, [r7, #0]
 801bae0:	f103 0410 	add.w	r4, r3, #16
 801bae4:	2107      	movs	r1, #7
 801bae6:	4610      	mov	r0, r2
 801bae8:	f7fc f9aa 	bl	8017e40 <rotr32>
 801baec:	4603      	mov	r3, r0
 801baee:	6023      	str	r3, [r4, #0]
 801baf0:	683b      	ldr	r3, [r7, #0]
 801baf2:	3304      	adds	r3, #4
 801baf4:	681a      	ldr	r2, [r3, #0]
 801baf6:	683b      	ldr	r3, [r7, #0]
 801baf8:	3314      	adds	r3, #20
 801bafa:	681b      	ldr	r3, [r3, #0]
 801bafc:	18d1      	adds	r1, r2, r3
 801bafe:	230e      	movs	r3, #14
 801bb00:	009b      	lsls	r3, r3, #2
 801bb02:	687a      	ldr	r2, [r7, #4]
 801bb04:	4413      	add	r3, r2
 801bb06:	681a      	ldr	r2, [r3, #0]
 801bb08:	683b      	ldr	r3, [r7, #0]
 801bb0a:	3304      	adds	r3, #4
 801bb0c:	440a      	add	r2, r1
 801bb0e:	601a      	str	r2, [r3, #0]
 801bb10:	683b      	ldr	r3, [r7, #0]
 801bb12:	3334      	adds	r3, #52	; 0x34
 801bb14:	681a      	ldr	r2, [r3, #0]
 801bb16:	683b      	ldr	r3, [r7, #0]
 801bb18:	3304      	adds	r3, #4
 801bb1a:	681b      	ldr	r3, [r3, #0]
 801bb1c:	405a      	eors	r2, r3
 801bb1e:	683b      	ldr	r3, [r7, #0]
 801bb20:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801bb24:	2110      	movs	r1, #16
 801bb26:	4610      	mov	r0, r2
 801bb28:	f7fc f98a 	bl	8017e40 <rotr32>
 801bb2c:	4603      	mov	r3, r0
 801bb2e:	6023      	str	r3, [r4, #0]
 801bb30:	683b      	ldr	r3, [r7, #0]
 801bb32:	3324      	adds	r3, #36	; 0x24
 801bb34:	6819      	ldr	r1, [r3, #0]
 801bb36:	683b      	ldr	r3, [r7, #0]
 801bb38:	3334      	adds	r3, #52	; 0x34
 801bb3a:	681a      	ldr	r2, [r3, #0]
 801bb3c:	683b      	ldr	r3, [r7, #0]
 801bb3e:	3324      	adds	r3, #36	; 0x24
 801bb40:	440a      	add	r2, r1
 801bb42:	601a      	str	r2, [r3, #0]
 801bb44:	683b      	ldr	r3, [r7, #0]
 801bb46:	3314      	adds	r3, #20
 801bb48:	681a      	ldr	r2, [r3, #0]
 801bb4a:	683b      	ldr	r3, [r7, #0]
 801bb4c:	3324      	adds	r3, #36	; 0x24
 801bb4e:	681b      	ldr	r3, [r3, #0]
 801bb50:	405a      	eors	r2, r3
 801bb52:	683b      	ldr	r3, [r7, #0]
 801bb54:	f103 0414 	add.w	r4, r3, #20
 801bb58:	210c      	movs	r1, #12
 801bb5a:	4610      	mov	r0, r2
 801bb5c:	f7fc f970 	bl	8017e40 <rotr32>
 801bb60:	4603      	mov	r3, r0
 801bb62:	6023      	str	r3, [r4, #0]
 801bb64:	683b      	ldr	r3, [r7, #0]
 801bb66:	3304      	adds	r3, #4
 801bb68:	681a      	ldr	r2, [r3, #0]
 801bb6a:	683b      	ldr	r3, [r7, #0]
 801bb6c:	3314      	adds	r3, #20
 801bb6e:	681b      	ldr	r3, [r3, #0]
 801bb70:	18d1      	adds	r1, r2, r3
 801bb72:	2309      	movs	r3, #9
 801bb74:	009b      	lsls	r3, r3, #2
 801bb76:	687a      	ldr	r2, [r7, #4]
 801bb78:	4413      	add	r3, r2
 801bb7a:	681a      	ldr	r2, [r3, #0]
 801bb7c:	683b      	ldr	r3, [r7, #0]
 801bb7e:	3304      	adds	r3, #4
 801bb80:	440a      	add	r2, r1
 801bb82:	601a      	str	r2, [r3, #0]
 801bb84:	683b      	ldr	r3, [r7, #0]
 801bb86:	3334      	adds	r3, #52	; 0x34
 801bb88:	681a      	ldr	r2, [r3, #0]
 801bb8a:	683b      	ldr	r3, [r7, #0]
 801bb8c:	3304      	adds	r3, #4
 801bb8e:	681b      	ldr	r3, [r3, #0]
 801bb90:	405a      	eors	r2, r3
 801bb92:	683b      	ldr	r3, [r7, #0]
 801bb94:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801bb98:	2108      	movs	r1, #8
 801bb9a:	4610      	mov	r0, r2
 801bb9c:	f7fc f950 	bl	8017e40 <rotr32>
 801bba0:	4603      	mov	r3, r0
 801bba2:	6023      	str	r3, [r4, #0]
 801bba4:	683b      	ldr	r3, [r7, #0]
 801bba6:	3324      	adds	r3, #36	; 0x24
 801bba8:	6819      	ldr	r1, [r3, #0]
 801bbaa:	683b      	ldr	r3, [r7, #0]
 801bbac:	3334      	adds	r3, #52	; 0x34
 801bbae:	681a      	ldr	r2, [r3, #0]
 801bbb0:	683b      	ldr	r3, [r7, #0]
 801bbb2:	3324      	adds	r3, #36	; 0x24
 801bbb4:	440a      	add	r2, r1
 801bbb6:	601a      	str	r2, [r3, #0]
 801bbb8:	683b      	ldr	r3, [r7, #0]
 801bbba:	3314      	adds	r3, #20
 801bbbc:	681a      	ldr	r2, [r3, #0]
 801bbbe:	683b      	ldr	r3, [r7, #0]
 801bbc0:	3324      	adds	r3, #36	; 0x24
 801bbc2:	681b      	ldr	r3, [r3, #0]
 801bbc4:	405a      	eors	r2, r3
 801bbc6:	683b      	ldr	r3, [r7, #0]
 801bbc8:	f103 0414 	add.w	r4, r3, #20
 801bbcc:	2107      	movs	r1, #7
 801bbce:	4610      	mov	r0, r2
 801bbd0:	f7fc f936 	bl	8017e40 <rotr32>
 801bbd4:	4603      	mov	r3, r0
 801bbd6:	6023      	str	r3, [r4, #0]
 801bbd8:	683b      	ldr	r3, [r7, #0]
 801bbda:	3308      	adds	r3, #8
 801bbdc:	681a      	ldr	r2, [r3, #0]
 801bbde:	683b      	ldr	r3, [r7, #0]
 801bbe0:	3318      	adds	r3, #24
 801bbe2:	681b      	ldr	r3, [r3, #0]
 801bbe4:	18d1      	adds	r1, r2, r3
 801bbe6:	230b      	movs	r3, #11
 801bbe8:	009b      	lsls	r3, r3, #2
 801bbea:	687a      	ldr	r2, [r7, #4]
 801bbec:	4413      	add	r3, r2
 801bbee:	681a      	ldr	r2, [r3, #0]
 801bbf0:	683b      	ldr	r3, [r7, #0]
 801bbf2:	3308      	adds	r3, #8
 801bbf4:	440a      	add	r2, r1
 801bbf6:	601a      	str	r2, [r3, #0]
 801bbf8:	683b      	ldr	r3, [r7, #0]
 801bbfa:	3338      	adds	r3, #56	; 0x38
 801bbfc:	681a      	ldr	r2, [r3, #0]
 801bbfe:	683b      	ldr	r3, [r7, #0]
 801bc00:	3308      	adds	r3, #8
 801bc02:	681b      	ldr	r3, [r3, #0]
 801bc04:	405a      	eors	r2, r3
 801bc06:	683b      	ldr	r3, [r7, #0]
 801bc08:	f103 0438 	add.w	r4, r3, #56	; 0x38
 801bc0c:	2110      	movs	r1, #16
 801bc0e:	4610      	mov	r0, r2
 801bc10:	f7fc f916 	bl	8017e40 <rotr32>
 801bc14:	4603      	mov	r3, r0
 801bc16:	6023      	str	r3, [r4, #0]
 801bc18:	683b      	ldr	r3, [r7, #0]
 801bc1a:	3328      	adds	r3, #40	; 0x28
 801bc1c:	6819      	ldr	r1, [r3, #0]
 801bc1e:	683b      	ldr	r3, [r7, #0]
 801bc20:	3338      	adds	r3, #56	; 0x38
 801bc22:	681a      	ldr	r2, [r3, #0]
 801bc24:	683b      	ldr	r3, [r7, #0]
 801bc26:	3328      	adds	r3, #40	; 0x28
 801bc28:	440a      	add	r2, r1
 801bc2a:	601a      	str	r2, [r3, #0]
 801bc2c:	683b      	ldr	r3, [r7, #0]
 801bc2e:	3318      	adds	r3, #24
 801bc30:	681a      	ldr	r2, [r3, #0]
 801bc32:	683b      	ldr	r3, [r7, #0]
 801bc34:	3328      	adds	r3, #40	; 0x28
 801bc36:	681b      	ldr	r3, [r3, #0]
 801bc38:	405a      	eors	r2, r3
 801bc3a:	683b      	ldr	r3, [r7, #0]
 801bc3c:	f103 0418 	add.w	r4, r3, #24
 801bc40:	210c      	movs	r1, #12
 801bc42:	4610      	mov	r0, r2
 801bc44:	f7fc f8fc 	bl	8017e40 <rotr32>
 801bc48:	4603      	mov	r3, r0
 801bc4a:	6023      	str	r3, [r4, #0]
 801bc4c:	683b      	ldr	r3, [r7, #0]
 801bc4e:	3308      	adds	r3, #8
 801bc50:	681a      	ldr	r2, [r3, #0]
 801bc52:	683b      	ldr	r3, [r7, #0]
 801bc54:	3318      	adds	r3, #24
 801bc56:	681b      	ldr	r3, [r3, #0]
 801bc58:	18d1      	adds	r1, r2, r3
 801bc5a:	2303      	movs	r3, #3
 801bc5c:	009b      	lsls	r3, r3, #2
 801bc5e:	687a      	ldr	r2, [r7, #4]
 801bc60:	4413      	add	r3, r2
 801bc62:	681a      	ldr	r2, [r3, #0]
 801bc64:	683b      	ldr	r3, [r7, #0]
 801bc66:	3308      	adds	r3, #8
 801bc68:	440a      	add	r2, r1
 801bc6a:	601a      	str	r2, [r3, #0]
 801bc6c:	683b      	ldr	r3, [r7, #0]
 801bc6e:	3338      	adds	r3, #56	; 0x38
 801bc70:	681a      	ldr	r2, [r3, #0]
 801bc72:	683b      	ldr	r3, [r7, #0]
 801bc74:	3308      	adds	r3, #8
 801bc76:	681b      	ldr	r3, [r3, #0]
 801bc78:	405a      	eors	r2, r3
 801bc7a:	683b      	ldr	r3, [r7, #0]
 801bc7c:	f103 0438 	add.w	r4, r3, #56	; 0x38
 801bc80:	2108      	movs	r1, #8
 801bc82:	4610      	mov	r0, r2
 801bc84:	f7fc f8dc 	bl	8017e40 <rotr32>
 801bc88:	4603      	mov	r3, r0
 801bc8a:	6023      	str	r3, [r4, #0]
 801bc8c:	683b      	ldr	r3, [r7, #0]
 801bc8e:	3328      	adds	r3, #40	; 0x28
 801bc90:	6819      	ldr	r1, [r3, #0]
 801bc92:	683b      	ldr	r3, [r7, #0]
 801bc94:	3338      	adds	r3, #56	; 0x38
 801bc96:	681a      	ldr	r2, [r3, #0]
 801bc98:	683b      	ldr	r3, [r7, #0]
 801bc9a:	3328      	adds	r3, #40	; 0x28
 801bc9c:	440a      	add	r2, r1
 801bc9e:	601a      	str	r2, [r3, #0]
 801bca0:	683b      	ldr	r3, [r7, #0]
 801bca2:	3318      	adds	r3, #24
 801bca4:	681a      	ldr	r2, [r3, #0]
 801bca6:	683b      	ldr	r3, [r7, #0]
 801bca8:	3328      	adds	r3, #40	; 0x28
 801bcaa:	681b      	ldr	r3, [r3, #0]
 801bcac:	405a      	eors	r2, r3
 801bcae:	683b      	ldr	r3, [r7, #0]
 801bcb0:	f103 0418 	add.w	r4, r3, #24
 801bcb4:	2107      	movs	r1, #7
 801bcb6:	4610      	mov	r0, r2
 801bcb8:	f7fc f8c2 	bl	8017e40 <rotr32>
 801bcbc:	4603      	mov	r3, r0
 801bcbe:	6023      	str	r3, [r4, #0]
 801bcc0:	683b      	ldr	r3, [r7, #0]
 801bcc2:	330c      	adds	r3, #12
 801bcc4:	681a      	ldr	r2, [r3, #0]
 801bcc6:	683b      	ldr	r3, [r7, #0]
 801bcc8:	331c      	adds	r3, #28
 801bcca:	681b      	ldr	r3, [r3, #0]
 801bccc:	18d1      	adds	r1, r2, r3
 801bcce:	2300      	movs	r3, #0
 801bcd0:	009b      	lsls	r3, r3, #2
 801bcd2:	687a      	ldr	r2, [r7, #4]
 801bcd4:	4413      	add	r3, r2
 801bcd6:	681a      	ldr	r2, [r3, #0]
 801bcd8:	683b      	ldr	r3, [r7, #0]
 801bcda:	330c      	adds	r3, #12
 801bcdc:	440a      	add	r2, r1
 801bcde:	601a      	str	r2, [r3, #0]
 801bce0:	683b      	ldr	r3, [r7, #0]
 801bce2:	333c      	adds	r3, #60	; 0x3c
 801bce4:	681a      	ldr	r2, [r3, #0]
 801bce6:	683b      	ldr	r3, [r7, #0]
 801bce8:	330c      	adds	r3, #12
 801bcea:	681b      	ldr	r3, [r3, #0]
 801bcec:	405a      	eors	r2, r3
 801bcee:	683b      	ldr	r3, [r7, #0]
 801bcf0:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 801bcf4:	2110      	movs	r1, #16
 801bcf6:	4610      	mov	r0, r2
 801bcf8:	f7fc f8a2 	bl	8017e40 <rotr32>
 801bcfc:	4603      	mov	r3, r0
 801bcfe:	6023      	str	r3, [r4, #0]
 801bd00:	683b      	ldr	r3, [r7, #0]
 801bd02:	332c      	adds	r3, #44	; 0x2c
 801bd04:	6819      	ldr	r1, [r3, #0]
 801bd06:	683b      	ldr	r3, [r7, #0]
 801bd08:	333c      	adds	r3, #60	; 0x3c
 801bd0a:	681a      	ldr	r2, [r3, #0]
 801bd0c:	683b      	ldr	r3, [r7, #0]
 801bd0e:	332c      	adds	r3, #44	; 0x2c
 801bd10:	440a      	add	r2, r1
 801bd12:	601a      	str	r2, [r3, #0]
 801bd14:	683b      	ldr	r3, [r7, #0]
 801bd16:	331c      	adds	r3, #28
 801bd18:	681a      	ldr	r2, [r3, #0]
 801bd1a:	683b      	ldr	r3, [r7, #0]
 801bd1c:	332c      	adds	r3, #44	; 0x2c
 801bd1e:	681b      	ldr	r3, [r3, #0]
 801bd20:	405a      	eors	r2, r3
 801bd22:	683b      	ldr	r3, [r7, #0]
 801bd24:	f103 041c 	add.w	r4, r3, #28
 801bd28:	210c      	movs	r1, #12
 801bd2a:	4610      	mov	r0, r2
 801bd2c:	f7fc f888 	bl	8017e40 <rotr32>
 801bd30:	4603      	mov	r3, r0
 801bd32:	6023      	str	r3, [r4, #0]
 801bd34:	683b      	ldr	r3, [r7, #0]
 801bd36:	330c      	adds	r3, #12
 801bd38:	681a      	ldr	r2, [r3, #0]
 801bd3a:	683b      	ldr	r3, [r7, #0]
 801bd3c:	331c      	adds	r3, #28
 801bd3e:	681b      	ldr	r3, [r3, #0]
 801bd40:	18d1      	adds	r1, r2, r3
 801bd42:	2308      	movs	r3, #8
 801bd44:	009b      	lsls	r3, r3, #2
 801bd46:	687a      	ldr	r2, [r7, #4]
 801bd48:	4413      	add	r3, r2
 801bd4a:	681a      	ldr	r2, [r3, #0]
 801bd4c:	683b      	ldr	r3, [r7, #0]
 801bd4e:	330c      	adds	r3, #12
 801bd50:	440a      	add	r2, r1
 801bd52:	601a      	str	r2, [r3, #0]
 801bd54:	683b      	ldr	r3, [r7, #0]
 801bd56:	333c      	adds	r3, #60	; 0x3c
 801bd58:	681a      	ldr	r2, [r3, #0]
 801bd5a:	683b      	ldr	r3, [r7, #0]
 801bd5c:	330c      	adds	r3, #12
 801bd5e:	681b      	ldr	r3, [r3, #0]
 801bd60:	405a      	eors	r2, r3
 801bd62:	683b      	ldr	r3, [r7, #0]
 801bd64:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 801bd68:	2108      	movs	r1, #8
 801bd6a:	4610      	mov	r0, r2
 801bd6c:	f7fc f868 	bl	8017e40 <rotr32>
 801bd70:	4603      	mov	r3, r0
 801bd72:	6023      	str	r3, [r4, #0]
 801bd74:	683b      	ldr	r3, [r7, #0]
 801bd76:	332c      	adds	r3, #44	; 0x2c
 801bd78:	6819      	ldr	r1, [r3, #0]
 801bd7a:	683b      	ldr	r3, [r7, #0]
 801bd7c:	333c      	adds	r3, #60	; 0x3c
 801bd7e:	681a      	ldr	r2, [r3, #0]
 801bd80:	683b      	ldr	r3, [r7, #0]
 801bd82:	332c      	adds	r3, #44	; 0x2c
 801bd84:	440a      	add	r2, r1
 801bd86:	601a      	str	r2, [r3, #0]
 801bd88:	683b      	ldr	r3, [r7, #0]
 801bd8a:	331c      	adds	r3, #28
 801bd8c:	681a      	ldr	r2, [r3, #0]
 801bd8e:	683b      	ldr	r3, [r7, #0]
 801bd90:	332c      	adds	r3, #44	; 0x2c
 801bd92:	681b      	ldr	r3, [r3, #0]
 801bd94:	405a      	eors	r2, r3
 801bd96:	683b      	ldr	r3, [r7, #0]
 801bd98:	f103 041c 	add.w	r4, r3, #28
 801bd9c:	2107      	movs	r1, #7
 801bd9e:	4610      	mov	r0, r2
 801bda0:	f7fc f84e 	bl	8017e40 <rotr32>
 801bda4:	4603      	mov	r3, r0
 801bda6:	6023      	str	r3, [r4, #0]
 801bda8:	683b      	ldr	r3, [r7, #0]
 801bdaa:	681a      	ldr	r2, [r3, #0]
 801bdac:	683b      	ldr	r3, [r7, #0]
 801bdae:	3314      	adds	r3, #20
 801bdb0:	681b      	ldr	r3, [r3, #0]
 801bdb2:	441a      	add	r2, r3
 801bdb4:	230c      	movs	r3, #12
 801bdb6:	009b      	lsls	r3, r3, #2
 801bdb8:	6879      	ldr	r1, [r7, #4]
 801bdba:	440b      	add	r3, r1
 801bdbc:	681b      	ldr	r3, [r3, #0]
 801bdbe:	441a      	add	r2, r3
 801bdc0:	683b      	ldr	r3, [r7, #0]
 801bdc2:	601a      	str	r2, [r3, #0]
 801bdc4:	683b      	ldr	r3, [r7, #0]
 801bdc6:	333c      	adds	r3, #60	; 0x3c
 801bdc8:	681a      	ldr	r2, [r3, #0]
 801bdca:	683b      	ldr	r3, [r7, #0]
 801bdcc:	681b      	ldr	r3, [r3, #0]
 801bdce:	405a      	eors	r2, r3
 801bdd0:	683b      	ldr	r3, [r7, #0]
 801bdd2:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 801bdd6:	2110      	movs	r1, #16
 801bdd8:	4610      	mov	r0, r2
 801bdda:	f7fc f831 	bl	8017e40 <rotr32>
 801bdde:	4603      	mov	r3, r0
 801bde0:	6023      	str	r3, [r4, #0]
 801bde2:	683b      	ldr	r3, [r7, #0]
 801bde4:	3328      	adds	r3, #40	; 0x28
 801bde6:	6819      	ldr	r1, [r3, #0]
 801bde8:	683b      	ldr	r3, [r7, #0]
 801bdea:	333c      	adds	r3, #60	; 0x3c
 801bdec:	681a      	ldr	r2, [r3, #0]
 801bdee:	683b      	ldr	r3, [r7, #0]
 801bdf0:	3328      	adds	r3, #40	; 0x28
 801bdf2:	440a      	add	r2, r1
 801bdf4:	601a      	str	r2, [r3, #0]
 801bdf6:	683b      	ldr	r3, [r7, #0]
 801bdf8:	3314      	adds	r3, #20
 801bdfa:	681a      	ldr	r2, [r3, #0]
 801bdfc:	683b      	ldr	r3, [r7, #0]
 801bdfe:	3328      	adds	r3, #40	; 0x28
 801be00:	681b      	ldr	r3, [r3, #0]
 801be02:	405a      	eors	r2, r3
 801be04:	683b      	ldr	r3, [r7, #0]
 801be06:	f103 0414 	add.w	r4, r3, #20
 801be0a:	210c      	movs	r1, #12
 801be0c:	4610      	mov	r0, r2
 801be0e:	f7fc f817 	bl	8017e40 <rotr32>
 801be12:	4603      	mov	r3, r0
 801be14:	6023      	str	r3, [r4, #0]
 801be16:	683b      	ldr	r3, [r7, #0]
 801be18:	681a      	ldr	r2, [r3, #0]
 801be1a:	683b      	ldr	r3, [r7, #0]
 801be1c:	3314      	adds	r3, #20
 801be1e:	681b      	ldr	r3, [r3, #0]
 801be20:	441a      	add	r2, r3
 801be22:	2302      	movs	r3, #2
 801be24:	009b      	lsls	r3, r3, #2
 801be26:	6879      	ldr	r1, [r7, #4]
 801be28:	440b      	add	r3, r1
 801be2a:	681b      	ldr	r3, [r3, #0]
 801be2c:	441a      	add	r2, r3
 801be2e:	683b      	ldr	r3, [r7, #0]
 801be30:	601a      	str	r2, [r3, #0]
 801be32:	683b      	ldr	r3, [r7, #0]
 801be34:	333c      	adds	r3, #60	; 0x3c
 801be36:	681a      	ldr	r2, [r3, #0]
 801be38:	683b      	ldr	r3, [r7, #0]
 801be3a:	681b      	ldr	r3, [r3, #0]
 801be3c:	405a      	eors	r2, r3
 801be3e:	683b      	ldr	r3, [r7, #0]
 801be40:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 801be44:	2108      	movs	r1, #8
 801be46:	4610      	mov	r0, r2
 801be48:	f7fb fffa 	bl	8017e40 <rotr32>
 801be4c:	4603      	mov	r3, r0
 801be4e:	6023      	str	r3, [r4, #0]
 801be50:	683b      	ldr	r3, [r7, #0]
 801be52:	3328      	adds	r3, #40	; 0x28
 801be54:	6819      	ldr	r1, [r3, #0]
 801be56:	683b      	ldr	r3, [r7, #0]
 801be58:	333c      	adds	r3, #60	; 0x3c
 801be5a:	681a      	ldr	r2, [r3, #0]
 801be5c:	683b      	ldr	r3, [r7, #0]
 801be5e:	3328      	adds	r3, #40	; 0x28
 801be60:	440a      	add	r2, r1
 801be62:	601a      	str	r2, [r3, #0]
 801be64:	683b      	ldr	r3, [r7, #0]
 801be66:	3314      	adds	r3, #20
 801be68:	681a      	ldr	r2, [r3, #0]
 801be6a:	683b      	ldr	r3, [r7, #0]
 801be6c:	3328      	adds	r3, #40	; 0x28
 801be6e:	681b      	ldr	r3, [r3, #0]
 801be70:	405a      	eors	r2, r3
 801be72:	683b      	ldr	r3, [r7, #0]
 801be74:	f103 0414 	add.w	r4, r3, #20
 801be78:	2107      	movs	r1, #7
 801be7a:	4610      	mov	r0, r2
 801be7c:	f7fb ffe0 	bl	8017e40 <rotr32>
 801be80:	4603      	mov	r3, r0
 801be82:	6023      	str	r3, [r4, #0]
 801be84:	683b      	ldr	r3, [r7, #0]
 801be86:	3304      	adds	r3, #4
 801be88:	681a      	ldr	r2, [r3, #0]
 801be8a:	683b      	ldr	r3, [r7, #0]
 801be8c:	3318      	adds	r3, #24
 801be8e:	681b      	ldr	r3, [r3, #0]
 801be90:	18d1      	adds	r1, r2, r3
 801be92:	230d      	movs	r3, #13
 801be94:	009b      	lsls	r3, r3, #2
 801be96:	687a      	ldr	r2, [r7, #4]
 801be98:	4413      	add	r3, r2
 801be9a:	681a      	ldr	r2, [r3, #0]
 801be9c:	683b      	ldr	r3, [r7, #0]
 801be9e:	3304      	adds	r3, #4
 801bea0:	440a      	add	r2, r1
 801bea2:	601a      	str	r2, [r3, #0]
 801bea4:	683b      	ldr	r3, [r7, #0]
 801bea6:	3330      	adds	r3, #48	; 0x30
 801bea8:	681a      	ldr	r2, [r3, #0]
 801beaa:	683b      	ldr	r3, [r7, #0]
 801beac:	3304      	adds	r3, #4
 801beae:	681b      	ldr	r3, [r3, #0]
 801beb0:	405a      	eors	r2, r3
 801beb2:	683b      	ldr	r3, [r7, #0]
 801beb4:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801beb8:	2110      	movs	r1, #16
 801beba:	4610      	mov	r0, r2
 801bebc:	f7fb ffc0 	bl	8017e40 <rotr32>
 801bec0:	4603      	mov	r3, r0
 801bec2:	6023      	str	r3, [r4, #0]
 801bec4:	683b      	ldr	r3, [r7, #0]
 801bec6:	332c      	adds	r3, #44	; 0x2c
 801bec8:	6819      	ldr	r1, [r3, #0]
 801beca:	683b      	ldr	r3, [r7, #0]
 801becc:	3330      	adds	r3, #48	; 0x30
 801bece:	681a      	ldr	r2, [r3, #0]
 801bed0:	683b      	ldr	r3, [r7, #0]
 801bed2:	332c      	adds	r3, #44	; 0x2c
 801bed4:	440a      	add	r2, r1
 801bed6:	601a      	str	r2, [r3, #0]
 801bed8:	683b      	ldr	r3, [r7, #0]
 801beda:	3318      	adds	r3, #24
 801bedc:	681a      	ldr	r2, [r3, #0]
 801bede:	683b      	ldr	r3, [r7, #0]
 801bee0:	332c      	adds	r3, #44	; 0x2c
 801bee2:	681b      	ldr	r3, [r3, #0]
 801bee4:	405a      	eors	r2, r3
 801bee6:	683b      	ldr	r3, [r7, #0]
 801bee8:	f103 0418 	add.w	r4, r3, #24
 801beec:	210c      	movs	r1, #12
 801beee:	4610      	mov	r0, r2
 801bef0:	f7fb ffa6 	bl	8017e40 <rotr32>
 801bef4:	4603      	mov	r3, r0
 801bef6:	6023      	str	r3, [r4, #0]
 801bef8:	683b      	ldr	r3, [r7, #0]
 801befa:	3304      	adds	r3, #4
 801befc:	681a      	ldr	r2, [r3, #0]
 801befe:	683b      	ldr	r3, [r7, #0]
 801bf00:	3318      	adds	r3, #24
 801bf02:	681b      	ldr	r3, [r3, #0]
 801bf04:	18d1      	adds	r1, r2, r3
 801bf06:	2307      	movs	r3, #7
 801bf08:	009b      	lsls	r3, r3, #2
 801bf0a:	687a      	ldr	r2, [r7, #4]
 801bf0c:	4413      	add	r3, r2
 801bf0e:	681a      	ldr	r2, [r3, #0]
 801bf10:	683b      	ldr	r3, [r7, #0]
 801bf12:	3304      	adds	r3, #4
 801bf14:	440a      	add	r2, r1
 801bf16:	601a      	str	r2, [r3, #0]
 801bf18:	683b      	ldr	r3, [r7, #0]
 801bf1a:	3330      	adds	r3, #48	; 0x30
 801bf1c:	681a      	ldr	r2, [r3, #0]
 801bf1e:	683b      	ldr	r3, [r7, #0]
 801bf20:	3304      	adds	r3, #4
 801bf22:	681b      	ldr	r3, [r3, #0]
 801bf24:	405a      	eors	r2, r3
 801bf26:	683b      	ldr	r3, [r7, #0]
 801bf28:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801bf2c:	2108      	movs	r1, #8
 801bf2e:	4610      	mov	r0, r2
 801bf30:	f7fb ff86 	bl	8017e40 <rotr32>
 801bf34:	4603      	mov	r3, r0
 801bf36:	6023      	str	r3, [r4, #0]
 801bf38:	683b      	ldr	r3, [r7, #0]
 801bf3a:	332c      	adds	r3, #44	; 0x2c
 801bf3c:	6819      	ldr	r1, [r3, #0]
 801bf3e:	683b      	ldr	r3, [r7, #0]
 801bf40:	3330      	adds	r3, #48	; 0x30
 801bf42:	681a      	ldr	r2, [r3, #0]
 801bf44:	683b      	ldr	r3, [r7, #0]
 801bf46:	332c      	adds	r3, #44	; 0x2c
 801bf48:	440a      	add	r2, r1
 801bf4a:	601a      	str	r2, [r3, #0]
 801bf4c:	683b      	ldr	r3, [r7, #0]
 801bf4e:	3318      	adds	r3, #24
 801bf50:	681a      	ldr	r2, [r3, #0]
 801bf52:	683b      	ldr	r3, [r7, #0]
 801bf54:	332c      	adds	r3, #44	; 0x2c
 801bf56:	681b      	ldr	r3, [r3, #0]
 801bf58:	405a      	eors	r2, r3
 801bf5a:	683b      	ldr	r3, [r7, #0]
 801bf5c:	f103 0418 	add.w	r4, r3, #24
 801bf60:	2107      	movs	r1, #7
 801bf62:	4610      	mov	r0, r2
 801bf64:	f7fb ff6c 	bl	8017e40 <rotr32>
 801bf68:	4603      	mov	r3, r0
 801bf6a:	6023      	str	r3, [r4, #0]
 801bf6c:	683b      	ldr	r3, [r7, #0]
 801bf6e:	3308      	adds	r3, #8
 801bf70:	681a      	ldr	r2, [r3, #0]
 801bf72:	683b      	ldr	r3, [r7, #0]
 801bf74:	331c      	adds	r3, #28
 801bf76:	681b      	ldr	r3, [r3, #0]
 801bf78:	18d1      	adds	r1, r2, r3
 801bf7a:	2301      	movs	r3, #1
 801bf7c:	009b      	lsls	r3, r3, #2
 801bf7e:	687a      	ldr	r2, [r7, #4]
 801bf80:	4413      	add	r3, r2
 801bf82:	681a      	ldr	r2, [r3, #0]
 801bf84:	683b      	ldr	r3, [r7, #0]
 801bf86:	3308      	adds	r3, #8
 801bf88:	440a      	add	r2, r1
 801bf8a:	601a      	str	r2, [r3, #0]
 801bf8c:	683b      	ldr	r3, [r7, #0]
 801bf8e:	3334      	adds	r3, #52	; 0x34
 801bf90:	681a      	ldr	r2, [r3, #0]
 801bf92:	683b      	ldr	r3, [r7, #0]
 801bf94:	3308      	adds	r3, #8
 801bf96:	681b      	ldr	r3, [r3, #0]
 801bf98:	405a      	eors	r2, r3
 801bf9a:	683b      	ldr	r3, [r7, #0]
 801bf9c:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801bfa0:	2110      	movs	r1, #16
 801bfa2:	4610      	mov	r0, r2
 801bfa4:	f7fb ff4c 	bl	8017e40 <rotr32>
 801bfa8:	4603      	mov	r3, r0
 801bfaa:	6023      	str	r3, [r4, #0]
 801bfac:	683b      	ldr	r3, [r7, #0]
 801bfae:	3320      	adds	r3, #32
 801bfb0:	6819      	ldr	r1, [r3, #0]
 801bfb2:	683b      	ldr	r3, [r7, #0]
 801bfb4:	3334      	adds	r3, #52	; 0x34
 801bfb6:	681a      	ldr	r2, [r3, #0]
 801bfb8:	683b      	ldr	r3, [r7, #0]
 801bfba:	3320      	adds	r3, #32
 801bfbc:	440a      	add	r2, r1
 801bfbe:	601a      	str	r2, [r3, #0]
 801bfc0:	683b      	ldr	r3, [r7, #0]
 801bfc2:	331c      	adds	r3, #28
 801bfc4:	681a      	ldr	r2, [r3, #0]
 801bfc6:	683b      	ldr	r3, [r7, #0]
 801bfc8:	3320      	adds	r3, #32
 801bfca:	681b      	ldr	r3, [r3, #0]
 801bfcc:	405a      	eors	r2, r3
 801bfce:	683b      	ldr	r3, [r7, #0]
 801bfd0:	f103 041c 	add.w	r4, r3, #28
 801bfd4:	210c      	movs	r1, #12
 801bfd6:	4610      	mov	r0, r2
 801bfd8:	f7fb ff32 	bl	8017e40 <rotr32>
 801bfdc:	4603      	mov	r3, r0
 801bfde:	6023      	str	r3, [r4, #0]
 801bfe0:	683b      	ldr	r3, [r7, #0]
 801bfe2:	3308      	adds	r3, #8
 801bfe4:	681a      	ldr	r2, [r3, #0]
 801bfe6:	683b      	ldr	r3, [r7, #0]
 801bfe8:	331c      	adds	r3, #28
 801bfea:	681b      	ldr	r3, [r3, #0]
 801bfec:	18d1      	adds	r1, r2, r3
 801bfee:	2304      	movs	r3, #4
 801bff0:	009b      	lsls	r3, r3, #2
 801bff2:	687a      	ldr	r2, [r7, #4]
 801bff4:	4413      	add	r3, r2
 801bff6:	681a      	ldr	r2, [r3, #0]
 801bff8:	683b      	ldr	r3, [r7, #0]
 801bffa:	3308      	adds	r3, #8
 801bffc:	440a      	add	r2, r1
 801bffe:	601a      	str	r2, [r3, #0]
 801c000:	683b      	ldr	r3, [r7, #0]
 801c002:	3334      	adds	r3, #52	; 0x34
 801c004:	681a      	ldr	r2, [r3, #0]
 801c006:	683b      	ldr	r3, [r7, #0]
 801c008:	3308      	adds	r3, #8
 801c00a:	681b      	ldr	r3, [r3, #0]
 801c00c:	405a      	eors	r2, r3
 801c00e:	683b      	ldr	r3, [r7, #0]
 801c010:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801c014:	2108      	movs	r1, #8
 801c016:	4610      	mov	r0, r2
 801c018:	f7fb ff12 	bl	8017e40 <rotr32>
 801c01c:	4603      	mov	r3, r0
 801c01e:	6023      	str	r3, [r4, #0]
 801c020:	683b      	ldr	r3, [r7, #0]
 801c022:	3320      	adds	r3, #32
 801c024:	6819      	ldr	r1, [r3, #0]
 801c026:	683b      	ldr	r3, [r7, #0]
 801c028:	3334      	adds	r3, #52	; 0x34
 801c02a:	681a      	ldr	r2, [r3, #0]
 801c02c:	683b      	ldr	r3, [r7, #0]
 801c02e:	3320      	adds	r3, #32
 801c030:	440a      	add	r2, r1
 801c032:	601a      	str	r2, [r3, #0]
 801c034:	683b      	ldr	r3, [r7, #0]
 801c036:	331c      	adds	r3, #28
 801c038:	681a      	ldr	r2, [r3, #0]
 801c03a:	683b      	ldr	r3, [r7, #0]
 801c03c:	3320      	adds	r3, #32
 801c03e:	681b      	ldr	r3, [r3, #0]
 801c040:	405a      	eors	r2, r3
 801c042:	683b      	ldr	r3, [r7, #0]
 801c044:	f103 041c 	add.w	r4, r3, #28
 801c048:	2107      	movs	r1, #7
 801c04a:	4610      	mov	r0, r2
 801c04c:	f7fb fef8 	bl	8017e40 <rotr32>
 801c050:	4603      	mov	r3, r0
 801c052:	6023      	str	r3, [r4, #0]
 801c054:	683b      	ldr	r3, [r7, #0]
 801c056:	330c      	adds	r3, #12
 801c058:	681a      	ldr	r2, [r3, #0]
 801c05a:	683b      	ldr	r3, [r7, #0]
 801c05c:	3310      	adds	r3, #16
 801c05e:	681b      	ldr	r3, [r3, #0]
 801c060:	18d1      	adds	r1, r2, r3
 801c062:	230a      	movs	r3, #10
 801c064:	009b      	lsls	r3, r3, #2
 801c066:	687a      	ldr	r2, [r7, #4]
 801c068:	4413      	add	r3, r2
 801c06a:	681a      	ldr	r2, [r3, #0]
 801c06c:	683b      	ldr	r3, [r7, #0]
 801c06e:	330c      	adds	r3, #12
 801c070:	440a      	add	r2, r1
 801c072:	601a      	str	r2, [r3, #0]
 801c074:	683b      	ldr	r3, [r7, #0]
 801c076:	3338      	adds	r3, #56	; 0x38
 801c078:	681a      	ldr	r2, [r3, #0]
 801c07a:	683b      	ldr	r3, [r7, #0]
 801c07c:	330c      	adds	r3, #12
 801c07e:	681b      	ldr	r3, [r3, #0]
 801c080:	405a      	eors	r2, r3
 801c082:	683b      	ldr	r3, [r7, #0]
 801c084:	f103 0438 	add.w	r4, r3, #56	; 0x38
 801c088:	2110      	movs	r1, #16
 801c08a:	4610      	mov	r0, r2
 801c08c:	f7fb fed8 	bl	8017e40 <rotr32>
 801c090:	4603      	mov	r3, r0
 801c092:	6023      	str	r3, [r4, #0]
 801c094:	683b      	ldr	r3, [r7, #0]
 801c096:	3324      	adds	r3, #36	; 0x24
 801c098:	6819      	ldr	r1, [r3, #0]
 801c09a:	683b      	ldr	r3, [r7, #0]
 801c09c:	3338      	adds	r3, #56	; 0x38
 801c09e:	681a      	ldr	r2, [r3, #0]
 801c0a0:	683b      	ldr	r3, [r7, #0]
 801c0a2:	3324      	adds	r3, #36	; 0x24
 801c0a4:	440a      	add	r2, r1
 801c0a6:	601a      	str	r2, [r3, #0]
 801c0a8:	683b      	ldr	r3, [r7, #0]
 801c0aa:	3310      	adds	r3, #16
 801c0ac:	681a      	ldr	r2, [r3, #0]
 801c0ae:	683b      	ldr	r3, [r7, #0]
 801c0b0:	3324      	adds	r3, #36	; 0x24
 801c0b2:	681b      	ldr	r3, [r3, #0]
 801c0b4:	405a      	eors	r2, r3
 801c0b6:	683b      	ldr	r3, [r7, #0]
 801c0b8:	f103 0410 	add.w	r4, r3, #16
 801c0bc:	210c      	movs	r1, #12
 801c0be:	4610      	mov	r0, r2
 801c0c0:	f7fb febe 	bl	8017e40 <rotr32>
 801c0c4:	4603      	mov	r3, r0
 801c0c6:	6023      	str	r3, [r4, #0]
 801c0c8:	683b      	ldr	r3, [r7, #0]
 801c0ca:	330c      	adds	r3, #12
 801c0cc:	681a      	ldr	r2, [r3, #0]
 801c0ce:	683b      	ldr	r3, [r7, #0]
 801c0d0:	3310      	adds	r3, #16
 801c0d2:	681b      	ldr	r3, [r3, #0]
 801c0d4:	18d1      	adds	r1, r2, r3
 801c0d6:	2305      	movs	r3, #5
 801c0d8:	009b      	lsls	r3, r3, #2
 801c0da:	687a      	ldr	r2, [r7, #4]
 801c0dc:	4413      	add	r3, r2
 801c0de:	681a      	ldr	r2, [r3, #0]
 801c0e0:	683b      	ldr	r3, [r7, #0]
 801c0e2:	330c      	adds	r3, #12
 801c0e4:	440a      	add	r2, r1
 801c0e6:	601a      	str	r2, [r3, #0]
 801c0e8:	683b      	ldr	r3, [r7, #0]
 801c0ea:	3338      	adds	r3, #56	; 0x38
 801c0ec:	681a      	ldr	r2, [r3, #0]
 801c0ee:	683b      	ldr	r3, [r7, #0]
 801c0f0:	330c      	adds	r3, #12
 801c0f2:	681b      	ldr	r3, [r3, #0]
 801c0f4:	405a      	eors	r2, r3
 801c0f6:	683b      	ldr	r3, [r7, #0]
 801c0f8:	f103 0438 	add.w	r4, r3, #56	; 0x38
 801c0fc:	2108      	movs	r1, #8
 801c0fe:	4610      	mov	r0, r2
 801c100:	f7fb fe9e 	bl	8017e40 <rotr32>
 801c104:	4603      	mov	r3, r0
 801c106:	6023      	str	r3, [r4, #0]
 801c108:	683b      	ldr	r3, [r7, #0]
 801c10a:	3324      	adds	r3, #36	; 0x24
 801c10c:	6819      	ldr	r1, [r3, #0]
 801c10e:	683b      	ldr	r3, [r7, #0]
 801c110:	3338      	adds	r3, #56	; 0x38
 801c112:	681a      	ldr	r2, [r3, #0]
 801c114:	683b      	ldr	r3, [r7, #0]
 801c116:	3324      	adds	r3, #36	; 0x24
 801c118:	440a      	add	r2, r1
 801c11a:	601a      	str	r2, [r3, #0]
 801c11c:	683b      	ldr	r3, [r7, #0]
 801c11e:	3310      	adds	r3, #16
 801c120:	681a      	ldr	r2, [r3, #0]
 801c122:	683b      	ldr	r3, [r7, #0]
 801c124:	3324      	adds	r3, #36	; 0x24
 801c126:	681b      	ldr	r3, [r3, #0]
 801c128:	405a      	eors	r2, r3
 801c12a:	683b      	ldr	r3, [r7, #0]
 801c12c:	f103 0410 	add.w	r4, r3, #16
 801c130:	2107      	movs	r1, #7
 801c132:	4610      	mov	r0, r2
 801c134:	f7fb fe84 	bl	8017e40 <rotr32>
 801c138:	4603      	mov	r3, r0
 801c13a:	6023      	str	r3, [r4, #0]
  ROUND( 9 );
 801c13c:	683b      	ldr	r3, [r7, #0]
 801c13e:	681a      	ldr	r2, [r3, #0]
 801c140:	683b      	ldr	r3, [r7, #0]
 801c142:	3310      	adds	r3, #16
 801c144:	681b      	ldr	r3, [r3, #0]
 801c146:	441a      	add	r2, r3
 801c148:	230a      	movs	r3, #10
 801c14a:	009b      	lsls	r3, r3, #2
 801c14c:	6879      	ldr	r1, [r7, #4]
 801c14e:	440b      	add	r3, r1
 801c150:	681b      	ldr	r3, [r3, #0]
 801c152:	441a      	add	r2, r3
 801c154:	683b      	ldr	r3, [r7, #0]
 801c156:	601a      	str	r2, [r3, #0]
 801c158:	683b      	ldr	r3, [r7, #0]
 801c15a:	3330      	adds	r3, #48	; 0x30
 801c15c:	681a      	ldr	r2, [r3, #0]
 801c15e:	683b      	ldr	r3, [r7, #0]
 801c160:	681b      	ldr	r3, [r3, #0]
 801c162:	405a      	eors	r2, r3
 801c164:	683b      	ldr	r3, [r7, #0]
 801c166:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801c16a:	2110      	movs	r1, #16
 801c16c:	4610      	mov	r0, r2
 801c16e:	f7fb fe67 	bl	8017e40 <rotr32>
 801c172:	4603      	mov	r3, r0
 801c174:	6023      	str	r3, [r4, #0]
 801c176:	683b      	ldr	r3, [r7, #0]
 801c178:	3320      	adds	r3, #32
 801c17a:	6819      	ldr	r1, [r3, #0]
 801c17c:	683b      	ldr	r3, [r7, #0]
 801c17e:	3330      	adds	r3, #48	; 0x30
 801c180:	681a      	ldr	r2, [r3, #0]
 801c182:	683b      	ldr	r3, [r7, #0]
 801c184:	3320      	adds	r3, #32
 801c186:	440a      	add	r2, r1
 801c188:	601a      	str	r2, [r3, #0]
 801c18a:	683b      	ldr	r3, [r7, #0]
 801c18c:	3310      	adds	r3, #16
 801c18e:	681a      	ldr	r2, [r3, #0]
 801c190:	683b      	ldr	r3, [r7, #0]
 801c192:	3320      	adds	r3, #32
 801c194:	681b      	ldr	r3, [r3, #0]
 801c196:	405a      	eors	r2, r3
 801c198:	683b      	ldr	r3, [r7, #0]
 801c19a:	f103 0410 	add.w	r4, r3, #16
 801c19e:	210c      	movs	r1, #12
 801c1a0:	4610      	mov	r0, r2
 801c1a2:	f7fb fe4d 	bl	8017e40 <rotr32>
 801c1a6:	4603      	mov	r3, r0
 801c1a8:	6023      	str	r3, [r4, #0]
 801c1aa:	683b      	ldr	r3, [r7, #0]
 801c1ac:	681a      	ldr	r2, [r3, #0]
 801c1ae:	683b      	ldr	r3, [r7, #0]
 801c1b0:	3310      	adds	r3, #16
 801c1b2:	681b      	ldr	r3, [r3, #0]
 801c1b4:	441a      	add	r2, r3
 801c1b6:	2302      	movs	r3, #2
 801c1b8:	009b      	lsls	r3, r3, #2
 801c1ba:	6879      	ldr	r1, [r7, #4]
 801c1bc:	440b      	add	r3, r1
 801c1be:	681b      	ldr	r3, [r3, #0]
 801c1c0:	441a      	add	r2, r3
 801c1c2:	683b      	ldr	r3, [r7, #0]
 801c1c4:	601a      	str	r2, [r3, #0]
 801c1c6:	683b      	ldr	r3, [r7, #0]
 801c1c8:	3330      	adds	r3, #48	; 0x30
 801c1ca:	681a      	ldr	r2, [r3, #0]
 801c1cc:	683b      	ldr	r3, [r7, #0]
 801c1ce:	681b      	ldr	r3, [r3, #0]
 801c1d0:	405a      	eors	r2, r3
 801c1d2:	683b      	ldr	r3, [r7, #0]
 801c1d4:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801c1d8:	2108      	movs	r1, #8
 801c1da:	4610      	mov	r0, r2
 801c1dc:	f7fb fe30 	bl	8017e40 <rotr32>
 801c1e0:	4603      	mov	r3, r0
 801c1e2:	6023      	str	r3, [r4, #0]
 801c1e4:	683b      	ldr	r3, [r7, #0]
 801c1e6:	3320      	adds	r3, #32
 801c1e8:	6819      	ldr	r1, [r3, #0]
 801c1ea:	683b      	ldr	r3, [r7, #0]
 801c1ec:	3330      	adds	r3, #48	; 0x30
 801c1ee:	681a      	ldr	r2, [r3, #0]
 801c1f0:	683b      	ldr	r3, [r7, #0]
 801c1f2:	3320      	adds	r3, #32
 801c1f4:	440a      	add	r2, r1
 801c1f6:	601a      	str	r2, [r3, #0]
 801c1f8:	683b      	ldr	r3, [r7, #0]
 801c1fa:	3310      	adds	r3, #16
 801c1fc:	681a      	ldr	r2, [r3, #0]
 801c1fe:	683b      	ldr	r3, [r7, #0]
 801c200:	3320      	adds	r3, #32
 801c202:	681b      	ldr	r3, [r3, #0]
 801c204:	405a      	eors	r2, r3
 801c206:	683b      	ldr	r3, [r7, #0]
 801c208:	f103 0410 	add.w	r4, r3, #16
 801c20c:	2107      	movs	r1, #7
 801c20e:	4610      	mov	r0, r2
 801c210:	f7fb fe16 	bl	8017e40 <rotr32>
 801c214:	4603      	mov	r3, r0
 801c216:	6023      	str	r3, [r4, #0]
 801c218:	683b      	ldr	r3, [r7, #0]
 801c21a:	3304      	adds	r3, #4
 801c21c:	681a      	ldr	r2, [r3, #0]
 801c21e:	683b      	ldr	r3, [r7, #0]
 801c220:	3314      	adds	r3, #20
 801c222:	681b      	ldr	r3, [r3, #0]
 801c224:	18d1      	adds	r1, r2, r3
 801c226:	2308      	movs	r3, #8
 801c228:	009b      	lsls	r3, r3, #2
 801c22a:	687a      	ldr	r2, [r7, #4]
 801c22c:	4413      	add	r3, r2
 801c22e:	681a      	ldr	r2, [r3, #0]
 801c230:	683b      	ldr	r3, [r7, #0]
 801c232:	3304      	adds	r3, #4
 801c234:	440a      	add	r2, r1
 801c236:	601a      	str	r2, [r3, #0]
 801c238:	683b      	ldr	r3, [r7, #0]
 801c23a:	3334      	adds	r3, #52	; 0x34
 801c23c:	681a      	ldr	r2, [r3, #0]
 801c23e:	683b      	ldr	r3, [r7, #0]
 801c240:	3304      	adds	r3, #4
 801c242:	681b      	ldr	r3, [r3, #0]
 801c244:	405a      	eors	r2, r3
 801c246:	683b      	ldr	r3, [r7, #0]
 801c248:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801c24c:	2110      	movs	r1, #16
 801c24e:	4610      	mov	r0, r2
 801c250:	f7fb fdf6 	bl	8017e40 <rotr32>
 801c254:	4603      	mov	r3, r0
 801c256:	6023      	str	r3, [r4, #0]
 801c258:	683b      	ldr	r3, [r7, #0]
 801c25a:	3324      	adds	r3, #36	; 0x24
 801c25c:	6819      	ldr	r1, [r3, #0]
 801c25e:	683b      	ldr	r3, [r7, #0]
 801c260:	3334      	adds	r3, #52	; 0x34
 801c262:	681a      	ldr	r2, [r3, #0]
 801c264:	683b      	ldr	r3, [r7, #0]
 801c266:	3324      	adds	r3, #36	; 0x24
 801c268:	440a      	add	r2, r1
 801c26a:	601a      	str	r2, [r3, #0]
 801c26c:	683b      	ldr	r3, [r7, #0]
 801c26e:	3314      	adds	r3, #20
 801c270:	681a      	ldr	r2, [r3, #0]
 801c272:	683b      	ldr	r3, [r7, #0]
 801c274:	3324      	adds	r3, #36	; 0x24
 801c276:	681b      	ldr	r3, [r3, #0]
 801c278:	405a      	eors	r2, r3
 801c27a:	683b      	ldr	r3, [r7, #0]
 801c27c:	f103 0414 	add.w	r4, r3, #20
 801c280:	210c      	movs	r1, #12
 801c282:	4610      	mov	r0, r2
 801c284:	f7fb fddc 	bl	8017e40 <rotr32>
 801c288:	4603      	mov	r3, r0
 801c28a:	6023      	str	r3, [r4, #0]
 801c28c:	683b      	ldr	r3, [r7, #0]
 801c28e:	3304      	adds	r3, #4
 801c290:	681a      	ldr	r2, [r3, #0]
 801c292:	683b      	ldr	r3, [r7, #0]
 801c294:	3314      	adds	r3, #20
 801c296:	681b      	ldr	r3, [r3, #0]
 801c298:	18d1      	adds	r1, r2, r3
 801c29a:	2304      	movs	r3, #4
 801c29c:	009b      	lsls	r3, r3, #2
 801c29e:	687a      	ldr	r2, [r7, #4]
 801c2a0:	4413      	add	r3, r2
 801c2a2:	681a      	ldr	r2, [r3, #0]
 801c2a4:	683b      	ldr	r3, [r7, #0]
 801c2a6:	3304      	adds	r3, #4
 801c2a8:	440a      	add	r2, r1
 801c2aa:	601a      	str	r2, [r3, #0]
 801c2ac:	683b      	ldr	r3, [r7, #0]
 801c2ae:	3334      	adds	r3, #52	; 0x34
 801c2b0:	681a      	ldr	r2, [r3, #0]
 801c2b2:	683b      	ldr	r3, [r7, #0]
 801c2b4:	3304      	adds	r3, #4
 801c2b6:	681b      	ldr	r3, [r3, #0]
 801c2b8:	405a      	eors	r2, r3
 801c2ba:	683b      	ldr	r3, [r7, #0]
 801c2bc:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801c2c0:	2108      	movs	r1, #8
 801c2c2:	4610      	mov	r0, r2
 801c2c4:	f7fb fdbc 	bl	8017e40 <rotr32>
 801c2c8:	4603      	mov	r3, r0
 801c2ca:	6023      	str	r3, [r4, #0]
 801c2cc:	683b      	ldr	r3, [r7, #0]
 801c2ce:	3324      	adds	r3, #36	; 0x24
 801c2d0:	6819      	ldr	r1, [r3, #0]
 801c2d2:	683b      	ldr	r3, [r7, #0]
 801c2d4:	3334      	adds	r3, #52	; 0x34
 801c2d6:	681a      	ldr	r2, [r3, #0]
 801c2d8:	683b      	ldr	r3, [r7, #0]
 801c2da:	3324      	adds	r3, #36	; 0x24
 801c2dc:	440a      	add	r2, r1
 801c2de:	601a      	str	r2, [r3, #0]
 801c2e0:	683b      	ldr	r3, [r7, #0]
 801c2e2:	3314      	adds	r3, #20
 801c2e4:	681a      	ldr	r2, [r3, #0]
 801c2e6:	683b      	ldr	r3, [r7, #0]
 801c2e8:	3324      	adds	r3, #36	; 0x24
 801c2ea:	681b      	ldr	r3, [r3, #0]
 801c2ec:	405a      	eors	r2, r3
 801c2ee:	683b      	ldr	r3, [r7, #0]
 801c2f0:	f103 0414 	add.w	r4, r3, #20
 801c2f4:	2107      	movs	r1, #7
 801c2f6:	4610      	mov	r0, r2
 801c2f8:	f7fb fda2 	bl	8017e40 <rotr32>
 801c2fc:	4603      	mov	r3, r0
 801c2fe:	6023      	str	r3, [r4, #0]
 801c300:	683b      	ldr	r3, [r7, #0]
 801c302:	3308      	adds	r3, #8
 801c304:	681a      	ldr	r2, [r3, #0]
 801c306:	683b      	ldr	r3, [r7, #0]
 801c308:	3318      	adds	r3, #24
 801c30a:	681b      	ldr	r3, [r3, #0]
 801c30c:	18d1      	adds	r1, r2, r3
 801c30e:	2307      	movs	r3, #7
 801c310:	009b      	lsls	r3, r3, #2
 801c312:	687a      	ldr	r2, [r7, #4]
 801c314:	4413      	add	r3, r2
 801c316:	681a      	ldr	r2, [r3, #0]
 801c318:	683b      	ldr	r3, [r7, #0]
 801c31a:	3308      	adds	r3, #8
 801c31c:	440a      	add	r2, r1
 801c31e:	601a      	str	r2, [r3, #0]
 801c320:	683b      	ldr	r3, [r7, #0]
 801c322:	3338      	adds	r3, #56	; 0x38
 801c324:	681a      	ldr	r2, [r3, #0]
 801c326:	683b      	ldr	r3, [r7, #0]
 801c328:	3308      	adds	r3, #8
 801c32a:	681b      	ldr	r3, [r3, #0]
 801c32c:	405a      	eors	r2, r3
 801c32e:	683b      	ldr	r3, [r7, #0]
 801c330:	f103 0438 	add.w	r4, r3, #56	; 0x38
 801c334:	2110      	movs	r1, #16
 801c336:	4610      	mov	r0, r2
 801c338:	f7fb fd82 	bl	8017e40 <rotr32>
 801c33c:	4603      	mov	r3, r0
 801c33e:	6023      	str	r3, [r4, #0]
 801c340:	683b      	ldr	r3, [r7, #0]
 801c342:	3328      	adds	r3, #40	; 0x28
 801c344:	6819      	ldr	r1, [r3, #0]
 801c346:	683b      	ldr	r3, [r7, #0]
 801c348:	3338      	adds	r3, #56	; 0x38
 801c34a:	681a      	ldr	r2, [r3, #0]
 801c34c:	683b      	ldr	r3, [r7, #0]
 801c34e:	3328      	adds	r3, #40	; 0x28
 801c350:	440a      	add	r2, r1
 801c352:	601a      	str	r2, [r3, #0]
 801c354:	683b      	ldr	r3, [r7, #0]
 801c356:	3318      	adds	r3, #24
 801c358:	681a      	ldr	r2, [r3, #0]
 801c35a:	683b      	ldr	r3, [r7, #0]
 801c35c:	3328      	adds	r3, #40	; 0x28
 801c35e:	681b      	ldr	r3, [r3, #0]
 801c360:	405a      	eors	r2, r3
 801c362:	683b      	ldr	r3, [r7, #0]
 801c364:	f103 0418 	add.w	r4, r3, #24
 801c368:	210c      	movs	r1, #12
 801c36a:	4610      	mov	r0, r2
 801c36c:	f7fb fd68 	bl	8017e40 <rotr32>
 801c370:	4603      	mov	r3, r0
 801c372:	6023      	str	r3, [r4, #0]
 801c374:	683b      	ldr	r3, [r7, #0]
 801c376:	3308      	adds	r3, #8
 801c378:	681a      	ldr	r2, [r3, #0]
 801c37a:	683b      	ldr	r3, [r7, #0]
 801c37c:	3318      	adds	r3, #24
 801c37e:	681b      	ldr	r3, [r3, #0]
 801c380:	18d1      	adds	r1, r2, r3
 801c382:	2306      	movs	r3, #6
 801c384:	009b      	lsls	r3, r3, #2
 801c386:	687a      	ldr	r2, [r7, #4]
 801c388:	4413      	add	r3, r2
 801c38a:	681a      	ldr	r2, [r3, #0]
 801c38c:	683b      	ldr	r3, [r7, #0]
 801c38e:	3308      	adds	r3, #8
 801c390:	440a      	add	r2, r1
 801c392:	601a      	str	r2, [r3, #0]
 801c394:	683b      	ldr	r3, [r7, #0]
 801c396:	3338      	adds	r3, #56	; 0x38
 801c398:	681a      	ldr	r2, [r3, #0]
 801c39a:	683b      	ldr	r3, [r7, #0]
 801c39c:	3308      	adds	r3, #8
 801c39e:	681b      	ldr	r3, [r3, #0]
 801c3a0:	405a      	eors	r2, r3
 801c3a2:	683b      	ldr	r3, [r7, #0]
 801c3a4:	f103 0438 	add.w	r4, r3, #56	; 0x38
 801c3a8:	2108      	movs	r1, #8
 801c3aa:	4610      	mov	r0, r2
 801c3ac:	f7fb fd48 	bl	8017e40 <rotr32>
 801c3b0:	4603      	mov	r3, r0
 801c3b2:	6023      	str	r3, [r4, #0]
 801c3b4:	683b      	ldr	r3, [r7, #0]
 801c3b6:	3328      	adds	r3, #40	; 0x28
 801c3b8:	6819      	ldr	r1, [r3, #0]
 801c3ba:	683b      	ldr	r3, [r7, #0]
 801c3bc:	3338      	adds	r3, #56	; 0x38
 801c3be:	681a      	ldr	r2, [r3, #0]
 801c3c0:	683b      	ldr	r3, [r7, #0]
 801c3c2:	3328      	adds	r3, #40	; 0x28
 801c3c4:	440a      	add	r2, r1
 801c3c6:	601a      	str	r2, [r3, #0]
 801c3c8:	683b      	ldr	r3, [r7, #0]
 801c3ca:	3318      	adds	r3, #24
 801c3cc:	681a      	ldr	r2, [r3, #0]
 801c3ce:	683b      	ldr	r3, [r7, #0]
 801c3d0:	3328      	adds	r3, #40	; 0x28
 801c3d2:	681b      	ldr	r3, [r3, #0]
 801c3d4:	405a      	eors	r2, r3
 801c3d6:	683b      	ldr	r3, [r7, #0]
 801c3d8:	f103 0418 	add.w	r4, r3, #24
 801c3dc:	2107      	movs	r1, #7
 801c3de:	4610      	mov	r0, r2
 801c3e0:	f7fb fd2e 	bl	8017e40 <rotr32>
 801c3e4:	4603      	mov	r3, r0
 801c3e6:	6023      	str	r3, [r4, #0]
 801c3e8:	683b      	ldr	r3, [r7, #0]
 801c3ea:	330c      	adds	r3, #12
 801c3ec:	681a      	ldr	r2, [r3, #0]
 801c3ee:	683b      	ldr	r3, [r7, #0]
 801c3f0:	331c      	adds	r3, #28
 801c3f2:	681b      	ldr	r3, [r3, #0]
 801c3f4:	18d1      	adds	r1, r2, r3
 801c3f6:	2301      	movs	r3, #1
 801c3f8:	009b      	lsls	r3, r3, #2
 801c3fa:	687a      	ldr	r2, [r7, #4]
 801c3fc:	4413      	add	r3, r2
 801c3fe:	681a      	ldr	r2, [r3, #0]
 801c400:	683b      	ldr	r3, [r7, #0]
 801c402:	330c      	adds	r3, #12
 801c404:	440a      	add	r2, r1
 801c406:	601a      	str	r2, [r3, #0]
 801c408:	683b      	ldr	r3, [r7, #0]
 801c40a:	333c      	adds	r3, #60	; 0x3c
 801c40c:	681a      	ldr	r2, [r3, #0]
 801c40e:	683b      	ldr	r3, [r7, #0]
 801c410:	330c      	adds	r3, #12
 801c412:	681b      	ldr	r3, [r3, #0]
 801c414:	405a      	eors	r2, r3
 801c416:	683b      	ldr	r3, [r7, #0]
 801c418:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 801c41c:	2110      	movs	r1, #16
 801c41e:	4610      	mov	r0, r2
 801c420:	f7fb fd0e 	bl	8017e40 <rotr32>
 801c424:	4603      	mov	r3, r0
 801c426:	6023      	str	r3, [r4, #0]
 801c428:	683b      	ldr	r3, [r7, #0]
 801c42a:	332c      	adds	r3, #44	; 0x2c
 801c42c:	6819      	ldr	r1, [r3, #0]
 801c42e:	683b      	ldr	r3, [r7, #0]
 801c430:	333c      	adds	r3, #60	; 0x3c
 801c432:	681a      	ldr	r2, [r3, #0]
 801c434:	683b      	ldr	r3, [r7, #0]
 801c436:	332c      	adds	r3, #44	; 0x2c
 801c438:	440a      	add	r2, r1
 801c43a:	601a      	str	r2, [r3, #0]
 801c43c:	683b      	ldr	r3, [r7, #0]
 801c43e:	331c      	adds	r3, #28
 801c440:	681a      	ldr	r2, [r3, #0]
 801c442:	683b      	ldr	r3, [r7, #0]
 801c444:	332c      	adds	r3, #44	; 0x2c
 801c446:	681b      	ldr	r3, [r3, #0]
 801c448:	405a      	eors	r2, r3
 801c44a:	683b      	ldr	r3, [r7, #0]
 801c44c:	f103 041c 	add.w	r4, r3, #28
 801c450:	210c      	movs	r1, #12
 801c452:	4610      	mov	r0, r2
 801c454:	f7fb fcf4 	bl	8017e40 <rotr32>
 801c458:	4603      	mov	r3, r0
 801c45a:	6023      	str	r3, [r4, #0]
 801c45c:	683b      	ldr	r3, [r7, #0]
 801c45e:	330c      	adds	r3, #12
 801c460:	681a      	ldr	r2, [r3, #0]
 801c462:	683b      	ldr	r3, [r7, #0]
 801c464:	331c      	adds	r3, #28
 801c466:	681b      	ldr	r3, [r3, #0]
 801c468:	18d1      	adds	r1, r2, r3
 801c46a:	2305      	movs	r3, #5
 801c46c:	009b      	lsls	r3, r3, #2
 801c46e:	687a      	ldr	r2, [r7, #4]
 801c470:	4413      	add	r3, r2
 801c472:	681a      	ldr	r2, [r3, #0]
 801c474:	683b      	ldr	r3, [r7, #0]
 801c476:	330c      	adds	r3, #12
 801c478:	440a      	add	r2, r1
 801c47a:	601a      	str	r2, [r3, #0]
 801c47c:	683b      	ldr	r3, [r7, #0]
 801c47e:	333c      	adds	r3, #60	; 0x3c
 801c480:	681a      	ldr	r2, [r3, #0]
 801c482:	683b      	ldr	r3, [r7, #0]
 801c484:	330c      	adds	r3, #12
 801c486:	681b      	ldr	r3, [r3, #0]
 801c488:	405a      	eors	r2, r3
 801c48a:	683b      	ldr	r3, [r7, #0]
 801c48c:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 801c490:	2108      	movs	r1, #8
 801c492:	4610      	mov	r0, r2
 801c494:	f7fb fcd4 	bl	8017e40 <rotr32>
 801c498:	4603      	mov	r3, r0
 801c49a:	6023      	str	r3, [r4, #0]
 801c49c:	683b      	ldr	r3, [r7, #0]
 801c49e:	332c      	adds	r3, #44	; 0x2c
 801c4a0:	6819      	ldr	r1, [r3, #0]
 801c4a2:	683b      	ldr	r3, [r7, #0]
 801c4a4:	333c      	adds	r3, #60	; 0x3c
 801c4a6:	681a      	ldr	r2, [r3, #0]
 801c4a8:	683b      	ldr	r3, [r7, #0]
 801c4aa:	332c      	adds	r3, #44	; 0x2c
 801c4ac:	440a      	add	r2, r1
 801c4ae:	601a      	str	r2, [r3, #0]
 801c4b0:	683b      	ldr	r3, [r7, #0]
 801c4b2:	331c      	adds	r3, #28
 801c4b4:	681a      	ldr	r2, [r3, #0]
 801c4b6:	683b      	ldr	r3, [r7, #0]
 801c4b8:	332c      	adds	r3, #44	; 0x2c
 801c4ba:	681b      	ldr	r3, [r3, #0]
 801c4bc:	405a      	eors	r2, r3
 801c4be:	683b      	ldr	r3, [r7, #0]
 801c4c0:	f103 041c 	add.w	r4, r3, #28
 801c4c4:	2107      	movs	r1, #7
 801c4c6:	4610      	mov	r0, r2
 801c4c8:	f7fb fcba 	bl	8017e40 <rotr32>
 801c4cc:	4603      	mov	r3, r0
 801c4ce:	6023      	str	r3, [r4, #0]
 801c4d0:	683b      	ldr	r3, [r7, #0]
 801c4d2:	681a      	ldr	r2, [r3, #0]
 801c4d4:	683b      	ldr	r3, [r7, #0]
 801c4d6:	3314      	adds	r3, #20
 801c4d8:	681b      	ldr	r3, [r3, #0]
 801c4da:	441a      	add	r2, r3
 801c4dc:	230f      	movs	r3, #15
 801c4de:	009b      	lsls	r3, r3, #2
 801c4e0:	6879      	ldr	r1, [r7, #4]
 801c4e2:	440b      	add	r3, r1
 801c4e4:	681b      	ldr	r3, [r3, #0]
 801c4e6:	441a      	add	r2, r3
 801c4e8:	683b      	ldr	r3, [r7, #0]
 801c4ea:	601a      	str	r2, [r3, #0]
 801c4ec:	683b      	ldr	r3, [r7, #0]
 801c4ee:	333c      	adds	r3, #60	; 0x3c
 801c4f0:	681a      	ldr	r2, [r3, #0]
 801c4f2:	683b      	ldr	r3, [r7, #0]
 801c4f4:	681b      	ldr	r3, [r3, #0]
 801c4f6:	405a      	eors	r2, r3
 801c4f8:	683b      	ldr	r3, [r7, #0]
 801c4fa:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 801c4fe:	2110      	movs	r1, #16
 801c500:	4610      	mov	r0, r2
 801c502:	f7fb fc9d 	bl	8017e40 <rotr32>
 801c506:	4603      	mov	r3, r0
 801c508:	6023      	str	r3, [r4, #0]
 801c50a:	683b      	ldr	r3, [r7, #0]
 801c50c:	3328      	adds	r3, #40	; 0x28
 801c50e:	6819      	ldr	r1, [r3, #0]
 801c510:	683b      	ldr	r3, [r7, #0]
 801c512:	333c      	adds	r3, #60	; 0x3c
 801c514:	681a      	ldr	r2, [r3, #0]
 801c516:	683b      	ldr	r3, [r7, #0]
 801c518:	3328      	adds	r3, #40	; 0x28
 801c51a:	440a      	add	r2, r1
 801c51c:	601a      	str	r2, [r3, #0]
 801c51e:	683b      	ldr	r3, [r7, #0]
 801c520:	3314      	adds	r3, #20
 801c522:	681a      	ldr	r2, [r3, #0]
 801c524:	683b      	ldr	r3, [r7, #0]
 801c526:	3328      	adds	r3, #40	; 0x28
 801c528:	681b      	ldr	r3, [r3, #0]
 801c52a:	405a      	eors	r2, r3
 801c52c:	683b      	ldr	r3, [r7, #0]
 801c52e:	f103 0414 	add.w	r4, r3, #20
 801c532:	210c      	movs	r1, #12
 801c534:	4610      	mov	r0, r2
 801c536:	f7fb fc83 	bl	8017e40 <rotr32>
 801c53a:	4603      	mov	r3, r0
 801c53c:	6023      	str	r3, [r4, #0]
 801c53e:	683b      	ldr	r3, [r7, #0]
 801c540:	681a      	ldr	r2, [r3, #0]
 801c542:	683b      	ldr	r3, [r7, #0]
 801c544:	3314      	adds	r3, #20
 801c546:	681b      	ldr	r3, [r3, #0]
 801c548:	441a      	add	r2, r3
 801c54a:	230b      	movs	r3, #11
 801c54c:	009b      	lsls	r3, r3, #2
 801c54e:	6879      	ldr	r1, [r7, #4]
 801c550:	440b      	add	r3, r1
 801c552:	681b      	ldr	r3, [r3, #0]
 801c554:	441a      	add	r2, r3
 801c556:	683b      	ldr	r3, [r7, #0]
 801c558:	601a      	str	r2, [r3, #0]
 801c55a:	683b      	ldr	r3, [r7, #0]
 801c55c:	333c      	adds	r3, #60	; 0x3c
 801c55e:	681a      	ldr	r2, [r3, #0]
 801c560:	683b      	ldr	r3, [r7, #0]
 801c562:	681b      	ldr	r3, [r3, #0]
 801c564:	405a      	eors	r2, r3
 801c566:	683b      	ldr	r3, [r7, #0]
 801c568:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 801c56c:	2108      	movs	r1, #8
 801c56e:	4610      	mov	r0, r2
 801c570:	f7fb fc66 	bl	8017e40 <rotr32>
 801c574:	4603      	mov	r3, r0
 801c576:	6023      	str	r3, [r4, #0]
 801c578:	683b      	ldr	r3, [r7, #0]
 801c57a:	3328      	adds	r3, #40	; 0x28
 801c57c:	6819      	ldr	r1, [r3, #0]
 801c57e:	683b      	ldr	r3, [r7, #0]
 801c580:	333c      	adds	r3, #60	; 0x3c
 801c582:	681a      	ldr	r2, [r3, #0]
 801c584:	683b      	ldr	r3, [r7, #0]
 801c586:	3328      	adds	r3, #40	; 0x28
 801c588:	440a      	add	r2, r1
 801c58a:	601a      	str	r2, [r3, #0]
 801c58c:	683b      	ldr	r3, [r7, #0]
 801c58e:	3314      	adds	r3, #20
 801c590:	681a      	ldr	r2, [r3, #0]
 801c592:	683b      	ldr	r3, [r7, #0]
 801c594:	3328      	adds	r3, #40	; 0x28
 801c596:	681b      	ldr	r3, [r3, #0]
 801c598:	405a      	eors	r2, r3
 801c59a:	683b      	ldr	r3, [r7, #0]
 801c59c:	f103 0414 	add.w	r4, r3, #20
 801c5a0:	2107      	movs	r1, #7
 801c5a2:	4610      	mov	r0, r2
 801c5a4:	f7fb fc4c 	bl	8017e40 <rotr32>
 801c5a8:	4603      	mov	r3, r0
 801c5aa:	6023      	str	r3, [r4, #0]
 801c5ac:	683b      	ldr	r3, [r7, #0]
 801c5ae:	3304      	adds	r3, #4
 801c5b0:	681a      	ldr	r2, [r3, #0]
 801c5b2:	683b      	ldr	r3, [r7, #0]
 801c5b4:	3318      	adds	r3, #24
 801c5b6:	681b      	ldr	r3, [r3, #0]
 801c5b8:	18d1      	adds	r1, r2, r3
 801c5ba:	2309      	movs	r3, #9
 801c5bc:	009b      	lsls	r3, r3, #2
 801c5be:	687a      	ldr	r2, [r7, #4]
 801c5c0:	4413      	add	r3, r2
 801c5c2:	681a      	ldr	r2, [r3, #0]
 801c5c4:	683b      	ldr	r3, [r7, #0]
 801c5c6:	3304      	adds	r3, #4
 801c5c8:	440a      	add	r2, r1
 801c5ca:	601a      	str	r2, [r3, #0]
 801c5cc:	683b      	ldr	r3, [r7, #0]
 801c5ce:	3330      	adds	r3, #48	; 0x30
 801c5d0:	681a      	ldr	r2, [r3, #0]
 801c5d2:	683b      	ldr	r3, [r7, #0]
 801c5d4:	3304      	adds	r3, #4
 801c5d6:	681b      	ldr	r3, [r3, #0]
 801c5d8:	405a      	eors	r2, r3
 801c5da:	683b      	ldr	r3, [r7, #0]
 801c5dc:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801c5e0:	2110      	movs	r1, #16
 801c5e2:	4610      	mov	r0, r2
 801c5e4:	f7fb fc2c 	bl	8017e40 <rotr32>
 801c5e8:	4603      	mov	r3, r0
 801c5ea:	6023      	str	r3, [r4, #0]
 801c5ec:	683b      	ldr	r3, [r7, #0]
 801c5ee:	332c      	adds	r3, #44	; 0x2c
 801c5f0:	6819      	ldr	r1, [r3, #0]
 801c5f2:	683b      	ldr	r3, [r7, #0]
 801c5f4:	3330      	adds	r3, #48	; 0x30
 801c5f6:	681a      	ldr	r2, [r3, #0]
 801c5f8:	683b      	ldr	r3, [r7, #0]
 801c5fa:	332c      	adds	r3, #44	; 0x2c
 801c5fc:	440a      	add	r2, r1
 801c5fe:	601a      	str	r2, [r3, #0]
 801c600:	683b      	ldr	r3, [r7, #0]
 801c602:	3318      	adds	r3, #24
 801c604:	681a      	ldr	r2, [r3, #0]
 801c606:	683b      	ldr	r3, [r7, #0]
 801c608:	332c      	adds	r3, #44	; 0x2c
 801c60a:	681b      	ldr	r3, [r3, #0]
 801c60c:	405a      	eors	r2, r3
 801c60e:	683b      	ldr	r3, [r7, #0]
 801c610:	f103 0418 	add.w	r4, r3, #24
 801c614:	210c      	movs	r1, #12
 801c616:	4610      	mov	r0, r2
 801c618:	f7fb fc12 	bl	8017e40 <rotr32>
 801c61c:	4603      	mov	r3, r0
 801c61e:	6023      	str	r3, [r4, #0]
 801c620:	683b      	ldr	r3, [r7, #0]
 801c622:	3304      	adds	r3, #4
 801c624:	681a      	ldr	r2, [r3, #0]
 801c626:	683b      	ldr	r3, [r7, #0]
 801c628:	3318      	adds	r3, #24
 801c62a:	681b      	ldr	r3, [r3, #0]
 801c62c:	18d1      	adds	r1, r2, r3
 801c62e:	230e      	movs	r3, #14
 801c630:	009b      	lsls	r3, r3, #2
 801c632:	687a      	ldr	r2, [r7, #4]
 801c634:	4413      	add	r3, r2
 801c636:	681a      	ldr	r2, [r3, #0]
 801c638:	683b      	ldr	r3, [r7, #0]
 801c63a:	3304      	adds	r3, #4
 801c63c:	440a      	add	r2, r1
 801c63e:	601a      	str	r2, [r3, #0]
 801c640:	683b      	ldr	r3, [r7, #0]
 801c642:	3330      	adds	r3, #48	; 0x30
 801c644:	681a      	ldr	r2, [r3, #0]
 801c646:	683b      	ldr	r3, [r7, #0]
 801c648:	3304      	adds	r3, #4
 801c64a:	681b      	ldr	r3, [r3, #0]
 801c64c:	405a      	eors	r2, r3
 801c64e:	683b      	ldr	r3, [r7, #0]
 801c650:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801c654:	2108      	movs	r1, #8
 801c656:	4610      	mov	r0, r2
 801c658:	f7fb fbf2 	bl	8017e40 <rotr32>
 801c65c:	4603      	mov	r3, r0
 801c65e:	6023      	str	r3, [r4, #0]
 801c660:	683b      	ldr	r3, [r7, #0]
 801c662:	332c      	adds	r3, #44	; 0x2c
 801c664:	6819      	ldr	r1, [r3, #0]
 801c666:	683b      	ldr	r3, [r7, #0]
 801c668:	3330      	adds	r3, #48	; 0x30
 801c66a:	681a      	ldr	r2, [r3, #0]
 801c66c:	683b      	ldr	r3, [r7, #0]
 801c66e:	332c      	adds	r3, #44	; 0x2c
 801c670:	440a      	add	r2, r1
 801c672:	601a      	str	r2, [r3, #0]
 801c674:	683b      	ldr	r3, [r7, #0]
 801c676:	3318      	adds	r3, #24
 801c678:	681a      	ldr	r2, [r3, #0]
 801c67a:	683b      	ldr	r3, [r7, #0]
 801c67c:	332c      	adds	r3, #44	; 0x2c
 801c67e:	681b      	ldr	r3, [r3, #0]
 801c680:	405a      	eors	r2, r3
 801c682:	683b      	ldr	r3, [r7, #0]
 801c684:	f103 0418 	add.w	r4, r3, #24
 801c688:	2107      	movs	r1, #7
 801c68a:	4610      	mov	r0, r2
 801c68c:	f7fb fbd8 	bl	8017e40 <rotr32>
 801c690:	4603      	mov	r3, r0
 801c692:	6023      	str	r3, [r4, #0]
 801c694:	683b      	ldr	r3, [r7, #0]
 801c696:	3308      	adds	r3, #8
 801c698:	681a      	ldr	r2, [r3, #0]
 801c69a:	683b      	ldr	r3, [r7, #0]
 801c69c:	331c      	adds	r3, #28
 801c69e:	681b      	ldr	r3, [r3, #0]
 801c6a0:	18d1      	adds	r1, r2, r3
 801c6a2:	2303      	movs	r3, #3
 801c6a4:	009b      	lsls	r3, r3, #2
 801c6a6:	687a      	ldr	r2, [r7, #4]
 801c6a8:	4413      	add	r3, r2
 801c6aa:	681a      	ldr	r2, [r3, #0]
 801c6ac:	683b      	ldr	r3, [r7, #0]
 801c6ae:	3308      	adds	r3, #8
 801c6b0:	440a      	add	r2, r1
 801c6b2:	601a      	str	r2, [r3, #0]
 801c6b4:	683b      	ldr	r3, [r7, #0]
 801c6b6:	3334      	adds	r3, #52	; 0x34
 801c6b8:	681a      	ldr	r2, [r3, #0]
 801c6ba:	683b      	ldr	r3, [r7, #0]
 801c6bc:	3308      	adds	r3, #8
 801c6be:	681b      	ldr	r3, [r3, #0]
 801c6c0:	405a      	eors	r2, r3
 801c6c2:	683b      	ldr	r3, [r7, #0]
 801c6c4:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801c6c8:	2110      	movs	r1, #16
 801c6ca:	4610      	mov	r0, r2
 801c6cc:	f7fb fbb8 	bl	8017e40 <rotr32>
 801c6d0:	4603      	mov	r3, r0
 801c6d2:	6023      	str	r3, [r4, #0]
 801c6d4:	683b      	ldr	r3, [r7, #0]
 801c6d6:	3320      	adds	r3, #32
 801c6d8:	6819      	ldr	r1, [r3, #0]
 801c6da:	683b      	ldr	r3, [r7, #0]
 801c6dc:	3334      	adds	r3, #52	; 0x34
 801c6de:	681a      	ldr	r2, [r3, #0]
 801c6e0:	683b      	ldr	r3, [r7, #0]
 801c6e2:	3320      	adds	r3, #32
 801c6e4:	440a      	add	r2, r1
 801c6e6:	601a      	str	r2, [r3, #0]
 801c6e8:	683b      	ldr	r3, [r7, #0]
 801c6ea:	331c      	adds	r3, #28
 801c6ec:	681a      	ldr	r2, [r3, #0]
 801c6ee:	683b      	ldr	r3, [r7, #0]
 801c6f0:	3320      	adds	r3, #32
 801c6f2:	681b      	ldr	r3, [r3, #0]
 801c6f4:	405a      	eors	r2, r3
 801c6f6:	683b      	ldr	r3, [r7, #0]
 801c6f8:	f103 041c 	add.w	r4, r3, #28
 801c6fc:	210c      	movs	r1, #12
 801c6fe:	4610      	mov	r0, r2
 801c700:	f7fb fb9e 	bl	8017e40 <rotr32>
 801c704:	4603      	mov	r3, r0
 801c706:	6023      	str	r3, [r4, #0]
 801c708:	683b      	ldr	r3, [r7, #0]
 801c70a:	3308      	adds	r3, #8
 801c70c:	681a      	ldr	r2, [r3, #0]
 801c70e:	683b      	ldr	r3, [r7, #0]
 801c710:	331c      	adds	r3, #28
 801c712:	681b      	ldr	r3, [r3, #0]
 801c714:	18d1      	adds	r1, r2, r3
 801c716:	230c      	movs	r3, #12
 801c718:	009b      	lsls	r3, r3, #2
 801c71a:	687a      	ldr	r2, [r7, #4]
 801c71c:	4413      	add	r3, r2
 801c71e:	681a      	ldr	r2, [r3, #0]
 801c720:	683b      	ldr	r3, [r7, #0]
 801c722:	3308      	adds	r3, #8
 801c724:	440a      	add	r2, r1
 801c726:	601a      	str	r2, [r3, #0]
 801c728:	683b      	ldr	r3, [r7, #0]
 801c72a:	3334      	adds	r3, #52	; 0x34
 801c72c:	681a      	ldr	r2, [r3, #0]
 801c72e:	683b      	ldr	r3, [r7, #0]
 801c730:	3308      	adds	r3, #8
 801c732:	681b      	ldr	r3, [r3, #0]
 801c734:	405a      	eors	r2, r3
 801c736:	683b      	ldr	r3, [r7, #0]
 801c738:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801c73c:	2108      	movs	r1, #8
 801c73e:	4610      	mov	r0, r2
 801c740:	f7fb fb7e 	bl	8017e40 <rotr32>
 801c744:	4603      	mov	r3, r0
 801c746:	6023      	str	r3, [r4, #0]
 801c748:	683b      	ldr	r3, [r7, #0]
 801c74a:	3320      	adds	r3, #32
 801c74c:	6819      	ldr	r1, [r3, #0]
 801c74e:	683b      	ldr	r3, [r7, #0]
 801c750:	3334      	adds	r3, #52	; 0x34
 801c752:	681a      	ldr	r2, [r3, #0]
 801c754:	683b      	ldr	r3, [r7, #0]
 801c756:	3320      	adds	r3, #32
 801c758:	440a      	add	r2, r1
 801c75a:	601a      	str	r2, [r3, #0]
 801c75c:	683b      	ldr	r3, [r7, #0]
 801c75e:	331c      	adds	r3, #28
 801c760:	681a      	ldr	r2, [r3, #0]
 801c762:	683b      	ldr	r3, [r7, #0]
 801c764:	3320      	adds	r3, #32
 801c766:	681b      	ldr	r3, [r3, #0]
 801c768:	405a      	eors	r2, r3
 801c76a:	683b      	ldr	r3, [r7, #0]
 801c76c:	f103 041c 	add.w	r4, r3, #28
 801c770:	2107      	movs	r1, #7
 801c772:	4610      	mov	r0, r2
 801c774:	f7fb fb64 	bl	8017e40 <rotr32>
 801c778:	4603      	mov	r3, r0
 801c77a:	6023      	str	r3, [r4, #0]
 801c77c:	683b      	ldr	r3, [r7, #0]
 801c77e:	330c      	adds	r3, #12
 801c780:	681a      	ldr	r2, [r3, #0]
 801c782:	683b      	ldr	r3, [r7, #0]
 801c784:	3310      	adds	r3, #16
 801c786:	681b      	ldr	r3, [r3, #0]
 801c788:	18d1      	adds	r1, r2, r3
 801c78a:	230d      	movs	r3, #13
 801c78c:	009b      	lsls	r3, r3, #2
 801c78e:	687a      	ldr	r2, [r7, #4]
 801c790:	4413      	add	r3, r2
 801c792:	681a      	ldr	r2, [r3, #0]
 801c794:	683b      	ldr	r3, [r7, #0]
 801c796:	330c      	adds	r3, #12
 801c798:	440a      	add	r2, r1
 801c79a:	601a      	str	r2, [r3, #0]
 801c79c:	683b      	ldr	r3, [r7, #0]
 801c79e:	3338      	adds	r3, #56	; 0x38
 801c7a0:	681a      	ldr	r2, [r3, #0]
 801c7a2:	683b      	ldr	r3, [r7, #0]
 801c7a4:	330c      	adds	r3, #12
 801c7a6:	681b      	ldr	r3, [r3, #0]
 801c7a8:	405a      	eors	r2, r3
 801c7aa:	683b      	ldr	r3, [r7, #0]
 801c7ac:	f103 0438 	add.w	r4, r3, #56	; 0x38
 801c7b0:	2110      	movs	r1, #16
 801c7b2:	4610      	mov	r0, r2
 801c7b4:	f7fb fb44 	bl	8017e40 <rotr32>
 801c7b8:	4603      	mov	r3, r0
 801c7ba:	6023      	str	r3, [r4, #0]
 801c7bc:	683b      	ldr	r3, [r7, #0]
 801c7be:	3324      	adds	r3, #36	; 0x24
 801c7c0:	6819      	ldr	r1, [r3, #0]
 801c7c2:	683b      	ldr	r3, [r7, #0]
 801c7c4:	3338      	adds	r3, #56	; 0x38
 801c7c6:	681a      	ldr	r2, [r3, #0]
 801c7c8:	683b      	ldr	r3, [r7, #0]
 801c7ca:	3324      	adds	r3, #36	; 0x24
 801c7cc:	440a      	add	r2, r1
 801c7ce:	601a      	str	r2, [r3, #0]
 801c7d0:	683b      	ldr	r3, [r7, #0]
 801c7d2:	3310      	adds	r3, #16
 801c7d4:	681a      	ldr	r2, [r3, #0]
 801c7d6:	683b      	ldr	r3, [r7, #0]
 801c7d8:	3324      	adds	r3, #36	; 0x24
 801c7da:	681b      	ldr	r3, [r3, #0]
 801c7dc:	405a      	eors	r2, r3
 801c7de:	683b      	ldr	r3, [r7, #0]
 801c7e0:	f103 0410 	add.w	r4, r3, #16
 801c7e4:	210c      	movs	r1, #12
 801c7e6:	4610      	mov	r0, r2
 801c7e8:	f7fb fb2a 	bl	8017e40 <rotr32>
 801c7ec:	4603      	mov	r3, r0
 801c7ee:	6023      	str	r3, [r4, #0]
 801c7f0:	683b      	ldr	r3, [r7, #0]
 801c7f2:	330c      	adds	r3, #12
 801c7f4:	681a      	ldr	r2, [r3, #0]
 801c7f6:	683b      	ldr	r3, [r7, #0]
 801c7f8:	3310      	adds	r3, #16
 801c7fa:	681b      	ldr	r3, [r3, #0]
 801c7fc:	18d1      	adds	r1, r2, r3
 801c7fe:	2300      	movs	r3, #0
 801c800:	009b      	lsls	r3, r3, #2
 801c802:	687a      	ldr	r2, [r7, #4]
 801c804:	4413      	add	r3, r2
 801c806:	681a      	ldr	r2, [r3, #0]
 801c808:	683b      	ldr	r3, [r7, #0]
 801c80a:	330c      	adds	r3, #12
 801c80c:	440a      	add	r2, r1
 801c80e:	601a      	str	r2, [r3, #0]
 801c810:	683b      	ldr	r3, [r7, #0]
 801c812:	3338      	adds	r3, #56	; 0x38
 801c814:	681a      	ldr	r2, [r3, #0]
 801c816:	683b      	ldr	r3, [r7, #0]
 801c818:	330c      	adds	r3, #12
 801c81a:	681b      	ldr	r3, [r3, #0]
 801c81c:	405a      	eors	r2, r3
 801c81e:	683b      	ldr	r3, [r7, #0]
 801c820:	f103 0438 	add.w	r4, r3, #56	; 0x38
 801c824:	2108      	movs	r1, #8
 801c826:	4610      	mov	r0, r2
 801c828:	f7fb fb0a 	bl	8017e40 <rotr32>
 801c82c:	4603      	mov	r3, r0
 801c82e:	6023      	str	r3, [r4, #0]
 801c830:	683b      	ldr	r3, [r7, #0]
 801c832:	3324      	adds	r3, #36	; 0x24
 801c834:	6819      	ldr	r1, [r3, #0]
 801c836:	683b      	ldr	r3, [r7, #0]
 801c838:	3338      	adds	r3, #56	; 0x38
 801c83a:	681a      	ldr	r2, [r3, #0]
 801c83c:	683b      	ldr	r3, [r7, #0]
 801c83e:	3324      	adds	r3, #36	; 0x24
 801c840:	440a      	add	r2, r1
 801c842:	601a      	str	r2, [r3, #0]
 801c844:	683b      	ldr	r3, [r7, #0]
 801c846:	3310      	adds	r3, #16
 801c848:	681a      	ldr	r2, [r3, #0]
 801c84a:	683b      	ldr	r3, [r7, #0]
 801c84c:	3324      	adds	r3, #36	; 0x24
 801c84e:	681b      	ldr	r3, [r3, #0]
 801c850:	405a      	eors	r2, r3
 801c852:	683b      	ldr	r3, [r7, #0]
 801c854:	f103 0410 	add.w	r4, r3, #16
 801c858:	2107      	movs	r1, #7
 801c85a:	4610      	mov	r0, r2
 801c85c:	f7fb faf0 	bl	8017e40 <rotr32>
 801c860:	4603      	mov	r3, r0
 801c862:	6023      	str	r3, [r4, #0]

  for( i = 0; i < 8; ++i )
 801c864:	2300      	movs	r3, #0
 801c866:	617b      	str	r3, [r7, #20]
 801c868:	e018      	b.n	801c89c <blake2s_compress+0x48a0>
    S->h[i] = S->h[i] ^ v[i] ^ v[i + 8];
 801c86a:	68fb      	ldr	r3, [r7, #12]
 801c86c:	697a      	ldr	r2, [r7, #20]
 801c86e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801c872:	697b      	ldr	r3, [r7, #20]
 801c874:	009b      	lsls	r3, r3, #2
 801c876:	6839      	ldr	r1, [r7, #0]
 801c878:	440b      	add	r3, r1
 801c87a:	681b      	ldr	r3, [r3, #0]
 801c87c:	405a      	eors	r2, r3
 801c87e:	697b      	ldr	r3, [r7, #20]
 801c880:	3308      	adds	r3, #8
 801c882:	009b      	lsls	r3, r3, #2
 801c884:	6839      	ldr	r1, [r7, #0]
 801c886:	440b      	add	r3, r1
 801c888:	681b      	ldr	r3, [r3, #0]
 801c88a:	ea82 0103 	eor.w	r1, r2, r3
 801c88e:	68fb      	ldr	r3, [r7, #12]
 801c890:	697a      	ldr	r2, [r7, #20]
 801c892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for( i = 0; i < 8; ++i )
 801c896:	697b      	ldr	r3, [r7, #20]
 801c898:	3301      	adds	r3, #1
 801c89a:	617b      	str	r3, [r7, #20]
 801c89c:	697b      	ldr	r3, [r7, #20]
 801c89e:	2b07      	cmp	r3, #7
 801c8a0:	dde3      	ble.n	801c86a <blake2s_compress+0x486e>

#undef G
#undef ROUND

  return 0;
 801c8a2:	2300      	movs	r3, #0
}
 801c8a4:	4618      	mov	r0, r3
 801c8a6:	371c      	adds	r7, #28
 801c8a8:	46bd      	mov	sp, r7
 801c8aa:	bd90      	pop	{r4, r7, pc}

0801c8ac <blake2s_update>:

/* inlen now in bytes */
int blake2s_update( blake2s_state *S, const byte *in, word32 inlen )
{
 801c8ac:	b580      	push	{r7, lr}
 801c8ae:	b08a      	sub	sp, #40	; 0x28
 801c8b0:	af00      	add	r7, sp, #0
 801c8b2:	60f8      	str	r0, [r7, #12]
 801c8b4:	60b9      	str	r1, [r7, #8]
 801c8b6:	607a      	str	r2, [r7, #4]
  int ret = 0;
 801c8b8:	2300      	movs	r3, #0
 801c8ba:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef WOLFSSL_SMALL_STACK
  word32* m;
  word32* v;

  m = (word32*)XMALLOC(sizeof(word32) * 32, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801c8bc:	2080      	movs	r0, #128	; 0x80
 801c8be:	f001 fcf9 	bl	801e2b4 <wolfSSL_Malloc>
 801c8c2:	6238      	str	r0, [r7, #32]

  if ( m == NULL ) return MEMORY_E;
 801c8c4:	6a3b      	ldr	r3, [r7, #32]
 801c8c6:	2b00      	cmp	r3, #0
 801c8c8:	d102      	bne.n	801c8d0 <blake2s_update+0x24>
 801c8ca:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 801c8ce:	e06e      	b.n	801c9ae <blake2s_update+0x102>

  v = &m[16];
 801c8d0:	6a3b      	ldr	r3, [r7, #32]
 801c8d2:	3340      	adds	r3, #64	; 0x40
 801c8d4:	61fb      	str	r3, [r7, #28]
#else
  word32 m[16];
  word32 v[16];
#endif

  while( inlen > 0 )
 801c8d6:	e05c      	b.n	801c992 <blake2s_update+0xe6>
  {
    word32 left = S->buflen;
 801c8d8:	68fb      	ldr	r3, [r7, #12]
 801c8da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c8de:	61bb      	str	r3, [r7, #24]
    word32 fill = 2 * BLAKE2S_BLOCKBYTES - left;
 801c8e0:	69bb      	ldr	r3, [r7, #24]
 801c8e2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 801c8e6:	617b      	str	r3, [r7, #20]

    if( inlen > fill )
 801c8e8:	687a      	ldr	r2, [r7, #4]
 801c8ea:	697b      	ldr	r3, [r7, #20]
 801c8ec:	429a      	cmp	r2, r3
 801c8ee:	d93c      	bls.n	801c96a <blake2s_update+0xbe>
    {
      XMEMCPY( S->buf + left, in, (wolfssl_word)fill ); /* Fill buffer */
 801c8f0:	68fb      	ldr	r3, [r7, #12]
 801c8f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801c8f6:	69bb      	ldr	r3, [r7, #24]
 801c8f8:	4413      	add	r3, r2
 801c8fa:	697a      	ldr	r2, [r7, #20]
 801c8fc:	68b9      	ldr	r1, [r7, #8]
 801c8fe:	4618      	mov	r0, r3
 801c900:	f00d fde2 	bl	802a4c8 <memcpy>
      S->buflen += fill;
 801c904:	68fb      	ldr	r3, [r7, #12]
 801c906:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 801c90a:	697b      	ldr	r3, [r7, #20]
 801c90c:	441a      	add	r2, r3
 801c90e:	68fb      	ldr	r3, [r7, #12]
 801c910:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      blake2s_increment_counter( S, BLAKE2S_BLOCKBYTES );
 801c914:	2140      	movs	r1, #64	; 0x40
 801c916:	68f8      	ldr	r0, [r7, #12]
 801c918:	f7fb fadf 	bl	8017eda <blake2s_increment_counter>

      {
          ret= blake2s_compress( S, S->buf, m, v );
 801c91c:	68fb      	ldr	r3, [r7, #12]
 801c91e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801c922:	69fb      	ldr	r3, [r7, #28]
 801c924:	6a3a      	ldr	r2, [r7, #32]
 801c926:	68f8      	ldr	r0, [r7, #12]
 801c928:	f7fb fb68 	bl	8017ffc <blake2s_compress>
 801c92c:	6278      	str	r0, [r7, #36]	; 0x24
          if (ret < 0) break;
 801c92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c930:	2b00      	cmp	r3, #0
 801c932:	db32      	blt.n	801c99a <blake2s_update+0xee>
      }

      XMEMCPY( S->buf, S->buf + BLAKE2S_BLOCKBYTES, BLAKE2S_BLOCKBYTES );
 801c934:	68fb      	ldr	r3, [r7, #12]
 801c936:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801c93a:	68fb      	ldr	r3, [r7, #12]
 801c93c:	3330      	adds	r3, #48	; 0x30
 801c93e:	3340      	adds	r3, #64	; 0x40
 801c940:	2240      	movs	r2, #64	; 0x40
 801c942:	4619      	mov	r1, r3
 801c944:	f00d fdc0 	bl	802a4c8 <memcpy>
              /* Shift buffer left */
      S->buflen -= BLAKE2S_BLOCKBYTES;
 801c948:	68fb      	ldr	r3, [r7, #12]
 801c94a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c94e:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 801c952:	68fb      	ldr	r3, [r7, #12]
 801c954:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      in += fill;
 801c958:	68ba      	ldr	r2, [r7, #8]
 801c95a:	697b      	ldr	r3, [r7, #20]
 801c95c:	4413      	add	r3, r2
 801c95e:	60bb      	str	r3, [r7, #8]
      inlen -= fill;
 801c960:	687a      	ldr	r2, [r7, #4]
 801c962:	697b      	ldr	r3, [r7, #20]
 801c964:	1ad3      	subs	r3, r2, r3
 801c966:	607b      	str	r3, [r7, #4]
 801c968:	e013      	b.n	801c992 <blake2s_update+0xe6>
    }
    else /* inlen <= fill */
    {
      XMEMCPY( S->buf + left, in, (wolfssl_word)inlen );
 801c96a:	68fb      	ldr	r3, [r7, #12]
 801c96c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801c970:	69bb      	ldr	r3, [r7, #24]
 801c972:	4413      	add	r3, r2
 801c974:	687a      	ldr	r2, [r7, #4]
 801c976:	68b9      	ldr	r1, [r7, #8]
 801c978:	4618      	mov	r0, r3
 801c97a:	f00d fda5 	bl	802a4c8 <memcpy>
      S->buflen += inlen; /* Be lazy, do not compress */
 801c97e:	68fb      	ldr	r3, [r7, #12]
 801c980:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 801c984:	687b      	ldr	r3, [r7, #4]
 801c986:	441a      	add	r2, r3
 801c988:	68fb      	ldr	r3, [r7, #12]
 801c98a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      inlen = 0;
 801c98e:	2300      	movs	r3, #0
 801c990:	607b      	str	r3, [r7, #4]
  while( inlen > 0 )
 801c992:	687b      	ldr	r3, [r7, #4]
 801c994:	2b00      	cmp	r3, #0
 801c996:	d19f      	bne.n	801c8d8 <blake2s_update+0x2c>
 801c998:	e000      	b.n	801c99c <blake2s_update+0xf0>
          if (ret < 0) break;
 801c99a:	bf00      	nop
    }
  }

#ifdef WOLFSSL_SMALL_STACK
  XFREE(m, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801c99c:	6a3b      	ldr	r3, [r7, #32]
 801c99e:	613b      	str	r3, [r7, #16]
 801c9a0:	693b      	ldr	r3, [r7, #16]
 801c9a2:	2b00      	cmp	r3, #0
 801c9a4:	d002      	beq.n	801c9ac <blake2s_update+0x100>
 801c9a6:	6938      	ldr	r0, [r7, #16]
 801c9a8:	f001 fca0 	bl	801e2ec <wolfSSL_Free>
#endif

  return ret;
 801c9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801c9ae:	4618      	mov	r0, r3
 801c9b0:	3728      	adds	r7, #40	; 0x28
 801c9b2:	46bd      	mov	sp, r7
 801c9b4:	bd80      	pop	{r7, pc}

0801c9b6 <blake2s_final>:

/* Is this correct? */
int blake2s_final( blake2s_state *S, byte *out, byte outlen )
{
 801c9b6:	b5b0      	push	{r4, r5, r7, lr}
 801c9b8:	b09a      	sub	sp, #104	; 0x68
 801c9ba:	af00      	add	r7, sp, #0
 801c9bc:	60f8      	str	r0, [r7, #12]
 801c9be:	60b9      	str	r1, [r7, #8]
 801c9c0:	4613      	mov	r3, r2
 801c9c2:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
 801c9c4:	2300      	movs	r3, #0
 801c9c6:	667b      	str	r3, [r7, #100]	; 0x64
  byte buffer[BLAKE2S_BLOCKBYTES];
#ifdef WOLFSSL_SMALL_STACK
  word32* m;
  word32* v;

  m = (word32*)XMALLOC(sizeof(word32) * 32, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801c9c8:	2080      	movs	r0, #128	; 0x80
 801c9ca:	f001 fc73 	bl	801e2b4 <wolfSSL_Malloc>
 801c9ce:	65f8      	str	r0, [r7, #92]	; 0x5c

  if ( m == NULL ) return MEMORY_E;
 801c9d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c9d2:	2b00      	cmp	r3, #0
 801c9d4:	d102      	bne.n	801c9dc <blake2s_final+0x26>
 801c9d6:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 801c9da:	e080      	b.n	801cade <blake2s_final+0x128>

  v = &m[16];
 801c9dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c9de:	3340      	adds	r3, #64	; 0x40
 801c9e0:	65bb      	str	r3, [r7, #88]	; 0x58
#else
  word32 m[16];
  word32 v[16];
#endif

  if( S->buflen > BLAKE2S_BLOCKBYTES )
 801c9e2:	68fb      	ldr	r3, [r7, #12]
 801c9e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c9e8:	2b40      	cmp	r3, #64	; 0x40
 801c9ea:	d924      	bls.n	801ca36 <blake2s_final+0x80>
  {
    blake2s_increment_counter( S, BLAKE2S_BLOCKBYTES );
 801c9ec:	2140      	movs	r1, #64	; 0x40
 801c9ee:	68f8      	ldr	r0, [r7, #12]
 801c9f0:	f7fb fa73 	bl	8017eda <blake2s_increment_counter>

    {
        ret = blake2s_compress( S, S->buf, m, v );
 801c9f4:	68fb      	ldr	r3, [r7, #12]
 801c9f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801c9fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c9fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801c9fe:	68f8      	ldr	r0, [r7, #12]
 801ca00:	f7fb fafc 	bl	8017ffc <blake2s_compress>
 801ca04:	6678      	str	r0, [r7, #100]	; 0x64
        if (ret < 0) goto out;
 801ca06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ca08:	2b00      	cmp	r3, #0
 801ca0a:	db5c      	blt.n	801cac6 <blake2s_final+0x110>
    }

    S->buflen -= BLAKE2S_BLOCKBYTES;
 801ca0c:	68fb      	ldr	r3, [r7, #12]
 801ca0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801ca12:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 801ca16:	68fb      	ldr	r3, [r7, #12]
 801ca18:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    XMEMCPY( S->buf, S->buf + BLAKE2S_BLOCKBYTES, (wolfssl_word)S->buflen );
 801ca1c:	68fb      	ldr	r3, [r7, #12]
 801ca1e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801ca22:	68fb      	ldr	r3, [r7, #12]
 801ca24:	3330      	adds	r3, #48	; 0x30
 801ca26:	f103 0140 	add.w	r1, r3, #64	; 0x40
 801ca2a:	68fb      	ldr	r3, [r7, #12]
 801ca2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801ca30:	461a      	mov	r2, r3
 801ca32:	f00d fd49 	bl	802a4c8 <memcpy>
  }

  blake2s_increment_counter( S, S->buflen );
 801ca36:	68fb      	ldr	r3, [r7, #12]
 801ca38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801ca3c:	4619      	mov	r1, r3
 801ca3e:	68f8      	ldr	r0, [r7, #12]
 801ca40:	f7fb fa4b 	bl	8017eda <blake2s_increment_counter>
  blake2s_set_lastblock( S );
 801ca44:	68f8      	ldr	r0, [r7, #12]
 801ca46:	f7fb fa26 	bl	8017e96 <blake2s_set_lastblock>
  XMEMSET( S->buf + S->buflen, 0, (wolfssl_word)(2 * BLAKE2S_BLOCKBYTES - S->buflen) );
 801ca4a:	68fb      	ldr	r3, [r7, #12]
 801ca4c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801ca50:	68fb      	ldr	r3, [r7, #12]
 801ca52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801ca56:	18d0      	adds	r0, r2, r3
 801ca58:	68fb      	ldr	r3, [r7, #12]
 801ca5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801ca5e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 801ca62:	461a      	mov	r2, r3
 801ca64:	2100      	movs	r1, #0
 801ca66:	f00d fd57 	bl	802a518 <memset>
         /* Padding */
  {
      ret = blake2s_compress( S, S->buf, m, v );
 801ca6a:	68fb      	ldr	r3, [r7, #12]
 801ca6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801ca70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ca72:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801ca74:	68f8      	ldr	r0, [r7, #12]
 801ca76:	f7fb fac1 	bl	8017ffc <blake2s_compress>
 801ca7a:	6678      	str	r0, [r7, #100]	; 0x64
      if (ret < 0) goto out;
 801ca7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ca7e:	2b00      	cmp	r3, #0
 801ca80:	db23      	blt.n	801caca <blake2s_final+0x114>
  }

  for( i = 0; i < 8; ++i ) /* Output full hash to temp buffer */
 801ca82:	2300      	movs	r3, #0
 801ca84:	663b      	str	r3, [r7, #96]	; 0x60
 801ca86:	e013      	b.n	801cab0 <blake2s_final+0xfa>
    store64( buffer + sizeof( S->h[i] ) * i, S->h[i] );
 801ca88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ca8a:	009b      	lsls	r3, r3, #2
 801ca8c:	f107 0214 	add.w	r2, r7, #20
 801ca90:	18d1      	adds	r1, r2, r3
 801ca92:	68fb      	ldr	r3, [r7, #12]
 801ca94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801ca96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ca9a:	2200      	movs	r2, #0
 801ca9c:	461c      	mov	r4, r3
 801ca9e:	4615      	mov	r5, r2
 801caa0:	4622      	mov	r2, r4
 801caa2:	462b      	mov	r3, r5
 801caa4:	4608      	mov	r0, r1
 801caa6:	f7fb f941 	bl	8017d2c <store64>
  for( i = 0; i < 8; ++i ) /* Output full hash to temp buffer */
 801caaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801caac:	3301      	adds	r3, #1
 801caae:	663b      	str	r3, [r7, #96]	; 0x60
 801cab0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801cab2:	2b07      	cmp	r3, #7
 801cab4:	dde8      	ble.n	801ca88 <blake2s_final+0xd2>

  XMEMCPY( out, buffer, outlen );
 801cab6:	79fa      	ldrb	r2, [r7, #7]
 801cab8:	f107 0314 	add.w	r3, r7, #20
 801cabc:	4619      	mov	r1, r3
 801cabe:	68b8      	ldr	r0, [r7, #8]
 801cac0:	f00d fd02 	bl	802a4c8 <memcpy>
 801cac4:	e002      	b.n	801cacc <blake2s_final+0x116>
        if (ret < 0) goto out;
 801cac6:	bf00      	nop
 801cac8:	e000      	b.n	801cacc <blake2s_final+0x116>
      if (ret < 0) goto out;
 801caca:	bf00      	nop

 out:

#ifdef WOLFSSL_SMALL_STACK
  XFREE(m, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801cacc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801cace:	657b      	str	r3, [r7, #84]	; 0x54
 801cad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cad2:	2b00      	cmp	r3, #0
 801cad4:	d002      	beq.n	801cadc <blake2s_final+0x126>
 801cad6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801cad8:	f001 fc08 	bl	801e2ec <wolfSSL_Free>
#endif

  return ret;
 801cadc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 801cade:	4618      	mov	r0, r3
 801cae0:	3768      	adds	r7, #104	; 0x68
 801cae2:	46bd      	mov	sp, r7
 801cae4:	bdb0      	pop	{r4, r5, r7, pc}

0801cae6 <wc_InitBlake2s>:

/* wolfCrypt API */

/* Init Blake2s digest, track size in case final doesn't want to "remember" */
int wc_InitBlake2s(Blake2s* b2s, word32 digestSz)
{
 801cae6:	b580      	push	{r7, lr}
 801cae8:	b082      	sub	sp, #8
 801caea:	af00      	add	r7, sp, #0
 801caec:	6078      	str	r0, [r7, #4]
 801caee:	6039      	str	r1, [r7, #0]
    if (b2s == NULL){
 801caf0:	687b      	ldr	r3, [r7, #4]
 801caf2:	2b00      	cmp	r3, #0
 801caf4:	d102      	bne.n	801cafc <wc_InitBlake2s+0x16>
        return BAD_FUNC_ARG;
 801caf6:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801cafa:	e00b      	b.n	801cb14 <wc_InitBlake2s+0x2e>
    }
    b2s->digestSz = digestSz;
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	683a      	ldr	r2, [r7, #0]
 801cb00:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    return blake2s_init(b2s->S, (byte)digestSz);
 801cb04:	687b      	ldr	r3, [r7, #4]
 801cb06:	683a      	ldr	r2, [r7, #0]
 801cb08:	b2d2      	uxtb	r2, r2
 801cb0a:	4611      	mov	r1, r2
 801cb0c:	4618      	mov	r0, r3
 801cb0e:	f7fb fa4e 	bl	8017fae <blake2s_init>
 801cb12:	4603      	mov	r3, r0
}
 801cb14:	4618      	mov	r0, r3
 801cb16:	3708      	adds	r7, #8
 801cb18:	46bd      	mov	sp, r7
 801cb1a:	bd80      	pop	{r7, pc}

0801cb1c <wc_Blake2sUpdate>:
}


/* Blake2s Update */
int wc_Blake2sUpdate(Blake2s* b2s, const byte* data, word32 sz)
{
 801cb1c:	b580      	push	{r7, lr}
 801cb1e:	b084      	sub	sp, #16
 801cb20:	af00      	add	r7, sp, #0
 801cb22:	60f8      	str	r0, [r7, #12]
 801cb24:	60b9      	str	r1, [r7, #8]
 801cb26:	607a      	str	r2, [r7, #4]
    return blake2s_update(b2s->S, data, sz);
 801cb28:	68fb      	ldr	r3, [r7, #12]
 801cb2a:	687a      	ldr	r2, [r7, #4]
 801cb2c:	68b9      	ldr	r1, [r7, #8]
 801cb2e:	4618      	mov	r0, r3
 801cb30:	f7ff febc 	bl	801c8ac <blake2s_update>
 801cb34:	4603      	mov	r3, r0
}
 801cb36:	4618      	mov	r0, r3
 801cb38:	3710      	adds	r7, #16
 801cb3a:	46bd      	mov	sp, r7
 801cb3c:	bd80      	pop	{r7, pc}

0801cb3e <wc_Blake2sFinal>:


/* Blake2s Final, if pass in zero size we use init digestSz */
int wc_Blake2sFinal(Blake2s* b2s, byte* final, word32 requestSz)
{
 801cb3e:	b580      	push	{r7, lr}
 801cb40:	b086      	sub	sp, #24
 801cb42:	af00      	add	r7, sp, #0
 801cb44:	60f8      	str	r0, [r7, #12]
 801cb46:	60b9      	str	r1, [r7, #8]
 801cb48:	607a      	str	r2, [r7, #4]
    word32 sz = requestSz ? requestSz : b2s->digestSz;
 801cb4a:	687b      	ldr	r3, [r7, #4]
 801cb4c:	2b00      	cmp	r3, #0
 801cb4e:	d103      	bne.n	801cb58 <wc_Blake2sFinal+0x1a>
 801cb50:	68fb      	ldr	r3, [r7, #12]
 801cb52:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801cb56:	e000      	b.n	801cb5a <wc_Blake2sFinal+0x1c>
 801cb58:	687b      	ldr	r3, [r7, #4]
 801cb5a:	617b      	str	r3, [r7, #20]

    return blake2s_final(b2s->S, final, (byte)sz);
 801cb5c:	68fb      	ldr	r3, [r7, #12]
 801cb5e:	697a      	ldr	r2, [r7, #20]
 801cb60:	b2d2      	uxtb	r2, r2
 801cb62:	68b9      	ldr	r1, [r7, #8]
 801cb64:	4618      	mov	r0, r3
 801cb66:	f7ff ff26 	bl	801c9b6 <blake2s_final>
 801cb6a:	4603      	mov	r3, r0
}
 801cb6c:	4618      	mov	r0, r3
 801cb6e:	3718      	adds	r7, #24
 801cb70:	46bd      	mov	sp, r7
 801cb72:	bd80      	pop	{r7, pc}

0801cb74 <wc_HashGetDigestSize>:

#ifndef NO_HASH_WRAPPER

/* Get Hash digest size */
int wc_HashGetDigestSize(enum wc_HashType hash_type)
{
 801cb74:	b480      	push	{r7}
 801cb76:	b085      	sub	sp, #20
 801cb78:	af00      	add	r7, sp, #0
 801cb7a:	4603      	mov	r3, r0
 801cb7c:	71fb      	strb	r3, [r7, #7]
    int dig_size = HASH_TYPE_E; /* Default to hash type error */
 801cb7e:	f06f 03e7 	mvn.w	r3, #231	; 0xe7
 801cb82:	60fb      	str	r3, [r7, #12]
    switch(hash_type)
 801cb84:	79fb      	ldrb	r3, [r7, #7]
 801cb86:	3b01      	subs	r3, #1
 801cb88:	2b10      	cmp	r3, #16
 801cb8a:	d84f      	bhi.n	801cc2c <wc_HashGetDigestSize+0xb8>
 801cb8c:	a201      	add	r2, pc, #4	; (adr r2, 801cb94 <wc_HashGetDigestSize+0x20>)
 801cb8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cb92:	bf00      	nop
 801cb94:	0801cc35 	.word	0x0801cc35
 801cb98:	0801cc35 	.word	0x0801cc35
 801cb9c:	0801cbd9 	.word	0x0801cbd9
 801cba0:	0801cbdf 	.word	0x0801cbdf
 801cba4:	0801cbe5 	.word	0x0801cbe5
 801cba8:	0801cbeb 	.word	0x0801cbeb
 801cbac:	0801cbf1 	.word	0x0801cbf1
 801cbb0:	0801cbf7 	.word	0x0801cbf7
 801cbb4:	0801cc09 	.word	0x0801cc09
 801cbb8:	0801cc0f 	.word	0x0801cc0f
 801cbbc:	0801cc15 	.word	0x0801cc15
 801cbc0:	0801cc1b 	.word	0x0801cc1b
 801cbc4:	0801cc21 	.word	0x0801cc21
 801cbc8:	0801cc27 	.word	0x0801cc27
 801cbcc:	0801cc27 	.word	0x0801cc27
 801cbd0:	0801cbfd 	.word	0x0801cbfd
 801cbd4:	0801cc03 	.word	0x0801cc03
            dig_size = MD4_DIGEST_SIZE;
        #endif
            break;
        case WC_HASH_TYPE_MD5:
        #ifndef NO_MD5
            dig_size = WC_MD5_DIGEST_SIZE;
 801cbd8:	2310      	movs	r3, #16
 801cbda:	60fb      	str	r3, [r7, #12]
        #endif
            break;
 801cbdc:	e02b      	b.n	801cc36 <wc_HashGetDigestSize+0xc2>
        case WC_HASH_TYPE_SHA:
        #ifndef NO_SHA
            dig_size = WC_SHA_DIGEST_SIZE;
 801cbde:	2314      	movs	r3, #20
 801cbe0:	60fb      	str	r3, [r7, #12]
        #endif
            break;
 801cbe2:	e028      	b.n	801cc36 <wc_HashGetDigestSize+0xc2>
        case WC_HASH_TYPE_SHA224:
        #ifdef WOLFSSL_SHA224
            dig_size = WC_SHA224_DIGEST_SIZE;
 801cbe4:	231c      	movs	r3, #28
 801cbe6:	60fb      	str	r3, [r7, #12]
        #endif
            break;
 801cbe8:	e025      	b.n	801cc36 <wc_HashGetDigestSize+0xc2>
        case WC_HASH_TYPE_SHA256:
        #ifndef NO_SHA256
            dig_size = WC_SHA256_DIGEST_SIZE;
 801cbea:	2320      	movs	r3, #32
 801cbec:	60fb      	str	r3, [r7, #12]
        #endif
            break;
 801cbee:	e022      	b.n	801cc36 <wc_HashGetDigestSize+0xc2>
        case WC_HASH_TYPE_SHA384:
        #ifdef WOLFSSL_SHA384
            dig_size = WC_SHA384_DIGEST_SIZE;
 801cbf0:	2330      	movs	r3, #48	; 0x30
 801cbf2:	60fb      	str	r3, [r7, #12]
        #endif
            break;
 801cbf4:	e01f      	b.n	801cc36 <wc_HashGetDigestSize+0xc2>
        case WC_HASH_TYPE_SHA512:
        #ifdef WOLFSSL_SHA512
            dig_size = WC_SHA512_DIGEST_SIZE;
 801cbf6:	2340      	movs	r3, #64	; 0x40
 801cbf8:	60fb      	str	r3, [r7, #12]
        #endif
            break;
 801cbfa:	e01c      	b.n	801cc36 <wc_HashGetDigestSize+0xc2>
    #ifndef WOLFSSL_NOSHA512_224
        case WC_HASH_TYPE_SHA512_224:
#if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
        #if defined(WOLFSSL_SHA512) && !defined(WOLFSSL_NOSHA512_224)
            dig_size = WC_SHA512_224_DIGEST_SIZE;
 801cbfc:	231c      	movs	r3, #28
 801cbfe:	60fb      	str	r3, [r7, #12]
        #endif
#endif /* !HAVE_FIPS && !HAVE_SELFTEST */
            break;
 801cc00:	e019      	b.n	801cc36 <wc_HashGetDigestSize+0xc2>
    #endif
    #ifndef WOLFSSL_NOSHA512_256
        case WC_HASH_TYPE_SHA512_256:
#if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
        #if defined(WOLFSSL_SHA512) && !defined(WOLFSSL_NOSHA512_256)
            dig_size = WC_SHA512_256_DIGEST_SIZE;
 801cc02:	2320      	movs	r3, #32
 801cc04:	60fb      	str	r3, [r7, #12]
        #endif
#endif /* !HAVE_FIPS && !HAVE_SELFTEST */
            break;
 801cc06:	e016      	b.n	801cc36 <wc_HashGetDigestSize+0xc2>
    #endif
        case WC_HASH_TYPE_MD5_SHA: /* Old TLS Specific */
        #if !defined(NO_MD5) && !defined(NO_SHA)
            dig_size = (int)WC_MD5_DIGEST_SIZE + (int)WC_SHA_DIGEST_SIZE;
 801cc08:	2324      	movs	r3, #36	; 0x24
 801cc0a:	60fb      	str	r3, [r7, #12]
        #endif
            break;
 801cc0c:	e013      	b.n	801cc36 <wc_HashGetDigestSize+0xc2>

        case WC_HASH_TYPE_SHA3_224:
        #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_224)
            dig_size = WC_SHA3_224_DIGEST_SIZE;
 801cc0e:	231c      	movs	r3, #28
 801cc10:	60fb      	str	r3, [r7, #12]
        #endif
            break;
 801cc12:	e010      	b.n	801cc36 <wc_HashGetDigestSize+0xc2>
        case WC_HASH_TYPE_SHA3_256:
        #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_256)
            dig_size = WC_SHA3_256_DIGEST_SIZE;
 801cc14:	2320      	movs	r3, #32
 801cc16:	60fb      	str	r3, [r7, #12]
        #endif
            break;
 801cc18:	e00d      	b.n	801cc36 <wc_HashGetDigestSize+0xc2>
        case WC_HASH_TYPE_SHA3_384:
        #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_384)
            dig_size = WC_SHA3_384_DIGEST_SIZE;
 801cc1a:	2330      	movs	r3, #48	; 0x30
 801cc1c:	60fb      	str	r3, [r7, #12]
        #endif
            break;
 801cc1e:	e00a      	b.n	801cc36 <wc_HashGetDigestSize+0xc2>
        case WC_HASH_TYPE_SHA3_512:
        #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_512)
            dig_size = WC_SHA3_512_DIGEST_SIZE;
 801cc20:	2340      	movs	r3, #64	; 0x40
 801cc22:	60fb      	str	r3, [r7, #12]
        #endif
            break;
 801cc24:	e007      	b.n	801cc36 <wc_HashGetDigestSize+0xc2>
        case WC_HASH_TYPE_BLAKE2B:
        case WC_HASH_TYPE_BLAKE2S:
        #if defined(HAVE_BLAKE2) || defined(HAVE_BLAKE2S)
            dig_size = BLAKE2S_OUTBYTES;
 801cc26:	2320      	movs	r3, #32
 801cc28:	60fb      	str	r3, [r7, #12]
        #endif
            break;
 801cc2a:	e004      	b.n	801cc36 <wc_HashGetDigestSize+0xc2>
        case WC_HASH_TYPE_SHAKE128:
        case WC_HASH_TYPE_SHAKE256:
    #endif
        case WC_HASH_TYPE_NONE:
        default:
            dig_size = BAD_FUNC_ARG;
 801cc2c:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801cc30:	60fb      	str	r3, [r7, #12]
            break;
 801cc32:	e000      	b.n	801cc36 <wc_HashGetDigestSize+0xc2>
            break;
 801cc34:	bf00      	nop
    }
    return dig_size;
 801cc36:	68fb      	ldr	r3, [r7, #12]
}
 801cc38:	4618      	mov	r0, r3
 801cc3a:	3714      	adds	r7, #20
 801cc3c:	46bd      	mov	sp, r7
 801cc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc42:	4770      	bx	lr

0801cc44 <wc_Hash>:
}

/* Generic Hashing Wrapper */
int wc_Hash(enum wc_HashType hash_type, const byte* data,
    word32 data_len, byte* hash, word32 hash_len)
{
 801cc44:	b580      	push	{r7, lr}
 801cc46:	b086      	sub	sp, #24
 801cc48:	af00      	add	r7, sp, #0
 801cc4a:	60b9      	str	r1, [r7, #8]
 801cc4c:	607a      	str	r2, [r7, #4]
 801cc4e:	603b      	str	r3, [r7, #0]
 801cc50:	4603      	mov	r3, r0
 801cc52:	73fb      	strb	r3, [r7, #15]
    int ret = HASH_TYPE_E; /* Default to hash type error */
 801cc54:	f06f 03e7 	mvn.w	r3, #231	; 0xe7
 801cc58:	617b      	str	r3, [r7, #20]
    word32 dig_size;

    /* Validate hash buffer size */
    dig_size = wc_HashGetDigestSize(hash_type);
 801cc5a:	7bfb      	ldrb	r3, [r7, #15]
 801cc5c:	4618      	mov	r0, r3
 801cc5e:	f7ff ff89 	bl	801cb74 <wc_HashGetDigestSize>
 801cc62:	4603      	mov	r3, r0
 801cc64:	613b      	str	r3, [r7, #16]
    if (hash_len < dig_size) {
 801cc66:	6a3a      	ldr	r2, [r7, #32]
 801cc68:	693b      	ldr	r3, [r7, #16]
 801cc6a:	429a      	cmp	r2, r3
 801cc6c:	d202      	bcs.n	801cc74 <wc_Hash+0x30>
        return BUFFER_E;
 801cc6e:	f06f 0383 	mvn.w	r3, #131	; 0x83
 801cc72:	e091      	b.n	801cd98 <wc_Hash+0x154>
    (void)data;
    (void)data_len;
    (void)hash;
    (void)hash_len;

    switch(hash_type)
 801cc74:	7bfb      	ldrb	r3, [r7, #15]
 801cc76:	3b03      	subs	r3, #3
 801cc78:	2b0e      	cmp	r3, #14
 801cc7a:	f200 8087 	bhi.w	801cd8c <wc_Hash+0x148>
 801cc7e:	a201      	add	r2, pc, #4	; (adr r2, 801cc84 <wc_Hash+0x40>)
 801cc80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cc84:	0801ccc1 	.word	0x0801ccc1
 801cc88:	0801cccf 	.word	0x0801cccf
 801cc8c:	0801ccdd 	.word	0x0801ccdd
 801cc90:	0801cceb 	.word	0x0801cceb
 801cc94:	0801ccf9 	.word	0x0801ccf9
 801cc98:	0801cd07 	.word	0x0801cd07
 801cc9c:	0801cd31 	.word	0x0801cd31
 801cca0:	0801cd55 	.word	0x0801cd55
 801cca4:	0801cd63 	.word	0x0801cd63
 801cca8:	0801cd71 	.word	0x0801cd71
 801ccac:	0801cd7f 	.word	0x0801cd7f
 801ccb0:	0801cd8d 	.word	0x0801cd8d
 801ccb4:	0801cd8d 	.word	0x0801cd8d
 801ccb8:	0801cd15 	.word	0x0801cd15
 801ccbc:	0801cd23 	.word	0x0801cd23
    {
        case WC_HASH_TYPE_MD5:
#ifndef NO_MD5
            ret = wc_Md5Hash(data, data_len, hash);
 801ccc0:	683a      	ldr	r2, [r7, #0]
 801ccc2:	6879      	ldr	r1, [r7, #4]
 801ccc4:	68b8      	ldr	r0, [r7, #8]
 801ccc6:	f000 f86b 	bl	801cda0 <wc_Md5Hash>
 801ccca:	6178      	str	r0, [r7, #20]
#endif
            break;
 801cccc:	e063      	b.n	801cd96 <wc_Hash+0x152>
        case WC_HASH_TYPE_SHA:
#ifndef NO_SHA
            ret = wc_ShaHash(data, data_len, hash);
 801ccce:	683a      	ldr	r2, [r7, #0]
 801ccd0:	6879      	ldr	r1, [r7, #4]
 801ccd2:	68b8      	ldr	r0, [r7, #8]
 801ccd4:	f000 f899 	bl	801ce0a <wc_ShaHash>
 801ccd8:	6178      	str	r0, [r7, #20]
#endif
            break;
 801ccda:	e05c      	b.n	801cd96 <wc_Hash+0x152>
        case WC_HASH_TYPE_SHA224:
#ifdef WOLFSSL_SHA224
            ret = wc_Sha224Hash(data, data_len, hash);
 801ccdc:	683a      	ldr	r2, [r7, #0]
 801ccde:	6879      	ldr	r1, [r7, #4]
 801cce0:	68b8      	ldr	r0, [r7, #8]
 801cce2:	f000 f8ce 	bl	801ce82 <wc_Sha224Hash>
 801cce6:	6178      	str	r0, [r7, #20]
#endif
            break;
 801cce8:	e055      	b.n	801cd96 <wc_Hash+0x152>
        case WC_HASH_TYPE_SHA256:
#ifndef NO_SHA256
            ret = wc_Sha256Hash(data, data_len, hash);
 801ccea:	683a      	ldr	r2, [r7, #0]
 801ccec:	6879      	ldr	r1, [r7, #4]
 801ccee:	68b8      	ldr	r0, [r7, #8]
 801ccf0:	f000 f8fe 	bl	801cef0 <wc_Sha256Hash>
 801ccf4:	6178      	str	r0, [r7, #20]
#endif
            break;
 801ccf6:	e04e      	b.n	801cd96 <wc_Hash+0x152>
        case WC_HASH_TYPE_SHA384:
#ifdef WOLFSSL_SHA384
            ret = wc_Sha384Hash(data, data_len, hash);
 801ccf8:	683a      	ldr	r2, [r7, #0]
 801ccfa:	6879      	ldr	r1, [r7, #4]
 801ccfc:	68b8      	ldr	r0, [r7, #8]
 801ccfe:	f000 f9d8 	bl	801d0b2 <wc_Sha384Hash>
 801cd02:	6178      	str	r0, [r7, #20]
#endif
            break;
 801cd04:	e047      	b.n	801cd96 <wc_Hash+0x152>
        case WC_HASH_TYPE_SHA512:
#ifdef WOLFSSL_SHA512
            ret = wc_Sha512Hash(data, data_len, hash);
 801cd06:	683a      	ldr	r2, [r7, #0]
 801cd08:	6879      	ldr	r1, [r7, #4]
 801cd0a:	68b8      	ldr	r0, [r7, #8]
 801cd0c:	f000 f92c 	bl	801cf68 <wc_Sha512Hash>
 801cd10:	6178      	str	r0, [r7, #20]
#endif
            break;
 801cd12:	e040      	b.n	801cd96 <wc_Hash+0x152>
    #ifndef WOLFSSL_NOSHA512_224
        case WC_HASH_TYPE_SHA512_224:
#if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
#if defined(WOLFSSL_SHA512) && !defined(WOLFSSL_NOSHA512_224)
            ret = wc_Sha512_224Hash(data, data_len, hash);
 801cd14:	683a      	ldr	r2, [r7, #0]
 801cd16:	6879      	ldr	r1, [r7, #4]
 801cd18:	68b8      	ldr	r0, [r7, #8]
 801cd1a:	f000 f95c 	bl	801cfd6 <wc_Sha512_224Hash>
 801cd1e:	6178      	str	r0, [r7, #20]
#endif
#endif /* !HAVE_FIPS && !HAVE_SELFTEST */
            break;
 801cd20:	e039      	b.n	801cd96 <wc_Hash+0x152>
    #endif
    #ifndef WOLFSSL_NOSHA512_256
        case WC_HASH_TYPE_SHA512_256:
#if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
#if defined(WOLFSSL_SHA512) && !defined(WOLFSSL_NOSHA512_224)
            ret = wc_Sha512_256Hash(data, data_len, hash);
 801cd22:	683a      	ldr	r2, [r7, #0]
 801cd24:	6879      	ldr	r1, [r7, #4]
 801cd26:	68b8      	ldr	r0, [r7, #8]
 801cd28:	f000 f98c 	bl	801d044 <wc_Sha512_256Hash>
 801cd2c:	6178      	str	r0, [r7, #20]
#endif
#endif /* !HAVE_FIPS && !HAVE_SELFTEST */
            break;
 801cd2e:	e032      	b.n	801cd96 <wc_Hash+0x152>
    #endif
        case WC_HASH_TYPE_MD5_SHA:
#if !defined(NO_MD5) && !defined(NO_SHA)
            ret = wc_Md5Hash(data, data_len, hash);
 801cd30:	683a      	ldr	r2, [r7, #0]
 801cd32:	6879      	ldr	r1, [r7, #4]
 801cd34:	68b8      	ldr	r0, [r7, #8]
 801cd36:	f000 f833 	bl	801cda0 <wc_Md5Hash>
 801cd3a:	6178      	str	r0, [r7, #20]
            if (ret == 0) {
 801cd3c:	697b      	ldr	r3, [r7, #20]
 801cd3e:	2b00      	cmp	r3, #0
 801cd40:	d128      	bne.n	801cd94 <wc_Hash+0x150>
                ret = wc_ShaHash(data, data_len, &hash[WC_MD5_DIGEST_SIZE]);
 801cd42:	683b      	ldr	r3, [r7, #0]
 801cd44:	3310      	adds	r3, #16
 801cd46:	461a      	mov	r2, r3
 801cd48:	6879      	ldr	r1, [r7, #4]
 801cd4a:	68b8      	ldr	r0, [r7, #8]
 801cd4c:	f000 f85d 	bl	801ce0a <wc_ShaHash>
 801cd50:	6178      	str	r0, [r7, #20]
            }
#endif
            break;
 801cd52:	e01f      	b.n	801cd94 <wc_Hash+0x150>

        case WC_HASH_TYPE_SHA3_224:
#if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_224)
            ret = wc_Sha3_224Hash(data, data_len, hash);
 801cd54:	683a      	ldr	r2, [r7, #0]
 801cd56:	6879      	ldr	r1, [r7, #4]
 801cd58:	68b8      	ldr	r0, [r7, #8]
 801cd5a:	f000 f9e1 	bl	801d120 <wc_Sha3_224Hash>
 801cd5e:	6178      	str	r0, [r7, #20]
#endif
            break;
 801cd60:	e019      	b.n	801cd96 <wc_Hash+0x152>
        case WC_HASH_TYPE_SHA3_256:
#if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_256)
            ret = wc_Sha3_256Hash(data, data_len, hash);
 801cd62:	683a      	ldr	r2, [r7, #0]
 801cd64:	6879      	ldr	r1, [r7, #4]
 801cd66:	68b8      	ldr	r0, [r7, #8]
 801cd68:	f000 fa15 	bl	801d196 <wc_Sha3_256Hash>
 801cd6c:	6178      	str	r0, [r7, #20]
#endif
            break;
 801cd6e:	e012      	b.n	801cd96 <wc_Hash+0x152>
        case WC_HASH_TYPE_SHA3_384:
#if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_384)
            ret = wc_Sha3_384Hash(data, data_len, hash);
 801cd70:	683a      	ldr	r2, [r7, #0]
 801cd72:	6879      	ldr	r1, [r7, #4]
 801cd74:	68b8      	ldr	r0, [r7, #8]
 801cd76:	f000 fa49 	bl	801d20c <wc_Sha3_384Hash>
 801cd7a:	6178      	str	r0, [r7, #20]
#endif
            break;
 801cd7c:	e00b      	b.n	801cd96 <wc_Hash+0x152>
        case WC_HASH_TYPE_SHA3_512:
#if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_512)
            ret = wc_Sha3_512Hash(data, data_len, hash);
 801cd7e:	683a      	ldr	r2, [r7, #0]
 801cd80:	6879      	ldr	r1, [r7, #4]
 801cd82:	68b8      	ldr	r0, [r7, #8]
 801cd84:	f000 fa7d 	bl	801d282 <wc_Sha3_512Hash>
 801cd88:	6178      	str	r0, [r7, #20]
#endif
            break;
 801cd8a:	e004      	b.n	801cd96 <wc_Hash+0x152>
        case WC_HASH_TYPE_SHAKE128:
        case WC_HASH_TYPE_SHAKE256:
    #endif
        case WC_HASH_TYPE_NONE:
        default:
            ret = BAD_FUNC_ARG;
 801cd8c:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801cd90:	617b      	str	r3, [r7, #20]
            break;
 801cd92:	e000      	b.n	801cd96 <wc_Hash+0x152>
            break;
 801cd94:	bf00      	nop
    }
    return ret;
 801cd96:	697b      	ldr	r3, [r7, #20]
}
 801cd98:	4618      	mov	r0, r3
 801cd9a:	3718      	adds	r7, #24
 801cd9c:	46bd      	mov	sp, r7
 801cd9e:	bd80      	pop	{r7, pc}

0801cda0 <wc_Md5Hash>:

#if !defined(WOLFSSL_TI_HASH)

#if !defined(NO_MD5)
    int wc_Md5Hash(const byte* data, word32 len, byte* hash)
    {
 801cda0:	b580      	push	{r7, lr}
 801cda2:	b088      	sub	sp, #32
 801cda4:	af00      	add	r7, sp, #0
 801cda6:	60f8      	str	r0, [r7, #12]
 801cda8:	60b9      	str	r1, [r7, #8]
 801cdaa:	607a      	str	r2, [r7, #4]
    #else
        wc_Md5  md5[1];
    #endif

    #ifdef WOLFSSL_SMALL_STACK
        md5 = (wc_Md5*)XMALLOC(sizeof(wc_Md5), NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801cdac:	2060      	movs	r0, #96	; 0x60
 801cdae:	f001 fa81 	bl	801e2b4 <wolfSSL_Malloc>
 801cdb2:	61b8      	str	r0, [r7, #24]
        if (md5 == NULL)
 801cdb4:	69bb      	ldr	r3, [r7, #24]
 801cdb6:	2b00      	cmp	r3, #0
 801cdb8:	d102      	bne.n	801cdc0 <wc_Md5Hash+0x20>
            return MEMORY_E;
 801cdba:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 801cdbe:	e020      	b.n	801ce02 <wc_Md5Hash+0x62>
    #endif

        if ((ret = wc_InitMd5(md5)) != 0) {
 801cdc0:	69b8      	ldr	r0, [r7, #24]
 801cdc2:	f001 fa57 	bl	801e274 <wc_InitMd5>
 801cdc6:	61f8      	str	r0, [r7, #28]
 801cdc8:	69fb      	ldr	r3, [r7, #28]
 801cdca:	2b00      	cmp	r3, #0
 801cdcc:	d110      	bne.n	801cdf0 <wc_Md5Hash+0x50>
            WOLFSSL_MSG("InitMd5 failed");
        }
        else {
            if ((ret = wc_Md5Update(md5, data, len)) != 0) {
 801cdce:	68ba      	ldr	r2, [r7, #8]
 801cdd0:	68f9      	ldr	r1, [r7, #12]
 801cdd2:	69b8      	ldr	r0, [r7, #24]
 801cdd4:	f001 f95b 	bl	801e08e <wc_Md5Update>
 801cdd8:	61f8      	str	r0, [r7, #28]
 801cdda:	69fb      	ldr	r3, [r7, #28]
 801cddc:	2b00      	cmp	r3, #0
 801cdde:	d104      	bne.n	801cdea <wc_Md5Hash+0x4a>
                WOLFSSL_MSG("Md5Update failed");
            }
            else if ((ret = wc_Md5Final(md5, hash)) != 0) {
 801cde0:	6879      	ldr	r1, [r7, #4]
 801cde2:	69b8      	ldr	r0, [r7, #24]
 801cde4:	f001 f9d9 	bl	801e19a <wc_Md5Final>
 801cde8:	61f8      	str	r0, [r7, #28]
                WOLFSSL_MSG("Md5Final failed");
            }
            wc_Md5Free(md5);
 801cdea:	69b8      	ldr	r0, [r7, #24]
 801cdec:	f001 fa57 	bl	801e29e <wc_Md5Free>
        }

    #ifdef WOLFSSL_SMALL_STACK
        XFREE(md5, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801cdf0:	69bb      	ldr	r3, [r7, #24]
 801cdf2:	617b      	str	r3, [r7, #20]
 801cdf4:	697b      	ldr	r3, [r7, #20]
 801cdf6:	2b00      	cmp	r3, #0
 801cdf8:	d002      	beq.n	801ce00 <wc_Md5Hash+0x60>
 801cdfa:	6978      	ldr	r0, [r7, #20]
 801cdfc:	f001 fa76 	bl	801e2ec <wolfSSL_Free>
    #endif

        return ret;
 801ce00:	69fb      	ldr	r3, [r7, #28]
    }
 801ce02:	4618      	mov	r0, r3
 801ce04:	3720      	adds	r7, #32
 801ce06:	46bd      	mov	sp, r7
 801ce08:	bd80      	pop	{r7, pc}

0801ce0a <wc_ShaHash>:
#endif /* !NO_MD5 */

#if !defined(NO_SHA)
    int wc_ShaHash(const byte* data, word32 len, byte* hash)
    {
 801ce0a:	b580      	push	{r7, lr}
 801ce0c:	b088      	sub	sp, #32
 801ce0e:	af00      	add	r7, sp, #0
 801ce10:	60f8      	str	r0, [r7, #12]
 801ce12:	60b9      	str	r1, [r7, #8]
 801ce14:	607a      	str	r2, [r7, #4]
        int ret = 0;
 801ce16:	2300      	movs	r3, #0
 801ce18:	61fb      	str	r3, [r7, #28]
    #ifdef WOLFSSL_SMALL_STACK
        wc_Sha* sha;
    #else
        wc_Sha sha[1];
    #endif
        int devId = INVALID_DEVID;
 801ce1a:	f06f 0301 	mvn.w	r3, #1
 801ce1e:	61bb      	str	r3, [r7, #24]

    #ifdef WOLFSSL_SMALL_STACK
        sha = (wc_Sha*)XMALLOC(sizeof(wc_Sha), NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801ce20:	2064      	movs	r0, #100	; 0x64
 801ce22:	f001 fa47 	bl	801e2b4 <wolfSSL_Malloc>
 801ce26:	6178      	str	r0, [r7, #20]
        if (sha == NULL)
 801ce28:	697b      	ldr	r3, [r7, #20]
 801ce2a:	2b00      	cmp	r3, #0
 801ce2c:	d102      	bne.n	801ce34 <wc_ShaHash+0x2a>
            return MEMORY_E;
 801ce2e:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 801ce32:	e022      	b.n	801ce7a <wc_ShaHash+0x70>
        /* only use devId if its not an empty hash */
        if (data != NULL && len > 0)
            devId = wc_CryptoCb_GetDevIdAtIndex(0);
    #endif

        if ((ret = wc_InitSha_ex(sha, NULL, devId)) != 0) {
 801ce34:	69ba      	ldr	r2, [r7, #24]
 801ce36:	2100      	movs	r1, #0
 801ce38:	6978      	ldr	r0, [r7, #20]
 801ce3a:	f002 fec9 	bl	801fbd0 <wc_InitSha_ex>
 801ce3e:	61f8      	str	r0, [r7, #28]
 801ce40:	69fb      	ldr	r3, [r7, #28]
 801ce42:	2b00      	cmp	r3, #0
 801ce44:	d110      	bne.n	801ce68 <wc_ShaHash+0x5e>
            WOLFSSL_MSG("InitSha failed");
        }
        else {
            if ((ret = wc_ShaUpdate(sha, data, len)) != 0) {
 801ce46:	68ba      	ldr	r2, [r7, #8]
 801ce48:	68f9      	ldr	r1, [r7, #12]
 801ce4a:	6978      	ldr	r0, [r7, #20]
 801ce4c:	f002 fedf 	bl	801fc0e <wc_ShaUpdate>
 801ce50:	61f8      	str	r0, [r7, #28]
 801ce52:	69fb      	ldr	r3, [r7, #28]
 801ce54:	2b00      	cmp	r3, #0
 801ce56:	d104      	bne.n	801ce62 <wc_ShaHash+0x58>
                WOLFSSL_MSG("ShaUpdate failed");
            }
            else if ((ret = wc_ShaFinal(sha, hash)) != 0) {
 801ce58:	6879      	ldr	r1, [r7, #4]
 801ce5a:	6978      	ldr	r0, [r7, #20]
 801ce5c:	f002 ff6b 	bl	801fd36 <wc_ShaFinal>
 801ce60:	61f8      	str	r0, [r7, #28]
                WOLFSSL_MSG("ShaFinal failed");
            }
            wc_ShaFree(sha);
 801ce62:	6978      	ldr	r0, [r7, #20]
 801ce64:	f002 fff6 	bl	801fe54 <wc_ShaFree>
        }

    #ifdef WOLFSSL_SMALL_STACK
        XFREE(sha, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801ce68:	697b      	ldr	r3, [r7, #20]
 801ce6a:	613b      	str	r3, [r7, #16]
 801ce6c:	693b      	ldr	r3, [r7, #16]
 801ce6e:	2b00      	cmp	r3, #0
 801ce70:	d002      	beq.n	801ce78 <wc_ShaHash+0x6e>
 801ce72:	6938      	ldr	r0, [r7, #16]
 801ce74:	f001 fa3a 	bl	801e2ec <wolfSSL_Free>
    #endif

        return ret;
 801ce78:	69fb      	ldr	r3, [r7, #28]
    }
 801ce7a:	4618      	mov	r0, r3
 801ce7c:	3720      	adds	r7, #32
 801ce7e:	46bd      	mov	sp, r7
 801ce80:	bd80      	pop	{r7, pc}

0801ce82 <wc_Sha224Hash>:
#endif /* !NO_SHA */

#if defined(WOLFSSL_SHA224)
    int wc_Sha224Hash(const byte* data, word32 len, byte* hash)
    {
 801ce82:	b580      	push	{r7, lr}
 801ce84:	b088      	sub	sp, #32
 801ce86:	af00      	add	r7, sp, #0
 801ce88:	60f8      	str	r0, [r7, #12]
 801ce8a:	60b9      	str	r1, [r7, #8]
 801ce8c:	607a      	str	r2, [r7, #4]
        int ret = 0;
 801ce8e:	2300      	movs	r3, #0
 801ce90:	61fb      	str	r3, [r7, #28]
    #else
        wc_Sha224 sha224[1];
    #endif

    #ifdef WOLFSSL_SMALL_STACK
        sha224 = (wc_Sha224*)XMALLOC(sizeof(wc_Sha224), NULL,
 801ce92:	2070      	movs	r0, #112	; 0x70
 801ce94:	f001 fa0e 	bl	801e2b4 <wolfSSL_Malloc>
 801ce98:	61b8      	str	r0, [r7, #24]
            DYNAMIC_TYPE_TMP_BUFFER);
        if (sha224 == NULL)
 801ce9a:	69bb      	ldr	r3, [r7, #24]
 801ce9c:	2b00      	cmp	r3, #0
 801ce9e:	d102      	bne.n	801cea6 <wc_Sha224Hash+0x24>
            return MEMORY_E;
 801cea0:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 801cea4:	e020      	b.n	801cee8 <wc_Sha224Hash+0x66>
    #endif

        if ((ret = wc_InitSha224(sha224)) != 0) {
 801cea6:	69b8      	ldr	r0, [r7, #24]
 801cea8:	f003 fe57 	bl	8020b5a <wc_InitSha224>
 801ceac:	61f8      	str	r0, [r7, #28]
 801ceae:	69fb      	ldr	r3, [r7, #28]
 801ceb0:	2b00      	cmp	r3, #0
 801ceb2:	d110      	bne.n	801ced6 <wc_Sha224Hash+0x54>
            WOLFSSL_MSG("InitSha224 failed");
        }
        else {
            if ((ret = wc_Sha224Update(sha224, data, len)) != 0) {
 801ceb4:	68ba      	ldr	r2, [r7, #8]
 801ceb6:	68f9      	ldr	r1, [r7, #12]
 801ceb8:	69b8      	ldr	r0, [r7, #24]
 801ceba:	f003 fe06 	bl	8020aca <wc_Sha224Update>
 801cebe:	61f8      	str	r0, [r7, #28]
 801cec0:	69fb      	ldr	r3, [r7, #28]
 801cec2:	2b00      	cmp	r3, #0
 801cec4:	d104      	bne.n	801ced0 <wc_Sha224Hash+0x4e>
                WOLFSSL_MSG("Sha224Update failed");
            }
            else if ((ret = wc_Sha224Final(sha224, hash)) != 0) {
 801cec6:	6879      	ldr	r1, [r7, #4]
 801cec8:	69b8      	ldr	r0, [r7, #24]
 801ceca:	f003 fe1b 	bl	8020b04 <wc_Sha224Final>
 801cece:	61f8      	str	r0, [r7, #28]
                WOLFSSL_MSG("Sha224Final failed");
            }
            wc_Sha224Free(sha224);
 801ced0:	69b8      	ldr	r0, [r7, #24]
 801ced2:	f003 fe51 	bl	8020b78 <wc_Sha224Free>
        }

    #ifdef WOLFSSL_SMALL_STACK
        XFREE(sha224, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801ced6:	69bb      	ldr	r3, [r7, #24]
 801ced8:	617b      	str	r3, [r7, #20]
 801ceda:	697b      	ldr	r3, [r7, #20]
 801cedc:	2b00      	cmp	r3, #0
 801cede:	d002      	beq.n	801cee6 <wc_Sha224Hash+0x64>
 801cee0:	6978      	ldr	r0, [r7, #20]
 801cee2:	f001 fa03 	bl	801e2ec <wolfSSL_Free>
    #endif

    return ret;
 801cee6:	69fb      	ldr	r3, [r7, #28]
}
 801cee8:	4618      	mov	r0, r3
 801ceea:	3720      	adds	r7, #32
 801ceec:	46bd      	mov	sp, r7
 801ceee:	bd80      	pop	{r7, pc}

0801cef0 <wc_Sha256Hash>:
#endif /* WOLFSSL_SHA224 */

#if !defined(NO_SHA256)
    int wc_Sha256Hash(const byte* data, word32 len, byte* hash)
    {
 801cef0:	b580      	push	{r7, lr}
 801cef2:	b088      	sub	sp, #32
 801cef4:	af00      	add	r7, sp, #0
 801cef6:	60f8      	str	r0, [r7, #12]
 801cef8:	60b9      	str	r1, [r7, #8]
 801cefa:	607a      	str	r2, [r7, #4]
        int ret = 0;
 801cefc:	2300      	movs	r3, #0
 801cefe:	61fb      	str	r3, [r7, #28]
    #ifdef WOLFSSL_SMALL_STACK
        wc_Sha256* sha256;
    #else
        wc_Sha256 sha256[1];
    #endif
        int devId = INVALID_DEVID;
 801cf00:	f06f 0301 	mvn.w	r3, #1
 801cf04:	61bb      	str	r3, [r7, #24]

    #ifdef WOLFSSL_SMALL_STACK
        sha256 = (wc_Sha256*)XMALLOC(sizeof(wc_Sha256), NULL,
 801cf06:	2070      	movs	r0, #112	; 0x70
 801cf08:	f001 f9d4 	bl	801e2b4 <wolfSSL_Malloc>
 801cf0c:	6178      	str	r0, [r7, #20]
            DYNAMIC_TYPE_TMP_BUFFER);
        if (sha256 == NULL)
 801cf0e:	697b      	ldr	r3, [r7, #20]
 801cf10:	2b00      	cmp	r3, #0
 801cf12:	d102      	bne.n	801cf1a <wc_Sha256Hash+0x2a>
            return MEMORY_E;
 801cf14:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 801cf18:	e022      	b.n	801cf60 <wc_Sha256Hash+0x70>
        /* only use devId if its not an empty hash */
        if (data != NULL && len > 0)
            devId = wc_CryptoCb_GetDevIdAtIndex(0);
    #endif

        if ((ret = wc_InitSha256_ex(sha256, NULL, devId)) != 0) {
 801cf1a:	69ba      	ldr	r2, [r7, #24]
 801cf1c:	2100      	movs	r1, #0
 801cf1e:	6978      	ldr	r0, [r7, #20]
 801cf20:	f003 f858 	bl	801ffd4 <wc_InitSha256_ex>
 801cf24:	61f8      	str	r0, [r7, #28]
 801cf26:	69fb      	ldr	r3, [r7, #28]
 801cf28:	2b00      	cmp	r3, #0
 801cf2a:	d110      	bne.n	801cf4e <wc_Sha256Hash+0x5e>
            WOLFSSL_MSG("InitSha256 failed");
        }
        else {
            if ((ret = wc_Sha256Update(sha256, data, len)) != 0) {
 801cf2c:	68ba      	ldr	r2, [r7, #8]
 801cf2e:	68f9      	ldr	r1, [r7, #12]
 801cf30:	6978      	ldr	r0, [r7, #20]
 801cf32:	f003 fca0 	bl	8020876 <wc_Sha256Update>
 801cf36:	61f8      	str	r0, [r7, #28]
 801cf38:	69fb      	ldr	r3, [r7, #28]
 801cf3a:	2b00      	cmp	r3, #0
 801cf3c:	d104      	bne.n	801cf48 <wc_Sha256Hash+0x58>
                WOLFSSL_MSG("Sha256Update failed");
            }
            else if ((ret = wc_Sha256Final(sha256, hash)) != 0) {
 801cf3e:	6879      	ldr	r1, [r7, #4]
 801cf40:	6978      	ldr	r0, [r7, #20]
 801cf42:	f003 fd34 	bl	80209ae <wc_Sha256Final>
 801cf46:	61f8      	str	r0, [r7, #28]
                WOLFSSL_MSG("Sha256Final failed");
            }
            wc_Sha256Free(sha256);
 801cf48:	6978      	ldr	r0, [r7, #20]
 801cf4a:	f003 fe20 	bl	8020b8e <wc_Sha256Free>
        }


    #ifdef WOLFSSL_SMALL_STACK
        XFREE(sha256, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801cf4e:	697b      	ldr	r3, [r7, #20]
 801cf50:	613b      	str	r3, [r7, #16]
 801cf52:	693b      	ldr	r3, [r7, #16]
 801cf54:	2b00      	cmp	r3, #0
 801cf56:	d002      	beq.n	801cf5e <wc_Sha256Hash+0x6e>
 801cf58:	6938      	ldr	r0, [r7, #16]
 801cf5a:	f001 f9c7 	bl	801e2ec <wolfSSL_Free>
    #endif

        return ret;
 801cf5e:	69fb      	ldr	r3, [r7, #28]
    }
 801cf60:	4618      	mov	r0, r3
 801cf62:	3720      	adds	r7, #32
 801cf64:	46bd      	mov	sp, r7
 801cf66:	bd80      	pop	{r7, pc}

0801cf68 <wc_Sha512Hash>:
#endif /* !defined(WOLFSSL_TI_HASH) */


#if defined(WOLFSSL_SHA512)
    int wc_Sha512Hash(const byte* data, word32 len, byte* hash)
    {
 801cf68:	b580      	push	{r7, lr}
 801cf6a:	b088      	sub	sp, #32
 801cf6c:	af00      	add	r7, sp, #0
 801cf6e:	60f8      	str	r0, [r7, #12]
 801cf70:	60b9      	str	r1, [r7, #8]
 801cf72:	607a      	str	r2, [r7, #4]
        int ret = 0;
 801cf74:	2300      	movs	r3, #0
 801cf76:	61fb      	str	r3, [r7, #28]
    #else
        wc_Sha512 sha512[1];
    #endif

    #ifdef WOLFSSL_SMALL_STACK
        sha512 = (wc_Sha512*)XMALLOC(sizeof(wc_Sha512), NULL,
 801cf78:	20e0      	movs	r0, #224	; 0xe0
 801cf7a:	f001 f99b 	bl	801e2b4 <wolfSSL_Malloc>
 801cf7e:	61b8      	str	r0, [r7, #24]
            DYNAMIC_TYPE_TMP_BUFFER);
        if (sha512 == NULL)
 801cf80:	69bb      	ldr	r3, [r7, #24]
 801cf82:	2b00      	cmp	r3, #0
 801cf84:	d102      	bne.n	801cf8c <wc_Sha512Hash+0x24>
            return MEMORY_E;
 801cf86:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 801cf8a:	e020      	b.n	801cfce <wc_Sha512Hash+0x66>
    #endif

        if ((ret = wc_InitSha512(sha512)) != 0) {
 801cf8c:	69b8      	ldr	r0, [r7, #24]
 801cf8e:	f00c fb4d 	bl	802962c <wc_InitSha512>
 801cf92:	61f8      	str	r0, [r7, #28]
 801cf94:	69fb      	ldr	r3, [r7, #28]
 801cf96:	2b00      	cmp	r3, #0
 801cf98:	d110      	bne.n	801cfbc <wc_Sha512Hash+0x54>
            WOLFSSL_MSG("InitSha512 failed");
        }
        else {
            if ((ret = wc_Sha512Update(sha512, data, len)) != 0) {
 801cf9a:	68ba      	ldr	r2, [r7, #8]
 801cf9c:	68f9      	ldr	r1, [r7, #12]
 801cf9e:	69b8      	ldr	r0, [r7, #24]
 801cfa0:	f00c fa47 	bl	8029432 <wc_Sha512Update>
 801cfa4:	61f8      	str	r0, [r7, #28]
 801cfa6:	69fb      	ldr	r3, [r7, #28]
 801cfa8:	2b00      	cmp	r3, #0
 801cfaa:	d104      	bne.n	801cfb6 <wc_Sha512Hash+0x4e>
                WOLFSSL_MSG("Sha512Update failed");
            }
            else if ((ret = wc_Sha512Final(sha512, hash)) != 0) {
 801cfac:	6879      	ldr	r1, [r7, #4]
 801cfae:	69b8      	ldr	r0, [r7, #24]
 801cfb0:	f00c fb2a 	bl	8029608 <wc_Sha512Final>
 801cfb4:	61f8      	str	r0, [r7, #28]
                WOLFSSL_MSG("Sha512Final failed");
            }
            wc_Sha512Free(sha512);
 801cfb6:	69b8      	ldr	r0, [r7, #24]
 801cfb8:	f00c fb47 	bl	802964a <wc_Sha512Free>
        }

    #ifdef WOLFSSL_SMALL_STACK
        XFREE(sha512, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801cfbc:	69bb      	ldr	r3, [r7, #24]
 801cfbe:	617b      	str	r3, [r7, #20]
 801cfc0:	697b      	ldr	r3, [r7, #20]
 801cfc2:	2b00      	cmp	r3, #0
 801cfc4:	d002      	beq.n	801cfcc <wc_Sha512Hash+0x64>
 801cfc6:	6978      	ldr	r0, [r7, #20]
 801cfc8:	f001 f990 	bl	801e2ec <wolfSSL_Free>
    #endif

        return ret;
 801cfcc:	69fb      	ldr	r3, [r7, #28]
    }
 801cfce:	4618      	mov	r0, r3
 801cfd0:	3720      	adds	r7, #32
 801cfd2:	46bd      	mov	sp, r7
 801cfd4:	bd80      	pop	{r7, pc}

0801cfd6 <wc_Sha512_224Hash>:
#if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
#ifndef WOLFSSL_NOSHA512_224
    int wc_Sha512_224Hash(const byte* data, word32 len, byte* hash)
    {
 801cfd6:	b580      	push	{r7, lr}
 801cfd8:	b088      	sub	sp, #32
 801cfda:	af00      	add	r7, sp, #0
 801cfdc:	60f8      	str	r0, [r7, #12]
 801cfde:	60b9      	str	r1, [r7, #8]
 801cfe0:	607a      	str	r2, [r7, #4]
        int ret = 0;
 801cfe2:	2300      	movs	r3, #0
 801cfe4:	61fb      	str	r3, [r7, #28]
    #else
        wc_Sha512 sha512[1];
    #endif

    #ifdef WOLFSSL_SMALL_STACK
        sha512 = (wc_Sha512*)XMALLOC(sizeof(wc_Sha512), NULL,
 801cfe6:	20e0      	movs	r0, #224	; 0xe0
 801cfe8:	f001 f964 	bl	801e2b4 <wolfSSL_Malloc>
 801cfec:	61b8      	str	r0, [r7, #24]
            DYNAMIC_TYPE_TMP_BUFFER);
        if (sha512 == NULL)
 801cfee:	69bb      	ldr	r3, [r7, #24]
 801cff0:	2b00      	cmp	r3, #0
 801cff2:	d102      	bne.n	801cffa <wc_Sha512_224Hash+0x24>
            return MEMORY_E;
 801cff4:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 801cff8:	e020      	b.n	801d03c <wc_Sha512_224Hash+0x66>
    #endif

        if ((ret = wc_InitSha512_224(sha512)) != 0) {
 801cffa:	69b8      	ldr	r0, [r7, #24]
 801cffc:	f00c fc1d 	bl	802983a <wc_InitSha512_224>
 801d000:	61f8      	str	r0, [r7, #28]
 801d002:	69fb      	ldr	r3, [r7, #28]
 801d004:	2b00      	cmp	r3, #0
 801d006:	d110      	bne.n	801d02a <wc_Sha512_224Hash+0x54>
            WOLFSSL_MSG("wc_InitSha512_224 failed");
        }
        else {
            if ((ret = wc_Sha512_224Update(sha512, data, len)) != 0) {
 801d008:	68ba      	ldr	r2, [r7, #8]
 801d00a:	68f9      	ldr	r1, [r7, #12]
 801d00c:	69b8      	ldr	r0, [r7, #24]
 801d00e:	f00c fc23 	bl	8029858 <wc_Sha512_224Update>
 801d012:	61f8      	str	r0, [r7, #28]
 801d014:	69fb      	ldr	r3, [r7, #28]
 801d016:	2b00      	cmp	r3, #0
 801d018:	d104      	bne.n	801d024 <wc_Sha512_224Hash+0x4e>
                WOLFSSL_MSG("wc_Sha512_224_Update failed");
            }
            else if ((ret = wc_Sha512_224Final(sha512, hash)) != 0) {
 801d01a:	6879      	ldr	r1, [r7, #4]
 801d01c:	69b8      	ldr	r0, [r7, #24]
 801d01e:	f00c fc2b 	bl	8029878 <wc_Sha512_224Final>
 801d022:	61f8      	str	r0, [r7, #28]
                WOLFSSL_MSG("wc_Sha512_224_Final failed");
            }
            wc_Sha512_224Free(sha512);
 801d024:	69b8      	ldr	r0, [r7, #24]
 801d026:	f00c fc39 	bl	802989c <wc_Sha512_224Free>
        }

    #ifdef WOLFSSL_SMALL_STACK
        XFREE(sha512, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801d02a:	69bb      	ldr	r3, [r7, #24]
 801d02c:	617b      	str	r3, [r7, #20]
 801d02e:	697b      	ldr	r3, [r7, #20]
 801d030:	2b00      	cmp	r3, #0
 801d032:	d002      	beq.n	801d03a <wc_Sha512_224Hash+0x64>
 801d034:	6978      	ldr	r0, [r7, #20]
 801d036:	f001 f959 	bl	801e2ec <wolfSSL_Free>
    #endif

        return ret;
 801d03a:	69fb      	ldr	r3, [r7, #28]
    }
 801d03c:	4618      	mov	r0, r3
 801d03e:	3720      	adds	r7, #32
 801d040:	46bd      	mov	sp, r7
 801d042:	bd80      	pop	{r7, pc}

0801d044 <wc_Sha512_256Hash>:
#endif /* !HAVE_FIPS && !HAVE_SELFTEST */

#if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
#ifndef WOLFSSL_NOSHA512_256
    int wc_Sha512_256Hash(const byte* data, word32 len, byte* hash)
    {
 801d044:	b580      	push	{r7, lr}
 801d046:	b088      	sub	sp, #32
 801d048:	af00      	add	r7, sp, #0
 801d04a:	60f8      	str	r0, [r7, #12]
 801d04c:	60b9      	str	r1, [r7, #8]
 801d04e:	607a      	str	r2, [r7, #4]
        int ret = 0;
 801d050:	2300      	movs	r3, #0
 801d052:	61fb      	str	r3, [r7, #28]
    #else
        wc_Sha512 sha512[1];
    #endif

    #ifdef WOLFSSL_SMALL_STACK
        sha512 = (wc_Sha512*)XMALLOC(sizeof(wc_Sha512), NULL,
 801d054:	20e0      	movs	r0, #224	; 0xe0
 801d056:	f001 f92d 	bl	801e2b4 <wolfSSL_Malloc>
 801d05a:	61b8      	str	r0, [r7, #24]
            DYNAMIC_TYPE_TMP_BUFFER);
        if (sha512 == NULL)
 801d05c:	69bb      	ldr	r3, [r7, #24]
 801d05e:	2b00      	cmp	r3, #0
 801d060:	d102      	bne.n	801d068 <wc_Sha512_256Hash+0x24>
            return MEMORY_E;
 801d062:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 801d066:	e020      	b.n	801d0aa <wc_Sha512_256Hash+0x66>
    #endif

        if ((ret = wc_InitSha512_256(sha512)) != 0) {
 801d068:	69b8      	ldr	r0, [r7, #24]
 801d06a:	f00c fc22 	bl	80298b2 <wc_InitSha512_256>
 801d06e:	61f8      	str	r0, [r7, #28]
 801d070:	69fb      	ldr	r3, [r7, #28]
 801d072:	2b00      	cmp	r3, #0
 801d074:	d110      	bne.n	801d098 <wc_Sha512_256Hash+0x54>
            WOLFSSL_MSG("wc_InitSha512_256 failed");
        }
        else {
            if ((ret = wc_Sha512_256Update(sha512, data, len)) != 0) {
 801d076:	68ba      	ldr	r2, [r7, #8]
 801d078:	68f9      	ldr	r1, [r7, #12]
 801d07a:	69b8      	ldr	r0, [r7, #24]
 801d07c:	f00c fc28 	bl	80298d0 <wc_Sha512_256Update>
 801d080:	61f8      	str	r0, [r7, #28]
 801d082:	69fb      	ldr	r3, [r7, #28]
 801d084:	2b00      	cmp	r3, #0
 801d086:	d104      	bne.n	801d092 <wc_Sha512_256Hash+0x4e>
                WOLFSSL_MSG("wc_Sha512_256_Update failed");
            }
            else if ((ret = wc_Sha512_256Final(sha512, hash)) != 0) {
 801d088:	6879      	ldr	r1, [r7, #4]
 801d08a:	69b8      	ldr	r0, [r7, #24]
 801d08c:	f00c fc30 	bl	80298f0 <wc_Sha512_256Final>
 801d090:	61f8      	str	r0, [r7, #28]
                WOLFSSL_MSG("wc_Sha512_256_Final failed");
            }
            wc_Sha512_256Free(sha512);
 801d092:	69b8      	ldr	r0, [r7, #24]
 801d094:	f00c fc3e 	bl	8029914 <wc_Sha512_256Free>
        }

    #ifdef WOLFSSL_SMALL_STACK
        XFREE(sha512, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801d098:	69bb      	ldr	r3, [r7, #24]
 801d09a:	617b      	str	r3, [r7, #20]
 801d09c:	697b      	ldr	r3, [r7, #20]
 801d09e:	2b00      	cmp	r3, #0
 801d0a0:	d002      	beq.n	801d0a8 <wc_Sha512_256Hash+0x64>
 801d0a2:	6978      	ldr	r0, [r7, #20]
 801d0a4:	f001 f922 	bl	801e2ec <wolfSSL_Free>
    #endif

        return ret;
 801d0a8:	69fb      	ldr	r3, [r7, #28]
    }
 801d0aa:	4618      	mov	r0, r3
 801d0ac:	3720      	adds	r7, #32
 801d0ae:	46bd      	mov	sp, r7
 801d0b0:	bd80      	pop	{r7, pc}

0801d0b2 <wc_Sha384Hash>:

#endif /* WOLFSSL_SHA512 */

#if defined(WOLFSSL_SHA384)
    int wc_Sha384Hash(const byte* data, word32 len, byte* hash)
    {
 801d0b2:	b580      	push	{r7, lr}
 801d0b4:	b088      	sub	sp, #32
 801d0b6:	af00      	add	r7, sp, #0
 801d0b8:	60f8      	str	r0, [r7, #12]
 801d0ba:	60b9      	str	r1, [r7, #8]
 801d0bc:	607a      	str	r2, [r7, #4]
        int ret = 0;
 801d0be:	2300      	movs	r3, #0
 801d0c0:	61fb      	str	r3, [r7, #28]
    #else
        wc_Sha384 sha384[1];
    #endif

    #ifdef WOLFSSL_SMALL_STACK
        sha384 = (wc_Sha384*)XMALLOC(sizeof(wc_Sha384), NULL,
 801d0c2:	20e0      	movs	r0, #224	; 0xe0
 801d0c4:	f001 f8f6 	bl	801e2b4 <wolfSSL_Malloc>
 801d0c8:	61b8      	str	r0, [r7, #24]
            DYNAMIC_TYPE_TMP_BUFFER);
        if (sha384 == NULL)
 801d0ca:	69bb      	ldr	r3, [r7, #24]
 801d0cc:	2b00      	cmp	r3, #0
 801d0ce:	d102      	bne.n	801d0d6 <wc_Sha384Hash+0x24>
            return MEMORY_E;
 801d0d0:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 801d0d4:	e020      	b.n	801d118 <wc_Sha384Hash+0x66>
    #endif

        if ((ret = wc_InitSha384(sha384)) != 0) {
 801d0d6:	69b8      	ldr	r0, [r7, #24]
 801d0d8:	f00c fb95 	bl	8029806 <wc_InitSha384>
 801d0dc:	61f8      	str	r0, [r7, #28]
 801d0de:	69fb      	ldr	r3, [r7, #28]
 801d0e0:	2b00      	cmp	r3, #0
 801d0e2:	d110      	bne.n	801d106 <wc_Sha384Hash+0x54>
            WOLFSSL_MSG("InitSha384 failed");
        }
        else {
            if ((ret = wc_Sha384Update(sha384, data, len)) != 0) {
 801d0e4:	68ba      	ldr	r2, [r7, #8]
 801d0e6:	68f9      	ldr	r1, [r7, #12]
 801d0e8:	69b8      	ldr	r0, [r7, #24]
 801d0ea:	f00c fb2d 	bl	8029748 <wc_Sha384Update>
 801d0ee:	61f8      	str	r0, [r7, #28]
 801d0f0:	69fb      	ldr	r3, [r7, #28]
 801d0f2:	2b00      	cmp	r3, #0
 801d0f4:	d104      	bne.n	801d100 <wc_Sha384Hash+0x4e>
                WOLFSSL_MSG("Sha384Update failed");
            }
            else if ((ret = wc_Sha384Final(sha384, hash)) != 0) {
 801d0f6:	6879      	ldr	r1, [r7, #4]
 801d0f8:	69b8      	ldr	r0, [r7, #24]
 801d0fa:	f00c fb41 	bl	8029780 <wc_Sha384Final>
 801d0fe:	61f8      	str	r0, [r7, #28]
                WOLFSSL_MSG("Sha384Final failed");
            }
            wc_Sha384Free(sha384);
 801d100:	69b8      	ldr	r0, [r7, #24]
 801d102:	f00c fb8f 	bl	8029824 <wc_Sha384Free>
        }

    #ifdef WOLFSSL_SMALL_STACK
        XFREE(sha384, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801d106:	69bb      	ldr	r3, [r7, #24]
 801d108:	617b      	str	r3, [r7, #20]
 801d10a:	697b      	ldr	r3, [r7, #20]
 801d10c:	2b00      	cmp	r3, #0
 801d10e:	d002      	beq.n	801d116 <wc_Sha384Hash+0x64>
 801d110:	6978      	ldr	r0, [r7, #20]
 801d112:	f001 f8eb 	bl	801e2ec <wolfSSL_Free>
    #endif

        return ret;
 801d116:	69fb      	ldr	r3, [r7, #28]
    }
 801d118:	4618      	mov	r0, r3
 801d11a:	3720      	adds	r7, #32
 801d11c:	46bd      	mov	sp, r7
 801d11e:	bd80      	pop	{r7, pc}

0801d120 <wc_Sha3_224Hash>:
#endif /* WOLFSSL_SHA384 */

#if defined(WOLFSSL_SHA3)
#if !defined(WOLFSSL_NOSHA3_224)
    int wc_Sha3_224Hash(const byte* data, word32 len, byte* hash)
    {
 801d120:	b580      	push	{r7, lr}
 801d122:	b088      	sub	sp, #32
 801d124:	af00      	add	r7, sp, #0
 801d126:	60f8      	str	r0, [r7, #12]
 801d128:	60b9      	str	r1, [r7, #8]
 801d12a:	607a      	str	r2, [r7, #4]
        int ret = 0;
 801d12c:	2300      	movs	r3, #0
 801d12e:	61fb      	str	r3, [r7, #28]
    #else
        wc_Sha3 sha3[1];
    #endif

    #ifdef WOLFSSL_SMALL_STACK
        sha3 = (wc_Sha3*)XMALLOC(sizeof(wc_Sha3), NULL,
 801d130:	f44f 70cc 	mov.w	r0, #408	; 0x198
 801d134:	f001 f8be 	bl	801e2b4 <wolfSSL_Malloc>
 801d138:	61b8      	str	r0, [r7, #24]
            DYNAMIC_TYPE_TMP_BUFFER);
        if (sha3 == NULL)
 801d13a:	69bb      	ldr	r3, [r7, #24]
 801d13c:	2b00      	cmp	r3, #0
 801d13e:	d102      	bne.n	801d146 <wc_Sha3_224Hash+0x26>
            return MEMORY_E;
 801d140:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 801d144:	e023      	b.n	801d18e <wc_Sha3_224Hash+0x6e>
    #endif

        if ((ret = wc_InitSha3_224(sha3, NULL, INVALID_DEVID)) != 0) {
 801d146:	f06f 0201 	mvn.w	r2, #1
 801d14a:	2100      	movs	r1, #0
 801d14c:	69b8      	ldr	r0, [r7, #24]
 801d14e:	f007 f9e9 	bl	8024524 <wc_InitSha3_224>
 801d152:	61f8      	str	r0, [r7, #28]
 801d154:	69fb      	ldr	r3, [r7, #28]
 801d156:	2b00      	cmp	r3, #0
 801d158:	d110      	bne.n	801d17c <wc_Sha3_224Hash+0x5c>
            WOLFSSL_MSG("InitSha3_224 failed");
        }
        else {
            if ((ret = wc_Sha3_224_Update(sha3, data, len)) != 0) {
 801d15a:	68ba      	ldr	r2, [r7, #8]
 801d15c:	68f9      	ldr	r1, [r7, #12]
 801d15e:	69b8      	ldr	r0, [r7, #24]
 801d160:	f007 f9f0 	bl	8024544 <wc_Sha3_224_Update>
 801d164:	61f8      	str	r0, [r7, #28]
 801d166:	69fb      	ldr	r3, [r7, #28]
 801d168:	2b00      	cmp	r3, #0
 801d16a:	d104      	bne.n	801d176 <wc_Sha3_224Hash+0x56>
                WOLFSSL_MSG("Sha3_224_Update failed");
            }
            else if ((ret = wc_Sha3_224_Final(sha3, hash)) != 0) {
 801d16c:	6879      	ldr	r1, [r7, #4]
 801d16e:	69b8      	ldr	r0, [r7, #24]
 801d170:	f007 f9f9 	bl	8024566 <wc_Sha3_224_Final>
 801d174:	61f8      	str	r0, [r7, #28]
                WOLFSSL_MSG("Sha3_224_Final failed");
            }
            wc_Sha3_224_Free(sha3);
 801d176:	69b8      	ldr	r0, [r7, #24]
 801d178:	f007 fa05 	bl	8024586 <wc_Sha3_224_Free>
        }

    #ifdef WOLFSSL_SMALL_STACK
        XFREE(sha3, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801d17c:	69bb      	ldr	r3, [r7, #24]
 801d17e:	617b      	str	r3, [r7, #20]
 801d180:	697b      	ldr	r3, [r7, #20]
 801d182:	2b00      	cmp	r3, #0
 801d184:	d002      	beq.n	801d18c <wc_Sha3_224Hash+0x6c>
 801d186:	6978      	ldr	r0, [r7, #20]
 801d188:	f001 f8b0 	bl	801e2ec <wolfSSL_Free>
    #endif

        return ret;
 801d18c:	69fb      	ldr	r3, [r7, #28]
    }
 801d18e:	4618      	mov	r0, r3
 801d190:	3720      	adds	r7, #32
 801d192:	46bd      	mov	sp, r7
 801d194:	bd80      	pop	{r7, pc}

0801d196 <wc_Sha3_256Hash>:
#endif /* !WOLFSSL_NOSHA3_224 */

#if !defined(WOLFSSL_NOSHA3_256)
    int wc_Sha3_256Hash(const byte* data, word32 len, byte* hash)
    {
 801d196:	b580      	push	{r7, lr}
 801d198:	b088      	sub	sp, #32
 801d19a:	af00      	add	r7, sp, #0
 801d19c:	60f8      	str	r0, [r7, #12]
 801d19e:	60b9      	str	r1, [r7, #8]
 801d1a0:	607a      	str	r2, [r7, #4]
        int ret = 0;
 801d1a2:	2300      	movs	r3, #0
 801d1a4:	61fb      	str	r3, [r7, #28]
    #else
        wc_Sha3 sha3[1];
    #endif

    #ifdef WOLFSSL_SMALL_STACK
        sha3 = (wc_Sha3*)XMALLOC(sizeof(wc_Sha3), NULL,
 801d1a6:	f44f 70cc 	mov.w	r0, #408	; 0x198
 801d1aa:	f001 f883 	bl	801e2b4 <wolfSSL_Malloc>
 801d1ae:	61b8      	str	r0, [r7, #24]
            DYNAMIC_TYPE_TMP_BUFFER);
        if (sha3 == NULL)
 801d1b0:	69bb      	ldr	r3, [r7, #24]
 801d1b2:	2b00      	cmp	r3, #0
 801d1b4:	d102      	bne.n	801d1bc <wc_Sha3_256Hash+0x26>
            return MEMORY_E;
 801d1b6:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 801d1ba:	e023      	b.n	801d204 <wc_Sha3_256Hash+0x6e>
    #endif

        if ((ret = wc_InitSha3_256(sha3, NULL, INVALID_DEVID)) != 0) {
 801d1bc:	f06f 0201 	mvn.w	r2, #1
 801d1c0:	2100      	movs	r1, #0
 801d1c2:	69b8      	ldr	r0, [r7, #24]
 801d1c4:	f007 f9ea 	bl	802459c <wc_InitSha3_256>
 801d1c8:	61f8      	str	r0, [r7, #28]
 801d1ca:	69fb      	ldr	r3, [r7, #28]
 801d1cc:	2b00      	cmp	r3, #0
 801d1ce:	d110      	bne.n	801d1f2 <wc_Sha3_256Hash+0x5c>
            WOLFSSL_MSG("InitSha3_256 failed");
        }
        else {
            if ((ret = wc_Sha3_256_Update(sha3, data, len)) != 0) {
 801d1d0:	68ba      	ldr	r2, [r7, #8]
 801d1d2:	68f9      	ldr	r1, [r7, #12]
 801d1d4:	69b8      	ldr	r0, [r7, #24]
 801d1d6:	f007 f9f1 	bl	80245bc <wc_Sha3_256_Update>
 801d1da:	61f8      	str	r0, [r7, #28]
 801d1dc:	69fb      	ldr	r3, [r7, #28]
 801d1de:	2b00      	cmp	r3, #0
 801d1e0:	d104      	bne.n	801d1ec <wc_Sha3_256Hash+0x56>
                WOLFSSL_MSG("Sha3_256_Update failed");
            }
            else if ((ret = wc_Sha3_256_Final(sha3, hash)) != 0) {
 801d1e2:	6879      	ldr	r1, [r7, #4]
 801d1e4:	69b8      	ldr	r0, [r7, #24]
 801d1e6:	f007 f9fa 	bl	80245de <wc_Sha3_256_Final>
 801d1ea:	61f8      	str	r0, [r7, #28]
                WOLFSSL_MSG("Sha3_256_Final failed");
            }
            wc_Sha3_256_Free(sha3);
 801d1ec:	69b8      	ldr	r0, [r7, #24]
 801d1ee:	f007 fa06 	bl	80245fe <wc_Sha3_256_Free>
        }

    #ifdef WOLFSSL_SMALL_STACK
        XFREE(sha3, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801d1f2:	69bb      	ldr	r3, [r7, #24]
 801d1f4:	617b      	str	r3, [r7, #20]
 801d1f6:	697b      	ldr	r3, [r7, #20]
 801d1f8:	2b00      	cmp	r3, #0
 801d1fa:	d002      	beq.n	801d202 <wc_Sha3_256Hash+0x6c>
 801d1fc:	6978      	ldr	r0, [r7, #20]
 801d1fe:	f001 f875 	bl	801e2ec <wolfSSL_Free>
    #endif

        return ret;
 801d202:	69fb      	ldr	r3, [r7, #28]
    }
 801d204:	4618      	mov	r0, r3
 801d206:	3720      	adds	r7, #32
 801d208:	46bd      	mov	sp, r7
 801d20a:	bd80      	pop	{r7, pc}

0801d20c <wc_Sha3_384Hash>:
#endif /* !WOLFSSL_NOSHA3_256 */

#if !defined(WOLFSSL_NOSHA3_384)
    int wc_Sha3_384Hash(const byte* data, word32 len, byte* hash)
    {
 801d20c:	b580      	push	{r7, lr}
 801d20e:	b088      	sub	sp, #32
 801d210:	af00      	add	r7, sp, #0
 801d212:	60f8      	str	r0, [r7, #12]
 801d214:	60b9      	str	r1, [r7, #8]
 801d216:	607a      	str	r2, [r7, #4]
        int ret = 0;
 801d218:	2300      	movs	r3, #0
 801d21a:	61fb      	str	r3, [r7, #28]
    #else
        wc_Sha3 sha3[1];
    #endif

    #ifdef WOLFSSL_SMALL_STACK
        sha3 = (wc_Sha3*)XMALLOC(sizeof(wc_Sha3), NULL,
 801d21c:	f44f 70cc 	mov.w	r0, #408	; 0x198
 801d220:	f001 f848 	bl	801e2b4 <wolfSSL_Malloc>
 801d224:	61b8      	str	r0, [r7, #24]
            DYNAMIC_TYPE_TMP_BUFFER);
        if (sha3 == NULL)
 801d226:	69bb      	ldr	r3, [r7, #24]
 801d228:	2b00      	cmp	r3, #0
 801d22a:	d102      	bne.n	801d232 <wc_Sha3_384Hash+0x26>
            return MEMORY_E;
 801d22c:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 801d230:	e023      	b.n	801d27a <wc_Sha3_384Hash+0x6e>
    #endif

        if ((ret = wc_InitSha3_384(sha3, NULL, INVALID_DEVID)) != 0) {
 801d232:	f06f 0201 	mvn.w	r2, #1
 801d236:	2100      	movs	r1, #0
 801d238:	69b8      	ldr	r0, [r7, #24]
 801d23a:	f007 f9eb 	bl	8024614 <wc_InitSha3_384>
 801d23e:	61f8      	str	r0, [r7, #28]
 801d240:	69fb      	ldr	r3, [r7, #28]
 801d242:	2b00      	cmp	r3, #0
 801d244:	d110      	bne.n	801d268 <wc_Sha3_384Hash+0x5c>
            WOLFSSL_MSG("InitSha3_384 failed");
        }
        else {
            if ((ret = wc_Sha3_384_Update(sha3, data, len)) != 0) {
 801d246:	68ba      	ldr	r2, [r7, #8]
 801d248:	68f9      	ldr	r1, [r7, #12]
 801d24a:	69b8      	ldr	r0, [r7, #24]
 801d24c:	f007 f9f2 	bl	8024634 <wc_Sha3_384_Update>
 801d250:	61f8      	str	r0, [r7, #28]
 801d252:	69fb      	ldr	r3, [r7, #28]
 801d254:	2b00      	cmp	r3, #0
 801d256:	d104      	bne.n	801d262 <wc_Sha3_384Hash+0x56>
                WOLFSSL_MSG("Sha3_384_Update failed");
            }
            else if ((ret = wc_Sha3_384_Final(sha3, hash)) != 0) {
 801d258:	6879      	ldr	r1, [r7, #4]
 801d25a:	69b8      	ldr	r0, [r7, #24]
 801d25c:	f007 f9fb 	bl	8024656 <wc_Sha3_384_Final>
 801d260:	61f8      	str	r0, [r7, #28]
                WOLFSSL_MSG("Sha3_384_Final failed");
            }
            wc_Sha3_384_Free(sha3);
 801d262:	69b8      	ldr	r0, [r7, #24]
 801d264:	f007 fa07 	bl	8024676 <wc_Sha3_384_Free>
        }

    #ifdef WOLFSSL_SMALL_STACK
        XFREE(sha3, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801d268:	69bb      	ldr	r3, [r7, #24]
 801d26a:	617b      	str	r3, [r7, #20]
 801d26c:	697b      	ldr	r3, [r7, #20]
 801d26e:	2b00      	cmp	r3, #0
 801d270:	d002      	beq.n	801d278 <wc_Sha3_384Hash+0x6c>
 801d272:	6978      	ldr	r0, [r7, #20]
 801d274:	f001 f83a 	bl	801e2ec <wolfSSL_Free>
    #endif

        return ret;
 801d278:	69fb      	ldr	r3, [r7, #28]
    }
 801d27a:	4618      	mov	r0, r3
 801d27c:	3720      	adds	r7, #32
 801d27e:	46bd      	mov	sp, r7
 801d280:	bd80      	pop	{r7, pc}

0801d282 <wc_Sha3_512Hash>:
#endif /* !WOLFSSL_NOSHA3_384 */

#if !defined(WOLFSSL_NOSHA3_512)
    int wc_Sha3_512Hash(const byte* data, word32 len, byte* hash)
    {
 801d282:	b580      	push	{r7, lr}
 801d284:	b088      	sub	sp, #32
 801d286:	af00      	add	r7, sp, #0
 801d288:	60f8      	str	r0, [r7, #12]
 801d28a:	60b9      	str	r1, [r7, #8]
 801d28c:	607a      	str	r2, [r7, #4]
        int ret = 0;
 801d28e:	2300      	movs	r3, #0
 801d290:	61fb      	str	r3, [r7, #28]
    #else
        wc_Sha3 sha3[1];
    #endif

    #ifdef WOLFSSL_SMALL_STACK
        sha3 = (wc_Sha3*)XMALLOC(sizeof(wc_Sha3), NULL,
 801d292:	f44f 70cc 	mov.w	r0, #408	; 0x198
 801d296:	f001 f80d 	bl	801e2b4 <wolfSSL_Malloc>
 801d29a:	61b8      	str	r0, [r7, #24]
            DYNAMIC_TYPE_TMP_BUFFER);
        if (sha3 == NULL)
 801d29c:	69bb      	ldr	r3, [r7, #24]
 801d29e:	2b00      	cmp	r3, #0
 801d2a0:	d102      	bne.n	801d2a8 <wc_Sha3_512Hash+0x26>
            return MEMORY_E;
 801d2a2:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 801d2a6:	e023      	b.n	801d2f0 <wc_Sha3_512Hash+0x6e>
    #endif

        if ((ret = wc_InitSha3_512(sha3, NULL, INVALID_DEVID)) != 0) {
 801d2a8:	f06f 0201 	mvn.w	r2, #1
 801d2ac:	2100      	movs	r1, #0
 801d2ae:	69b8      	ldr	r0, [r7, #24]
 801d2b0:	f007 f9ec 	bl	802468c <wc_InitSha3_512>
 801d2b4:	61f8      	str	r0, [r7, #28]
 801d2b6:	69fb      	ldr	r3, [r7, #28]
 801d2b8:	2b00      	cmp	r3, #0
 801d2ba:	d110      	bne.n	801d2de <wc_Sha3_512Hash+0x5c>
            WOLFSSL_MSG("InitSha3_512 failed");
        }
        else {
            if ((ret = wc_Sha3_512_Update(sha3, data, len)) != 0) {
 801d2bc:	68ba      	ldr	r2, [r7, #8]
 801d2be:	68f9      	ldr	r1, [r7, #12]
 801d2c0:	69b8      	ldr	r0, [r7, #24]
 801d2c2:	f007 f9f3 	bl	80246ac <wc_Sha3_512_Update>
 801d2c6:	61f8      	str	r0, [r7, #28]
 801d2c8:	69fb      	ldr	r3, [r7, #28]
 801d2ca:	2b00      	cmp	r3, #0
 801d2cc:	d104      	bne.n	801d2d8 <wc_Sha3_512Hash+0x56>
                WOLFSSL_MSG("Sha3_512_Update failed");
            }
            else if ((ret = wc_Sha3_512_Final(sha3, hash)) != 0) {
 801d2ce:	6879      	ldr	r1, [r7, #4]
 801d2d0:	69b8      	ldr	r0, [r7, #24]
 801d2d2:	f007 f9fc 	bl	80246ce <wc_Sha3_512_Final>
 801d2d6:	61f8      	str	r0, [r7, #28]
                WOLFSSL_MSG("Sha3_512_Final failed");
            }
            wc_Sha3_512_Free(sha3);
 801d2d8:	69b8      	ldr	r0, [r7, #24]
 801d2da:	f007 fa08 	bl	80246ee <wc_Sha3_512_Free>
        }

    #ifdef WOLFSSL_SMALL_STACK
        XFREE(sha3, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 801d2de:	69bb      	ldr	r3, [r7, #24]
 801d2e0:	617b      	str	r3, [r7, #20]
 801d2e2:	697b      	ldr	r3, [r7, #20]
 801d2e4:	2b00      	cmp	r3, #0
 801d2e6:	d002      	beq.n	801d2ee <wc_Sha3_512Hash+0x6c>
 801d2e8:	6978      	ldr	r0, [r7, #20]
 801d2ea:	f000 ffff 	bl	801e2ec <wolfSSL_Free>
    #endif

        return ret;
 801d2ee:	69fb      	ldr	r3, [r7, #28]
    }
 801d2f0:	4618      	mov	r0, r3
 801d2f2:	3720      	adds	r7, #32
 801d2f4:	46bd      	mov	sp, r7
 801d2f6:	bd80      	pop	{r7, pc}

0801d2f8 <rotlFixed>:

#else /* generic */
/* This routine performs a left circular arithmetic shift of <x> by <y> value. */

    WC_STATIC WC_INLINE word32 rotlFixed(word32 x, word32 y)
    {
 801d2f8:	b480      	push	{r7}
 801d2fa:	b083      	sub	sp, #12
 801d2fc:	af00      	add	r7, sp, #0
 801d2fe:	6078      	str	r0, [r7, #4]
 801d300:	6039      	str	r1, [r7, #0]
        return (x << y) | (x >> (sizeof(y) * 8 - y));
 801d302:	687a      	ldr	r2, [r7, #4]
 801d304:	683b      	ldr	r3, [r7, #0]
 801d306:	f1c3 0320 	rsb	r3, r3, #32
 801d30a:	fa62 f303 	ror.w	r3, r2, r3
    }
 801d30e:	4618      	mov	r0, r3
 801d310:	370c      	adds	r7, #12
 801d312:	46bd      	mov	sp, r7
 801d314:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d318:	4770      	bx	lr

0801d31a <min>:
    #if defined(HAVE_FIPS) && !defined(min) /* so ifdef check passes */
        #define min min
    #endif
    /* returns the smaller of a and b */
    WC_STATIC WC_INLINE word32 min(word32 a, word32 b)
    {
 801d31a:	b480      	push	{r7}
 801d31c:	b083      	sub	sp, #12
 801d31e:	af00      	add	r7, sp, #0
 801d320:	6078      	str	r0, [r7, #4]
 801d322:	6039      	str	r1, [r7, #0]
        return a > b ? b : a;
 801d324:	687a      	ldr	r2, [r7, #4]
 801d326:	683b      	ldr	r3, [r7, #0]
 801d328:	4293      	cmp	r3, r2
 801d32a:	bf28      	it	cs
 801d32c:	4613      	movcs	r3, r2
    }
 801d32e:	4618      	mov	r0, r3
 801d330:	370c      	adds	r7, #12
 801d332:	46bd      	mov	sp, r7
 801d334:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d338:	4770      	bx	lr
	...

0801d33c <Transform>:

#define MD5STEP(f, w, x, y, z, data, s) \
    (w) = (rotlFixed((w) + f(x, y, z) + (data), s) + (x))

static int Transform(wc_Md5* md5, const byte* data)
{
 801d33c:	b580      	push	{r7, lr}
 801d33e:	b088      	sub	sp, #32
 801d340:	af00      	add	r7, sp, #0
 801d342:	6078      	str	r0, [r7, #4]
 801d344:	6039      	str	r1, [r7, #0]
    const word32* buffer = (const word32*)data;
 801d346:	683b      	ldr	r3, [r7, #0]
 801d348:	61fb      	str	r3, [r7, #28]
    /* Copy context->state[] to working vars  */
    word32 a = md5->digest[0];
 801d34a:	687b      	ldr	r3, [r7, #4]
 801d34c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d34e:	61bb      	str	r3, [r7, #24]
    word32 b = md5->digest[1];
 801d350:	687b      	ldr	r3, [r7, #4]
 801d352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d354:	617b      	str	r3, [r7, #20]
    word32 c = md5->digest[2];
 801d356:	687b      	ldr	r3, [r7, #4]
 801d358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d35a:	613b      	str	r3, [r7, #16]
    word32 d = md5->digest[3];
 801d35c:	687b      	ldr	r3, [r7, #4]
 801d35e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d360:	60fb      	str	r3, [r7, #12]

    MD5STEP(F1, a, b, c, d, buffer[0]  + 0xd76aa478,  7);
 801d362:	693a      	ldr	r2, [r7, #16]
 801d364:	68fb      	ldr	r3, [r7, #12]
 801d366:	405a      	eors	r2, r3
 801d368:	697b      	ldr	r3, [r7, #20]
 801d36a:	401a      	ands	r2, r3
 801d36c:	68fb      	ldr	r3, [r7, #12]
 801d36e:	405a      	eors	r2, r3
 801d370:	69bb      	ldr	r3, [r7, #24]
 801d372:	441a      	add	r2, r3
 801d374:	69fb      	ldr	r3, [r7, #28]
 801d376:	681b      	ldr	r3, [r3, #0]
 801d378:	441a      	add	r2, r3
 801d37a:	4bb2      	ldr	r3, [pc, #712]	; (801d644 <Transform+0x308>)
 801d37c:	4413      	add	r3, r2
 801d37e:	2107      	movs	r1, #7
 801d380:	4618      	mov	r0, r3
 801d382:	f7ff ffb9 	bl	801d2f8 <rotlFixed>
 801d386:	4602      	mov	r2, r0
 801d388:	697b      	ldr	r3, [r7, #20]
 801d38a:	4413      	add	r3, r2
 801d38c:	61bb      	str	r3, [r7, #24]
    MD5STEP(F1, d, a, b, c, buffer[1]  + 0xe8c7b756, 12);
 801d38e:	697a      	ldr	r2, [r7, #20]
 801d390:	693b      	ldr	r3, [r7, #16]
 801d392:	405a      	eors	r2, r3
 801d394:	69bb      	ldr	r3, [r7, #24]
 801d396:	401a      	ands	r2, r3
 801d398:	693b      	ldr	r3, [r7, #16]
 801d39a:	405a      	eors	r2, r3
 801d39c:	68fb      	ldr	r3, [r7, #12]
 801d39e:	441a      	add	r2, r3
 801d3a0:	69fb      	ldr	r3, [r7, #28]
 801d3a2:	3304      	adds	r3, #4
 801d3a4:	681b      	ldr	r3, [r3, #0]
 801d3a6:	441a      	add	r2, r3
 801d3a8:	4ba7      	ldr	r3, [pc, #668]	; (801d648 <Transform+0x30c>)
 801d3aa:	4413      	add	r3, r2
 801d3ac:	210c      	movs	r1, #12
 801d3ae:	4618      	mov	r0, r3
 801d3b0:	f7ff ffa2 	bl	801d2f8 <rotlFixed>
 801d3b4:	4602      	mov	r2, r0
 801d3b6:	69bb      	ldr	r3, [r7, #24]
 801d3b8:	4413      	add	r3, r2
 801d3ba:	60fb      	str	r3, [r7, #12]
    MD5STEP(F1, c, d, a, b, buffer[2]  + 0x242070db, 17);
 801d3bc:	69ba      	ldr	r2, [r7, #24]
 801d3be:	697b      	ldr	r3, [r7, #20]
 801d3c0:	405a      	eors	r2, r3
 801d3c2:	68fb      	ldr	r3, [r7, #12]
 801d3c4:	401a      	ands	r2, r3
 801d3c6:	697b      	ldr	r3, [r7, #20]
 801d3c8:	405a      	eors	r2, r3
 801d3ca:	693b      	ldr	r3, [r7, #16]
 801d3cc:	441a      	add	r2, r3
 801d3ce:	69fb      	ldr	r3, [r7, #28]
 801d3d0:	3308      	adds	r3, #8
 801d3d2:	681b      	ldr	r3, [r3, #0]
 801d3d4:	441a      	add	r2, r3
 801d3d6:	4b9d      	ldr	r3, [pc, #628]	; (801d64c <Transform+0x310>)
 801d3d8:	4413      	add	r3, r2
 801d3da:	2111      	movs	r1, #17
 801d3dc:	4618      	mov	r0, r3
 801d3de:	f7ff ff8b 	bl	801d2f8 <rotlFixed>
 801d3e2:	4602      	mov	r2, r0
 801d3e4:	68fb      	ldr	r3, [r7, #12]
 801d3e6:	4413      	add	r3, r2
 801d3e8:	613b      	str	r3, [r7, #16]
    MD5STEP(F1, b, c, d, a, buffer[3]  + 0xc1bdceee, 22);
 801d3ea:	68fa      	ldr	r2, [r7, #12]
 801d3ec:	69bb      	ldr	r3, [r7, #24]
 801d3ee:	405a      	eors	r2, r3
 801d3f0:	693b      	ldr	r3, [r7, #16]
 801d3f2:	401a      	ands	r2, r3
 801d3f4:	69bb      	ldr	r3, [r7, #24]
 801d3f6:	405a      	eors	r2, r3
 801d3f8:	697b      	ldr	r3, [r7, #20]
 801d3fa:	441a      	add	r2, r3
 801d3fc:	69fb      	ldr	r3, [r7, #28]
 801d3fe:	330c      	adds	r3, #12
 801d400:	681b      	ldr	r3, [r3, #0]
 801d402:	441a      	add	r2, r3
 801d404:	4b92      	ldr	r3, [pc, #584]	; (801d650 <Transform+0x314>)
 801d406:	4413      	add	r3, r2
 801d408:	2116      	movs	r1, #22
 801d40a:	4618      	mov	r0, r3
 801d40c:	f7ff ff74 	bl	801d2f8 <rotlFixed>
 801d410:	4602      	mov	r2, r0
 801d412:	693b      	ldr	r3, [r7, #16]
 801d414:	4413      	add	r3, r2
 801d416:	617b      	str	r3, [r7, #20]
    MD5STEP(F1, a, b, c, d, buffer[4]  + 0xf57c0faf,  7);
 801d418:	693a      	ldr	r2, [r7, #16]
 801d41a:	68fb      	ldr	r3, [r7, #12]
 801d41c:	405a      	eors	r2, r3
 801d41e:	697b      	ldr	r3, [r7, #20]
 801d420:	401a      	ands	r2, r3
 801d422:	68fb      	ldr	r3, [r7, #12]
 801d424:	405a      	eors	r2, r3
 801d426:	69bb      	ldr	r3, [r7, #24]
 801d428:	441a      	add	r2, r3
 801d42a:	69fb      	ldr	r3, [r7, #28]
 801d42c:	3310      	adds	r3, #16
 801d42e:	681b      	ldr	r3, [r3, #0]
 801d430:	441a      	add	r2, r3
 801d432:	4b88      	ldr	r3, [pc, #544]	; (801d654 <Transform+0x318>)
 801d434:	4413      	add	r3, r2
 801d436:	2107      	movs	r1, #7
 801d438:	4618      	mov	r0, r3
 801d43a:	f7ff ff5d 	bl	801d2f8 <rotlFixed>
 801d43e:	4602      	mov	r2, r0
 801d440:	697b      	ldr	r3, [r7, #20]
 801d442:	4413      	add	r3, r2
 801d444:	61bb      	str	r3, [r7, #24]
    MD5STEP(F1, d, a, b, c, buffer[5]  + 0x4787c62a, 12);
 801d446:	697a      	ldr	r2, [r7, #20]
 801d448:	693b      	ldr	r3, [r7, #16]
 801d44a:	405a      	eors	r2, r3
 801d44c:	69bb      	ldr	r3, [r7, #24]
 801d44e:	401a      	ands	r2, r3
 801d450:	693b      	ldr	r3, [r7, #16]
 801d452:	405a      	eors	r2, r3
 801d454:	68fb      	ldr	r3, [r7, #12]
 801d456:	441a      	add	r2, r3
 801d458:	69fb      	ldr	r3, [r7, #28]
 801d45a:	3314      	adds	r3, #20
 801d45c:	681b      	ldr	r3, [r3, #0]
 801d45e:	441a      	add	r2, r3
 801d460:	4b7d      	ldr	r3, [pc, #500]	; (801d658 <Transform+0x31c>)
 801d462:	4413      	add	r3, r2
 801d464:	210c      	movs	r1, #12
 801d466:	4618      	mov	r0, r3
 801d468:	f7ff ff46 	bl	801d2f8 <rotlFixed>
 801d46c:	4602      	mov	r2, r0
 801d46e:	69bb      	ldr	r3, [r7, #24]
 801d470:	4413      	add	r3, r2
 801d472:	60fb      	str	r3, [r7, #12]
    MD5STEP(F1, c, d, a, b, buffer[6]  + 0xa8304613, 17);
 801d474:	69ba      	ldr	r2, [r7, #24]
 801d476:	697b      	ldr	r3, [r7, #20]
 801d478:	405a      	eors	r2, r3
 801d47a:	68fb      	ldr	r3, [r7, #12]
 801d47c:	401a      	ands	r2, r3
 801d47e:	697b      	ldr	r3, [r7, #20]
 801d480:	405a      	eors	r2, r3
 801d482:	693b      	ldr	r3, [r7, #16]
 801d484:	441a      	add	r2, r3
 801d486:	69fb      	ldr	r3, [r7, #28]
 801d488:	3318      	adds	r3, #24
 801d48a:	681b      	ldr	r3, [r3, #0]
 801d48c:	441a      	add	r2, r3
 801d48e:	4b73      	ldr	r3, [pc, #460]	; (801d65c <Transform+0x320>)
 801d490:	4413      	add	r3, r2
 801d492:	2111      	movs	r1, #17
 801d494:	4618      	mov	r0, r3
 801d496:	f7ff ff2f 	bl	801d2f8 <rotlFixed>
 801d49a:	4602      	mov	r2, r0
 801d49c:	68fb      	ldr	r3, [r7, #12]
 801d49e:	4413      	add	r3, r2
 801d4a0:	613b      	str	r3, [r7, #16]
    MD5STEP(F1, b, c, d, a, buffer[7]  + 0xfd469501, 22);
 801d4a2:	68fa      	ldr	r2, [r7, #12]
 801d4a4:	69bb      	ldr	r3, [r7, #24]
 801d4a6:	405a      	eors	r2, r3
 801d4a8:	693b      	ldr	r3, [r7, #16]
 801d4aa:	401a      	ands	r2, r3
 801d4ac:	69bb      	ldr	r3, [r7, #24]
 801d4ae:	405a      	eors	r2, r3
 801d4b0:	697b      	ldr	r3, [r7, #20]
 801d4b2:	441a      	add	r2, r3
 801d4b4:	69fb      	ldr	r3, [r7, #28]
 801d4b6:	331c      	adds	r3, #28
 801d4b8:	681b      	ldr	r3, [r3, #0]
 801d4ba:	441a      	add	r2, r3
 801d4bc:	4b68      	ldr	r3, [pc, #416]	; (801d660 <Transform+0x324>)
 801d4be:	4413      	add	r3, r2
 801d4c0:	2116      	movs	r1, #22
 801d4c2:	4618      	mov	r0, r3
 801d4c4:	f7ff ff18 	bl	801d2f8 <rotlFixed>
 801d4c8:	4602      	mov	r2, r0
 801d4ca:	693b      	ldr	r3, [r7, #16]
 801d4cc:	4413      	add	r3, r2
 801d4ce:	617b      	str	r3, [r7, #20]
    MD5STEP(F1, a, b, c, d, buffer[8]  + 0x698098d8,  7);
 801d4d0:	693a      	ldr	r2, [r7, #16]
 801d4d2:	68fb      	ldr	r3, [r7, #12]
 801d4d4:	405a      	eors	r2, r3
 801d4d6:	697b      	ldr	r3, [r7, #20]
 801d4d8:	401a      	ands	r2, r3
 801d4da:	68fb      	ldr	r3, [r7, #12]
 801d4dc:	405a      	eors	r2, r3
 801d4de:	69bb      	ldr	r3, [r7, #24]
 801d4e0:	441a      	add	r2, r3
 801d4e2:	69fb      	ldr	r3, [r7, #28]
 801d4e4:	3320      	adds	r3, #32
 801d4e6:	681b      	ldr	r3, [r3, #0]
 801d4e8:	441a      	add	r2, r3
 801d4ea:	4b5e      	ldr	r3, [pc, #376]	; (801d664 <Transform+0x328>)
 801d4ec:	4413      	add	r3, r2
 801d4ee:	2107      	movs	r1, #7
 801d4f0:	4618      	mov	r0, r3
 801d4f2:	f7ff ff01 	bl	801d2f8 <rotlFixed>
 801d4f6:	4602      	mov	r2, r0
 801d4f8:	697b      	ldr	r3, [r7, #20]
 801d4fa:	4413      	add	r3, r2
 801d4fc:	61bb      	str	r3, [r7, #24]
    MD5STEP(F1, d, a, b, c, buffer[9]  + 0x8b44f7af, 12);
 801d4fe:	697a      	ldr	r2, [r7, #20]
 801d500:	693b      	ldr	r3, [r7, #16]
 801d502:	405a      	eors	r2, r3
 801d504:	69bb      	ldr	r3, [r7, #24]
 801d506:	401a      	ands	r2, r3
 801d508:	693b      	ldr	r3, [r7, #16]
 801d50a:	405a      	eors	r2, r3
 801d50c:	68fb      	ldr	r3, [r7, #12]
 801d50e:	441a      	add	r2, r3
 801d510:	69fb      	ldr	r3, [r7, #28]
 801d512:	3324      	adds	r3, #36	; 0x24
 801d514:	681b      	ldr	r3, [r3, #0]
 801d516:	441a      	add	r2, r3
 801d518:	4b53      	ldr	r3, [pc, #332]	; (801d668 <Transform+0x32c>)
 801d51a:	4413      	add	r3, r2
 801d51c:	210c      	movs	r1, #12
 801d51e:	4618      	mov	r0, r3
 801d520:	f7ff feea 	bl	801d2f8 <rotlFixed>
 801d524:	4602      	mov	r2, r0
 801d526:	69bb      	ldr	r3, [r7, #24]
 801d528:	4413      	add	r3, r2
 801d52a:	60fb      	str	r3, [r7, #12]
    MD5STEP(F1, c, d, a, b, buffer[10] + 0xffff5bb1, 17);
 801d52c:	69ba      	ldr	r2, [r7, #24]
 801d52e:	697b      	ldr	r3, [r7, #20]
 801d530:	405a      	eors	r2, r3
 801d532:	68fb      	ldr	r3, [r7, #12]
 801d534:	401a      	ands	r2, r3
 801d536:	697b      	ldr	r3, [r7, #20]
 801d538:	405a      	eors	r2, r3
 801d53a:	693b      	ldr	r3, [r7, #16]
 801d53c:	441a      	add	r2, r3
 801d53e:	69fb      	ldr	r3, [r7, #28]
 801d540:	3328      	adds	r3, #40	; 0x28
 801d542:	681b      	ldr	r3, [r3, #0]
 801d544:	441a      	add	r2, r3
 801d546:	4b49      	ldr	r3, [pc, #292]	; (801d66c <Transform+0x330>)
 801d548:	4413      	add	r3, r2
 801d54a:	2111      	movs	r1, #17
 801d54c:	4618      	mov	r0, r3
 801d54e:	f7ff fed3 	bl	801d2f8 <rotlFixed>
 801d552:	4602      	mov	r2, r0
 801d554:	68fb      	ldr	r3, [r7, #12]
 801d556:	4413      	add	r3, r2
 801d558:	613b      	str	r3, [r7, #16]
    MD5STEP(F1, b, c, d, a, buffer[11] + 0x895cd7be, 22);
 801d55a:	68fa      	ldr	r2, [r7, #12]
 801d55c:	69bb      	ldr	r3, [r7, #24]
 801d55e:	405a      	eors	r2, r3
 801d560:	693b      	ldr	r3, [r7, #16]
 801d562:	401a      	ands	r2, r3
 801d564:	69bb      	ldr	r3, [r7, #24]
 801d566:	405a      	eors	r2, r3
 801d568:	697b      	ldr	r3, [r7, #20]
 801d56a:	441a      	add	r2, r3
 801d56c:	69fb      	ldr	r3, [r7, #28]
 801d56e:	332c      	adds	r3, #44	; 0x2c
 801d570:	681b      	ldr	r3, [r3, #0]
 801d572:	441a      	add	r2, r3
 801d574:	4b3e      	ldr	r3, [pc, #248]	; (801d670 <Transform+0x334>)
 801d576:	4413      	add	r3, r2
 801d578:	2116      	movs	r1, #22
 801d57a:	4618      	mov	r0, r3
 801d57c:	f7ff febc 	bl	801d2f8 <rotlFixed>
 801d580:	4602      	mov	r2, r0
 801d582:	693b      	ldr	r3, [r7, #16]
 801d584:	4413      	add	r3, r2
 801d586:	617b      	str	r3, [r7, #20]
    MD5STEP(F1, a, b, c, d, buffer[12] + 0x6b901122,  7);
 801d588:	693a      	ldr	r2, [r7, #16]
 801d58a:	68fb      	ldr	r3, [r7, #12]
 801d58c:	405a      	eors	r2, r3
 801d58e:	697b      	ldr	r3, [r7, #20]
 801d590:	401a      	ands	r2, r3
 801d592:	68fb      	ldr	r3, [r7, #12]
 801d594:	405a      	eors	r2, r3
 801d596:	69bb      	ldr	r3, [r7, #24]
 801d598:	441a      	add	r2, r3
 801d59a:	69fb      	ldr	r3, [r7, #28]
 801d59c:	3330      	adds	r3, #48	; 0x30
 801d59e:	681b      	ldr	r3, [r3, #0]
 801d5a0:	441a      	add	r2, r3
 801d5a2:	4b34      	ldr	r3, [pc, #208]	; (801d674 <Transform+0x338>)
 801d5a4:	4413      	add	r3, r2
 801d5a6:	2107      	movs	r1, #7
 801d5a8:	4618      	mov	r0, r3
 801d5aa:	f7ff fea5 	bl	801d2f8 <rotlFixed>
 801d5ae:	4602      	mov	r2, r0
 801d5b0:	697b      	ldr	r3, [r7, #20]
 801d5b2:	4413      	add	r3, r2
 801d5b4:	61bb      	str	r3, [r7, #24]
    MD5STEP(F1, d, a, b, c, buffer[13] + 0xfd987193, 12);
 801d5b6:	697a      	ldr	r2, [r7, #20]
 801d5b8:	693b      	ldr	r3, [r7, #16]
 801d5ba:	405a      	eors	r2, r3
 801d5bc:	69bb      	ldr	r3, [r7, #24]
 801d5be:	401a      	ands	r2, r3
 801d5c0:	693b      	ldr	r3, [r7, #16]
 801d5c2:	405a      	eors	r2, r3
 801d5c4:	68fb      	ldr	r3, [r7, #12]
 801d5c6:	441a      	add	r2, r3
 801d5c8:	69fb      	ldr	r3, [r7, #28]
 801d5ca:	3334      	adds	r3, #52	; 0x34
 801d5cc:	681b      	ldr	r3, [r3, #0]
 801d5ce:	441a      	add	r2, r3
 801d5d0:	4b29      	ldr	r3, [pc, #164]	; (801d678 <Transform+0x33c>)
 801d5d2:	4413      	add	r3, r2
 801d5d4:	210c      	movs	r1, #12
 801d5d6:	4618      	mov	r0, r3
 801d5d8:	f7ff fe8e 	bl	801d2f8 <rotlFixed>
 801d5dc:	4602      	mov	r2, r0
 801d5de:	69bb      	ldr	r3, [r7, #24]
 801d5e0:	4413      	add	r3, r2
 801d5e2:	60fb      	str	r3, [r7, #12]
    MD5STEP(F1, c, d, a, b, buffer[14] + 0xa679438e, 17);
 801d5e4:	69ba      	ldr	r2, [r7, #24]
 801d5e6:	697b      	ldr	r3, [r7, #20]
 801d5e8:	405a      	eors	r2, r3
 801d5ea:	68fb      	ldr	r3, [r7, #12]
 801d5ec:	401a      	ands	r2, r3
 801d5ee:	697b      	ldr	r3, [r7, #20]
 801d5f0:	405a      	eors	r2, r3
 801d5f2:	693b      	ldr	r3, [r7, #16]
 801d5f4:	441a      	add	r2, r3
 801d5f6:	69fb      	ldr	r3, [r7, #28]
 801d5f8:	3338      	adds	r3, #56	; 0x38
 801d5fa:	681b      	ldr	r3, [r3, #0]
 801d5fc:	441a      	add	r2, r3
 801d5fe:	4b1f      	ldr	r3, [pc, #124]	; (801d67c <Transform+0x340>)
 801d600:	4413      	add	r3, r2
 801d602:	2111      	movs	r1, #17
 801d604:	4618      	mov	r0, r3
 801d606:	f7ff fe77 	bl	801d2f8 <rotlFixed>
 801d60a:	4602      	mov	r2, r0
 801d60c:	68fb      	ldr	r3, [r7, #12]
 801d60e:	4413      	add	r3, r2
 801d610:	613b      	str	r3, [r7, #16]
    MD5STEP(F1, b, c, d, a, buffer[15] + 0x49b40821, 22);
 801d612:	68fa      	ldr	r2, [r7, #12]
 801d614:	69bb      	ldr	r3, [r7, #24]
 801d616:	405a      	eors	r2, r3
 801d618:	693b      	ldr	r3, [r7, #16]
 801d61a:	401a      	ands	r2, r3
 801d61c:	69bb      	ldr	r3, [r7, #24]
 801d61e:	405a      	eors	r2, r3
 801d620:	697b      	ldr	r3, [r7, #20]
 801d622:	441a      	add	r2, r3
 801d624:	69fb      	ldr	r3, [r7, #28]
 801d626:	333c      	adds	r3, #60	; 0x3c
 801d628:	681b      	ldr	r3, [r3, #0]
 801d62a:	441a      	add	r2, r3
 801d62c:	4b14      	ldr	r3, [pc, #80]	; (801d680 <Transform+0x344>)
 801d62e:	4413      	add	r3, r2
 801d630:	2116      	movs	r1, #22
 801d632:	4618      	mov	r0, r3
 801d634:	f7ff fe60 	bl	801d2f8 <rotlFixed>
 801d638:	4602      	mov	r2, r0
 801d63a:	693b      	ldr	r3, [r7, #16]
 801d63c:	4413      	add	r3, r2
 801d63e:	617b      	str	r3, [r7, #20]
 801d640:	e020      	b.n	801d684 <Transform+0x348>
 801d642:	bf00      	nop
 801d644:	d76aa478 	.word	0xd76aa478
 801d648:	e8c7b756 	.word	0xe8c7b756
 801d64c:	242070db 	.word	0x242070db
 801d650:	c1bdceee 	.word	0xc1bdceee
 801d654:	f57c0faf 	.word	0xf57c0faf
 801d658:	4787c62a 	.word	0x4787c62a
 801d65c:	a8304613 	.word	0xa8304613
 801d660:	fd469501 	.word	0xfd469501
 801d664:	698098d8 	.word	0x698098d8
 801d668:	8b44f7af 	.word	0x8b44f7af
 801d66c:	ffff5bb1 	.word	0xffff5bb1
 801d670:	895cd7be 	.word	0x895cd7be
 801d674:	6b901122 	.word	0x6b901122
 801d678:	fd987193 	.word	0xfd987193
 801d67c:	a679438e 	.word	0xa679438e
 801d680:	49b40821 	.word	0x49b40821

    MD5STEP(F2, a, b, c, d, buffer[1]  + 0xf61e2562,  5);
 801d684:	697a      	ldr	r2, [r7, #20]
 801d686:	693b      	ldr	r3, [r7, #16]
 801d688:	405a      	eors	r2, r3
 801d68a:	68fb      	ldr	r3, [r7, #12]
 801d68c:	401a      	ands	r2, r3
 801d68e:	693b      	ldr	r3, [r7, #16]
 801d690:	405a      	eors	r2, r3
 801d692:	69bb      	ldr	r3, [r7, #24]
 801d694:	441a      	add	r2, r3
 801d696:	69fb      	ldr	r3, [r7, #28]
 801d698:	3304      	adds	r3, #4
 801d69a:	681b      	ldr	r3, [r3, #0]
 801d69c:	441a      	add	r2, r3
 801d69e:	4bb1      	ldr	r3, [pc, #708]	; (801d964 <Transform+0x628>)
 801d6a0:	4413      	add	r3, r2
 801d6a2:	2105      	movs	r1, #5
 801d6a4:	4618      	mov	r0, r3
 801d6a6:	f7ff fe27 	bl	801d2f8 <rotlFixed>
 801d6aa:	4602      	mov	r2, r0
 801d6ac:	697b      	ldr	r3, [r7, #20]
 801d6ae:	4413      	add	r3, r2
 801d6b0:	61bb      	str	r3, [r7, #24]
    MD5STEP(F2, d, a, b, c, buffer[6]  + 0xc040b340,  9);
 801d6b2:	69ba      	ldr	r2, [r7, #24]
 801d6b4:	697b      	ldr	r3, [r7, #20]
 801d6b6:	405a      	eors	r2, r3
 801d6b8:	693b      	ldr	r3, [r7, #16]
 801d6ba:	401a      	ands	r2, r3
 801d6bc:	697b      	ldr	r3, [r7, #20]
 801d6be:	405a      	eors	r2, r3
 801d6c0:	68fb      	ldr	r3, [r7, #12]
 801d6c2:	441a      	add	r2, r3
 801d6c4:	69fb      	ldr	r3, [r7, #28]
 801d6c6:	3318      	adds	r3, #24
 801d6c8:	681b      	ldr	r3, [r3, #0]
 801d6ca:	441a      	add	r2, r3
 801d6cc:	4ba6      	ldr	r3, [pc, #664]	; (801d968 <Transform+0x62c>)
 801d6ce:	4413      	add	r3, r2
 801d6d0:	2109      	movs	r1, #9
 801d6d2:	4618      	mov	r0, r3
 801d6d4:	f7ff fe10 	bl	801d2f8 <rotlFixed>
 801d6d8:	4602      	mov	r2, r0
 801d6da:	69bb      	ldr	r3, [r7, #24]
 801d6dc:	4413      	add	r3, r2
 801d6de:	60fb      	str	r3, [r7, #12]
    MD5STEP(F2, c, d, a, b, buffer[11] + 0x265e5a51, 14);
 801d6e0:	68fa      	ldr	r2, [r7, #12]
 801d6e2:	69bb      	ldr	r3, [r7, #24]
 801d6e4:	405a      	eors	r2, r3
 801d6e6:	697b      	ldr	r3, [r7, #20]
 801d6e8:	401a      	ands	r2, r3
 801d6ea:	69bb      	ldr	r3, [r7, #24]
 801d6ec:	405a      	eors	r2, r3
 801d6ee:	693b      	ldr	r3, [r7, #16]
 801d6f0:	441a      	add	r2, r3
 801d6f2:	69fb      	ldr	r3, [r7, #28]
 801d6f4:	332c      	adds	r3, #44	; 0x2c
 801d6f6:	681b      	ldr	r3, [r3, #0]
 801d6f8:	441a      	add	r2, r3
 801d6fa:	4b9c      	ldr	r3, [pc, #624]	; (801d96c <Transform+0x630>)
 801d6fc:	4413      	add	r3, r2
 801d6fe:	210e      	movs	r1, #14
 801d700:	4618      	mov	r0, r3
 801d702:	f7ff fdf9 	bl	801d2f8 <rotlFixed>
 801d706:	4602      	mov	r2, r0
 801d708:	68fb      	ldr	r3, [r7, #12]
 801d70a:	4413      	add	r3, r2
 801d70c:	613b      	str	r3, [r7, #16]
    MD5STEP(F2, b, c, d, a, buffer[0]  + 0xe9b6c7aa, 20);
 801d70e:	693a      	ldr	r2, [r7, #16]
 801d710:	68fb      	ldr	r3, [r7, #12]
 801d712:	405a      	eors	r2, r3
 801d714:	69bb      	ldr	r3, [r7, #24]
 801d716:	401a      	ands	r2, r3
 801d718:	68fb      	ldr	r3, [r7, #12]
 801d71a:	405a      	eors	r2, r3
 801d71c:	697b      	ldr	r3, [r7, #20]
 801d71e:	441a      	add	r2, r3
 801d720:	69fb      	ldr	r3, [r7, #28]
 801d722:	681b      	ldr	r3, [r3, #0]
 801d724:	441a      	add	r2, r3
 801d726:	4b92      	ldr	r3, [pc, #584]	; (801d970 <Transform+0x634>)
 801d728:	4413      	add	r3, r2
 801d72a:	2114      	movs	r1, #20
 801d72c:	4618      	mov	r0, r3
 801d72e:	f7ff fde3 	bl	801d2f8 <rotlFixed>
 801d732:	4602      	mov	r2, r0
 801d734:	693b      	ldr	r3, [r7, #16]
 801d736:	4413      	add	r3, r2
 801d738:	617b      	str	r3, [r7, #20]
    MD5STEP(F2, a, b, c, d, buffer[5]  + 0xd62f105d,  5);
 801d73a:	697a      	ldr	r2, [r7, #20]
 801d73c:	693b      	ldr	r3, [r7, #16]
 801d73e:	405a      	eors	r2, r3
 801d740:	68fb      	ldr	r3, [r7, #12]
 801d742:	401a      	ands	r2, r3
 801d744:	693b      	ldr	r3, [r7, #16]
 801d746:	405a      	eors	r2, r3
 801d748:	69bb      	ldr	r3, [r7, #24]
 801d74a:	441a      	add	r2, r3
 801d74c:	69fb      	ldr	r3, [r7, #28]
 801d74e:	3314      	adds	r3, #20
 801d750:	681b      	ldr	r3, [r3, #0]
 801d752:	441a      	add	r2, r3
 801d754:	4b87      	ldr	r3, [pc, #540]	; (801d974 <Transform+0x638>)
 801d756:	4413      	add	r3, r2
 801d758:	2105      	movs	r1, #5
 801d75a:	4618      	mov	r0, r3
 801d75c:	f7ff fdcc 	bl	801d2f8 <rotlFixed>
 801d760:	4602      	mov	r2, r0
 801d762:	697b      	ldr	r3, [r7, #20]
 801d764:	4413      	add	r3, r2
 801d766:	61bb      	str	r3, [r7, #24]
    MD5STEP(F2, d, a, b, c, buffer[10] + 0x02441453,  9);
 801d768:	69ba      	ldr	r2, [r7, #24]
 801d76a:	697b      	ldr	r3, [r7, #20]
 801d76c:	405a      	eors	r2, r3
 801d76e:	693b      	ldr	r3, [r7, #16]
 801d770:	401a      	ands	r2, r3
 801d772:	697b      	ldr	r3, [r7, #20]
 801d774:	405a      	eors	r2, r3
 801d776:	68fb      	ldr	r3, [r7, #12]
 801d778:	441a      	add	r2, r3
 801d77a:	69fb      	ldr	r3, [r7, #28]
 801d77c:	3328      	adds	r3, #40	; 0x28
 801d77e:	681b      	ldr	r3, [r3, #0]
 801d780:	441a      	add	r2, r3
 801d782:	4b7d      	ldr	r3, [pc, #500]	; (801d978 <Transform+0x63c>)
 801d784:	4413      	add	r3, r2
 801d786:	2109      	movs	r1, #9
 801d788:	4618      	mov	r0, r3
 801d78a:	f7ff fdb5 	bl	801d2f8 <rotlFixed>
 801d78e:	4602      	mov	r2, r0
 801d790:	69bb      	ldr	r3, [r7, #24]
 801d792:	4413      	add	r3, r2
 801d794:	60fb      	str	r3, [r7, #12]
    MD5STEP(F2, c, d, a, b, buffer[15] + 0xd8a1e681, 14);
 801d796:	68fa      	ldr	r2, [r7, #12]
 801d798:	69bb      	ldr	r3, [r7, #24]
 801d79a:	405a      	eors	r2, r3
 801d79c:	697b      	ldr	r3, [r7, #20]
 801d79e:	401a      	ands	r2, r3
 801d7a0:	69bb      	ldr	r3, [r7, #24]
 801d7a2:	405a      	eors	r2, r3
 801d7a4:	693b      	ldr	r3, [r7, #16]
 801d7a6:	441a      	add	r2, r3
 801d7a8:	69fb      	ldr	r3, [r7, #28]
 801d7aa:	333c      	adds	r3, #60	; 0x3c
 801d7ac:	681b      	ldr	r3, [r3, #0]
 801d7ae:	441a      	add	r2, r3
 801d7b0:	4b72      	ldr	r3, [pc, #456]	; (801d97c <Transform+0x640>)
 801d7b2:	4413      	add	r3, r2
 801d7b4:	210e      	movs	r1, #14
 801d7b6:	4618      	mov	r0, r3
 801d7b8:	f7ff fd9e 	bl	801d2f8 <rotlFixed>
 801d7bc:	4602      	mov	r2, r0
 801d7be:	68fb      	ldr	r3, [r7, #12]
 801d7c0:	4413      	add	r3, r2
 801d7c2:	613b      	str	r3, [r7, #16]
    MD5STEP(F2, b, c, d, a, buffer[4]  + 0xe7d3fbc8, 20);
 801d7c4:	693a      	ldr	r2, [r7, #16]
 801d7c6:	68fb      	ldr	r3, [r7, #12]
 801d7c8:	405a      	eors	r2, r3
 801d7ca:	69bb      	ldr	r3, [r7, #24]
 801d7cc:	401a      	ands	r2, r3
 801d7ce:	68fb      	ldr	r3, [r7, #12]
 801d7d0:	405a      	eors	r2, r3
 801d7d2:	697b      	ldr	r3, [r7, #20]
 801d7d4:	441a      	add	r2, r3
 801d7d6:	69fb      	ldr	r3, [r7, #28]
 801d7d8:	3310      	adds	r3, #16
 801d7da:	681b      	ldr	r3, [r3, #0]
 801d7dc:	441a      	add	r2, r3
 801d7de:	4b68      	ldr	r3, [pc, #416]	; (801d980 <Transform+0x644>)
 801d7e0:	4413      	add	r3, r2
 801d7e2:	2114      	movs	r1, #20
 801d7e4:	4618      	mov	r0, r3
 801d7e6:	f7ff fd87 	bl	801d2f8 <rotlFixed>
 801d7ea:	4602      	mov	r2, r0
 801d7ec:	693b      	ldr	r3, [r7, #16]
 801d7ee:	4413      	add	r3, r2
 801d7f0:	617b      	str	r3, [r7, #20]
    MD5STEP(F2, a, b, c, d, buffer[9]  + 0x21e1cde6,  5);
 801d7f2:	697a      	ldr	r2, [r7, #20]
 801d7f4:	693b      	ldr	r3, [r7, #16]
 801d7f6:	405a      	eors	r2, r3
 801d7f8:	68fb      	ldr	r3, [r7, #12]
 801d7fa:	401a      	ands	r2, r3
 801d7fc:	693b      	ldr	r3, [r7, #16]
 801d7fe:	405a      	eors	r2, r3
 801d800:	69bb      	ldr	r3, [r7, #24]
 801d802:	441a      	add	r2, r3
 801d804:	69fb      	ldr	r3, [r7, #28]
 801d806:	3324      	adds	r3, #36	; 0x24
 801d808:	681b      	ldr	r3, [r3, #0]
 801d80a:	441a      	add	r2, r3
 801d80c:	4b5d      	ldr	r3, [pc, #372]	; (801d984 <Transform+0x648>)
 801d80e:	4413      	add	r3, r2
 801d810:	2105      	movs	r1, #5
 801d812:	4618      	mov	r0, r3
 801d814:	f7ff fd70 	bl	801d2f8 <rotlFixed>
 801d818:	4602      	mov	r2, r0
 801d81a:	697b      	ldr	r3, [r7, #20]
 801d81c:	4413      	add	r3, r2
 801d81e:	61bb      	str	r3, [r7, #24]
    MD5STEP(F2, d, a, b, c, buffer[14] + 0xc33707d6,  9);
 801d820:	69ba      	ldr	r2, [r7, #24]
 801d822:	697b      	ldr	r3, [r7, #20]
 801d824:	405a      	eors	r2, r3
 801d826:	693b      	ldr	r3, [r7, #16]
 801d828:	401a      	ands	r2, r3
 801d82a:	697b      	ldr	r3, [r7, #20]
 801d82c:	405a      	eors	r2, r3
 801d82e:	68fb      	ldr	r3, [r7, #12]
 801d830:	441a      	add	r2, r3
 801d832:	69fb      	ldr	r3, [r7, #28]
 801d834:	3338      	adds	r3, #56	; 0x38
 801d836:	681b      	ldr	r3, [r3, #0]
 801d838:	441a      	add	r2, r3
 801d83a:	4b53      	ldr	r3, [pc, #332]	; (801d988 <Transform+0x64c>)
 801d83c:	4413      	add	r3, r2
 801d83e:	2109      	movs	r1, #9
 801d840:	4618      	mov	r0, r3
 801d842:	f7ff fd59 	bl	801d2f8 <rotlFixed>
 801d846:	4602      	mov	r2, r0
 801d848:	69bb      	ldr	r3, [r7, #24]
 801d84a:	4413      	add	r3, r2
 801d84c:	60fb      	str	r3, [r7, #12]
    MD5STEP(F2, c, d, a, b, buffer[3]  + 0xf4d50d87, 14);
 801d84e:	68fa      	ldr	r2, [r7, #12]
 801d850:	69bb      	ldr	r3, [r7, #24]
 801d852:	405a      	eors	r2, r3
 801d854:	697b      	ldr	r3, [r7, #20]
 801d856:	401a      	ands	r2, r3
 801d858:	69bb      	ldr	r3, [r7, #24]
 801d85a:	405a      	eors	r2, r3
 801d85c:	693b      	ldr	r3, [r7, #16]
 801d85e:	441a      	add	r2, r3
 801d860:	69fb      	ldr	r3, [r7, #28]
 801d862:	330c      	adds	r3, #12
 801d864:	681b      	ldr	r3, [r3, #0]
 801d866:	441a      	add	r2, r3
 801d868:	4b48      	ldr	r3, [pc, #288]	; (801d98c <Transform+0x650>)
 801d86a:	4413      	add	r3, r2
 801d86c:	210e      	movs	r1, #14
 801d86e:	4618      	mov	r0, r3
 801d870:	f7ff fd42 	bl	801d2f8 <rotlFixed>
 801d874:	4602      	mov	r2, r0
 801d876:	68fb      	ldr	r3, [r7, #12]
 801d878:	4413      	add	r3, r2
 801d87a:	613b      	str	r3, [r7, #16]
    MD5STEP(F2, b, c, d, a, buffer[8]  + 0x455a14ed, 20);
 801d87c:	693a      	ldr	r2, [r7, #16]
 801d87e:	68fb      	ldr	r3, [r7, #12]
 801d880:	405a      	eors	r2, r3
 801d882:	69bb      	ldr	r3, [r7, #24]
 801d884:	401a      	ands	r2, r3
 801d886:	68fb      	ldr	r3, [r7, #12]
 801d888:	405a      	eors	r2, r3
 801d88a:	697b      	ldr	r3, [r7, #20]
 801d88c:	441a      	add	r2, r3
 801d88e:	69fb      	ldr	r3, [r7, #28]
 801d890:	3320      	adds	r3, #32
 801d892:	681b      	ldr	r3, [r3, #0]
 801d894:	441a      	add	r2, r3
 801d896:	4b3e      	ldr	r3, [pc, #248]	; (801d990 <Transform+0x654>)
 801d898:	4413      	add	r3, r2
 801d89a:	2114      	movs	r1, #20
 801d89c:	4618      	mov	r0, r3
 801d89e:	f7ff fd2b 	bl	801d2f8 <rotlFixed>
 801d8a2:	4602      	mov	r2, r0
 801d8a4:	693b      	ldr	r3, [r7, #16]
 801d8a6:	4413      	add	r3, r2
 801d8a8:	617b      	str	r3, [r7, #20]
    MD5STEP(F2, a, b, c, d, buffer[13] + 0xa9e3e905,  5);
 801d8aa:	697a      	ldr	r2, [r7, #20]
 801d8ac:	693b      	ldr	r3, [r7, #16]
 801d8ae:	405a      	eors	r2, r3
 801d8b0:	68fb      	ldr	r3, [r7, #12]
 801d8b2:	401a      	ands	r2, r3
 801d8b4:	693b      	ldr	r3, [r7, #16]
 801d8b6:	405a      	eors	r2, r3
 801d8b8:	69bb      	ldr	r3, [r7, #24]
 801d8ba:	441a      	add	r2, r3
 801d8bc:	69fb      	ldr	r3, [r7, #28]
 801d8be:	3334      	adds	r3, #52	; 0x34
 801d8c0:	681b      	ldr	r3, [r3, #0]
 801d8c2:	441a      	add	r2, r3
 801d8c4:	4b33      	ldr	r3, [pc, #204]	; (801d994 <Transform+0x658>)
 801d8c6:	4413      	add	r3, r2
 801d8c8:	2105      	movs	r1, #5
 801d8ca:	4618      	mov	r0, r3
 801d8cc:	f7ff fd14 	bl	801d2f8 <rotlFixed>
 801d8d0:	4602      	mov	r2, r0
 801d8d2:	697b      	ldr	r3, [r7, #20]
 801d8d4:	4413      	add	r3, r2
 801d8d6:	61bb      	str	r3, [r7, #24]
    MD5STEP(F2, d, a, b, c, buffer[2]  + 0xfcefa3f8,  9);
 801d8d8:	69ba      	ldr	r2, [r7, #24]
 801d8da:	697b      	ldr	r3, [r7, #20]
 801d8dc:	405a      	eors	r2, r3
 801d8de:	693b      	ldr	r3, [r7, #16]
 801d8e0:	401a      	ands	r2, r3
 801d8e2:	697b      	ldr	r3, [r7, #20]
 801d8e4:	405a      	eors	r2, r3
 801d8e6:	68fb      	ldr	r3, [r7, #12]
 801d8e8:	441a      	add	r2, r3
 801d8ea:	69fb      	ldr	r3, [r7, #28]
 801d8ec:	3308      	adds	r3, #8
 801d8ee:	681b      	ldr	r3, [r3, #0]
 801d8f0:	441a      	add	r2, r3
 801d8f2:	4b29      	ldr	r3, [pc, #164]	; (801d998 <Transform+0x65c>)
 801d8f4:	4413      	add	r3, r2
 801d8f6:	2109      	movs	r1, #9
 801d8f8:	4618      	mov	r0, r3
 801d8fa:	f7ff fcfd 	bl	801d2f8 <rotlFixed>
 801d8fe:	4602      	mov	r2, r0
 801d900:	69bb      	ldr	r3, [r7, #24]
 801d902:	4413      	add	r3, r2
 801d904:	60fb      	str	r3, [r7, #12]
    MD5STEP(F2, c, d, a, b, buffer[7]  + 0x676f02d9, 14);
 801d906:	68fa      	ldr	r2, [r7, #12]
 801d908:	69bb      	ldr	r3, [r7, #24]
 801d90a:	405a      	eors	r2, r3
 801d90c:	697b      	ldr	r3, [r7, #20]
 801d90e:	401a      	ands	r2, r3
 801d910:	69bb      	ldr	r3, [r7, #24]
 801d912:	405a      	eors	r2, r3
 801d914:	693b      	ldr	r3, [r7, #16]
 801d916:	441a      	add	r2, r3
 801d918:	69fb      	ldr	r3, [r7, #28]
 801d91a:	331c      	adds	r3, #28
 801d91c:	681b      	ldr	r3, [r3, #0]
 801d91e:	441a      	add	r2, r3
 801d920:	4b1e      	ldr	r3, [pc, #120]	; (801d99c <Transform+0x660>)
 801d922:	4413      	add	r3, r2
 801d924:	210e      	movs	r1, #14
 801d926:	4618      	mov	r0, r3
 801d928:	f7ff fce6 	bl	801d2f8 <rotlFixed>
 801d92c:	4602      	mov	r2, r0
 801d92e:	68fb      	ldr	r3, [r7, #12]
 801d930:	4413      	add	r3, r2
 801d932:	613b      	str	r3, [r7, #16]
    MD5STEP(F2, b, c, d, a, buffer[12] + 0x8d2a4c8a, 20);
 801d934:	693a      	ldr	r2, [r7, #16]
 801d936:	68fb      	ldr	r3, [r7, #12]
 801d938:	405a      	eors	r2, r3
 801d93a:	69bb      	ldr	r3, [r7, #24]
 801d93c:	401a      	ands	r2, r3
 801d93e:	68fb      	ldr	r3, [r7, #12]
 801d940:	405a      	eors	r2, r3
 801d942:	697b      	ldr	r3, [r7, #20]
 801d944:	441a      	add	r2, r3
 801d946:	69fb      	ldr	r3, [r7, #28]
 801d948:	3330      	adds	r3, #48	; 0x30
 801d94a:	681b      	ldr	r3, [r3, #0]
 801d94c:	441a      	add	r2, r3
 801d94e:	4b14      	ldr	r3, [pc, #80]	; (801d9a0 <Transform+0x664>)
 801d950:	4413      	add	r3, r2
 801d952:	2114      	movs	r1, #20
 801d954:	4618      	mov	r0, r3
 801d956:	f7ff fccf 	bl	801d2f8 <rotlFixed>
 801d95a:	4602      	mov	r2, r0
 801d95c:	693b      	ldr	r3, [r7, #16]
 801d95e:	4413      	add	r3, r2
 801d960:	617b      	str	r3, [r7, #20]
 801d962:	e01f      	b.n	801d9a4 <Transform+0x668>
 801d964:	f61e2562 	.word	0xf61e2562
 801d968:	c040b340 	.word	0xc040b340
 801d96c:	265e5a51 	.word	0x265e5a51
 801d970:	e9b6c7aa 	.word	0xe9b6c7aa
 801d974:	d62f105d 	.word	0xd62f105d
 801d978:	02441453 	.word	0x02441453
 801d97c:	d8a1e681 	.word	0xd8a1e681
 801d980:	e7d3fbc8 	.word	0xe7d3fbc8
 801d984:	21e1cde6 	.word	0x21e1cde6
 801d988:	c33707d6 	.word	0xc33707d6
 801d98c:	f4d50d87 	.word	0xf4d50d87
 801d990:	455a14ed 	.word	0x455a14ed
 801d994:	a9e3e905 	.word	0xa9e3e905
 801d998:	fcefa3f8 	.word	0xfcefa3f8
 801d99c:	676f02d9 	.word	0x676f02d9
 801d9a0:	8d2a4c8a 	.word	0x8d2a4c8a

    MD5STEP(F3, a, b, c, d, buffer[5]  + 0xfffa3942,  4);
 801d9a4:	697a      	ldr	r2, [r7, #20]
 801d9a6:	693b      	ldr	r3, [r7, #16]
 801d9a8:	405a      	eors	r2, r3
 801d9aa:	68fb      	ldr	r3, [r7, #12]
 801d9ac:	405a      	eors	r2, r3
 801d9ae:	69bb      	ldr	r3, [r7, #24]
 801d9b0:	441a      	add	r2, r3
 801d9b2:	69fb      	ldr	r3, [r7, #28]
 801d9b4:	3314      	adds	r3, #20
 801d9b6:	681b      	ldr	r3, [r3, #0]
 801d9b8:	441a      	add	r2, r3
 801d9ba:	4bb2      	ldr	r3, [pc, #712]	; (801dc84 <Transform+0x948>)
 801d9bc:	4413      	add	r3, r2
 801d9be:	2104      	movs	r1, #4
 801d9c0:	4618      	mov	r0, r3
 801d9c2:	f7ff fc99 	bl	801d2f8 <rotlFixed>
 801d9c6:	4602      	mov	r2, r0
 801d9c8:	697b      	ldr	r3, [r7, #20]
 801d9ca:	4413      	add	r3, r2
 801d9cc:	61bb      	str	r3, [r7, #24]
    MD5STEP(F3, d, a, b, c, buffer[8]  + 0x8771f681, 11);
 801d9ce:	69ba      	ldr	r2, [r7, #24]
 801d9d0:	697b      	ldr	r3, [r7, #20]
 801d9d2:	405a      	eors	r2, r3
 801d9d4:	693b      	ldr	r3, [r7, #16]
 801d9d6:	405a      	eors	r2, r3
 801d9d8:	68fb      	ldr	r3, [r7, #12]
 801d9da:	441a      	add	r2, r3
 801d9dc:	69fb      	ldr	r3, [r7, #28]
 801d9de:	3320      	adds	r3, #32
 801d9e0:	681b      	ldr	r3, [r3, #0]
 801d9e2:	441a      	add	r2, r3
 801d9e4:	4ba8      	ldr	r3, [pc, #672]	; (801dc88 <Transform+0x94c>)
 801d9e6:	4413      	add	r3, r2
 801d9e8:	210b      	movs	r1, #11
 801d9ea:	4618      	mov	r0, r3
 801d9ec:	f7ff fc84 	bl	801d2f8 <rotlFixed>
 801d9f0:	4602      	mov	r2, r0
 801d9f2:	69bb      	ldr	r3, [r7, #24]
 801d9f4:	4413      	add	r3, r2
 801d9f6:	60fb      	str	r3, [r7, #12]
    MD5STEP(F3, c, d, a, b, buffer[11] + 0x6d9d6122, 16);
 801d9f8:	68fa      	ldr	r2, [r7, #12]
 801d9fa:	69bb      	ldr	r3, [r7, #24]
 801d9fc:	405a      	eors	r2, r3
 801d9fe:	697b      	ldr	r3, [r7, #20]
 801da00:	405a      	eors	r2, r3
 801da02:	693b      	ldr	r3, [r7, #16]
 801da04:	441a      	add	r2, r3
 801da06:	69fb      	ldr	r3, [r7, #28]
 801da08:	332c      	adds	r3, #44	; 0x2c
 801da0a:	681b      	ldr	r3, [r3, #0]
 801da0c:	441a      	add	r2, r3
 801da0e:	4b9f      	ldr	r3, [pc, #636]	; (801dc8c <Transform+0x950>)
 801da10:	4413      	add	r3, r2
 801da12:	2110      	movs	r1, #16
 801da14:	4618      	mov	r0, r3
 801da16:	f7ff fc6f 	bl	801d2f8 <rotlFixed>
 801da1a:	4602      	mov	r2, r0
 801da1c:	68fb      	ldr	r3, [r7, #12]
 801da1e:	4413      	add	r3, r2
 801da20:	613b      	str	r3, [r7, #16]
    MD5STEP(F3, b, c, d, a, buffer[14] + 0xfde5380c, 23);
 801da22:	693a      	ldr	r2, [r7, #16]
 801da24:	68fb      	ldr	r3, [r7, #12]
 801da26:	405a      	eors	r2, r3
 801da28:	69bb      	ldr	r3, [r7, #24]
 801da2a:	405a      	eors	r2, r3
 801da2c:	697b      	ldr	r3, [r7, #20]
 801da2e:	441a      	add	r2, r3
 801da30:	69fb      	ldr	r3, [r7, #28]
 801da32:	3338      	adds	r3, #56	; 0x38
 801da34:	681b      	ldr	r3, [r3, #0]
 801da36:	441a      	add	r2, r3
 801da38:	4b95      	ldr	r3, [pc, #596]	; (801dc90 <Transform+0x954>)
 801da3a:	4413      	add	r3, r2
 801da3c:	2117      	movs	r1, #23
 801da3e:	4618      	mov	r0, r3
 801da40:	f7ff fc5a 	bl	801d2f8 <rotlFixed>
 801da44:	4602      	mov	r2, r0
 801da46:	693b      	ldr	r3, [r7, #16]
 801da48:	4413      	add	r3, r2
 801da4a:	617b      	str	r3, [r7, #20]
    MD5STEP(F3, a, b, c, d, buffer[1]  + 0xa4beea44,  4);
 801da4c:	697a      	ldr	r2, [r7, #20]
 801da4e:	693b      	ldr	r3, [r7, #16]
 801da50:	405a      	eors	r2, r3
 801da52:	68fb      	ldr	r3, [r7, #12]
 801da54:	405a      	eors	r2, r3
 801da56:	69bb      	ldr	r3, [r7, #24]
 801da58:	441a      	add	r2, r3
 801da5a:	69fb      	ldr	r3, [r7, #28]
 801da5c:	3304      	adds	r3, #4
 801da5e:	681b      	ldr	r3, [r3, #0]
 801da60:	441a      	add	r2, r3
 801da62:	4b8c      	ldr	r3, [pc, #560]	; (801dc94 <Transform+0x958>)
 801da64:	4413      	add	r3, r2
 801da66:	2104      	movs	r1, #4
 801da68:	4618      	mov	r0, r3
 801da6a:	f7ff fc45 	bl	801d2f8 <rotlFixed>
 801da6e:	4602      	mov	r2, r0
 801da70:	697b      	ldr	r3, [r7, #20]
 801da72:	4413      	add	r3, r2
 801da74:	61bb      	str	r3, [r7, #24]
    MD5STEP(F3, d, a, b, c, buffer[4]  + 0x4bdecfa9, 11);
 801da76:	69ba      	ldr	r2, [r7, #24]
 801da78:	697b      	ldr	r3, [r7, #20]
 801da7a:	405a      	eors	r2, r3
 801da7c:	693b      	ldr	r3, [r7, #16]
 801da7e:	405a      	eors	r2, r3
 801da80:	68fb      	ldr	r3, [r7, #12]
 801da82:	441a      	add	r2, r3
 801da84:	69fb      	ldr	r3, [r7, #28]
 801da86:	3310      	adds	r3, #16
 801da88:	681b      	ldr	r3, [r3, #0]
 801da8a:	441a      	add	r2, r3
 801da8c:	4b82      	ldr	r3, [pc, #520]	; (801dc98 <Transform+0x95c>)
 801da8e:	4413      	add	r3, r2
 801da90:	210b      	movs	r1, #11
 801da92:	4618      	mov	r0, r3
 801da94:	f7ff fc30 	bl	801d2f8 <rotlFixed>
 801da98:	4602      	mov	r2, r0
 801da9a:	69bb      	ldr	r3, [r7, #24]
 801da9c:	4413      	add	r3, r2
 801da9e:	60fb      	str	r3, [r7, #12]
    MD5STEP(F3, c, d, a, b, buffer[7]  + 0xf6bb4b60, 16);
 801daa0:	68fa      	ldr	r2, [r7, #12]
 801daa2:	69bb      	ldr	r3, [r7, #24]
 801daa4:	405a      	eors	r2, r3
 801daa6:	697b      	ldr	r3, [r7, #20]
 801daa8:	405a      	eors	r2, r3
 801daaa:	693b      	ldr	r3, [r7, #16]
 801daac:	441a      	add	r2, r3
 801daae:	69fb      	ldr	r3, [r7, #28]
 801dab0:	331c      	adds	r3, #28
 801dab2:	681b      	ldr	r3, [r3, #0]
 801dab4:	441a      	add	r2, r3
 801dab6:	4b79      	ldr	r3, [pc, #484]	; (801dc9c <Transform+0x960>)
 801dab8:	4413      	add	r3, r2
 801daba:	2110      	movs	r1, #16
 801dabc:	4618      	mov	r0, r3
 801dabe:	f7ff fc1b 	bl	801d2f8 <rotlFixed>
 801dac2:	4602      	mov	r2, r0
 801dac4:	68fb      	ldr	r3, [r7, #12]
 801dac6:	4413      	add	r3, r2
 801dac8:	613b      	str	r3, [r7, #16]
    MD5STEP(F3, b, c, d, a, buffer[10] + 0xbebfbc70, 23);
 801daca:	693a      	ldr	r2, [r7, #16]
 801dacc:	68fb      	ldr	r3, [r7, #12]
 801dace:	405a      	eors	r2, r3
 801dad0:	69bb      	ldr	r3, [r7, #24]
 801dad2:	405a      	eors	r2, r3
 801dad4:	697b      	ldr	r3, [r7, #20]
 801dad6:	441a      	add	r2, r3
 801dad8:	69fb      	ldr	r3, [r7, #28]
 801dada:	3328      	adds	r3, #40	; 0x28
 801dadc:	681b      	ldr	r3, [r3, #0]
 801dade:	441a      	add	r2, r3
 801dae0:	4b6f      	ldr	r3, [pc, #444]	; (801dca0 <Transform+0x964>)
 801dae2:	4413      	add	r3, r2
 801dae4:	2117      	movs	r1, #23
 801dae6:	4618      	mov	r0, r3
 801dae8:	f7ff fc06 	bl	801d2f8 <rotlFixed>
 801daec:	4602      	mov	r2, r0
 801daee:	693b      	ldr	r3, [r7, #16]
 801daf0:	4413      	add	r3, r2
 801daf2:	617b      	str	r3, [r7, #20]
    MD5STEP(F3, a, b, c, d, buffer[13] + 0x289b7ec6,  4);
 801daf4:	697a      	ldr	r2, [r7, #20]
 801daf6:	693b      	ldr	r3, [r7, #16]
 801daf8:	405a      	eors	r2, r3
 801dafa:	68fb      	ldr	r3, [r7, #12]
 801dafc:	405a      	eors	r2, r3
 801dafe:	69bb      	ldr	r3, [r7, #24]
 801db00:	441a      	add	r2, r3
 801db02:	69fb      	ldr	r3, [r7, #28]
 801db04:	3334      	adds	r3, #52	; 0x34
 801db06:	681b      	ldr	r3, [r3, #0]
 801db08:	441a      	add	r2, r3
 801db0a:	4b66      	ldr	r3, [pc, #408]	; (801dca4 <Transform+0x968>)
 801db0c:	4413      	add	r3, r2
 801db0e:	2104      	movs	r1, #4
 801db10:	4618      	mov	r0, r3
 801db12:	f7ff fbf1 	bl	801d2f8 <rotlFixed>
 801db16:	4602      	mov	r2, r0
 801db18:	697b      	ldr	r3, [r7, #20]
 801db1a:	4413      	add	r3, r2
 801db1c:	61bb      	str	r3, [r7, #24]
    MD5STEP(F3, d, a, b, c, buffer[0]  + 0xeaa127fa, 11);
 801db1e:	69ba      	ldr	r2, [r7, #24]
 801db20:	697b      	ldr	r3, [r7, #20]
 801db22:	405a      	eors	r2, r3
 801db24:	693b      	ldr	r3, [r7, #16]
 801db26:	405a      	eors	r2, r3
 801db28:	68fb      	ldr	r3, [r7, #12]
 801db2a:	441a      	add	r2, r3
 801db2c:	69fb      	ldr	r3, [r7, #28]
 801db2e:	681b      	ldr	r3, [r3, #0]
 801db30:	441a      	add	r2, r3
 801db32:	4b5d      	ldr	r3, [pc, #372]	; (801dca8 <Transform+0x96c>)
 801db34:	4413      	add	r3, r2
 801db36:	210b      	movs	r1, #11
 801db38:	4618      	mov	r0, r3
 801db3a:	f7ff fbdd 	bl	801d2f8 <rotlFixed>
 801db3e:	4602      	mov	r2, r0
 801db40:	69bb      	ldr	r3, [r7, #24]
 801db42:	4413      	add	r3, r2
 801db44:	60fb      	str	r3, [r7, #12]
    MD5STEP(F3, c, d, a, b, buffer[3]  + 0xd4ef3085, 16);
 801db46:	68fa      	ldr	r2, [r7, #12]
 801db48:	69bb      	ldr	r3, [r7, #24]
 801db4a:	405a      	eors	r2, r3
 801db4c:	697b      	ldr	r3, [r7, #20]
 801db4e:	405a      	eors	r2, r3
 801db50:	693b      	ldr	r3, [r7, #16]
 801db52:	441a      	add	r2, r3
 801db54:	69fb      	ldr	r3, [r7, #28]
 801db56:	330c      	adds	r3, #12
 801db58:	681b      	ldr	r3, [r3, #0]
 801db5a:	441a      	add	r2, r3
 801db5c:	4b53      	ldr	r3, [pc, #332]	; (801dcac <Transform+0x970>)
 801db5e:	4413      	add	r3, r2
 801db60:	2110      	movs	r1, #16
 801db62:	4618      	mov	r0, r3
 801db64:	f7ff fbc8 	bl	801d2f8 <rotlFixed>
 801db68:	4602      	mov	r2, r0
 801db6a:	68fb      	ldr	r3, [r7, #12]
 801db6c:	4413      	add	r3, r2
 801db6e:	613b      	str	r3, [r7, #16]
    MD5STEP(F3, b, c, d, a, buffer[6]  + 0x04881d05, 23);
 801db70:	693a      	ldr	r2, [r7, #16]
 801db72:	68fb      	ldr	r3, [r7, #12]
 801db74:	405a      	eors	r2, r3
 801db76:	69bb      	ldr	r3, [r7, #24]
 801db78:	405a      	eors	r2, r3
 801db7a:	697b      	ldr	r3, [r7, #20]
 801db7c:	441a      	add	r2, r3
 801db7e:	69fb      	ldr	r3, [r7, #28]
 801db80:	3318      	adds	r3, #24
 801db82:	681b      	ldr	r3, [r3, #0]
 801db84:	441a      	add	r2, r3
 801db86:	4b4a      	ldr	r3, [pc, #296]	; (801dcb0 <Transform+0x974>)
 801db88:	4413      	add	r3, r2
 801db8a:	2117      	movs	r1, #23
 801db8c:	4618      	mov	r0, r3
 801db8e:	f7ff fbb3 	bl	801d2f8 <rotlFixed>
 801db92:	4602      	mov	r2, r0
 801db94:	693b      	ldr	r3, [r7, #16]
 801db96:	4413      	add	r3, r2
 801db98:	617b      	str	r3, [r7, #20]
    MD5STEP(F3, a, b, c, d, buffer[9]  + 0xd9d4d039,  4);
 801db9a:	697a      	ldr	r2, [r7, #20]
 801db9c:	693b      	ldr	r3, [r7, #16]
 801db9e:	405a      	eors	r2, r3
 801dba0:	68fb      	ldr	r3, [r7, #12]
 801dba2:	405a      	eors	r2, r3
 801dba4:	69bb      	ldr	r3, [r7, #24]
 801dba6:	441a      	add	r2, r3
 801dba8:	69fb      	ldr	r3, [r7, #28]
 801dbaa:	3324      	adds	r3, #36	; 0x24
 801dbac:	681b      	ldr	r3, [r3, #0]
 801dbae:	441a      	add	r2, r3
 801dbb0:	4b40      	ldr	r3, [pc, #256]	; (801dcb4 <Transform+0x978>)
 801dbb2:	4413      	add	r3, r2
 801dbb4:	2104      	movs	r1, #4
 801dbb6:	4618      	mov	r0, r3
 801dbb8:	f7ff fb9e 	bl	801d2f8 <rotlFixed>
 801dbbc:	4602      	mov	r2, r0
 801dbbe:	697b      	ldr	r3, [r7, #20]
 801dbc0:	4413      	add	r3, r2
 801dbc2:	61bb      	str	r3, [r7, #24]
    MD5STEP(F3, d, a, b, c, buffer[12] + 0xe6db99e5, 11);
 801dbc4:	69ba      	ldr	r2, [r7, #24]
 801dbc6:	697b      	ldr	r3, [r7, #20]
 801dbc8:	405a      	eors	r2, r3
 801dbca:	693b      	ldr	r3, [r7, #16]
 801dbcc:	405a      	eors	r2, r3
 801dbce:	68fb      	ldr	r3, [r7, #12]
 801dbd0:	441a      	add	r2, r3
 801dbd2:	69fb      	ldr	r3, [r7, #28]
 801dbd4:	3330      	adds	r3, #48	; 0x30
 801dbd6:	681b      	ldr	r3, [r3, #0]
 801dbd8:	441a      	add	r2, r3
 801dbda:	4b37      	ldr	r3, [pc, #220]	; (801dcb8 <Transform+0x97c>)
 801dbdc:	4413      	add	r3, r2
 801dbde:	210b      	movs	r1, #11
 801dbe0:	4618      	mov	r0, r3
 801dbe2:	f7ff fb89 	bl	801d2f8 <rotlFixed>
 801dbe6:	4602      	mov	r2, r0
 801dbe8:	69bb      	ldr	r3, [r7, #24]
 801dbea:	4413      	add	r3, r2
 801dbec:	60fb      	str	r3, [r7, #12]
    MD5STEP(F3, c, d, a, b, buffer[15] + 0x1fa27cf8, 16);
 801dbee:	68fa      	ldr	r2, [r7, #12]
 801dbf0:	69bb      	ldr	r3, [r7, #24]
 801dbf2:	405a      	eors	r2, r3
 801dbf4:	697b      	ldr	r3, [r7, #20]
 801dbf6:	405a      	eors	r2, r3
 801dbf8:	693b      	ldr	r3, [r7, #16]
 801dbfa:	441a      	add	r2, r3
 801dbfc:	69fb      	ldr	r3, [r7, #28]
 801dbfe:	333c      	adds	r3, #60	; 0x3c
 801dc00:	681b      	ldr	r3, [r3, #0]
 801dc02:	441a      	add	r2, r3
 801dc04:	4b2d      	ldr	r3, [pc, #180]	; (801dcbc <Transform+0x980>)
 801dc06:	4413      	add	r3, r2
 801dc08:	2110      	movs	r1, #16
 801dc0a:	4618      	mov	r0, r3
 801dc0c:	f7ff fb74 	bl	801d2f8 <rotlFixed>
 801dc10:	4602      	mov	r2, r0
 801dc12:	68fb      	ldr	r3, [r7, #12]
 801dc14:	4413      	add	r3, r2
 801dc16:	613b      	str	r3, [r7, #16]
    MD5STEP(F3, b, c, d, a, buffer[2]  + 0xc4ac5665, 23);
 801dc18:	693a      	ldr	r2, [r7, #16]
 801dc1a:	68fb      	ldr	r3, [r7, #12]
 801dc1c:	405a      	eors	r2, r3
 801dc1e:	69bb      	ldr	r3, [r7, #24]
 801dc20:	405a      	eors	r2, r3
 801dc22:	697b      	ldr	r3, [r7, #20]
 801dc24:	441a      	add	r2, r3
 801dc26:	69fb      	ldr	r3, [r7, #28]
 801dc28:	3308      	adds	r3, #8
 801dc2a:	681b      	ldr	r3, [r3, #0]
 801dc2c:	441a      	add	r2, r3
 801dc2e:	4b24      	ldr	r3, [pc, #144]	; (801dcc0 <Transform+0x984>)
 801dc30:	4413      	add	r3, r2
 801dc32:	2117      	movs	r1, #23
 801dc34:	4618      	mov	r0, r3
 801dc36:	f7ff fb5f 	bl	801d2f8 <rotlFixed>
 801dc3a:	4602      	mov	r2, r0
 801dc3c:	693b      	ldr	r3, [r7, #16]
 801dc3e:	4413      	add	r3, r2
 801dc40:	617b      	str	r3, [r7, #20]

    MD5STEP(F4, a, b, c, d, buffer[0]  + 0xf4292244,  6);
 801dc42:	68fb      	ldr	r3, [r7, #12]
 801dc44:	43da      	mvns	r2, r3
 801dc46:	697b      	ldr	r3, [r7, #20]
 801dc48:	431a      	orrs	r2, r3
 801dc4a:	693b      	ldr	r3, [r7, #16]
 801dc4c:	405a      	eors	r2, r3
 801dc4e:	69bb      	ldr	r3, [r7, #24]
 801dc50:	441a      	add	r2, r3
 801dc52:	69fb      	ldr	r3, [r7, #28]
 801dc54:	681b      	ldr	r3, [r3, #0]
 801dc56:	441a      	add	r2, r3
 801dc58:	4b1a      	ldr	r3, [pc, #104]	; (801dcc4 <Transform+0x988>)
 801dc5a:	4413      	add	r3, r2
 801dc5c:	2106      	movs	r1, #6
 801dc5e:	4618      	mov	r0, r3
 801dc60:	f7ff fb4a 	bl	801d2f8 <rotlFixed>
 801dc64:	4602      	mov	r2, r0
 801dc66:	697b      	ldr	r3, [r7, #20]
 801dc68:	4413      	add	r3, r2
 801dc6a:	61bb      	str	r3, [r7, #24]
    MD5STEP(F4, d, a, b, c, buffer[7]  + 0x432aff97, 10);
 801dc6c:	693b      	ldr	r3, [r7, #16]
 801dc6e:	43da      	mvns	r2, r3
 801dc70:	69bb      	ldr	r3, [r7, #24]
 801dc72:	431a      	orrs	r2, r3
 801dc74:	697b      	ldr	r3, [r7, #20]
 801dc76:	405a      	eors	r2, r3
 801dc78:	68fb      	ldr	r3, [r7, #12]
 801dc7a:	441a      	add	r2, r3
 801dc7c:	69fb      	ldr	r3, [r7, #28]
 801dc7e:	331c      	adds	r3, #28
 801dc80:	e022      	b.n	801dcc8 <Transform+0x98c>
 801dc82:	bf00      	nop
 801dc84:	fffa3942 	.word	0xfffa3942
 801dc88:	8771f681 	.word	0x8771f681
 801dc8c:	6d9d6122 	.word	0x6d9d6122
 801dc90:	fde5380c 	.word	0xfde5380c
 801dc94:	a4beea44 	.word	0xa4beea44
 801dc98:	4bdecfa9 	.word	0x4bdecfa9
 801dc9c:	f6bb4b60 	.word	0xf6bb4b60
 801dca0:	bebfbc70 	.word	0xbebfbc70
 801dca4:	289b7ec6 	.word	0x289b7ec6
 801dca8:	eaa127fa 	.word	0xeaa127fa
 801dcac:	d4ef3085 	.word	0xd4ef3085
 801dcb0:	04881d05 	.word	0x04881d05
 801dcb4:	d9d4d039 	.word	0xd9d4d039
 801dcb8:	e6db99e5 	.word	0xe6db99e5
 801dcbc:	1fa27cf8 	.word	0x1fa27cf8
 801dcc0:	c4ac5665 	.word	0xc4ac5665
 801dcc4:	f4292244 	.word	0xf4292244
 801dcc8:	681b      	ldr	r3, [r3, #0]
 801dcca:	441a      	add	r2, r3
 801dccc:	4bad      	ldr	r3, [pc, #692]	; (801df84 <Transform+0xc48>)
 801dcce:	4413      	add	r3, r2
 801dcd0:	210a      	movs	r1, #10
 801dcd2:	4618      	mov	r0, r3
 801dcd4:	f7ff fb10 	bl	801d2f8 <rotlFixed>
 801dcd8:	4602      	mov	r2, r0
 801dcda:	69bb      	ldr	r3, [r7, #24]
 801dcdc:	4413      	add	r3, r2
 801dcde:	60fb      	str	r3, [r7, #12]
    MD5STEP(F4, c, d, a, b, buffer[14] + 0xab9423a7, 15);
 801dce0:	697b      	ldr	r3, [r7, #20]
 801dce2:	43da      	mvns	r2, r3
 801dce4:	68fb      	ldr	r3, [r7, #12]
 801dce6:	431a      	orrs	r2, r3
 801dce8:	69bb      	ldr	r3, [r7, #24]
 801dcea:	405a      	eors	r2, r3
 801dcec:	693b      	ldr	r3, [r7, #16]
 801dcee:	441a      	add	r2, r3
 801dcf0:	69fb      	ldr	r3, [r7, #28]
 801dcf2:	3338      	adds	r3, #56	; 0x38
 801dcf4:	681b      	ldr	r3, [r3, #0]
 801dcf6:	441a      	add	r2, r3
 801dcf8:	4ba3      	ldr	r3, [pc, #652]	; (801df88 <Transform+0xc4c>)
 801dcfa:	4413      	add	r3, r2
 801dcfc:	210f      	movs	r1, #15
 801dcfe:	4618      	mov	r0, r3
 801dd00:	f7ff fafa 	bl	801d2f8 <rotlFixed>
 801dd04:	4602      	mov	r2, r0
 801dd06:	68fb      	ldr	r3, [r7, #12]
 801dd08:	4413      	add	r3, r2
 801dd0a:	613b      	str	r3, [r7, #16]
    MD5STEP(F4, b, c, d, a, buffer[5]  + 0xfc93a039, 21);
 801dd0c:	69bb      	ldr	r3, [r7, #24]
 801dd0e:	43da      	mvns	r2, r3
 801dd10:	693b      	ldr	r3, [r7, #16]
 801dd12:	431a      	orrs	r2, r3
 801dd14:	68fb      	ldr	r3, [r7, #12]
 801dd16:	405a      	eors	r2, r3
 801dd18:	697b      	ldr	r3, [r7, #20]
 801dd1a:	441a      	add	r2, r3
 801dd1c:	69fb      	ldr	r3, [r7, #28]
 801dd1e:	3314      	adds	r3, #20
 801dd20:	681b      	ldr	r3, [r3, #0]
 801dd22:	441a      	add	r2, r3
 801dd24:	4b99      	ldr	r3, [pc, #612]	; (801df8c <Transform+0xc50>)
 801dd26:	4413      	add	r3, r2
 801dd28:	2115      	movs	r1, #21
 801dd2a:	4618      	mov	r0, r3
 801dd2c:	f7ff fae4 	bl	801d2f8 <rotlFixed>
 801dd30:	4602      	mov	r2, r0
 801dd32:	693b      	ldr	r3, [r7, #16]
 801dd34:	4413      	add	r3, r2
 801dd36:	617b      	str	r3, [r7, #20]
    MD5STEP(F4, a, b, c, d, buffer[12] + 0x655b59c3,  6);
 801dd38:	68fb      	ldr	r3, [r7, #12]
 801dd3a:	43da      	mvns	r2, r3
 801dd3c:	697b      	ldr	r3, [r7, #20]
 801dd3e:	431a      	orrs	r2, r3
 801dd40:	693b      	ldr	r3, [r7, #16]
 801dd42:	405a      	eors	r2, r3
 801dd44:	69bb      	ldr	r3, [r7, #24]
 801dd46:	441a      	add	r2, r3
 801dd48:	69fb      	ldr	r3, [r7, #28]
 801dd4a:	3330      	adds	r3, #48	; 0x30
 801dd4c:	681b      	ldr	r3, [r3, #0]
 801dd4e:	441a      	add	r2, r3
 801dd50:	4b8f      	ldr	r3, [pc, #572]	; (801df90 <Transform+0xc54>)
 801dd52:	4413      	add	r3, r2
 801dd54:	2106      	movs	r1, #6
 801dd56:	4618      	mov	r0, r3
 801dd58:	f7ff face 	bl	801d2f8 <rotlFixed>
 801dd5c:	4602      	mov	r2, r0
 801dd5e:	697b      	ldr	r3, [r7, #20]
 801dd60:	4413      	add	r3, r2
 801dd62:	61bb      	str	r3, [r7, #24]
    MD5STEP(F4, d, a, b, c, buffer[3]  + 0x8f0ccc92, 10);
 801dd64:	693b      	ldr	r3, [r7, #16]
 801dd66:	43da      	mvns	r2, r3
 801dd68:	69bb      	ldr	r3, [r7, #24]
 801dd6a:	431a      	orrs	r2, r3
 801dd6c:	697b      	ldr	r3, [r7, #20]
 801dd6e:	405a      	eors	r2, r3
 801dd70:	68fb      	ldr	r3, [r7, #12]
 801dd72:	441a      	add	r2, r3
 801dd74:	69fb      	ldr	r3, [r7, #28]
 801dd76:	330c      	adds	r3, #12
 801dd78:	681b      	ldr	r3, [r3, #0]
 801dd7a:	441a      	add	r2, r3
 801dd7c:	4b85      	ldr	r3, [pc, #532]	; (801df94 <Transform+0xc58>)
 801dd7e:	4413      	add	r3, r2
 801dd80:	210a      	movs	r1, #10
 801dd82:	4618      	mov	r0, r3
 801dd84:	f7ff fab8 	bl	801d2f8 <rotlFixed>
 801dd88:	4602      	mov	r2, r0
 801dd8a:	69bb      	ldr	r3, [r7, #24]
 801dd8c:	4413      	add	r3, r2
 801dd8e:	60fb      	str	r3, [r7, #12]
    MD5STEP(F4, c, d, a, b, buffer[10] + 0xffeff47d, 15);
 801dd90:	697b      	ldr	r3, [r7, #20]
 801dd92:	43da      	mvns	r2, r3
 801dd94:	68fb      	ldr	r3, [r7, #12]
 801dd96:	431a      	orrs	r2, r3
 801dd98:	69bb      	ldr	r3, [r7, #24]
 801dd9a:	405a      	eors	r2, r3
 801dd9c:	693b      	ldr	r3, [r7, #16]
 801dd9e:	441a      	add	r2, r3
 801dda0:	69fb      	ldr	r3, [r7, #28]
 801dda2:	3328      	adds	r3, #40	; 0x28
 801dda4:	681b      	ldr	r3, [r3, #0]
 801dda6:	441a      	add	r2, r3
 801dda8:	4b7b      	ldr	r3, [pc, #492]	; (801df98 <Transform+0xc5c>)
 801ddaa:	4413      	add	r3, r2
 801ddac:	210f      	movs	r1, #15
 801ddae:	4618      	mov	r0, r3
 801ddb0:	f7ff faa2 	bl	801d2f8 <rotlFixed>
 801ddb4:	4602      	mov	r2, r0
 801ddb6:	68fb      	ldr	r3, [r7, #12]
 801ddb8:	4413      	add	r3, r2
 801ddba:	613b      	str	r3, [r7, #16]
    MD5STEP(F4, b, c, d, a, buffer[1]  + 0x85845dd1, 21);
 801ddbc:	69bb      	ldr	r3, [r7, #24]
 801ddbe:	43da      	mvns	r2, r3
 801ddc0:	693b      	ldr	r3, [r7, #16]
 801ddc2:	431a      	orrs	r2, r3
 801ddc4:	68fb      	ldr	r3, [r7, #12]
 801ddc6:	405a      	eors	r2, r3
 801ddc8:	697b      	ldr	r3, [r7, #20]
 801ddca:	441a      	add	r2, r3
 801ddcc:	69fb      	ldr	r3, [r7, #28]
 801ddce:	3304      	adds	r3, #4
 801ddd0:	681b      	ldr	r3, [r3, #0]
 801ddd2:	441a      	add	r2, r3
 801ddd4:	4b71      	ldr	r3, [pc, #452]	; (801df9c <Transform+0xc60>)
 801ddd6:	4413      	add	r3, r2
 801ddd8:	2115      	movs	r1, #21
 801ddda:	4618      	mov	r0, r3
 801dddc:	f7ff fa8c 	bl	801d2f8 <rotlFixed>
 801dde0:	4602      	mov	r2, r0
 801dde2:	693b      	ldr	r3, [r7, #16]
 801dde4:	4413      	add	r3, r2
 801dde6:	617b      	str	r3, [r7, #20]
    MD5STEP(F4, a, b, c, d, buffer[8]  + 0x6fa87e4f,  6);
 801dde8:	68fb      	ldr	r3, [r7, #12]
 801ddea:	43da      	mvns	r2, r3
 801ddec:	697b      	ldr	r3, [r7, #20]
 801ddee:	431a      	orrs	r2, r3
 801ddf0:	693b      	ldr	r3, [r7, #16]
 801ddf2:	405a      	eors	r2, r3
 801ddf4:	69bb      	ldr	r3, [r7, #24]
 801ddf6:	441a      	add	r2, r3
 801ddf8:	69fb      	ldr	r3, [r7, #28]
 801ddfa:	3320      	adds	r3, #32
 801ddfc:	681b      	ldr	r3, [r3, #0]
 801ddfe:	441a      	add	r2, r3
 801de00:	4b67      	ldr	r3, [pc, #412]	; (801dfa0 <Transform+0xc64>)
 801de02:	4413      	add	r3, r2
 801de04:	2106      	movs	r1, #6
 801de06:	4618      	mov	r0, r3
 801de08:	f7ff fa76 	bl	801d2f8 <rotlFixed>
 801de0c:	4602      	mov	r2, r0
 801de0e:	697b      	ldr	r3, [r7, #20]
 801de10:	4413      	add	r3, r2
 801de12:	61bb      	str	r3, [r7, #24]
    MD5STEP(F4, d, a, b, c, buffer[15] + 0xfe2ce6e0, 10);
 801de14:	693b      	ldr	r3, [r7, #16]
 801de16:	43da      	mvns	r2, r3
 801de18:	69bb      	ldr	r3, [r7, #24]
 801de1a:	431a      	orrs	r2, r3
 801de1c:	697b      	ldr	r3, [r7, #20]
 801de1e:	405a      	eors	r2, r3
 801de20:	68fb      	ldr	r3, [r7, #12]
 801de22:	441a      	add	r2, r3
 801de24:	69fb      	ldr	r3, [r7, #28]
 801de26:	333c      	adds	r3, #60	; 0x3c
 801de28:	681b      	ldr	r3, [r3, #0]
 801de2a:	441a      	add	r2, r3
 801de2c:	4b5d      	ldr	r3, [pc, #372]	; (801dfa4 <Transform+0xc68>)
 801de2e:	4413      	add	r3, r2
 801de30:	210a      	movs	r1, #10
 801de32:	4618      	mov	r0, r3
 801de34:	f7ff fa60 	bl	801d2f8 <rotlFixed>
 801de38:	4602      	mov	r2, r0
 801de3a:	69bb      	ldr	r3, [r7, #24]
 801de3c:	4413      	add	r3, r2
 801de3e:	60fb      	str	r3, [r7, #12]
    MD5STEP(F4, c, d, a, b, buffer[6]  + 0xa3014314, 15);
 801de40:	697b      	ldr	r3, [r7, #20]
 801de42:	43da      	mvns	r2, r3
 801de44:	68fb      	ldr	r3, [r7, #12]
 801de46:	431a      	orrs	r2, r3
 801de48:	69bb      	ldr	r3, [r7, #24]
 801de4a:	405a      	eors	r2, r3
 801de4c:	693b      	ldr	r3, [r7, #16]
 801de4e:	441a      	add	r2, r3
 801de50:	69fb      	ldr	r3, [r7, #28]
 801de52:	3318      	adds	r3, #24
 801de54:	681b      	ldr	r3, [r3, #0]
 801de56:	441a      	add	r2, r3
 801de58:	4b53      	ldr	r3, [pc, #332]	; (801dfa8 <Transform+0xc6c>)
 801de5a:	4413      	add	r3, r2
 801de5c:	210f      	movs	r1, #15
 801de5e:	4618      	mov	r0, r3
 801de60:	f7ff fa4a 	bl	801d2f8 <rotlFixed>
 801de64:	4602      	mov	r2, r0
 801de66:	68fb      	ldr	r3, [r7, #12]
 801de68:	4413      	add	r3, r2
 801de6a:	613b      	str	r3, [r7, #16]
    MD5STEP(F4, b, c, d, a, buffer[13] + 0x4e0811a1, 21);
 801de6c:	69bb      	ldr	r3, [r7, #24]
 801de6e:	43da      	mvns	r2, r3
 801de70:	693b      	ldr	r3, [r7, #16]
 801de72:	431a      	orrs	r2, r3
 801de74:	68fb      	ldr	r3, [r7, #12]
 801de76:	405a      	eors	r2, r3
 801de78:	697b      	ldr	r3, [r7, #20]
 801de7a:	441a      	add	r2, r3
 801de7c:	69fb      	ldr	r3, [r7, #28]
 801de7e:	3334      	adds	r3, #52	; 0x34
 801de80:	681b      	ldr	r3, [r3, #0]
 801de82:	441a      	add	r2, r3
 801de84:	4b49      	ldr	r3, [pc, #292]	; (801dfac <Transform+0xc70>)
 801de86:	4413      	add	r3, r2
 801de88:	2115      	movs	r1, #21
 801de8a:	4618      	mov	r0, r3
 801de8c:	f7ff fa34 	bl	801d2f8 <rotlFixed>
 801de90:	4602      	mov	r2, r0
 801de92:	693b      	ldr	r3, [r7, #16]
 801de94:	4413      	add	r3, r2
 801de96:	617b      	str	r3, [r7, #20]
    MD5STEP(F4, a, b, c, d, buffer[4]  + 0xf7537e82,  6);
 801de98:	68fb      	ldr	r3, [r7, #12]
 801de9a:	43da      	mvns	r2, r3
 801de9c:	697b      	ldr	r3, [r7, #20]
 801de9e:	431a      	orrs	r2, r3
 801dea0:	693b      	ldr	r3, [r7, #16]
 801dea2:	405a      	eors	r2, r3
 801dea4:	69bb      	ldr	r3, [r7, #24]
 801dea6:	441a      	add	r2, r3
 801dea8:	69fb      	ldr	r3, [r7, #28]
 801deaa:	3310      	adds	r3, #16
 801deac:	681b      	ldr	r3, [r3, #0]
 801deae:	441a      	add	r2, r3
 801deb0:	4b3f      	ldr	r3, [pc, #252]	; (801dfb0 <Transform+0xc74>)
 801deb2:	4413      	add	r3, r2
 801deb4:	2106      	movs	r1, #6
 801deb6:	4618      	mov	r0, r3
 801deb8:	f7ff fa1e 	bl	801d2f8 <rotlFixed>
 801debc:	4602      	mov	r2, r0
 801debe:	697b      	ldr	r3, [r7, #20]
 801dec0:	4413      	add	r3, r2
 801dec2:	61bb      	str	r3, [r7, #24]
    MD5STEP(F4, d, a, b, c, buffer[11] + 0xbd3af235, 10);
 801dec4:	693b      	ldr	r3, [r7, #16]
 801dec6:	43da      	mvns	r2, r3
 801dec8:	69bb      	ldr	r3, [r7, #24]
 801deca:	431a      	orrs	r2, r3
 801decc:	697b      	ldr	r3, [r7, #20]
 801dece:	405a      	eors	r2, r3
 801ded0:	68fb      	ldr	r3, [r7, #12]
 801ded2:	441a      	add	r2, r3
 801ded4:	69fb      	ldr	r3, [r7, #28]
 801ded6:	332c      	adds	r3, #44	; 0x2c
 801ded8:	681b      	ldr	r3, [r3, #0]
 801deda:	441a      	add	r2, r3
 801dedc:	4b35      	ldr	r3, [pc, #212]	; (801dfb4 <Transform+0xc78>)
 801dede:	4413      	add	r3, r2
 801dee0:	210a      	movs	r1, #10
 801dee2:	4618      	mov	r0, r3
 801dee4:	f7ff fa08 	bl	801d2f8 <rotlFixed>
 801dee8:	4602      	mov	r2, r0
 801deea:	69bb      	ldr	r3, [r7, #24]
 801deec:	4413      	add	r3, r2
 801deee:	60fb      	str	r3, [r7, #12]
    MD5STEP(F4, c, d, a, b, buffer[2]  + 0x2ad7d2bb, 15);
 801def0:	697b      	ldr	r3, [r7, #20]
 801def2:	43da      	mvns	r2, r3
 801def4:	68fb      	ldr	r3, [r7, #12]
 801def6:	431a      	orrs	r2, r3
 801def8:	69bb      	ldr	r3, [r7, #24]
 801defa:	405a      	eors	r2, r3
 801defc:	693b      	ldr	r3, [r7, #16]
 801defe:	441a      	add	r2, r3
 801df00:	69fb      	ldr	r3, [r7, #28]
 801df02:	3308      	adds	r3, #8
 801df04:	681b      	ldr	r3, [r3, #0]
 801df06:	441a      	add	r2, r3
 801df08:	4b2b      	ldr	r3, [pc, #172]	; (801dfb8 <Transform+0xc7c>)
 801df0a:	4413      	add	r3, r2
 801df0c:	210f      	movs	r1, #15
 801df0e:	4618      	mov	r0, r3
 801df10:	f7ff f9f2 	bl	801d2f8 <rotlFixed>
 801df14:	4602      	mov	r2, r0
 801df16:	68fb      	ldr	r3, [r7, #12]
 801df18:	4413      	add	r3, r2
 801df1a:	613b      	str	r3, [r7, #16]
    MD5STEP(F4, b, c, d, a, buffer[9]  + 0xeb86d391, 21);
 801df1c:	69bb      	ldr	r3, [r7, #24]
 801df1e:	43da      	mvns	r2, r3
 801df20:	693b      	ldr	r3, [r7, #16]
 801df22:	431a      	orrs	r2, r3
 801df24:	68fb      	ldr	r3, [r7, #12]
 801df26:	405a      	eors	r2, r3
 801df28:	697b      	ldr	r3, [r7, #20]
 801df2a:	441a      	add	r2, r3
 801df2c:	69fb      	ldr	r3, [r7, #28]
 801df2e:	3324      	adds	r3, #36	; 0x24
 801df30:	681b      	ldr	r3, [r3, #0]
 801df32:	441a      	add	r2, r3
 801df34:	4b21      	ldr	r3, [pc, #132]	; (801dfbc <Transform+0xc80>)
 801df36:	4413      	add	r3, r2
 801df38:	2115      	movs	r1, #21
 801df3a:	4618      	mov	r0, r3
 801df3c:	f7ff f9dc 	bl	801d2f8 <rotlFixed>
 801df40:	4602      	mov	r2, r0
 801df42:	693b      	ldr	r3, [r7, #16]
 801df44:	4413      	add	r3, r2
 801df46:	617b      	str	r3, [r7, #20]

    /* Add the working vars back into digest state[]  */
    md5->digest[0] += a;
 801df48:	687b      	ldr	r3, [r7, #4]
 801df4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801df4c:	69bb      	ldr	r3, [r7, #24]
 801df4e:	441a      	add	r2, r3
 801df50:	687b      	ldr	r3, [r7, #4]
 801df52:	64da      	str	r2, [r3, #76]	; 0x4c
    md5->digest[1] += b;
 801df54:	687b      	ldr	r3, [r7, #4]
 801df56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801df58:	697b      	ldr	r3, [r7, #20]
 801df5a:	441a      	add	r2, r3
 801df5c:	687b      	ldr	r3, [r7, #4]
 801df5e:	651a      	str	r2, [r3, #80]	; 0x50
    md5->digest[2] += c;
 801df60:	687b      	ldr	r3, [r7, #4]
 801df62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801df64:	693b      	ldr	r3, [r7, #16]
 801df66:	441a      	add	r2, r3
 801df68:	687b      	ldr	r3, [r7, #4]
 801df6a:	655a      	str	r2, [r3, #84]	; 0x54
    md5->digest[3] += d;
 801df6c:	687b      	ldr	r3, [r7, #4]
 801df6e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801df70:	68fb      	ldr	r3, [r7, #12]
 801df72:	441a      	add	r2, r3
 801df74:	687b      	ldr	r3, [r7, #4]
 801df76:	659a      	str	r2, [r3, #88]	; 0x58

    return 0;
 801df78:	2300      	movs	r3, #0
}
 801df7a:	4618      	mov	r0, r3
 801df7c:	3720      	adds	r7, #32
 801df7e:	46bd      	mov	sp, r7
 801df80:	bd80      	pop	{r7, pc}
 801df82:	bf00      	nop
 801df84:	432aff97 	.word	0x432aff97
 801df88:	ab9423a7 	.word	0xab9423a7
 801df8c:	fc93a039 	.word	0xfc93a039
 801df90:	655b59c3 	.word	0x655b59c3
 801df94:	8f0ccc92 	.word	0x8f0ccc92
 801df98:	ffeff47d 	.word	0xffeff47d
 801df9c:	85845dd1 	.word	0x85845dd1
 801dfa0:	6fa87e4f 	.word	0x6fa87e4f
 801dfa4:	fe2ce6e0 	.word	0xfe2ce6e0
 801dfa8:	a3014314 	.word	0xa3014314
 801dfac:	4e0811a1 	.word	0x4e0811a1
 801dfb0:	f7537e82 	.word	0xf7537e82
 801dfb4:	bd3af235 	.word	0xbd3af235
 801dfb8:	2ad7d2bb 	.word	0x2ad7d2bb
 801dfbc:	eb86d391 	.word	0xeb86d391

0801dfc0 <AddLength>:
#endif /* NEED_SOFT_MD5 */

#ifndef HAVE_MD5_CUST_API

static WC_INLINE void AddLength(wc_Md5* md5, word32 len)
{
 801dfc0:	b480      	push	{r7}
 801dfc2:	b085      	sub	sp, #20
 801dfc4:	af00      	add	r7, sp, #0
 801dfc6:	6078      	str	r0, [r7, #4]
 801dfc8:	6039      	str	r1, [r7, #0]
    word32 tmp = md5->loLen;
 801dfca:	687b      	ldr	r3, [r7, #4]
 801dfcc:	685b      	ldr	r3, [r3, #4]
 801dfce:	60fb      	str	r3, [r7, #12]
    if ((md5->loLen += len) < tmp) {
 801dfd0:	687b      	ldr	r3, [r7, #4]
 801dfd2:	685a      	ldr	r2, [r3, #4]
 801dfd4:	683b      	ldr	r3, [r7, #0]
 801dfd6:	441a      	add	r2, r3
 801dfd8:	687b      	ldr	r3, [r7, #4]
 801dfda:	605a      	str	r2, [r3, #4]
 801dfdc:	687b      	ldr	r3, [r7, #4]
 801dfde:	685b      	ldr	r3, [r3, #4]
 801dfe0:	68fa      	ldr	r2, [r7, #12]
 801dfe2:	429a      	cmp	r2, r3
 801dfe4:	d904      	bls.n	801dff0 <AddLength+0x30>
        md5->hiLen++;                       /* carry low to high */
 801dfe6:	687b      	ldr	r3, [r7, #4]
 801dfe8:	689b      	ldr	r3, [r3, #8]
 801dfea:	1c5a      	adds	r2, r3, #1
 801dfec:	687b      	ldr	r3, [r7, #4]
 801dfee:	609a      	str	r2, [r3, #8]
    }
}
 801dff0:	bf00      	nop
 801dff2:	3714      	adds	r7, #20
 801dff4:	46bd      	mov	sp, r7
 801dff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dffa:	4770      	bx	lr

0801dffc <_InitMd5>:

static int _InitMd5(wc_Md5* md5)
{
 801dffc:	b480      	push	{r7}
 801dffe:	b085      	sub	sp, #20
 801e000:	af00      	add	r7, sp, #0
 801e002:	6078      	str	r0, [r7, #4]
    int ret = 0;
 801e004:	2300      	movs	r3, #0
 801e006:	60fb      	str	r3, [r7, #12]

    md5->digest[0] = 0x67452301L;
 801e008:	687b      	ldr	r3, [r7, #4]
 801e00a:	4a0d      	ldr	r2, [pc, #52]	; (801e040 <_InitMd5+0x44>)
 801e00c:	64da      	str	r2, [r3, #76]	; 0x4c
    md5->digest[1] = 0xefcdab89L;
 801e00e:	687b      	ldr	r3, [r7, #4]
 801e010:	4a0c      	ldr	r2, [pc, #48]	; (801e044 <_InitMd5+0x48>)
 801e012:	651a      	str	r2, [r3, #80]	; 0x50
    md5->digest[2] = 0x98badcfeL;
 801e014:	687b      	ldr	r3, [r7, #4]
 801e016:	4a0c      	ldr	r2, [pc, #48]	; (801e048 <_InitMd5+0x4c>)
 801e018:	655a      	str	r2, [r3, #84]	; 0x54
    md5->digest[3] = 0x10325476L;
 801e01a:	687b      	ldr	r3, [r7, #4]
 801e01c:	4a0b      	ldr	r2, [pc, #44]	; (801e04c <_InitMd5+0x50>)
 801e01e:	659a      	str	r2, [r3, #88]	; 0x58

    md5->buffLen = 0;
 801e020:	687b      	ldr	r3, [r7, #4]
 801e022:	2200      	movs	r2, #0
 801e024:	601a      	str	r2, [r3, #0]
    md5->loLen   = 0;
 801e026:	687b      	ldr	r3, [r7, #4]
 801e028:	2200      	movs	r2, #0
 801e02a:	605a      	str	r2, [r3, #4]
    md5->hiLen   = 0;
 801e02c:	687b      	ldr	r3, [r7, #4]
 801e02e:	2200      	movs	r2, #0
 801e030:	609a      	str	r2, [r3, #8]
#ifdef WOLFSSL_HASH_FLAGS
    md5->flags = 0;
#endif

    return ret;
 801e032:	68fb      	ldr	r3, [r7, #12]
}
 801e034:	4618      	mov	r0, r3
 801e036:	3714      	adds	r7, #20
 801e038:	46bd      	mov	sp, r7
 801e03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e03e:	4770      	bx	lr
 801e040:	67452301 	.word	0x67452301
 801e044:	efcdab89 	.word	0xefcdab89
 801e048:	98badcfe 	.word	0x98badcfe
 801e04c:	10325476 	.word	0x10325476

0801e050 <wc_InitMd5_ex>:

int wc_InitMd5_ex(wc_Md5* md5, void* heap, int devId)
{
 801e050:	b580      	push	{r7, lr}
 801e052:	b086      	sub	sp, #24
 801e054:	af00      	add	r7, sp, #0
 801e056:	60f8      	str	r0, [r7, #12]
 801e058:	60b9      	str	r1, [r7, #8]
 801e05a:	607a      	str	r2, [r7, #4]
    int ret = 0;
 801e05c:	2300      	movs	r3, #0
 801e05e:	617b      	str	r3, [r7, #20]

    if (md5 == NULL)
 801e060:	68fb      	ldr	r3, [r7, #12]
 801e062:	2b00      	cmp	r3, #0
 801e064:	d102      	bne.n	801e06c <wc_InitMd5_ex+0x1c>
        return BAD_FUNC_ARG;
 801e066:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801e06a:	e00c      	b.n	801e086 <wc_InitMd5_ex+0x36>

    md5->heap = heap;
 801e06c:	68fb      	ldr	r3, [r7, #12]
 801e06e:	68ba      	ldr	r2, [r7, #8]
 801e070:	65da      	str	r2, [r3, #92]	; 0x5c

    ret = _InitMd5(md5);
 801e072:	68f8      	ldr	r0, [r7, #12]
 801e074:	f7ff ffc2 	bl	801dffc <_InitMd5>
 801e078:	6178      	str	r0, [r7, #20]
    if (ret != 0)
 801e07a:	697b      	ldr	r3, [r7, #20]
 801e07c:	2b00      	cmp	r3, #0
 801e07e:	d001      	beq.n	801e084 <wc_InitMd5_ex+0x34>
        return ret;
 801e080:	697b      	ldr	r3, [r7, #20]
 801e082:	e000      	b.n	801e086 <wc_InitMd5_ex+0x36>
    ret = wolfAsync_DevCtxInit(&md5->asyncDev, WOLFSSL_ASYNC_MARKER_MD5,
                               md5->heap, devId);
#else
    (void)devId;
#endif
    return ret;
 801e084:	697b      	ldr	r3, [r7, #20]
}
 801e086:	4618      	mov	r0, r3
 801e088:	3718      	adds	r7, #24
 801e08a:	46bd      	mov	sp, r7
 801e08c:	bd80      	pop	{r7, pc}

0801e08e <wc_Md5Update>:

/* do block size increments/updates */
int wc_Md5Update(wc_Md5* md5, const byte* data, word32 len)
{
 801e08e:	b580      	push	{r7, lr}
 801e090:	b088      	sub	sp, #32
 801e092:	af00      	add	r7, sp, #0
 801e094:	60f8      	str	r0, [r7, #12]
 801e096:	60b9      	str	r1, [r7, #8]
 801e098:	607a      	str	r2, [r7, #4]
    int ret = 0;
 801e09a:	2300      	movs	r3, #0
 801e09c:	61fb      	str	r3, [r7, #28]
    word32 blocksLen;
    byte* local;

    if (md5 == NULL || (data == NULL && len > 0)) {
 801e09e:	68fb      	ldr	r3, [r7, #12]
 801e0a0:	2b00      	cmp	r3, #0
 801e0a2:	d005      	beq.n	801e0b0 <wc_Md5Update+0x22>
 801e0a4:	68bb      	ldr	r3, [r7, #8]
 801e0a6:	2b00      	cmp	r3, #0
 801e0a8:	d105      	bne.n	801e0b6 <wc_Md5Update+0x28>
 801e0aa:	687b      	ldr	r3, [r7, #4]
 801e0ac:	2b00      	cmp	r3, #0
 801e0ae:	d002      	beq.n	801e0b6 <wc_Md5Update+0x28>
        return BAD_FUNC_ARG;
 801e0b0:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801e0b4:	e06d      	b.n	801e192 <wc_Md5Update+0x104>
#endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    /* check that internal buffLen is valid */
    if (md5->buffLen >= WC_MD5_BLOCK_SIZE)
 801e0b6:	68fb      	ldr	r3, [r7, #12]
 801e0b8:	681b      	ldr	r3, [r3, #0]
 801e0ba:	2b3f      	cmp	r3, #63	; 0x3f
 801e0bc:	d902      	bls.n	801e0c4 <wc_Md5Update+0x36>
        return BUFFER_E;
 801e0be:	f06f 0383 	mvn.w	r3, #131	; 0x83
 801e0c2:	e066      	b.n	801e192 <wc_Md5Update+0x104>

    if (data == NULL && len == 0) {
 801e0c4:	68bb      	ldr	r3, [r7, #8]
 801e0c6:	2b00      	cmp	r3, #0
 801e0c8:	d104      	bne.n	801e0d4 <wc_Md5Update+0x46>
 801e0ca:	687b      	ldr	r3, [r7, #4]
 801e0cc:	2b00      	cmp	r3, #0
 801e0ce:	d101      	bne.n	801e0d4 <wc_Md5Update+0x46>
        /* valid, but do nothing */
        return 0;
 801e0d0:	2300      	movs	r3, #0
 801e0d2:	e05e      	b.n	801e192 <wc_Md5Update+0x104>
    }

    /* add length for final */
    AddLength(md5, len);
 801e0d4:	6879      	ldr	r1, [r7, #4]
 801e0d6:	68f8      	ldr	r0, [r7, #12]
 801e0d8:	f7ff ff72 	bl	801dfc0 <AddLength>

    local = (byte*)md5->buffer;
 801e0dc:	68fb      	ldr	r3, [r7, #12]
 801e0de:	330c      	adds	r3, #12
 801e0e0:	61bb      	str	r3, [r7, #24]

    /* process any remainder from previous operation */
    if (md5->buffLen > 0) {
 801e0e2:	68fb      	ldr	r3, [r7, #12]
 801e0e4:	681b      	ldr	r3, [r3, #0]
 801e0e6:	2b00      	cmp	r3, #0
 801e0e8:	d044      	beq.n	801e174 <wc_Md5Update+0xe6>
        blocksLen = min(len, WC_MD5_BLOCK_SIZE - md5->buffLen);
 801e0ea:	68fb      	ldr	r3, [r7, #12]
 801e0ec:	681b      	ldr	r3, [r3, #0]
 801e0ee:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801e0f2:	4619      	mov	r1, r3
 801e0f4:	6878      	ldr	r0, [r7, #4]
 801e0f6:	f7ff f910 	bl	801d31a <min>
 801e0fa:	6178      	str	r0, [r7, #20]
        XMEMCPY(&local[md5->buffLen], data, blocksLen);
 801e0fc:	68fb      	ldr	r3, [r7, #12]
 801e0fe:	681b      	ldr	r3, [r3, #0]
 801e100:	69ba      	ldr	r2, [r7, #24]
 801e102:	4413      	add	r3, r2
 801e104:	697a      	ldr	r2, [r7, #20]
 801e106:	68b9      	ldr	r1, [r7, #8]
 801e108:	4618      	mov	r0, r3
 801e10a:	f00c f9dd 	bl	802a4c8 <memcpy>

        md5->buffLen += blocksLen;
 801e10e:	68fb      	ldr	r3, [r7, #12]
 801e110:	681a      	ldr	r2, [r3, #0]
 801e112:	697b      	ldr	r3, [r7, #20]
 801e114:	441a      	add	r2, r3
 801e116:	68fb      	ldr	r3, [r7, #12]
 801e118:	601a      	str	r2, [r3, #0]
        data         += blocksLen;
 801e11a:	68ba      	ldr	r2, [r7, #8]
 801e11c:	697b      	ldr	r3, [r7, #20]
 801e11e:	4413      	add	r3, r2
 801e120:	60bb      	str	r3, [r7, #8]
        len          -= blocksLen;
 801e122:	687a      	ldr	r2, [r7, #4]
 801e124:	697b      	ldr	r3, [r7, #20]
 801e126:	1ad3      	subs	r3, r2, r3
 801e128:	607b      	str	r3, [r7, #4]

        if (md5->buffLen == WC_MD5_BLOCK_SIZE) {
 801e12a:	68fb      	ldr	r3, [r7, #12]
 801e12c:	681b      	ldr	r3, [r3, #0]
 801e12e:	2b40      	cmp	r3, #64	; 0x40
 801e130:	d120      	bne.n	801e174 <wc_Md5Update+0xe6>
        #if defined(BIG_ENDIAN_ORDER) && !defined(FREESCALE_MMCAU_SHA)
            ByteReverseWords(md5->buffer, md5->buffer, WC_MD5_BLOCK_SIZE);
        #endif

            ret = XTRANSFORM(md5, (const byte*)local);
 801e132:	69b9      	ldr	r1, [r7, #24]
 801e134:	68f8      	ldr	r0, [r7, #12]
 801e136:	f7ff f901 	bl	801d33c <Transform>
 801e13a:	61f8      	str	r0, [r7, #28]
            if (ret != 0)
 801e13c:	69fb      	ldr	r3, [r7, #28]
 801e13e:	2b00      	cmp	r3, #0
 801e140:	d001      	beq.n	801e146 <wc_Md5Update+0xb8>
                return ret;
 801e142:	69fb      	ldr	r3, [r7, #28]
 801e144:	e025      	b.n	801e192 <wc_Md5Update+0x104>

            md5->buffLen = 0;
 801e146:	68fb      	ldr	r3, [r7, #12]
 801e148:	2200      	movs	r2, #0
 801e14a:	601a      	str	r2, [r3, #0]
        XTRANSFORM_LEN(md5, data, blocksLen);
        data += blocksLen;
        len  -= blocksLen;
    }
#else
    while (len >= WC_MD5_BLOCK_SIZE) {
 801e14c:	e012      	b.n	801e174 <wc_Md5Update+0xe6>
        word32* local32 = md5->buffer;
 801e14e:	68fb      	ldr	r3, [r7, #12]
 801e150:	330c      	adds	r3, #12
 801e152:	613b      	str	r3, [r7, #16]
            local32 = (word32*)data;
        }
        else
    #endif
        {
            XMEMCPY(local32, data, WC_MD5_BLOCK_SIZE);
 801e154:	2240      	movs	r2, #64	; 0x40
 801e156:	68b9      	ldr	r1, [r7, #8]
 801e158:	6938      	ldr	r0, [r7, #16]
 801e15a:	f00c f9b5 	bl	802a4c8 <memcpy>
        }

        data += WC_MD5_BLOCK_SIZE;
 801e15e:	68bb      	ldr	r3, [r7, #8]
 801e160:	3340      	adds	r3, #64	; 0x40
 801e162:	60bb      	str	r3, [r7, #8]
        len  -= WC_MD5_BLOCK_SIZE;
 801e164:	687b      	ldr	r3, [r7, #4]
 801e166:	3b40      	subs	r3, #64	; 0x40
 801e168:	607b      	str	r3, [r7, #4]

    #if defined(BIG_ENDIAN_ORDER) && !defined(FREESCALE_MMCAU_SHA)
        ByteReverseWords(local32, local32, WC_MD5_BLOCK_SIZE);
    #endif

        ret = XTRANSFORM(md5, (const byte*)local32);
 801e16a:	6939      	ldr	r1, [r7, #16]
 801e16c:	68f8      	ldr	r0, [r7, #12]
 801e16e:	f7ff f8e5 	bl	801d33c <Transform>
 801e172:	61f8      	str	r0, [r7, #28]
    while (len >= WC_MD5_BLOCK_SIZE) {
 801e174:	687b      	ldr	r3, [r7, #4]
 801e176:	2b3f      	cmp	r3, #63	; 0x3f
 801e178:	d8e9      	bhi.n	801e14e <wc_Md5Update+0xc0>
    }
#endif /* XTRANSFORM_LEN */

    /* save remainder */
    if (len > 0) {
 801e17a:	687b      	ldr	r3, [r7, #4]
 801e17c:	2b00      	cmp	r3, #0
 801e17e:	d007      	beq.n	801e190 <wc_Md5Update+0x102>
        XMEMCPY(local, data, len);
 801e180:	687a      	ldr	r2, [r7, #4]
 801e182:	68b9      	ldr	r1, [r7, #8]
 801e184:	69b8      	ldr	r0, [r7, #24]
 801e186:	f00c f99f 	bl	802a4c8 <memcpy>
        md5->buffLen = len;
 801e18a:	68fb      	ldr	r3, [r7, #12]
 801e18c:	687a      	ldr	r2, [r7, #4]
 801e18e:	601a      	str	r2, [r3, #0]
    }

    return ret;
 801e190:	69fb      	ldr	r3, [r7, #28]
}
 801e192:	4618      	mov	r0, r3
 801e194:	3720      	adds	r7, #32
 801e196:	46bd      	mov	sp, r7
 801e198:	bd80      	pop	{r7, pc}

0801e19a <wc_Md5Final>:

int wc_Md5Final(wc_Md5* md5, byte* hash)
{
 801e19a:	b580      	push	{r7, lr}
 801e19c:	b084      	sub	sp, #16
 801e19e:	af00      	add	r7, sp, #0
 801e1a0:	6078      	str	r0, [r7, #4]
 801e1a2:	6039      	str	r1, [r7, #0]
    byte* local;

    if (md5 == NULL || hash == NULL) {
 801e1a4:	687b      	ldr	r3, [r7, #4]
 801e1a6:	2b00      	cmp	r3, #0
 801e1a8:	d002      	beq.n	801e1b0 <wc_Md5Final+0x16>
 801e1aa:	683b      	ldr	r3, [r7, #0]
 801e1ac:	2b00      	cmp	r3, #0
 801e1ae:	d102      	bne.n	801e1b6 <wc_Md5Final+0x1c>
        return BAD_FUNC_ARG;
 801e1b0:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801e1b4:	e05a      	b.n	801e26c <wc_Md5Final+0xd2>
        return IntelQaSymMd5(&md5->asyncDev, hash, NULL, WC_MD5_DIGEST_SIZE);
#endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    local = (byte*)md5->buffer;
 801e1b6:	687b      	ldr	r3, [r7, #4]
 801e1b8:	330c      	adds	r3, #12
 801e1ba:	60fb      	str	r3, [r7, #12]

    local[md5->buffLen++] = 0x80;  /* add 1 */
 801e1bc:	687b      	ldr	r3, [r7, #4]
 801e1be:	681b      	ldr	r3, [r3, #0]
 801e1c0:	1c59      	adds	r1, r3, #1
 801e1c2:	687a      	ldr	r2, [r7, #4]
 801e1c4:	6011      	str	r1, [r2, #0]
 801e1c6:	68fa      	ldr	r2, [r7, #12]
 801e1c8:	4413      	add	r3, r2
 801e1ca:	2280      	movs	r2, #128	; 0x80
 801e1cc:	701a      	strb	r2, [r3, #0]

    /* pad with zeros */
    if (md5->buffLen > WC_MD5_PAD_SIZE) {
 801e1ce:	687b      	ldr	r3, [r7, #4]
 801e1d0:	681b      	ldr	r3, [r3, #0]
 801e1d2:	2b38      	cmp	r3, #56	; 0x38
 801e1d4:	d915      	bls.n	801e202 <wc_Md5Final+0x68>
        XMEMSET(&local[md5->buffLen], 0, WC_MD5_BLOCK_SIZE - md5->buffLen);
 801e1d6:	687b      	ldr	r3, [r7, #4]
 801e1d8:	681b      	ldr	r3, [r3, #0]
 801e1da:	68fa      	ldr	r2, [r7, #12]
 801e1dc:	18d0      	adds	r0, r2, r3
 801e1de:	687b      	ldr	r3, [r7, #4]
 801e1e0:	681b      	ldr	r3, [r3, #0]
 801e1e2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801e1e6:	461a      	mov	r2, r3
 801e1e8:	2100      	movs	r1, #0
 801e1ea:	f00c f995 	bl	802a518 <memset>
        md5->buffLen += WC_MD5_BLOCK_SIZE - md5->buffLen;
 801e1ee:	687b      	ldr	r3, [r7, #4]
 801e1f0:	2240      	movs	r2, #64	; 0x40
 801e1f2:	601a      	str	r2, [r3, #0]

#if defined(BIG_ENDIAN_ORDER) && !defined(FREESCALE_MMCAU_SHA)
        ByteReverseWords(md5->buffer, md5->buffer, WC_MD5_BLOCK_SIZE);
#endif
        XTRANSFORM(md5, local);
 801e1f4:	68f9      	ldr	r1, [r7, #12]
 801e1f6:	6878      	ldr	r0, [r7, #4]
 801e1f8:	f7ff f8a0 	bl	801d33c <Transform>
        md5->buffLen = 0;
 801e1fc:	687b      	ldr	r3, [r7, #4]
 801e1fe:	2200      	movs	r2, #0
 801e200:	601a      	str	r2, [r3, #0]
    }
    XMEMSET(&local[md5->buffLen], 0, WC_MD5_PAD_SIZE - md5->buffLen);
 801e202:	687b      	ldr	r3, [r7, #4]
 801e204:	681b      	ldr	r3, [r3, #0]
 801e206:	68fa      	ldr	r2, [r7, #12]
 801e208:	18d0      	adds	r0, r2, r3
 801e20a:	687b      	ldr	r3, [r7, #4]
 801e20c:	681b      	ldr	r3, [r3, #0]
 801e20e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801e212:	461a      	mov	r2, r3
 801e214:	2100      	movs	r1, #0
 801e216:	f00c f97f 	bl	802a518 <memset>
#if defined(BIG_ENDIAN_ORDER) && !defined(FREESCALE_MMCAU_SHA)
    ByteReverseWords(md5->buffer, md5->buffer, WC_MD5_BLOCK_SIZE);
#endif

    /* put lengths in bits */
    md5->hiLen = (md5->loLen >> (8 * sizeof(md5->loLen) - 3)) +
 801e21a:	687b      	ldr	r3, [r7, #4]
 801e21c:	685b      	ldr	r3, [r3, #4]
 801e21e:	0f5a      	lsrs	r2, r3, #29
                 (md5->hiLen << 3);
 801e220:	687b      	ldr	r3, [r7, #4]
 801e222:	689b      	ldr	r3, [r3, #8]
 801e224:	00db      	lsls	r3, r3, #3
    md5->hiLen = (md5->loLen >> (8 * sizeof(md5->loLen) - 3)) +
 801e226:	441a      	add	r2, r3
 801e228:	687b      	ldr	r3, [r7, #4]
 801e22a:	609a      	str	r2, [r3, #8]
    md5->loLen = md5->loLen << 3;
 801e22c:	687b      	ldr	r3, [r7, #4]
 801e22e:	685b      	ldr	r3, [r3, #4]
 801e230:	00da      	lsls	r2, r3, #3
 801e232:	687b      	ldr	r3, [r7, #4]
 801e234:	605a      	str	r2, [r3, #4]

    /* store lengths */
    /* ! length ordering dependent on digest endian type ! */
    XMEMCPY(&local[WC_MD5_PAD_SIZE], &md5->loLen, sizeof(word32));
 801e236:	68fb      	ldr	r3, [r7, #12]
 801e238:	3338      	adds	r3, #56	; 0x38
 801e23a:	687a      	ldr	r2, [r7, #4]
 801e23c:	3204      	adds	r2, #4
 801e23e:	6812      	ldr	r2, [r2, #0]
 801e240:	601a      	str	r2, [r3, #0]
    XMEMCPY(&local[WC_MD5_PAD_SIZE + sizeof(word32)], &md5->hiLen, sizeof(word32));
 801e242:	68fb      	ldr	r3, [r7, #12]
 801e244:	333c      	adds	r3, #60	; 0x3c
 801e246:	687a      	ldr	r2, [r7, #4]
 801e248:	3208      	adds	r2, #8
 801e24a:	6812      	ldr	r2, [r2, #0]
 801e24c:	601a      	str	r2, [r3, #0]

    /* final transform and result to hash */
    XTRANSFORM(md5, local);
 801e24e:	68f9      	ldr	r1, [r7, #12]
 801e250:	6878      	ldr	r0, [r7, #4]
 801e252:	f7ff f873 	bl	801d33c <Transform>
#ifdef BIG_ENDIAN_ORDER
    ByteReverseWords(md5->digest, md5->digest, WC_MD5_DIGEST_SIZE);
#endif
    XMEMCPY(hash, md5->digest, WC_MD5_DIGEST_SIZE);
 801e256:	687b      	ldr	r3, [r7, #4]
 801e258:	334c      	adds	r3, #76	; 0x4c
 801e25a:	2210      	movs	r2, #16
 801e25c:	4619      	mov	r1, r3
 801e25e:	6838      	ldr	r0, [r7, #0]
 801e260:	f00c f932 	bl	802a4c8 <memcpy>

    return _InitMd5(md5); /* reset state */
 801e264:	6878      	ldr	r0, [r7, #4]
 801e266:	f7ff fec9 	bl	801dffc <_InitMd5>
 801e26a:	4603      	mov	r3, r0
}
 801e26c:	4618      	mov	r0, r3
 801e26e:	3710      	adds	r7, #16
 801e270:	46bd      	mov	sp, r7
 801e272:	bd80      	pop	{r7, pc}

0801e274 <wc_InitMd5>:
#endif /* !HAVE_MD5_CUST_API */


int wc_InitMd5(wc_Md5* md5)
{
 801e274:	b580      	push	{r7, lr}
 801e276:	b082      	sub	sp, #8
 801e278:	af00      	add	r7, sp, #0
 801e27a:	6078      	str	r0, [r7, #4]
    if (md5 == NULL) {
 801e27c:	687b      	ldr	r3, [r7, #4]
 801e27e:	2b00      	cmp	r3, #0
 801e280:	d102      	bne.n	801e288 <wc_InitMd5+0x14>
        return BAD_FUNC_ARG;
 801e282:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801e286:	e006      	b.n	801e296 <wc_InitMd5+0x22>
    }
    return wc_InitMd5_ex(md5, NULL, INVALID_DEVID);
 801e288:	f06f 0201 	mvn.w	r2, #1
 801e28c:	2100      	movs	r1, #0
 801e28e:	6878      	ldr	r0, [r7, #4]
 801e290:	f7ff fede 	bl	801e050 <wc_InitMd5_ex>
 801e294:	4603      	mov	r3, r0
}
 801e296:	4618      	mov	r0, r3
 801e298:	3708      	adds	r7, #8
 801e29a:	46bd      	mov	sp, r7
 801e29c:	bd80      	pop	{r7, pc}

0801e29e <wc_Md5Free>:

void wc_Md5Free(wc_Md5* md5)
{
 801e29e:	b480      	push	{r7}
 801e2a0:	b083      	sub	sp, #12
 801e2a2:	af00      	add	r7, sp, #0
 801e2a4:	6078      	str	r0, [r7, #4]
    if (md5 == NULL)
 801e2a6:	687b      	ldr	r3, [r7, #4]
 801e2a8:	2b00      	cmp	r3, #0
#endif /* WOLFSSL_ASYNC_CRYPT */

#ifdef WOLFSSL_PIC32MZ_HASH
    wc_Md5Pic32Free(md5);
#endif
}
 801e2aa:	370c      	adds	r7, #12
 801e2ac:	46bd      	mov	sp, r7
 801e2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2b2:	4770      	bx	lr

0801e2b4 <wolfSSL_Malloc>:
#ifdef WOLFSSL_DEBUG_MEMORY
void* wolfSSL_Malloc(size_t size, const char* func, unsigned int line)
#else
void* wolfSSL_Malloc(size_t size)
#endif
{
 801e2b4:	b580      	push	{r7, lr}
 801e2b6:	b084      	sub	sp, #16
 801e2b8:	af00      	add	r7, sp, #0
 801e2ba:	6078      	str	r0, [r7, #4]
    void* res = 0;
 801e2bc:	2300      	movs	r3, #0
 801e2be:	60fb      	str	r3, [r7, #12]

    if (malloc_function) {
 801e2c0:	4b09      	ldr	r3, [pc, #36]	; (801e2e8 <wolfSSL_Malloc+0x34>)
 801e2c2:	681b      	ldr	r3, [r3, #0]
 801e2c4:	2b00      	cmp	r3, #0
 801e2c6:	d005      	beq.n	801e2d4 <wolfSSL_Malloc+0x20>
    #ifdef WOLFSSL_DEBUG_MEMORY
        res = malloc_function(size, func, line);
    #else
        res = malloc_function(size);
 801e2c8:	4b07      	ldr	r3, [pc, #28]	; (801e2e8 <wolfSSL_Malloc+0x34>)
 801e2ca:	681b      	ldr	r3, [r3, #0]
 801e2cc:	6878      	ldr	r0, [r7, #4]
 801e2ce:	4798      	blx	r3
 801e2d0:	60f8      	str	r0, [r7, #12]
 801e2d2:	e004      	b.n	801e2de <wolfSSL_Malloc+0x2a>
            WOLFSSL_MSG("Malloc too big!");
            return NULL;
        }
        #endif

        res = malloc(size);
 801e2d4:	6878      	ldr	r0, [r7, #4]
 801e2d6:	f00c f8e7 	bl	802a4a8 <malloc>
 801e2da:	4603      	mov	r3, r0
 801e2dc:	60fb      	str	r3, [r7, #12]
        gMemFailCount = gMemFailCountSeed; /* reset */
        return NULL;
    }
#endif

    return res;
 801e2de:	68fb      	ldr	r3, [r7, #12]
}
 801e2e0:	4618      	mov	r0, r3
 801e2e2:	3710      	adds	r7, #16
 801e2e4:	46bd      	mov	sp, r7
 801e2e6:	bd80      	pop	{r7, pc}
 801e2e8:	2401e54c 	.word	0x2401e54c

0801e2ec <wolfSSL_Free>:
#ifdef WOLFSSL_DEBUG_MEMORY
void wolfSSL_Free(void *ptr, const char* func, unsigned int line)
#else
void wolfSSL_Free(void *ptr)
#endif
{
 801e2ec:	b580      	push	{r7, lr}
 801e2ee:	b082      	sub	sp, #8
 801e2f0:	af00      	add	r7, sp, #0
 801e2f2:	6078      	str	r0, [r7, #4]
    (void)func;
    (void)line;
#endif
#endif

    if (free_function) {
 801e2f4:	4b07      	ldr	r3, [pc, #28]	; (801e314 <wolfSSL_Free+0x28>)
 801e2f6:	681b      	ldr	r3, [r3, #0]
 801e2f8:	2b00      	cmp	r3, #0
 801e2fa:	d004      	beq.n	801e306 <wolfSSL_Free+0x1a>
    #ifdef WOLFSSL_DEBUG_MEMORY
        free_function(ptr, func, line);
    #else
        free_function(ptr);
 801e2fc:	4b05      	ldr	r3, [pc, #20]	; (801e314 <wolfSSL_Free+0x28>)
 801e2fe:	681b      	ldr	r3, [r3, #0]
 801e300:	6878      	ldr	r0, [r7, #4]
 801e302:	4798      	blx	r3
        free(ptr);
    #else
        WOLFSSL_MSG("No free available");
    #endif
    }
}
 801e304:	e002      	b.n	801e30c <wolfSSL_Free+0x20>
        free(ptr);
 801e306:	6878      	ldr	r0, [r7, #4]
 801e308:	f00c f8d6 	bl	802a4b8 <free>
}
 801e30c:	bf00      	nop
 801e30e:	3708      	adds	r7, #8
 801e310:	46bd      	mov	sp, r7
 801e312:	bd80      	pop	{r7, pc}
 801e314:	2401e550 	.word	0x2401e550

0801e318 <rotlFixed>:
    {
 801e318:	b480      	push	{r7}
 801e31a:	b083      	sub	sp, #12
 801e31c:	af00      	add	r7, sp, #0
 801e31e:	6078      	str	r0, [r7, #4]
 801e320:	6039      	str	r1, [r7, #0]
        return (x << y) | (x >> (sizeof(y) * 8 - y));
 801e322:	687a      	ldr	r2, [r7, #4]
 801e324:	683b      	ldr	r3, [r7, #0]
 801e326:	f1c3 0320 	rsb	r3, r3, #32
 801e32a:	fa62 f303 	ror.w	r3, r2, r3
    }
 801e32e:	4618      	mov	r0, r3
 801e330:	370c      	adds	r7, #12
 801e332:	46bd      	mov	sp, r7
 801e334:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e338:	4770      	bx	lr

0801e33a <ByteReverseWord32>:
{
 801e33a:	b580      	push	{r7, lr}
 801e33c:	b082      	sub	sp, #8
 801e33e:	af00      	add	r7, sp, #0
 801e340:	6078      	str	r0, [r7, #4]
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
 801e342:	687b      	ldr	r3, [r7, #4]
 801e344:	0a1b      	lsrs	r3, r3, #8
 801e346:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 801e34a:	687b      	ldr	r3, [r7, #4]
 801e34c:	021b      	lsls	r3, r3, #8
 801e34e:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 801e352:	4313      	orrs	r3, r2
 801e354:	607b      	str	r3, [r7, #4]
    return rotlFixed(value, 16U);
 801e356:	2110      	movs	r1, #16
 801e358:	6878      	ldr	r0, [r7, #4]
 801e35a:	f7ff ffdd 	bl	801e318 <rotlFixed>
 801e35e:	4603      	mov	r3, r0
}
 801e360:	4618      	mov	r0, r3
 801e362:	3708      	adds	r7, #8
 801e364:	46bd      	mov	sp, r7
 801e366:	bd80      	pop	{r7, pc}

0801e368 <ByteReverseWords>:
{
 801e368:	b590      	push	{r4, r7, lr}
 801e36a:	b087      	sub	sp, #28
 801e36c:	af00      	add	r7, sp, #0
 801e36e:	60f8      	str	r0, [r7, #12]
 801e370:	60b9      	str	r1, [r7, #8]
 801e372:	607a      	str	r2, [r7, #4]
    word32 count = byteCount/(word32)sizeof(word32), i;
 801e374:	687b      	ldr	r3, [r7, #4]
 801e376:	089b      	lsrs	r3, r3, #2
 801e378:	613b      	str	r3, [r7, #16]
    for (i = 0; i < count; i++)
 801e37a:	2300      	movs	r3, #0
 801e37c:	617b      	str	r3, [r7, #20]
 801e37e:	e010      	b.n	801e3a2 <ByteReverseWords+0x3a>
        out[i] = ByteReverseWord32(in[i]);
 801e380:	697b      	ldr	r3, [r7, #20]
 801e382:	009b      	lsls	r3, r3, #2
 801e384:	68ba      	ldr	r2, [r7, #8]
 801e386:	4413      	add	r3, r2
 801e388:	6819      	ldr	r1, [r3, #0]
 801e38a:	697b      	ldr	r3, [r7, #20]
 801e38c:	009b      	lsls	r3, r3, #2
 801e38e:	68fa      	ldr	r2, [r7, #12]
 801e390:	18d4      	adds	r4, r2, r3
 801e392:	4608      	mov	r0, r1
 801e394:	f7ff ffd1 	bl	801e33a <ByteReverseWord32>
 801e398:	4603      	mov	r3, r0
 801e39a:	6023      	str	r3, [r4, #0]
    for (i = 0; i < count; i++)
 801e39c:	697b      	ldr	r3, [r7, #20]
 801e39e:	3301      	adds	r3, #1
 801e3a0:	617b      	str	r3, [r7, #20]
 801e3a2:	697a      	ldr	r2, [r7, #20]
 801e3a4:	693b      	ldr	r3, [r7, #16]
 801e3a6:	429a      	cmp	r2, r3
 801e3a8:	d3ea      	bcc.n	801e380 <ByteReverseWords+0x18>
}
 801e3aa:	bf00      	nop
 801e3ac:	bf00      	nop
 801e3ae:	371c      	adds	r7, #28
 801e3b0:	46bd      	mov	sp, r7
 801e3b2:	bd90      	pop	{r4, r7, pc}

0801e3b4 <min>:
    {
 801e3b4:	b480      	push	{r7}
 801e3b6:	b083      	sub	sp, #12
 801e3b8:	af00      	add	r7, sp, #0
 801e3ba:	6078      	str	r0, [r7, #4]
 801e3bc:	6039      	str	r1, [r7, #0]
        return a > b ? b : a;
 801e3be:	687a      	ldr	r2, [r7, #4]
 801e3c0:	683b      	ldr	r3, [r7, #0]
 801e3c2:	4293      	cmp	r3, r2
 801e3c4:	bf28      	it	cs
 801e3c6:	4613      	movcs	r3, r2
    }
 801e3c8:	4618      	mov	r0, r3
 801e3ca:	370c      	adds	r7, #12
 801e3cc:	46bd      	mov	sp, r7
 801e3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3d2:	4770      	bx	lr

0801e3d4 <InitSha>:
#else
    /* Software implementation */
    #define USE_SHA_SOFTWARE_IMPL

    static int InitSha(wc_Sha* sha)
    {
 801e3d4:	b480      	push	{r7}
 801e3d6:	b085      	sub	sp, #20
 801e3d8:	af00      	add	r7, sp, #0
 801e3da:	6078      	str	r0, [r7, #4]
        int ret = 0;
 801e3dc:	2300      	movs	r3, #0
 801e3de:	60fb      	str	r3, [r7, #12]

        sha->digest[0] = 0x67452301L;
 801e3e0:	687b      	ldr	r3, [r7, #4]
 801e3e2:	4a0f      	ldr	r2, [pc, #60]	; (801e420 <InitSha+0x4c>)
 801e3e4:	64da      	str	r2, [r3, #76]	; 0x4c
        sha->digest[1] = 0xEFCDAB89L;
 801e3e6:	687b      	ldr	r3, [r7, #4]
 801e3e8:	4a0e      	ldr	r2, [pc, #56]	; (801e424 <InitSha+0x50>)
 801e3ea:	651a      	str	r2, [r3, #80]	; 0x50
        sha->digest[2] = 0x98BADCFEL;
 801e3ec:	687b      	ldr	r3, [r7, #4]
 801e3ee:	4a0e      	ldr	r2, [pc, #56]	; (801e428 <InitSha+0x54>)
 801e3f0:	655a      	str	r2, [r3, #84]	; 0x54
        sha->digest[3] = 0x10325476L;
 801e3f2:	687b      	ldr	r3, [r7, #4]
 801e3f4:	4a0d      	ldr	r2, [pc, #52]	; (801e42c <InitSha+0x58>)
 801e3f6:	659a      	str	r2, [r3, #88]	; 0x58
        sha->digest[4] = 0xC3D2E1F0L;
 801e3f8:	687b      	ldr	r3, [r7, #4]
 801e3fa:	4a0d      	ldr	r2, [pc, #52]	; (801e430 <InitSha+0x5c>)
 801e3fc:	65da      	str	r2, [r3, #92]	; 0x5c

        sha->buffLen = 0;
 801e3fe:	687b      	ldr	r3, [r7, #4]
 801e400:	2200      	movs	r2, #0
 801e402:	601a      	str	r2, [r3, #0]
        sha->loLen   = 0;
 801e404:	687b      	ldr	r3, [r7, #4]
 801e406:	2200      	movs	r2, #0
 801e408:	605a      	str	r2, [r3, #4]
        sha->hiLen   = 0;
 801e40a:	687b      	ldr	r3, [r7, #4]
 801e40c:	2200      	movs	r2, #0
 801e40e:	609a      	str	r2, [r3, #8]
    #ifdef WOLFSSL_HASH_FLAGS
        sha->flags = 0;
    #endif

        return ret;
 801e410:	68fb      	ldr	r3, [r7, #12]
    }
 801e412:	4618      	mov	r0, r3
 801e414:	3714      	adds	r7, #20
 801e416:	46bd      	mov	sp, r7
 801e418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e41c:	4770      	bx	lr
 801e41e:	bf00      	nop
 801e420:	67452301 	.word	0x67452301
 801e424:	efcdab89 	.word	0xefcdab89
 801e428:	98badcfe 	.word	0x98badcfe
 801e42c:	10325476 	.word	0x10325476
 801e430:	c3d2e1f0 	.word	0xc3d2e1f0

0801e434 <AddLength>:

/* Software implementation */
#ifdef USE_SHA_SOFTWARE_IMPL

static WC_INLINE void AddLength(wc_Sha* sha, word32 len)
{
 801e434:	b480      	push	{r7}
 801e436:	b085      	sub	sp, #20
 801e438:	af00      	add	r7, sp, #0
 801e43a:	6078      	str	r0, [r7, #4]
 801e43c:	6039      	str	r1, [r7, #0]
    word32 tmp = sha->loLen;
 801e43e:	687b      	ldr	r3, [r7, #4]
 801e440:	685b      	ldr	r3, [r3, #4]
 801e442:	60fb      	str	r3, [r7, #12]
    if ((sha->loLen += len) < tmp)
 801e444:	687b      	ldr	r3, [r7, #4]
 801e446:	685a      	ldr	r2, [r3, #4]
 801e448:	683b      	ldr	r3, [r7, #0]
 801e44a:	441a      	add	r2, r3
 801e44c:	687b      	ldr	r3, [r7, #4]
 801e44e:	605a      	str	r2, [r3, #4]
 801e450:	687b      	ldr	r3, [r7, #4]
 801e452:	685b      	ldr	r3, [r3, #4]
 801e454:	68fa      	ldr	r2, [r7, #12]
 801e456:	429a      	cmp	r2, r3
 801e458:	d904      	bls.n	801e464 <AddLength+0x30>
        sha->hiLen++;                       /* carry low to high */
 801e45a:	687b      	ldr	r3, [r7, #4]
 801e45c:	689b      	ldr	r3, [r3, #8]
 801e45e:	1c5a      	adds	r2, r3, #1
 801e460:	687b      	ldr	r3, [r7, #4]
 801e462:	609a      	str	r2, [r3, #8]
}
 801e464:	bf00      	nop
 801e466:	3714      	adds	r7, #20
 801e468:	46bd      	mov	sp, r7
 801e46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e46e:	4770      	bx	lr

0801e470 <Transform>:
        rotlFixed((v),5); (w) = rotlFixed((w),30);
    #define R4(v,w,x,y,z,i) (z)+= f4((w),(x),(y)) + blk1((i)) + 0xCA62C1D6+ \
        rotlFixed((v),5); (w) = rotlFixed((w),30);

    static int Transform(wc_Sha* sha, const byte* data)
    {
 801e470:	b590      	push	{r4, r7, lr}
 801e472:	b099      	sub	sp, #100	; 0x64
 801e474:	af00      	add	r7, sp, #0
 801e476:	6078      	str	r0, [r7, #4]
 801e478:	6039      	str	r1, [r7, #0]
        word32 W[WC_SHA_BLOCK_SIZE / sizeof(word32)];

        /* Copy context->state[] to working vars */
        word32 a = sha->digest[0];
 801e47a:	687b      	ldr	r3, [r7, #4]
 801e47c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e47e:	65fb      	str	r3, [r7, #92]	; 0x5c
        word32 b = sha->digest[1];
 801e480:	687b      	ldr	r3, [r7, #4]
 801e482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e484:	65bb      	str	r3, [r7, #88]	; 0x58
        word32 c = sha->digest[2];
 801e486:	687b      	ldr	r3, [r7, #4]
 801e488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e48a:	657b      	str	r3, [r7, #84]	; 0x54
        word32 d = sha->digest[3];
 801e48c:	687b      	ldr	r3, [r7, #4]
 801e48e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801e490:	653b      	str	r3, [r7, #80]	; 0x50
        word32 e = sha->digest[4];
 801e492:	687b      	ldr	r3, [r7, #4]
 801e494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e496:	64fb      	str	r3, [r7, #76]	; 0x4c
            t = e; e = d; d = c; c = b; b = a; a = t;
        }
    #else
        /* nearly 1 K bigger in code size but 25% faster */
        /* 4 rounds of 20 operations each. Loop unrolled. */
        R0(a,b,c,d,e, 0); R0(e,a,b,c,d, 1); R0(d,e,a,b,c, 2); R0(c,d,e,a,b, 3);
 801e498:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801e49a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e49c:	405a      	eors	r2, r3
 801e49e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801e4a0:	401a      	ands	r2, r3
 801e4a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e4a4:	405a      	eors	r2, r3
 801e4a6:	683b      	ldr	r3, [r7, #0]
 801e4a8:	681b      	ldr	r3, [r3, #0]
 801e4aa:	60fb      	str	r3, [r7, #12]
 801e4ac:	68fb      	ldr	r3, [r7, #12]
 801e4ae:	18d4      	adds	r4, r2, r3
 801e4b0:	2105      	movs	r1, #5
 801e4b2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801e4b4:	f7ff ff30 	bl	801e318 <rotlFixed>
 801e4b8:	4603      	mov	r3, r0
 801e4ba:	18e2      	adds	r2, r4, r3
 801e4bc:	4ba9      	ldr	r3, [pc, #676]	; (801e764 <Transform+0x2f4>)
 801e4be:	4413      	add	r3, r2
 801e4c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e4c2:	4413      	add	r3, r2
 801e4c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 801e4c6:	211e      	movs	r1, #30
 801e4c8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801e4ca:	f7ff ff25 	bl	801e318 <rotlFixed>
 801e4ce:	65b8      	str	r0, [r7, #88]	; 0x58
 801e4d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801e4d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e4d4:	405a      	eors	r2, r3
 801e4d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e4d8:	401a      	ands	r2, r3
 801e4da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e4dc:	405a      	eors	r2, r3
 801e4de:	683b      	ldr	r3, [r7, #0]
 801e4e0:	685b      	ldr	r3, [r3, #4]
 801e4e2:	613b      	str	r3, [r7, #16]
 801e4e4:	693b      	ldr	r3, [r7, #16]
 801e4e6:	18d4      	adds	r4, r2, r3
 801e4e8:	2105      	movs	r1, #5
 801e4ea:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801e4ec:	f7ff ff14 	bl	801e318 <rotlFixed>
 801e4f0:	4603      	mov	r3, r0
 801e4f2:	18e2      	adds	r2, r4, r3
 801e4f4:	4b9b      	ldr	r3, [pc, #620]	; (801e764 <Transform+0x2f4>)
 801e4f6:	4413      	add	r3, r2
 801e4f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801e4fa:	4413      	add	r3, r2
 801e4fc:	653b      	str	r3, [r7, #80]	; 0x50
 801e4fe:	211e      	movs	r1, #30
 801e500:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801e502:	f7ff ff09 	bl	801e318 <rotlFixed>
 801e506:	65f8      	str	r0, [r7, #92]	; 0x5c
 801e508:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801e50a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801e50c:	405a      	eors	r2, r3
 801e50e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e510:	401a      	ands	r2, r3
 801e512:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801e514:	405a      	eors	r2, r3
 801e516:	683b      	ldr	r3, [r7, #0]
 801e518:	689b      	ldr	r3, [r3, #8]
 801e51a:	617b      	str	r3, [r7, #20]
 801e51c:	697b      	ldr	r3, [r7, #20]
 801e51e:	18d4      	adds	r4, r2, r3
 801e520:	2105      	movs	r1, #5
 801e522:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801e524:	f7ff fef8 	bl	801e318 <rotlFixed>
 801e528:	4603      	mov	r3, r0
 801e52a:	18e2      	adds	r2, r4, r3
 801e52c:	4b8d      	ldr	r3, [pc, #564]	; (801e764 <Transform+0x2f4>)
 801e52e:	4413      	add	r3, r2
 801e530:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801e532:	4413      	add	r3, r2
 801e534:	657b      	str	r3, [r7, #84]	; 0x54
 801e536:	211e      	movs	r1, #30
 801e538:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801e53a:	f7ff feed 	bl	801e318 <rotlFixed>
 801e53e:	64f8      	str	r0, [r7, #76]	; 0x4c
 801e540:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e544:	405a      	eors	r2, r3
 801e546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e548:	401a      	ands	r2, r3
 801e54a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e54c:	405a      	eors	r2, r3
 801e54e:	683b      	ldr	r3, [r7, #0]
 801e550:	68db      	ldr	r3, [r3, #12]
 801e552:	61bb      	str	r3, [r7, #24]
 801e554:	69bb      	ldr	r3, [r7, #24]
 801e556:	18d4      	adds	r4, r2, r3
 801e558:	2105      	movs	r1, #5
 801e55a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801e55c:	f7ff fedc 	bl	801e318 <rotlFixed>
 801e560:	4603      	mov	r3, r0
 801e562:	18e2      	adds	r2, r4, r3
 801e564:	4b7f      	ldr	r3, [pc, #508]	; (801e764 <Transform+0x2f4>)
 801e566:	4413      	add	r3, r2
 801e568:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801e56a:	4413      	add	r3, r2
 801e56c:	65bb      	str	r3, [r7, #88]	; 0x58
 801e56e:	211e      	movs	r1, #30
 801e570:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801e572:	f7ff fed1 	bl	801e318 <rotlFixed>
 801e576:	6538      	str	r0, [r7, #80]	; 0x50
        R0(b,c,d,e,a, 4); R0(a,b,c,d,e, 5); R0(e,a,b,c,d, 6); R0(d,e,a,b,c, 7);
 801e578:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801e57a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e57c:	405a      	eors	r2, r3
 801e57e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e580:	401a      	ands	r2, r3
 801e582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e584:	405a      	eors	r2, r3
 801e586:	683b      	ldr	r3, [r7, #0]
 801e588:	691b      	ldr	r3, [r3, #16]
 801e58a:	61fb      	str	r3, [r7, #28]
 801e58c:	69fb      	ldr	r3, [r7, #28]
 801e58e:	18d4      	adds	r4, r2, r3
 801e590:	2105      	movs	r1, #5
 801e592:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801e594:	f7ff fec0 	bl	801e318 <rotlFixed>
 801e598:	4603      	mov	r3, r0
 801e59a:	18e2      	adds	r2, r4, r3
 801e59c:	4b71      	ldr	r3, [pc, #452]	; (801e764 <Transform+0x2f4>)
 801e59e:	4413      	add	r3, r2
 801e5a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801e5a2:	4413      	add	r3, r2
 801e5a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 801e5a6:	211e      	movs	r1, #30
 801e5a8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801e5aa:	f7ff feb5 	bl	801e318 <rotlFixed>
 801e5ae:	6578      	str	r0, [r7, #84]	; 0x54
 801e5b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801e5b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e5b4:	405a      	eors	r2, r3
 801e5b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801e5b8:	401a      	ands	r2, r3
 801e5ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e5bc:	405a      	eors	r2, r3
 801e5be:	683b      	ldr	r3, [r7, #0]
 801e5c0:	695b      	ldr	r3, [r3, #20]
 801e5c2:	623b      	str	r3, [r7, #32]
 801e5c4:	6a3b      	ldr	r3, [r7, #32]
 801e5c6:	18d4      	adds	r4, r2, r3
 801e5c8:	2105      	movs	r1, #5
 801e5ca:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801e5cc:	f7ff fea4 	bl	801e318 <rotlFixed>
 801e5d0:	4603      	mov	r3, r0
 801e5d2:	18e2      	adds	r2, r4, r3
 801e5d4:	4b63      	ldr	r3, [pc, #396]	; (801e764 <Transform+0x2f4>)
 801e5d6:	4413      	add	r3, r2
 801e5d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e5da:	4413      	add	r3, r2
 801e5dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 801e5de:	211e      	movs	r1, #30
 801e5e0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801e5e2:	f7ff fe99 	bl	801e318 <rotlFixed>
 801e5e6:	65b8      	str	r0, [r7, #88]	; 0x58
 801e5e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801e5ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e5ec:	405a      	eors	r2, r3
 801e5ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e5f0:	401a      	ands	r2, r3
 801e5f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e5f4:	405a      	eors	r2, r3
 801e5f6:	683b      	ldr	r3, [r7, #0]
 801e5f8:	699b      	ldr	r3, [r3, #24]
 801e5fa:	627b      	str	r3, [r7, #36]	; 0x24
 801e5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e5fe:	18d4      	adds	r4, r2, r3
 801e600:	2105      	movs	r1, #5
 801e602:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801e604:	f7ff fe88 	bl	801e318 <rotlFixed>
 801e608:	4603      	mov	r3, r0
 801e60a:	18e2      	adds	r2, r4, r3
 801e60c:	4b55      	ldr	r3, [pc, #340]	; (801e764 <Transform+0x2f4>)
 801e60e:	4413      	add	r3, r2
 801e610:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801e612:	4413      	add	r3, r2
 801e614:	653b      	str	r3, [r7, #80]	; 0x50
 801e616:	211e      	movs	r1, #30
 801e618:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801e61a:	f7ff fe7d 	bl	801e318 <rotlFixed>
 801e61e:	65f8      	str	r0, [r7, #92]	; 0x5c
 801e620:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801e622:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801e624:	405a      	eors	r2, r3
 801e626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e628:	401a      	ands	r2, r3
 801e62a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801e62c:	405a      	eors	r2, r3
 801e62e:	683b      	ldr	r3, [r7, #0]
 801e630:	69db      	ldr	r3, [r3, #28]
 801e632:	62bb      	str	r3, [r7, #40]	; 0x28
 801e634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e636:	18d4      	adds	r4, r2, r3
 801e638:	2105      	movs	r1, #5
 801e63a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801e63c:	f7ff fe6c 	bl	801e318 <rotlFixed>
 801e640:	4603      	mov	r3, r0
 801e642:	18e2      	adds	r2, r4, r3
 801e644:	4b47      	ldr	r3, [pc, #284]	; (801e764 <Transform+0x2f4>)
 801e646:	4413      	add	r3, r2
 801e648:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801e64a:	4413      	add	r3, r2
 801e64c:	657b      	str	r3, [r7, #84]	; 0x54
 801e64e:	211e      	movs	r1, #30
 801e650:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801e652:	f7ff fe61 	bl	801e318 <rotlFixed>
 801e656:	64f8      	str	r0, [r7, #76]	; 0x4c
        R0(c,d,e,a,b, 8); R0(b,c,d,e,a, 9); R0(a,b,c,d,e,10); R0(e,a,b,c,d,11);
 801e658:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e65a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e65c:	405a      	eors	r2, r3
 801e65e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e660:	401a      	ands	r2, r3
 801e662:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e664:	405a      	eors	r2, r3
 801e666:	683b      	ldr	r3, [r7, #0]
 801e668:	6a1b      	ldr	r3, [r3, #32]
 801e66a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e66e:	18d4      	adds	r4, r2, r3
 801e670:	2105      	movs	r1, #5
 801e672:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801e674:	f7ff fe50 	bl	801e318 <rotlFixed>
 801e678:	4603      	mov	r3, r0
 801e67a:	18e2      	adds	r2, r4, r3
 801e67c:	4b39      	ldr	r3, [pc, #228]	; (801e764 <Transform+0x2f4>)
 801e67e:	4413      	add	r3, r2
 801e680:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801e682:	4413      	add	r3, r2
 801e684:	65bb      	str	r3, [r7, #88]	; 0x58
 801e686:	211e      	movs	r1, #30
 801e688:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801e68a:	f7ff fe45 	bl	801e318 <rotlFixed>
 801e68e:	6538      	str	r0, [r7, #80]	; 0x50
 801e690:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801e692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e694:	405a      	eors	r2, r3
 801e696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e698:	401a      	ands	r2, r3
 801e69a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e69c:	405a      	eors	r2, r3
 801e69e:	683b      	ldr	r3, [r7, #0]
 801e6a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e6a2:	633b      	str	r3, [r7, #48]	; 0x30
 801e6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e6a6:	18d4      	adds	r4, r2, r3
 801e6a8:	2105      	movs	r1, #5
 801e6aa:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801e6ac:	f7ff fe34 	bl	801e318 <rotlFixed>
 801e6b0:	4603      	mov	r3, r0
 801e6b2:	18e2      	adds	r2, r4, r3
 801e6b4:	4b2b      	ldr	r3, [pc, #172]	; (801e764 <Transform+0x2f4>)
 801e6b6:	4413      	add	r3, r2
 801e6b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801e6ba:	4413      	add	r3, r2
 801e6bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 801e6be:	211e      	movs	r1, #30
 801e6c0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801e6c2:	f7ff fe29 	bl	801e318 <rotlFixed>
 801e6c6:	6578      	str	r0, [r7, #84]	; 0x54
 801e6c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801e6ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e6cc:	405a      	eors	r2, r3
 801e6ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801e6d0:	401a      	ands	r2, r3
 801e6d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e6d4:	405a      	eors	r2, r3
 801e6d6:	683b      	ldr	r3, [r7, #0]
 801e6d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e6da:	637b      	str	r3, [r7, #52]	; 0x34
 801e6dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e6de:	18d4      	adds	r4, r2, r3
 801e6e0:	2105      	movs	r1, #5
 801e6e2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801e6e4:	f7ff fe18 	bl	801e318 <rotlFixed>
 801e6e8:	4603      	mov	r3, r0
 801e6ea:	18e2      	adds	r2, r4, r3
 801e6ec:	4b1d      	ldr	r3, [pc, #116]	; (801e764 <Transform+0x2f4>)
 801e6ee:	4413      	add	r3, r2
 801e6f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e6f2:	4413      	add	r3, r2
 801e6f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 801e6f6:	211e      	movs	r1, #30
 801e6f8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801e6fa:	f7ff fe0d 	bl	801e318 <rotlFixed>
 801e6fe:	65b8      	str	r0, [r7, #88]	; 0x58
 801e700:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801e702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e704:	405a      	eors	r2, r3
 801e706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e708:	401a      	ands	r2, r3
 801e70a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e70c:	405a      	eors	r2, r3
 801e70e:	683b      	ldr	r3, [r7, #0]
 801e710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e712:	63bb      	str	r3, [r7, #56]	; 0x38
 801e714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e716:	18d4      	adds	r4, r2, r3
 801e718:	2105      	movs	r1, #5
 801e71a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801e71c:	f7ff fdfc 	bl	801e318 <rotlFixed>
 801e720:	4603      	mov	r3, r0
 801e722:	18e2      	adds	r2, r4, r3
 801e724:	4b0f      	ldr	r3, [pc, #60]	; (801e764 <Transform+0x2f4>)
 801e726:	4413      	add	r3, r2
 801e728:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801e72a:	4413      	add	r3, r2
 801e72c:	653b      	str	r3, [r7, #80]	; 0x50
 801e72e:	211e      	movs	r1, #30
 801e730:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801e732:	f7ff fdf1 	bl	801e318 <rotlFixed>
 801e736:	65f8      	str	r0, [r7, #92]	; 0x5c
        R0(d,e,a,b,c,12); R0(c,d,e,a,b,13); R0(b,c,d,e,a,14); R0(a,b,c,d,e,15);
 801e738:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801e73a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801e73c:	405a      	eors	r2, r3
 801e73e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e740:	401a      	ands	r2, r3
 801e742:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801e744:	405a      	eors	r2, r3
 801e746:	683b      	ldr	r3, [r7, #0]
 801e748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e74a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801e74c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e74e:	18d4      	adds	r4, r2, r3
 801e750:	2105      	movs	r1, #5
 801e752:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801e754:	f7ff fde0 	bl	801e318 <rotlFixed>
 801e758:	4603      	mov	r3, r0
 801e75a:	18e2      	adds	r2, r4, r3
 801e75c:	4b01      	ldr	r3, [pc, #4]	; (801e764 <Transform+0x2f4>)
 801e75e:	4413      	add	r3, r2
 801e760:	e002      	b.n	801e768 <Transform+0x2f8>
 801e762:	bf00      	nop
 801e764:	5a827999 	.word	0x5a827999
 801e768:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801e76a:	4413      	add	r3, r2
 801e76c:	657b      	str	r3, [r7, #84]	; 0x54
 801e76e:	211e      	movs	r1, #30
 801e770:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801e772:	f7ff fdd1 	bl	801e318 <rotlFixed>
 801e776:	64f8      	str	r0, [r7, #76]	; 0x4c
 801e778:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e77a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e77c:	405a      	eors	r2, r3
 801e77e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e780:	401a      	ands	r2, r3
 801e782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e784:	405a      	eors	r2, r3
 801e786:	683b      	ldr	r3, [r7, #0]
 801e788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e78a:	643b      	str	r3, [r7, #64]	; 0x40
 801e78c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e78e:	18d4      	adds	r4, r2, r3
 801e790:	2105      	movs	r1, #5
 801e792:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801e794:	f7ff fdc0 	bl	801e318 <rotlFixed>
 801e798:	4603      	mov	r3, r0
 801e79a:	18e2      	adds	r2, r4, r3
 801e79c:	4bb2      	ldr	r3, [pc, #712]	; (801ea68 <Transform+0x5f8>)
 801e79e:	4413      	add	r3, r2
 801e7a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801e7a2:	4413      	add	r3, r2
 801e7a4:	65bb      	str	r3, [r7, #88]	; 0x58
 801e7a6:	211e      	movs	r1, #30
 801e7a8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801e7aa:	f7ff fdb5 	bl	801e318 <rotlFixed>
 801e7ae:	6538      	str	r0, [r7, #80]	; 0x50
 801e7b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801e7b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e7b4:	405a      	eors	r2, r3
 801e7b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e7b8:	401a      	ands	r2, r3
 801e7ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e7bc:	405a      	eors	r2, r3
 801e7be:	683b      	ldr	r3, [r7, #0]
 801e7c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e7c2:	647b      	str	r3, [r7, #68]	; 0x44
 801e7c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e7c6:	18d4      	adds	r4, r2, r3
 801e7c8:	2105      	movs	r1, #5
 801e7ca:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801e7cc:	f7ff fda4 	bl	801e318 <rotlFixed>
 801e7d0:	4603      	mov	r3, r0
 801e7d2:	18e2      	adds	r2, r4, r3
 801e7d4:	4ba4      	ldr	r3, [pc, #656]	; (801ea68 <Transform+0x5f8>)
 801e7d6:	4413      	add	r3, r2
 801e7d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801e7da:	4413      	add	r3, r2
 801e7dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 801e7de:	211e      	movs	r1, #30
 801e7e0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801e7e2:	f7ff fd99 	bl	801e318 <rotlFixed>
 801e7e6:	6578      	str	r0, [r7, #84]	; 0x54
 801e7e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801e7ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e7ec:	405a      	eors	r2, r3
 801e7ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801e7f0:	401a      	ands	r2, r3
 801e7f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e7f4:	405a      	eors	r2, r3
 801e7f6:	683b      	ldr	r3, [r7, #0]
 801e7f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e7fa:	64bb      	str	r3, [r7, #72]	; 0x48
 801e7fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e7fe:	18d4      	adds	r4, r2, r3
 801e800:	2105      	movs	r1, #5
 801e802:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801e804:	f7ff fd88 	bl	801e318 <rotlFixed>
 801e808:	4603      	mov	r3, r0
 801e80a:	18e2      	adds	r2, r4, r3
 801e80c:	4b96      	ldr	r3, [pc, #600]	; (801ea68 <Transform+0x5f8>)
 801e80e:	4413      	add	r3, r2
 801e810:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e812:	4413      	add	r3, r2
 801e814:	64fb      	str	r3, [r7, #76]	; 0x4c
 801e816:	211e      	movs	r1, #30
 801e818:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801e81a:	f7ff fd7d 	bl	801e318 <rotlFixed>
 801e81e:	65b8      	str	r0, [r7, #88]	; 0x58

        R1(e,a,b,c,d,16); R1(d,e,a,b,c,17); R1(c,d,e,a,b,18); R1(b,c,d,e,a,19);
 801e820:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801e822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e824:	405a      	eors	r2, r3
 801e826:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e828:	401a      	ands	r2, r3
 801e82a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e82c:	ea82 0403 	eor.w	r4, r2, r3
 801e830:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801e832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e834:	405a      	eors	r2, r3
 801e836:	697b      	ldr	r3, [r7, #20]
 801e838:	405a      	eors	r2, r3
 801e83a:	68fb      	ldr	r3, [r7, #12]
 801e83c:	4053      	eors	r3, r2
 801e83e:	2101      	movs	r1, #1
 801e840:	4618      	mov	r0, r3
 801e842:	f7ff fd69 	bl	801e318 <rotlFixed>
 801e846:	4603      	mov	r3, r0
 801e848:	60fb      	str	r3, [r7, #12]
 801e84a:	68fb      	ldr	r3, [r7, #12]
 801e84c:	441c      	add	r4, r3
 801e84e:	2105      	movs	r1, #5
 801e850:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801e852:	f7ff fd61 	bl	801e318 <rotlFixed>
 801e856:	4603      	mov	r3, r0
 801e858:	18e2      	adds	r2, r4, r3
 801e85a:	4b83      	ldr	r3, [pc, #524]	; (801ea68 <Transform+0x5f8>)
 801e85c:	4413      	add	r3, r2
 801e85e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801e860:	4413      	add	r3, r2
 801e862:	653b      	str	r3, [r7, #80]	; 0x50
 801e864:	211e      	movs	r1, #30
 801e866:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801e868:	f7ff fd56 	bl	801e318 <rotlFixed>
 801e86c:	65f8      	str	r0, [r7, #92]	; 0x5c
 801e86e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801e870:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801e872:	405a      	eors	r2, r3
 801e874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e876:	401a      	ands	r2, r3
 801e878:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801e87a:	ea82 0403 	eor.w	r4, r2, r3
 801e87e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801e880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e882:	405a      	eors	r2, r3
 801e884:	69bb      	ldr	r3, [r7, #24]
 801e886:	405a      	eors	r2, r3
 801e888:	693b      	ldr	r3, [r7, #16]
 801e88a:	4053      	eors	r3, r2
 801e88c:	2101      	movs	r1, #1
 801e88e:	4618      	mov	r0, r3
 801e890:	f7ff fd42 	bl	801e318 <rotlFixed>
 801e894:	4603      	mov	r3, r0
 801e896:	613b      	str	r3, [r7, #16]
 801e898:	693b      	ldr	r3, [r7, #16]
 801e89a:	441c      	add	r4, r3
 801e89c:	2105      	movs	r1, #5
 801e89e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801e8a0:	f7ff fd3a 	bl	801e318 <rotlFixed>
 801e8a4:	4603      	mov	r3, r0
 801e8a6:	18e2      	adds	r2, r4, r3
 801e8a8:	4b6f      	ldr	r3, [pc, #444]	; (801ea68 <Transform+0x5f8>)
 801e8aa:	4413      	add	r3, r2
 801e8ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801e8ae:	4413      	add	r3, r2
 801e8b0:	657b      	str	r3, [r7, #84]	; 0x54
 801e8b2:	211e      	movs	r1, #30
 801e8b4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801e8b6:	f7ff fd2f 	bl	801e318 <rotlFixed>
 801e8ba:	64f8      	str	r0, [r7, #76]	; 0x4c
 801e8bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e8be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e8c0:	405a      	eors	r2, r3
 801e8c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e8c4:	401a      	ands	r2, r3
 801e8c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e8c8:	ea82 0403 	eor.w	r4, r2, r3
 801e8cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801e8ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e8d0:	405a      	eors	r2, r3
 801e8d2:	69fb      	ldr	r3, [r7, #28]
 801e8d4:	405a      	eors	r2, r3
 801e8d6:	697b      	ldr	r3, [r7, #20]
 801e8d8:	4053      	eors	r3, r2
 801e8da:	2101      	movs	r1, #1
 801e8dc:	4618      	mov	r0, r3
 801e8de:	f7ff fd1b 	bl	801e318 <rotlFixed>
 801e8e2:	4603      	mov	r3, r0
 801e8e4:	617b      	str	r3, [r7, #20]
 801e8e6:	697b      	ldr	r3, [r7, #20]
 801e8e8:	441c      	add	r4, r3
 801e8ea:	2105      	movs	r1, #5
 801e8ec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801e8ee:	f7ff fd13 	bl	801e318 <rotlFixed>
 801e8f2:	4603      	mov	r3, r0
 801e8f4:	18e2      	adds	r2, r4, r3
 801e8f6:	4b5c      	ldr	r3, [pc, #368]	; (801ea68 <Transform+0x5f8>)
 801e8f8:	4413      	add	r3, r2
 801e8fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801e8fc:	4413      	add	r3, r2
 801e8fe:	65bb      	str	r3, [r7, #88]	; 0x58
 801e900:	211e      	movs	r1, #30
 801e902:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801e904:	f7ff fd08 	bl	801e318 <rotlFixed>
 801e908:	6538      	str	r0, [r7, #80]	; 0x50
 801e90a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801e90c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e90e:	405a      	eors	r2, r3
 801e910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e912:	401a      	ands	r2, r3
 801e914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e916:	ea82 0403 	eor.w	r4, r2, r3
 801e91a:	68fa      	ldr	r2, [r7, #12]
 801e91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e91e:	405a      	eors	r2, r3
 801e920:	6a3b      	ldr	r3, [r7, #32]
 801e922:	405a      	eors	r2, r3
 801e924:	69bb      	ldr	r3, [r7, #24]
 801e926:	4053      	eors	r3, r2
 801e928:	2101      	movs	r1, #1
 801e92a:	4618      	mov	r0, r3
 801e92c:	f7ff fcf4 	bl	801e318 <rotlFixed>
 801e930:	4603      	mov	r3, r0
 801e932:	61bb      	str	r3, [r7, #24]
 801e934:	69bb      	ldr	r3, [r7, #24]
 801e936:	441c      	add	r4, r3
 801e938:	2105      	movs	r1, #5
 801e93a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801e93c:	f7ff fcec 	bl	801e318 <rotlFixed>
 801e940:	4603      	mov	r3, r0
 801e942:	18e2      	adds	r2, r4, r3
 801e944:	4b48      	ldr	r3, [pc, #288]	; (801ea68 <Transform+0x5f8>)
 801e946:	4413      	add	r3, r2
 801e948:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801e94a:	4413      	add	r3, r2
 801e94c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801e94e:	211e      	movs	r1, #30
 801e950:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801e952:	f7ff fce1 	bl	801e318 <rotlFixed>
 801e956:	6578      	str	r0, [r7, #84]	; 0x54

        R2(a,b,c,d,e,20); R2(e,a,b,c,d,21); R2(d,e,a,b,c,22); R2(c,d,e,a,b,23);
 801e958:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801e95a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e95c:	405a      	eors	r2, r3
 801e95e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e960:	ea82 0403 	eor.w	r4, r2, r3
 801e964:	693a      	ldr	r2, [r7, #16]
 801e966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e968:	405a      	eors	r2, r3
 801e96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e96c:	405a      	eors	r2, r3
 801e96e:	69fb      	ldr	r3, [r7, #28]
 801e970:	4053      	eors	r3, r2
 801e972:	2101      	movs	r1, #1
 801e974:	4618      	mov	r0, r3
 801e976:	f7ff fccf 	bl	801e318 <rotlFixed>
 801e97a:	4603      	mov	r3, r0
 801e97c:	61fb      	str	r3, [r7, #28]
 801e97e:	69fb      	ldr	r3, [r7, #28]
 801e980:	441c      	add	r4, r3
 801e982:	2105      	movs	r1, #5
 801e984:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801e986:	f7ff fcc7 	bl	801e318 <rotlFixed>
 801e98a:	4603      	mov	r3, r0
 801e98c:	18e2      	adds	r2, r4, r3
 801e98e:	4b37      	ldr	r3, [pc, #220]	; (801ea6c <Transform+0x5fc>)
 801e990:	4413      	add	r3, r2
 801e992:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e994:	4413      	add	r3, r2
 801e996:	64fb      	str	r3, [r7, #76]	; 0x4c
 801e998:	211e      	movs	r1, #30
 801e99a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801e99c:	f7ff fcbc 	bl	801e318 <rotlFixed>
 801e9a0:	65b8      	str	r0, [r7, #88]	; 0x58
 801e9a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801e9a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801e9a6:	405a      	eors	r2, r3
 801e9a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e9aa:	ea82 0403 	eor.w	r4, r2, r3
 801e9ae:	697a      	ldr	r2, [r7, #20]
 801e9b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e9b2:	405a      	eors	r2, r3
 801e9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e9b6:	405a      	eors	r2, r3
 801e9b8:	6a3b      	ldr	r3, [r7, #32]
 801e9ba:	4053      	eors	r3, r2
 801e9bc:	2101      	movs	r1, #1
 801e9be:	4618      	mov	r0, r3
 801e9c0:	f7ff fcaa 	bl	801e318 <rotlFixed>
 801e9c4:	4603      	mov	r3, r0
 801e9c6:	623b      	str	r3, [r7, #32]
 801e9c8:	6a3b      	ldr	r3, [r7, #32]
 801e9ca:	441c      	add	r4, r3
 801e9cc:	2105      	movs	r1, #5
 801e9ce:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801e9d0:	f7ff fca2 	bl	801e318 <rotlFixed>
 801e9d4:	4603      	mov	r3, r0
 801e9d6:	18e2      	adds	r2, r4, r3
 801e9d8:	4b24      	ldr	r3, [pc, #144]	; (801ea6c <Transform+0x5fc>)
 801e9da:	4413      	add	r3, r2
 801e9dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801e9de:	4413      	add	r3, r2
 801e9e0:	653b      	str	r3, [r7, #80]	; 0x50
 801e9e2:	211e      	movs	r1, #30
 801e9e4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801e9e6:	f7ff fc97 	bl	801e318 <rotlFixed>
 801e9ea:	65f8      	str	r0, [r7, #92]	; 0x5c
 801e9ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e9ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e9f0:	405a      	eors	r2, r3
 801e9f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801e9f4:	ea82 0403 	eor.w	r4, r2, r3
 801e9f8:	69ba      	ldr	r2, [r7, #24]
 801e9fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e9fc:	405a      	eors	r2, r3
 801e9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ea00:	405a      	eors	r2, r3
 801ea02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ea04:	4053      	eors	r3, r2
 801ea06:	2101      	movs	r1, #1
 801ea08:	4618      	mov	r0, r3
 801ea0a:	f7ff fc85 	bl	801e318 <rotlFixed>
 801ea0e:	4603      	mov	r3, r0
 801ea10:	627b      	str	r3, [r7, #36]	; 0x24
 801ea12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ea14:	441c      	add	r4, r3
 801ea16:	2105      	movs	r1, #5
 801ea18:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801ea1a:	f7ff fc7d 	bl	801e318 <rotlFixed>
 801ea1e:	4603      	mov	r3, r0
 801ea20:	18e2      	adds	r2, r4, r3
 801ea22:	4b12      	ldr	r3, [pc, #72]	; (801ea6c <Transform+0x5fc>)
 801ea24:	4413      	add	r3, r2
 801ea26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801ea28:	4413      	add	r3, r2
 801ea2a:	657b      	str	r3, [r7, #84]	; 0x54
 801ea2c:	211e      	movs	r1, #30
 801ea2e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801ea30:	f7ff fc72 	bl	801e318 <rotlFixed>
 801ea34:	64f8      	str	r0, [r7, #76]	; 0x4c
 801ea36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801ea38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ea3a:	405a      	eors	r2, r3
 801ea3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ea3e:	ea82 0403 	eor.w	r4, r2, r3
 801ea42:	69fa      	ldr	r2, [r7, #28]
 801ea44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ea46:	405a      	eors	r2, r3
 801ea48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ea4a:	405a      	eors	r2, r3
 801ea4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ea4e:	4053      	eors	r3, r2
 801ea50:	2101      	movs	r1, #1
 801ea52:	4618      	mov	r0, r3
 801ea54:	f7ff fc60 	bl	801e318 <rotlFixed>
 801ea58:	4603      	mov	r3, r0
 801ea5a:	62bb      	str	r3, [r7, #40]	; 0x28
 801ea5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ea5e:	441c      	add	r4, r3
 801ea60:	2105      	movs	r1, #5
 801ea62:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801ea64:	e004      	b.n	801ea70 <Transform+0x600>
 801ea66:	bf00      	nop
 801ea68:	5a827999 	.word	0x5a827999
 801ea6c:	6ed9eba1 	.word	0x6ed9eba1
 801ea70:	f7ff fc52 	bl	801e318 <rotlFixed>
 801ea74:	4603      	mov	r3, r0
 801ea76:	18e2      	adds	r2, r4, r3
 801ea78:	4bb4      	ldr	r3, [pc, #720]	; (801ed4c <Transform+0x8dc>)
 801ea7a:	4413      	add	r3, r2
 801ea7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801ea7e:	4413      	add	r3, r2
 801ea80:	65bb      	str	r3, [r7, #88]	; 0x58
 801ea82:	211e      	movs	r1, #30
 801ea84:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801ea86:	f7ff fc47 	bl	801e318 <rotlFixed>
 801ea8a:	6538      	str	r0, [r7, #80]	; 0x50
        R2(b,c,d,e,a,24); R2(a,b,c,d,e,25); R2(e,a,b,c,d,26); R2(d,e,a,b,c,27);
 801ea8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801ea8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ea90:	405a      	eors	r2, r3
 801ea92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ea94:	ea82 0403 	eor.w	r4, r2, r3
 801ea98:	6a3a      	ldr	r2, [r7, #32]
 801ea9a:	68fb      	ldr	r3, [r7, #12]
 801ea9c:	405a      	eors	r2, r3
 801ea9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801eaa0:	405a      	eors	r2, r3
 801eaa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eaa4:	4053      	eors	r3, r2
 801eaa6:	2101      	movs	r1, #1
 801eaa8:	4618      	mov	r0, r3
 801eaaa:	f7ff fc35 	bl	801e318 <rotlFixed>
 801eaae:	4603      	mov	r3, r0
 801eab0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801eab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eab4:	441c      	add	r4, r3
 801eab6:	2105      	movs	r1, #5
 801eab8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801eaba:	f7ff fc2d 	bl	801e318 <rotlFixed>
 801eabe:	4603      	mov	r3, r0
 801eac0:	18e2      	adds	r2, r4, r3
 801eac2:	4ba2      	ldr	r3, [pc, #648]	; (801ed4c <Transform+0x8dc>)
 801eac4:	4413      	add	r3, r2
 801eac6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801eac8:	4413      	add	r3, r2
 801eaca:	65fb      	str	r3, [r7, #92]	; 0x5c
 801eacc:	211e      	movs	r1, #30
 801eace:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801ead0:	f7ff fc22 	bl	801e318 <rotlFixed>
 801ead4:	6578      	str	r0, [r7, #84]	; 0x54
 801ead6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801ead8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801eada:	405a      	eors	r2, r3
 801eadc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801eade:	ea82 0403 	eor.w	r4, r2, r3
 801eae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801eae4:	693b      	ldr	r3, [r7, #16]
 801eae6:	405a      	eors	r2, r3
 801eae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801eaea:	405a      	eors	r2, r3
 801eaec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eaee:	4053      	eors	r3, r2
 801eaf0:	2101      	movs	r1, #1
 801eaf2:	4618      	mov	r0, r3
 801eaf4:	f7ff fc10 	bl	801e318 <rotlFixed>
 801eaf8:	4603      	mov	r3, r0
 801eafa:	633b      	str	r3, [r7, #48]	; 0x30
 801eafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eafe:	441c      	add	r4, r3
 801eb00:	2105      	movs	r1, #5
 801eb02:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801eb04:	f7ff fc08 	bl	801e318 <rotlFixed>
 801eb08:	4603      	mov	r3, r0
 801eb0a:	18e2      	adds	r2, r4, r3
 801eb0c:	4b8f      	ldr	r3, [pc, #572]	; (801ed4c <Transform+0x8dc>)
 801eb0e:	4413      	add	r3, r2
 801eb10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801eb12:	4413      	add	r3, r2
 801eb14:	64fb      	str	r3, [r7, #76]	; 0x4c
 801eb16:	211e      	movs	r1, #30
 801eb18:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801eb1a:	f7ff fbfd 	bl	801e318 <rotlFixed>
 801eb1e:	65b8      	str	r0, [r7, #88]	; 0x58
 801eb20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801eb22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801eb24:	405a      	eors	r2, r3
 801eb26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801eb28:	ea82 0403 	eor.w	r4, r2, r3
 801eb2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801eb2e:	697b      	ldr	r3, [r7, #20]
 801eb30:	405a      	eors	r2, r3
 801eb32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801eb34:	405a      	eors	r2, r3
 801eb36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801eb38:	4053      	eors	r3, r2
 801eb3a:	2101      	movs	r1, #1
 801eb3c:	4618      	mov	r0, r3
 801eb3e:	f7ff fbeb 	bl	801e318 <rotlFixed>
 801eb42:	4603      	mov	r3, r0
 801eb44:	637b      	str	r3, [r7, #52]	; 0x34
 801eb46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801eb48:	441c      	add	r4, r3
 801eb4a:	2105      	movs	r1, #5
 801eb4c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801eb4e:	f7ff fbe3 	bl	801e318 <rotlFixed>
 801eb52:	4603      	mov	r3, r0
 801eb54:	18e2      	adds	r2, r4, r3
 801eb56:	4b7d      	ldr	r3, [pc, #500]	; (801ed4c <Transform+0x8dc>)
 801eb58:	4413      	add	r3, r2
 801eb5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801eb5c:	4413      	add	r3, r2
 801eb5e:	653b      	str	r3, [r7, #80]	; 0x50
 801eb60:	211e      	movs	r1, #30
 801eb62:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801eb64:	f7ff fbd8 	bl	801e318 <rotlFixed>
 801eb68:	65f8      	str	r0, [r7, #92]	; 0x5c
 801eb6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801eb6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801eb6e:	405a      	eors	r2, r3
 801eb70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801eb72:	ea82 0403 	eor.w	r4, r2, r3
 801eb76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801eb78:	69bb      	ldr	r3, [r7, #24]
 801eb7a:	405a      	eors	r2, r3
 801eb7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801eb7e:	405a      	eors	r2, r3
 801eb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801eb82:	4053      	eors	r3, r2
 801eb84:	2101      	movs	r1, #1
 801eb86:	4618      	mov	r0, r3
 801eb88:	f7ff fbc6 	bl	801e318 <rotlFixed>
 801eb8c:	4603      	mov	r3, r0
 801eb8e:	63bb      	str	r3, [r7, #56]	; 0x38
 801eb90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801eb92:	441c      	add	r4, r3
 801eb94:	2105      	movs	r1, #5
 801eb96:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801eb98:	f7ff fbbe 	bl	801e318 <rotlFixed>
 801eb9c:	4603      	mov	r3, r0
 801eb9e:	18e2      	adds	r2, r4, r3
 801eba0:	4b6a      	ldr	r3, [pc, #424]	; (801ed4c <Transform+0x8dc>)
 801eba2:	4413      	add	r3, r2
 801eba4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801eba6:	4413      	add	r3, r2
 801eba8:	657b      	str	r3, [r7, #84]	; 0x54
 801ebaa:	211e      	movs	r1, #30
 801ebac:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801ebae:	f7ff fbb3 	bl	801e318 <rotlFixed>
 801ebb2:	64f8      	str	r0, [r7, #76]	; 0x4c
        R2(c,d,e,a,b,28); R2(b,c,d,e,a,29); R2(a,b,c,d,e,30); R2(e,a,b,c,d,31);
 801ebb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801ebb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ebb8:	405a      	eors	r2, r3
 801ebba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ebbc:	ea82 0403 	eor.w	r4, r2, r3
 801ebc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ebc2:	69fb      	ldr	r3, [r7, #28]
 801ebc4:	405a      	eors	r2, r3
 801ebc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ebc8:	405a      	eors	r2, r3
 801ebca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ebcc:	4053      	eors	r3, r2
 801ebce:	2101      	movs	r1, #1
 801ebd0:	4618      	mov	r0, r3
 801ebd2:	f7ff fba1 	bl	801e318 <rotlFixed>
 801ebd6:	4603      	mov	r3, r0
 801ebd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ebda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ebdc:	441c      	add	r4, r3
 801ebde:	2105      	movs	r1, #5
 801ebe0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801ebe2:	f7ff fb99 	bl	801e318 <rotlFixed>
 801ebe6:	4603      	mov	r3, r0
 801ebe8:	18e2      	adds	r2, r4, r3
 801ebea:	4b58      	ldr	r3, [pc, #352]	; (801ed4c <Transform+0x8dc>)
 801ebec:	4413      	add	r3, r2
 801ebee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801ebf0:	4413      	add	r3, r2
 801ebf2:	65bb      	str	r3, [r7, #88]	; 0x58
 801ebf4:	211e      	movs	r1, #30
 801ebf6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801ebf8:	f7ff fb8e 	bl	801e318 <rotlFixed>
 801ebfc:	6538      	str	r0, [r7, #80]	; 0x50
 801ebfe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801ec00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ec02:	405a      	eors	r2, r3
 801ec04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ec06:	ea82 0403 	eor.w	r4, r2, r3
 801ec0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ec0c:	6a3b      	ldr	r3, [r7, #32]
 801ec0e:	405a      	eors	r2, r3
 801ec10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ec12:	405a      	eors	r2, r3
 801ec14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ec16:	4053      	eors	r3, r2
 801ec18:	2101      	movs	r1, #1
 801ec1a:	4618      	mov	r0, r3
 801ec1c:	f7ff fb7c 	bl	801e318 <rotlFixed>
 801ec20:	4603      	mov	r3, r0
 801ec22:	643b      	str	r3, [r7, #64]	; 0x40
 801ec24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ec26:	441c      	add	r4, r3
 801ec28:	2105      	movs	r1, #5
 801ec2a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801ec2c:	f7ff fb74 	bl	801e318 <rotlFixed>
 801ec30:	4603      	mov	r3, r0
 801ec32:	18e2      	adds	r2, r4, r3
 801ec34:	4b45      	ldr	r3, [pc, #276]	; (801ed4c <Transform+0x8dc>)
 801ec36:	4413      	add	r3, r2
 801ec38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801ec3a:	4413      	add	r3, r2
 801ec3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801ec3e:	211e      	movs	r1, #30
 801ec40:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801ec42:	f7ff fb69 	bl	801e318 <rotlFixed>
 801ec46:	6578      	str	r0, [r7, #84]	; 0x54
 801ec48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801ec4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ec4c:	405a      	eors	r2, r3
 801ec4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ec50:	ea82 0403 	eor.w	r4, r2, r3
 801ec54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ec56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec58:	405a      	eors	r2, r3
 801ec5a:	68fb      	ldr	r3, [r7, #12]
 801ec5c:	405a      	eors	r2, r3
 801ec5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ec60:	4053      	eors	r3, r2
 801ec62:	2101      	movs	r1, #1
 801ec64:	4618      	mov	r0, r3
 801ec66:	f7ff fb57 	bl	801e318 <rotlFixed>
 801ec6a:	4603      	mov	r3, r0
 801ec6c:	647b      	str	r3, [r7, #68]	; 0x44
 801ec6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ec70:	441c      	add	r4, r3
 801ec72:	2105      	movs	r1, #5
 801ec74:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801ec76:	f7ff fb4f 	bl	801e318 <rotlFixed>
 801ec7a:	4603      	mov	r3, r0
 801ec7c:	18e2      	adds	r2, r4, r3
 801ec7e:	4b33      	ldr	r3, [pc, #204]	; (801ed4c <Transform+0x8dc>)
 801ec80:	4413      	add	r3, r2
 801ec82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801ec84:	4413      	add	r3, r2
 801ec86:	64fb      	str	r3, [r7, #76]	; 0x4c
 801ec88:	211e      	movs	r1, #30
 801ec8a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801ec8c:	f7ff fb44 	bl	801e318 <rotlFixed>
 801ec90:	65b8      	str	r0, [r7, #88]	; 0x58
 801ec92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801ec94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ec96:	405a      	eors	r2, r3
 801ec98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ec9a:	ea82 0403 	eor.w	r4, r2, r3
 801ec9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801eca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801eca2:	405a      	eors	r2, r3
 801eca4:	693b      	ldr	r3, [r7, #16]
 801eca6:	405a      	eors	r2, r3
 801eca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ecaa:	4053      	eors	r3, r2
 801ecac:	2101      	movs	r1, #1
 801ecae:	4618      	mov	r0, r3
 801ecb0:	f7ff fb32 	bl	801e318 <rotlFixed>
 801ecb4:	4603      	mov	r3, r0
 801ecb6:	64bb      	str	r3, [r7, #72]	; 0x48
 801ecb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ecba:	441c      	add	r4, r3
 801ecbc:	2105      	movs	r1, #5
 801ecbe:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801ecc0:	f7ff fb2a 	bl	801e318 <rotlFixed>
 801ecc4:	4603      	mov	r3, r0
 801ecc6:	18e2      	adds	r2, r4, r3
 801ecc8:	4b20      	ldr	r3, [pc, #128]	; (801ed4c <Transform+0x8dc>)
 801ecca:	4413      	add	r3, r2
 801eccc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801ecce:	4413      	add	r3, r2
 801ecd0:	653b      	str	r3, [r7, #80]	; 0x50
 801ecd2:	211e      	movs	r1, #30
 801ecd4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801ecd6:	f7ff fb1f 	bl	801e318 <rotlFixed>
 801ecda:	65f8      	str	r0, [r7, #92]	; 0x5c
        R2(d,e,a,b,c,32); R2(c,d,e,a,b,33); R2(b,c,d,e,a,34); R2(a,b,c,d,e,35);
 801ecdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801ecde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ece0:	405a      	eors	r2, r3
 801ece2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ece4:	ea82 0403 	eor.w	r4, r2, r3
 801ece8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801ecea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ecec:	405a      	eors	r2, r3
 801ecee:	697b      	ldr	r3, [r7, #20]
 801ecf0:	405a      	eors	r2, r3
 801ecf2:	68fb      	ldr	r3, [r7, #12]
 801ecf4:	4053      	eors	r3, r2
 801ecf6:	2101      	movs	r1, #1
 801ecf8:	4618      	mov	r0, r3
 801ecfa:	f7ff fb0d 	bl	801e318 <rotlFixed>
 801ecfe:	4603      	mov	r3, r0
 801ed00:	60fb      	str	r3, [r7, #12]
 801ed02:	68fb      	ldr	r3, [r7, #12]
 801ed04:	441c      	add	r4, r3
 801ed06:	2105      	movs	r1, #5
 801ed08:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801ed0a:	f7ff fb05 	bl	801e318 <rotlFixed>
 801ed0e:	4603      	mov	r3, r0
 801ed10:	18e2      	adds	r2, r4, r3
 801ed12:	4b0e      	ldr	r3, [pc, #56]	; (801ed4c <Transform+0x8dc>)
 801ed14:	4413      	add	r3, r2
 801ed16:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801ed18:	4413      	add	r3, r2
 801ed1a:	657b      	str	r3, [r7, #84]	; 0x54
 801ed1c:	211e      	movs	r1, #30
 801ed1e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801ed20:	f7ff fafa 	bl	801e318 <rotlFixed>
 801ed24:	64f8      	str	r0, [r7, #76]	; 0x4c
 801ed26:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801ed28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ed2a:	405a      	eors	r2, r3
 801ed2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ed2e:	ea82 0403 	eor.w	r4, r2, r3
 801ed32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ed34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ed36:	405a      	eors	r2, r3
 801ed38:	69bb      	ldr	r3, [r7, #24]
 801ed3a:	405a      	eors	r2, r3
 801ed3c:	693b      	ldr	r3, [r7, #16]
 801ed3e:	4053      	eors	r3, r2
 801ed40:	2101      	movs	r1, #1
 801ed42:	4618      	mov	r0, r3
 801ed44:	f7ff fae8 	bl	801e318 <rotlFixed>
 801ed48:	4603      	mov	r3, r0
 801ed4a:	e001      	b.n	801ed50 <Transform+0x8e0>
 801ed4c:	6ed9eba1 	.word	0x6ed9eba1
 801ed50:	613b      	str	r3, [r7, #16]
 801ed52:	693b      	ldr	r3, [r7, #16]
 801ed54:	441c      	add	r4, r3
 801ed56:	2105      	movs	r1, #5
 801ed58:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801ed5a:	f7ff fadd 	bl	801e318 <rotlFixed>
 801ed5e:	4603      	mov	r3, r0
 801ed60:	18e2      	adds	r2, r4, r3
 801ed62:	4bb4      	ldr	r3, [pc, #720]	; (801f034 <Transform+0xbc4>)
 801ed64:	4413      	add	r3, r2
 801ed66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801ed68:	4413      	add	r3, r2
 801ed6a:	65bb      	str	r3, [r7, #88]	; 0x58
 801ed6c:	211e      	movs	r1, #30
 801ed6e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801ed70:	f7ff fad2 	bl	801e318 <rotlFixed>
 801ed74:	6538      	str	r0, [r7, #80]	; 0x50
 801ed76:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801ed78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ed7a:	405a      	eors	r2, r3
 801ed7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ed7e:	ea82 0403 	eor.w	r4, r2, r3
 801ed82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ed84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ed86:	405a      	eors	r2, r3
 801ed88:	69fb      	ldr	r3, [r7, #28]
 801ed8a:	405a      	eors	r2, r3
 801ed8c:	697b      	ldr	r3, [r7, #20]
 801ed8e:	4053      	eors	r3, r2
 801ed90:	2101      	movs	r1, #1
 801ed92:	4618      	mov	r0, r3
 801ed94:	f7ff fac0 	bl	801e318 <rotlFixed>
 801ed98:	4603      	mov	r3, r0
 801ed9a:	617b      	str	r3, [r7, #20]
 801ed9c:	697b      	ldr	r3, [r7, #20]
 801ed9e:	441c      	add	r4, r3
 801eda0:	2105      	movs	r1, #5
 801eda2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801eda4:	f7ff fab8 	bl	801e318 <rotlFixed>
 801eda8:	4603      	mov	r3, r0
 801edaa:	18e2      	adds	r2, r4, r3
 801edac:	4ba1      	ldr	r3, [pc, #644]	; (801f034 <Transform+0xbc4>)
 801edae:	4413      	add	r3, r2
 801edb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801edb2:	4413      	add	r3, r2
 801edb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 801edb6:	211e      	movs	r1, #30
 801edb8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801edba:	f7ff faad 	bl	801e318 <rotlFixed>
 801edbe:	6578      	str	r0, [r7, #84]	; 0x54
 801edc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801edc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801edc4:	405a      	eors	r2, r3
 801edc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801edc8:	ea82 0403 	eor.w	r4, r2, r3
 801edcc:	68fa      	ldr	r2, [r7, #12]
 801edce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801edd0:	405a      	eors	r2, r3
 801edd2:	6a3b      	ldr	r3, [r7, #32]
 801edd4:	405a      	eors	r2, r3
 801edd6:	69bb      	ldr	r3, [r7, #24]
 801edd8:	4053      	eors	r3, r2
 801edda:	2101      	movs	r1, #1
 801eddc:	4618      	mov	r0, r3
 801edde:	f7ff fa9b 	bl	801e318 <rotlFixed>
 801ede2:	4603      	mov	r3, r0
 801ede4:	61bb      	str	r3, [r7, #24]
 801ede6:	69bb      	ldr	r3, [r7, #24]
 801ede8:	441c      	add	r4, r3
 801edea:	2105      	movs	r1, #5
 801edec:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801edee:	f7ff fa93 	bl	801e318 <rotlFixed>
 801edf2:	4603      	mov	r3, r0
 801edf4:	18e2      	adds	r2, r4, r3
 801edf6:	4b8f      	ldr	r3, [pc, #572]	; (801f034 <Transform+0xbc4>)
 801edf8:	4413      	add	r3, r2
 801edfa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801edfc:	4413      	add	r3, r2
 801edfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 801ee00:	211e      	movs	r1, #30
 801ee02:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801ee04:	f7ff fa88 	bl	801e318 <rotlFixed>
 801ee08:	65b8      	str	r0, [r7, #88]	; 0x58
        R2(e,a,b,c,d,36); R2(d,e,a,b,c,37); R2(c,d,e,a,b,38); R2(b,c,d,e,a,39);
 801ee0a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801ee0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ee0e:	405a      	eors	r2, r3
 801ee10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ee12:	ea82 0403 	eor.w	r4, r2, r3
 801ee16:	693a      	ldr	r2, [r7, #16]
 801ee18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ee1a:	405a      	eors	r2, r3
 801ee1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ee1e:	405a      	eors	r2, r3
 801ee20:	69fb      	ldr	r3, [r7, #28]
 801ee22:	4053      	eors	r3, r2
 801ee24:	2101      	movs	r1, #1
 801ee26:	4618      	mov	r0, r3
 801ee28:	f7ff fa76 	bl	801e318 <rotlFixed>
 801ee2c:	4603      	mov	r3, r0
 801ee2e:	61fb      	str	r3, [r7, #28]
 801ee30:	69fb      	ldr	r3, [r7, #28]
 801ee32:	441c      	add	r4, r3
 801ee34:	2105      	movs	r1, #5
 801ee36:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801ee38:	f7ff fa6e 	bl	801e318 <rotlFixed>
 801ee3c:	4603      	mov	r3, r0
 801ee3e:	18e2      	adds	r2, r4, r3
 801ee40:	4b7c      	ldr	r3, [pc, #496]	; (801f034 <Transform+0xbc4>)
 801ee42:	4413      	add	r3, r2
 801ee44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801ee46:	4413      	add	r3, r2
 801ee48:	653b      	str	r3, [r7, #80]	; 0x50
 801ee4a:	211e      	movs	r1, #30
 801ee4c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801ee4e:	f7ff fa63 	bl	801e318 <rotlFixed>
 801ee52:	65f8      	str	r0, [r7, #92]	; 0x5c
 801ee54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801ee56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ee58:	405a      	eors	r2, r3
 801ee5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ee5c:	ea82 0403 	eor.w	r4, r2, r3
 801ee60:	697a      	ldr	r2, [r7, #20]
 801ee62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ee64:	405a      	eors	r2, r3
 801ee66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ee68:	405a      	eors	r2, r3
 801ee6a:	6a3b      	ldr	r3, [r7, #32]
 801ee6c:	4053      	eors	r3, r2
 801ee6e:	2101      	movs	r1, #1
 801ee70:	4618      	mov	r0, r3
 801ee72:	f7ff fa51 	bl	801e318 <rotlFixed>
 801ee76:	4603      	mov	r3, r0
 801ee78:	623b      	str	r3, [r7, #32]
 801ee7a:	6a3b      	ldr	r3, [r7, #32]
 801ee7c:	441c      	add	r4, r3
 801ee7e:	2105      	movs	r1, #5
 801ee80:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801ee82:	f7ff fa49 	bl	801e318 <rotlFixed>
 801ee86:	4603      	mov	r3, r0
 801ee88:	18e2      	adds	r2, r4, r3
 801ee8a:	4b6a      	ldr	r3, [pc, #424]	; (801f034 <Transform+0xbc4>)
 801ee8c:	4413      	add	r3, r2
 801ee8e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801ee90:	4413      	add	r3, r2
 801ee92:	657b      	str	r3, [r7, #84]	; 0x54
 801ee94:	211e      	movs	r1, #30
 801ee96:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801ee98:	f7ff fa3e 	bl	801e318 <rotlFixed>
 801ee9c:	64f8      	str	r0, [r7, #76]	; 0x4c
 801ee9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801eea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801eea2:	405a      	eors	r2, r3
 801eea4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801eea6:	ea82 0403 	eor.w	r4, r2, r3
 801eeaa:	69ba      	ldr	r2, [r7, #24]
 801eeac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801eeae:	405a      	eors	r2, r3
 801eeb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eeb2:	405a      	eors	r2, r3
 801eeb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eeb6:	4053      	eors	r3, r2
 801eeb8:	2101      	movs	r1, #1
 801eeba:	4618      	mov	r0, r3
 801eebc:	f7ff fa2c 	bl	801e318 <rotlFixed>
 801eec0:	4603      	mov	r3, r0
 801eec2:	627b      	str	r3, [r7, #36]	; 0x24
 801eec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eec6:	441c      	add	r4, r3
 801eec8:	2105      	movs	r1, #5
 801eeca:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801eecc:	f7ff fa24 	bl	801e318 <rotlFixed>
 801eed0:	4603      	mov	r3, r0
 801eed2:	18e2      	adds	r2, r4, r3
 801eed4:	4b57      	ldr	r3, [pc, #348]	; (801f034 <Transform+0xbc4>)
 801eed6:	4413      	add	r3, r2
 801eed8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801eeda:	4413      	add	r3, r2
 801eedc:	65bb      	str	r3, [r7, #88]	; 0x58
 801eede:	211e      	movs	r1, #30
 801eee0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801eee2:	f7ff fa19 	bl	801e318 <rotlFixed>
 801eee6:	6538      	str	r0, [r7, #80]	; 0x50
 801eee8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801eeea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801eeec:	405a      	eors	r2, r3
 801eeee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801eef0:	ea82 0403 	eor.w	r4, r2, r3
 801eef4:	69fa      	ldr	r2, [r7, #28]
 801eef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801eef8:	405a      	eors	r2, r3
 801eefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eefc:	405a      	eors	r2, r3
 801eefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ef00:	4053      	eors	r3, r2
 801ef02:	2101      	movs	r1, #1
 801ef04:	4618      	mov	r0, r3
 801ef06:	f7ff fa07 	bl	801e318 <rotlFixed>
 801ef0a:	4603      	mov	r3, r0
 801ef0c:	62bb      	str	r3, [r7, #40]	; 0x28
 801ef0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ef10:	441c      	add	r4, r3
 801ef12:	2105      	movs	r1, #5
 801ef14:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801ef16:	f7ff f9ff 	bl	801e318 <rotlFixed>
 801ef1a:	4603      	mov	r3, r0
 801ef1c:	18e2      	adds	r2, r4, r3
 801ef1e:	4b45      	ldr	r3, [pc, #276]	; (801f034 <Transform+0xbc4>)
 801ef20:	4413      	add	r3, r2
 801ef22:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801ef24:	4413      	add	r3, r2
 801ef26:	65fb      	str	r3, [r7, #92]	; 0x5c
 801ef28:	211e      	movs	r1, #30
 801ef2a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801ef2c:	f7ff f9f4 	bl	801e318 <rotlFixed>
 801ef30:	6578      	str	r0, [r7, #84]	; 0x54

        R3(a,b,c,d,e,40); R3(e,a,b,c,d,41); R3(d,e,a,b,c,42); R3(c,d,e,a,b,43);
 801ef32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801ef34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ef36:	401a      	ands	r2, r3
 801ef38:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801ef3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ef3c:	4319      	orrs	r1, r3
 801ef3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ef40:	400b      	ands	r3, r1
 801ef42:	ea42 0403 	orr.w	r4, r2, r3
 801ef46:	6a3a      	ldr	r2, [r7, #32]
 801ef48:	68fb      	ldr	r3, [r7, #12]
 801ef4a:	405a      	eors	r2, r3
 801ef4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ef4e:	405a      	eors	r2, r3
 801ef50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef52:	4053      	eors	r3, r2
 801ef54:	2101      	movs	r1, #1
 801ef56:	4618      	mov	r0, r3
 801ef58:	f7ff f9de 	bl	801e318 <rotlFixed>
 801ef5c:	4603      	mov	r3, r0
 801ef5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ef60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef62:	441c      	add	r4, r3
 801ef64:	2105      	movs	r1, #5
 801ef66:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801ef68:	f7ff f9d6 	bl	801e318 <rotlFixed>
 801ef6c:	4603      	mov	r3, r0
 801ef6e:	18e2      	adds	r2, r4, r3
 801ef70:	4b31      	ldr	r3, [pc, #196]	; (801f038 <Transform+0xbc8>)
 801ef72:	4413      	add	r3, r2
 801ef74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801ef76:	4413      	add	r3, r2
 801ef78:	64fb      	str	r3, [r7, #76]	; 0x4c
 801ef7a:	211e      	movs	r1, #30
 801ef7c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801ef7e:	f7ff f9cb 	bl	801e318 <rotlFixed>
 801ef82:	65b8      	str	r0, [r7, #88]	; 0x58
 801ef84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801ef86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ef88:	401a      	ands	r2, r3
 801ef8a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801ef8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ef8e:	4319      	orrs	r1, r3
 801ef90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ef92:	400b      	ands	r3, r1
 801ef94:	ea42 0403 	orr.w	r4, r2, r3
 801ef98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ef9a:	693b      	ldr	r3, [r7, #16]
 801ef9c:	405a      	eors	r2, r3
 801ef9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801efa0:	405a      	eors	r2, r3
 801efa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801efa4:	4053      	eors	r3, r2
 801efa6:	2101      	movs	r1, #1
 801efa8:	4618      	mov	r0, r3
 801efaa:	f7ff f9b5 	bl	801e318 <rotlFixed>
 801efae:	4603      	mov	r3, r0
 801efb0:	633b      	str	r3, [r7, #48]	; 0x30
 801efb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801efb4:	441c      	add	r4, r3
 801efb6:	2105      	movs	r1, #5
 801efb8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801efba:	f7ff f9ad 	bl	801e318 <rotlFixed>
 801efbe:	4603      	mov	r3, r0
 801efc0:	18e2      	adds	r2, r4, r3
 801efc2:	4b1d      	ldr	r3, [pc, #116]	; (801f038 <Transform+0xbc8>)
 801efc4:	4413      	add	r3, r2
 801efc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801efc8:	4413      	add	r3, r2
 801efca:	653b      	str	r3, [r7, #80]	; 0x50
 801efcc:	211e      	movs	r1, #30
 801efce:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801efd0:	f7ff f9a2 	bl	801e318 <rotlFixed>
 801efd4:	65f8      	str	r0, [r7, #92]	; 0x5c
 801efd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801efd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801efda:	401a      	ands	r2, r3
 801efdc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801efde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801efe0:	4319      	orrs	r1, r3
 801efe2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801efe4:	400b      	ands	r3, r1
 801efe6:	ea42 0403 	orr.w	r4, r2, r3
 801efea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801efec:	697b      	ldr	r3, [r7, #20]
 801efee:	405a      	eors	r2, r3
 801eff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801eff2:	405a      	eors	r2, r3
 801eff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801eff6:	4053      	eors	r3, r2
 801eff8:	2101      	movs	r1, #1
 801effa:	4618      	mov	r0, r3
 801effc:	f7ff f98c 	bl	801e318 <rotlFixed>
 801f000:	4603      	mov	r3, r0
 801f002:	637b      	str	r3, [r7, #52]	; 0x34
 801f004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f006:	441c      	add	r4, r3
 801f008:	2105      	movs	r1, #5
 801f00a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801f00c:	f7ff f984 	bl	801e318 <rotlFixed>
 801f010:	4603      	mov	r3, r0
 801f012:	18e2      	adds	r2, r4, r3
 801f014:	4b08      	ldr	r3, [pc, #32]	; (801f038 <Transform+0xbc8>)
 801f016:	4413      	add	r3, r2
 801f018:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f01a:	4413      	add	r3, r2
 801f01c:	657b      	str	r3, [r7, #84]	; 0x54
 801f01e:	211e      	movs	r1, #30
 801f020:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801f022:	f7ff f979 	bl	801e318 <rotlFixed>
 801f026:	64f8      	str	r0, [r7, #76]	; 0x4c
 801f028:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801f02a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f02c:	401a      	ands	r2, r3
 801f02e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801f030:	e004      	b.n	801f03c <Transform+0xbcc>
 801f032:	bf00      	nop
 801f034:	6ed9eba1 	.word	0x6ed9eba1
 801f038:	8f1bbcdc 	.word	0x8f1bbcdc
 801f03c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f03e:	4319      	orrs	r1, r3
 801f040:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801f042:	400b      	ands	r3, r1
 801f044:	ea42 0403 	orr.w	r4, r2, r3
 801f048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f04a:	69bb      	ldr	r3, [r7, #24]
 801f04c:	405a      	eors	r2, r3
 801f04e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f050:	405a      	eors	r2, r3
 801f052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f054:	4053      	eors	r3, r2
 801f056:	2101      	movs	r1, #1
 801f058:	4618      	mov	r0, r3
 801f05a:	f7ff f95d 	bl	801e318 <rotlFixed>
 801f05e:	4603      	mov	r3, r0
 801f060:	63bb      	str	r3, [r7, #56]	; 0x38
 801f062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f064:	441c      	add	r4, r3
 801f066:	2105      	movs	r1, #5
 801f068:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801f06a:	f7ff f955 	bl	801e318 <rotlFixed>
 801f06e:	4603      	mov	r3, r0
 801f070:	18e2      	adds	r2, r4, r3
 801f072:	4bb3      	ldr	r3, [pc, #716]	; (801f340 <Transform+0xed0>)
 801f074:	4413      	add	r3, r2
 801f076:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801f078:	4413      	add	r3, r2
 801f07a:	65bb      	str	r3, [r7, #88]	; 0x58
 801f07c:	211e      	movs	r1, #30
 801f07e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801f080:	f7ff f94a 	bl	801e318 <rotlFixed>
 801f084:	6538      	str	r0, [r7, #80]	; 0x50
        R3(b,c,d,e,a,44); R3(a,b,c,d,e,45); R3(e,a,b,c,d,46); R3(d,e,a,b,c,47);
 801f086:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f08a:	401a      	ands	r2, r3
 801f08c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801f08e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f090:	4319      	orrs	r1, r3
 801f092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f094:	400b      	ands	r3, r1
 801f096:	ea42 0403 	orr.w	r4, r2, r3
 801f09a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f09c:	69fb      	ldr	r3, [r7, #28]
 801f09e:	405a      	eors	r2, r3
 801f0a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f0a2:	405a      	eors	r2, r3
 801f0a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f0a6:	4053      	eors	r3, r2
 801f0a8:	2101      	movs	r1, #1
 801f0aa:	4618      	mov	r0, r3
 801f0ac:	f7ff f934 	bl	801e318 <rotlFixed>
 801f0b0:	4603      	mov	r3, r0
 801f0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 801f0b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f0b6:	441c      	add	r4, r3
 801f0b8:	2105      	movs	r1, #5
 801f0ba:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801f0bc:	f7ff f92c 	bl	801e318 <rotlFixed>
 801f0c0:	4603      	mov	r3, r0
 801f0c2:	18e2      	adds	r2, r4, r3
 801f0c4:	4b9e      	ldr	r3, [pc, #632]	; (801f340 <Transform+0xed0>)
 801f0c6:	4413      	add	r3, r2
 801f0c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801f0ca:	4413      	add	r3, r2
 801f0cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 801f0ce:	211e      	movs	r1, #30
 801f0d0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801f0d2:	f7ff f921 	bl	801e318 <rotlFixed>
 801f0d6:	6578      	str	r0, [r7, #84]	; 0x54
 801f0d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801f0da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f0dc:	401a      	ands	r2, r3
 801f0de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801f0e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f0e2:	4319      	orrs	r1, r3
 801f0e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f0e6:	400b      	ands	r3, r1
 801f0e8:	ea42 0403 	orr.w	r4, r2, r3
 801f0ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f0ee:	6a3b      	ldr	r3, [r7, #32]
 801f0f0:	405a      	eors	r2, r3
 801f0f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f0f4:	405a      	eors	r2, r3
 801f0f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f0f8:	4053      	eors	r3, r2
 801f0fa:	2101      	movs	r1, #1
 801f0fc:	4618      	mov	r0, r3
 801f0fe:	f7ff f90b 	bl	801e318 <rotlFixed>
 801f102:	4603      	mov	r3, r0
 801f104:	643b      	str	r3, [r7, #64]	; 0x40
 801f106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f108:	441c      	add	r4, r3
 801f10a:	2105      	movs	r1, #5
 801f10c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801f10e:	f7ff f903 	bl	801e318 <rotlFixed>
 801f112:	4603      	mov	r3, r0
 801f114:	18e2      	adds	r2, r4, r3
 801f116:	4b8a      	ldr	r3, [pc, #552]	; (801f340 <Transform+0xed0>)
 801f118:	4413      	add	r3, r2
 801f11a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801f11c:	4413      	add	r3, r2
 801f11e:	64fb      	str	r3, [r7, #76]	; 0x4c
 801f120:	211e      	movs	r1, #30
 801f122:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801f124:	f7ff f8f8 	bl	801e318 <rotlFixed>
 801f128:	65b8      	str	r0, [r7, #88]	; 0x58
 801f12a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801f12c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f12e:	401a      	ands	r2, r3
 801f130:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801f132:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f134:	4319      	orrs	r1, r3
 801f136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f138:	400b      	ands	r3, r1
 801f13a:	ea42 0403 	orr.w	r4, r2, r3
 801f13e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801f140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f142:	405a      	eors	r2, r3
 801f144:	68fb      	ldr	r3, [r7, #12]
 801f146:	405a      	eors	r2, r3
 801f148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f14a:	4053      	eors	r3, r2
 801f14c:	2101      	movs	r1, #1
 801f14e:	4618      	mov	r0, r3
 801f150:	f7ff f8e2 	bl	801e318 <rotlFixed>
 801f154:	4603      	mov	r3, r0
 801f156:	647b      	str	r3, [r7, #68]	; 0x44
 801f158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f15a:	441c      	add	r4, r3
 801f15c:	2105      	movs	r1, #5
 801f15e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801f160:	f7ff f8da 	bl	801e318 <rotlFixed>
 801f164:	4603      	mov	r3, r0
 801f166:	18e2      	adds	r2, r4, r3
 801f168:	4b75      	ldr	r3, [pc, #468]	; (801f340 <Transform+0xed0>)
 801f16a:	4413      	add	r3, r2
 801f16c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801f16e:	4413      	add	r3, r2
 801f170:	653b      	str	r3, [r7, #80]	; 0x50
 801f172:	211e      	movs	r1, #30
 801f174:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801f176:	f7ff f8cf 	bl	801e318 <rotlFixed>
 801f17a:	65f8      	str	r0, [r7, #92]	; 0x5c
 801f17c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801f17e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801f180:	401a      	ands	r2, r3
 801f182:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801f184:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801f186:	4319      	orrs	r1, r3
 801f188:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f18a:	400b      	ands	r3, r1
 801f18c:	ea42 0403 	orr.w	r4, r2, r3
 801f190:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801f192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f194:	405a      	eors	r2, r3
 801f196:	693b      	ldr	r3, [r7, #16]
 801f198:	405a      	eors	r2, r3
 801f19a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f19c:	4053      	eors	r3, r2
 801f19e:	2101      	movs	r1, #1
 801f1a0:	4618      	mov	r0, r3
 801f1a2:	f7ff f8b9 	bl	801e318 <rotlFixed>
 801f1a6:	4603      	mov	r3, r0
 801f1a8:	64bb      	str	r3, [r7, #72]	; 0x48
 801f1aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f1ac:	441c      	add	r4, r3
 801f1ae:	2105      	movs	r1, #5
 801f1b0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801f1b2:	f7ff f8b1 	bl	801e318 <rotlFixed>
 801f1b6:	4603      	mov	r3, r0
 801f1b8:	18e2      	adds	r2, r4, r3
 801f1ba:	4b61      	ldr	r3, [pc, #388]	; (801f340 <Transform+0xed0>)
 801f1bc:	4413      	add	r3, r2
 801f1be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f1c0:	4413      	add	r3, r2
 801f1c2:	657b      	str	r3, [r7, #84]	; 0x54
 801f1c4:	211e      	movs	r1, #30
 801f1c6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801f1c8:	f7ff f8a6 	bl	801e318 <rotlFixed>
 801f1cc:	64f8      	str	r0, [r7, #76]	; 0x4c
        R3(c,d,e,a,b,48); R3(b,c,d,e,a,49); R3(a,b,c,d,e,50); R3(e,a,b,c,d,51);
 801f1ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801f1d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f1d2:	401a      	ands	r2, r3
 801f1d4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801f1d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f1d8:	4319      	orrs	r1, r3
 801f1da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801f1dc:	400b      	ands	r3, r1
 801f1de:	ea42 0403 	orr.w	r4, r2, r3
 801f1e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801f1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f1e6:	405a      	eors	r2, r3
 801f1e8:	697b      	ldr	r3, [r7, #20]
 801f1ea:	405a      	eors	r2, r3
 801f1ec:	68fb      	ldr	r3, [r7, #12]
 801f1ee:	4053      	eors	r3, r2
 801f1f0:	2101      	movs	r1, #1
 801f1f2:	4618      	mov	r0, r3
 801f1f4:	f7ff f890 	bl	801e318 <rotlFixed>
 801f1f8:	4603      	mov	r3, r0
 801f1fa:	60fb      	str	r3, [r7, #12]
 801f1fc:	68fb      	ldr	r3, [r7, #12]
 801f1fe:	441c      	add	r4, r3
 801f200:	2105      	movs	r1, #5
 801f202:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801f204:	f7ff f888 	bl	801e318 <rotlFixed>
 801f208:	4603      	mov	r3, r0
 801f20a:	18e2      	adds	r2, r4, r3
 801f20c:	4b4c      	ldr	r3, [pc, #304]	; (801f340 <Transform+0xed0>)
 801f20e:	4413      	add	r3, r2
 801f210:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801f212:	4413      	add	r3, r2
 801f214:	65bb      	str	r3, [r7, #88]	; 0x58
 801f216:	211e      	movs	r1, #30
 801f218:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801f21a:	f7ff f87d 	bl	801e318 <rotlFixed>
 801f21e:	6538      	str	r0, [r7, #80]	; 0x50
 801f220:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f224:	401a      	ands	r2, r3
 801f226:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801f228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f22a:	4319      	orrs	r1, r3
 801f22c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f22e:	400b      	ands	r3, r1
 801f230:	ea42 0403 	orr.w	r4, r2, r3
 801f234:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801f236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f238:	405a      	eors	r2, r3
 801f23a:	69bb      	ldr	r3, [r7, #24]
 801f23c:	405a      	eors	r2, r3
 801f23e:	693b      	ldr	r3, [r7, #16]
 801f240:	4053      	eors	r3, r2
 801f242:	2101      	movs	r1, #1
 801f244:	4618      	mov	r0, r3
 801f246:	f7ff f867 	bl	801e318 <rotlFixed>
 801f24a:	4603      	mov	r3, r0
 801f24c:	613b      	str	r3, [r7, #16]
 801f24e:	693b      	ldr	r3, [r7, #16]
 801f250:	441c      	add	r4, r3
 801f252:	2105      	movs	r1, #5
 801f254:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801f256:	f7ff f85f 	bl	801e318 <rotlFixed>
 801f25a:	4603      	mov	r3, r0
 801f25c:	18e2      	adds	r2, r4, r3
 801f25e:	4b38      	ldr	r3, [pc, #224]	; (801f340 <Transform+0xed0>)
 801f260:	4413      	add	r3, r2
 801f262:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801f264:	4413      	add	r3, r2
 801f266:	65fb      	str	r3, [r7, #92]	; 0x5c
 801f268:	211e      	movs	r1, #30
 801f26a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801f26c:	f7ff f854 	bl	801e318 <rotlFixed>
 801f270:	6578      	str	r0, [r7, #84]	; 0x54
 801f272:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801f274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f276:	401a      	ands	r2, r3
 801f278:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801f27a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f27c:	4319      	orrs	r1, r3
 801f27e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f280:	400b      	ands	r3, r1
 801f282:	ea42 0403 	orr.w	r4, r2, r3
 801f286:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801f288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f28a:	405a      	eors	r2, r3
 801f28c:	69fb      	ldr	r3, [r7, #28]
 801f28e:	405a      	eors	r2, r3
 801f290:	697b      	ldr	r3, [r7, #20]
 801f292:	4053      	eors	r3, r2
 801f294:	2101      	movs	r1, #1
 801f296:	4618      	mov	r0, r3
 801f298:	f7ff f83e 	bl	801e318 <rotlFixed>
 801f29c:	4603      	mov	r3, r0
 801f29e:	617b      	str	r3, [r7, #20]
 801f2a0:	697b      	ldr	r3, [r7, #20]
 801f2a2:	441c      	add	r4, r3
 801f2a4:	2105      	movs	r1, #5
 801f2a6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801f2a8:	f7ff f836 	bl	801e318 <rotlFixed>
 801f2ac:	4603      	mov	r3, r0
 801f2ae:	18e2      	adds	r2, r4, r3
 801f2b0:	4b23      	ldr	r3, [pc, #140]	; (801f340 <Transform+0xed0>)
 801f2b2:	4413      	add	r3, r2
 801f2b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801f2b6:	4413      	add	r3, r2
 801f2b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 801f2ba:	211e      	movs	r1, #30
 801f2bc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801f2be:	f7ff f82b 	bl	801e318 <rotlFixed>
 801f2c2:	65b8      	str	r0, [r7, #88]	; 0x58
 801f2c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801f2c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f2c8:	401a      	ands	r2, r3
 801f2ca:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801f2cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f2ce:	4319      	orrs	r1, r3
 801f2d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f2d2:	400b      	ands	r3, r1
 801f2d4:	ea42 0403 	orr.w	r4, r2, r3
 801f2d8:	68fa      	ldr	r2, [r7, #12]
 801f2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f2dc:	405a      	eors	r2, r3
 801f2de:	6a3b      	ldr	r3, [r7, #32]
 801f2e0:	405a      	eors	r2, r3
 801f2e2:	69bb      	ldr	r3, [r7, #24]
 801f2e4:	4053      	eors	r3, r2
 801f2e6:	2101      	movs	r1, #1
 801f2e8:	4618      	mov	r0, r3
 801f2ea:	f7ff f815 	bl	801e318 <rotlFixed>
 801f2ee:	4603      	mov	r3, r0
 801f2f0:	61bb      	str	r3, [r7, #24]
 801f2f2:	69bb      	ldr	r3, [r7, #24]
 801f2f4:	441c      	add	r4, r3
 801f2f6:	2105      	movs	r1, #5
 801f2f8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801f2fa:	f7ff f80d 	bl	801e318 <rotlFixed>
 801f2fe:	4603      	mov	r3, r0
 801f300:	18e2      	adds	r2, r4, r3
 801f302:	4b0f      	ldr	r3, [pc, #60]	; (801f340 <Transform+0xed0>)
 801f304:	4413      	add	r3, r2
 801f306:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801f308:	4413      	add	r3, r2
 801f30a:	653b      	str	r3, [r7, #80]	; 0x50
 801f30c:	211e      	movs	r1, #30
 801f30e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801f310:	f7ff f802 	bl	801e318 <rotlFixed>
 801f314:	65f8      	str	r0, [r7, #92]	; 0x5c
        R3(d,e,a,b,c,52); R3(c,d,e,a,b,53); R3(b,c,d,e,a,54); R3(a,b,c,d,e,55);
 801f316:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801f318:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801f31a:	401a      	ands	r2, r3
 801f31c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801f31e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801f320:	4319      	orrs	r1, r3
 801f322:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f324:	400b      	ands	r3, r1
 801f326:	ea42 0403 	orr.w	r4, r2, r3
 801f32a:	693a      	ldr	r2, [r7, #16]
 801f32c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f32e:	405a      	eors	r2, r3
 801f330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f332:	405a      	eors	r2, r3
 801f334:	69fb      	ldr	r3, [r7, #28]
 801f336:	4053      	eors	r3, r2
 801f338:	2101      	movs	r1, #1
 801f33a:	4618      	mov	r0, r3
 801f33c:	e002      	b.n	801f344 <Transform+0xed4>
 801f33e:	bf00      	nop
 801f340:	8f1bbcdc 	.word	0x8f1bbcdc
 801f344:	f7fe ffe8 	bl	801e318 <rotlFixed>
 801f348:	4603      	mov	r3, r0
 801f34a:	61fb      	str	r3, [r7, #28]
 801f34c:	69fb      	ldr	r3, [r7, #28]
 801f34e:	441c      	add	r4, r3
 801f350:	2105      	movs	r1, #5
 801f352:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801f354:	f7fe ffe0 	bl	801e318 <rotlFixed>
 801f358:	4603      	mov	r3, r0
 801f35a:	18e2      	adds	r2, r4, r3
 801f35c:	4bb3      	ldr	r3, [pc, #716]	; (801f62c <Transform+0x11bc>)
 801f35e:	4413      	add	r3, r2
 801f360:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f362:	4413      	add	r3, r2
 801f364:	657b      	str	r3, [r7, #84]	; 0x54
 801f366:	211e      	movs	r1, #30
 801f368:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801f36a:	f7fe ffd5 	bl	801e318 <rotlFixed>
 801f36e:	64f8      	str	r0, [r7, #76]	; 0x4c
 801f370:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801f372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f374:	401a      	ands	r2, r3
 801f376:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801f378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f37a:	4319      	orrs	r1, r3
 801f37c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801f37e:	400b      	ands	r3, r1
 801f380:	ea42 0403 	orr.w	r4, r2, r3
 801f384:	697a      	ldr	r2, [r7, #20]
 801f386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f388:	405a      	eors	r2, r3
 801f38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f38c:	405a      	eors	r2, r3
 801f38e:	6a3b      	ldr	r3, [r7, #32]
 801f390:	4053      	eors	r3, r2
 801f392:	2101      	movs	r1, #1
 801f394:	4618      	mov	r0, r3
 801f396:	f7fe ffbf 	bl	801e318 <rotlFixed>
 801f39a:	4603      	mov	r3, r0
 801f39c:	623b      	str	r3, [r7, #32]
 801f39e:	6a3b      	ldr	r3, [r7, #32]
 801f3a0:	441c      	add	r4, r3
 801f3a2:	2105      	movs	r1, #5
 801f3a4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801f3a6:	f7fe ffb7 	bl	801e318 <rotlFixed>
 801f3aa:	4603      	mov	r3, r0
 801f3ac:	18e2      	adds	r2, r4, r3
 801f3ae:	4b9f      	ldr	r3, [pc, #636]	; (801f62c <Transform+0x11bc>)
 801f3b0:	4413      	add	r3, r2
 801f3b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801f3b4:	4413      	add	r3, r2
 801f3b6:	65bb      	str	r3, [r7, #88]	; 0x58
 801f3b8:	211e      	movs	r1, #30
 801f3ba:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801f3bc:	f7fe ffac 	bl	801e318 <rotlFixed>
 801f3c0:	6538      	str	r0, [r7, #80]	; 0x50
 801f3c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f3c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f3c6:	401a      	ands	r2, r3
 801f3c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801f3ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f3cc:	4319      	orrs	r1, r3
 801f3ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f3d0:	400b      	ands	r3, r1
 801f3d2:	ea42 0403 	orr.w	r4, r2, r3
 801f3d6:	69ba      	ldr	r2, [r7, #24]
 801f3d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f3da:	405a      	eors	r2, r3
 801f3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f3de:	405a      	eors	r2, r3
 801f3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f3e2:	4053      	eors	r3, r2
 801f3e4:	2101      	movs	r1, #1
 801f3e6:	4618      	mov	r0, r3
 801f3e8:	f7fe ff96 	bl	801e318 <rotlFixed>
 801f3ec:	4603      	mov	r3, r0
 801f3ee:	627b      	str	r3, [r7, #36]	; 0x24
 801f3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f3f2:	441c      	add	r4, r3
 801f3f4:	2105      	movs	r1, #5
 801f3f6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801f3f8:	f7fe ff8e 	bl	801e318 <rotlFixed>
 801f3fc:	4603      	mov	r3, r0
 801f3fe:	18e2      	adds	r2, r4, r3
 801f400:	4b8a      	ldr	r3, [pc, #552]	; (801f62c <Transform+0x11bc>)
 801f402:	4413      	add	r3, r2
 801f404:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801f406:	4413      	add	r3, r2
 801f408:	65fb      	str	r3, [r7, #92]	; 0x5c
 801f40a:	211e      	movs	r1, #30
 801f40c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801f40e:	f7fe ff83 	bl	801e318 <rotlFixed>
 801f412:	6578      	str	r0, [r7, #84]	; 0x54
 801f414:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801f416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f418:	401a      	ands	r2, r3
 801f41a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801f41c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f41e:	4319      	orrs	r1, r3
 801f420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f422:	400b      	ands	r3, r1
 801f424:	ea42 0403 	orr.w	r4, r2, r3
 801f428:	69fa      	ldr	r2, [r7, #28]
 801f42a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f42c:	405a      	eors	r2, r3
 801f42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f430:	405a      	eors	r2, r3
 801f432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f434:	4053      	eors	r3, r2
 801f436:	2101      	movs	r1, #1
 801f438:	4618      	mov	r0, r3
 801f43a:	f7fe ff6d 	bl	801e318 <rotlFixed>
 801f43e:	4603      	mov	r3, r0
 801f440:	62bb      	str	r3, [r7, #40]	; 0x28
 801f442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f444:	441c      	add	r4, r3
 801f446:	2105      	movs	r1, #5
 801f448:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801f44a:	f7fe ff65 	bl	801e318 <rotlFixed>
 801f44e:	4603      	mov	r3, r0
 801f450:	18e2      	adds	r2, r4, r3
 801f452:	4b76      	ldr	r3, [pc, #472]	; (801f62c <Transform+0x11bc>)
 801f454:	4413      	add	r3, r2
 801f456:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801f458:	4413      	add	r3, r2
 801f45a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801f45c:	211e      	movs	r1, #30
 801f45e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801f460:	f7fe ff5a 	bl	801e318 <rotlFixed>
 801f464:	65b8      	str	r0, [r7, #88]	; 0x58
        R3(e,a,b,c,d,56); R3(d,e,a,b,c,57); R3(c,d,e,a,b,58); R3(b,c,d,e,a,59);
 801f466:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801f468:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f46a:	401a      	ands	r2, r3
 801f46c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801f46e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f470:	4319      	orrs	r1, r3
 801f472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f474:	400b      	ands	r3, r1
 801f476:	ea42 0403 	orr.w	r4, r2, r3
 801f47a:	6a3a      	ldr	r2, [r7, #32]
 801f47c:	68fb      	ldr	r3, [r7, #12]
 801f47e:	405a      	eors	r2, r3
 801f480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f482:	405a      	eors	r2, r3
 801f484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f486:	4053      	eors	r3, r2
 801f488:	2101      	movs	r1, #1
 801f48a:	4618      	mov	r0, r3
 801f48c:	f7fe ff44 	bl	801e318 <rotlFixed>
 801f490:	4603      	mov	r3, r0
 801f492:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f496:	441c      	add	r4, r3
 801f498:	2105      	movs	r1, #5
 801f49a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801f49c:	f7fe ff3c 	bl	801e318 <rotlFixed>
 801f4a0:	4603      	mov	r3, r0
 801f4a2:	18e2      	adds	r2, r4, r3
 801f4a4:	4b61      	ldr	r3, [pc, #388]	; (801f62c <Transform+0x11bc>)
 801f4a6:	4413      	add	r3, r2
 801f4a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801f4aa:	4413      	add	r3, r2
 801f4ac:	653b      	str	r3, [r7, #80]	; 0x50
 801f4ae:	211e      	movs	r1, #30
 801f4b0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801f4b2:	f7fe ff31 	bl	801e318 <rotlFixed>
 801f4b6:	65f8      	str	r0, [r7, #92]	; 0x5c
 801f4b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801f4ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801f4bc:	401a      	ands	r2, r3
 801f4be:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801f4c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801f4c2:	4319      	orrs	r1, r3
 801f4c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f4c6:	400b      	ands	r3, r1
 801f4c8:	ea42 0403 	orr.w	r4, r2, r3
 801f4cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f4ce:	693b      	ldr	r3, [r7, #16]
 801f4d0:	405a      	eors	r2, r3
 801f4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f4d4:	405a      	eors	r2, r3
 801f4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f4d8:	4053      	eors	r3, r2
 801f4da:	2101      	movs	r1, #1
 801f4dc:	4618      	mov	r0, r3
 801f4de:	f7fe ff1b 	bl	801e318 <rotlFixed>
 801f4e2:	4603      	mov	r3, r0
 801f4e4:	633b      	str	r3, [r7, #48]	; 0x30
 801f4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f4e8:	441c      	add	r4, r3
 801f4ea:	2105      	movs	r1, #5
 801f4ec:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801f4ee:	f7fe ff13 	bl	801e318 <rotlFixed>
 801f4f2:	4603      	mov	r3, r0
 801f4f4:	18e2      	adds	r2, r4, r3
 801f4f6:	4b4d      	ldr	r3, [pc, #308]	; (801f62c <Transform+0x11bc>)
 801f4f8:	4413      	add	r3, r2
 801f4fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f4fc:	4413      	add	r3, r2
 801f4fe:	657b      	str	r3, [r7, #84]	; 0x54
 801f500:	211e      	movs	r1, #30
 801f502:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801f504:	f7fe ff08 	bl	801e318 <rotlFixed>
 801f508:	64f8      	str	r0, [r7, #76]	; 0x4c
 801f50a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801f50c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f50e:	401a      	ands	r2, r3
 801f510:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801f512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f514:	4319      	orrs	r1, r3
 801f516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801f518:	400b      	ands	r3, r1
 801f51a:	ea42 0403 	orr.w	r4, r2, r3
 801f51e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f520:	697b      	ldr	r3, [r7, #20]
 801f522:	405a      	eors	r2, r3
 801f524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f526:	405a      	eors	r2, r3
 801f528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f52a:	4053      	eors	r3, r2
 801f52c:	2101      	movs	r1, #1
 801f52e:	4618      	mov	r0, r3
 801f530:	f7fe fef2 	bl	801e318 <rotlFixed>
 801f534:	4603      	mov	r3, r0
 801f536:	637b      	str	r3, [r7, #52]	; 0x34
 801f538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f53a:	441c      	add	r4, r3
 801f53c:	2105      	movs	r1, #5
 801f53e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801f540:	f7fe feea 	bl	801e318 <rotlFixed>
 801f544:	4603      	mov	r3, r0
 801f546:	18e2      	adds	r2, r4, r3
 801f548:	4b38      	ldr	r3, [pc, #224]	; (801f62c <Transform+0x11bc>)
 801f54a:	4413      	add	r3, r2
 801f54c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801f54e:	4413      	add	r3, r2
 801f550:	65bb      	str	r3, [r7, #88]	; 0x58
 801f552:	211e      	movs	r1, #30
 801f554:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801f556:	f7fe fedf 	bl	801e318 <rotlFixed>
 801f55a:	6538      	str	r0, [r7, #80]	; 0x50
 801f55c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f55e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f560:	401a      	ands	r2, r3
 801f562:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801f564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f566:	4319      	orrs	r1, r3
 801f568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f56a:	400b      	ands	r3, r1
 801f56c:	ea42 0403 	orr.w	r4, r2, r3
 801f570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f572:	69bb      	ldr	r3, [r7, #24]
 801f574:	405a      	eors	r2, r3
 801f576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f578:	405a      	eors	r2, r3
 801f57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f57c:	4053      	eors	r3, r2
 801f57e:	2101      	movs	r1, #1
 801f580:	4618      	mov	r0, r3
 801f582:	f7fe fec9 	bl	801e318 <rotlFixed>
 801f586:	4603      	mov	r3, r0
 801f588:	63bb      	str	r3, [r7, #56]	; 0x38
 801f58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f58c:	441c      	add	r4, r3
 801f58e:	2105      	movs	r1, #5
 801f590:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801f592:	f7fe fec1 	bl	801e318 <rotlFixed>
 801f596:	4603      	mov	r3, r0
 801f598:	18e2      	adds	r2, r4, r3
 801f59a:	4b24      	ldr	r3, [pc, #144]	; (801f62c <Transform+0x11bc>)
 801f59c:	4413      	add	r3, r2
 801f59e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801f5a0:	4413      	add	r3, r2
 801f5a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 801f5a4:	211e      	movs	r1, #30
 801f5a6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801f5a8:	f7fe feb6 	bl	801e318 <rotlFixed>
 801f5ac:	6578      	str	r0, [r7, #84]	; 0x54

        R4(a,b,c,d,e,60); R4(e,a,b,c,d,61); R4(d,e,a,b,c,62); R4(c,d,e,a,b,63);
 801f5ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801f5b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f5b2:	405a      	eors	r2, r3
 801f5b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f5b6:	ea82 0403 	eor.w	r4, r2, r3
 801f5ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f5bc:	69fb      	ldr	r3, [r7, #28]
 801f5be:	405a      	eors	r2, r3
 801f5c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f5c2:	405a      	eors	r2, r3
 801f5c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f5c6:	4053      	eors	r3, r2
 801f5c8:	2101      	movs	r1, #1
 801f5ca:	4618      	mov	r0, r3
 801f5cc:	f7fe fea4 	bl	801e318 <rotlFixed>
 801f5d0:	4603      	mov	r3, r0
 801f5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 801f5d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f5d6:	441c      	add	r4, r3
 801f5d8:	2105      	movs	r1, #5
 801f5da:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801f5dc:	f7fe fe9c 	bl	801e318 <rotlFixed>
 801f5e0:	4603      	mov	r3, r0
 801f5e2:	18e2      	adds	r2, r4, r3
 801f5e4:	4b12      	ldr	r3, [pc, #72]	; (801f630 <Transform+0x11c0>)
 801f5e6:	4413      	add	r3, r2
 801f5e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801f5ea:	4413      	add	r3, r2
 801f5ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 801f5ee:	211e      	movs	r1, #30
 801f5f0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801f5f2:	f7fe fe91 	bl	801e318 <rotlFixed>
 801f5f6:	65b8      	str	r0, [r7, #88]	; 0x58
 801f5f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801f5fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f5fc:	405a      	eors	r2, r3
 801f5fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f600:	ea82 0403 	eor.w	r4, r2, r3
 801f604:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f606:	6a3b      	ldr	r3, [r7, #32]
 801f608:	405a      	eors	r2, r3
 801f60a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f60c:	405a      	eors	r2, r3
 801f60e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f610:	4053      	eors	r3, r2
 801f612:	2101      	movs	r1, #1
 801f614:	4618      	mov	r0, r3
 801f616:	f7fe fe7f 	bl	801e318 <rotlFixed>
 801f61a:	4603      	mov	r3, r0
 801f61c:	643b      	str	r3, [r7, #64]	; 0x40
 801f61e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f620:	441c      	add	r4, r3
 801f622:	2105      	movs	r1, #5
 801f624:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801f626:	f7fe fe77 	bl	801e318 <rotlFixed>
 801f62a:	e003      	b.n	801f634 <Transform+0x11c4>
 801f62c:	8f1bbcdc 	.word	0x8f1bbcdc
 801f630:	ca62c1d6 	.word	0xca62c1d6
 801f634:	4603      	mov	r3, r0
 801f636:	18e2      	adds	r2, r4, r3
 801f638:	4bb4      	ldr	r3, [pc, #720]	; (801f90c <Transform+0x149c>)
 801f63a:	4413      	add	r3, r2
 801f63c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801f63e:	4413      	add	r3, r2
 801f640:	653b      	str	r3, [r7, #80]	; 0x50
 801f642:	211e      	movs	r1, #30
 801f644:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801f646:	f7fe fe67 	bl	801e318 <rotlFixed>
 801f64a:	65f8      	str	r0, [r7, #92]	; 0x5c
 801f64c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801f64e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801f650:	405a      	eors	r2, r3
 801f652:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f654:	ea82 0403 	eor.w	r4, r2, r3
 801f658:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801f65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f65c:	405a      	eors	r2, r3
 801f65e:	68fb      	ldr	r3, [r7, #12]
 801f660:	405a      	eors	r2, r3
 801f662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f664:	4053      	eors	r3, r2
 801f666:	2101      	movs	r1, #1
 801f668:	4618      	mov	r0, r3
 801f66a:	f7fe fe55 	bl	801e318 <rotlFixed>
 801f66e:	4603      	mov	r3, r0
 801f670:	647b      	str	r3, [r7, #68]	; 0x44
 801f672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f674:	441c      	add	r4, r3
 801f676:	2105      	movs	r1, #5
 801f678:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801f67a:	f7fe fe4d 	bl	801e318 <rotlFixed>
 801f67e:	4603      	mov	r3, r0
 801f680:	18e2      	adds	r2, r4, r3
 801f682:	4ba2      	ldr	r3, [pc, #648]	; (801f90c <Transform+0x149c>)
 801f684:	4413      	add	r3, r2
 801f686:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f688:	4413      	add	r3, r2
 801f68a:	657b      	str	r3, [r7, #84]	; 0x54
 801f68c:	211e      	movs	r1, #30
 801f68e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801f690:	f7fe fe42 	bl	801e318 <rotlFixed>
 801f694:	64f8      	str	r0, [r7, #76]	; 0x4c
 801f696:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801f698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f69a:	405a      	eors	r2, r3
 801f69c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801f69e:	ea82 0403 	eor.w	r4, r2, r3
 801f6a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801f6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f6a6:	405a      	eors	r2, r3
 801f6a8:	693b      	ldr	r3, [r7, #16]
 801f6aa:	405a      	eors	r2, r3
 801f6ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f6ae:	4053      	eors	r3, r2
 801f6b0:	2101      	movs	r1, #1
 801f6b2:	4618      	mov	r0, r3
 801f6b4:	f7fe fe30 	bl	801e318 <rotlFixed>
 801f6b8:	4603      	mov	r3, r0
 801f6ba:	64bb      	str	r3, [r7, #72]	; 0x48
 801f6bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f6be:	441c      	add	r4, r3
 801f6c0:	2105      	movs	r1, #5
 801f6c2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801f6c4:	f7fe fe28 	bl	801e318 <rotlFixed>
 801f6c8:	4603      	mov	r3, r0
 801f6ca:	18e2      	adds	r2, r4, r3
 801f6cc:	4b8f      	ldr	r3, [pc, #572]	; (801f90c <Transform+0x149c>)
 801f6ce:	4413      	add	r3, r2
 801f6d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801f6d2:	4413      	add	r3, r2
 801f6d4:	65bb      	str	r3, [r7, #88]	; 0x58
 801f6d6:	211e      	movs	r1, #30
 801f6d8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801f6da:	f7fe fe1d 	bl	801e318 <rotlFixed>
 801f6de:	6538      	str	r0, [r7, #80]	; 0x50
        R4(b,c,d,e,a,64); R4(a,b,c,d,e,65); R4(e,a,b,c,d,66); R4(d,e,a,b,c,67);
 801f6e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f6e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f6e4:	405a      	eors	r2, r3
 801f6e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f6e8:	ea82 0403 	eor.w	r4, r2, r3
 801f6ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801f6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f6f0:	405a      	eors	r2, r3
 801f6f2:	697b      	ldr	r3, [r7, #20]
 801f6f4:	405a      	eors	r2, r3
 801f6f6:	68fb      	ldr	r3, [r7, #12]
 801f6f8:	4053      	eors	r3, r2
 801f6fa:	2101      	movs	r1, #1
 801f6fc:	4618      	mov	r0, r3
 801f6fe:	f7fe fe0b 	bl	801e318 <rotlFixed>
 801f702:	4603      	mov	r3, r0
 801f704:	60fb      	str	r3, [r7, #12]
 801f706:	68fb      	ldr	r3, [r7, #12]
 801f708:	441c      	add	r4, r3
 801f70a:	2105      	movs	r1, #5
 801f70c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801f70e:	f7fe fe03 	bl	801e318 <rotlFixed>
 801f712:	4603      	mov	r3, r0
 801f714:	18e2      	adds	r2, r4, r3
 801f716:	4b7d      	ldr	r3, [pc, #500]	; (801f90c <Transform+0x149c>)
 801f718:	4413      	add	r3, r2
 801f71a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801f71c:	4413      	add	r3, r2
 801f71e:	65fb      	str	r3, [r7, #92]	; 0x5c
 801f720:	211e      	movs	r1, #30
 801f722:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801f724:	f7fe fdf8 	bl	801e318 <rotlFixed>
 801f728:	6578      	str	r0, [r7, #84]	; 0x54
 801f72a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801f72c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f72e:	405a      	eors	r2, r3
 801f730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f732:	ea82 0403 	eor.w	r4, r2, r3
 801f736:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801f738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f73a:	405a      	eors	r2, r3
 801f73c:	69bb      	ldr	r3, [r7, #24]
 801f73e:	405a      	eors	r2, r3
 801f740:	693b      	ldr	r3, [r7, #16]
 801f742:	4053      	eors	r3, r2
 801f744:	2101      	movs	r1, #1
 801f746:	4618      	mov	r0, r3
 801f748:	f7fe fde6 	bl	801e318 <rotlFixed>
 801f74c:	4603      	mov	r3, r0
 801f74e:	613b      	str	r3, [r7, #16]
 801f750:	693b      	ldr	r3, [r7, #16]
 801f752:	441c      	add	r4, r3
 801f754:	2105      	movs	r1, #5
 801f756:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801f758:	f7fe fdde 	bl	801e318 <rotlFixed>
 801f75c:	4603      	mov	r3, r0
 801f75e:	18e2      	adds	r2, r4, r3
 801f760:	4b6a      	ldr	r3, [pc, #424]	; (801f90c <Transform+0x149c>)
 801f762:	4413      	add	r3, r2
 801f764:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801f766:	4413      	add	r3, r2
 801f768:	64fb      	str	r3, [r7, #76]	; 0x4c
 801f76a:	211e      	movs	r1, #30
 801f76c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801f76e:	f7fe fdd3 	bl	801e318 <rotlFixed>
 801f772:	65b8      	str	r0, [r7, #88]	; 0x58
 801f774:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801f776:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f778:	405a      	eors	r2, r3
 801f77a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f77c:	ea82 0403 	eor.w	r4, r2, r3
 801f780:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801f782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f784:	405a      	eors	r2, r3
 801f786:	69fb      	ldr	r3, [r7, #28]
 801f788:	405a      	eors	r2, r3
 801f78a:	697b      	ldr	r3, [r7, #20]
 801f78c:	4053      	eors	r3, r2
 801f78e:	2101      	movs	r1, #1
 801f790:	4618      	mov	r0, r3
 801f792:	f7fe fdc1 	bl	801e318 <rotlFixed>
 801f796:	4603      	mov	r3, r0
 801f798:	617b      	str	r3, [r7, #20]
 801f79a:	697b      	ldr	r3, [r7, #20]
 801f79c:	441c      	add	r4, r3
 801f79e:	2105      	movs	r1, #5
 801f7a0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801f7a2:	f7fe fdb9 	bl	801e318 <rotlFixed>
 801f7a6:	4603      	mov	r3, r0
 801f7a8:	18e2      	adds	r2, r4, r3
 801f7aa:	4b58      	ldr	r3, [pc, #352]	; (801f90c <Transform+0x149c>)
 801f7ac:	4413      	add	r3, r2
 801f7ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801f7b0:	4413      	add	r3, r2
 801f7b2:	653b      	str	r3, [r7, #80]	; 0x50
 801f7b4:	211e      	movs	r1, #30
 801f7b6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801f7b8:	f7fe fdae 	bl	801e318 <rotlFixed>
 801f7bc:	65f8      	str	r0, [r7, #92]	; 0x5c
 801f7be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801f7c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801f7c2:	405a      	eors	r2, r3
 801f7c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f7c6:	ea82 0403 	eor.w	r4, r2, r3
 801f7ca:	68fa      	ldr	r2, [r7, #12]
 801f7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f7ce:	405a      	eors	r2, r3
 801f7d0:	6a3b      	ldr	r3, [r7, #32]
 801f7d2:	405a      	eors	r2, r3
 801f7d4:	69bb      	ldr	r3, [r7, #24]
 801f7d6:	4053      	eors	r3, r2
 801f7d8:	2101      	movs	r1, #1
 801f7da:	4618      	mov	r0, r3
 801f7dc:	f7fe fd9c 	bl	801e318 <rotlFixed>
 801f7e0:	4603      	mov	r3, r0
 801f7e2:	61bb      	str	r3, [r7, #24]
 801f7e4:	69bb      	ldr	r3, [r7, #24]
 801f7e6:	441c      	add	r4, r3
 801f7e8:	2105      	movs	r1, #5
 801f7ea:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801f7ec:	f7fe fd94 	bl	801e318 <rotlFixed>
 801f7f0:	4603      	mov	r3, r0
 801f7f2:	18e2      	adds	r2, r4, r3
 801f7f4:	4b45      	ldr	r3, [pc, #276]	; (801f90c <Transform+0x149c>)
 801f7f6:	4413      	add	r3, r2
 801f7f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f7fa:	4413      	add	r3, r2
 801f7fc:	657b      	str	r3, [r7, #84]	; 0x54
 801f7fe:	211e      	movs	r1, #30
 801f800:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801f802:	f7fe fd89 	bl	801e318 <rotlFixed>
 801f806:	64f8      	str	r0, [r7, #76]	; 0x4c
        R4(c,d,e,a,b,68); R4(b,c,d,e,a,69); R4(a,b,c,d,e,70); R4(e,a,b,c,d,71);
 801f808:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801f80a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f80c:	405a      	eors	r2, r3
 801f80e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801f810:	ea82 0403 	eor.w	r4, r2, r3
 801f814:	693a      	ldr	r2, [r7, #16]
 801f816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f818:	405a      	eors	r2, r3
 801f81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f81c:	405a      	eors	r2, r3
 801f81e:	69fb      	ldr	r3, [r7, #28]
 801f820:	4053      	eors	r3, r2
 801f822:	2101      	movs	r1, #1
 801f824:	4618      	mov	r0, r3
 801f826:	f7fe fd77 	bl	801e318 <rotlFixed>
 801f82a:	4603      	mov	r3, r0
 801f82c:	61fb      	str	r3, [r7, #28]
 801f82e:	69fb      	ldr	r3, [r7, #28]
 801f830:	441c      	add	r4, r3
 801f832:	2105      	movs	r1, #5
 801f834:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801f836:	f7fe fd6f 	bl	801e318 <rotlFixed>
 801f83a:	4603      	mov	r3, r0
 801f83c:	18e2      	adds	r2, r4, r3
 801f83e:	4b33      	ldr	r3, [pc, #204]	; (801f90c <Transform+0x149c>)
 801f840:	4413      	add	r3, r2
 801f842:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801f844:	4413      	add	r3, r2
 801f846:	65bb      	str	r3, [r7, #88]	; 0x58
 801f848:	211e      	movs	r1, #30
 801f84a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801f84c:	f7fe fd64 	bl	801e318 <rotlFixed>
 801f850:	6538      	str	r0, [r7, #80]	; 0x50
 801f852:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f856:	405a      	eors	r2, r3
 801f858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f85a:	ea82 0403 	eor.w	r4, r2, r3
 801f85e:	697a      	ldr	r2, [r7, #20]
 801f860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f862:	405a      	eors	r2, r3
 801f864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f866:	405a      	eors	r2, r3
 801f868:	6a3b      	ldr	r3, [r7, #32]
 801f86a:	4053      	eors	r3, r2
 801f86c:	2101      	movs	r1, #1
 801f86e:	4618      	mov	r0, r3
 801f870:	f7fe fd52 	bl	801e318 <rotlFixed>
 801f874:	4603      	mov	r3, r0
 801f876:	623b      	str	r3, [r7, #32]
 801f878:	6a3b      	ldr	r3, [r7, #32]
 801f87a:	441c      	add	r4, r3
 801f87c:	2105      	movs	r1, #5
 801f87e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801f880:	f7fe fd4a 	bl	801e318 <rotlFixed>
 801f884:	4603      	mov	r3, r0
 801f886:	18e2      	adds	r2, r4, r3
 801f888:	4b20      	ldr	r3, [pc, #128]	; (801f90c <Transform+0x149c>)
 801f88a:	4413      	add	r3, r2
 801f88c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801f88e:	4413      	add	r3, r2
 801f890:	65fb      	str	r3, [r7, #92]	; 0x5c
 801f892:	211e      	movs	r1, #30
 801f894:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801f896:	f7fe fd3f 	bl	801e318 <rotlFixed>
 801f89a:	6578      	str	r0, [r7, #84]	; 0x54
 801f89c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801f89e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f8a0:	405a      	eors	r2, r3
 801f8a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f8a4:	ea82 0403 	eor.w	r4, r2, r3
 801f8a8:	69ba      	ldr	r2, [r7, #24]
 801f8aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f8ac:	405a      	eors	r2, r3
 801f8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f8b0:	405a      	eors	r2, r3
 801f8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f8b4:	4053      	eors	r3, r2
 801f8b6:	2101      	movs	r1, #1
 801f8b8:	4618      	mov	r0, r3
 801f8ba:	f7fe fd2d 	bl	801e318 <rotlFixed>
 801f8be:	4603      	mov	r3, r0
 801f8c0:	627b      	str	r3, [r7, #36]	; 0x24
 801f8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f8c4:	441c      	add	r4, r3
 801f8c6:	2105      	movs	r1, #5
 801f8c8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801f8ca:	f7fe fd25 	bl	801e318 <rotlFixed>
 801f8ce:	4603      	mov	r3, r0
 801f8d0:	18e2      	adds	r2, r4, r3
 801f8d2:	4b0e      	ldr	r3, [pc, #56]	; (801f90c <Transform+0x149c>)
 801f8d4:	4413      	add	r3, r2
 801f8d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801f8d8:	4413      	add	r3, r2
 801f8da:	64fb      	str	r3, [r7, #76]	; 0x4c
 801f8dc:	211e      	movs	r1, #30
 801f8de:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801f8e0:	f7fe fd1a 	bl	801e318 <rotlFixed>
 801f8e4:	65b8      	str	r0, [r7, #88]	; 0x58
 801f8e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801f8e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f8ea:	405a      	eors	r2, r3
 801f8ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f8ee:	ea82 0403 	eor.w	r4, r2, r3
 801f8f2:	69fa      	ldr	r2, [r7, #28]
 801f8f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f8f6:	405a      	eors	r2, r3
 801f8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f8fa:	405a      	eors	r2, r3
 801f8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f8fe:	4053      	eors	r3, r2
 801f900:	2101      	movs	r1, #1
 801f902:	4618      	mov	r0, r3
 801f904:	f7fe fd08 	bl	801e318 <rotlFixed>
 801f908:	4603      	mov	r3, r0
 801f90a:	e001      	b.n	801f910 <Transform+0x14a0>
 801f90c:	ca62c1d6 	.word	0xca62c1d6
 801f910:	62bb      	str	r3, [r7, #40]	; 0x28
 801f912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f914:	441c      	add	r4, r3
 801f916:	2105      	movs	r1, #5
 801f918:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801f91a:	f7fe fcfd 	bl	801e318 <rotlFixed>
 801f91e:	4603      	mov	r3, r0
 801f920:	18e2      	adds	r2, r4, r3
 801f922:	4baa      	ldr	r3, [pc, #680]	; (801fbcc <Transform+0x175c>)
 801f924:	4413      	add	r3, r2
 801f926:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801f928:	4413      	add	r3, r2
 801f92a:	653b      	str	r3, [r7, #80]	; 0x50
 801f92c:	211e      	movs	r1, #30
 801f92e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801f930:	f7fe fcf2 	bl	801e318 <rotlFixed>
 801f934:	65f8      	str	r0, [r7, #92]	; 0x5c
        R4(d,e,a,b,c,72); R4(c,d,e,a,b,73); R4(b,c,d,e,a,74); R4(a,b,c,d,e,75);
 801f936:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801f938:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801f93a:	405a      	eors	r2, r3
 801f93c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f93e:	ea82 0403 	eor.w	r4, r2, r3
 801f942:	6a3a      	ldr	r2, [r7, #32]
 801f944:	68fb      	ldr	r3, [r7, #12]
 801f946:	405a      	eors	r2, r3
 801f948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f94a:	405a      	eors	r2, r3
 801f94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f94e:	4053      	eors	r3, r2
 801f950:	2101      	movs	r1, #1
 801f952:	4618      	mov	r0, r3
 801f954:	f7fe fce0 	bl	801e318 <rotlFixed>
 801f958:	4603      	mov	r3, r0
 801f95a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f95e:	441c      	add	r4, r3
 801f960:	2105      	movs	r1, #5
 801f962:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801f964:	f7fe fcd8 	bl	801e318 <rotlFixed>
 801f968:	4603      	mov	r3, r0
 801f96a:	18e2      	adds	r2, r4, r3
 801f96c:	4b97      	ldr	r3, [pc, #604]	; (801fbcc <Transform+0x175c>)
 801f96e:	4413      	add	r3, r2
 801f970:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f972:	4413      	add	r3, r2
 801f974:	657b      	str	r3, [r7, #84]	; 0x54
 801f976:	211e      	movs	r1, #30
 801f978:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801f97a:	f7fe fccd 	bl	801e318 <rotlFixed>
 801f97e:	64f8      	str	r0, [r7, #76]	; 0x4c
 801f980:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801f982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f984:	405a      	eors	r2, r3
 801f986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801f988:	ea82 0403 	eor.w	r4, r2, r3
 801f98c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f98e:	693b      	ldr	r3, [r7, #16]
 801f990:	405a      	eors	r2, r3
 801f992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f994:	405a      	eors	r2, r3
 801f996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f998:	4053      	eors	r3, r2
 801f99a:	2101      	movs	r1, #1
 801f99c:	4618      	mov	r0, r3
 801f99e:	f7fe fcbb 	bl	801e318 <rotlFixed>
 801f9a2:	4603      	mov	r3, r0
 801f9a4:	633b      	str	r3, [r7, #48]	; 0x30
 801f9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f9a8:	441c      	add	r4, r3
 801f9aa:	2105      	movs	r1, #5
 801f9ac:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801f9ae:	f7fe fcb3 	bl	801e318 <rotlFixed>
 801f9b2:	4603      	mov	r3, r0
 801f9b4:	18e2      	adds	r2, r4, r3
 801f9b6:	4b85      	ldr	r3, [pc, #532]	; (801fbcc <Transform+0x175c>)
 801f9b8:	4413      	add	r3, r2
 801f9ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801f9bc:	4413      	add	r3, r2
 801f9be:	65bb      	str	r3, [r7, #88]	; 0x58
 801f9c0:	211e      	movs	r1, #30
 801f9c2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801f9c4:	f7fe fca8 	bl	801e318 <rotlFixed>
 801f9c8:	6538      	str	r0, [r7, #80]	; 0x50
 801f9ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f9cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f9ce:	405a      	eors	r2, r3
 801f9d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f9d2:	ea82 0403 	eor.w	r4, r2, r3
 801f9d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f9d8:	697b      	ldr	r3, [r7, #20]
 801f9da:	405a      	eors	r2, r3
 801f9dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f9de:	405a      	eors	r2, r3
 801f9e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f9e2:	4053      	eors	r3, r2
 801f9e4:	2101      	movs	r1, #1
 801f9e6:	4618      	mov	r0, r3
 801f9e8:	f7fe fc96 	bl	801e318 <rotlFixed>
 801f9ec:	4603      	mov	r3, r0
 801f9ee:	637b      	str	r3, [r7, #52]	; 0x34
 801f9f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f9f2:	441c      	add	r4, r3
 801f9f4:	2105      	movs	r1, #5
 801f9f6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801f9f8:	f7fe fc8e 	bl	801e318 <rotlFixed>
 801f9fc:	4603      	mov	r3, r0
 801f9fe:	18e2      	adds	r2, r4, r3
 801fa00:	4b72      	ldr	r3, [pc, #456]	; (801fbcc <Transform+0x175c>)
 801fa02:	4413      	add	r3, r2
 801fa04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801fa06:	4413      	add	r3, r2
 801fa08:	65fb      	str	r3, [r7, #92]	; 0x5c
 801fa0a:	211e      	movs	r1, #30
 801fa0c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801fa0e:	f7fe fc83 	bl	801e318 <rotlFixed>
 801fa12:	6578      	str	r0, [r7, #84]	; 0x54
 801fa14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801fa16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801fa18:	405a      	eors	r2, r3
 801fa1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801fa1c:	ea82 0403 	eor.w	r4, r2, r3
 801fa20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801fa22:	69bb      	ldr	r3, [r7, #24]
 801fa24:	405a      	eors	r2, r3
 801fa26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fa28:	405a      	eors	r2, r3
 801fa2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fa2c:	4053      	eors	r3, r2
 801fa2e:	2101      	movs	r1, #1
 801fa30:	4618      	mov	r0, r3
 801fa32:	f7fe fc71 	bl	801e318 <rotlFixed>
 801fa36:	4603      	mov	r3, r0
 801fa38:	63bb      	str	r3, [r7, #56]	; 0x38
 801fa3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fa3c:	441c      	add	r4, r3
 801fa3e:	2105      	movs	r1, #5
 801fa40:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801fa42:	f7fe fc69 	bl	801e318 <rotlFixed>
 801fa46:	4603      	mov	r3, r0
 801fa48:	18e2      	adds	r2, r4, r3
 801fa4a:	4b60      	ldr	r3, [pc, #384]	; (801fbcc <Transform+0x175c>)
 801fa4c:	4413      	add	r3, r2
 801fa4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801fa50:	4413      	add	r3, r2
 801fa52:	64fb      	str	r3, [r7, #76]	; 0x4c
 801fa54:	211e      	movs	r1, #30
 801fa56:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801fa58:	f7fe fc5e 	bl	801e318 <rotlFixed>
 801fa5c:	65b8      	str	r0, [r7, #88]	; 0x58
        R4(e,a,b,c,d,76); R4(d,e,a,b,c,77); R4(c,d,e,a,b,78); R4(b,c,d,e,a,79);
 801fa5e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801fa60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801fa62:	405a      	eors	r2, r3
 801fa64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801fa66:	ea82 0403 	eor.w	r4, r2, r3
 801fa6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801fa6c:	69fb      	ldr	r3, [r7, #28]
 801fa6e:	405a      	eors	r2, r3
 801fa70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fa72:	405a      	eors	r2, r3
 801fa74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fa76:	4053      	eors	r3, r2
 801fa78:	2101      	movs	r1, #1
 801fa7a:	4618      	mov	r0, r3
 801fa7c:	f7fe fc4c 	bl	801e318 <rotlFixed>
 801fa80:	4603      	mov	r3, r0
 801fa82:	63fb      	str	r3, [r7, #60]	; 0x3c
 801fa84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fa86:	441c      	add	r4, r3
 801fa88:	2105      	movs	r1, #5
 801fa8a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801fa8c:	f7fe fc44 	bl	801e318 <rotlFixed>
 801fa90:	4603      	mov	r3, r0
 801fa92:	18e2      	adds	r2, r4, r3
 801fa94:	4b4d      	ldr	r3, [pc, #308]	; (801fbcc <Transform+0x175c>)
 801fa96:	4413      	add	r3, r2
 801fa98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801fa9a:	4413      	add	r3, r2
 801fa9c:	653b      	str	r3, [r7, #80]	; 0x50
 801fa9e:	211e      	movs	r1, #30
 801faa0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801faa2:	f7fe fc39 	bl	801e318 <rotlFixed>
 801faa6:	65f8      	str	r0, [r7, #92]	; 0x5c
 801faa8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801faaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801faac:	405a      	eors	r2, r3
 801faae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801fab0:	ea82 0403 	eor.w	r4, r2, r3
 801fab4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801fab6:	6a3b      	ldr	r3, [r7, #32]
 801fab8:	405a      	eors	r2, r3
 801faba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801fabc:	405a      	eors	r2, r3
 801fabe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fac0:	4053      	eors	r3, r2
 801fac2:	2101      	movs	r1, #1
 801fac4:	4618      	mov	r0, r3
 801fac6:	f7fe fc27 	bl	801e318 <rotlFixed>
 801faca:	4603      	mov	r3, r0
 801facc:	643b      	str	r3, [r7, #64]	; 0x40
 801face:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fad0:	441c      	add	r4, r3
 801fad2:	2105      	movs	r1, #5
 801fad4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801fad6:	f7fe fc1f 	bl	801e318 <rotlFixed>
 801fada:	4603      	mov	r3, r0
 801fadc:	18e2      	adds	r2, r4, r3
 801fade:	4b3b      	ldr	r3, [pc, #236]	; (801fbcc <Transform+0x175c>)
 801fae0:	4413      	add	r3, r2
 801fae2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801fae4:	4413      	add	r3, r2
 801fae6:	657b      	str	r3, [r7, #84]	; 0x54
 801fae8:	211e      	movs	r1, #30
 801faea:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801faec:	f7fe fc14 	bl	801e318 <rotlFixed>
 801faf0:	64f8      	str	r0, [r7, #76]	; 0x4c
 801faf2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801faf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801faf6:	405a      	eors	r2, r3
 801faf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801fafa:	ea82 0403 	eor.w	r4, r2, r3
 801fafe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801fb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fb02:	405a      	eors	r2, r3
 801fb04:	68fb      	ldr	r3, [r7, #12]
 801fb06:	405a      	eors	r2, r3
 801fb08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fb0a:	4053      	eors	r3, r2
 801fb0c:	2101      	movs	r1, #1
 801fb0e:	4618      	mov	r0, r3
 801fb10:	f7fe fc02 	bl	801e318 <rotlFixed>
 801fb14:	4603      	mov	r3, r0
 801fb16:	647b      	str	r3, [r7, #68]	; 0x44
 801fb18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fb1a:	441c      	add	r4, r3
 801fb1c:	2105      	movs	r1, #5
 801fb1e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801fb20:	f7fe fbfa 	bl	801e318 <rotlFixed>
 801fb24:	4603      	mov	r3, r0
 801fb26:	18e2      	adds	r2, r4, r3
 801fb28:	4b28      	ldr	r3, [pc, #160]	; (801fbcc <Transform+0x175c>)
 801fb2a:	4413      	add	r3, r2
 801fb2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801fb2e:	4413      	add	r3, r2
 801fb30:	65bb      	str	r3, [r7, #88]	; 0x58
 801fb32:	211e      	movs	r1, #30
 801fb34:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801fb36:	f7fe fbef 	bl	801e318 <rotlFixed>
 801fb3a:	6538      	str	r0, [r7, #80]	; 0x50
 801fb3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801fb3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801fb40:	405a      	eors	r2, r3
 801fb42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801fb44:	ea82 0403 	eor.w	r4, r2, r3
 801fb48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801fb4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fb4c:	405a      	eors	r2, r3
 801fb4e:	693b      	ldr	r3, [r7, #16]
 801fb50:	405a      	eors	r2, r3
 801fb52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801fb54:	4053      	eors	r3, r2
 801fb56:	2101      	movs	r1, #1
 801fb58:	4618      	mov	r0, r3
 801fb5a:	f7fe fbdd 	bl	801e318 <rotlFixed>
 801fb5e:	4603      	mov	r3, r0
 801fb60:	64bb      	str	r3, [r7, #72]	; 0x48
 801fb62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801fb64:	441c      	add	r4, r3
 801fb66:	2105      	movs	r1, #5
 801fb68:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801fb6a:	f7fe fbd5 	bl	801e318 <rotlFixed>
 801fb6e:	4603      	mov	r3, r0
 801fb70:	18e2      	adds	r2, r4, r3
 801fb72:	4b16      	ldr	r3, [pc, #88]	; (801fbcc <Transform+0x175c>)
 801fb74:	4413      	add	r3, r2
 801fb76:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801fb78:	4413      	add	r3, r2
 801fb7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801fb7c:	211e      	movs	r1, #30
 801fb7e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801fb80:	f7fe fbca 	bl	801e318 <rotlFixed>
 801fb84:	6578      	str	r0, [r7, #84]	; 0x54
    #endif

        /* Add the working vars back into digest state[] */
        sha->digest[0] += a;
 801fb86:	687b      	ldr	r3, [r7, #4]
 801fb88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fb8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801fb8c:	441a      	add	r2, r3
 801fb8e:	687b      	ldr	r3, [r7, #4]
 801fb90:	64da      	str	r2, [r3, #76]	; 0x4c
        sha->digest[1] += b;
 801fb92:	687b      	ldr	r3, [r7, #4]
 801fb94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801fb96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801fb98:	441a      	add	r2, r3
 801fb9a:	687b      	ldr	r3, [r7, #4]
 801fb9c:	651a      	str	r2, [r3, #80]	; 0x50
        sha->digest[2] += c;
 801fb9e:	687b      	ldr	r3, [r7, #4]
 801fba0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801fba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801fba4:	441a      	add	r2, r3
 801fba6:	687b      	ldr	r3, [r7, #4]
 801fba8:	655a      	str	r2, [r3, #84]	; 0x54
        sha->digest[3] += d;
 801fbaa:	687b      	ldr	r3, [r7, #4]
 801fbac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801fbae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801fbb0:	441a      	add	r2, r3
 801fbb2:	687b      	ldr	r3, [r7, #4]
 801fbb4:	659a      	str	r2, [r3, #88]	; 0x58
        sha->digest[4] += e;
 801fbb6:	687b      	ldr	r3, [r7, #4]
 801fbb8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801fbba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801fbbc:	441a      	add	r2, r3
 801fbbe:	687b      	ldr	r3, [r7, #4]
 801fbc0:	65da      	str	r2, [r3, #92]	; 0x5c

        (void)data; /* Not used */

        return 0;
 801fbc2:	2300      	movs	r3, #0
    }
 801fbc4:	4618      	mov	r0, r3
 801fbc6:	3764      	adds	r7, #100	; 0x64
 801fbc8:	46bd      	mov	sp, r7
 801fbca:	bd90      	pop	{r4, r7, pc}
 801fbcc:	ca62c1d6 	.word	0xca62c1d6

0801fbd0 <wc_InitSha_ex>:
#endif /* !USE_CUSTOM_SHA_TRANSFORM */


int wc_InitSha_ex(wc_Sha* sha, void* heap, int devId)
{
 801fbd0:	b580      	push	{r7, lr}
 801fbd2:	b086      	sub	sp, #24
 801fbd4:	af00      	add	r7, sp, #0
 801fbd6:	60f8      	str	r0, [r7, #12]
 801fbd8:	60b9      	str	r1, [r7, #8]
 801fbda:	607a      	str	r2, [r7, #4]
    int ret = 0;
 801fbdc:	2300      	movs	r3, #0
 801fbde:	617b      	str	r3, [r7, #20]

    if (sha == NULL)
 801fbe0:	68fb      	ldr	r3, [r7, #12]
 801fbe2:	2b00      	cmp	r3, #0
 801fbe4:	d102      	bne.n	801fbec <wc_InitSha_ex+0x1c>
        return BAD_FUNC_ARG;
 801fbe6:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801fbea:	e00c      	b.n	801fc06 <wc_InitSha_ex+0x36>

    sha->heap = heap;
 801fbec:	68fb      	ldr	r3, [r7, #12]
 801fbee:	68ba      	ldr	r2, [r7, #8]
 801fbf0:	661a      	str	r2, [r3, #96]	; 0x60
#if defined(WOLFSSL_ESP32WROOM32_CRYPT) && \
    !defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
    sha->ctx.mode = ESP32_SHA_INIT;
    sha->ctx.isfirstblock = 1;
#endif
    ret = InitSha(sha);
 801fbf2:	68f8      	ldr	r0, [r7, #12]
 801fbf4:	f7fe fbee 	bl	801e3d4 <InitSha>
 801fbf8:	6178      	str	r0, [r7, #20]
    if (ret != 0)
 801fbfa:	697b      	ldr	r3, [r7, #20]
 801fbfc:	2b00      	cmp	r3, #0
 801fbfe:	d001      	beq.n	801fc04 <wc_InitSha_ex+0x34>
        return ret;
 801fc00:	697b      	ldr	r3, [r7, #20]
 801fc02:	e000      	b.n	801fc06 <wc_InitSha_ex+0x36>
                                                            sha->heap, devId);
#else
    (void)devId;
#endif /* WOLFSSL_ASYNC_CRYPT */

    return ret;
 801fc04:	697b      	ldr	r3, [r7, #20]
}
 801fc06:	4618      	mov	r0, r3
 801fc08:	3718      	adds	r7, #24
 801fc0a:	46bd      	mov	sp, r7
 801fc0c:	bd80      	pop	{r7, pc}

0801fc0e <wc_ShaUpdate>:

/* do block size increments/updates */
int wc_ShaUpdate(wc_Sha* sha, const byte* data, word32 len)
{
 801fc0e:	b580      	push	{r7, lr}
 801fc10:	b088      	sub	sp, #32
 801fc12:	af00      	add	r7, sp, #0
 801fc14:	60f8      	str	r0, [r7, #12]
 801fc16:	60b9      	str	r1, [r7, #8]
 801fc18:	607a      	str	r2, [r7, #4]
    int ret = 0;
 801fc1a:	2300      	movs	r3, #0
 801fc1c:	61fb      	str	r3, [r7, #28]
    word32 blocksLen;
    byte* local;

    if (sha == NULL || (data == NULL && len > 0)) {
 801fc1e:	68fb      	ldr	r3, [r7, #12]
 801fc20:	2b00      	cmp	r3, #0
 801fc22:	d005      	beq.n	801fc30 <wc_ShaUpdate+0x22>
 801fc24:	68bb      	ldr	r3, [r7, #8]
 801fc26:	2b00      	cmp	r3, #0
 801fc28:	d105      	bne.n	801fc36 <wc_ShaUpdate+0x28>
 801fc2a:	687b      	ldr	r3, [r7, #4]
 801fc2c:	2b00      	cmp	r3, #0
 801fc2e:	d002      	beq.n	801fc36 <wc_ShaUpdate+0x28>
        return BAD_FUNC_ARG;
 801fc30:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801fc34:	e07b      	b.n	801fd2e <wc_ShaUpdate+0x120>
    }

    if (data == NULL && len == 0) {
 801fc36:	68bb      	ldr	r3, [r7, #8]
 801fc38:	2b00      	cmp	r3, #0
 801fc3a:	d104      	bne.n	801fc46 <wc_ShaUpdate+0x38>
 801fc3c:	687b      	ldr	r3, [r7, #4]
 801fc3e:	2b00      	cmp	r3, #0
 801fc40:	d101      	bne.n	801fc46 <wc_ShaUpdate+0x38>
        /* valid, but do nothing */
        return 0;
 801fc42:	2300      	movs	r3, #0
 801fc44:	e073      	b.n	801fd2e <wc_ShaUpdate+0x120>
    #endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    /* check that internal buffLen is valid */
    if (sha->buffLen >= WC_SHA_BLOCK_SIZE)
 801fc46:	68fb      	ldr	r3, [r7, #12]
 801fc48:	681b      	ldr	r3, [r3, #0]
 801fc4a:	2b3f      	cmp	r3, #63	; 0x3f
 801fc4c:	d902      	bls.n	801fc54 <wc_ShaUpdate+0x46>
        return BUFFER_E;
 801fc4e:	f06f 0383 	mvn.w	r3, #131	; 0x83
 801fc52:	e06c      	b.n	801fd2e <wc_ShaUpdate+0x120>

    /* add length for final */
    AddLength(sha, len);
 801fc54:	6879      	ldr	r1, [r7, #4]
 801fc56:	68f8      	ldr	r0, [r7, #12]
 801fc58:	f7fe fbec 	bl	801e434 <AddLength>

    local = (byte*)sha->buffer;
 801fc5c:	68fb      	ldr	r3, [r7, #12]
 801fc5e:	330c      	adds	r3, #12
 801fc60:	61bb      	str	r3, [r7, #24]

    /* process any remainder from previous operation */
    if (sha->buffLen > 0) {
 801fc62:	68fb      	ldr	r3, [r7, #12]
 801fc64:	681b      	ldr	r3, [r3, #0]
 801fc66:	2b00      	cmp	r3, #0
 801fc68:	d052      	beq.n	801fd10 <wc_ShaUpdate+0x102>
        blocksLen = min(len, WC_SHA_BLOCK_SIZE - sha->buffLen);
 801fc6a:	68fb      	ldr	r3, [r7, #12]
 801fc6c:	681b      	ldr	r3, [r3, #0]
 801fc6e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801fc72:	4619      	mov	r1, r3
 801fc74:	6878      	ldr	r0, [r7, #4]
 801fc76:	f7fe fb9d 	bl	801e3b4 <min>
 801fc7a:	6178      	str	r0, [r7, #20]
        XMEMCPY(&local[sha->buffLen], data, blocksLen);
 801fc7c:	68fb      	ldr	r3, [r7, #12]
 801fc7e:	681b      	ldr	r3, [r3, #0]
 801fc80:	69ba      	ldr	r2, [r7, #24]
 801fc82:	4413      	add	r3, r2
 801fc84:	697a      	ldr	r2, [r7, #20]
 801fc86:	68b9      	ldr	r1, [r7, #8]
 801fc88:	4618      	mov	r0, r3
 801fc8a:	f00a fc1d 	bl	802a4c8 <memcpy>

        sha->buffLen += blocksLen;
 801fc8e:	68fb      	ldr	r3, [r7, #12]
 801fc90:	681a      	ldr	r2, [r3, #0]
 801fc92:	697b      	ldr	r3, [r7, #20]
 801fc94:	441a      	add	r2, r3
 801fc96:	68fb      	ldr	r3, [r7, #12]
 801fc98:	601a      	str	r2, [r3, #0]
        data         += blocksLen;
 801fc9a:	68ba      	ldr	r2, [r7, #8]
 801fc9c:	697b      	ldr	r3, [r7, #20]
 801fc9e:	4413      	add	r3, r2
 801fca0:	60bb      	str	r3, [r7, #8]
        len          -= blocksLen;
 801fca2:	687a      	ldr	r2, [r7, #4]
 801fca4:	697b      	ldr	r3, [r7, #20]
 801fca6:	1ad3      	subs	r3, r2, r3
 801fca8:	607b      	str	r3, [r7, #4]

        if (sha->buffLen == WC_SHA_BLOCK_SIZE) {
 801fcaa:	68fb      	ldr	r3, [r7, #12]
 801fcac:	681b      	ldr	r3, [r3, #0]
 801fcae:	2b40      	cmp	r3, #64	; 0x40
 801fcb0:	d12e      	bne.n	801fd10 <wc_ShaUpdate+0x102>
        #if defined(LITTLE_ENDIAN_ORDER) && !defined(FREESCALE_MMCAU_SHA)
            ByteReverseWords(sha->buffer, sha->buffer, WC_SHA_BLOCK_SIZE);
 801fcb2:	68fb      	ldr	r3, [r7, #12]
 801fcb4:	f103 000c 	add.w	r0, r3, #12
 801fcb8:	68fb      	ldr	r3, [r7, #12]
 801fcba:	330c      	adds	r3, #12
 801fcbc:	2240      	movs	r2, #64	; 0x40
 801fcbe:	4619      	mov	r1, r3
 801fcc0:	f7fe fb52 	bl	801e368 <ByteReverseWords>
                ret = XTRANSFORM(sha, (const byte*)local);
            } else {
                esp_sha_process(sha, (const byte*)local);
            }
        #else
            ret = XTRANSFORM(sha, (const byte*)local);
 801fcc4:	69b9      	ldr	r1, [r7, #24]
 801fcc6:	68f8      	ldr	r0, [r7, #12]
 801fcc8:	f7fe fbd2 	bl	801e470 <Transform>
 801fccc:	61f8      	str	r0, [r7, #28]
        #endif
            if (ret != 0)
 801fcce:	69fb      	ldr	r3, [r7, #28]
 801fcd0:	2b00      	cmp	r3, #0
 801fcd2:	d001      	beq.n	801fcd8 <wc_ShaUpdate+0xca>
                return ret;
 801fcd4:	69fb      	ldr	r3, [r7, #28]
 801fcd6:	e02a      	b.n	801fd2e <wc_ShaUpdate+0x120>

            sha->buffLen = 0;
 801fcd8:	68fb      	ldr	r3, [r7, #12]
 801fcda:	2200      	movs	r2, #0
 801fcdc:	601a      	str	r2, [r3, #0]
        XTRANSFORM_LEN(sha, data, blocksLen);
        data += blocksLen;
        len  -= blocksLen;
    }
#else
    while (len >= WC_SHA_BLOCK_SIZE) {
 801fcde:	e017      	b.n	801fd10 <wc_ShaUpdate+0x102>
        word32* local32 = sha->buffer;
 801fce0:	68fb      	ldr	r3, [r7, #12]
 801fce2:	330c      	adds	r3, #12
 801fce4:	613b      	str	r3, [r7, #16]
            local32 = (word32*)data;
        }
        else
    #endif
        {
            XMEMCPY(local32, data, WC_SHA_BLOCK_SIZE);
 801fce6:	2240      	movs	r2, #64	; 0x40
 801fce8:	68b9      	ldr	r1, [r7, #8]
 801fcea:	6938      	ldr	r0, [r7, #16]
 801fcec:	f00a fbec 	bl	802a4c8 <memcpy>
        }

        data += WC_SHA_BLOCK_SIZE;
 801fcf0:	68bb      	ldr	r3, [r7, #8]
 801fcf2:	3340      	adds	r3, #64	; 0x40
 801fcf4:	60bb      	str	r3, [r7, #8]
        len  -= WC_SHA_BLOCK_SIZE;
 801fcf6:	687b      	ldr	r3, [r7, #4]
 801fcf8:	3b40      	subs	r3, #64	; 0x40
 801fcfa:	607b      	str	r3, [r7, #4]

    #if defined(LITTLE_ENDIAN_ORDER) && !defined(FREESCALE_MMCAU_SHA)
        ByteReverseWords(local32, local32, WC_SHA_BLOCK_SIZE);
 801fcfc:	2240      	movs	r2, #64	; 0x40
 801fcfe:	6939      	ldr	r1, [r7, #16]
 801fd00:	6938      	ldr	r0, [r7, #16]
 801fd02:	f7fe fb31 	bl	801e368 <ByteReverseWords>
            ret = XTRANSFORM(sha, (const byte*)local32);
        } else {
            esp_sha_process(sha, (const byte*)local32);
        }
    #else
        ret = XTRANSFORM(sha, (const byte*)local32);
 801fd06:	6939      	ldr	r1, [r7, #16]
 801fd08:	68f8      	ldr	r0, [r7, #12]
 801fd0a:	f7fe fbb1 	bl	801e470 <Transform>
 801fd0e:	61f8      	str	r0, [r7, #28]
    while (len >= WC_SHA_BLOCK_SIZE) {
 801fd10:	687b      	ldr	r3, [r7, #4]
 801fd12:	2b3f      	cmp	r3, #63	; 0x3f
 801fd14:	d8e4      	bhi.n	801fce0 <wc_ShaUpdate+0xd2>
    #endif
    }
#endif /* XTRANSFORM_LEN */

    /* save remainder */
    if (len > 0) {
 801fd16:	687b      	ldr	r3, [r7, #4]
 801fd18:	2b00      	cmp	r3, #0
 801fd1a:	d007      	beq.n	801fd2c <wc_ShaUpdate+0x11e>
        XMEMCPY(local, data, len);
 801fd1c:	687a      	ldr	r2, [r7, #4]
 801fd1e:	68b9      	ldr	r1, [r7, #8]
 801fd20:	69b8      	ldr	r0, [r7, #24]
 801fd22:	f00a fbd1 	bl	802a4c8 <memcpy>
        sha->buffLen = len;
 801fd26:	68fb      	ldr	r3, [r7, #12]
 801fd28:	687a      	ldr	r2, [r7, #4]
 801fd2a:	601a      	str	r2, [r3, #0]
    }

    return ret;
 801fd2c:	69fb      	ldr	r3, [r7, #28]
}
 801fd2e:	4618      	mov	r0, r3
 801fd30:	3720      	adds	r7, #32
 801fd32:	46bd      	mov	sp, r7
 801fd34:	bd80      	pop	{r7, pc}

0801fd36 <wc_ShaFinal>:

    return 0;
}

int wc_ShaFinal(wc_Sha* sha, byte* hash)
{
 801fd36:	b580      	push	{r7, lr}
 801fd38:	b084      	sub	sp, #16
 801fd3a:	af00      	add	r7, sp, #0
 801fd3c:	6078      	str	r0, [r7, #4]
 801fd3e:	6039      	str	r1, [r7, #0]
    int ret;
    byte* local;

    if (sha == NULL || hash == NULL) {
 801fd40:	687b      	ldr	r3, [r7, #4]
 801fd42:	2b00      	cmp	r3, #0
 801fd44:	d002      	beq.n	801fd4c <wc_ShaFinal+0x16>
 801fd46:	683b      	ldr	r3, [r7, #0]
 801fd48:	2b00      	cmp	r3, #0
 801fd4a:	d102      	bne.n	801fd52 <wc_ShaFinal+0x1c>
        return BAD_FUNC_ARG;
 801fd4c:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801fd50:	e07c      	b.n	801fe4c <wc_ShaFinal+0x116>
    }

    local = (byte*)sha->buffer;
 801fd52:	687b      	ldr	r3, [r7, #4]
 801fd54:	330c      	adds	r3, #12
 801fd56:	60fb      	str	r3, [r7, #12]
        return IntelQaSymSha(&sha->asyncDev, hash, NULL, WC_SHA_DIGEST_SIZE);
    #endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    local[sha->buffLen++] = 0x80;  /* add 1 */
 801fd58:	687b      	ldr	r3, [r7, #4]
 801fd5a:	681b      	ldr	r3, [r3, #0]
 801fd5c:	1c59      	adds	r1, r3, #1
 801fd5e:	687a      	ldr	r2, [r7, #4]
 801fd60:	6011      	str	r1, [r2, #0]
 801fd62:	68fa      	ldr	r2, [r7, #12]
 801fd64:	4413      	add	r3, r2
 801fd66:	2280      	movs	r2, #128	; 0x80
 801fd68:	701a      	strb	r2, [r3, #0]

    /* pad with zeros */
    if (sha->buffLen > WC_SHA_PAD_SIZE) {
 801fd6a:	687b      	ldr	r3, [r7, #4]
 801fd6c:	681b      	ldr	r3, [r3, #0]
 801fd6e:	2b38      	cmp	r3, #56	; 0x38
 801fd70:	d924      	bls.n	801fdbc <wc_ShaFinal+0x86>
        XMEMSET(&local[sha->buffLen], 0, WC_SHA_BLOCK_SIZE - sha->buffLen);
 801fd72:	687b      	ldr	r3, [r7, #4]
 801fd74:	681b      	ldr	r3, [r3, #0]
 801fd76:	68fa      	ldr	r2, [r7, #12]
 801fd78:	18d0      	adds	r0, r2, r3
 801fd7a:	687b      	ldr	r3, [r7, #4]
 801fd7c:	681b      	ldr	r3, [r3, #0]
 801fd7e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801fd82:	461a      	mov	r2, r3
 801fd84:	2100      	movs	r1, #0
 801fd86:	f00a fbc7 	bl	802a518 <memset>
        sha->buffLen += WC_SHA_BLOCK_SIZE - sha->buffLen;
 801fd8a:	687b      	ldr	r3, [r7, #4]
 801fd8c:	2240      	movs	r2, #64	; 0x40
 801fd8e:	601a      	str	r2, [r3, #0]

    #if defined(LITTLE_ENDIAN_ORDER) && !defined(FREESCALE_MMCAU_SHA)
        ByteReverseWords(sha->buffer, sha->buffer, WC_SHA_BLOCK_SIZE);
 801fd90:	687b      	ldr	r3, [r7, #4]
 801fd92:	f103 000c 	add.w	r0, r3, #12
 801fd96:	687b      	ldr	r3, [r7, #4]
 801fd98:	330c      	adds	r3, #12
 801fd9a:	2240      	movs	r2, #64	; 0x40
 801fd9c:	4619      	mov	r1, r3
 801fd9e:	f7fe fae3 	bl	801e368 <ByteReverseWords>
            ret = XTRANSFORM(sha, (const byte*)local);
        } else {
            ret = esp_sha_process(sha, (const byte*)local);
        }
    #else
        ret = XTRANSFORM(sha, (const byte*)local);
 801fda2:	68f9      	ldr	r1, [r7, #12]
 801fda4:	6878      	ldr	r0, [r7, #4]
 801fda6:	f7fe fb63 	bl	801e470 <Transform>
 801fdaa:	60b8      	str	r0, [r7, #8]
    #endif
        if (ret != 0)
 801fdac:	68bb      	ldr	r3, [r7, #8]
 801fdae:	2b00      	cmp	r3, #0
 801fdb0:	d001      	beq.n	801fdb6 <wc_ShaFinal+0x80>
            return ret;
 801fdb2:	68bb      	ldr	r3, [r7, #8]
 801fdb4:	e04a      	b.n	801fe4c <wc_ShaFinal+0x116>

        sha->buffLen = 0;
 801fdb6:	687b      	ldr	r3, [r7, #4]
 801fdb8:	2200      	movs	r2, #0
 801fdba:	601a      	str	r2, [r3, #0]
    }
    XMEMSET(&local[sha->buffLen], 0, WC_SHA_PAD_SIZE - sha->buffLen);
 801fdbc:	687b      	ldr	r3, [r7, #4]
 801fdbe:	681b      	ldr	r3, [r3, #0]
 801fdc0:	68fa      	ldr	r2, [r7, #12]
 801fdc2:	18d0      	adds	r0, r2, r3
 801fdc4:	687b      	ldr	r3, [r7, #4]
 801fdc6:	681b      	ldr	r3, [r3, #0]
 801fdc8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801fdcc:	461a      	mov	r2, r3
 801fdce:	2100      	movs	r1, #0
 801fdd0:	f00a fba2 	bl	802a518 <memset>

#if defined(LITTLE_ENDIAN_ORDER) && !defined(FREESCALE_MMCAU_SHA)
    ByteReverseWords(sha->buffer, sha->buffer, WC_SHA_BLOCK_SIZE);
 801fdd4:	687b      	ldr	r3, [r7, #4]
 801fdd6:	f103 000c 	add.w	r0, r3, #12
 801fdda:	687b      	ldr	r3, [r7, #4]
 801fddc:	330c      	adds	r3, #12
 801fdde:	2240      	movs	r2, #64	; 0x40
 801fde0:	4619      	mov	r1, r3
 801fde2:	f7fe fac1 	bl	801e368 <ByteReverseWords>
#endif

    /* store lengths */
    /* put lengths in bits */
    sha->hiLen = (sha->loLen >> (8*sizeof(sha->loLen) - 3)) + (sha->hiLen << 3);
 801fde6:	687b      	ldr	r3, [r7, #4]
 801fde8:	685b      	ldr	r3, [r3, #4]
 801fdea:	0f5a      	lsrs	r2, r3, #29
 801fdec:	687b      	ldr	r3, [r7, #4]
 801fdee:	689b      	ldr	r3, [r3, #8]
 801fdf0:	00db      	lsls	r3, r3, #3
 801fdf2:	441a      	add	r2, r3
 801fdf4:	687b      	ldr	r3, [r7, #4]
 801fdf6:	609a      	str	r2, [r3, #8]
    sha->loLen = sha->loLen << 3;
 801fdf8:	687b      	ldr	r3, [r7, #4]
 801fdfa:	685b      	ldr	r3, [r3, #4]
 801fdfc:	00da      	lsls	r2, r3, #3
 801fdfe:	687b      	ldr	r3, [r7, #4]
 801fe00:	605a      	str	r2, [r3, #4]

    /* ! length ordering dependent on digest endian type ! */
    XMEMCPY(&local[WC_SHA_PAD_SIZE], &sha->hiLen, sizeof(word32));
 801fe02:	68fb      	ldr	r3, [r7, #12]
 801fe04:	3338      	adds	r3, #56	; 0x38
 801fe06:	687a      	ldr	r2, [r7, #4]
 801fe08:	3208      	adds	r2, #8
 801fe0a:	6812      	ldr	r2, [r2, #0]
 801fe0c:	601a      	str	r2, [r3, #0]
    XMEMCPY(&local[WC_SHA_PAD_SIZE + sizeof(word32)], &sha->loLen, sizeof(word32));
 801fe0e:	68fb      	ldr	r3, [r7, #12]
 801fe10:	333c      	adds	r3, #60	; 0x3c
 801fe12:	687a      	ldr	r2, [r7, #4]
 801fe14:	3204      	adds	r2, #4
 801fe16:	6812      	ldr	r2, [r2, #0]
 801fe18:	601a      	str	r2, [r3, #0]
        ret = XTRANSFORM(sha, (const byte*)local);
    } else {
        ret = esp_sha_digest_process(sha, 1);
    }
#else
    ret = XTRANSFORM(sha, (const byte*)local);
 801fe1a:	68f9      	ldr	r1, [r7, #12]
 801fe1c:	6878      	ldr	r0, [r7, #4]
 801fe1e:	f7fe fb27 	bl	801e470 <Transform>
 801fe22:	60b8      	str	r0, [r7, #8]
#endif

#ifdef LITTLE_ENDIAN_ORDER
    ByteReverseWords(sha->digest, sha->digest, WC_SHA_DIGEST_SIZE);
 801fe24:	687b      	ldr	r3, [r7, #4]
 801fe26:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 801fe2a:	687b      	ldr	r3, [r7, #4]
 801fe2c:	334c      	adds	r3, #76	; 0x4c
 801fe2e:	2214      	movs	r2, #20
 801fe30:	4619      	mov	r1, r3
 801fe32:	f7fe fa99 	bl	801e368 <ByteReverseWords>
#endif

    XMEMCPY(hash, (byte *)&sha->digest[0], WC_SHA_DIGEST_SIZE);
 801fe36:	687b      	ldr	r3, [r7, #4]
 801fe38:	334c      	adds	r3, #76	; 0x4c
 801fe3a:	2214      	movs	r2, #20
 801fe3c:	4619      	mov	r1, r3
 801fe3e:	6838      	ldr	r0, [r7, #0]
 801fe40:	f00a fb42 	bl	802a4c8 <memcpy>

    (void)InitSha(sha); /* reset state */
 801fe44:	6878      	ldr	r0, [r7, #4]
 801fe46:	f7fe fac5 	bl	801e3d4 <InitSha>

    return ret;
 801fe4a:	68bb      	ldr	r3, [r7, #8]
}
 801fe4c:	4618      	mov	r0, r3
 801fe4e:	3710      	adds	r7, #16
 801fe50:	46bd      	mov	sp, r7
 801fe52:	bd80      	pop	{r7, pc}

0801fe54 <wc_ShaFree>:
}

#if !defined(WOLFSSL_HAVE_PSA) || defined(WOLFSSL_PSA_NO_HASH)

void wc_ShaFree(wc_Sha* sha)
{
 801fe54:	b480      	push	{r7}
 801fe56:	b083      	sub	sp, #12
 801fe58:	af00      	add	r7, sp, #0
 801fe5a:	6078      	str	r0, [r7, #4]
    if (sha == NULL)
 801fe5c:	687b      	ldr	r3, [r7, #4]
 801fe5e:	2b00      	cmp	r3, #0
    }
#endif
#ifdef WOLFSSL_IMXRT_DCP
    DCPShaFree(sha);
#endif
}
 801fe60:	370c      	adds	r7, #12
 801fe62:	46bd      	mov	sp, r7
 801fe64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe68:	4770      	bx	lr

0801fe6a <rotlFixed>:
    {
 801fe6a:	b480      	push	{r7}
 801fe6c:	b083      	sub	sp, #12
 801fe6e:	af00      	add	r7, sp, #0
 801fe70:	6078      	str	r0, [r7, #4]
 801fe72:	6039      	str	r1, [r7, #0]
        return (x << y) | (x >> (sizeof(y) * 8 - y));
 801fe74:	687a      	ldr	r2, [r7, #4]
 801fe76:	683b      	ldr	r3, [r7, #0]
 801fe78:	f1c3 0320 	rsb	r3, r3, #32
 801fe7c:	fa62 f303 	ror.w	r3, r2, r3
    }
 801fe80:	4618      	mov	r0, r3
 801fe82:	370c      	adds	r7, #12
 801fe84:	46bd      	mov	sp, r7
 801fe86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe8a:	4770      	bx	lr

0801fe8c <rotrFixed>:
    {
 801fe8c:	b480      	push	{r7}
 801fe8e:	b083      	sub	sp, #12
 801fe90:	af00      	add	r7, sp, #0
 801fe92:	6078      	str	r0, [r7, #4]
 801fe94:	6039      	str	r1, [r7, #0]
        return (x >> y) | (x << (sizeof(y) * 8 - y));
 801fe96:	687a      	ldr	r2, [r7, #4]
 801fe98:	683b      	ldr	r3, [r7, #0]
 801fe9a:	fa62 f303 	ror.w	r3, r2, r3
    }
 801fe9e:	4618      	mov	r0, r3
 801fea0:	370c      	adds	r7, #12
 801fea2:	46bd      	mov	sp, r7
 801fea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fea8:	4770      	bx	lr

0801feaa <ByteReverseWord32>:
{
 801feaa:	b580      	push	{r7, lr}
 801feac:	b082      	sub	sp, #8
 801feae:	af00      	add	r7, sp, #0
 801feb0:	6078      	str	r0, [r7, #4]
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
 801feb2:	687b      	ldr	r3, [r7, #4]
 801feb4:	0a1b      	lsrs	r3, r3, #8
 801feb6:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 801feba:	687b      	ldr	r3, [r7, #4]
 801febc:	021b      	lsls	r3, r3, #8
 801febe:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 801fec2:	4313      	orrs	r3, r2
 801fec4:	607b      	str	r3, [r7, #4]
    return rotlFixed(value, 16U);
 801fec6:	2110      	movs	r1, #16
 801fec8:	6878      	ldr	r0, [r7, #4]
 801feca:	f7ff ffce 	bl	801fe6a <rotlFixed>
 801fece:	4603      	mov	r3, r0
}
 801fed0:	4618      	mov	r0, r3
 801fed2:	3708      	adds	r7, #8
 801fed4:	46bd      	mov	sp, r7
 801fed6:	bd80      	pop	{r7, pc}

0801fed8 <ByteReverseWords>:
{
 801fed8:	b590      	push	{r4, r7, lr}
 801feda:	b087      	sub	sp, #28
 801fedc:	af00      	add	r7, sp, #0
 801fede:	60f8      	str	r0, [r7, #12]
 801fee0:	60b9      	str	r1, [r7, #8]
 801fee2:	607a      	str	r2, [r7, #4]
    word32 count = byteCount/(word32)sizeof(word32), i;
 801fee4:	687b      	ldr	r3, [r7, #4]
 801fee6:	089b      	lsrs	r3, r3, #2
 801fee8:	613b      	str	r3, [r7, #16]
    for (i = 0; i < count; i++)
 801feea:	2300      	movs	r3, #0
 801feec:	617b      	str	r3, [r7, #20]
 801feee:	e010      	b.n	801ff12 <ByteReverseWords+0x3a>
        out[i] = ByteReverseWord32(in[i]);
 801fef0:	697b      	ldr	r3, [r7, #20]
 801fef2:	009b      	lsls	r3, r3, #2
 801fef4:	68ba      	ldr	r2, [r7, #8]
 801fef6:	4413      	add	r3, r2
 801fef8:	6819      	ldr	r1, [r3, #0]
 801fefa:	697b      	ldr	r3, [r7, #20]
 801fefc:	009b      	lsls	r3, r3, #2
 801fefe:	68fa      	ldr	r2, [r7, #12]
 801ff00:	18d4      	adds	r4, r2, r3
 801ff02:	4608      	mov	r0, r1
 801ff04:	f7ff ffd1 	bl	801feaa <ByteReverseWord32>
 801ff08:	4603      	mov	r3, r0
 801ff0a:	6023      	str	r3, [r4, #0]
    for (i = 0; i < count; i++)
 801ff0c:	697b      	ldr	r3, [r7, #20]
 801ff0e:	3301      	adds	r3, #1
 801ff10:	617b      	str	r3, [r7, #20]
 801ff12:	697a      	ldr	r2, [r7, #20]
 801ff14:	693b      	ldr	r3, [r7, #16]
 801ff16:	429a      	cmp	r2, r3
 801ff18:	d3ea      	bcc.n	801fef0 <ByteReverseWords+0x18>
}
 801ff1a:	bf00      	nop
 801ff1c:	bf00      	nop
 801ff1e:	371c      	adds	r7, #28
 801ff20:	46bd      	mov	sp, r7
 801ff22:	bd90      	pop	{r4, r7, pc}

0801ff24 <min>:
    {
 801ff24:	b480      	push	{r7}
 801ff26:	b083      	sub	sp, #12
 801ff28:	af00      	add	r7, sp, #0
 801ff2a:	6078      	str	r0, [r7, #4]
 801ff2c:	6039      	str	r1, [r7, #0]
        return a > b ? b : a;
 801ff2e:	687a      	ldr	r2, [r7, #4]
 801ff30:	683b      	ldr	r3, [r7, #0]
 801ff32:	4293      	cmp	r3, r2
 801ff34:	bf28      	it	cs
 801ff36:	4613      	movcs	r3, r2
    }
 801ff38:	4618      	mov	r0, r3
 801ff3a:	370c      	adds	r7, #12
 801ff3c:	46bd      	mov	sp, r7
 801ff3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff42:	4770      	bx	lr

0801ff44 <InitSha256>:
    (!defined(WOLFSSL_HAVE_PSA) || defined(WOLFSSL_PSA_NO_HASH))



static int InitSha256(wc_Sha256* sha256)
{
 801ff44:	b580      	push	{r7, lr}
 801ff46:	b084      	sub	sp, #16
 801ff48:	af00      	add	r7, sp, #0
 801ff4a:	6078      	str	r0, [r7, #4]
    int ret = 0;
 801ff4c:	2300      	movs	r3, #0
 801ff4e:	60fb      	str	r3, [r7, #12]

    if (sha256 == NULL)
 801ff50:	687b      	ldr	r3, [r7, #4]
 801ff52:	2b00      	cmp	r3, #0
 801ff54:	d102      	bne.n	801ff5c <InitSha256+0x18>
        return BAD_FUNC_ARG;
 801ff56:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801ff5a:	e027      	b.n	801ffac <InitSha256+0x68>

    XMEMSET(sha256->digest, 0, sizeof(sha256->digest));
 801ff5c:	687b      	ldr	r3, [r7, #4]
 801ff5e:	2220      	movs	r2, #32
 801ff60:	2100      	movs	r1, #0
 801ff62:	4618      	mov	r0, r3
 801ff64:	f00a fad8 	bl	802a518 <memset>
    sha256->digest[0] = 0x6A09E667L;
 801ff68:	687b      	ldr	r3, [r7, #4]
 801ff6a:	4a12      	ldr	r2, [pc, #72]	; (801ffb4 <InitSha256+0x70>)
 801ff6c:	601a      	str	r2, [r3, #0]
    sha256->digest[1] = 0xBB67AE85L;
 801ff6e:	687b      	ldr	r3, [r7, #4]
 801ff70:	4a11      	ldr	r2, [pc, #68]	; (801ffb8 <InitSha256+0x74>)
 801ff72:	605a      	str	r2, [r3, #4]
    sha256->digest[2] = 0x3C6EF372L;
 801ff74:	687b      	ldr	r3, [r7, #4]
 801ff76:	4a11      	ldr	r2, [pc, #68]	; (801ffbc <InitSha256+0x78>)
 801ff78:	609a      	str	r2, [r3, #8]
    sha256->digest[3] = 0xA54FF53AL;
 801ff7a:	687b      	ldr	r3, [r7, #4]
 801ff7c:	4a10      	ldr	r2, [pc, #64]	; (801ffc0 <InitSha256+0x7c>)
 801ff7e:	60da      	str	r2, [r3, #12]
    sha256->digest[4] = 0x510E527FL;
 801ff80:	687b      	ldr	r3, [r7, #4]
 801ff82:	4a10      	ldr	r2, [pc, #64]	; (801ffc4 <InitSha256+0x80>)
 801ff84:	611a      	str	r2, [r3, #16]
    sha256->digest[5] = 0x9B05688CL;
 801ff86:	687b      	ldr	r3, [r7, #4]
 801ff88:	4a0f      	ldr	r2, [pc, #60]	; (801ffc8 <InitSha256+0x84>)
 801ff8a:	615a      	str	r2, [r3, #20]
    sha256->digest[6] = 0x1F83D9ABL;
 801ff8c:	687b      	ldr	r3, [r7, #4]
 801ff8e:	4a0f      	ldr	r2, [pc, #60]	; (801ffcc <InitSha256+0x88>)
 801ff90:	619a      	str	r2, [r3, #24]
    sha256->digest[7] = 0x5BE0CD19L;
 801ff92:	687b      	ldr	r3, [r7, #4]
 801ff94:	4a0e      	ldr	r2, [pc, #56]	; (801ffd0 <InitSha256+0x8c>)
 801ff96:	61da      	str	r2, [r3, #28]

    sha256->buffLen = 0;
 801ff98:	687b      	ldr	r3, [r7, #4]
 801ff9a:	2200      	movs	r2, #0
 801ff9c:	661a      	str	r2, [r3, #96]	; 0x60
    sha256->loLen   = 0;
 801ff9e:	687b      	ldr	r3, [r7, #4]
 801ffa0:	2200      	movs	r2, #0
 801ffa2:	665a      	str	r2, [r3, #100]	; 0x64
    sha256->hiLen   = 0;
 801ffa4:	687b      	ldr	r3, [r7, #4]
 801ffa6:	2200      	movs	r2, #0
 801ffa8:	669a      	str	r2, [r3, #104]	; 0x68
#ifdef WOLFSSL_HASH_FLAGS
    sha256->flags = 0;
#endif

    return ret;
 801ffaa:	68fb      	ldr	r3, [r7, #12]
}
 801ffac:	4618      	mov	r0, r3
 801ffae:	3710      	adds	r7, #16
 801ffb0:	46bd      	mov	sp, r7
 801ffb2:	bd80      	pop	{r7, pc}
 801ffb4:	6a09e667 	.word	0x6a09e667
 801ffb8:	bb67ae85 	.word	0xbb67ae85
 801ffbc:	3c6ef372 	.word	0x3c6ef372
 801ffc0:	a54ff53a 	.word	0xa54ff53a
 801ffc4:	510e527f 	.word	0x510e527f
 801ffc8:	9b05688c 	.word	0x9b05688c
 801ffcc:	1f83d9ab 	.word	0x1f83d9ab
 801ffd0:	5be0cd19 	.word	0x5be0cd19

0801ffd4 <wc_InitSha256_ex>:

#else
    #define NEED_SOFT_SHA256

    int wc_InitSha256_ex(wc_Sha256* sha256, void* heap, int devId)
    {
 801ffd4:	b580      	push	{r7, lr}
 801ffd6:	b086      	sub	sp, #24
 801ffd8:	af00      	add	r7, sp, #0
 801ffda:	60f8      	str	r0, [r7, #12]
 801ffdc:	60b9      	str	r1, [r7, #8]
 801ffde:	607a      	str	r2, [r7, #4]
        int ret = 0;
 801ffe0:	2300      	movs	r3, #0
 801ffe2:	617b      	str	r3, [r7, #20]
        if (sha256 == NULL)
 801ffe4:	68fb      	ldr	r3, [r7, #12]
 801ffe6:	2b00      	cmp	r3, #0
 801ffe8:	d102      	bne.n	801fff0 <wc_InitSha256_ex+0x1c>
            return BAD_FUNC_ARG;
 801ffea:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 801ffee:	e00c      	b.n	802000a <wc_InitSha256_ex+0x36>

        sha256->heap = heap;
 801fff0:	68fb      	ldr	r3, [r7, #12]
 801fff2:	68ba      	ldr	r2, [r7, #8]
 801fff4:	66da      	str	r2, [r3, #108]	; 0x6c
    #endif
    #ifdef WOLFSSL_SMALL_STACK_CACHE
        sha256->W = NULL;
    #endif

        ret = InitSha256(sha256);
 801fff6:	68f8      	ldr	r0, [r7, #12]
 801fff8:	f7ff ffa4 	bl	801ff44 <InitSha256>
 801fffc:	6178      	str	r0, [r7, #20]
        if (ret != 0)
 801fffe:	697b      	ldr	r3, [r7, #20]
 8020000:	2b00      	cmp	r3, #0
 8020002:	d001      	beq.n	8020008 <wc_InitSha256_ex+0x34>
            return ret;
 8020004:	697b      	ldr	r3, [r7, #20]
 8020006:	e000      	b.n	802000a <wc_InitSha256_ex+0x36>
                            WOLFSSL_ASYNC_MARKER_SHA256, sha256->heap, devId);
    #else
        (void)devId;
    #endif /* WOLFSSL_ASYNC_CRYPT */

        return ret;
 8020008:	697b      	ldr	r3, [r7, #20]
    }
 802000a:	4618      	mov	r0, r3
 802000c:	3718      	adds	r7, #24
 802000e:	46bd      	mov	sp, r7
 8020010:	bd80      	pop	{r7, pc}
	...

08020014 <Transform_Sha256>:
         t1 = Sigma0(a(j)) + Maj(a(j), b(j), c(j)); \
         d(j) += t0; \
         h(j)  = t0 + t1

    static int Transform_Sha256(wc_Sha256* sha256, const byte* data)
    {
 8020014:	b5b0      	push	{r4, r5, r7, lr}
 8020016:	b090      	sub	sp, #64	; 0x40
 8020018:	af00      	add	r7, sp, #0
 802001a:	6078      	str	r0, [r7, #4]
 802001c:	6039      	str	r1, [r7, #0]
                return MEMORY_E;
            sha256->W = W;
        }
    #elif defined(WOLFSSL_SMALL_STACK)
        word32* W;
        W = (word32*)XMALLOC(sizeof(word32) * WC_SHA256_BLOCK_SIZE, NULL,
 802001e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8020022:	f7fe f947 	bl	801e2b4 <wolfSSL_Malloc>
 8020026:	63b8      	str	r0, [r7, #56]	; 0x38
                                                       DYNAMIC_TYPE_TMP_BUFFER);
        if (W == NULL)
 8020028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802002a:	2b00      	cmp	r3, #0
 802002c:	d102      	bne.n	8020034 <Transform_Sha256+0x20>
            return MEMORY_E;
 802002e:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8020032:	e35f      	b.n	80206f4 <Transform_Sha256+0x6e0>
    #else
        word32 W[WC_SHA256_BLOCK_SIZE];
    #endif

        /* Copy context->state[] to working vars */
        for (i = 0; i < 8; i++)
 8020034:	2300      	movs	r3, #0
 8020036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8020038:	e00c      	b.n	8020054 <Transform_Sha256+0x40>
            S[i] = sha256->digest[i];
 802003a:	687b      	ldr	r3, [r7, #4]
 802003c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802003e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8020042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020044:	009b      	lsls	r3, r3, #2
 8020046:	3340      	adds	r3, #64	; 0x40
 8020048:	443b      	add	r3, r7
 802004a:	f843 2c34 	str.w	r2, [r3, #-52]
        for (i = 0; i < 8; i++)
 802004e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020050:	3301      	adds	r3, #1
 8020052:	63fb      	str	r3, [r7, #60]	; 0x3c
 8020054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020056:	2b07      	cmp	r3, #7
 8020058:	ddef      	ble.n	802003a <Transform_Sha256+0x26>

        for (i = 0; i < 16; i++)
 802005a:	2300      	movs	r3, #0
 802005c:	63fb      	str	r3, [r7, #60]	; 0x3c
 802005e:	e00c      	b.n	802007a <Transform_Sha256+0x66>
            W[i] = *((const word32*)&data[i*sizeof(word32)]);
 8020060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020062:	009b      	lsls	r3, r3, #2
 8020064:	683a      	ldr	r2, [r7, #0]
 8020066:	441a      	add	r2, r3
 8020068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802006a:	009b      	lsls	r3, r3, #2
 802006c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 802006e:	440b      	add	r3, r1
 8020070:	6812      	ldr	r2, [r2, #0]
 8020072:	601a      	str	r2, [r3, #0]
        for (i = 0; i < 16; i++)
 8020074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020076:	3301      	adds	r3, #1
 8020078:	63fb      	str	r3, [r7, #60]	; 0x3c
 802007a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802007c:	2b0f      	cmp	r3, #15
 802007e:	ddef      	ble.n	8020060 <Transform_Sha256+0x4c>

        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
 8020080:	2310      	movs	r3, #16
 8020082:	63fb      	str	r3, [r7, #60]	; 0x3c
 8020084:	e05e      	b.n	8020144 <Transform_Sha256+0x130>
            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
 8020086:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8020088:	4b31      	ldr	r3, [pc, #196]	; (8020150 <Transform_Sha256+0x13c>)
 802008a:	4413      	add	r3, r2
 802008c:	009b      	lsls	r3, r3, #2
 802008e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8020090:	4413      	add	r3, r2
 8020092:	681b      	ldr	r3, [r3, #0]
 8020094:	2111      	movs	r1, #17
 8020096:	4618      	mov	r0, r3
 8020098:	f7ff fef8 	bl	801fe8c <rotrFixed>
 802009c:	4604      	mov	r4, r0
 802009e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80200a0:	4b2b      	ldr	r3, [pc, #172]	; (8020150 <Transform_Sha256+0x13c>)
 80200a2:	4413      	add	r3, r2
 80200a4:	009b      	lsls	r3, r3, #2
 80200a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80200a8:	4413      	add	r3, r2
 80200aa:	681b      	ldr	r3, [r3, #0]
 80200ac:	2113      	movs	r1, #19
 80200ae:	4618      	mov	r0, r3
 80200b0:	f7ff feec 	bl	801fe8c <rotrFixed>
 80200b4:	4603      	mov	r3, r0
 80200b6:	ea84 0203 	eor.w	r2, r4, r3
 80200ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80200bc:	4b24      	ldr	r3, [pc, #144]	; (8020150 <Transform_Sha256+0x13c>)
 80200be:	440b      	add	r3, r1
 80200c0:	009b      	lsls	r3, r3, #2
 80200c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80200c4:	440b      	add	r3, r1
 80200c6:	681b      	ldr	r3, [r3, #0]
 80200c8:	0a9b      	lsrs	r3, r3, #10
 80200ca:	405a      	eors	r2, r3
 80200cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80200ce:	4b21      	ldr	r3, [pc, #132]	; (8020154 <Transform_Sha256+0x140>)
 80200d0:	440b      	add	r3, r1
 80200d2:	009b      	lsls	r3, r3, #2
 80200d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80200d6:	440b      	add	r3, r1
 80200d8:	681b      	ldr	r3, [r3, #0]
 80200da:	18d4      	adds	r4, r2, r3
 80200dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80200de:	4b1e      	ldr	r3, [pc, #120]	; (8020158 <Transform_Sha256+0x144>)
 80200e0:	4413      	add	r3, r2
 80200e2:	009b      	lsls	r3, r3, #2
 80200e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80200e6:	4413      	add	r3, r2
 80200e8:	681b      	ldr	r3, [r3, #0]
 80200ea:	2107      	movs	r1, #7
 80200ec:	4618      	mov	r0, r3
 80200ee:	f7ff fecd 	bl	801fe8c <rotrFixed>
 80200f2:	4605      	mov	r5, r0
 80200f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80200f6:	4b18      	ldr	r3, [pc, #96]	; (8020158 <Transform_Sha256+0x144>)
 80200f8:	4413      	add	r3, r2
 80200fa:	009b      	lsls	r3, r3, #2
 80200fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80200fe:	4413      	add	r3, r2
 8020100:	681b      	ldr	r3, [r3, #0]
 8020102:	2112      	movs	r1, #18
 8020104:	4618      	mov	r0, r3
 8020106:	f7ff fec1 	bl	801fe8c <rotrFixed>
 802010a:	4603      	mov	r3, r0
 802010c:	ea85 0203 	eor.w	r2, r5, r3
 8020110:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8020112:	4b11      	ldr	r3, [pc, #68]	; (8020158 <Transform_Sha256+0x144>)
 8020114:	440b      	add	r3, r1
 8020116:	009b      	lsls	r3, r3, #2
 8020118:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 802011a:	440b      	add	r3, r1
 802011c:	681b      	ldr	r3, [r3, #0]
 802011e:	08db      	lsrs	r3, r3, #3
 8020120:	4053      	eors	r3, r2
 8020122:	18e1      	adds	r1, r4, r3
 8020124:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8020126:	4b0d      	ldr	r3, [pc, #52]	; (802015c <Transform_Sha256+0x148>)
 8020128:	4413      	add	r3, r2
 802012a:	009b      	lsls	r3, r3, #2
 802012c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802012e:	4413      	add	r3, r2
 8020130:	681a      	ldr	r2, [r3, #0]
 8020132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020134:	009b      	lsls	r3, r3, #2
 8020136:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8020138:	4403      	add	r3, r0
 802013a:	440a      	add	r2, r1
 802013c:	601a      	str	r2, [r3, #0]
        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
 802013e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020140:	3301      	adds	r3, #1
 8020142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8020144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020146:	2b3f      	cmp	r3, #63	; 0x3f
 8020148:	dd9d      	ble.n	8020086 <Transform_Sha256+0x72>
                RND(j);
            }
        }
    #else
        /* partially loop unrolled */
        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
 802014a:	2300      	movs	r3, #0
 802014c:	63fb      	str	r3, [r7, #60]	; 0x3c
 802014e:	e2ac      	b.n	80206aa <Transform_Sha256+0x696>
 8020150:	3ffffffe 	.word	0x3ffffffe
 8020154:	3ffffff9 	.word	0x3ffffff9
 8020158:	3ffffff1 	.word	0x3ffffff1
 802015c:	3ffffff0 	.word	0x3ffffff0
            RND(0); RND(1); RND(2); RND(3);
 8020160:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8020162:	69fb      	ldr	r3, [r7, #28]
 8020164:	2106      	movs	r1, #6
 8020166:	4618      	mov	r0, r3
 8020168:	f7ff fe90 	bl	801fe8c <rotrFixed>
 802016c:	4605      	mov	r5, r0
 802016e:	69fb      	ldr	r3, [r7, #28]
 8020170:	210b      	movs	r1, #11
 8020172:	4618      	mov	r0, r3
 8020174:	f7ff fe8a 	bl	801fe8c <rotrFixed>
 8020178:	4603      	mov	r3, r0
 802017a:	405d      	eors	r5, r3
 802017c:	69fb      	ldr	r3, [r7, #28]
 802017e:	2119      	movs	r1, #25
 8020180:	4618      	mov	r0, r3
 8020182:	f7ff fe83 	bl	801fe8c <rotrFixed>
 8020186:	4603      	mov	r3, r0
 8020188:	406b      	eors	r3, r5
 802018a:	18e2      	adds	r2, r4, r3
 802018c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802018e:	69f8      	ldr	r0, [r7, #28]
 8020190:	6a3c      	ldr	r4, [r7, #32]
 8020192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020194:	4063      	eors	r3, r4
 8020196:	4003      	ands	r3, r0
 8020198:	404b      	eors	r3, r1
 802019a:	441a      	add	r2, r3
 802019c:	49bd      	ldr	r1, [pc, #756]	; (8020494 <Transform_Sha256+0x480>)
 802019e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80201a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80201a4:	441a      	add	r2, r3
 80201a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80201a8:	009b      	lsls	r3, r3, #2
 80201aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80201ac:	440b      	add	r3, r1
 80201ae:	681b      	ldr	r3, [r3, #0]
 80201b0:	4413      	add	r3, r2
 80201b2:	633b      	str	r3, [r7, #48]	; 0x30
 80201b4:	68fb      	ldr	r3, [r7, #12]
 80201b6:	2102      	movs	r1, #2
 80201b8:	4618      	mov	r0, r3
 80201ba:	f7ff fe67 	bl	801fe8c <rotrFixed>
 80201be:	4604      	mov	r4, r0
 80201c0:	68fb      	ldr	r3, [r7, #12]
 80201c2:	210d      	movs	r1, #13
 80201c4:	4618      	mov	r0, r3
 80201c6:	f7ff fe61 	bl	801fe8c <rotrFixed>
 80201ca:	4603      	mov	r3, r0
 80201cc:	405c      	eors	r4, r3
 80201ce:	68fb      	ldr	r3, [r7, #12]
 80201d0:	2116      	movs	r1, #22
 80201d2:	4618      	mov	r0, r3
 80201d4:	f7ff fe5a 	bl	801fe8c <rotrFixed>
 80201d8:	4603      	mov	r3, r0
 80201da:	ea84 0203 	eor.w	r2, r4, r3
 80201de:	68f9      	ldr	r1, [r7, #12]
 80201e0:	693b      	ldr	r3, [r7, #16]
 80201e2:	4319      	orrs	r1, r3
 80201e4:	697b      	ldr	r3, [r7, #20]
 80201e6:	4019      	ands	r1, r3
 80201e8:	68f8      	ldr	r0, [r7, #12]
 80201ea:	693b      	ldr	r3, [r7, #16]
 80201ec:	4003      	ands	r3, r0
 80201ee:	430b      	orrs	r3, r1
 80201f0:	4413      	add	r3, r2
 80201f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80201f4:	69ba      	ldr	r2, [r7, #24]
 80201f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80201f8:	4413      	add	r3, r2
 80201fa:	61bb      	str	r3, [r7, #24]
 80201fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80201fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020200:	4413      	add	r3, r2
 8020202:	62bb      	str	r3, [r7, #40]	; 0x28
 8020204:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8020206:	69bb      	ldr	r3, [r7, #24]
 8020208:	2106      	movs	r1, #6
 802020a:	4618      	mov	r0, r3
 802020c:	f7ff fe3e 	bl	801fe8c <rotrFixed>
 8020210:	4605      	mov	r5, r0
 8020212:	69bb      	ldr	r3, [r7, #24]
 8020214:	210b      	movs	r1, #11
 8020216:	4618      	mov	r0, r3
 8020218:	f7ff fe38 	bl	801fe8c <rotrFixed>
 802021c:	4603      	mov	r3, r0
 802021e:	405d      	eors	r5, r3
 8020220:	69bb      	ldr	r3, [r7, #24]
 8020222:	2119      	movs	r1, #25
 8020224:	4618      	mov	r0, r3
 8020226:	f7ff fe31 	bl	801fe8c <rotrFixed>
 802022a:	4603      	mov	r3, r0
 802022c:	406b      	eors	r3, r5
 802022e:	18e2      	adds	r2, r4, r3
 8020230:	6a39      	ldr	r1, [r7, #32]
 8020232:	69b8      	ldr	r0, [r7, #24]
 8020234:	69fc      	ldr	r4, [r7, #28]
 8020236:	6a3b      	ldr	r3, [r7, #32]
 8020238:	4063      	eors	r3, r4
 802023a:	4003      	ands	r3, r0
 802023c:	404b      	eors	r3, r1
 802023e:	441a      	add	r2, r3
 8020240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020242:	3301      	adds	r3, #1
 8020244:	4993      	ldr	r1, [pc, #588]	; (8020494 <Transform_Sha256+0x480>)
 8020246:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802024a:	441a      	add	r2, r3
 802024c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802024e:	3301      	adds	r3, #1
 8020250:	009b      	lsls	r3, r3, #2
 8020252:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8020254:	440b      	add	r3, r1
 8020256:	681b      	ldr	r3, [r3, #0]
 8020258:	4413      	add	r3, r2
 802025a:	633b      	str	r3, [r7, #48]	; 0x30
 802025c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802025e:	2102      	movs	r1, #2
 8020260:	4618      	mov	r0, r3
 8020262:	f7ff fe13 	bl	801fe8c <rotrFixed>
 8020266:	4604      	mov	r4, r0
 8020268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802026a:	210d      	movs	r1, #13
 802026c:	4618      	mov	r0, r3
 802026e:	f7ff fe0d 	bl	801fe8c <rotrFixed>
 8020272:	4603      	mov	r3, r0
 8020274:	405c      	eors	r4, r3
 8020276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020278:	2116      	movs	r1, #22
 802027a:	4618      	mov	r0, r3
 802027c:	f7ff fe06 	bl	801fe8c <rotrFixed>
 8020280:	4603      	mov	r3, r0
 8020282:	ea84 0203 	eor.w	r2, r4, r3
 8020286:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8020288:	68fb      	ldr	r3, [r7, #12]
 802028a:	4319      	orrs	r1, r3
 802028c:	693b      	ldr	r3, [r7, #16]
 802028e:	4019      	ands	r1, r3
 8020290:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020292:	68fb      	ldr	r3, [r7, #12]
 8020294:	4003      	ands	r3, r0
 8020296:	430b      	orrs	r3, r1
 8020298:	4413      	add	r3, r2
 802029a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802029c:	697a      	ldr	r2, [r7, #20]
 802029e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80202a0:	4413      	add	r3, r2
 80202a2:	617b      	str	r3, [r7, #20]
 80202a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80202a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80202a8:	4413      	add	r3, r2
 80202aa:	627b      	str	r3, [r7, #36]	; 0x24
 80202ac:	6a3c      	ldr	r4, [r7, #32]
 80202ae:	697b      	ldr	r3, [r7, #20]
 80202b0:	2106      	movs	r1, #6
 80202b2:	4618      	mov	r0, r3
 80202b4:	f7ff fdea 	bl	801fe8c <rotrFixed>
 80202b8:	4605      	mov	r5, r0
 80202ba:	697b      	ldr	r3, [r7, #20]
 80202bc:	210b      	movs	r1, #11
 80202be:	4618      	mov	r0, r3
 80202c0:	f7ff fde4 	bl	801fe8c <rotrFixed>
 80202c4:	4603      	mov	r3, r0
 80202c6:	405d      	eors	r5, r3
 80202c8:	697b      	ldr	r3, [r7, #20]
 80202ca:	2119      	movs	r1, #25
 80202cc:	4618      	mov	r0, r3
 80202ce:	f7ff fddd 	bl	801fe8c <rotrFixed>
 80202d2:	4603      	mov	r3, r0
 80202d4:	406b      	eors	r3, r5
 80202d6:	18e2      	adds	r2, r4, r3
 80202d8:	69f9      	ldr	r1, [r7, #28]
 80202da:	6978      	ldr	r0, [r7, #20]
 80202dc:	69bc      	ldr	r4, [r7, #24]
 80202de:	69fb      	ldr	r3, [r7, #28]
 80202e0:	4063      	eors	r3, r4
 80202e2:	4003      	ands	r3, r0
 80202e4:	404b      	eors	r3, r1
 80202e6:	441a      	add	r2, r3
 80202e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80202ea:	3302      	adds	r3, #2
 80202ec:	4969      	ldr	r1, [pc, #420]	; (8020494 <Transform_Sha256+0x480>)
 80202ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80202f2:	441a      	add	r2, r3
 80202f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80202f6:	3302      	adds	r3, #2
 80202f8:	009b      	lsls	r3, r3, #2
 80202fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80202fc:	440b      	add	r3, r1
 80202fe:	681b      	ldr	r3, [r3, #0]
 8020300:	4413      	add	r3, r2
 8020302:	633b      	str	r3, [r7, #48]	; 0x30
 8020304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020306:	2102      	movs	r1, #2
 8020308:	4618      	mov	r0, r3
 802030a:	f7ff fdbf 	bl	801fe8c <rotrFixed>
 802030e:	4604      	mov	r4, r0
 8020310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020312:	210d      	movs	r1, #13
 8020314:	4618      	mov	r0, r3
 8020316:	f7ff fdb9 	bl	801fe8c <rotrFixed>
 802031a:	4603      	mov	r3, r0
 802031c:	405c      	eors	r4, r3
 802031e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020320:	2116      	movs	r1, #22
 8020322:	4618      	mov	r0, r3
 8020324:	f7ff fdb2 	bl	801fe8c <rotrFixed>
 8020328:	4603      	mov	r3, r0
 802032a:	ea84 0203 	eor.w	r2, r4, r3
 802032e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8020330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020332:	4319      	orrs	r1, r3
 8020334:	68fb      	ldr	r3, [r7, #12]
 8020336:	4019      	ands	r1, r3
 8020338:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802033a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802033c:	4003      	ands	r3, r0
 802033e:	430b      	orrs	r3, r1
 8020340:	4413      	add	r3, r2
 8020342:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020344:	693a      	ldr	r2, [r7, #16]
 8020346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020348:	4413      	add	r3, r2
 802034a:	613b      	str	r3, [r7, #16]
 802034c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802034e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020350:	4413      	add	r3, r2
 8020352:	623b      	str	r3, [r7, #32]
 8020354:	69fc      	ldr	r4, [r7, #28]
 8020356:	693b      	ldr	r3, [r7, #16]
 8020358:	2106      	movs	r1, #6
 802035a:	4618      	mov	r0, r3
 802035c:	f7ff fd96 	bl	801fe8c <rotrFixed>
 8020360:	4605      	mov	r5, r0
 8020362:	693b      	ldr	r3, [r7, #16]
 8020364:	210b      	movs	r1, #11
 8020366:	4618      	mov	r0, r3
 8020368:	f7ff fd90 	bl	801fe8c <rotrFixed>
 802036c:	4603      	mov	r3, r0
 802036e:	405d      	eors	r5, r3
 8020370:	693b      	ldr	r3, [r7, #16]
 8020372:	2119      	movs	r1, #25
 8020374:	4618      	mov	r0, r3
 8020376:	f7ff fd89 	bl	801fe8c <rotrFixed>
 802037a:	4603      	mov	r3, r0
 802037c:	406b      	eors	r3, r5
 802037e:	18e2      	adds	r2, r4, r3
 8020380:	69b9      	ldr	r1, [r7, #24]
 8020382:	6938      	ldr	r0, [r7, #16]
 8020384:	697c      	ldr	r4, [r7, #20]
 8020386:	69bb      	ldr	r3, [r7, #24]
 8020388:	4063      	eors	r3, r4
 802038a:	4003      	ands	r3, r0
 802038c:	404b      	eors	r3, r1
 802038e:	441a      	add	r2, r3
 8020390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020392:	3303      	adds	r3, #3
 8020394:	493f      	ldr	r1, [pc, #252]	; (8020494 <Transform_Sha256+0x480>)
 8020396:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802039a:	441a      	add	r2, r3
 802039c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802039e:	3303      	adds	r3, #3
 80203a0:	009b      	lsls	r3, r3, #2
 80203a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80203a4:	440b      	add	r3, r1
 80203a6:	681b      	ldr	r3, [r3, #0]
 80203a8:	4413      	add	r3, r2
 80203aa:	633b      	str	r3, [r7, #48]	; 0x30
 80203ac:	6a3b      	ldr	r3, [r7, #32]
 80203ae:	2102      	movs	r1, #2
 80203b0:	4618      	mov	r0, r3
 80203b2:	f7ff fd6b 	bl	801fe8c <rotrFixed>
 80203b6:	4604      	mov	r4, r0
 80203b8:	6a3b      	ldr	r3, [r7, #32]
 80203ba:	210d      	movs	r1, #13
 80203bc:	4618      	mov	r0, r3
 80203be:	f7ff fd65 	bl	801fe8c <rotrFixed>
 80203c2:	4603      	mov	r3, r0
 80203c4:	405c      	eors	r4, r3
 80203c6:	6a3b      	ldr	r3, [r7, #32]
 80203c8:	2116      	movs	r1, #22
 80203ca:	4618      	mov	r0, r3
 80203cc:	f7ff fd5e 	bl	801fe8c <rotrFixed>
 80203d0:	4603      	mov	r3, r0
 80203d2:	ea84 0203 	eor.w	r2, r4, r3
 80203d6:	6a39      	ldr	r1, [r7, #32]
 80203d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80203da:	4319      	orrs	r1, r3
 80203dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80203de:	4019      	ands	r1, r3
 80203e0:	6a38      	ldr	r0, [r7, #32]
 80203e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80203e4:	4003      	ands	r3, r0
 80203e6:	430b      	orrs	r3, r1
 80203e8:	4413      	add	r3, r2
 80203ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80203ec:	68fa      	ldr	r2, [r7, #12]
 80203ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80203f0:	4413      	add	r3, r2
 80203f2:	60fb      	str	r3, [r7, #12]
 80203f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80203f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80203f8:	4413      	add	r3, r2
 80203fa:	61fb      	str	r3, [r7, #28]
            RND(4); RND(5); RND(6); RND(7);
 80203fc:	69bc      	ldr	r4, [r7, #24]
 80203fe:	68fb      	ldr	r3, [r7, #12]
 8020400:	2106      	movs	r1, #6
 8020402:	4618      	mov	r0, r3
 8020404:	f7ff fd42 	bl	801fe8c <rotrFixed>
 8020408:	4605      	mov	r5, r0
 802040a:	68fb      	ldr	r3, [r7, #12]
 802040c:	210b      	movs	r1, #11
 802040e:	4618      	mov	r0, r3
 8020410:	f7ff fd3c 	bl	801fe8c <rotrFixed>
 8020414:	4603      	mov	r3, r0
 8020416:	405d      	eors	r5, r3
 8020418:	68fb      	ldr	r3, [r7, #12]
 802041a:	2119      	movs	r1, #25
 802041c:	4618      	mov	r0, r3
 802041e:	f7ff fd35 	bl	801fe8c <rotrFixed>
 8020422:	4603      	mov	r3, r0
 8020424:	406b      	eors	r3, r5
 8020426:	18e2      	adds	r2, r4, r3
 8020428:	6979      	ldr	r1, [r7, #20]
 802042a:	68f8      	ldr	r0, [r7, #12]
 802042c:	693c      	ldr	r4, [r7, #16]
 802042e:	697b      	ldr	r3, [r7, #20]
 8020430:	4063      	eors	r3, r4
 8020432:	4003      	ands	r3, r0
 8020434:	404b      	eors	r3, r1
 8020436:	441a      	add	r2, r3
 8020438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802043a:	3304      	adds	r3, #4
 802043c:	4915      	ldr	r1, [pc, #84]	; (8020494 <Transform_Sha256+0x480>)
 802043e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8020442:	441a      	add	r2, r3
 8020444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020446:	3304      	adds	r3, #4
 8020448:	009b      	lsls	r3, r3, #2
 802044a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 802044c:	440b      	add	r3, r1
 802044e:	681b      	ldr	r3, [r3, #0]
 8020450:	4413      	add	r3, r2
 8020452:	633b      	str	r3, [r7, #48]	; 0x30
 8020454:	69fb      	ldr	r3, [r7, #28]
 8020456:	2102      	movs	r1, #2
 8020458:	4618      	mov	r0, r3
 802045a:	f7ff fd17 	bl	801fe8c <rotrFixed>
 802045e:	4604      	mov	r4, r0
 8020460:	69fb      	ldr	r3, [r7, #28]
 8020462:	210d      	movs	r1, #13
 8020464:	4618      	mov	r0, r3
 8020466:	f7ff fd11 	bl	801fe8c <rotrFixed>
 802046a:	4603      	mov	r3, r0
 802046c:	405c      	eors	r4, r3
 802046e:	69fb      	ldr	r3, [r7, #28]
 8020470:	2116      	movs	r1, #22
 8020472:	4618      	mov	r0, r3
 8020474:	f7ff fd0a 	bl	801fe8c <rotrFixed>
 8020478:	4603      	mov	r3, r0
 802047a:	ea84 0203 	eor.w	r2, r4, r3
 802047e:	69f9      	ldr	r1, [r7, #28]
 8020480:	6a3b      	ldr	r3, [r7, #32]
 8020482:	4319      	orrs	r1, r3
 8020484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020486:	4019      	ands	r1, r3
 8020488:	69f8      	ldr	r0, [r7, #28]
 802048a:	6a3b      	ldr	r3, [r7, #32]
 802048c:	4003      	ands	r3, r0
 802048e:	430b      	orrs	r3, r1
 8020490:	e002      	b.n	8020498 <Transform_Sha256+0x484>
 8020492:	bf00      	nop
 8020494:	0802d688 	.word	0x0802d688
 8020498:	4413      	add	r3, r2
 802049a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802049c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802049e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80204a0:	4413      	add	r3, r2
 80204a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80204a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80204a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80204a8:	4413      	add	r3, r2
 80204aa:	61bb      	str	r3, [r7, #24]
 80204ac:	697c      	ldr	r4, [r7, #20]
 80204ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80204b0:	2106      	movs	r1, #6
 80204b2:	4618      	mov	r0, r3
 80204b4:	f7ff fcea 	bl	801fe8c <rotrFixed>
 80204b8:	4605      	mov	r5, r0
 80204ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80204bc:	210b      	movs	r1, #11
 80204be:	4618      	mov	r0, r3
 80204c0:	f7ff fce4 	bl	801fe8c <rotrFixed>
 80204c4:	4603      	mov	r3, r0
 80204c6:	405d      	eors	r5, r3
 80204c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80204ca:	2119      	movs	r1, #25
 80204cc:	4618      	mov	r0, r3
 80204ce:	f7ff fcdd 	bl	801fe8c <rotrFixed>
 80204d2:	4603      	mov	r3, r0
 80204d4:	406b      	eors	r3, r5
 80204d6:	18e2      	adds	r2, r4, r3
 80204d8:	6939      	ldr	r1, [r7, #16]
 80204da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80204dc:	68fc      	ldr	r4, [r7, #12]
 80204de:	693b      	ldr	r3, [r7, #16]
 80204e0:	4063      	eors	r3, r4
 80204e2:	4003      	ands	r3, r0
 80204e4:	404b      	eors	r3, r1
 80204e6:	441a      	add	r2, r3
 80204e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80204ea:	3305      	adds	r3, #5
 80204ec:	4983      	ldr	r1, [pc, #524]	; (80206fc <Transform_Sha256+0x6e8>)
 80204ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80204f2:	441a      	add	r2, r3
 80204f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80204f6:	3305      	adds	r3, #5
 80204f8:	009b      	lsls	r3, r3, #2
 80204fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80204fc:	440b      	add	r3, r1
 80204fe:	681b      	ldr	r3, [r3, #0]
 8020500:	4413      	add	r3, r2
 8020502:	633b      	str	r3, [r7, #48]	; 0x30
 8020504:	69bb      	ldr	r3, [r7, #24]
 8020506:	2102      	movs	r1, #2
 8020508:	4618      	mov	r0, r3
 802050a:	f7ff fcbf 	bl	801fe8c <rotrFixed>
 802050e:	4604      	mov	r4, r0
 8020510:	69bb      	ldr	r3, [r7, #24]
 8020512:	210d      	movs	r1, #13
 8020514:	4618      	mov	r0, r3
 8020516:	f7ff fcb9 	bl	801fe8c <rotrFixed>
 802051a:	4603      	mov	r3, r0
 802051c:	405c      	eors	r4, r3
 802051e:	69bb      	ldr	r3, [r7, #24]
 8020520:	2116      	movs	r1, #22
 8020522:	4618      	mov	r0, r3
 8020524:	f7ff fcb2 	bl	801fe8c <rotrFixed>
 8020528:	4603      	mov	r3, r0
 802052a:	ea84 0203 	eor.w	r2, r4, r3
 802052e:	69b9      	ldr	r1, [r7, #24]
 8020530:	69fb      	ldr	r3, [r7, #28]
 8020532:	4319      	orrs	r1, r3
 8020534:	6a3b      	ldr	r3, [r7, #32]
 8020536:	4019      	ands	r1, r3
 8020538:	69b8      	ldr	r0, [r7, #24]
 802053a:	69fb      	ldr	r3, [r7, #28]
 802053c:	4003      	ands	r3, r0
 802053e:	430b      	orrs	r3, r1
 8020540:	4413      	add	r3, r2
 8020542:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020548:	4413      	add	r3, r2
 802054a:	627b      	str	r3, [r7, #36]	; 0x24
 802054c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802054e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020550:	4413      	add	r3, r2
 8020552:	617b      	str	r3, [r7, #20]
 8020554:	693c      	ldr	r4, [r7, #16]
 8020556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020558:	2106      	movs	r1, #6
 802055a:	4618      	mov	r0, r3
 802055c:	f7ff fc96 	bl	801fe8c <rotrFixed>
 8020560:	4605      	mov	r5, r0
 8020562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020564:	210b      	movs	r1, #11
 8020566:	4618      	mov	r0, r3
 8020568:	f7ff fc90 	bl	801fe8c <rotrFixed>
 802056c:	4603      	mov	r3, r0
 802056e:	405d      	eors	r5, r3
 8020570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020572:	2119      	movs	r1, #25
 8020574:	4618      	mov	r0, r3
 8020576:	f7ff fc89 	bl	801fe8c <rotrFixed>
 802057a:	4603      	mov	r3, r0
 802057c:	406b      	eors	r3, r5
 802057e:	18e2      	adds	r2, r4, r3
 8020580:	68f9      	ldr	r1, [r7, #12]
 8020582:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020584:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8020586:	68fb      	ldr	r3, [r7, #12]
 8020588:	4063      	eors	r3, r4
 802058a:	4003      	ands	r3, r0
 802058c:	404b      	eors	r3, r1
 802058e:	441a      	add	r2, r3
 8020590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020592:	3306      	adds	r3, #6
 8020594:	4959      	ldr	r1, [pc, #356]	; (80206fc <Transform_Sha256+0x6e8>)
 8020596:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802059a:	441a      	add	r2, r3
 802059c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802059e:	3306      	adds	r3, #6
 80205a0:	009b      	lsls	r3, r3, #2
 80205a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80205a4:	440b      	add	r3, r1
 80205a6:	681b      	ldr	r3, [r3, #0]
 80205a8:	4413      	add	r3, r2
 80205aa:	633b      	str	r3, [r7, #48]	; 0x30
 80205ac:	697b      	ldr	r3, [r7, #20]
 80205ae:	2102      	movs	r1, #2
 80205b0:	4618      	mov	r0, r3
 80205b2:	f7ff fc6b 	bl	801fe8c <rotrFixed>
 80205b6:	4604      	mov	r4, r0
 80205b8:	697b      	ldr	r3, [r7, #20]
 80205ba:	210d      	movs	r1, #13
 80205bc:	4618      	mov	r0, r3
 80205be:	f7ff fc65 	bl	801fe8c <rotrFixed>
 80205c2:	4603      	mov	r3, r0
 80205c4:	405c      	eors	r4, r3
 80205c6:	697b      	ldr	r3, [r7, #20]
 80205c8:	2116      	movs	r1, #22
 80205ca:	4618      	mov	r0, r3
 80205cc:	f7ff fc5e 	bl	801fe8c <rotrFixed>
 80205d0:	4603      	mov	r3, r0
 80205d2:	ea84 0203 	eor.w	r2, r4, r3
 80205d6:	6979      	ldr	r1, [r7, #20]
 80205d8:	69bb      	ldr	r3, [r7, #24]
 80205da:	4319      	orrs	r1, r3
 80205dc:	69fb      	ldr	r3, [r7, #28]
 80205de:	4019      	ands	r1, r3
 80205e0:	6978      	ldr	r0, [r7, #20]
 80205e2:	69bb      	ldr	r3, [r7, #24]
 80205e4:	4003      	ands	r3, r0
 80205e6:	430b      	orrs	r3, r1
 80205e8:	4413      	add	r3, r2
 80205ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80205ec:	6a3a      	ldr	r2, [r7, #32]
 80205ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80205f0:	4413      	add	r3, r2
 80205f2:	623b      	str	r3, [r7, #32]
 80205f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80205f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80205f8:	4413      	add	r3, r2
 80205fa:	613b      	str	r3, [r7, #16]
 80205fc:	68fc      	ldr	r4, [r7, #12]
 80205fe:	6a3b      	ldr	r3, [r7, #32]
 8020600:	2106      	movs	r1, #6
 8020602:	4618      	mov	r0, r3
 8020604:	f7ff fc42 	bl	801fe8c <rotrFixed>
 8020608:	4605      	mov	r5, r0
 802060a:	6a3b      	ldr	r3, [r7, #32]
 802060c:	210b      	movs	r1, #11
 802060e:	4618      	mov	r0, r3
 8020610:	f7ff fc3c 	bl	801fe8c <rotrFixed>
 8020614:	4603      	mov	r3, r0
 8020616:	405d      	eors	r5, r3
 8020618:	6a3b      	ldr	r3, [r7, #32]
 802061a:	2119      	movs	r1, #25
 802061c:	4618      	mov	r0, r3
 802061e:	f7ff fc35 	bl	801fe8c <rotrFixed>
 8020622:	4603      	mov	r3, r0
 8020624:	406b      	eors	r3, r5
 8020626:	18e2      	adds	r2, r4, r3
 8020628:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802062a:	6a38      	ldr	r0, [r7, #32]
 802062c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 802062e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020630:	4063      	eors	r3, r4
 8020632:	4003      	ands	r3, r0
 8020634:	404b      	eors	r3, r1
 8020636:	441a      	add	r2, r3
 8020638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802063a:	3307      	adds	r3, #7
 802063c:	492f      	ldr	r1, [pc, #188]	; (80206fc <Transform_Sha256+0x6e8>)
 802063e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8020642:	441a      	add	r2, r3
 8020644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020646:	3307      	adds	r3, #7
 8020648:	009b      	lsls	r3, r3, #2
 802064a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 802064c:	440b      	add	r3, r1
 802064e:	681b      	ldr	r3, [r3, #0]
 8020650:	4413      	add	r3, r2
 8020652:	633b      	str	r3, [r7, #48]	; 0x30
 8020654:	693b      	ldr	r3, [r7, #16]
 8020656:	2102      	movs	r1, #2
 8020658:	4618      	mov	r0, r3
 802065a:	f7ff fc17 	bl	801fe8c <rotrFixed>
 802065e:	4604      	mov	r4, r0
 8020660:	693b      	ldr	r3, [r7, #16]
 8020662:	210d      	movs	r1, #13
 8020664:	4618      	mov	r0, r3
 8020666:	f7ff fc11 	bl	801fe8c <rotrFixed>
 802066a:	4603      	mov	r3, r0
 802066c:	405c      	eors	r4, r3
 802066e:	693b      	ldr	r3, [r7, #16]
 8020670:	2116      	movs	r1, #22
 8020672:	4618      	mov	r0, r3
 8020674:	f7ff fc0a 	bl	801fe8c <rotrFixed>
 8020678:	4603      	mov	r3, r0
 802067a:	ea84 0203 	eor.w	r2, r4, r3
 802067e:	6939      	ldr	r1, [r7, #16]
 8020680:	697b      	ldr	r3, [r7, #20]
 8020682:	4319      	orrs	r1, r3
 8020684:	69bb      	ldr	r3, [r7, #24]
 8020686:	4019      	ands	r1, r3
 8020688:	6938      	ldr	r0, [r7, #16]
 802068a:	697b      	ldr	r3, [r7, #20]
 802068c:	4003      	ands	r3, r0
 802068e:	430b      	orrs	r3, r1
 8020690:	4413      	add	r3, r2
 8020692:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020694:	69fa      	ldr	r2, [r7, #28]
 8020696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020698:	4413      	add	r3, r2
 802069a:	61fb      	str	r3, [r7, #28]
 802069c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802069e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80206a0:	4413      	add	r3, r2
 80206a2:	60fb      	str	r3, [r7, #12]
        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
 80206a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80206a6:	3308      	adds	r3, #8
 80206a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80206aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80206ac:	2b3f      	cmp	r3, #63	; 0x3f
 80206ae:	f77f ad57 	ble.w	8020160 <Transform_Sha256+0x14c>
        }
    #endif /* USE_SLOW_SHA256 */

        /* Add the working vars back into digest state[] */
        for (i = 0; i < 8; i++) {
 80206b2:	2300      	movs	r3, #0
 80206b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80206b6:	e011      	b.n	80206dc <Transform_Sha256+0x6c8>
            sha256->digest[i] += S[i];
 80206b8:	687b      	ldr	r3, [r7, #4]
 80206ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80206bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80206c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80206c2:	009b      	lsls	r3, r3, #2
 80206c4:	3340      	adds	r3, #64	; 0x40
 80206c6:	443b      	add	r3, r7
 80206c8:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80206cc:	18d1      	adds	r1, r2, r3
 80206ce:	687b      	ldr	r3, [r7, #4]
 80206d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80206d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (i = 0; i < 8; i++) {
 80206d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80206d8:	3301      	adds	r3, #1
 80206da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80206dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80206de:	2b07      	cmp	r3, #7
 80206e0:	ddea      	ble.n	80206b8 <Transform_Sha256+0x6a4>
        }

    #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SMALL_STACK_CACHE)
        XFREE(W, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 80206e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80206e4:	637b      	str	r3, [r7, #52]	; 0x34
 80206e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80206e8:	2b00      	cmp	r3, #0
 80206ea:	d002      	beq.n	80206f2 <Transform_Sha256+0x6de>
 80206ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80206ee:	f7fd fdfd 	bl	801e2ec <wolfSSL_Free>
    #endif
        return 0;
 80206f2:	2300      	movs	r3, #0
    }
 80206f4:	4618      	mov	r0, r3
 80206f6:	3740      	adds	r7, #64	; 0x40
 80206f8:	46bd      	mov	sp, r7
 80206fa:	bdb0      	pop	{r4, r5, r7, pc}
 80206fc:	0802d688 	.word	0x0802d688

08020700 <AddLength>:


#ifdef XTRANSFORM

    static WC_INLINE void AddLength(wc_Sha256* sha256, word32 len)
    {
 8020700:	b480      	push	{r7}
 8020702:	b085      	sub	sp, #20
 8020704:	af00      	add	r7, sp, #0
 8020706:	6078      	str	r0, [r7, #4]
 8020708:	6039      	str	r1, [r7, #0]
        word32 tmp = sha256->loLen;
 802070a:	687b      	ldr	r3, [r7, #4]
 802070c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802070e:	60fb      	str	r3, [r7, #12]
        if ((sha256->loLen += len) < tmp) {
 8020710:	687b      	ldr	r3, [r7, #4]
 8020712:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8020714:	683b      	ldr	r3, [r7, #0]
 8020716:	441a      	add	r2, r3
 8020718:	687b      	ldr	r3, [r7, #4]
 802071a:	665a      	str	r2, [r3, #100]	; 0x64
 802071c:	687b      	ldr	r3, [r7, #4]
 802071e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8020720:	68fa      	ldr	r2, [r7, #12]
 8020722:	429a      	cmp	r2, r3
 8020724:	d904      	bls.n	8020730 <AddLength+0x30>
            sha256->hiLen++;                       /* carry low to high */
 8020726:	687b      	ldr	r3, [r7, #4]
 8020728:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802072a:	1c5a      	adds	r2, r3, #1
 802072c:	687b      	ldr	r3, [r7, #4]
 802072e:	669a      	str	r2, [r3, #104]	; 0x68
        }
    }
 8020730:	bf00      	nop
 8020732:	3714      	adds	r7, #20
 8020734:	46bd      	mov	sp, r7
 8020736:	f85d 7b04 	ldr.w	r7, [sp], #4
 802073a:	4770      	bx	lr

0802073c <Sha256Update>:

    /* do block size increments/updates */
    static WC_INLINE int Sha256Update(wc_Sha256* sha256, const byte* data, word32 len)
    {
 802073c:	b580      	push	{r7, lr}
 802073e:	b088      	sub	sp, #32
 8020740:	af00      	add	r7, sp, #0
 8020742:	60f8      	str	r0, [r7, #12]
 8020744:	60b9      	str	r1, [r7, #8]
 8020746:	607a      	str	r2, [r7, #4]
        int ret = 0;
 8020748:	2300      	movs	r3, #0
 802074a:	61fb      	str	r3, [r7, #28]
        word32 blocksLen;
        byte* local;

        if (sha256 == NULL || (data == NULL && len > 0)) {
 802074c:	68fb      	ldr	r3, [r7, #12]
 802074e:	2b00      	cmp	r3, #0
 8020750:	d005      	beq.n	802075e <Sha256Update+0x22>
 8020752:	68bb      	ldr	r3, [r7, #8]
 8020754:	2b00      	cmp	r3, #0
 8020756:	d105      	bne.n	8020764 <Sha256Update+0x28>
 8020758:	687b      	ldr	r3, [r7, #4]
 802075a:	2b00      	cmp	r3, #0
 802075c:	d002      	beq.n	8020764 <Sha256Update+0x28>
            return BAD_FUNC_ARG;
 802075e:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8020762:	e084      	b.n	802086e <Sha256Update+0x132>
        }

        if (data == NULL && len == 0) {
 8020764:	68bb      	ldr	r3, [r7, #8]
 8020766:	2b00      	cmp	r3, #0
 8020768:	d104      	bne.n	8020774 <Sha256Update+0x38>
 802076a:	687b      	ldr	r3, [r7, #4]
 802076c:	2b00      	cmp	r3, #0
 802076e:	d101      	bne.n	8020774 <Sha256Update+0x38>
            /* valid, but do nothing */
            return 0;
 8020770:	2300      	movs	r3, #0
 8020772:	e07c      	b.n	802086e <Sha256Update+0x132>
        }

        /* check that internal buffLen is valid */
        if (sha256->buffLen >= WC_SHA256_BLOCK_SIZE) {
 8020774:	68fb      	ldr	r3, [r7, #12]
 8020776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020778:	2b3f      	cmp	r3, #63	; 0x3f
 802077a:	d902      	bls.n	8020782 <Sha256Update+0x46>
            return BUFFER_E;
 802077c:	f06f 0383 	mvn.w	r3, #131	; 0x83
 8020780:	e075      	b.n	802086e <Sha256Update+0x132>
        }

        /* add length for final */
        AddLength(sha256, len);
 8020782:	6879      	ldr	r1, [r7, #4]
 8020784:	68f8      	ldr	r0, [r7, #12]
 8020786:	f7ff ffbb 	bl	8020700 <AddLength>

        local = (byte*)sha256->buffer;
 802078a:	68fb      	ldr	r3, [r7, #12]
 802078c:	3320      	adds	r3, #32
 802078e:	61bb      	str	r3, [r7, #24]

        /* process any remainder from previous operation */
        if (sha256->buffLen > 0) {
 8020790:	68fb      	ldr	r3, [r7, #12]
 8020792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020794:	2b00      	cmp	r3, #0
 8020796:	d056      	beq.n	8020846 <Sha256Update+0x10a>
            blocksLen = min(len, WC_SHA256_BLOCK_SIZE - sha256->buffLen);
 8020798:	68fb      	ldr	r3, [r7, #12]
 802079a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802079c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80207a0:	4619      	mov	r1, r3
 80207a2:	6878      	ldr	r0, [r7, #4]
 80207a4:	f7ff fbbe 	bl	801ff24 <min>
 80207a8:	6178      	str	r0, [r7, #20]
            XMEMCPY(&local[sha256->buffLen], data, blocksLen);
 80207aa:	68fb      	ldr	r3, [r7, #12]
 80207ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80207ae:	69ba      	ldr	r2, [r7, #24]
 80207b0:	4413      	add	r3, r2
 80207b2:	697a      	ldr	r2, [r7, #20]
 80207b4:	68b9      	ldr	r1, [r7, #8]
 80207b6:	4618      	mov	r0, r3
 80207b8:	f009 fe86 	bl	802a4c8 <memcpy>

            sha256->buffLen += blocksLen;
 80207bc:	68fb      	ldr	r3, [r7, #12]
 80207be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80207c0:	697b      	ldr	r3, [r7, #20]
 80207c2:	441a      	add	r2, r3
 80207c4:	68fb      	ldr	r3, [r7, #12]
 80207c6:	661a      	str	r2, [r3, #96]	; 0x60
            data            += blocksLen;
 80207c8:	68ba      	ldr	r2, [r7, #8]
 80207ca:	697b      	ldr	r3, [r7, #20]
 80207cc:	4413      	add	r3, r2
 80207ce:	60bb      	str	r3, [r7, #8]
            len             -= blocksLen;
 80207d0:	687a      	ldr	r2, [r7, #4]
 80207d2:	697b      	ldr	r3, [r7, #20]
 80207d4:	1ad3      	subs	r3, r2, r3
 80207d6:	607b      	str	r3, [r7, #4]

            if (sha256->buffLen == WC_SHA256_BLOCK_SIZE) {
 80207d8:	68fb      	ldr	r3, [r7, #12]
 80207da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80207dc:	2b40      	cmp	r3, #64	; 0x40
 80207de:	d132      	bne.n	8020846 <Sha256Update+0x10a>
                #if defined(USE_INTEL_SPEEDUP) && \
                          (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2))
                if (!IS_INTEL_AVX1(intel_flags) && !IS_INTEL_AVX2(intel_flags))
                #endif
                {
                    ByteReverseWords(sha256->buffer, sha256->buffer,
 80207e0:	68fb      	ldr	r3, [r7, #12]
 80207e2:	f103 0020 	add.w	r0, r3, #32
 80207e6:	68fb      	ldr	r3, [r7, #12]
 80207e8:	3320      	adds	r3, #32
 80207ea:	2240      	movs	r2, #64	; 0x40
 80207ec:	4619      	mov	r1, r3
 80207ee:	f7ff fb73 	bl	801fed8 <ByteReverseWords>
                    ret = XTRANSFORM(sha256, (const byte*)local);
                } else {
                    esp_sha256_process(sha256, (const byte*)local);
                }
            #else
                ret = XTRANSFORM(sha256, (const byte*)local);
 80207f2:	69b9      	ldr	r1, [r7, #24]
 80207f4:	68f8      	ldr	r0, [r7, #12]
 80207f6:	f7ff fc0d 	bl	8020014 <Transform_Sha256>
 80207fa:	61f8      	str	r0, [r7, #28]
            #endif

                if (ret == 0)
 80207fc:	69fb      	ldr	r3, [r7, #28]
 80207fe:	2b00      	cmp	r3, #0
 8020800:	d103      	bne.n	802080a <Sha256Update+0xce>
                    sha256->buffLen = 0;
 8020802:	68fb      	ldr	r3, [r7, #12]
 8020804:	2200      	movs	r2, #0
 8020806:	661a      	str	r2, [r3, #96]	; 0x60
 8020808:	e01d      	b.n	8020846 <Sha256Update+0x10a>
                else
                    len = 0; /* error */
 802080a:	2300      	movs	r3, #0
 802080c:	607b      	str	r3, [r7, #4]
        #endif
    #endif /* XTRANSFORM_LEN */
    #if !defined(XTRANSFORM_LEN) || (defined(USE_INTEL_SPEEDUP) && \
                         (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2)))
        {
            while (len >= WC_SHA256_BLOCK_SIZE) {
 802080e:	e01a      	b.n	8020846 <Sha256Update+0x10a>
                word32* local32 = sha256->buffer;
 8020810:	68fb      	ldr	r3, [r7, #12]
 8020812:	3320      	adds	r3, #32
 8020814:	613b      	str	r3, [r7, #16]
                    local32 = (word32*)data;
                }
                else
            #endif
                {
                    XMEMCPY(local32, data, WC_SHA256_BLOCK_SIZE);
 8020816:	2240      	movs	r2, #64	; 0x40
 8020818:	68b9      	ldr	r1, [r7, #8]
 802081a:	6938      	ldr	r0, [r7, #16]
 802081c:	f009 fe54 	bl	802a4c8 <memcpy>
                }

                data += WC_SHA256_BLOCK_SIZE;
 8020820:	68bb      	ldr	r3, [r7, #8]
 8020822:	3340      	adds	r3, #64	; 0x40
 8020824:	60bb      	str	r3, [r7, #8]
                len  -= WC_SHA256_BLOCK_SIZE;
 8020826:	687b      	ldr	r3, [r7, #4]
 8020828:	3b40      	subs	r3, #64	; 0x40
 802082a:	607b      	str	r3, [r7, #4]
                #if defined(USE_INTEL_SPEEDUP) && \
                          (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2))
                if (!IS_INTEL_AVX1(intel_flags) && !IS_INTEL_AVX2(intel_flags))
                #endif
                {
                    ByteReverseWords(local32, local32, WC_SHA256_BLOCK_SIZE);
 802082c:	2240      	movs	r2, #64	; 0x40
 802082e:	6939      	ldr	r1, [r7, #16]
 8020830:	6938      	ldr	r0, [r7, #16]
 8020832:	f7ff fb51 	bl	801fed8 <ByteReverseWords>
                    ret = XTRANSFORM(sha256, (const byte*)local32);
                } else {
                    esp_sha256_process(sha256, (const byte*)local32);
                }
            #else
                ret = XTRANSFORM(sha256, (const byte*)local32);
 8020836:	6939      	ldr	r1, [r7, #16]
 8020838:	68f8      	ldr	r0, [r7, #12]
 802083a:	f7ff fbeb 	bl	8020014 <Transform_Sha256>
 802083e:	61f8      	str	r0, [r7, #28]
            #endif

                if (ret != 0)
 8020840:	69fb      	ldr	r3, [r7, #28]
 8020842:	2b00      	cmp	r3, #0
 8020844:	d103      	bne.n	802084e <Sha256Update+0x112>
            while (len >= WC_SHA256_BLOCK_SIZE) {
 8020846:	687b      	ldr	r3, [r7, #4]
 8020848:	2b3f      	cmp	r3, #63	; 0x3f
 802084a:	d8e1      	bhi.n	8020810 <Sha256Update+0xd4>
 802084c:	e000      	b.n	8020850 <Sha256Update+0x114>
                    break;
 802084e:	bf00      	nop
            }
        }
    #endif

        /* save remainder */
        if (ret == 0 && len > 0) {
 8020850:	69fb      	ldr	r3, [r7, #28]
 8020852:	2b00      	cmp	r3, #0
 8020854:	d10a      	bne.n	802086c <Sha256Update+0x130>
 8020856:	687b      	ldr	r3, [r7, #4]
 8020858:	2b00      	cmp	r3, #0
 802085a:	d007      	beq.n	802086c <Sha256Update+0x130>
            XMEMCPY(local, data, len);
 802085c:	687a      	ldr	r2, [r7, #4]
 802085e:	68b9      	ldr	r1, [r7, #8]
 8020860:	69b8      	ldr	r0, [r7, #24]
 8020862:	f009 fe31 	bl	802a4c8 <memcpy>
            sha256->buffLen = len;
 8020866:	68fb      	ldr	r3, [r7, #12]
 8020868:	687a      	ldr	r2, [r7, #4]
 802086a:	661a      	str	r2, [r3, #96]	; 0x60
        }

        return ret;
 802086c:	69fb      	ldr	r3, [r7, #28]
    }
 802086e:	4618      	mov	r0, r3
 8020870:	3720      	adds	r7, #32
 8020872:	46bd      	mov	sp, r7
 8020874:	bd80      	pop	{r7, pc}

08020876 <wc_Sha256Update>:
#if defined(WOLFSSL_KCAPI_HASH)
    /* implemented in wolfcrypt/src/port/kcapi/kcapi_hash.c */

#else
    int wc_Sha256Update(wc_Sha256* sha256, const byte* data, word32 len)
    {
 8020876:	b580      	push	{r7, lr}
 8020878:	b084      	sub	sp, #16
 802087a:	af00      	add	r7, sp, #0
 802087c:	60f8      	str	r0, [r7, #12]
 802087e:	60b9      	str	r1, [r7, #8]
 8020880:	607a      	str	r2, [r7, #4]
        if (sha256 == NULL || (data == NULL && len > 0)) {
 8020882:	68fb      	ldr	r3, [r7, #12]
 8020884:	2b00      	cmp	r3, #0
 8020886:	d005      	beq.n	8020894 <wc_Sha256Update+0x1e>
 8020888:	68bb      	ldr	r3, [r7, #8]
 802088a:	2b00      	cmp	r3, #0
 802088c:	d105      	bne.n	802089a <wc_Sha256Update+0x24>
 802088e:	687b      	ldr	r3, [r7, #4]
 8020890:	2b00      	cmp	r3, #0
 8020892:	d002      	beq.n	802089a <wc_Sha256Update+0x24>
            return BAD_FUNC_ARG;
 8020894:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8020898:	e00d      	b.n	80208b6 <wc_Sha256Update+0x40>
        }

        if (data == NULL && len == 0) {
 802089a:	68bb      	ldr	r3, [r7, #8]
 802089c:	2b00      	cmp	r3, #0
 802089e:	d104      	bne.n	80208aa <wc_Sha256Update+0x34>
 80208a0:	687b      	ldr	r3, [r7, #4]
 80208a2:	2b00      	cmp	r3, #0
 80208a4:	d101      	bne.n	80208aa <wc_Sha256Update+0x34>
            /* valid, but do nothing */
            return 0;
 80208a6:	2300      	movs	r3, #0
 80208a8:	e005      	b.n	80208b6 <wc_Sha256Update+0x40>
            return IntelQaSymSha256(&sha256->asyncDev, NULL, data, len);
        #endif
        }
    #endif /* WOLFSSL_ASYNC_CRYPT */

        return Sha256Update(sha256, data, len);
 80208aa:	687a      	ldr	r2, [r7, #4]
 80208ac:	68b9      	ldr	r1, [r7, #8]
 80208ae:	68f8      	ldr	r0, [r7, #12]
 80208b0:	f7ff ff44 	bl	802073c <Sha256Update>
 80208b4:	4603      	mov	r3, r0
    }
 80208b6:	4618      	mov	r0, r3
 80208b8:	3710      	adds	r7, #16
 80208ba:	46bd      	mov	sp, r7
 80208bc:	bd80      	pop	{r7, pc}

080208be <Sha256Final>:
#endif

    static WC_INLINE int Sha256Final(wc_Sha256* sha256)
    {
 80208be:	b580      	push	{r7, lr}
 80208c0:	b084      	sub	sp, #16
 80208c2:	af00      	add	r7, sp, #0
 80208c4:	6078      	str	r0, [r7, #4]

        int ret;
        byte* local;

        if (sha256 == NULL) {
 80208c6:	687b      	ldr	r3, [r7, #4]
 80208c8:	2b00      	cmp	r3, #0
 80208ca:	d102      	bne.n	80208d2 <Sha256Final+0x14>
            return BAD_FUNC_ARG;
 80208cc:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80208d0:	e069      	b.n	80209a6 <Sha256Final+0xe8>
        }

        local = (byte*)sha256->buffer;
 80208d2:	687b      	ldr	r3, [r7, #4]
 80208d4:	3320      	adds	r3, #32
 80208d6:	60fb      	str	r3, [r7, #12]
        local[sha256->buffLen++] = 0x80; /* add 1 */
 80208d8:	687b      	ldr	r3, [r7, #4]
 80208da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80208dc:	1c59      	adds	r1, r3, #1
 80208de:	687a      	ldr	r2, [r7, #4]
 80208e0:	6611      	str	r1, [r2, #96]	; 0x60
 80208e2:	68fa      	ldr	r2, [r7, #12]
 80208e4:	4413      	add	r3, r2
 80208e6:	2280      	movs	r2, #128	; 0x80
 80208e8:	701a      	strb	r2, [r3, #0]

        /* pad with zeros */
        if (sha256->buffLen > WC_SHA256_PAD_SIZE) {
 80208ea:	687b      	ldr	r3, [r7, #4]
 80208ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80208ee:	2b38      	cmp	r3, #56	; 0x38
 80208f0:	d924      	bls.n	802093c <Sha256Final+0x7e>
            XMEMSET(&local[sha256->buffLen], 0,
 80208f2:	687b      	ldr	r3, [r7, #4]
 80208f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80208f6:	68fa      	ldr	r2, [r7, #12]
 80208f8:	18d0      	adds	r0, r2, r3
 80208fa:	687b      	ldr	r3, [r7, #4]
 80208fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80208fe:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8020902:	461a      	mov	r2, r3
 8020904:	2100      	movs	r1, #0
 8020906:	f009 fe07 	bl	802a518 <memset>
                WC_SHA256_BLOCK_SIZE - sha256->buffLen);
            sha256->buffLen += WC_SHA256_BLOCK_SIZE - sha256->buffLen;
 802090a:	687b      	ldr	r3, [r7, #4]
 802090c:	2240      	movs	r2, #64	; 0x40
 802090e:	661a      	str	r2, [r3, #96]	; 0x60
            #if defined(USE_INTEL_SPEEDUP) && \
                          (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2))
            if (!IS_INTEL_AVX1(intel_flags) && !IS_INTEL_AVX2(intel_flags))
            #endif
            {
                ByteReverseWords(sha256->buffer, sha256->buffer,
 8020910:	687b      	ldr	r3, [r7, #4]
 8020912:	f103 0020 	add.w	r0, r3, #32
 8020916:	687b      	ldr	r3, [r7, #4]
 8020918:	3320      	adds	r3, #32
 802091a:	2240      	movs	r2, #64	; 0x40
 802091c:	4619      	mov	r1, r3
 802091e:	f7ff fadb 	bl	801fed8 <ByteReverseWords>
                ret = XTRANSFORM(sha256, (const byte*)local);
            } else {
                ret = esp_sha256_process(sha256, (const byte*)local);
            }
        #else
            ret = XTRANSFORM(sha256, (const byte*)local);
 8020922:	68f9      	ldr	r1, [r7, #12]
 8020924:	6878      	ldr	r0, [r7, #4]
 8020926:	f7ff fb75 	bl	8020014 <Transform_Sha256>
 802092a:	60b8      	str	r0, [r7, #8]
        #endif
            if (ret != 0)
 802092c:	68bb      	ldr	r3, [r7, #8]
 802092e:	2b00      	cmp	r3, #0
 8020930:	d001      	beq.n	8020936 <Sha256Final+0x78>
                return ret;
 8020932:	68bb      	ldr	r3, [r7, #8]
 8020934:	e037      	b.n	80209a6 <Sha256Final+0xe8>

            sha256->buffLen = 0;
 8020936:	687b      	ldr	r3, [r7, #4]
 8020938:	2200      	movs	r2, #0
 802093a:	661a      	str	r2, [r3, #96]	; 0x60
        }
        XMEMSET(&local[sha256->buffLen], 0,
 802093c:	687b      	ldr	r3, [r7, #4]
 802093e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020940:	68fa      	ldr	r2, [r7, #12]
 8020942:	18d0      	adds	r0, r2, r3
 8020944:	687b      	ldr	r3, [r7, #4]
 8020946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020948:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 802094c:	461a      	mov	r2, r3
 802094e:	2100      	movs	r1, #0
 8020950:	f009 fde2 	bl	802a518 <memset>
            WC_SHA256_PAD_SIZE - sha256->buffLen);

        /* put lengths in bits */
        sha256->hiLen = (sha256->loLen >> (8 * sizeof(sha256->loLen) - 3)) +
 8020954:	687b      	ldr	r3, [r7, #4]
 8020956:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8020958:	0f5a      	lsrs	r2, r3, #29
                                                         (sha256->hiLen << 3);
 802095a:	687b      	ldr	r3, [r7, #4]
 802095c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802095e:	00db      	lsls	r3, r3, #3
        sha256->hiLen = (sha256->loLen >> (8 * sizeof(sha256->loLen) - 3)) +
 8020960:	441a      	add	r2, r3
 8020962:	687b      	ldr	r3, [r7, #4]
 8020964:	669a      	str	r2, [r3, #104]	; 0x68
        sha256->loLen = sha256->loLen << 3;
 8020966:	687b      	ldr	r3, [r7, #4]
 8020968:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802096a:	00da      	lsls	r2, r3, #3
 802096c:	687b      	ldr	r3, [r7, #4]
 802096e:	665a      	str	r2, [r3, #100]	; 0x64
        #if defined(USE_INTEL_SPEEDUP) && \
                          (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2))
        if (!IS_INTEL_AVX1(intel_flags) && !IS_INTEL_AVX2(intel_flags))
        #endif
        {
            ByteReverseWords(sha256->buffer, sha256->buffer,
 8020970:	687b      	ldr	r3, [r7, #4]
 8020972:	f103 0020 	add.w	r0, r3, #32
 8020976:	687b      	ldr	r3, [r7, #4]
 8020978:	3320      	adds	r3, #32
 802097a:	2240      	movs	r2, #64	; 0x40
 802097c:	4619      	mov	r1, r3
 802097e:	f7ff faab 	bl	801fed8 <ByteReverseWords>
                WC_SHA256_BLOCK_SIZE);
        }
    #endif
        /* ! length ordering dependent on digest endian type ! */
        XMEMCPY(&local[WC_SHA256_PAD_SIZE], &sha256->hiLen, sizeof(word32));
 8020982:	68fb      	ldr	r3, [r7, #12]
 8020984:	3338      	adds	r3, #56	; 0x38
 8020986:	687a      	ldr	r2, [r7, #4]
 8020988:	3268      	adds	r2, #104	; 0x68
 802098a:	6812      	ldr	r2, [r2, #0]
 802098c:	601a      	str	r2, [r3, #0]
        XMEMCPY(&local[WC_SHA256_PAD_SIZE + sizeof(word32)], &sha256->loLen,
 802098e:	68fb      	ldr	r3, [r7, #12]
 8020990:	333c      	adds	r3, #60	; 0x3c
 8020992:	687a      	ldr	r2, [r7, #4]
 8020994:	3264      	adds	r2, #100	; 0x64
 8020996:	6812      	ldr	r2, [r2, #0]
 8020998:	601a      	str	r2, [r3, #0]
            ret = XTRANSFORM(sha256, (const byte*)local);
        } else {
            ret = esp_sha256_digest_process(sha256, 1);
        }
    #else
        ret = XTRANSFORM(sha256, (const byte*)local);
 802099a:	68f9      	ldr	r1, [r7, #12]
 802099c:	6878      	ldr	r0, [r7, #4]
 802099e:	f7ff fb39 	bl	8020014 <Transform_Sha256>
 80209a2:	60b8      	str	r0, [r7, #8]
    #endif

        return ret;
 80209a4:	68bb      	ldr	r3, [r7, #8]
    }
 80209a6:	4618      	mov	r0, r3
 80209a8:	3710      	adds	r7, #16
 80209aa:	46bd      	mov	sp, r7
 80209ac:	bd80      	pop	{r7, pc}

080209ae <wc_Sha256Final>:

        return 0;
    }

    int wc_Sha256Final(wc_Sha256* sha256, byte* hash)
    {
 80209ae:	b580      	push	{r7, lr}
 80209b0:	b084      	sub	sp, #16
 80209b2:	af00      	add	r7, sp, #0
 80209b4:	6078      	str	r0, [r7, #4]
 80209b6:	6039      	str	r1, [r7, #0]
        int ret;

        if (sha256 == NULL || hash == NULL) {
 80209b8:	687b      	ldr	r3, [r7, #4]
 80209ba:	2b00      	cmp	r3, #0
 80209bc:	d002      	beq.n	80209c4 <wc_Sha256Final+0x16>
 80209be:	683b      	ldr	r3, [r7, #0]
 80209c0:	2b00      	cmp	r3, #0
 80209c2:	d102      	bne.n	80209ca <wc_Sha256Final+0x1c>
            return BAD_FUNC_ARG;
 80209c4:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80209c8:	e018      	b.n	80209fc <wc_Sha256Final+0x4e>
                                            WC_SHA256_DIGEST_SIZE);
        #endif
        }
    #endif /* WOLFSSL_ASYNC_CRYPT */

        ret = Sha256Final(sha256);
 80209ca:	6878      	ldr	r0, [r7, #4]
 80209cc:	f7ff ff77 	bl	80208be <Sha256Final>
 80209d0:	60f8      	str	r0, [r7, #12]
        if (ret != 0)
 80209d2:	68fb      	ldr	r3, [r7, #12]
 80209d4:	2b00      	cmp	r3, #0
 80209d6:	d001      	beq.n	80209dc <wc_Sha256Final+0x2e>
            return ret;
 80209d8:	68fb      	ldr	r3, [r7, #12]
 80209da:	e00f      	b.n	80209fc <wc_Sha256Final+0x4e>

    #if defined(LITTLE_ENDIAN_ORDER)
        ByteReverseWords(sha256->digest, sha256->digest, WC_SHA256_DIGEST_SIZE);
 80209dc:	687b      	ldr	r3, [r7, #4]
 80209de:	6879      	ldr	r1, [r7, #4]
 80209e0:	2220      	movs	r2, #32
 80209e2:	4618      	mov	r0, r3
 80209e4:	f7ff fa78 	bl	801fed8 <ByteReverseWords>
    #endif
        XMEMCPY(hash, sha256->digest, WC_SHA256_DIGEST_SIZE);
 80209e8:	687b      	ldr	r3, [r7, #4]
 80209ea:	2220      	movs	r2, #32
 80209ec:	4619      	mov	r1, r3
 80209ee:	6838      	ldr	r0, [r7, #0]
 80209f0:	f009 fd6a 	bl	802a4c8 <memcpy>

        return InitSha256(sha256);  /* reset state */
 80209f4:	6878      	ldr	r0, [r7, #4]
 80209f6:	f7ff faa5 	bl	801ff44 <InitSha256>
 80209fa:	4603      	mov	r3, r0
    }
 80209fc:	4618      	mov	r0, r3
 80209fe:	3710      	adds	r7, #16
 8020a00:	46bd      	mov	sp, r7
 8020a02:	bd80      	pop	{r7, pc}

08020a04 <InitSha224>:

    #define NEED_SOFT_SHA224


    static int InitSha224(wc_Sha224* sha224)
    {
 8020a04:	b480      	push	{r7}
 8020a06:	b085      	sub	sp, #20
 8020a08:	af00      	add	r7, sp, #0
 8020a0a:	6078      	str	r0, [r7, #4]
        int ret = 0;
 8020a0c:	2300      	movs	r3, #0
 8020a0e:	60fb      	str	r3, [r7, #12]

        if (sha224 == NULL) {
 8020a10:	687b      	ldr	r3, [r7, #4]
 8020a12:	2b00      	cmp	r3, #0
 8020a14:	d102      	bne.n	8020a1c <InitSha224+0x18>
            return BAD_FUNC_ARG;
 8020a16:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8020a1a:	e021      	b.n	8020a60 <InitSha224+0x5c>
        }

        sha224->digest[0] = 0xc1059ed8;
 8020a1c:	687b      	ldr	r3, [r7, #4]
 8020a1e:	4a13      	ldr	r2, [pc, #76]	; (8020a6c <InitSha224+0x68>)
 8020a20:	601a      	str	r2, [r3, #0]
        sha224->digest[1] = 0x367cd507;
 8020a22:	687b      	ldr	r3, [r7, #4]
 8020a24:	4a12      	ldr	r2, [pc, #72]	; (8020a70 <InitSha224+0x6c>)
 8020a26:	605a      	str	r2, [r3, #4]
        sha224->digest[2] = 0x3070dd17;
 8020a28:	687b      	ldr	r3, [r7, #4]
 8020a2a:	4a12      	ldr	r2, [pc, #72]	; (8020a74 <InitSha224+0x70>)
 8020a2c:	609a      	str	r2, [r3, #8]
        sha224->digest[3] = 0xf70e5939;
 8020a2e:	687b      	ldr	r3, [r7, #4]
 8020a30:	4a11      	ldr	r2, [pc, #68]	; (8020a78 <InitSha224+0x74>)
 8020a32:	60da      	str	r2, [r3, #12]
        sha224->digest[4] = 0xffc00b31;
 8020a34:	687b      	ldr	r3, [r7, #4]
 8020a36:	4a11      	ldr	r2, [pc, #68]	; (8020a7c <InitSha224+0x78>)
 8020a38:	611a      	str	r2, [r3, #16]
        sha224->digest[5] = 0x68581511;
 8020a3a:	687b      	ldr	r3, [r7, #4]
 8020a3c:	4a10      	ldr	r2, [pc, #64]	; (8020a80 <InitSha224+0x7c>)
 8020a3e:	615a      	str	r2, [r3, #20]
        sha224->digest[6] = 0x64f98fa7;
 8020a40:	687b      	ldr	r3, [r7, #4]
 8020a42:	4a10      	ldr	r2, [pc, #64]	; (8020a84 <InitSha224+0x80>)
 8020a44:	619a      	str	r2, [r3, #24]
        sha224->digest[7] = 0xbefa4fa4;
 8020a46:	687b      	ldr	r3, [r7, #4]
 8020a48:	4a0f      	ldr	r2, [pc, #60]	; (8020a88 <InitSha224+0x84>)
 8020a4a:	61da      	str	r2, [r3, #28]

        sha224->buffLen = 0;
 8020a4c:	687b      	ldr	r3, [r7, #4]
 8020a4e:	2200      	movs	r2, #0
 8020a50:	661a      	str	r2, [r3, #96]	; 0x60
        sha224->loLen   = 0;
 8020a52:	687b      	ldr	r3, [r7, #4]
 8020a54:	2200      	movs	r2, #0
 8020a56:	665a      	str	r2, [r3, #100]	; 0x64
        sha224->hiLen   = 0;
 8020a58:	687b      	ldr	r3, [r7, #4]
 8020a5a:	2200      	movs	r2, #0
 8020a5c:	669a      	str	r2, [r3, #104]	; 0x68
    #endif
    #ifdef WOLFSSL_HASH_FLAGS
        sha224->flags = 0;
    #endif

        return ret;
 8020a5e:	68fb      	ldr	r3, [r7, #12]
    }
 8020a60:	4618      	mov	r0, r3
 8020a62:	3714      	adds	r7, #20
 8020a64:	46bd      	mov	sp, r7
 8020a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a6a:	4770      	bx	lr
 8020a6c:	c1059ed8 	.word	0xc1059ed8
 8020a70:	367cd507 	.word	0x367cd507
 8020a74:	3070dd17 	.word	0x3070dd17
 8020a78:	f70e5939 	.word	0xf70e5939
 8020a7c:	ffc00b31 	.word	0xffc00b31
 8020a80:	68581511 	.word	0x68581511
 8020a84:	64f98fa7 	.word	0x64f98fa7
 8020a88:	befa4fa4 	.word	0xbefa4fa4

08020a8c <wc_InitSha224_ex>:

#endif

#ifdef NEED_SOFT_SHA224
    int wc_InitSha224_ex(wc_Sha224* sha224, void* heap, int devId)
    {
 8020a8c:	b580      	push	{r7, lr}
 8020a8e:	b086      	sub	sp, #24
 8020a90:	af00      	add	r7, sp, #0
 8020a92:	60f8      	str	r0, [r7, #12]
 8020a94:	60b9      	str	r1, [r7, #8]
 8020a96:	607a      	str	r2, [r7, #4]
        int ret = 0;
 8020a98:	2300      	movs	r3, #0
 8020a9a:	617b      	str	r3, [r7, #20]

        if (sha224 == NULL)
 8020a9c:	68fb      	ldr	r3, [r7, #12]
 8020a9e:	2b00      	cmp	r3, #0
 8020aa0:	d102      	bne.n	8020aa8 <wc_InitSha224_ex+0x1c>
            return BAD_FUNC_ARG;
 8020aa2:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8020aa6:	e00c      	b.n	8020ac2 <wc_InitSha224_ex+0x36>

        sha224->heap = heap;
 8020aa8:	68fb      	ldr	r3, [r7, #12]
 8020aaa:	68ba      	ldr	r2, [r7, #8]
 8020aac:	66da      	str	r2, [r3, #108]	; 0x6c
    #ifdef WOLFSSL_SMALL_STACK_CACHE
        sha224->W = NULL;
    #endif

        ret = InitSha224(sha224);
 8020aae:	68f8      	ldr	r0, [r7, #12]
 8020ab0:	f7ff ffa8 	bl	8020a04 <InitSha224>
 8020ab4:	6178      	str	r0, [r7, #20]
        if (ret != 0)
 8020ab6:	697b      	ldr	r3, [r7, #20]
 8020ab8:	2b00      	cmp	r3, #0
 8020aba:	d001      	beq.n	8020ac0 <wc_InitSha224_ex+0x34>
            return ret;
 8020abc:	697b      	ldr	r3, [r7, #20]
 8020abe:	e000      	b.n	8020ac2 <wc_InitSha224_ex+0x36>
                            WOLFSSL_ASYNC_MARKER_SHA224, sha224->heap, devId);
    #else
        (void)devId;
    #endif /* WOLFSSL_ASYNC_CRYPT */

        return ret;
 8020ac0:	697b      	ldr	r3, [r7, #20]
    }
 8020ac2:	4618      	mov	r0, r3
 8020ac4:	3718      	adds	r7, #24
 8020ac6:	46bd      	mov	sp, r7
 8020ac8:	bd80      	pop	{r7, pc}

08020aca <wc_Sha224Update>:

    int wc_Sha224Update(wc_Sha224* sha224, const byte* data, word32 len)
    {
 8020aca:	b580      	push	{r7, lr}
 8020acc:	b086      	sub	sp, #24
 8020ace:	af00      	add	r7, sp, #0
 8020ad0:	60f8      	str	r0, [r7, #12]
 8020ad2:	60b9      	str	r1, [r7, #8]
 8020ad4:	607a      	str	r2, [r7, #4]
        int ret;

        if (sha224 == NULL || (data == NULL && len > 0)) {
 8020ad6:	68fb      	ldr	r3, [r7, #12]
 8020ad8:	2b00      	cmp	r3, #0
 8020ada:	d005      	beq.n	8020ae8 <wc_Sha224Update+0x1e>
 8020adc:	68bb      	ldr	r3, [r7, #8]
 8020ade:	2b00      	cmp	r3, #0
 8020ae0:	d105      	bne.n	8020aee <wc_Sha224Update+0x24>
 8020ae2:	687b      	ldr	r3, [r7, #4]
 8020ae4:	2b00      	cmp	r3, #0
 8020ae6:	d002      	beq.n	8020aee <wc_Sha224Update+0x24>
            return BAD_FUNC_ARG;
 8020ae8:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8020aec:	e006      	b.n	8020afc <wc_Sha224Update+0x32>
            return IntelQaSymSha224(&sha224->asyncDev, NULL, data, len);
        #endif
        }
    #endif /* WOLFSSL_ASYNC_CRYPT */

        ret = Sha256Update((wc_Sha256*)sha224, data, len);
 8020aee:	687a      	ldr	r2, [r7, #4]
 8020af0:	68b9      	ldr	r1, [r7, #8]
 8020af2:	68f8      	ldr	r0, [r7, #12]
 8020af4:	f7ff fe22 	bl	802073c <Sha256Update>
 8020af8:	6178      	str	r0, [r7, #20]

        return ret;
 8020afa:	697b      	ldr	r3, [r7, #20]
    }
 8020afc:	4618      	mov	r0, r3
 8020afe:	3718      	adds	r7, #24
 8020b00:	46bd      	mov	sp, r7
 8020b02:	bd80      	pop	{r7, pc}

08020b04 <wc_Sha224Final>:

    int wc_Sha224Final(wc_Sha224* sha224, byte* hash)
    {
 8020b04:	b580      	push	{r7, lr}
 8020b06:	b084      	sub	sp, #16
 8020b08:	af00      	add	r7, sp, #0
 8020b0a:	6078      	str	r0, [r7, #4]
 8020b0c:	6039      	str	r1, [r7, #0]
        int ret;

        if (sha224 == NULL || hash == NULL) {
 8020b0e:	687b      	ldr	r3, [r7, #4]
 8020b10:	2b00      	cmp	r3, #0
 8020b12:	d002      	beq.n	8020b1a <wc_Sha224Final+0x16>
 8020b14:	683b      	ldr	r3, [r7, #0]
 8020b16:	2b00      	cmp	r3, #0
 8020b18:	d102      	bne.n	8020b20 <wc_Sha224Final+0x1c>
            return BAD_FUNC_ARG;
 8020b1a:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8020b1e:	e018      	b.n	8020b52 <wc_Sha224Final+0x4e>
                                            WC_SHA224_DIGEST_SIZE);
        #endif
        }
    #endif /* WOLFSSL_ASYNC_CRYPT */

        ret = Sha256Final((wc_Sha256*)sha224);
 8020b20:	6878      	ldr	r0, [r7, #4]
 8020b22:	f7ff fecc 	bl	80208be <Sha256Final>
 8020b26:	60f8      	str	r0, [r7, #12]
        if (ret != 0)
 8020b28:	68fb      	ldr	r3, [r7, #12]
 8020b2a:	2b00      	cmp	r3, #0
 8020b2c:	d001      	beq.n	8020b32 <wc_Sha224Final+0x2e>
            return ret;
 8020b2e:	68fb      	ldr	r3, [r7, #12]
 8020b30:	e00f      	b.n	8020b52 <wc_Sha224Final+0x4e>

    #if defined(LITTLE_ENDIAN_ORDER)
        ByteReverseWords(sha224->digest, sha224->digest, WC_SHA224_DIGEST_SIZE);
 8020b32:	687b      	ldr	r3, [r7, #4]
 8020b34:	6879      	ldr	r1, [r7, #4]
 8020b36:	221c      	movs	r2, #28
 8020b38:	4618      	mov	r0, r3
 8020b3a:	f7ff f9cd 	bl	801fed8 <ByteReverseWords>
    #endif
        XMEMCPY(hash, sha224->digest, WC_SHA224_DIGEST_SIZE);
 8020b3e:	687b      	ldr	r3, [r7, #4]
 8020b40:	221c      	movs	r2, #28
 8020b42:	4619      	mov	r1, r3
 8020b44:	6838      	ldr	r0, [r7, #0]
 8020b46:	f009 fcbf 	bl	802a4c8 <memcpy>

        return InitSha224(sha224);  /* reset state */
 8020b4a:	6878      	ldr	r0, [r7, #4]
 8020b4c:	f7ff ff5a 	bl	8020a04 <InitSha224>
 8020b50:	4603      	mov	r3, r0
    }
 8020b52:	4618      	mov	r0, r3
 8020b54:	3710      	adds	r7, #16
 8020b56:	46bd      	mov	sp, r7
 8020b58:	bd80      	pop	{r7, pc}

08020b5a <wc_InitSha224>:
#endif /* end of SHA224 software implementation */

    int wc_InitSha224(wc_Sha224* sha224)
    {
 8020b5a:	b580      	push	{r7, lr}
 8020b5c:	b082      	sub	sp, #8
 8020b5e:	af00      	add	r7, sp, #0
 8020b60:	6078      	str	r0, [r7, #4]
        return wc_InitSha224_ex(sha224, NULL, INVALID_DEVID);
 8020b62:	f06f 0201 	mvn.w	r2, #1
 8020b66:	2100      	movs	r1, #0
 8020b68:	6878      	ldr	r0, [r7, #4]
 8020b6a:	f7ff ff8f 	bl	8020a8c <wc_InitSha224_ex>
 8020b6e:	4603      	mov	r3, r0
    }
 8020b70:	4618      	mov	r0, r3
 8020b72:	3708      	adds	r7, #8
 8020b74:	46bd      	mov	sp, r7
 8020b76:	bd80      	pop	{r7, pc}

08020b78 <wc_Sha224Free>:

#if !defined(WOLFSSL_HAVE_PSA) || defined(WOLFSSL_PSA_NO_HASH)
    /* implemented in wolfcrypt/src/port/psa/psa_hash.c */

    void wc_Sha224Free(wc_Sha224* sha224)
    {
 8020b78:	b480      	push	{r7}
 8020b7a:	b083      	sub	sp, #12
 8020b7c:	af00      	add	r7, sp, #0
 8020b7e:	6078      	str	r0, [r7, #4]
        if (sha224 == NULL)
 8020b80:	687b      	ldr	r3, [r7, #4]
 8020b82:	2b00      	cmp	r3, #0
        wc_Sha256Pic32Free(sha224);
    #endif
    #if defined(WOLFSSL_KCAPI_HASH)
        KcapiHashFree(&sha224->kcapi);
    #endif
    }
 8020b84:	370c      	adds	r7, #12
 8020b86:	46bd      	mov	sp, r7
 8020b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b8c:	4770      	bx	lr

08020b8e <wc_Sha256Free>:

#if !defined(WOLFSSL_HAVE_PSA) || defined(WOLFSSL_PSA_NO_HASH)
    /* implemented in wolfcrypt/src/port/psa/psa_hash.c */

void wc_Sha256Free(wc_Sha256* sha256)
{
 8020b8e:	b480      	push	{r7}
 8020b90:	b083      	sub	sp, #12
 8020b92:	af00      	add	r7, sp, #0
 8020b94:	6078      	str	r0, [r7, #4]
    if (sha256 == NULL)
 8020b96:	687b      	ldr	r3, [r7, #4]
 8020b98:	2b00      	cmp	r3, #0
    KcapiHashFree(&sha256->kcapi);
#endif
#ifdef WOLFSSL_IMXRT_DCP
    DCPSha256Free(sha256);
#endif
}
 8020b9a:	370c      	adds	r7, #12
 8020b9c:	46bd      	mov	sp, r7
 8020b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ba2:	4770      	bx	lr

08020ba4 <BlockSha3>:
/* The block operation performed on the state.
 *
 * s  The state.
 */
static void BlockSha3(word64 *s)
{
 8020ba4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8020ba8:	f5ad 6d21 	sub.w	sp, sp, #2576	; 0xa10
 8020bac:	af00      	add	r7, sp, #0
 8020bae:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020bb2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8020bb6:	6018      	str	r0, [r3, #0]
#ifndef SHA3_BY_SPEC
    word64 t1;
#endif
    byte i;

    for (i = 0; i < 24; i += 2)
 8020bb8:	2300      	movs	r3, #0
 8020bba:	f887 3a0f 	strb.w	r3, [r7, #2575]	; 0xa0f
 8020bbe:	f003 b9bb 	b.w	8023f38 <BlockSha3+0x3394>
    {
        COL_MIX(s, b, x, t0);
 8020bc2:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020bc6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8020bca:	681b      	ldr	r3, [r3, #0]
 8020bcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020bd0:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020bd4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8020bd8:	681b      	ldr	r3, [r3, #0]
 8020bda:	3328      	adds	r3, #40	; 0x28
 8020bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020be0:	ea80 0402 	eor.w	r4, r0, r2
 8020be4:	f8c7 48f8 	str.w	r4, [r7, #2296]	; 0x8f8
 8020be8:	404b      	eors	r3, r1
 8020bea:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
 8020bee:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020bf2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8020bf6:	681b      	ldr	r3, [r3, #0]
 8020bf8:	3350      	adds	r3, #80	; 0x50
 8020bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020bfe:	f607 01f8 	addw	r1, r7, #2296	; 0x8f8
 8020c02:	e9d1 4500 	ldrd	r4, r5, [r1]
 8020c06:	4621      	mov	r1, r4
 8020c08:	4051      	eors	r1, r2
 8020c0a:	f8c7 18f0 	str.w	r1, [r7, #2288]	; 0x8f0
 8020c0e:	4629      	mov	r1, r5
 8020c10:	404b      	eors	r3, r1
 8020c12:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
 8020c16:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020c1a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8020c1e:	681b      	ldr	r3, [r3, #0]
 8020c20:	3378      	adds	r3, #120	; 0x78
 8020c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c26:	f507 610f 	add.w	r1, r7, #2288	; 0x8f0
 8020c2a:	e9d1 4500 	ldrd	r4, r5, [r1]
 8020c2e:	4621      	mov	r1, r4
 8020c30:	4051      	eors	r1, r2
 8020c32:	f8c7 18e8 	str.w	r1, [r7, #2280]	; 0x8e8
 8020c36:	4629      	mov	r1, r5
 8020c38:	404b      	eors	r3, r1
 8020c3a:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
 8020c3e:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020c42:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8020c46:	681b      	ldr	r3, [r3, #0]
 8020c48:	33a0      	adds	r3, #160	; 0xa0
 8020c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c4e:	f607 01e8 	addw	r1, r7, #2280	; 0x8e8
 8020c52:	e9d1 4500 	ldrd	r4, r5, [r1]
 8020c56:	4621      	mov	r1, r4
 8020c58:	4051      	eors	r1, r2
 8020c5a:	f8c7 18e0 	str.w	r1, [r7, #2272]	; 0x8e0
 8020c5e:	4629      	mov	r1, r5
 8020c60:	404b      	eors	r3, r1
 8020c62:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
 8020c66:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020c6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8020c6e:	f507 620e 	add.w	r2, r7, #2272	; 0x8e0
 8020c72:	e9d2 1200 	ldrd	r1, r2, [r2]
 8020c76:	e9c3 1200 	strd	r1, r2, [r3]
 8020c7a:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020c7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8020c82:	681b      	ldr	r3, [r3, #0]
 8020c84:	3308      	adds	r3, #8
 8020c86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020c8a:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020c8e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8020c92:	681b      	ldr	r3, [r3, #0]
 8020c94:	3330      	adds	r3, #48	; 0x30
 8020c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c9a:	ea80 0402 	eor.w	r4, r0, r2
 8020c9e:	f8c7 48d8 	str.w	r4, [r7, #2264]	; 0x8d8
 8020ca2:	404b      	eors	r3, r1
 8020ca4:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
 8020ca8:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020cac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8020cb0:	681b      	ldr	r3, [r3, #0]
 8020cb2:	3358      	adds	r3, #88	; 0x58
 8020cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020cb8:	f607 01d8 	addw	r1, r7, #2264	; 0x8d8
 8020cbc:	e9d1 4500 	ldrd	r4, r5, [r1]
 8020cc0:	4621      	mov	r1, r4
 8020cc2:	4051      	eors	r1, r2
 8020cc4:	f8c7 18d0 	str.w	r1, [r7, #2256]	; 0x8d0
 8020cc8:	4629      	mov	r1, r5
 8020cca:	404b      	eors	r3, r1
 8020ccc:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
 8020cd0:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020cd4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8020cd8:	681b      	ldr	r3, [r3, #0]
 8020cda:	3380      	adds	r3, #128	; 0x80
 8020cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ce0:	f507 610d 	add.w	r1, r7, #2256	; 0x8d0
 8020ce4:	e9d1 4500 	ldrd	r4, r5, [r1]
 8020ce8:	4621      	mov	r1, r4
 8020cea:	4051      	eors	r1, r2
 8020cec:	f8c7 18c8 	str.w	r1, [r7, #2248]	; 0x8c8
 8020cf0:	4629      	mov	r1, r5
 8020cf2:	404b      	eors	r3, r1
 8020cf4:	f8c7 38cc 	str.w	r3, [r7, #2252]	; 0x8cc
 8020cf8:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020cfc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8020d00:	681b      	ldr	r3, [r3, #0]
 8020d02:	33a8      	adds	r3, #168	; 0xa8
 8020d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d08:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 8020d0c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8020d10:	4621      	mov	r1, r4
 8020d12:	4051      	eors	r1, r2
 8020d14:	f8c7 18c0 	str.w	r1, [r7, #2240]	; 0x8c0
 8020d18:	4629      	mov	r1, r5
 8020d1a:	404b      	eors	r3, r1
 8020d1c:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8020d20:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020d24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8020d28:	f507 620c 	add.w	r2, r7, #2240	; 0x8c0
 8020d2c:	e9d2 1200 	ldrd	r1, r2, [r2]
 8020d30:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8020d34:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020d38:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8020d3c:	681b      	ldr	r3, [r3, #0]
 8020d3e:	3310      	adds	r3, #16
 8020d40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020d44:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020d48:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8020d4c:	681b      	ldr	r3, [r3, #0]
 8020d4e:	3338      	adds	r3, #56	; 0x38
 8020d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d54:	ea80 0402 	eor.w	r4, r0, r2
 8020d58:	f8c7 48b8 	str.w	r4, [r7, #2232]	; 0x8b8
 8020d5c:	404b      	eors	r3, r1
 8020d5e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8020d62:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020d66:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8020d6a:	681b      	ldr	r3, [r3, #0]
 8020d6c:	3360      	adds	r3, #96	; 0x60
 8020d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d72:	f607 01b8 	addw	r1, r7, #2232	; 0x8b8
 8020d76:	e9d1 4500 	ldrd	r4, r5, [r1]
 8020d7a:	4621      	mov	r1, r4
 8020d7c:	4051      	eors	r1, r2
 8020d7e:	f8c7 18b0 	str.w	r1, [r7, #2224]	; 0x8b0
 8020d82:	4629      	mov	r1, r5
 8020d84:	404b      	eors	r3, r1
 8020d86:	f8c7 38b4 	str.w	r3, [r7, #2228]	; 0x8b4
 8020d8a:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020d8e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8020d92:	681b      	ldr	r3, [r3, #0]
 8020d94:	3388      	adds	r3, #136	; 0x88
 8020d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d9a:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8020d9e:	e9d1 4500 	ldrd	r4, r5, [r1]
 8020da2:	4621      	mov	r1, r4
 8020da4:	4051      	eors	r1, r2
 8020da6:	f8c7 18a8 	str.w	r1, [r7, #2216]	; 0x8a8
 8020daa:	4629      	mov	r1, r5
 8020dac:	404b      	eors	r3, r1
 8020dae:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
 8020db2:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020db6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8020dba:	681b      	ldr	r3, [r3, #0]
 8020dbc:	33b0      	adds	r3, #176	; 0xb0
 8020dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020dc2:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 8020dc6:	e9d1 4500 	ldrd	r4, r5, [r1]
 8020dca:	4621      	mov	r1, r4
 8020dcc:	4051      	eors	r1, r2
 8020dce:	f8c7 18a0 	str.w	r1, [r7, #2208]	; 0x8a0
 8020dd2:	4629      	mov	r1, r5
 8020dd4:	404b      	eors	r3, r1
 8020dd6:	f8c7 38a4 	str.w	r3, [r7, #2212]	; 0x8a4
 8020dda:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8020de2:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 8020de6:	e9d2 1200 	ldrd	r1, r2, [r2]
 8020dea:	e9c3 1204 	strd	r1, r2, [r3, #16]
 8020dee:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020df2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8020df6:	681b      	ldr	r3, [r3, #0]
 8020df8:	3318      	adds	r3, #24
 8020dfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020dfe:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020e02:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8020e06:	681b      	ldr	r3, [r3, #0]
 8020e08:	3340      	adds	r3, #64	; 0x40
 8020e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e0e:	ea80 0402 	eor.w	r4, r0, r2
 8020e12:	f8c7 4898 	str.w	r4, [r7, #2200]	; 0x898
 8020e16:	404b      	eors	r3, r1
 8020e18:	f8c7 389c 	str.w	r3, [r7, #2204]	; 0x89c
 8020e1c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020e20:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8020e24:	681b      	ldr	r3, [r3, #0]
 8020e26:	3368      	adds	r3, #104	; 0x68
 8020e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e2c:	f607 0198 	addw	r1, r7, #2200	; 0x898
 8020e30:	e9d1 4500 	ldrd	r4, r5, [r1]
 8020e34:	4621      	mov	r1, r4
 8020e36:	4051      	eors	r1, r2
 8020e38:	f8c7 1890 	str.w	r1, [r7, #2192]	; 0x890
 8020e3c:	4629      	mov	r1, r5
 8020e3e:	404b      	eors	r3, r1
 8020e40:	f8c7 3894 	str.w	r3, [r7, #2196]	; 0x894
 8020e44:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020e48:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8020e4c:	681b      	ldr	r3, [r3, #0]
 8020e4e:	3390      	adds	r3, #144	; 0x90
 8020e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e54:	f507 6109 	add.w	r1, r7, #2192	; 0x890
 8020e58:	e9d1 4500 	ldrd	r4, r5, [r1]
 8020e5c:	4621      	mov	r1, r4
 8020e5e:	4051      	eors	r1, r2
 8020e60:	f8c7 1888 	str.w	r1, [r7, #2184]	; 0x888
 8020e64:	4629      	mov	r1, r5
 8020e66:	404b      	eors	r3, r1
 8020e68:	f8c7 388c 	str.w	r3, [r7, #2188]	; 0x88c
 8020e6c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020e70:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8020e74:	681b      	ldr	r3, [r3, #0]
 8020e76:	33b8      	adds	r3, #184	; 0xb8
 8020e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e7c:	f607 0188 	addw	r1, r7, #2184	; 0x888
 8020e80:	e9d1 4500 	ldrd	r4, r5, [r1]
 8020e84:	4621      	mov	r1, r4
 8020e86:	4051      	eors	r1, r2
 8020e88:	f8c7 1880 	str.w	r1, [r7, #2176]	; 0x880
 8020e8c:	4629      	mov	r1, r5
 8020e8e:	404b      	eors	r3, r1
 8020e90:	f8c7 3884 	str.w	r3, [r7, #2180]	; 0x884
 8020e94:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8020e9c:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8020ea0:	e9d2 1200 	ldrd	r1, r2, [r2]
 8020ea4:	e9c3 1206 	strd	r1, r2, [r3, #24]
 8020ea8:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020eac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8020eb0:	681b      	ldr	r3, [r3, #0]
 8020eb2:	3320      	adds	r3, #32
 8020eb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020eb8:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020ebc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8020ec0:	681b      	ldr	r3, [r3, #0]
 8020ec2:	3348      	adds	r3, #72	; 0x48
 8020ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ec8:	ea80 0402 	eor.w	r4, r0, r2
 8020ecc:	f8c7 4878 	str.w	r4, [r7, #2168]	; 0x878
 8020ed0:	404b      	eors	r3, r1
 8020ed2:	f8c7 387c 	str.w	r3, [r7, #2172]	; 0x87c
 8020ed6:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020eda:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8020ede:	681b      	ldr	r3, [r3, #0]
 8020ee0:	3370      	adds	r3, #112	; 0x70
 8020ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ee6:	f607 0178 	addw	r1, r7, #2168	; 0x878
 8020eea:	e9d1 4500 	ldrd	r4, r5, [r1]
 8020eee:	4621      	mov	r1, r4
 8020ef0:	4051      	eors	r1, r2
 8020ef2:	f8c7 1870 	str.w	r1, [r7, #2160]	; 0x870
 8020ef6:	4629      	mov	r1, r5
 8020ef8:	404b      	eors	r3, r1
 8020efa:	f8c7 3874 	str.w	r3, [r7, #2164]	; 0x874
 8020efe:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020f02:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8020f06:	681b      	ldr	r3, [r3, #0]
 8020f08:	3398      	adds	r3, #152	; 0x98
 8020f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f0e:	f507 6107 	add.w	r1, r7, #2160	; 0x870
 8020f12:	e9d1 4500 	ldrd	r4, r5, [r1]
 8020f16:	4621      	mov	r1, r4
 8020f18:	4051      	eors	r1, r2
 8020f1a:	f8c7 1868 	str.w	r1, [r7, #2152]	; 0x868
 8020f1e:	4629      	mov	r1, r5
 8020f20:	404b      	eors	r3, r1
 8020f22:	f8c7 386c 	str.w	r3, [r7, #2156]	; 0x86c
 8020f26:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020f2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8020f2e:	681b      	ldr	r3, [r3, #0]
 8020f30:	33c0      	adds	r3, #192	; 0xc0
 8020f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f36:	f607 0168 	addw	r1, r7, #2152	; 0x868
 8020f3a:	e9d1 4500 	ldrd	r4, r5, [r1]
 8020f3e:	4621      	mov	r1, r4
 8020f40:	4051      	eors	r1, r2
 8020f42:	f8c7 1860 	str.w	r1, [r7, #2144]	; 0x860
 8020f46:	4629      	mov	r1, r5
 8020f48:	404b      	eors	r3, r1
 8020f4a:	f8c7 3864 	str.w	r3, [r7, #2148]	; 0x864
 8020f4e:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020f52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8020f56:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 8020f5a:	e9d2 1200 	ldrd	r1, r2, [r2]
 8020f5e:	e9c3 1208 	strd	r1, r2, [r3, #32]
 8020f62:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020f66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8020f6a:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8020f6e:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8020f76:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8020f7a:	0fd0      	lsrs	r0, r2, #31
 8020f7c:	0059      	lsls	r1, r3, #1
 8020f7e:	4301      	orrs	r1, r0
 8020f80:	f8c7 185c 	str.w	r1, [r7, #2140]	; 0x85c
 8020f84:	0fd9      	lsrs	r1, r3, #31
 8020f86:	0053      	lsls	r3, r2, #1
 8020f88:	430b      	orrs	r3, r1
 8020f8a:	f8c7 3858 	str.w	r3, [r7, #2136]	; 0x858
 8020f8e:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8020f92:	e9d3 1200 	ldrd	r1, r2, [r3]
 8020f96:	460b      	mov	r3, r1
 8020f98:	4063      	eors	r3, r4
 8020f9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8020f9e:	4613      	mov	r3, r2
 8020fa0:	406b      	eors	r3, r5
 8020fa2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8020fa6:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8020faa:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 8020fae:	e9c2 3400 	strd	r3, r4, [r2]
 8020fb2:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020fb6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8020fba:	681b      	ldr	r3, [r3, #0]
 8020fbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020fc0:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8020fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fc8:	ea80 0402 	eor.w	r4, r0, r2
 8020fcc:	f8c7 4850 	str.w	r4, [r7, #2128]	; 0x850
 8020fd0:	404b      	eors	r3, r1
 8020fd2:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
 8020fd6:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020fda:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8020fde:	681b      	ldr	r3, [r3, #0]
 8020fe0:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 8020fe4:	e9d2 1200 	ldrd	r1, r2, [r2]
 8020fe8:	e9c3 1200 	strd	r1, r2, [r3]
 8020fec:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8020ff0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8020ff4:	681b      	ldr	r3, [r3, #0]
 8020ff6:	3328      	adds	r3, #40	; 0x28
 8020ff8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020ffc:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021000:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021004:	681b      	ldr	r3, [r3, #0]
 8021006:	f103 0428 	add.w	r4, r3, #40	; 0x28
 802100a:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 802100e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021012:	ea80 0502 	eor.w	r5, r0, r2
 8021016:	f8c7 5848 	str.w	r5, [r7, #2120]	; 0x848
 802101a:	404b      	eors	r3, r1
 802101c:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
 8021020:	f607 0348 	addw	r3, r7, #2120	; 0x848
 8021024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021028:	e9c4 2300 	strd	r2, r3, [r4]
 802102c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021030:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021034:	681b      	ldr	r3, [r3, #0]
 8021036:	3350      	adds	r3, #80	; 0x50
 8021038:	e9d3 0100 	ldrd	r0, r1, [r3]
 802103c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021040:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021044:	681b      	ldr	r3, [r3, #0]
 8021046:	f103 0450 	add.w	r4, r3, #80	; 0x50
 802104a:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 802104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021052:	ea80 0502 	eor.w	r5, r0, r2
 8021056:	f8c7 5840 	str.w	r5, [r7, #2112]	; 0x840
 802105a:	404b      	eors	r3, r1
 802105c:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
 8021060:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 8021064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021068:	e9c4 2300 	strd	r2, r3, [r4]
 802106c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021070:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021074:	681b      	ldr	r3, [r3, #0]
 8021076:	3378      	adds	r3, #120	; 0x78
 8021078:	e9d3 0100 	ldrd	r0, r1, [r3]
 802107c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021080:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021084:	681b      	ldr	r3, [r3, #0]
 8021086:	f103 0478 	add.w	r4, r3, #120	; 0x78
 802108a:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 802108e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021092:	ea80 0502 	eor.w	r5, r0, r2
 8021096:	f8c7 5838 	str.w	r5, [r7, #2104]	; 0x838
 802109a:	404b      	eors	r3, r1
 802109c:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
 80210a0:	f607 0338 	addw	r3, r7, #2104	; 0x838
 80210a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210a8:	e9c4 2300 	strd	r2, r3, [r4]
 80210ac:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80210b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80210b4:	681b      	ldr	r3, [r3, #0]
 80210b6:	33a0      	adds	r3, #160	; 0xa0
 80210b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80210bc:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80210c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80210c4:	681b      	ldr	r3, [r3, #0]
 80210c6:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80210ca:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 80210ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210d2:	ea80 0502 	eor.w	r5, r0, r2
 80210d6:	f8c7 5830 	str.w	r5, [r7, #2096]	; 0x830
 80210da:	404b      	eors	r3, r1
 80210dc:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 80210e0:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 80210e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210e8:	e9c4 2300 	strd	r2, r3, [r4]
 80210ec:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80210f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80210f4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80210f8:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80210fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021100:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8021104:	0fd0      	lsrs	r0, r2, #31
 8021106:	0059      	lsls	r1, r3, #1
 8021108:	4301      	orrs	r1, r0
 802110a:	f8c7 182c 	str.w	r1, [r7, #2092]	; 0x82c
 802110e:	0fd9      	lsrs	r1, r3, #31
 8021110:	0053      	lsls	r3, r2, #1
 8021112:	430b      	orrs	r3, r1
 8021114:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
 8021118:	f607 0328 	addw	r3, r7, #2088	; 0x828
 802111c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8021120:	460b      	mov	r3, r1
 8021122:	4063      	eors	r3, r4
 8021124:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8021128:	4613      	mov	r3, r2
 802112a:	406b      	eors	r3, r5
 802112c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8021130:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8021134:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 8021138:	e9c2 3400 	strd	r3, r4, [r2]
 802113c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021140:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021144:	681b      	ldr	r3, [r3, #0]
 8021146:	3308      	adds	r3, #8
 8021148:	e9d3 0100 	ldrd	r0, r1, [r3]
 802114c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021150:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021154:	681b      	ldr	r3, [r3, #0]
 8021156:	f103 0408 	add.w	r4, r3, #8
 802115a:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 802115e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021162:	ea80 0502 	eor.w	r5, r0, r2
 8021166:	f8c7 5820 	str.w	r5, [r7, #2080]	; 0x820
 802116a:	404b      	eors	r3, r1
 802116c:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 8021170:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8021174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021178:	e9c4 2300 	strd	r2, r3, [r4]
 802117c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021180:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021184:	681b      	ldr	r3, [r3, #0]
 8021186:	3330      	adds	r3, #48	; 0x30
 8021188:	e9d3 0100 	ldrd	r0, r1, [r3]
 802118c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021190:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021194:	681b      	ldr	r3, [r3, #0]
 8021196:	f103 0430 	add.w	r4, r3, #48	; 0x30
 802119a:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 802119e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80211a2:	ea80 0502 	eor.w	r5, r0, r2
 80211a6:	f8c7 5818 	str.w	r5, [r7, #2072]	; 0x818
 80211aa:	404b      	eors	r3, r1
 80211ac:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 80211b0:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80211b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80211b8:	e9c4 2300 	strd	r2, r3, [r4]
 80211bc:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80211c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80211c4:	681b      	ldr	r3, [r3, #0]
 80211c6:	3358      	adds	r3, #88	; 0x58
 80211c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80211cc:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80211d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80211d4:	681b      	ldr	r3, [r3, #0]
 80211d6:	f103 0458 	add.w	r4, r3, #88	; 0x58
 80211da:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 80211de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80211e2:	ea80 0502 	eor.w	r5, r0, r2
 80211e6:	f8c7 5810 	str.w	r5, [r7, #2064]	; 0x810
 80211ea:	404b      	eors	r3, r1
 80211ec:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 80211f0:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80211f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80211f8:	e9c4 2300 	strd	r2, r3, [r4]
 80211fc:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021200:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021204:	681b      	ldr	r3, [r3, #0]
 8021206:	3380      	adds	r3, #128	; 0x80
 8021208:	e9d3 0100 	ldrd	r0, r1, [r3]
 802120c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021210:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021214:	681b      	ldr	r3, [r3, #0]
 8021216:	f103 0480 	add.w	r4, r3, #128	; 0x80
 802121a:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 802121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021222:	ea80 0502 	eor.w	r5, r0, r2
 8021226:	f8c7 5808 	str.w	r5, [r7, #2056]	; 0x808
 802122a:	404b      	eors	r3, r1
 802122c:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8021230:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8021234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021238:	e9c4 2300 	strd	r2, r3, [r4]
 802123c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021240:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021244:	681b      	ldr	r3, [r3, #0]
 8021246:	33a8      	adds	r3, #168	; 0xa8
 8021248:	e9d3 0100 	ldrd	r0, r1, [r3]
 802124c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021250:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021254:	681b      	ldr	r3, [r3, #0]
 8021256:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 802125a:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 802125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021262:	ea80 0502 	eor.w	r5, r0, r2
 8021266:	f8c7 5800 	str.w	r5, [r7, #2048]	; 0x800
 802126a:	404b      	eors	r3, r1
 802126c:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 8021270:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8021274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021278:	e9c4 2300 	strd	r2, r3, [r4]
 802127c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021280:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021284:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8021288:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802128c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021290:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8021294:	0fd0      	lsrs	r0, r2, #31
 8021296:	0059      	lsls	r1, r3, #1
 8021298:	4301      	orrs	r1, r0
 802129a:	f8c7 17fc 	str.w	r1, [r7, #2044]	; 0x7fc
 802129e:	0fd9      	lsrs	r1, r3, #31
 80212a0:	0053      	lsls	r3, r2, #1
 80212a2:	430b      	orrs	r3, r1
 80212a4:	f8c7 37f8 	str.w	r3, [r7, #2040]	; 0x7f8
 80212a8:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80212ac:	e9d3 1200 	ldrd	r1, r2, [r3]
 80212b0:	460b      	mov	r3, r1
 80212b2:	4063      	eors	r3, r4
 80212b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80212b8:	4613      	mov	r3, r2
 80212ba:	406b      	eors	r3, r5
 80212bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80212c0:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 80212c4:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 80212c8:	e9c2 3400 	strd	r3, r4, [r2]
 80212cc:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80212d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80212d4:	681b      	ldr	r3, [r3, #0]
 80212d6:	3310      	adds	r3, #16
 80212d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80212dc:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80212e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80212e4:	681b      	ldr	r3, [r3, #0]
 80212e6:	f103 0410 	add.w	r4, r3, #16
 80212ea:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 80212ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80212f2:	ea80 0502 	eor.w	r5, r0, r2
 80212f6:	f8c7 57f0 	str.w	r5, [r7, #2032]	; 0x7f0
 80212fa:	404b      	eors	r3, r1
 80212fc:	f8c7 37f4 	str.w	r3, [r7, #2036]	; 0x7f4
 8021300:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8021304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021308:	e9c4 2300 	strd	r2, r3, [r4]
 802130c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021310:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021314:	681b      	ldr	r3, [r3, #0]
 8021316:	3338      	adds	r3, #56	; 0x38
 8021318:	e9d3 0100 	ldrd	r0, r1, [r3]
 802131c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021320:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021324:	681b      	ldr	r3, [r3, #0]
 8021326:	f103 0438 	add.w	r4, r3, #56	; 0x38
 802132a:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 802132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021332:	ea80 0502 	eor.w	r5, r0, r2
 8021336:	f8c7 57e8 	str.w	r5, [r7, #2024]	; 0x7e8
 802133a:	404b      	eors	r3, r1
 802133c:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
 8021340:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 8021344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021348:	e9c4 2300 	strd	r2, r3, [r4]
 802134c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021350:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021354:	681b      	ldr	r3, [r3, #0]
 8021356:	3360      	adds	r3, #96	; 0x60
 8021358:	e9d3 0100 	ldrd	r0, r1, [r3]
 802135c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021360:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021364:	681b      	ldr	r3, [r3, #0]
 8021366:	f103 0460 	add.w	r4, r3, #96	; 0x60
 802136a:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 802136e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021372:	ea80 0502 	eor.w	r5, r0, r2
 8021376:	f8c7 57e0 	str.w	r5, [r7, #2016]	; 0x7e0
 802137a:	404b      	eors	r3, r1
 802137c:	f8c7 37e4 	str.w	r3, [r7, #2020]	; 0x7e4
 8021380:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8021384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021388:	e9c4 2300 	strd	r2, r3, [r4]
 802138c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021390:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021394:	681b      	ldr	r3, [r3, #0]
 8021396:	3388      	adds	r3, #136	; 0x88
 8021398:	e9d3 0100 	ldrd	r0, r1, [r3]
 802139c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80213a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80213a4:	681b      	ldr	r3, [r3, #0]
 80213a6:	f103 0488 	add.w	r4, r3, #136	; 0x88
 80213aa:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 80213ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80213b2:	ea80 0502 	eor.w	r5, r0, r2
 80213b6:	f8c7 57d8 	str.w	r5, [r7, #2008]	; 0x7d8
 80213ba:	404b      	eors	r3, r1
 80213bc:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
 80213c0:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 80213c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80213c8:	e9c4 2300 	strd	r2, r3, [r4]
 80213cc:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80213d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80213d4:	681b      	ldr	r3, [r3, #0]
 80213d6:	33b0      	adds	r3, #176	; 0xb0
 80213d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80213dc:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80213e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80213e4:	681b      	ldr	r3, [r3, #0]
 80213e6:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 80213ea:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 80213ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80213f2:	ea80 0502 	eor.w	r5, r0, r2
 80213f6:	f8c7 57d0 	str.w	r5, [r7, #2000]	; 0x7d0
 80213fa:	404b      	eors	r3, r1
 80213fc:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4
 8021400:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 8021404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021408:	e9c4 2300 	strd	r2, r3, [r4]
 802140c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021414:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8021418:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802141c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021420:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8021424:	0fd0      	lsrs	r0, r2, #31
 8021426:	0059      	lsls	r1, r3, #1
 8021428:	4301      	orrs	r1, r0
 802142a:	f8c7 17cc 	str.w	r1, [r7, #1996]	; 0x7cc
 802142e:	0fd9      	lsrs	r1, r3, #31
 8021430:	0053      	lsls	r3, r2, #1
 8021432:	430b      	orrs	r3, r1
 8021434:	f8c7 37c8 	str.w	r3, [r7, #1992]	; 0x7c8
 8021438:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 802143c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8021440:	460b      	mov	r3, r1
 8021442:	4063      	eors	r3, r4
 8021444:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8021448:	4613      	mov	r3, r2
 802144a:	406b      	eors	r3, r5
 802144c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8021450:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8021454:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 8021458:	e9c2 3400 	strd	r3, r4, [r2]
 802145c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021460:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021464:	681b      	ldr	r3, [r3, #0]
 8021466:	3318      	adds	r3, #24
 8021468:	e9d3 0100 	ldrd	r0, r1, [r3]
 802146c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021470:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021474:	681b      	ldr	r3, [r3, #0]
 8021476:	f103 0418 	add.w	r4, r3, #24
 802147a:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 802147e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021482:	ea80 0502 	eor.w	r5, r0, r2
 8021486:	f8c7 57c0 	str.w	r5, [r7, #1984]	; 0x7c0
 802148a:	404b      	eors	r3, r1
 802148c:	f8c7 37c4 	str.w	r3, [r7, #1988]	; 0x7c4
 8021490:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 8021494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021498:	e9c4 2300 	strd	r2, r3, [r4]
 802149c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80214a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80214a4:	681b      	ldr	r3, [r3, #0]
 80214a6:	3340      	adds	r3, #64	; 0x40
 80214a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80214ac:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80214b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80214b4:	681b      	ldr	r3, [r3, #0]
 80214b6:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80214ba:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 80214be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80214c2:	ea80 0502 	eor.w	r5, r0, r2
 80214c6:	f8c7 57b8 	str.w	r5, [r7, #1976]	; 0x7b8
 80214ca:	404b      	eors	r3, r1
 80214cc:	f8c7 37bc 	str.w	r3, [r7, #1980]	; 0x7bc
 80214d0:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 80214d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80214d8:	e9c4 2300 	strd	r2, r3, [r4]
 80214dc:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80214e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80214e4:	681b      	ldr	r3, [r3, #0]
 80214e6:	3368      	adds	r3, #104	; 0x68
 80214e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80214ec:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80214f0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80214f4:	681b      	ldr	r3, [r3, #0]
 80214f6:	f103 0468 	add.w	r4, r3, #104	; 0x68
 80214fa:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 80214fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021502:	ea80 0502 	eor.w	r5, r0, r2
 8021506:	f8c7 57b0 	str.w	r5, [r7, #1968]	; 0x7b0
 802150a:	404b      	eors	r3, r1
 802150c:	f8c7 37b4 	str.w	r3, [r7, #1972]	; 0x7b4
 8021510:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 8021514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021518:	e9c4 2300 	strd	r2, r3, [r4]
 802151c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021520:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021524:	681b      	ldr	r3, [r3, #0]
 8021526:	3390      	adds	r3, #144	; 0x90
 8021528:	e9d3 0100 	ldrd	r0, r1, [r3]
 802152c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021530:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021534:	681b      	ldr	r3, [r3, #0]
 8021536:	f103 0490 	add.w	r4, r3, #144	; 0x90
 802153a:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 802153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021542:	ea80 0502 	eor.w	r5, r0, r2
 8021546:	f8c7 57a8 	str.w	r5, [r7, #1960]	; 0x7a8
 802154a:	404b      	eors	r3, r1
 802154c:	f8c7 37ac 	str.w	r3, [r7, #1964]	; 0x7ac
 8021550:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 8021554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021558:	e9c4 2300 	strd	r2, r3, [r4]
 802155c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021560:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021564:	681b      	ldr	r3, [r3, #0]
 8021566:	33b8      	adds	r3, #184	; 0xb8
 8021568:	e9d3 0100 	ldrd	r0, r1, [r3]
 802156c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021570:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021574:	681b      	ldr	r3, [r3, #0]
 8021576:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 802157a:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 802157e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021582:	ea80 0502 	eor.w	r5, r0, r2
 8021586:	f8c7 57a0 	str.w	r5, [r7, #1952]	; 0x7a0
 802158a:	404b      	eors	r3, r1
 802158c:	f8c7 37a4 	str.w	r3, [r7, #1956]	; 0x7a4
 8021590:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8021594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021598:	e9c4 2300 	strd	r2, r3, [r4]
 802159c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80215a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80215a4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80215a8:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80215ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80215b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80215b4:	0fd0      	lsrs	r0, r2, #31
 80215b6:	0059      	lsls	r1, r3, #1
 80215b8:	4301      	orrs	r1, r0
 80215ba:	f8c7 179c 	str.w	r1, [r7, #1948]	; 0x79c
 80215be:	0fd9      	lsrs	r1, r3, #31
 80215c0:	0053      	lsls	r3, r2, #1
 80215c2:	430b      	orrs	r3, r1
 80215c4:	f8c7 3798 	str.w	r3, [r7, #1944]	; 0x798
 80215c8:	f507 63f3 	add.w	r3, r7, #1944	; 0x798
 80215cc:	e9d3 1200 	ldrd	r1, r2, [r3]
 80215d0:	460b      	mov	r3, r1
 80215d2:	4063      	eors	r3, r4
 80215d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80215d8:	4613      	mov	r3, r2
 80215da:	406b      	eors	r3, r5
 80215dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80215e0:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80215e4:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 80215e8:	e9c2 3400 	strd	r3, r4, [r2]
 80215ec:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80215f0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80215f4:	681b      	ldr	r3, [r3, #0]
 80215f6:	3320      	adds	r3, #32
 80215f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80215fc:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021600:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021604:	681b      	ldr	r3, [r3, #0]
 8021606:	f103 0420 	add.w	r4, r3, #32
 802160a:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 802160e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021612:	ea80 0502 	eor.w	r5, r0, r2
 8021616:	f8c7 5790 	str.w	r5, [r7, #1936]	; 0x790
 802161a:	404b      	eors	r3, r1
 802161c:	f8c7 3794 	str.w	r3, [r7, #1940]	; 0x794
 8021620:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 8021624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021628:	e9c4 2300 	strd	r2, r3, [r4]
 802162c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021630:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021634:	681b      	ldr	r3, [r3, #0]
 8021636:	3348      	adds	r3, #72	; 0x48
 8021638:	e9d3 0100 	ldrd	r0, r1, [r3]
 802163c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021640:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021644:	681b      	ldr	r3, [r3, #0]
 8021646:	f103 0448 	add.w	r4, r3, #72	; 0x48
 802164a:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 802164e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021652:	ea80 0502 	eor.w	r5, r0, r2
 8021656:	f8c7 5788 	str.w	r5, [r7, #1928]	; 0x788
 802165a:	404b      	eors	r3, r1
 802165c:	f8c7 378c 	str.w	r3, [r7, #1932]	; 0x78c
 8021660:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 8021664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021668:	e9c4 2300 	strd	r2, r3, [r4]
 802166c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021670:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021674:	681b      	ldr	r3, [r3, #0]
 8021676:	3370      	adds	r3, #112	; 0x70
 8021678:	e9d3 0100 	ldrd	r0, r1, [r3]
 802167c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021680:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021684:	681b      	ldr	r3, [r3, #0]
 8021686:	f103 0470 	add.w	r4, r3, #112	; 0x70
 802168a:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 802168e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021692:	ea80 0502 	eor.w	r5, r0, r2
 8021696:	f8c7 5780 	str.w	r5, [r7, #1920]	; 0x780
 802169a:	404b      	eors	r3, r1
 802169c:	f8c7 3784 	str.w	r3, [r7, #1924]	; 0x784
 80216a0:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 80216a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80216a8:	e9c4 2300 	strd	r2, r3, [r4]
 80216ac:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80216b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80216b4:	681b      	ldr	r3, [r3, #0]
 80216b6:	3398      	adds	r3, #152	; 0x98
 80216b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80216bc:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80216c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80216c4:	681b      	ldr	r3, [r3, #0]
 80216c6:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80216ca:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 80216ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80216d2:	ea80 0502 	eor.w	r5, r0, r2
 80216d6:	f8c7 5778 	str.w	r5, [r7, #1912]	; 0x778
 80216da:	404b      	eors	r3, r1
 80216dc:	f8c7 377c 	str.w	r3, [r7, #1916]	; 0x77c
 80216e0:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 80216e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80216e8:	e9c4 2300 	strd	r2, r3, [r4]
 80216ec:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80216f0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80216f4:	681b      	ldr	r3, [r3, #0]
 80216f6:	33c0      	adds	r3, #192	; 0xc0
 80216f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80216fc:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021700:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021704:	681b      	ldr	r3, [r3, #0]
 8021706:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
 802170a:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 802170e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021712:	ea80 0502 	eor.w	r5, r0, r2
 8021716:	f8c7 5770 	str.w	r5, [r7, #1904]	; 0x770
 802171a:	404b      	eors	r3, r1
 802171c:	f8c7 3774 	str.w	r3, [r7, #1908]	; 0x774
 8021720:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 8021724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021728:	e9c4 2300 	strd	r2, r3, [r4]
        ROW_MIX(n, s, b, t0, t1);
 802172c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021730:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021734:	681b      	ldr	r3, [r3, #0]
 8021736:	e9d3 0100 	ldrd	r0, r1, [r3]
 802173a:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802173e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021742:	e9c3 0100 	strd	r0, r1, [r3]
 8021746:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802174a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 802174e:	681b      	ldr	r3, [r3, #0]
 8021750:	3330      	adds	r3, #48	; 0x30
 8021752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021756:	0318      	lsls	r0, r3, #12
 8021758:	0d11      	lsrs	r1, r2, #20
 802175a:	4301      	orrs	r1, r0
 802175c:	f8c7 1768 	str.w	r1, [r7, #1896]	; 0x768
 8021760:	0311      	lsls	r1, r2, #12
 8021762:	0d1b      	lsrs	r3, r3, #20
 8021764:	430b      	orrs	r3, r1
 8021766:	f8c7 376c 	str.w	r3, [r7, #1900]	; 0x76c
 802176a:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802176e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021772:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 8021776:	e9d2 1200 	ldrd	r1, r2, [r2]
 802177a:	e9c3 1202 	strd	r1, r2, [r3, #8]
 802177e:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021782:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021786:	681b      	ldr	r3, [r3, #0]
 8021788:	3360      	adds	r3, #96	; 0x60
 802178a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802178e:	02d8      	lsls	r0, r3, #11
 8021790:	0d51      	lsrs	r1, r2, #21
 8021792:	4301      	orrs	r1, r0
 8021794:	f8c7 1760 	str.w	r1, [r7, #1888]	; 0x760
 8021798:	02d1      	lsls	r1, r2, #11
 802179a:	0d5b      	lsrs	r3, r3, #21
 802179c:	430b      	orrs	r3, r1
 802179e:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
 80217a2:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80217a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80217aa:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 80217ae:	e9d2 1200 	ldrd	r1, r2, [r2]
 80217b2:	e9c3 1204 	strd	r1, r2, [r3, #16]
 80217b6:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80217ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80217be:	681b      	ldr	r3, [r3, #0]
 80217c0:	3390      	adds	r3, #144	; 0x90
 80217c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80217c6:	0ad0      	lsrs	r0, r2, #11
 80217c8:	0559      	lsls	r1, r3, #21
 80217ca:	4301      	orrs	r1, r0
 80217cc:	f8c7 175c 	str.w	r1, [r7, #1884]	; 0x75c
 80217d0:	0ad9      	lsrs	r1, r3, #11
 80217d2:	0553      	lsls	r3, r2, #21
 80217d4:	430b      	orrs	r3, r1
 80217d6:	f8c7 3758 	str.w	r3, [r7, #1880]	; 0x758
 80217da:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80217de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80217e2:	f507 62eb 	add.w	r2, r7, #1880	; 0x758
 80217e6:	e9d2 1200 	ldrd	r1, r2, [r2]
 80217ea:	e9c3 1206 	strd	r1, r2, [r3, #24]
 80217ee:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80217f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80217f6:	681b      	ldr	r3, [r3, #0]
 80217f8:	33c0      	adds	r3, #192	; 0xc0
 80217fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80217fe:	0c90      	lsrs	r0, r2, #18
 8021800:	0399      	lsls	r1, r3, #14
 8021802:	4301      	orrs	r1, r0
 8021804:	f8c7 1754 	str.w	r1, [r7, #1876]	; 0x754
 8021808:	0c99      	lsrs	r1, r3, #18
 802180a:	0393      	lsls	r3, r2, #14
 802180c:	430b      	orrs	r3, r1
 802180e:	f8c7 3750 	str.w	r3, [r7, #1872]	; 0x750
 8021812:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021816:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802181a:	f507 62ea 	add.w	r2, r7, #1872	; 0x750
 802181e:	e9d2 1200 	ldrd	r1, r2, [r2]
 8021822:	e9c3 1208 	strd	r1, r2, [r3, #32]
 8021826:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802182a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802182e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8021832:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021836:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802183a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 802183e:	ea80 0402 	eor.w	r4, r0, r2
 8021842:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 8021846:	404b      	eors	r3, r1
 8021848:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 802184c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8021850:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 8021854:	e9c2 3400 	strd	r3, r4, [r2]
 8021858:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802185c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021860:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8021864:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802186c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8021870:	ea80 0402 	eor.w	r4, r0, r2
 8021874:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8021878:	404b      	eors	r3, r1
 802187a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 802187e:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8021882:	f607 12f8 	addw	r2, r7, #2552	; 0x9f8
 8021886:	e9c2 3400 	strd	r3, r4, [r2]
 802188a:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802188e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021892:	e9d3 4500 	ldrd	r4, r5, [r3]
 8021896:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802189a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802189e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80218a2:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 80218a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80218aa:	ea00 0602 	and.w	r6, r0, r2
 80218ae:	f8c7 6748 	str.w	r6, [r7, #1864]	; 0x748
 80218b2:	400b      	ands	r3, r1
 80218b4:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
 80218b8:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 80218bc:	e9d3 1200 	ldrd	r1, r2, [r3]
 80218c0:	460b      	mov	r3, r1
 80218c2:	4063      	eors	r3, r4
 80218c4:	f8c7 3740 	str.w	r3, [r7, #1856]	; 0x740
 80218c8:	4613      	mov	r3, r2
 80218ca:	406b      	eors	r3, r5
 80218cc:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
 80218d0:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 80218d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80218d8:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 80218dc:	e9c2 3400 	strd	r3, r4, [r2]
 80218e0:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80218e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80218e8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80218ec:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80218f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80218f4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80218f8:	ea40 0402 	orr.w	r4, r0, r2
 80218fc:	f8c7 4738 	str.w	r4, [r7, #1848]	; 0x738
 8021900:	430b      	orrs	r3, r1
 8021902:	f8c7 373c 	str.w	r3, [r7, #1852]	; 0x73c
 8021906:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 802190a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802190e:	f507 61e7 	add.w	r1, r7, #1848	; 0x738
 8021912:	e9d1 4500 	ldrd	r4, r5, [r1]
 8021916:	4621      	mov	r1, r4
 8021918:	4051      	eors	r1, r2
 802191a:	f8c7 1730 	str.w	r1, [r7, #1840]	; 0x730
 802191e:	4629      	mov	r1, r5
 8021920:	404b      	eors	r3, r1
 8021922:	f8c7 3734 	str.w	r3, [r7, #1844]	; 0x734
 8021926:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 802192a:	e9d3 3400 	ldrd	r3, r4, [r3]
 802192e:	f607 1238 	addw	r2, r7, #2360	; 0x938
 8021932:	e9c2 3400 	strd	r3, r4, [r2]
 8021936:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802193a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802193e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8021942:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021946:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802194a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 802194e:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8021952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021956:	ea00 0602 	and.w	r6, r0, r2
 802195a:	f8c7 6728 	str.w	r6, [r7, #1832]	; 0x728
 802195e:	400b      	ands	r3, r1
 8021960:	f8c7 372c 	str.w	r3, [r7, #1836]	; 0x72c
 8021964:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8021968:	e9d3 1200 	ldrd	r1, r2, [r3]
 802196c:	460b      	mov	r3, r1
 802196e:	4063      	eors	r3, r4
 8021970:	f8c7 3720 	str.w	r3, [r7, #1824]	; 0x720
 8021974:	4613      	mov	r3, r2
 8021976:	406b      	eors	r3, r5
 8021978:	f8c7 3724 	str.w	r3, [r7, #1828]	; 0x724
 802197c:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8021980:	e9d3 3400 	ldrd	r3, r4, [r3]
 8021984:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8021988:	e9c2 3400 	strd	r3, r4, [r2]
 802198c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021990:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021994:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8021998:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802199c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80219a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80219a4:	ea40 0402 	orr.w	r4, r0, r2
 80219a8:	f8c7 4718 	str.w	r4, [r7, #1816]	; 0x718
 80219ac:	430b      	orrs	r3, r1
 80219ae:	f8c7 371c 	str.w	r3, [r7, #1820]	; 0x71c
 80219b2:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 80219b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80219ba:	f507 61e3 	add.w	r1, r7, #1816	; 0x718
 80219be:	e9d1 4500 	ldrd	r4, r5, [r1]
 80219c2:	4621      	mov	r1, r4
 80219c4:	4051      	eors	r1, r2
 80219c6:	f8c7 1710 	str.w	r1, [r7, #1808]	; 0x710
 80219ca:	4629      	mov	r1, r5
 80219cc:	404b      	eors	r3, r1
 80219ce:	f8c7 3714 	str.w	r3, [r7, #1812]	; 0x714
 80219d2:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 80219d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80219da:	f607 1248 	addw	r2, r7, #2376	; 0x948
 80219de:	e9c2 3400 	strd	r3, r4, [r2]
 80219e2:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80219e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80219ea:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80219ee:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80219f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80219f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80219fa:	43d4      	mvns	r4, r2
 80219fc:	f8c7 4708 	str.w	r4, [r7, #1800]	; 0x708
 8021a00:	43db      	mvns	r3, r3
 8021a02:	f8c7 370c 	str.w	r3, [r7, #1804]	; 0x70c
 8021a06:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021a0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021a0e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8021a12:	f507 64e1 	add.w	r4, r7, #1800	; 0x708
 8021a16:	e9d4 5600 	ldrd	r5, r6, [r4]
 8021a1a:	462c      	mov	r4, r5
 8021a1c:	4014      	ands	r4, r2
 8021a1e:	f8c7 4700 	str.w	r4, [r7, #1792]	; 0x700
 8021a22:	4634      	mov	r4, r6
 8021a24:	4023      	ands	r3, r4
 8021a26:	f8c7 3704 	str.w	r3, [r7, #1796]	; 0x704
 8021a2a:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 8021a2e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8021a32:	4623      	mov	r3, r4
 8021a34:	4043      	eors	r3, r0
 8021a36:	f8c7 36f8 	str.w	r3, [r7, #1784]	; 0x6f8
 8021a3a:	462b      	mov	r3, r5
 8021a3c:	404b      	eors	r3, r1
 8021a3e:	f8c7 36fc 	str.w	r3, [r7, #1788]	; 0x6fc
 8021a42:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8021a46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8021a4a:	f507 6215 	add.w	r2, r7, #2384	; 0x950
 8021a4e:	e9c2 3400 	strd	r3, r4, [r2]
 8021a52:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021a56:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021a5a:	681b      	ldr	r3, [r3, #0]
 8021a5c:	3318      	adds	r3, #24
 8021a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a62:	0910      	lsrs	r0, r2, #4
 8021a64:	0719      	lsls	r1, r3, #28
 8021a66:	4301      	orrs	r1, r0
 8021a68:	f8c7 16f4 	str.w	r1, [r7, #1780]	; 0x6f4
 8021a6c:	0919      	lsrs	r1, r3, #4
 8021a6e:	0713      	lsls	r3, r2, #28
 8021a70:	430b      	orrs	r3, r1
 8021a72:	f8c7 36f0 	str.w	r3, [r7, #1776]	; 0x6f0
 8021a76:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021a7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021a7e:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8021a82:	e9d2 1200 	ldrd	r1, r2, [r2]
 8021a86:	e9c3 1200 	strd	r1, r2, [r3]
 8021a8a:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021a8e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021a92:	681b      	ldr	r3, [r3, #0]
 8021a94:	3348      	adds	r3, #72	; 0x48
 8021a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a9a:	0b10      	lsrs	r0, r2, #12
 8021a9c:	0519      	lsls	r1, r3, #20
 8021a9e:	4301      	orrs	r1, r0
 8021aa0:	f8c7 16ec 	str.w	r1, [r7, #1772]	; 0x6ec
 8021aa4:	0b19      	lsrs	r1, r3, #12
 8021aa6:	0513      	lsls	r3, r2, #20
 8021aa8:	430b      	orrs	r3, r1
 8021aaa:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
 8021aae:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021ab2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021ab6:	f507 62dd 	add.w	r2, r7, #1768	; 0x6e8
 8021aba:	e9d2 1200 	ldrd	r1, r2, [r2]
 8021abe:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8021ac2:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021ac6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021aca:	681b      	ldr	r3, [r3, #0]
 8021acc:	3350      	adds	r3, #80	; 0x50
 8021ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021ad2:	0f50      	lsrs	r0, r2, #29
 8021ad4:	00d9      	lsls	r1, r3, #3
 8021ad6:	4301      	orrs	r1, r0
 8021ad8:	f8c7 16e4 	str.w	r1, [r7, #1764]	; 0x6e4
 8021adc:	0f59      	lsrs	r1, r3, #29
 8021ade:	00d3      	lsls	r3, r2, #3
 8021ae0:	430b      	orrs	r3, r1
 8021ae2:	f8c7 36e0 	str.w	r3, [r7, #1760]	; 0x6e0
 8021ae6:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021aea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021aee:	f507 62dc 	add.w	r2, r7, #1760	; 0x6e0
 8021af2:	e9d2 1200 	ldrd	r1, r2, [r2]
 8021af6:	e9c3 1204 	strd	r1, r2, [r3, #16]
 8021afa:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021afe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021b02:	681b      	ldr	r3, [r3, #0]
 8021b04:	3380      	adds	r3, #128	; 0x80
 8021b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b0a:	0358      	lsls	r0, r3, #13
 8021b0c:	0cd1      	lsrs	r1, r2, #19
 8021b0e:	4301      	orrs	r1, r0
 8021b10:	f8c7 16d8 	str.w	r1, [r7, #1752]	; 0x6d8
 8021b14:	0351      	lsls	r1, r2, #13
 8021b16:	0cdb      	lsrs	r3, r3, #19
 8021b18:	430b      	orrs	r3, r1
 8021b1a:	f8c7 36dc 	str.w	r3, [r7, #1756]	; 0x6dc
 8021b1e:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021b22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021b26:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 8021b2a:	e9d2 1200 	ldrd	r1, r2, [r2]
 8021b2e:	e9c3 1206 	strd	r1, r2, [r3, #24]
 8021b32:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021b36:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021b3a:	681b      	ldr	r3, [r3, #0]
 8021b3c:	33b0      	adds	r3, #176	; 0xb0
 8021b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b42:	0758      	lsls	r0, r3, #29
 8021b44:	08d1      	lsrs	r1, r2, #3
 8021b46:	4301      	orrs	r1, r0
 8021b48:	f8c7 16d0 	str.w	r1, [r7, #1744]	; 0x6d0
 8021b4c:	0751      	lsls	r1, r2, #29
 8021b4e:	08db      	lsrs	r3, r3, #3
 8021b50:	430b      	orrs	r3, r1
 8021b52:	f8c7 36d4 	str.w	r3, [r7, #1748]	; 0x6d4
 8021b56:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021b5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021b5e:	f507 62da 	add.w	r2, r7, #1744	; 0x6d0
 8021b62:	e9d2 1200 	ldrd	r1, r2, [r2]
 8021b66:	e9c3 1208 	strd	r1, r2, [r3, #32]
 8021b6a:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021b6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021b72:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8021b76:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021b7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021b7e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8021b82:	ea80 0402 	eor.w	r4, r0, r2
 8021b86:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8021b8a:	404b      	eors	r3, r1
 8021b8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8021b90:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8021b94:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 8021b98:	e9c2 3400 	strd	r3, r4, [r2]
 8021b9c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021ba0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021ba4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8021ba8:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021bac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021bb0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8021bb4:	ea80 0402 	eor.w	r4, r0, r2
 8021bb8:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8021bbc:	404b      	eors	r3, r1
 8021bbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8021bc2:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8021bc6:	f607 12f8 	addw	r2, r7, #2552	; 0x9f8
 8021bca:	e9c2 3400 	strd	r3, r4, [r2]
 8021bce:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021bd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021bd6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8021bda:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021bde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021be2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8021be6:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8021bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021bee:	ea00 0602 	and.w	r6, r0, r2
 8021bf2:	f8c7 66c8 	str.w	r6, [r7, #1736]	; 0x6c8
 8021bf6:	400b      	ands	r3, r1
 8021bf8:	f8c7 36cc 	str.w	r3, [r7, #1740]	; 0x6cc
 8021bfc:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 8021c00:	e9d3 1200 	ldrd	r1, r2, [r3]
 8021c04:	460b      	mov	r3, r1
 8021c06:	4063      	eors	r3, r4
 8021c08:	f8c7 36c0 	str.w	r3, [r7, #1728]	; 0x6c0
 8021c0c:	4613      	mov	r3, r2
 8021c0e:	406b      	eors	r3, r5
 8021c10:	f8c7 36c4 	str.w	r3, [r7, #1732]	; 0x6c4
 8021c14:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 8021c18:	e9d3 3400 	ldrd	r3, r4, [r3]
 8021c1c:	f607 1258 	addw	r2, r7, #2392	; 0x958
 8021c20:	e9c2 3400 	strd	r3, r4, [r2]
 8021c24:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021c28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021c2c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8021c30:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021c34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021c38:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8021c3c:	ea40 0402 	orr.w	r4, r0, r2
 8021c40:	f8c7 46b8 	str.w	r4, [r7, #1720]	; 0x6b8
 8021c44:	430b      	orrs	r3, r1
 8021c46:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc
 8021c4a:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8021c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021c52:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 8021c56:	e9d1 4500 	ldrd	r4, r5, [r1]
 8021c5a:	4621      	mov	r1, r4
 8021c5c:	4051      	eors	r1, r2
 8021c5e:	f8c7 16b0 	str.w	r1, [r7, #1712]	; 0x6b0
 8021c62:	4629      	mov	r1, r5
 8021c64:	404b      	eors	r3, r1
 8021c66:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4
 8021c6a:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8021c6e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8021c72:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 8021c76:	e9c2 3400 	strd	r3, r4, [r2]
 8021c7a:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021c7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021c82:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8021c86:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021c8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021c8e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8021c92:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8021c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021c9a:	ea00 0602 	and.w	r6, r0, r2
 8021c9e:	f8c7 66a8 	str.w	r6, [r7, #1704]	; 0x6a8
 8021ca2:	400b      	ands	r3, r1
 8021ca4:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
 8021ca8:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8021cac:	e9d3 1200 	ldrd	r1, r2, [r3]
 8021cb0:	460b      	mov	r3, r1
 8021cb2:	4063      	eors	r3, r4
 8021cb4:	f8c7 36a0 	str.w	r3, [r7, #1696]	; 0x6a0
 8021cb8:	4613      	mov	r3, r2
 8021cba:	406b      	eors	r3, r5
 8021cbc:	f8c7 36a4 	str.w	r3, [r7, #1700]	; 0x6a4
 8021cc0:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8021cc4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8021cc8:	f607 1268 	addw	r2, r7, #2408	; 0x968
 8021ccc:	e9c2 3400 	strd	r3, r4, [r2]
 8021cd0:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021cd8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8021cdc:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021ce0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021ce8:	ea40 0402 	orr.w	r4, r0, r2
 8021cec:	f8c7 4698 	str.w	r4, [r7, #1688]	; 0x698
 8021cf0:	430b      	orrs	r3, r1
 8021cf2:	f8c7 369c 	str.w	r3, [r7, #1692]	; 0x69c
 8021cf6:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8021cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021cfe:	f507 61d3 	add.w	r1, r7, #1688	; 0x698
 8021d02:	e9d1 4500 	ldrd	r4, r5, [r1]
 8021d06:	4621      	mov	r1, r4
 8021d08:	4051      	eors	r1, r2
 8021d0a:	f8c7 1690 	str.w	r1, [r7, #1680]	; 0x690
 8021d0e:	4629      	mov	r1, r5
 8021d10:	404b      	eors	r3, r1
 8021d12:	f8c7 3694 	str.w	r3, [r7, #1684]	; 0x694
 8021d16:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8021d1a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8021d1e:	f507 6217 	add.w	r2, r7, #2416	; 0x970
 8021d22:	e9c2 3400 	strd	r3, r4, [r2]
 8021d26:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021d2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021d2e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8021d32:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021d36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d3e:	43d4      	mvns	r4, r2
 8021d40:	f8c7 4688 	str.w	r4, [r7, #1672]	; 0x688
 8021d44:	43db      	mvns	r3, r3
 8021d46:	f8c7 368c 	str.w	r3, [r7, #1676]	; 0x68c
 8021d4a:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021d4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021d52:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8021d56:	f507 64d1 	add.w	r4, r7, #1672	; 0x688
 8021d5a:	e9d4 5600 	ldrd	r5, r6, [r4]
 8021d5e:	462c      	mov	r4, r5
 8021d60:	4014      	ands	r4, r2
 8021d62:	f8c7 4680 	str.w	r4, [r7, #1664]	; 0x680
 8021d66:	4634      	mov	r4, r6
 8021d68:	4023      	ands	r3, r4
 8021d6a:	f8c7 3684 	str.w	r3, [r7, #1668]	; 0x684
 8021d6e:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 8021d72:	e9d3 4500 	ldrd	r4, r5, [r3]
 8021d76:	4623      	mov	r3, r4
 8021d78:	4043      	eors	r3, r0
 8021d7a:	f8c7 3678 	str.w	r3, [r7, #1656]	; 0x678
 8021d7e:	462b      	mov	r3, r5
 8021d80:	404b      	eors	r3, r1
 8021d82:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 8021d86:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8021d8a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8021d8e:	f607 1278 	addw	r2, r7, #2424	; 0x978
 8021d92:	e9c2 3400 	strd	r3, r4, [r2]
 8021d96:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021d9a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021d9e:	681b      	ldr	r3, [r3, #0]
 8021da0:	3308      	adds	r3, #8
 8021da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021da6:	0fd0      	lsrs	r0, r2, #31
 8021da8:	0059      	lsls	r1, r3, #1
 8021daa:	4301      	orrs	r1, r0
 8021dac:	f8c7 1674 	str.w	r1, [r7, #1652]	; 0x674
 8021db0:	0fd9      	lsrs	r1, r3, #31
 8021db2:	0053      	lsls	r3, r2, #1
 8021db4:	430b      	orrs	r3, r1
 8021db6:	f8c7 3670 	str.w	r3, [r7, #1648]	; 0x670
 8021dba:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021dbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021dc2:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8021dc6:	e9d2 1200 	ldrd	r1, r2, [r2]
 8021dca:	e9c3 1200 	strd	r1, r2, [r3]
 8021dce:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021dd2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021dd6:	681b      	ldr	r3, [r3, #0]
 8021dd8:	3338      	adds	r3, #56	; 0x38
 8021dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021dde:	0e90      	lsrs	r0, r2, #26
 8021de0:	0199      	lsls	r1, r3, #6
 8021de2:	4301      	orrs	r1, r0
 8021de4:	f8c7 166c 	str.w	r1, [r7, #1644]	; 0x66c
 8021de8:	0e99      	lsrs	r1, r3, #26
 8021dea:	0193      	lsls	r3, r2, #6
 8021dec:	430b      	orrs	r3, r1
 8021dee:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
 8021df2:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021df6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021dfa:	f507 62cd 	add.w	r2, r7, #1640	; 0x668
 8021dfe:	e9d2 1200 	ldrd	r1, r2, [r2]
 8021e02:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8021e06:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021e0a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021e0e:	681b      	ldr	r3, [r3, #0]
 8021e10:	3368      	adds	r3, #104	; 0x68
 8021e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e16:	09d0      	lsrs	r0, r2, #7
 8021e18:	0659      	lsls	r1, r3, #25
 8021e1a:	4301      	orrs	r1, r0
 8021e1c:	f8c7 1664 	str.w	r1, [r7, #1636]	; 0x664
 8021e20:	09d9      	lsrs	r1, r3, #7
 8021e22:	0653      	lsls	r3, r2, #25
 8021e24:	430b      	orrs	r3, r1
 8021e26:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660
 8021e2a:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021e2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021e32:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 8021e36:	e9d2 1200 	ldrd	r1, r2, [r2]
 8021e3a:	e9c3 1204 	strd	r1, r2, [r3, #16]
 8021e3e:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021e42:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021e46:	681b      	ldr	r3, [r3, #0]
 8021e48:	3398      	adds	r3, #152	; 0x98
 8021e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e4e:	0e10      	lsrs	r0, r2, #24
 8021e50:	0219      	lsls	r1, r3, #8
 8021e52:	4301      	orrs	r1, r0
 8021e54:	f8c7 165c 	str.w	r1, [r7, #1628]	; 0x65c
 8021e58:	0e19      	lsrs	r1, r3, #24
 8021e5a:	0213      	lsls	r3, r2, #8
 8021e5c:	430b      	orrs	r3, r1
 8021e5e:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 8021e62:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021e66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021e6a:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 8021e6e:	e9d2 1200 	ldrd	r1, r2, [r2]
 8021e72:	e9c3 1206 	strd	r1, r2, [r3, #24]
 8021e76:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021e7a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021e7e:	681b      	ldr	r3, [r3, #0]
 8021e80:	33a0      	adds	r3, #160	; 0xa0
 8021e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e86:	0b90      	lsrs	r0, r2, #14
 8021e88:	0499      	lsls	r1, r3, #18
 8021e8a:	4301      	orrs	r1, r0
 8021e8c:	f8c7 1654 	str.w	r1, [r7, #1620]	; 0x654
 8021e90:	0b99      	lsrs	r1, r3, #14
 8021e92:	0493      	lsls	r3, r2, #18
 8021e94:	430b      	orrs	r3, r1
 8021e96:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650
 8021e9a:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021e9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021ea2:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8021ea6:	e9d2 1200 	ldrd	r1, r2, [r2]
 8021eaa:	e9c3 1208 	strd	r1, r2, [r3, #32]
 8021eae:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021eb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021eb6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8021eba:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021ebe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021ec2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8021ec6:	ea80 0402 	eor.w	r4, r0, r2
 8021eca:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8021ece:	404b      	eors	r3, r1
 8021ed0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8021ed4:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8021ed8:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 8021edc:	e9c2 3400 	strd	r3, r4, [r2]
 8021ee0:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021ee4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021ee8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8021eec:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021ef4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8021ef8:	ea80 0402 	eor.w	r4, r0, r2
 8021efc:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8021f00:	404b      	eors	r3, r1
 8021f02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8021f06:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8021f0a:	f607 12f8 	addw	r2, r7, #2552	; 0x9f8
 8021f0e:	e9c2 3400 	strd	r3, r4, [r2]
 8021f12:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021f16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021f1a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8021f1e:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021f22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021f26:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8021f2a:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8021f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f32:	ea00 0602 	and.w	r6, r0, r2
 8021f36:	f8c7 6648 	str.w	r6, [r7, #1608]	; 0x648
 8021f3a:	400b      	ands	r3, r1
 8021f3c:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
 8021f40:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 8021f44:	e9d3 1200 	ldrd	r1, r2, [r3]
 8021f48:	460b      	mov	r3, r1
 8021f4a:	4063      	eors	r3, r4
 8021f4c:	f8c7 3640 	str.w	r3, [r7, #1600]	; 0x640
 8021f50:	4613      	mov	r3, r2
 8021f52:	406b      	eors	r3, r5
 8021f54:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
 8021f58:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8021f5c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8021f60:	f507 6218 	add.w	r2, r7, #2432	; 0x980
 8021f64:	e9c2 3400 	strd	r3, r4, [r2]
 8021f68:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021f6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021f70:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8021f74:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021f78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021f7c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8021f80:	ea40 0402 	orr.w	r4, r0, r2
 8021f84:	f8c7 4638 	str.w	r4, [r7, #1592]	; 0x638
 8021f88:	430b      	orrs	r3, r1
 8021f8a:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
 8021f8e:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8021f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f96:	f507 61c7 	add.w	r1, r7, #1592	; 0x638
 8021f9a:	e9d1 4500 	ldrd	r4, r5, [r1]
 8021f9e:	4621      	mov	r1, r4
 8021fa0:	4051      	eors	r1, r2
 8021fa2:	f8c7 1630 	str.w	r1, [r7, #1584]	; 0x630
 8021fa6:	4629      	mov	r1, r5
 8021fa8:	404b      	eors	r3, r1
 8021faa:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
 8021fae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8021fb2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8021fb6:	f607 1288 	addw	r2, r7, #2440	; 0x988
 8021fba:	e9c2 3400 	strd	r3, r4, [r2]
 8021fbe:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021fc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021fc6:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8021fca:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8021fce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021fd2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8021fd6:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8021fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021fde:	ea00 0602 	and.w	r6, r0, r2
 8021fe2:	f8c7 6628 	str.w	r6, [r7, #1576]	; 0x628
 8021fe6:	400b      	ands	r3, r1
 8021fe8:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 8021fec:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8021ff0:	e9d3 1200 	ldrd	r1, r2, [r3]
 8021ff4:	460b      	mov	r3, r1
 8021ff6:	4063      	eors	r3, r4
 8021ff8:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 8021ffc:	4613      	mov	r3, r2
 8021ffe:	406b      	eors	r3, r5
 8022000:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
 8022004:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8022008:	e9d3 3400 	ldrd	r3, r4, [r3]
 802200c:	f507 6219 	add.w	r2, r7, #2448	; 0x990
 8022010:	e9c2 3400 	strd	r3, r4, [r2]
 8022014:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022018:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802201c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8022020:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8022028:	e9d3 2300 	ldrd	r2, r3, [r3]
 802202c:	ea40 0402 	orr.w	r4, r0, r2
 8022030:	f8c7 4618 	str.w	r4, [r7, #1560]	; 0x618
 8022034:	430b      	orrs	r3, r1
 8022036:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 802203a:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 802203e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022042:	f507 61c3 	add.w	r1, r7, #1560	; 0x618
 8022046:	e9d1 4500 	ldrd	r4, r5, [r1]
 802204a:	4621      	mov	r1, r4
 802204c:	4051      	eors	r1, r2
 802204e:	f8c7 1610 	str.w	r1, [r7, #1552]	; 0x610
 8022052:	4629      	mov	r1, r5
 8022054:	404b      	eors	r3, r1
 8022056:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 802205a:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 802205e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8022062:	f607 1298 	addw	r2, r7, #2456	; 0x998
 8022066:	e9c2 3400 	strd	r3, r4, [r2]
 802206a:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802206e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8022072:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8022076:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802207a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802207e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022082:	43d4      	mvns	r4, r2
 8022084:	f8c7 4608 	str.w	r4, [r7, #1544]	; 0x608
 8022088:	43db      	mvns	r3, r3
 802208a:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 802208e:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8022096:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 802209a:	f507 64c1 	add.w	r4, r7, #1544	; 0x608
 802209e:	e9d4 5600 	ldrd	r5, r6, [r4]
 80220a2:	462c      	mov	r4, r5
 80220a4:	4014      	ands	r4, r2
 80220a6:	f8c7 4600 	str.w	r4, [r7, #1536]	; 0x600
 80220aa:	4634      	mov	r4, r6
 80220ac:	4023      	ands	r3, r4
 80220ae:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 80220b2:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80220b6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80220ba:	4623      	mov	r3, r4
 80220bc:	4043      	eors	r3, r0
 80220be:	f8c7 35f8 	str.w	r3, [r7, #1528]	; 0x5f8
 80220c2:	462b      	mov	r3, r5
 80220c4:	404b      	eors	r3, r1
 80220c6:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 80220ca:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 80220ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80220d2:	f507 621a 	add.w	r2, r7, #2464	; 0x9a0
 80220d6:	e9c2 3400 	strd	r3, r4, [r2]
 80220da:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80220de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80220e2:	681b      	ldr	r3, [r3, #0]
 80220e4:	3320      	adds	r3, #32
 80220e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220ea:	0950      	lsrs	r0, r2, #5
 80220ec:	06d9      	lsls	r1, r3, #27
 80220ee:	4301      	orrs	r1, r0
 80220f0:	f8c7 15f4 	str.w	r1, [r7, #1524]	; 0x5f4
 80220f4:	0959      	lsrs	r1, r3, #5
 80220f6:	06d3      	lsls	r3, r2, #27
 80220f8:	430b      	orrs	r3, r1
 80220fa:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0
 80220fe:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8022106:	f507 62be 	add.w	r2, r7, #1520	; 0x5f0
 802210a:	e9d2 1200 	ldrd	r1, r2, [r2]
 802210e:	e9c3 1200 	strd	r1, r2, [r3]
 8022112:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022116:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 802211a:	681b      	ldr	r3, [r3, #0]
 802211c:	3328      	adds	r3, #40	; 0x28
 802211e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022122:	0118      	lsls	r0, r3, #4
 8022124:	0f11      	lsrs	r1, r2, #28
 8022126:	4301      	orrs	r1, r0
 8022128:	f8c7 15e8 	str.w	r1, [r7, #1512]	; 0x5e8
 802212c:	0111      	lsls	r1, r2, #4
 802212e:	0f1b      	lsrs	r3, r3, #28
 8022130:	430b      	orrs	r3, r1
 8022132:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
 8022136:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802213a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802213e:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 8022142:	e9d2 1200 	ldrd	r1, r2, [r2]
 8022146:	e9c3 1202 	strd	r1, r2, [r3, #8]
 802214a:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802214e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8022152:	681b      	ldr	r3, [r3, #0]
 8022154:	3358      	adds	r3, #88	; 0x58
 8022156:	e9d3 2300 	ldrd	r2, r3, [r3]
 802215a:	0d90      	lsrs	r0, r2, #22
 802215c:	0299      	lsls	r1, r3, #10
 802215e:	4301      	orrs	r1, r0
 8022160:	f8c7 15e4 	str.w	r1, [r7, #1508]	; 0x5e4
 8022164:	0d99      	lsrs	r1, r3, #22
 8022166:	0293      	lsls	r3, r2, #10
 8022168:	430b      	orrs	r3, r1
 802216a:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 802216e:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8022176:	f507 62bc 	add.w	r2, r7, #1504	; 0x5e0
 802217a:	e9d2 1200 	ldrd	r1, r2, [r2]
 802217e:	e9c3 1204 	strd	r1, r2, [r3, #16]
 8022182:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022186:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 802218a:	681b      	ldr	r3, [r3, #0]
 802218c:	3388      	adds	r3, #136	; 0x88
 802218e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022192:	0c50      	lsrs	r0, r2, #17
 8022194:	03d9      	lsls	r1, r3, #15
 8022196:	4301      	orrs	r1, r0
 8022198:	f8c7 15dc 	str.w	r1, [r7, #1500]	; 0x5dc
 802219c:	0c59      	lsrs	r1, r3, #17
 802219e:	03d3      	lsls	r3, r2, #15
 80221a0:	430b      	orrs	r3, r1
 80221a2:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
 80221a6:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80221aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80221ae:	f507 62bb 	add.w	r2, r7, #1496	; 0x5d8
 80221b2:	e9d2 1200 	ldrd	r1, r2, [r2]
 80221b6:	e9c3 1206 	strd	r1, r2, [r3, #24]
 80221ba:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80221be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80221c2:	681b      	ldr	r3, [r3, #0]
 80221c4:	33b8      	adds	r3, #184	; 0xb8
 80221c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221ca:	0618      	lsls	r0, r3, #24
 80221cc:	0a11      	lsrs	r1, r2, #8
 80221ce:	4301      	orrs	r1, r0
 80221d0:	f8c7 15d0 	str.w	r1, [r7, #1488]	; 0x5d0
 80221d4:	0611      	lsls	r1, r2, #24
 80221d6:	0a1b      	lsrs	r3, r3, #8
 80221d8:	430b      	orrs	r3, r1
 80221da:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 80221de:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80221e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80221e6:	f507 62ba 	add.w	r2, r7, #1488	; 0x5d0
 80221ea:	e9d2 1200 	ldrd	r1, r2, [r2]
 80221ee:	e9c3 1208 	strd	r1, r2, [r3, #32]
 80221f2:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80221f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80221fa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80221fe:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022202:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8022206:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 802220a:	ea80 0402 	eor.w	r4, r0, r2
 802220e:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8022212:	404b      	eors	r3, r1
 8022214:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8022218:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 802221c:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 8022220:	e9c2 3400 	strd	r3, r4, [r2]
 8022224:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022228:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802222c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8022230:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022234:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8022238:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802223c:	ea80 0402 	eor.w	r4, r0, r2
 8022240:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8022244:	404b      	eors	r3, r1
 8022246:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 802224a:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 802224e:	f607 12f8 	addw	r2, r7, #2552	; 0x9f8
 8022252:	e9c2 3400 	strd	r3, r4, [r2]
 8022256:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802225a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802225e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8022262:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022266:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802226a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 802226e:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8022272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022276:	ea00 0602 	and.w	r6, r0, r2
 802227a:	f8c7 65c8 	str.w	r6, [r7, #1480]	; 0x5c8
 802227e:	400b      	ands	r3, r1
 8022280:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 8022284:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 8022288:	e9d3 1200 	ldrd	r1, r2, [r3]
 802228c:	460b      	mov	r3, r1
 802228e:	4063      	eors	r3, r4
 8022290:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
 8022294:	4613      	mov	r3, r2
 8022296:	406b      	eors	r3, r5
 8022298:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 802229c:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 80222a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80222a4:	f607 12a8 	addw	r2, r7, #2472	; 0x9a8
 80222a8:	e9c2 3400 	strd	r3, r4, [r2]
 80222ac:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80222b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80222b4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80222b8:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80222bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80222c0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80222c4:	ea40 0402 	orr.w	r4, r0, r2
 80222c8:	f8c7 45b8 	str.w	r4, [r7, #1464]	; 0x5b8
 80222cc:	430b      	orrs	r3, r1
 80222ce:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 80222d2:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 80222d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80222da:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 80222de:	e9d1 4500 	ldrd	r4, r5, [r1]
 80222e2:	4621      	mov	r1, r4
 80222e4:	4051      	eors	r1, r2
 80222e6:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 80222ea:	4629      	mov	r1, r5
 80222ec:	404b      	eors	r3, r1
 80222ee:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 80222f2:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 80222f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80222fa:	f507 621b 	add.w	r2, r7, #2480	; 0x9b0
 80222fe:	e9c2 3400 	strd	r3, r4, [r2]
 8022302:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802230a:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 802230e:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022312:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8022316:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 802231a:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 802231e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022322:	ea00 0602 	and.w	r6, r0, r2
 8022326:	f8c7 65a8 	str.w	r6, [r7, #1448]	; 0x5a8
 802232a:	400b      	ands	r3, r1
 802232c:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 8022330:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8022334:	e9d3 1200 	ldrd	r1, r2, [r3]
 8022338:	460b      	mov	r3, r1
 802233a:	4063      	eors	r3, r4
 802233c:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 8022340:	4613      	mov	r3, r2
 8022342:	406b      	eors	r3, r5
 8022344:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 8022348:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 802234c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8022350:	f607 12b8 	addw	r2, r7, #2488	; 0x9b8
 8022354:	e9c2 3400 	strd	r3, r4, [r2]
 8022358:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802235c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8022360:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8022364:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022368:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022370:	ea40 0402 	orr.w	r4, r0, r2
 8022374:	f8c7 4598 	str.w	r4, [r7, #1432]	; 0x598
 8022378:	430b      	orrs	r3, r1
 802237a:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 802237e:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8022382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022386:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 802238a:	e9d1 4500 	ldrd	r4, r5, [r1]
 802238e:	4621      	mov	r1, r4
 8022390:	4051      	eors	r1, r2
 8022392:	f8c7 1590 	str.w	r1, [r7, #1424]	; 0x590
 8022396:	4629      	mov	r1, r5
 8022398:	404b      	eors	r3, r1
 802239a:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 802239e:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 80223a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80223a6:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 80223aa:	e9c2 3400 	strd	r3, r4, [r2]
 80223ae:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80223b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80223b6:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80223ba:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80223be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80223c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80223c6:	43d4      	mvns	r4, r2
 80223c8:	f8c7 4588 	str.w	r4, [r7, #1416]	; 0x588
 80223cc:	43db      	mvns	r3, r3
 80223ce:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 80223d2:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80223d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80223da:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80223de:	f507 64b1 	add.w	r4, r7, #1416	; 0x588
 80223e2:	e9d4 5600 	ldrd	r5, r6, [r4]
 80223e6:	462c      	mov	r4, r5
 80223e8:	4014      	ands	r4, r2
 80223ea:	f8c7 4580 	str.w	r4, [r7, #1408]	; 0x580
 80223ee:	4634      	mov	r4, r6
 80223f0:	4023      	ands	r3, r4
 80223f2:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 80223f6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80223fa:	e9d3 4500 	ldrd	r4, r5, [r3]
 80223fe:	4623      	mov	r3, r4
 8022400:	4043      	eors	r3, r0
 8022402:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8022406:	462b      	mov	r3, r5
 8022408:	404b      	eors	r3, r1
 802240a:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 802240e:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 8022412:	e9d3 3400 	ldrd	r3, r4, [r3]
 8022416:	f607 12c8 	addw	r2, r7, #2504	; 0x9c8
 802241a:	e9c2 3400 	strd	r3, r4, [r2]
 802241e:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022422:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8022426:	681b      	ldr	r3, [r3, #0]
 8022428:	3310      	adds	r3, #16
 802242a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802242e:	0798      	lsls	r0, r3, #30
 8022430:	0891      	lsrs	r1, r2, #2
 8022432:	4301      	orrs	r1, r0
 8022434:	f8c7 1570 	str.w	r1, [r7, #1392]	; 0x570
 8022438:	0791      	lsls	r1, r2, #30
 802243a:	089b      	lsrs	r3, r3, #2
 802243c:	430b      	orrs	r3, r1
 802243e:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 8022442:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022446:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802244a:	f507 62ae 	add.w	r2, r7, #1392	; 0x570
 802244e:	e9d2 1200 	ldrd	r1, r2, [r2]
 8022452:	e9c3 1200 	strd	r1, r2, [r3]
 8022456:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802245a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 802245e:	681b      	ldr	r3, [r3, #0]
 8022460:	3340      	adds	r3, #64	; 0x40
 8022462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022466:	05d8      	lsls	r0, r3, #23
 8022468:	0a51      	lsrs	r1, r2, #9
 802246a:	4301      	orrs	r1, r0
 802246c:	f8c7 1568 	str.w	r1, [r7, #1384]	; 0x568
 8022470:	05d1      	lsls	r1, r2, #23
 8022472:	0a5b      	lsrs	r3, r3, #9
 8022474:	430b      	orrs	r3, r1
 8022476:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 802247a:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802247e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8022482:	f507 62ad 	add.w	r2, r7, #1384	; 0x568
 8022486:	e9d2 1200 	ldrd	r1, r2, [r2]
 802248a:	e9c3 1202 	strd	r1, r2, [r3, #8]
 802248e:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022492:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8022496:	681b      	ldr	r3, [r3, #0]
 8022498:	3370      	adds	r3, #112	; 0x70
 802249a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802249e:	01d8      	lsls	r0, r3, #7
 80224a0:	0e51      	lsrs	r1, r2, #25
 80224a2:	4301      	orrs	r1, r0
 80224a4:	f8c7 1560 	str.w	r1, [r7, #1376]	; 0x560
 80224a8:	01d1      	lsls	r1, r2, #7
 80224aa:	0e5b      	lsrs	r3, r3, #25
 80224ac:	430b      	orrs	r3, r1
 80224ae:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 80224b2:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80224b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80224ba:	f507 62ac 	add.w	r2, r7, #1376	; 0x560
 80224be:	e9d2 1200 	ldrd	r1, r2, [r2]
 80224c2:	e9c3 1204 	strd	r1, r2, [r3, #16]
 80224c6:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80224ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80224ce:	681b      	ldr	r3, [r3, #0]
 80224d0:	3378      	adds	r3, #120	; 0x78
 80224d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224d6:	0258      	lsls	r0, r3, #9
 80224d8:	0dd1      	lsrs	r1, r2, #23
 80224da:	4301      	orrs	r1, r0
 80224dc:	f8c7 1558 	str.w	r1, [r7, #1368]	; 0x558
 80224e0:	0251      	lsls	r1, r2, #9
 80224e2:	0ddb      	lsrs	r3, r3, #23
 80224e4:	430b      	orrs	r3, r1
 80224e6:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 80224ea:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80224ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80224f2:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
 80224f6:	e9d2 1200 	ldrd	r1, r2, [r2]
 80224fa:	e9c3 1206 	strd	r1, r2, [r3, #24]
 80224fe:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022502:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8022506:	681b      	ldr	r3, [r3, #0]
 8022508:	33a8      	adds	r3, #168	; 0xa8
 802250a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802250e:	0f90      	lsrs	r0, r2, #30
 8022510:	0099      	lsls	r1, r3, #2
 8022512:	4301      	orrs	r1, r0
 8022514:	f8c7 1554 	str.w	r1, [r7, #1364]	; 0x554
 8022518:	0f99      	lsrs	r1, r3, #30
 802251a:	0093      	lsls	r3, r2, #2
 802251c:	430b      	orrs	r3, r1
 802251e:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
 8022522:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022526:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802252a:	f507 62aa 	add.w	r2, r7, #1360	; 0x550
 802252e:	e9d2 1200 	ldrd	r1, r2, [r2]
 8022532:	e9c3 1208 	strd	r1, r2, [r3, #32]
 8022536:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802253a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802253e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8022542:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802254a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 802254e:	ea80 0402 	eor.w	r4, r0, r2
 8022552:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 8022556:	404b      	eors	r3, r1
 8022558:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802255c:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8022560:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 8022564:	e9c2 3400 	strd	r3, r4, [r2]
 8022568:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802256c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8022570:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8022574:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022578:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802257c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8022580:	ea80 0402 	eor.w	r4, r0, r2
 8022584:	67bc      	str	r4, [r7, #120]	; 0x78
 8022586:	404b      	eors	r3, r1
 8022588:	67fb      	str	r3, [r7, #124]	; 0x7c
 802258a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 802258e:	f607 12f8 	addw	r2, r7, #2552	; 0x9f8
 8022592:	e9c2 3400 	strd	r3, r4, [r2]
 8022596:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802259a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802259e:	e9d3 4500 	ldrd	r4, r5, [r3]
 80225a2:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80225a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80225aa:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80225ae:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 80225b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80225b6:	ea00 0602 	and.w	r6, r0, r2
 80225ba:	f8c7 6548 	str.w	r6, [r7, #1352]	; 0x548
 80225be:	400b      	ands	r3, r1
 80225c0:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 80225c4:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 80225c8:	e9d3 1200 	ldrd	r1, r2, [r3]
 80225cc:	460b      	mov	r3, r1
 80225ce:	4063      	eors	r3, r4
 80225d0:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
 80225d4:	4613      	mov	r3, r2
 80225d6:	406b      	eors	r3, r5
 80225d8:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 80225dc:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 80225e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80225e4:	f507 621d 	add.w	r2, r7, #2512	; 0x9d0
 80225e8:	e9c2 3400 	strd	r3, r4, [r2]
 80225ec:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80225f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80225f4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80225f8:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80225fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8022600:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8022604:	ea40 0402 	orr.w	r4, r0, r2
 8022608:	f8c7 4538 	str.w	r4, [r7, #1336]	; 0x538
 802260c:	430b      	orrs	r3, r1
 802260e:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 8022612:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8022616:	e9d3 2300 	ldrd	r2, r3, [r3]
 802261a:	f507 61a7 	add.w	r1, r7, #1336	; 0x538
 802261e:	e9d1 4500 	ldrd	r4, r5, [r1]
 8022622:	4621      	mov	r1, r4
 8022624:	4051      	eors	r1, r2
 8022626:	f8c7 1530 	str.w	r1, [r7, #1328]	; 0x530
 802262a:	4629      	mov	r1, r5
 802262c:	404b      	eors	r3, r1
 802262e:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 8022632:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8022636:	e9d3 3400 	ldrd	r3, r4, [r3]
 802263a:	f607 12d8 	addw	r2, r7, #2520	; 0x9d8
 802263e:	e9c2 3400 	strd	r3, r4, [r2]
 8022642:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022646:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802264a:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 802264e:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022652:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8022656:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 802265a:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 802265e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022662:	ea00 0602 	and.w	r6, r0, r2
 8022666:	f8c7 6528 	str.w	r6, [r7, #1320]	; 0x528
 802266a:	400b      	ands	r3, r1
 802266c:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8022670:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8022674:	e9d3 1200 	ldrd	r1, r2, [r3]
 8022678:	460b      	mov	r3, r1
 802267a:	4063      	eors	r3, r4
 802267c:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 8022680:	4613      	mov	r3, r2
 8022682:	406b      	eors	r3, r5
 8022684:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 8022688:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 802268c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8022690:	f507 621e 	add.w	r2, r7, #2528	; 0x9e0
 8022694:	e9c2 3400 	strd	r3, r4, [r2]
 8022698:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802269c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80226a0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80226a4:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80226a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80226ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226b0:	ea40 0402 	orr.w	r4, r0, r2
 80226b4:	f8c7 4518 	str.w	r4, [r7, #1304]	; 0x518
 80226b8:	430b      	orrs	r3, r1
 80226ba:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 80226be:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 80226c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226c6:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 80226ca:	e9d1 4500 	ldrd	r4, r5, [r1]
 80226ce:	4621      	mov	r1, r4
 80226d0:	4051      	eors	r1, r2
 80226d2:	f8c7 1510 	str.w	r1, [r7, #1296]	; 0x510
 80226d6:	4629      	mov	r1, r5
 80226d8:	404b      	eors	r3, r1
 80226da:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 80226de:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80226e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80226e6:	f607 12e8 	addw	r2, r7, #2536	; 0x9e8
 80226ea:	e9c2 3400 	strd	r3, r4, [r2]
 80226ee:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80226f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80226f6:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80226fa:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80226fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8022702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022706:	43d4      	mvns	r4, r2
 8022708:	f8c7 4508 	str.w	r4, [r7, #1288]	; 0x508
 802270c:	43db      	mvns	r3, r3
 802270e:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8022712:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022716:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802271a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 802271e:	f507 64a1 	add.w	r4, r7, #1288	; 0x508
 8022722:	e9d4 5600 	ldrd	r5, r6, [r4]
 8022726:	462c      	mov	r4, r5
 8022728:	4014      	ands	r4, r2
 802272a:	f8c7 4500 	str.w	r4, [r7, #1280]	; 0x500
 802272e:	4634      	mov	r4, r6
 8022730:	4023      	ands	r3, r4
 8022732:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 8022736:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 802273a:	e9d3 4500 	ldrd	r4, r5, [r3]
 802273e:	4623      	mov	r3, r4
 8022740:	4043      	eors	r3, r0
 8022742:	f8c7 34f8 	str.w	r3, [r7, #1272]	; 0x4f8
 8022746:	462b      	mov	r3, r5
 8022748:	404b      	eors	r3, r1
 802274a:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 802274e:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 8022752:	e9d3 3400 	ldrd	r3, r4, [r3]
 8022756:	f507 621f 	add.w	r2, r7, #2544	; 0x9f0
 802275a:	e9c2 3400 	strd	r3, r4, [r2]
        n[0] ^= hash_keccak_r[i];
 802275e:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8022762:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022766:	f897 3a0f 	ldrb.w	r3, [r7, #2575]	; 0xa0f
 802276a:	4afd      	ldr	r2, [pc, #1012]	; (8022b60 <BlockSha3+0x1fbc>)
 802276c:	00db      	lsls	r3, r3, #3
 802276e:	4413      	add	r3, r2
 8022770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022774:	ea80 0402 	eor.w	r4, r0, r2
 8022778:	f8c7 44f0 	str.w	r4, [r7, #1264]	; 0x4f0
 802277c:	404b      	eors	r3, r1
 802277e:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8022782:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8022786:	e9d3 3400 	ldrd	r3, r4, [r3]
 802278a:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 802278e:	e9c2 3400 	strd	r3, r4, [r2]

        COL_MIX(n, b, x, t0);
 8022792:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8022796:	e9d3 0100 	ldrd	r0, r1, [r3]
 802279a:	f607 1358 	addw	r3, r7, #2392	; 0x958
 802279e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227a2:	ea80 0402 	eor.w	r4, r0, r2
 80227a6:	f8c7 44e8 	str.w	r4, [r7, #1256]	; 0x4e8
 80227aa:	404b      	eors	r3, r1
 80227ac:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 80227b0:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 80227b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227b8:	f507 619d 	add.w	r1, r7, #1256	; 0x4e8
 80227bc:	e9d1 4500 	ldrd	r4, r5, [r1]
 80227c0:	4621      	mov	r1, r4
 80227c2:	4051      	eors	r1, r2
 80227c4:	f8c7 14e0 	str.w	r1, [r7, #1248]	; 0x4e0
 80227c8:	4629      	mov	r1, r5
 80227ca:	404b      	eors	r3, r1
 80227cc:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 80227d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80227d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227d8:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 80227dc:	e9d1 4500 	ldrd	r4, r5, [r1]
 80227e0:	4621      	mov	r1, r4
 80227e2:	4051      	eors	r1, r2
 80227e4:	f8c7 14d8 	str.w	r1, [r7, #1240]	; 0x4d8
 80227e8:	4629      	mov	r1, r5
 80227ea:	404b      	eors	r3, r1
 80227ec:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
 80227f0:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 80227f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227f8:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 80227fc:	e9d1 4500 	ldrd	r4, r5, [r1]
 8022800:	4621      	mov	r1, r4
 8022802:	4051      	eors	r1, r2
 8022804:	f8c7 14d0 	str.w	r1, [r7, #1232]	; 0x4d0
 8022808:	4629      	mov	r1, r5
 802280a:	404b      	eors	r3, r1
 802280c:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 8022810:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022814:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8022818:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 802281c:	e9d2 1200 	ldrd	r1, r2, [r2]
 8022820:	e9c3 1200 	strd	r1, r2, [r3]
 8022824:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8022828:	e9d3 0100 	ldrd	r0, r1, [r3]
 802282c:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8022830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022834:	ea80 0402 	eor.w	r4, r0, r2
 8022838:	f8c7 44c8 	str.w	r4, [r7, #1224]	; 0x4c8
 802283c:	404b      	eors	r3, r1
 802283e:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 8022842:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8022846:	e9d3 2300 	ldrd	r2, r3, [r3]
 802284a:	f507 6199 	add.w	r1, r7, #1224	; 0x4c8
 802284e:	e9d1 4500 	ldrd	r4, r5, [r1]
 8022852:	4621      	mov	r1, r4
 8022854:	4051      	eors	r1, r2
 8022856:	f8c7 14c0 	str.w	r1, [r7, #1216]	; 0x4c0
 802285a:	4629      	mov	r1, r5
 802285c:	404b      	eors	r3, r1
 802285e:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 8022862:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022866:	e9d3 2300 	ldrd	r2, r3, [r3]
 802286a:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 802286e:	e9d1 4500 	ldrd	r4, r5, [r1]
 8022872:	4621      	mov	r1, r4
 8022874:	4051      	eors	r1, r2
 8022876:	f8c7 14b8 	str.w	r1, [r7, #1208]	; 0x4b8
 802287a:	4629      	mov	r1, r5
 802287c:	404b      	eors	r3, r1
 802287e:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 8022882:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 8022886:	e9d3 2300 	ldrd	r2, r3, [r3]
 802288a:	f507 6197 	add.w	r1, r7, #1208	; 0x4b8
 802288e:	e9d1 4500 	ldrd	r4, r5, [r1]
 8022892:	4621      	mov	r1, r4
 8022894:	4051      	eors	r1, r2
 8022896:	f8c7 14b0 	str.w	r1, [r7, #1200]	; 0x4b0
 802289a:	4629      	mov	r1, r5
 802289c:	404b      	eors	r3, r1
 802289e:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
 80228a2:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80228a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80228aa:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 80228ae:	e9d2 1200 	ldrd	r1, r2, [r2]
 80228b2:	e9c3 1202 	strd	r1, r2, [r3, #8]
 80228b6:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80228ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80228be:	f607 1368 	addw	r3, r7, #2408	; 0x968
 80228c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80228c6:	ea80 0402 	eor.w	r4, r0, r2
 80228ca:	f8c7 44a8 	str.w	r4, [r7, #1192]	; 0x4a8
 80228ce:	404b      	eors	r3, r1
 80228d0:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 80228d4:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 80228d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80228dc:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 80228e0:	e9d1 4500 	ldrd	r4, r5, [r1]
 80228e4:	4621      	mov	r1, r4
 80228e6:	4051      	eors	r1, r2
 80228e8:	f8c7 14a0 	str.w	r1, [r7, #1184]	; 0x4a0
 80228ec:	4629      	mov	r1, r5
 80228ee:	404b      	eors	r3, r1
 80228f0:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 80228f4:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 80228f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80228fc:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 8022900:	e9d1 4500 	ldrd	r4, r5, [r1]
 8022904:	4621      	mov	r1, r4
 8022906:	4051      	eors	r1, r2
 8022908:	f8c7 1498 	str.w	r1, [r7, #1176]	; 0x498
 802290c:	4629      	mov	r1, r5
 802290e:	404b      	eors	r3, r1
 8022910:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 8022914:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8022918:	e9d3 2300 	ldrd	r2, r3, [r3]
 802291c:	f507 6193 	add.w	r1, r7, #1176	; 0x498
 8022920:	e9d1 4500 	ldrd	r4, r5, [r1]
 8022924:	4621      	mov	r1, r4
 8022926:	4051      	eors	r1, r2
 8022928:	f8c7 1490 	str.w	r1, [r7, #1168]	; 0x490
 802292c:	4629      	mov	r1, r5
 802292e:	404b      	eors	r3, r1
 8022930:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 8022934:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022938:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802293c:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 8022940:	e9d2 1200 	ldrd	r1, r2, [r2]
 8022944:	e9c3 1204 	strd	r1, r2, [r3, #16]
 8022948:	f607 1348 	addw	r3, r7, #2376	; 0x948
 802294c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022950:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8022954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022958:	ea80 0402 	eor.w	r4, r0, r2
 802295c:	f8c7 4488 	str.w	r4, [r7, #1160]	; 0x488
 8022960:	404b      	eors	r3, r1
 8022962:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
 8022966:	f607 1398 	addw	r3, r7, #2456	; 0x998
 802296a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802296e:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 8022972:	e9d1 4500 	ldrd	r4, r5, [r1]
 8022976:	4621      	mov	r1, r4
 8022978:	4051      	eors	r1, r2
 802297a:	f8c7 1480 	str.w	r1, [r7, #1152]	; 0x480
 802297e:	4629      	mov	r1, r5
 8022980:	404b      	eors	r3, r1
 8022982:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 8022986:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 802298a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802298e:	f507 6190 	add.w	r1, r7, #1152	; 0x480
 8022992:	e9d1 4500 	ldrd	r4, r5, [r1]
 8022996:	4621      	mov	r1, r4
 8022998:	4051      	eors	r1, r2
 802299a:	f8c7 1478 	str.w	r1, [r7, #1144]	; 0x478
 802299e:	4629      	mov	r1, r5
 80229a0:	404b      	eors	r3, r1
 80229a2:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 80229a6:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 80229aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80229ae:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 80229b2:	e9d1 4500 	ldrd	r4, r5, [r1]
 80229b6:	4621      	mov	r1, r4
 80229b8:	4051      	eors	r1, r2
 80229ba:	f8c7 1470 	str.w	r1, [r7, #1136]	; 0x470
 80229be:	4629      	mov	r1, r5
 80229c0:	404b      	eors	r3, r1
 80229c2:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 80229c6:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80229ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80229ce:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80229d2:	e9d2 1200 	ldrd	r1, r2, [r2]
 80229d6:	e9c3 1206 	strd	r1, r2, [r3, #24]
 80229da:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 80229de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80229e2:	f607 1378 	addw	r3, r7, #2424	; 0x978
 80229e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80229ea:	ea80 0402 	eor.w	r4, r0, r2
 80229ee:	f8c7 4468 	str.w	r4, [r7, #1128]	; 0x468
 80229f2:	404b      	eors	r3, r1
 80229f4:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 80229f8:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 80229fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a00:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 8022a04:	e9d1 4500 	ldrd	r4, r5, [r1]
 8022a08:	4621      	mov	r1, r4
 8022a0a:	4051      	eors	r1, r2
 8022a0c:	f8c7 1460 	str.w	r1, [r7, #1120]	; 0x460
 8022a10:	4629      	mov	r1, r5
 8022a12:	404b      	eors	r3, r1
 8022a14:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 8022a18:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 8022a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a20:	f507 618c 	add.w	r1, r7, #1120	; 0x460
 8022a24:	e9d1 4500 	ldrd	r4, r5, [r1]
 8022a28:	4621      	mov	r1, r4
 8022a2a:	4051      	eors	r1, r2
 8022a2c:	f8c7 1458 	str.w	r1, [r7, #1112]	; 0x458
 8022a30:	4629      	mov	r1, r5
 8022a32:	404b      	eors	r3, r1
 8022a34:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 8022a38:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8022a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a40:	f507 618b 	add.w	r1, r7, #1112	; 0x458
 8022a44:	e9d1 4500 	ldrd	r4, r5, [r1]
 8022a48:	4621      	mov	r1, r4
 8022a4a:	4051      	eors	r1, r2
 8022a4c:	f8c7 1450 	str.w	r1, [r7, #1104]	; 0x450
 8022a50:	4629      	mov	r1, r5
 8022a52:	404b      	eors	r3, r1
 8022a54:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 8022a58:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022a5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8022a60:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8022a64:	e9d2 1200 	ldrd	r1, r2, [r2]
 8022a68:	e9c3 1208 	strd	r1, r2, [r3, #32]
 8022a6c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022a70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8022a74:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8022a78:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022a7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8022a80:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8022a84:	0fd0      	lsrs	r0, r2, #31
 8022a86:	0059      	lsls	r1, r3, #1
 8022a88:	4301      	orrs	r1, r0
 8022a8a:	f8c7 144c 	str.w	r1, [r7, #1100]	; 0x44c
 8022a8e:	0fd9      	lsrs	r1, r3, #31
 8022a90:	0053      	lsls	r3, r2, #1
 8022a92:	430b      	orrs	r3, r1
 8022a94:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 8022a98:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8022a9c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8022aa0:	460b      	mov	r3, r1
 8022aa2:	4063      	eors	r3, r4
 8022aa4:	673b      	str	r3, [r7, #112]	; 0x70
 8022aa6:	4613      	mov	r3, r2
 8022aa8:	406b      	eors	r3, r5
 8022aaa:	677b      	str	r3, [r7, #116]	; 0x74
 8022aac:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8022ab0:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 8022ab4:	e9c2 3400 	strd	r3, r4, [r2]
 8022ab8:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8022abc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022ac0:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8022ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ac8:	ea80 0402 	eor.w	r4, r0, r2
 8022acc:	f8c7 4440 	str.w	r4, [r7, #1088]	; 0x440
 8022ad0:	404b      	eors	r3, r1
 8022ad2:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 8022ad6:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8022ada:	e9d3 3400 	ldrd	r3, r4, [r3]
 8022ade:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 8022ae2:	e9c2 3400 	strd	r3, r4, [r2]
 8022ae6:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8022aea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022aee:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8022af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022af6:	ea80 0402 	eor.w	r4, r0, r2
 8022afa:	f8c7 4438 	str.w	r4, [r7, #1080]	; 0x438
 8022afe:	404b      	eors	r3, r1
 8022b00:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 8022b04:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8022b08:	e9d3 3400 	ldrd	r3, r4, [r3]
 8022b0c:	f607 1258 	addw	r2, r7, #2392	; 0x958
 8022b10:	e9c2 3400 	strd	r3, r4, [r2]
 8022b14:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8022b18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022b1c:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8022b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b24:	ea80 0402 	eor.w	r4, r0, r2
 8022b28:	f8c7 4430 	str.w	r4, [r7, #1072]	; 0x430
 8022b2c:	404b      	eors	r3, r1
 8022b2e:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8022b32:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8022b36:	e9d3 3400 	ldrd	r3, r4, [r3]
 8022b3a:	f507 6218 	add.w	r2, r7, #2432	; 0x980
 8022b3e:	e9c2 3400 	strd	r3, r4, [r2]
 8022b42:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8022b46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022b4a:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8022b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b52:	ea80 0402 	eor.w	r4, r0, r2
 8022b56:	f8c7 4428 	str.w	r4, [r7, #1064]	; 0x428
 8022b5a:	404b      	eors	r3, r1
 8022b5c:	e002      	b.n	8022b64 <BlockSha3+0x1fc0>
 8022b5e:	bf00      	nop
 8022b60:	0802d788 	.word	0x0802d788
 8022b64:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 8022b68:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8022b6c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8022b70:	f607 12a8 	addw	r2, r7, #2472	; 0x9a8
 8022b74:	e9c2 3400 	strd	r3, r4, [r2]
 8022b78:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8022b7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022b80:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8022b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b88:	ea80 0402 	eor.w	r4, r0, r2
 8022b8c:	f8c7 4420 	str.w	r4, [r7, #1056]	; 0x420
 8022b90:	404b      	eors	r3, r1
 8022b92:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8022b96:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8022b9a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8022b9e:	f507 621d 	add.w	r2, r7, #2512	; 0x9d0
 8022ba2:	e9c2 3400 	strd	r3, r4, [r2]
 8022ba6:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022baa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8022bae:	e9d3 4500 	ldrd	r4, r5, [r3]
 8022bb2:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022bb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8022bba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8022bbe:	0fd0      	lsrs	r0, r2, #31
 8022bc0:	0059      	lsls	r1, r3, #1
 8022bc2:	4301      	orrs	r1, r0
 8022bc4:	f8c7 141c 	str.w	r1, [r7, #1052]	; 0x41c
 8022bc8:	0fd9      	lsrs	r1, r3, #31
 8022bca:	0053      	lsls	r3, r2, #1
 8022bcc:	430b      	orrs	r3, r1
 8022bce:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 8022bd2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8022bd6:	e9d3 1200 	ldrd	r1, r2, [r3]
 8022bda:	460b      	mov	r3, r1
 8022bdc:	4063      	eors	r3, r4
 8022bde:	66bb      	str	r3, [r7, #104]	; 0x68
 8022be0:	4613      	mov	r3, r2
 8022be2:	406b      	eors	r3, r5
 8022be4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8022be6:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8022bea:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 8022bee:	e9c2 3400 	strd	r3, r4, [r2]
 8022bf2:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8022bf6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022bfa:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8022bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c02:	ea80 0402 	eor.w	r4, r0, r2
 8022c06:	f8c7 4410 	str.w	r4, [r7, #1040]	; 0x410
 8022c0a:	404b      	eors	r3, r1
 8022c0c:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 8022c10:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8022c14:	e9d3 3400 	ldrd	r3, r4, [r3]
 8022c18:	f607 1238 	addw	r2, r7, #2360	; 0x938
 8022c1c:	e9c2 3400 	strd	r3, r4, [r2]
 8022c20:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8022c24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022c28:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8022c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c30:	ea80 0402 	eor.w	r4, r0, r2
 8022c34:	f8c7 4408 	str.w	r4, [r7, #1032]	; 0x408
 8022c38:	404b      	eors	r3, r1
 8022c3a:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8022c3e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8022c42:	e9d3 3400 	ldrd	r3, r4, [r3]
 8022c46:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 8022c4a:	e9c2 3400 	strd	r3, r4, [r2]
 8022c4e:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8022c52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022c56:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8022c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c5e:	ea80 0402 	eor.w	r4, r0, r2
 8022c62:	f8c7 4400 	str.w	r4, [r7, #1024]	; 0x400
 8022c66:	404b      	eors	r3, r1
 8022c68:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8022c6c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8022c70:	e9d3 3400 	ldrd	r3, r4, [r3]
 8022c74:	f607 1288 	addw	r2, r7, #2440	; 0x988
 8022c78:	e9c2 3400 	strd	r3, r4, [r2]
 8022c7c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8022c80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022c84:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8022c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c8c:	ea80 0402 	eor.w	r4, r0, r2
 8022c90:	f8c7 43f8 	str.w	r4, [r7, #1016]	; 0x3f8
 8022c94:	404b      	eors	r3, r1
 8022c96:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8022c9a:	e9d7 34fe 	ldrd	r3, r4, [r7, #1016]	; 0x3f8
 8022c9e:	f507 621b 	add.w	r2, r7, #2480	; 0x9b0
 8022ca2:	e9c2 3400 	strd	r3, r4, [r2]
 8022ca6:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 8022caa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022cae:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8022cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022cb6:	ea80 0402 	eor.w	r4, r0, r2
 8022cba:	f8c7 43f0 	str.w	r4, [r7, #1008]	; 0x3f0
 8022cbe:	404b      	eors	r3, r1
 8022cc0:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 8022cc4:	e9d7 34fc 	ldrd	r3, r4, [r7, #1008]	; 0x3f0
 8022cc8:	f607 12d8 	addw	r2, r7, #2520	; 0x9d8
 8022ccc:	e9c2 3400 	strd	r3, r4, [r2]
 8022cd0:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8022cd8:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8022cdc:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022ce0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8022ce4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8022ce8:	0fd0      	lsrs	r0, r2, #31
 8022cea:	0059      	lsls	r1, r3, #1
 8022cec:	4301      	orrs	r1, r0
 8022cee:	f8c7 13ec 	str.w	r1, [r7, #1004]	; 0x3ec
 8022cf2:	0fd9      	lsrs	r1, r3, #31
 8022cf4:	0053      	lsls	r3, r2, #1
 8022cf6:	430b      	orrs	r3, r1
 8022cf8:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 8022cfc:	e9d7 12fa 	ldrd	r1, r2, [r7, #1000]	; 0x3e8
 8022d00:	460b      	mov	r3, r1
 8022d02:	4063      	eors	r3, r4
 8022d04:	663b      	str	r3, [r7, #96]	; 0x60
 8022d06:	4613      	mov	r3, r2
 8022d08:	406b      	eors	r3, r5
 8022d0a:	667b      	str	r3, [r7, #100]	; 0x64
 8022d0c:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8022d10:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 8022d14:	e9c2 3400 	strd	r3, r4, [r2]
 8022d18:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8022d1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022d20:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8022d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d28:	ea80 0402 	eor.w	r4, r0, r2
 8022d2c:	f8c7 43e0 	str.w	r4, [r7, #992]	; 0x3e0
 8022d30:	404b      	eors	r3, r1
 8022d32:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 8022d36:	e9d7 34f8 	ldrd	r3, r4, [r7, #992]	; 0x3e0
 8022d3a:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8022d3e:	e9c2 3400 	strd	r3, r4, [r2]
 8022d42:	f607 1368 	addw	r3, r7, #2408	; 0x968
 8022d46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022d4a:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8022d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d52:	ea80 0402 	eor.w	r4, r0, r2
 8022d56:	f8c7 43d8 	str.w	r4, [r7, #984]	; 0x3d8
 8022d5a:	404b      	eors	r3, r1
 8022d5c:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8022d60:	e9d7 34f6 	ldrd	r3, r4, [r7, #984]	; 0x3d8
 8022d64:	f607 1268 	addw	r2, r7, #2408	; 0x968
 8022d68:	e9c2 3400 	strd	r3, r4, [r2]
 8022d6c:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 8022d70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022d74:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8022d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d7c:	ea80 0402 	eor.w	r4, r0, r2
 8022d80:	f8c7 43d0 	str.w	r4, [r7, #976]	; 0x3d0
 8022d84:	404b      	eors	r3, r1
 8022d86:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 8022d8a:	e9d7 34f4 	ldrd	r3, r4, [r7, #976]	; 0x3d0
 8022d8e:	f507 6219 	add.w	r2, r7, #2448	; 0x990
 8022d92:	e9c2 3400 	strd	r3, r4, [r2]
 8022d96:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8022d9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022d9e:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8022da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022da6:	ea80 0402 	eor.w	r4, r0, r2
 8022daa:	f8c7 43c8 	str.w	r4, [r7, #968]	; 0x3c8
 8022dae:	404b      	eors	r3, r1
 8022db0:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8022db4:	e9d7 34f2 	ldrd	r3, r4, [r7, #968]	; 0x3c8
 8022db8:	f607 12b8 	addw	r2, r7, #2488	; 0x9b8
 8022dbc:	e9c2 3400 	strd	r3, r4, [r2]
 8022dc0:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8022dc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022dc8:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8022dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022dd0:	ea80 0402 	eor.w	r4, r0, r2
 8022dd4:	f8c7 43c0 	str.w	r4, [r7, #960]	; 0x3c0
 8022dd8:	404b      	eors	r3, r1
 8022dda:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 8022dde:	e9d7 34f0 	ldrd	r3, r4, [r7, #960]	; 0x3c0
 8022de2:	f507 621e 	add.w	r2, r7, #2528	; 0x9e0
 8022de6:	e9c2 3400 	strd	r3, r4, [r2]
 8022dea:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022dee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8022df2:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8022df6:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022dfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8022dfe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8022e02:	0fd0      	lsrs	r0, r2, #31
 8022e04:	0059      	lsls	r1, r3, #1
 8022e06:	4301      	orrs	r1, r0
 8022e08:	f8c7 13bc 	str.w	r1, [r7, #956]	; 0x3bc
 8022e0c:	0fd9      	lsrs	r1, r3, #31
 8022e0e:	0053      	lsls	r3, r2, #1
 8022e10:	430b      	orrs	r3, r1
 8022e12:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 8022e16:	e9d7 12ee 	ldrd	r1, r2, [r7, #952]	; 0x3b8
 8022e1a:	460b      	mov	r3, r1
 8022e1c:	4063      	eors	r3, r4
 8022e1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8022e20:	4613      	mov	r3, r2
 8022e22:	406b      	eors	r3, r5
 8022e24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8022e26:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8022e2a:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 8022e2e:	e9c2 3400 	strd	r3, r4, [r2]
 8022e32:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8022e36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022e3a:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8022e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e42:	ea80 0402 	eor.w	r4, r0, r2
 8022e46:	f8c7 43b0 	str.w	r4, [r7, #944]	; 0x3b0
 8022e4a:	404b      	eors	r3, r1
 8022e4c:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 8022e50:	e9d7 34ec 	ldrd	r3, r4, [r7, #944]	; 0x3b0
 8022e54:	f607 1248 	addw	r2, r7, #2376	; 0x948
 8022e58:	e9c2 3400 	strd	r3, r4, [r2]
 8022e5c:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8022e60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022e64:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8022e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e6c:	ea80 0402 	eor.w	r4, r0, r2
 8022e70:	f8c7 43a8 	str.w	r4, [r7, #936]	; 0x3a8
 8022e74:	404b      	eors	r3, r1
 8022e76:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 8022e7a:	e9d7 34ea 	ldrd	r3, r4, [r7, #936]	; 0x3a8
 8022e7e:	f507 6217 	add.w	r2, r7, #2416	; 0x970
 8022e82:	e9c2 3400 	strd	r3, r4, [r2]
 8022e86:	f607 1398 	addw	r3, r7, #2456	; 0x998
 8022e8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022e8e:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8022e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e96:	ea80 0402 	eor.w	r4, r0, r2
 8022e9a:	f8c7 43a0 	str.w	r4, [r7, #928]	; 0x3a0
 8022e9e:	404b      	eors	r3, r1
 8022ea0:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 8022ea4:	e9d7 34e8 	ldrd	r3, r4, [r7, #928]	; 0x3a0
 8022ea8:	f607 1298 	addw	r2, r7, #2456	; 0x998
 8022eac:	e9c2 3400 	strd	r3, r4, [r2]
 8022eb0:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8022eb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022eb8:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8022ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ec0:	ea80 0402 	eor.w	r4, r0, r2
 8022ec4:	f8c7 4398 	str.w	r4, [r7, #920]	; 0x398
 8022ec8:	404b      	eors	r3, r1
 8022eca:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 8022ece:	e9d7 34e6 	ldrd	r3, r4, [r7, #920]	; 0x398
 8022ed2:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8022ed6:	e9c2 3400 	strd	r3, r4, [r2]
 8022eda:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 8022ede:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022ee2:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8022ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022eea:	ea80 0402 	eor.w	r4, r0, r2
 8022eee:	f8c7 4390 	str.w	r4, [r7, #912]	; 0x390
 8022ef2:	404b      	eors	r3, r1
 8022ef4:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 8022ef8:	e9d7 34e4 	ldrd	r3, r4, [r7, #912]	; 0x390
 8022efc:	f607 12e8 	addw	r2, r7, #2536	; 0x9e8
 8022f00:	e9c2 3400 	strd	r3, r4, [r2]
 8022f04:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022f08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8022f0c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8022f10:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8022f14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8022f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f1c:	0fd0      	lsrs	r0, r2, #31
 8022f1e:	0059      	lsls	r1, r3, #1
 8022f20:	4301      	orrs	r1, r0
 8022f22:	f8c7 138c 	str.w	r1, [r7, #908]	; 0x38c
 8022f26:	0fd9      	lsrs	r1, r3, #31
 8022f28:	0053      	lsls	r3, r2, #1
 8022f2a:	430b      	orrs	r3, r1
 8022f2c:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 8022f30:	e9d7 12e2 	ldrd	r1, r2, [r7, #904]	; 0x388
 8022f34:	460b      	mov	r3, r1
 8022f36:	4063      	eors	r3, r4
 8022f38:	653b      	str	r3, [r7, #80]	; 0x50
 8022f3a:	4613      	mov	r3, r2
 8022f3c:	406b      	eors	r3, r5
 8022f3e:	657b      	str	r3, [r7, #84]	; 0x54
 8022f40:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8022f44:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 8022f48:	e9c2 3400 	strd	r3, r4, [r2]
 8022f4c:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8022f50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022f54:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8022f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f5c:	ea80 0402 	eor.w	r4, r0, r2
 8022f60:	f8c7 4380 	str.w	r4, [r7, #896]	; 0x380
 8022f64:	404b      	eors	r3, r1
 8022f66:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 8022f6a:	e9d7 34e0 	ldrd	r3, r4, [r7, #896]	; 0x380
 8022f6e:	f507 6215 	add.w	r2, r7, #2384	; 0x950
 8022f72:	e9c2 3400 	strd	r3, r4, [r2]
 8022f76:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8022f7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022f7e:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8022f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f86:	ea80 0402 	eor.w	r4, r0, r2
 8022f8a:	f8c7 4378 	str.w	r4, [r7, #888]	; 0x378
 8022f8e:	404b      	eors	r3, r1
 8022f90:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8022f94:	e9d7 34de 	ldrd	r3, r4, [r7, #888]	; 0x378
 8022f98:	f607 1278 	addw	r2, r7, #2424	; 0x978
 8022f9c:	e9c2 3400 	strd	r3, r4, [r2]
 8022fa0:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8022fa4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022fa8:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8022fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022fb0:	ea80 0402 	eor.w	r4, r0, r2
 8022fb4:	f8c7 4370 	str.w	r4, [r7, #880]	; 0x370
 8022fb8:	404b      	eors	r3, r1
 8022fba:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8022fbe:	e9d7 34dc 	ldrd	r3, r4, [r7, #880]	; 0x370
 8022fc2:	f507 621a 	add.w	r2, r7, #2464	; 0x9a0
 8022fc6:	e9c2 3400 	strd	r3, r4, [r2]
 8022fca:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 8022fce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022fd2:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8022fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022fda:	ea80 0402 	eor.w	r4, r0, r2
 8022fde:	f8c7 4368 	str.w	r4, [r7, #872]	; 0x368
 8022fe2:	404b      	eors	r3, r1
 8022fe4:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8022fe8:	e9d7 34da 	ldrd	r3, r4, [r7, #872]	; 0x368
 8022fec:	f607 12c8 	addw	r2, r7, #2504	; 0x9c8
 8022ff0:	e9c2 3400 	strd	r3, r4, [r2]
 8022ff4:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8022ff8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8022ffc:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8023000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023004:	ea80 0402 	eor.w	r4, r0, r2
 8023008:	f8c7 4360 	str.w	r4, [r7, #864]	; 0x360
 802300c:	404b      	eors	r3, r1
 802300e:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 8023012:	e9d7 34d8 	ldrd	r3, r4, [r7, #864]	; 0x360
 8023016:	f507 621f 	add.w	r2, r7, #2544	; 0x9f0
 802301a:	e9c2 3400 	strd	r3, r4, [r2]
        ROW_MIX(s, n, b, t0, t1);
 802301e:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8023022:	e9d3 0100 	ldrd	r0, r1, [r3]
 8023026:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802302a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802302e:	e9c3 0100 	strd	r0, r1, [r3]
 8023032:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8023036:	e9d3 2300 	ldrd	r2, r3, [r3]
 802303a:	0318      	lsls	r0, r3, #12
 802303c:	0d11      	lsrs	r1, r2, #20
 802303e:	4301      	orrs	r1, r0
 8023040:	f8c7 1358 	str.w	r1, [r7, #856]	; 0x358
 8023044:	0311      	lsls	r1, r2, #12
 8023046:	0d1b      	lsrs	r3, r3, #20
 8023048:	430b      	orrs	r3, r1
 802304a:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 802304e:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023052:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023056:	e9d7 12d6 	ldrd	r1, r2, [r7, #856]	; 0x358
 802305a:	e9c3 1202 	strd	r1, r2, [r3, #8]
 802305e:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 8023062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023066:	02d8      	lsls	r0, r3, #11
 8023068:	0d51      	lsrs	r1, r2, #21
 802306a:	4301      	orrs	r1, r0
 802306c:	f8c7 1350 	str.w	r1, [r7, #848]	; 0x350
 8023070:	02d1      	lsls	r1, r2, #11
 8023072:	0d5b      	lsrs	r3, r3, #21
 8023074:	430b      	orrs	r3, r1
 8023076:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 802307a:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802307e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023082:	e9d7 12d4 	ldrd	r1, r2, [r7, #848]	; 0x350
 8023086:	e9c3 1204 	strd	r1, r2, [r3, #16]
 802308a:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 802308e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023092:	0ad0      	lsrs	r0, r2, #11
 8023094:	0559      	lsls	r1, r3, #21
 8023096:	4301      	orrs	r1, r0
 8023098:	f8c7 134c 	str.w	r1, [r7, #844]	; 0x34c
 802309c:	0ad9      	lsrs	r1, r3, #11
 802309e:	0553      	lsls	r3, r2, #21
 80230a0:	430b      	orrs	r3, r1
 80230a2:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 80230a6:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80230aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80230ae:	e9d7 12d2 	ldrd	r1, r2, [r7, #840]	; 0x348
 80230b2:	e9c3 1206 	strd	r1, r2, [r3, #24]
 80230b6:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 80230ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80230be:	0c90      	lsrs	r0, r2, #18
 80230c0:	0399      	lsls	r1, r3, #14
 80230c2:	4301      	orrs	r1, r0
 80230c4:	f8c7 1344 	str.w	r1, [r7, #836]	; 0x344
 80230c8:	0c99      	lsrs	r1, r3, #18
 80230ca:	0393      	lsls	r3, r2, #14
 80230cc:	430b      	orrs	r3, r1
 80230ce:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 80230d2:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80230d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80230da:	e9d7 12d0 	ldrd	r1, r2, [r7, #832]	; 0x340
 80230de:	e9c3 1208 	strd	r1, r2, [r3, #32]
 80230e2:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80230e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80230ea:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80230ee:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80230f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80230f6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80230fa:	ea80 0402 	eor.w	r4, r0, r2
 80230fe:	64bc      	str	r4, [r7, #72]	; 0x48
 8023100:	404b      	eors	r3, r1
 8023102:	64fb      	str	r3, [r7, #76]	; 0x4c
 8023104:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8023108:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 802310c:	e9c2 3400 	strd	r3, r4, [r2]
 8023110:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023118:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 802311c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023120:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023124:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8023128:	ea80 0402 	eor.w	r4, r0, r2
 802312c:	643c      	str	r4, [r7, #64]	; 0x40
 802312e:	404b      	eors	r3, r1
 8023130:	647b      	str	r3, [r7, #68]	; 0x44
 8023132:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8023136:	f607 12f8 	addw	r2, r7, #2552	; 0x9f8
 802313a:	e9c2 3400 	strd	r3, r4, [r2]
 802313e:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023146:	e9d3 4500 	ldrd	r4, r5, [r3]
 802314a:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802314e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023152:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8023156:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 802315a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802315e:	ea00 0602 	and.w	r6, r0, r2
 8023162:	f8c7 6338 	str.w	r6, [r7, #824]	; 0x338
 8023166:	400b      	ands	r3, r1
 8023168:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 802316c:	e9d7 12ce 	ldrd	r1, r2, [r7, #824]	; 0x338
 8023170:	460b      	mov	r3, r1
 8023172:	4063      	eors	r3, r4
 8023174:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
 8023178:	4613      	mov	r3, r2
 802317a:	406b      	eors	r3, r5
 802317c:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8023180:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023184:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8023188:	681b      	ldr	r3, [r3, #0]
 802318a:	e9d7 12cc 	ldrd	r1, r2, [r7, #816]	; 0x330
 802318e:	e9c3 1200 	strd	r1, r2, [r3]
 8023192:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023196:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802319a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 802319e:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80231a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80231a6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80231aa:	ea40 0402 	orr.w	r4, r0, r2
 80231ae:	f8c7 4328 	str.w	r4, [r7, #808]	; 0x328
 80231b2:	430b      	orrs	r3, r1
 80231b4:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 80231b8:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80231bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80231c0:	681b      	ldr	r3, [r3, #0]
 80231c2:	f103 0108 	add.w	r1, r3, #8
 80231c6:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 80231ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231ce:	e9d7 45ca 	ldrd	r4, r5, [r7, #808]	; 0x328
 80231d2:	4620      	mov	r0, r4
 80231d4:	4050      	eors	r0, r2
 80231d6:	f8c7 0320 	str.w	r0, [r7, #800]	; 0x320
 80231da:	4628      	mov	r0, r5
 80231dc:	4043      	eors	r3, r0
 80231de:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 80231e2:	e9d7 34c8 	ldrd	r3, r4, [r7, #800]	; 0x320
 80231e6:	e9c1 3400 	strd	r3, r4, [r1]
 80231ea:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80231ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80231f2:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80231f6:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80231fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80231fe:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8023202:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8023206:	e9d3 2300 	ldrd	r2, r3, [r3]
 802320a:	ea00 0602 	and.w	r6, r0, r2
 802320e:	f8c7 6318 	str.w	r6, [r7, #792]	; 0x318
 8023212:	400b      	ands	r3, r1
 8023214:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8023218:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802321c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8023220:	681b      	ldr	r3, [r3, #0]
 8023222:	3310      	adds	r3, #16
 8023224:	e9d7 01c6 	ldrd	r0, r1, [r7, #792]	; 0x318
 8023228:	4602      	mov	r2, r0
 802322a:	4062      	eors	r2, r4
 802322c:	f8c7 2310 	str.w	r2, [r7, #784]	; 0x310
 8023230:	460a      	mov	r2, r1
 8023232:	406a      	eors	r2, r5
 8023234:	f8c7 2314 	str.w	r2, [r7, #788]	; 0x314
 8023238:	e9d7 12c4 	ldrd	r1, r2, [r7, #784]	; 0x310
 802323c:	e9c3 1200 	strd	r1, r2, [r3]
 8023240:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023248:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 802324c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023250:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023258:	ea40 0402 	orr.w	r4, r0, r2
 802325c:	f8c7 4308 	str.w	r4, [r7, #776]	; 0x308
 8023260:	430b      	orrs	r3, r1
 8023262:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 8023266:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802326a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 802326e:	681b      	ldr	r3, [r3, #0]
 8023270:	f103 0118 	add.w	r1, r3, #24
 8023274:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8023278:	e9d3 2300 	ldrd	r2, r3, [r3]
 802327c:	e9d7 45c2 	ldrd	r4, r5, [r7, #776]	; 0x308
 8023280:	4620      	mov	r0, r4
 8023282:	4050      	eors	r0, r2
 8023284:	f8c7 0300 	str.w	r0, [r7, #768]	; 0x300
 8023288:	4628      	mov	r0, r5
 802328a:	4043      	eors	r3, r0
 802328c:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 8023290:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 8023294:	e9c1 3400 	strd	r3, r4, [r1]
 8023298:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802329c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80232a0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80232a4:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80232a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80232ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232b0:	43d4      	mvns	r4, r2
 80232b2:	f8c7 42f8 	str.w	r4, [r7, #760]	; 0x2f8
 80232b6:	43db      	mvns	r3, r3
 80232b8:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 80232bc:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80232c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80232c4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80232c8:	e9d7 56be 	ldrd	r5, r6, [r7, #760]	; 0x2f8
 80232cc:	462c      	mov	r4, r5
 80232ce:	4014      	ands	r4, r2
 80232d0:	f8c7 42f0 	str.w	r4, [r7, #752]	; 0x2f0
 80232d4:	4634      	mov	r4, r6
 80232d6:	4023      	ands	r3, r4
 80232d8:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 80232dc:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80232e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80232e4:	681b      	ldr	r3, [r3, #0]
 80232e6:	3320      	adds	r3, #32
 80232e8:	e9d7 45bc 	ldrd	r4, r5, [r7, #752]	; 0x2f0
 80232ec:	4622      	mov	r2, r4
 80232ee:	4042      	eors	r2, r0
 80232f0:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
 80232f4:	462a      	mov	r2, r5
 80232f6:	404a      	eors	r2, r1
 80232f8:	f8c7 22ec 	str.w	r2, [r7, #748]	; 0x2ec
 80232fc:	e9d7 12ba 	ldrd	r1, r2, [r7, #744]	; 0x2e8
 8023300:	e9c3 1200 	strd	r1, r2, [r3]
 8023304:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8023308:	e9d3 2300 	ldrd	r2, r3, [r3]
 802330c:	0910      	lsrs	r0, r2, #4
 802330e:	0719      	lsls	r1, r3, #28
 8023310:	4301      	orrs	r1, r0
 8023312:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
 8023316:	0919      	lsrs	r1, r3, #4
 8023318:	0713      	lsls	r3, r2, #28
 802331a:	430b      	orrs	r3, r1
 802331c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8023320:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023328:	e9d7 12b8 	ldrd	r1, r2, [r7, #736]	; 0x2e0
 802332c:	e9c3 1200 	strd	r1, r2, [r3]
 8023330:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8023334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023338:	0b10      	lsrs	r0, r2, #12
 802333a:	0519      	lsls	r1, r3, #20
 802333c:	4301      	orrs	r1, r0
 802333e:	f8c7 12dc 	str.w	r1, [r7, #732]	; 0x2dc
 8023342:	0b19      	lsrs	r1, r3, #12
 8023344:	0513      	lsls	r3, r2, #20
 8023346:	430b      	orrs	r3, r1
 8023348:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
 802334c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023354:	e9d7 12b6 	ldrd	r1, r2, [r7, #728]	; 0x2d8
 8023358:	e9c3 1202 	strd	r1, r2, [r3, #8]
 802335c:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8023360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023364:	0f50      	lsrs	r0, r2, #29
 8023366:	00d9      	lsls	r1, r3, #3
 8023368:	4301      	orrs	r1, r0
 802336a:	f8c7 12d4 	str.w	r1, [r7, #724]	; 0x2d4
 802336e:	0f59      	lsrs	r1, r3, #29
 8023370:	00d3      	lsls	r3, r2, #3
 8023372:	430b      	orrs	r3, r1
 8023374:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 8023378:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802337c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023380:	e9d7 12b4 	ldrd	r1, r2, [r7, #720]	; 0x2d0
 8023384:	e9c3 1204 	strd	r1, r2, [r3, #16]
 8023388:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 802338c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023390:	0358      	lsls	r0, r3, #13
 8023392:	0cd1      	lsrs	r1, r2, #19
 8023394:	4301      	orrs	r1, r0
 8023396:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 802339a:	0351      	lsls	r1, r2, #13
 802339c:	0cdb      	lsrs	r3, r3, #19
 802339e:	430b      	orrs	r3, r1
 80233a0:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 80233a4:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80233a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80233ac:	e9d7 12b2 	ldrd	r1, r2, [r7, #712]	; 0x2c8
 80233b0:	e9c3 1206 	strd	r1, r2, [r3, #24]
 80233b4:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80233b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80233bc:	0758      	lsls	r0, r3, #29
 80233be:	08d1      	lsrs	r1, r2, #3
 80233c0:	4301      	orrs	r1, r0
 80233c2:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 80233c6:	0751      	lsls	r1, r2, #29
 80233c8:	08db      	lsrs	r3, r3, #3
 80233ca:	430b      	orrs	r3, r1
 80233cc:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 80233d0:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80233d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80233d8:	e9d7 12b0 	ldrd	r1, r2, [r7, #704]	; 0x2c0
 80233dc:	e9c3 1208 	strd	r1, r2, [r3, #32]
 80233e0:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80233e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80233e8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80233ec:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80233f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80233f4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80233f8:	ea80 0402 	eor.w	r4, r0, r2
 80233fc:	63bc      	str	r4, [r7, #56]	; 0x38
 80233fe:	404b      	eors	r3, r1
 8023400:	63fb      	str	r3, [r7, #60]	; 0x3c
 8023402:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8023406:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 802340a:	e9c2 3400 	strd	r3, r4, [r2]
 802340e:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023412:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023416:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 802341a:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802341e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023422:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8023426:	ea80 0402 	eor.w	r4, r0, r2
 802342a:	633c      	str	r4, [r7, #48]	; 0x30
 802342c:	404b      	eors	r3, r1
 802342e:	637b      	str	r3, [r7, #52]	; 0x34
 8023430:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8023434:	f607 12f8 	addw	r2, r7, #2552	; 0x9f8
 8023438:	e9c2 3400 	strd	r3, r4, [r2]
 802343c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023444:	e9d3 4500 	ldrd	r4, r5, [r3]
 8023448:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802344c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023450:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8023454:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8023458:	e9d3 2300 	ldrd	r2, r3, [r3]
 802345c:	ea00 0602 	and.w	r6, r0, r2
 8023460:	f8c7 62b8 	str.w	r6, [r7, #696]	; 0x2b8
 8023464:	400b      	ands	r3, r1
 8023466:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 802346a:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802346e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8023472:	681b      	ldr	r3, [r3, #0]
 8023474:	3328      	adds	r3, #40	; 0x28
 8023476:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 802347a:	4602      	mov	r2, r0
 802347c:	4062      	eors	r2, r4
 802347e:	f8c7 22b0 	str.w	r2, [r7, #688]	; 0x2b0
 8023482:	460a      	mov	r2, r1
 8023484:	406a      	eors	r2, r5
 8023486:	f8c7 22b4 	str.w	r2, [r7, #692]	; 0x2b4
 802348a:	e9d7 12ac 	ldrd	r1, r2, [r7, #688]	; 0x2b0
 802348e:	e9c3 1200 	strd	r1, r2, [r3]
 8023492:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802349a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 802349e:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80234a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80234a6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80234aa:	ea40 0402 	orr.w	r4, r0, r2
 80234ae:	f8c7 42a8 	str.w	r4, [r7, #680]	; 0x2a8
 80234b2:	430b      	orrs	r3, r1
 80234b4:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 80234b8:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80234bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80234c0:	681b      	ldr	r3, [r3, #0]
 80234c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80234c6:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 80234ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80234ce:	e9d7 45aa 	ldrd	r4, r5, [r7, #680]	; 0x2a8
 80234d2:	4620      	mov	r0, r4
 80234d4:	4050      	eors	r0, r2
 80234d6:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
 80234da:	4628      	mov	r0, r5
 80234dc:	4043      	eors	r3, r0
 80234de:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 80234e2:	e9d7 34a8 	ldrd	r3, r4, [r7, #672]	; 0x2a0
 80234e6:	e9c1 3400 	strd	r3, r4, [r1]
 80234ea:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80234ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80234f2:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80234f6:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80234fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80234fe:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8023502:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8023506:	e9d3 2300 	ldrd	r2, r3, [r3]
 802350a:	ea00 0602 	and.w	r6, r0, r2
 802350e:	f8c7 6298 	str.w	r6, [r7, #664]	; 0x298
 8023512:	400b      	ands	r3, r1
 8023514:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8023518:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802351c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8023520:	681b      	ldr	r3, [r3, #0]
 8023522:	3338      	adds	r3, #56	; 0x38
 8023524:	e9d7 01a6 	ldrd	r0, r1, [r7, #664]	; 0x298
 8023528:	4602      	mov	r2, r0
 802352a:	4062      	eors	r2, r4
 802352c:	f8c7 2290 	str.w	r2, [r7, #656]	; 0x290
 8023530:	460a      	mov	r2, r1
 8023532:	406a      	eors	r2, r5
 8023534:	f8c7 2294 	str.w	r2, [r7, #660]	; 0x294
 8023538:	e9d7 12a4 	ldrd	r1, r2, [r7, #656]	; 0x290
 802353c:	e9c3 1200 	strd	r1, r2, [r3]
 8023540:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023544:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023548:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 802354c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023550:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023558:	ea40 0402 	orr.w	r4, r0, r2
 802355c:	f8c7 4288 	str.w	r4, [r7, #648]	; 0x288
 8023560:	430b      	orrs	r3, r1
 8023562:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8023566:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802356a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 802356e:	681b      	ldr	r3, [r3, #0]
 8023570:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8023574:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8023578:	e9d3 2300 	ldrd	r2, r3, [r3]
 802357c:	e9d7 45a2 	ldrd	r4, r5, [r7, #648]	; 0x288
 8023580:	4620      	mov	r0, r4
 8023582:	4050      	eors	r0, r2
 8023584:	f8c7 0280 	str.w	r0, [r7, #640]	; 0x280
 8023588:	4628      	mov	r0, r5
 802358a:	4043      	eors	r3, r0
 802358c:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8023590:	e9d7 34a0 	ldrd	r3, r4, [r7, #640]	; 0x280
 8023594:	e9c1 3400 	strd	r3, r4, [r1]
 8023598:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802359c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80235a0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80235a4:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80235a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80235ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80235b0:	43d4      	mvns	r4, r2
 80235b2:	f8c7 4278 	str.w	r4, [r7, #632]	; 0x278
 80235b6:	43db      	mvns	r3, r3
 80235b8:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 80235bc:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80235c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80235c4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80235c8:	e9d7 569e 	ldrd	r5, r6, [r7, #632]	; 0x278
 80235cc:	462c      	mov	r4, r5
 80235ce:	4014      	ands	r4, r2
 80235d0:	f8c7 4270 	str.w	r4, [r7, #624]	; 0x270
 80235d4:	4634      	mov	r4, r6
 80235d6:	4023      	ands	r3, r4
 80235d8:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 80235dc:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80235e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80235e4:	681b      	ldr	r3, [r3, #0]
 80235e6:	3348      	adds	r3, #72	; 0x48
 80235e8:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	; 0x270
 80235ec:	4622      	mov	r2, r4
 80235ee:	4042      	eors	r2, r0
 80235f0:	f8c7 2268 	str.w	r2, [r7, #616]	; 0x268
 80235f4:	462a      	mov	r2, r5
 80235f6:	404a      	eors	r2, r1
 80235f8:	f8c7 226c 	str.w	r2, [r7, #620]	; 0x26c
 80235fc:	e9d7 129a 	ldrd	r1, r2, [r7, #616]	; 0x268
 8023600:	e9c3 1200 	strd	r1, r2, [r3]
 8023604:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8023608:	e9d3 2300 	ldrd	r2, r3, [r3]
 802360c:	0fd0      	lsrs	r0, r2, #31
 802360e:	0059      	lsls	r1, r3, #1
 8023610:	4301      	orrs	r1, r0
 8023612:	f8c7 1264 	str.w	r1, [r7, #612]	; 0x264
 8023616:	0fd9      	lsrs	r1, r3, #31
 8023618:	0053      	lsls	r3, r2, #1
 802361a:	430b      	orrs	r3, r1
 802361c:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8023620:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023628:	e9d7 1298 	ldrd	r1, r2, [r7, #608]	; 0x260
 802362c:	e9c3 1200 	strd	r1, r2, [r3]
 8023630:	f607 1368 	addw	r3, r7, #2408	; 0x968
 8023634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023638:	0e90      	lsrs	r0, r2, #26
 802363a:	0199      	lsls	r1, r3, #6
 802363c:	4301      	orrs	r1, r0
 802363e:	f8c7 125c 	str.w	r1, [r7, #604]	; 0x25c
 8023642:	0e99      	lsrs	r1, r3, #26
 8023644:	0193      	lsls	r3, r2, #6
 8023646:	430b      	orrs	r3, r1
 8023648:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 802364c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023654:	e9d7 1296 	ldrd	r1, r2, [r7, #600]	; 0x258
 8023658:	e9c3 1202 	strd	r1, r2, [r3, #8]
 802365c:	f607 1398 	addw	r3, r7, #2456	; 0x998
 8023660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023664:	09d0      	lsrs	r0, r2, #7
 8023666:	0659      	lsls	r1, r3, #25
 8023668:	4301      	orrs	r1, r0
 802366a:	f8c7 1254 	str.w	r1, [r7, #596]	; 0x254
 802366e:	09d9      	lsrs	r1, r3, #7
 8023670:	0653      	lsls	r3, r2, #25
 8023672:	430b      	orrs	r3, r1
 8023674:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8023678:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802367c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023680:	e9d7 1294 	ldrd	r1, r2, [r7, #592]	; 0x250
 8023684:	e9c3 1204 	strd	r1, r2, [r3, #16]
 8023688:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 802368c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023690:	0e10      	lsrs	r0, r2, #24
 8023692:	0219      	lsls	r1, r3, #8
 8023694:	4301      	orrs	r1, r0
 8023696:	f8c7 124c 	str.w	r1, [r7, #588]	; 0x24c
 802369a:	0e19      	lsrs	r1, r3, #24
 802369c:	0213      	lsls	r3, r2, #8
 802369e:	430b      	orrs	r3, r1
 80236a0:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80236a4:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80236a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80236ac:	e9d7 1292 	ldrd	r1, r2, [r7, #584]	; 0x248
 80236b0:	e9c3 1206 	strd	r1, r2, [r3, #24]
 80236b4:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 80236b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80236bc:	0b90      	lsrs	r0, r2, #14
 80236be:	0499      	lsls	r1, r3, #18
 80236c0:	4301      	orrs	r1, r0
 80236c2:	f8c7 1244 	str.w	r1, [r7, #580]	; 0x244
 80236c6:	0b99      	lsrs	r1, r3, #14
 80236c8:	0493      	lsls	r3, r2, #18
 80236ca:	430b      	orrs	r3, r1
 80236cc:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 80236d0:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80236d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80236d8:	e9d7 1290 	ldrd	r1, r2, [r7, #576]	; 0x240
 80236dc:	e9c3 1208 	strd	r1, r2, [r3, #32]
 80236e0:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80236e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80236e8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80236ec:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80236f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80236f4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80236f8:	ea80 0402 	eor.w	r4, r0, r2
 80236fc:	62bc      	str	r4, [r7, #40]	; 0x28
 80236fe:	404b      	eors	r3, r1
 8023700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8023702:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8023706:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 802370a:	e9c2 3400 	strd	r3, r4, [r2]
 802370e:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023712:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023716:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 802371a:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802371e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023722:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8023726:	ea80 0402 	eor.w	r4, r0, r2
 802372a:	623c      	str	r4, [r7, #32]
 802372c:	404b      	eors	r3, r1
 802372e:	627b      	str	r3, [r7, #36]	; 0x24
 8023730:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8023734:	f607 12f8 	addw	r2, r7, #2552	; 0x9f8
 8023738:	e9c2 3400 	strd	r3, r4, [r2]
 802373c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023740:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023744:	e9d3 4500 	ldrd	r4, r5, [r3]
 8023748:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802374c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023750:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8023754:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8023758:	e9d3 2300 	ldrd	r2, r3, [r3]
 802375c:	ea00 0602 	and.w	r6, r0, r2
 8023760:	f8c7 6238 	str.w	r6, [r7, #568]	; 0x238
 8023764:	400b      	ands	r3, r1
 8023766:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 802376a:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802376e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8023772:	681b      	ldr	r3, [r3, #0]
 8023774:	3350      	adds	r3, #80	; 0x50
 8023776:	e9d7 018e 	ldrd	r0, r1, [r7, #568]	; 0x238
 802377a:	4602      	mov	r2, r0
 802377c:	4062      	eors	r2, r4
 802377e:	f8c7 2230 	str.w	r2, [r7, #560]	; 0x230
 8023782:	460a      	mov	r2, r1
 8023784:	406a      	eors	r2, r5
 8023786:	f8c7 2234 	str.w	r2, [r7, #564]	; 0x234
 802378a:	e9d7 128c 	ldrd	r1, r2, [r7, #560]	; 0x230
 802378e:	e9c3 1200 	strd	r1, r2, [r3]
 8023792:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802379a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 802379e:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80237a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80237a6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80237aa:	ea40 0402 	orr.w	r4, r0, r2
 80237ae:	f8c7 4228 	str.w	r4, [r7, #552]	; 0x228
 80237b2:	430b      	orrs	r3, r1
 80237b4:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 80237b8:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80237bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80237c0:	681b      	ldr	r3, [r3, #0]
 80237c2:	f103 0158 	add.w	r1, r3, #88	; 0x58
 80237c6:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 80237ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80237ce:	e9d7 458a 	ldrd	r4, r5, [r7, #552]	; 0x228
 80237d2:	4620      	mov	r0, r4
 80237d4:	4050      	eors	r0, r2
 80237d6:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
 80237da:	4628      	mov	r0, r5
 80237dc:	4043      	eors	r3, r0
 80237de:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80237e2:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 80237e6:	e9c1 3400 	strd	r3, r4, [r1]
 80237ea:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80237ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80237f2:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80237f6:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80237fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80237fe:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8023802:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8023806:	e9d3 2300 	ldrd	r2, r3, [r3]
 802380a:	ea00 0602 	and.w	r6, r0, r2
 802380e:	f8c7 6218 	str.w	r6, [r7, #536]	; 0x218
 8023812:	400b      	ands	r3, r1
 8023814:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8023818:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802381c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8023820:	681b      	ldr	r3, [r3, #0]
 8023822:	3360      	adds	r3, #96	; 0x60
 8023824:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8023828:	4602      	mov	r2, r0
 802382a:	4062      	eors	r2, r4
 802382c:	f8c7 2210 	str.w	r2, [r7, #528]	; 0x210
 8023830:	460a      	mov	r2, r1
 8023832:	406a      	eors	r2, r5
 8023834:	f8c7 2214 	str.w	r2, [r7, #532]	; 0x214
 8023838:	e9d7 1284 	ldrd	r1, r2, [r7, #528]	; 0x210
 802383c:	e9c3 1200 	strd	r1, r2, [r3]
 8023840:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023844:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023848:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 802384c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023858:	ea40 0402 	orr.w	r4, r0, r2
 802385c:	f8c7 4208 	str.w	r4, [r7, #520]	; 0x208
 8023860:	430b      	orrs	r3, r1
 8023862:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8023866:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802386a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 802386e:	681b      	ldr	r3, [r3, #0]
 8023870:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8023874:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8023878:	e9d3 2300 	ldrd	r2, r3, [r3]
 802387c:	e9d7 4582 	ldrd	r4, r5, [r7, #520]	; 0x208
 8023880:	4620      	mov	r0, r4
 8023882:	4050      	eors	r0, r2
 8023884:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
 8023888:	4628      	mov	r0, r5
 802388a:	4043      	eors	r3, r0
 802388c:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8023890:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	; 0x200
 8023894:	e9c1 3400 	strd	r3, r4, [r1]
 8023898:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802389c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80238a0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80238a4:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80238a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80238ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80238b0:	43d4      	mvns	r4, r2
 80238b2:	f8c7 41f8 	str.w	r4, [r7, #504]	; 0x1f8
 80238b6:	43db      	mvns	r3, r3
 80238b8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 80238bc:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80238c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80238c4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80238c8:	e9d7 567e 	ldrd	r5, r6, [r7, #504]	; 0x1f8
 80238cc:	462c      	mov	r4, r5
 80238ce:	4014      	ands	r4, r2
 80238d0:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 80238d4:	4634      	mov	r4, r6
 80238d6:	4023      	ands	r3, r4
 80238d8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 80238dc:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80238e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80238e4:	681b      	ldr	r3, [r3, #0]
 80238e6:	3370      	adds	r3, #112	; 0x70
 80238e8:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 80238ec:	4622      	mov	r2, r4
 80238ee:	4042      	eors	r2, r0
 80238f0:	f8c7 21e8 	str.w	r2, [r7, #488]	; 0x1e8
 80238f4:	462a      	mov	r2, r5
 80238f6:	404a      	eors	r2, r1
 80238f8:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
 80238fc:	e9d7 127a 	ldrd	r1, r2, [r7, #488]	; 0x1e8
 8023900:	e9c3 1200 	strd	r1, r2, [r3]
 8023904:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8023908:	e9d3 2300 	ldrd	r2, r3, [r3]
 802390c:	0950      	lsrs	r0, r2, #5
 802390e:	06d9      	lsls	r1, r3, #27
 8023910:	4301      	orrs	r1, r0
 8023912:	f8c7 11e4 	str.w	r1, [r7, #484]	; 0x1e4
 8023916:	0959      	lsrs	r1, r3, #5
 8023918:	06d3      	lsls	r3, r2, #27
 802391a:	430b      	orrs	r3, r1
 802391c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8023920:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023924:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023928:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 802392c:	e9c3 1200 	strd	r1, r2, [r3]
 8023930:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8023934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023938:	0118      	lsls	r0, r3, #4
 802393a:	0f11      	lsrs	r1, r2, #28
 802393c:	4301      	orrs	r1, r0
 802393e:	f8c7 11d8 	str.w	r1, [r7, #472]	; 0x1d8
 8023942:	0111      	lsls	r1, r2, #4
 8023944:	0f1b      	lsrs	r3, r3, #28
 8023946:	430b      	orrs	r3, r1
 8023948:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 802394c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023954:	e9d7 1276 	ldrd	r1, r2, [r7, #472]	; 0x1d8
 8023958:	e9c3 1202 	strd	r1, r2, [r3, #8]
 802395c:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8023960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023964:	0d90      	lsrs	r0, r2, #22
 8023966:	0299      	lsls	r1, r3, #10
 8023968:	4301      	orrs	r1, r0
 802396a:	f8c7 11d4 	str.w	r1, [r7, #468]	; 0x1d4
 802396e:	0d99      	lsrs	r1, r3, #22
 8023970:	0293      	lsls	r3, r2, #10
 8023972:	430b      	orrs	r3, r1
 8023974:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8023978:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 802397c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023980:	e9d7 1274 	ldrd	r1, r2, [r7, #464]	; 0x1d0
 8023984:	e9c3 1204 	strd	r1, r2, [r3, #16]
 8023988:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 802398c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023990:	0c50      	lsrs	r0, r2, #17
 8023992:	03d9      	lsls	r1, r3, #15
 8023994:	4301      	orrs	r1, r0
 8023996:	f8c7 11cc 	str.w	r1, [r7, #460]	; 0x1cc
 802399a:	0c59      	lsrs	r1, r3, #17
 802399c:	03d3      	lsls	r3, r2, #15
 802399e:	430b      	orrs	r3, r1
 80239a0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80239a4:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80239a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80239ac:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 80239b0:	e9c3 1206 	strd	r1, r2, [r3, #24]
 80239b4:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 80239b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80239bc:	0618      	lsls	r0, r3, #24
 80239be:	0a11      	lsrs	r1, r2, #8
 80239c0:	4301      	orrs	r1, r0
 80239c2:	f8c7 11c0 	str.w	r1, [r7, #448]	; 0x1c0
 80239c6:	0611      	lsls	r1, r2, #24
 80239c8:	0a1b      	lsrs	r3, r3, #8
 80239ca:	430b      	orrs	r3, r1
 80239cc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80239d0:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80239d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80239d8:	e9d7 1270 	ldrd	r1, r2, [r7, #448]	; 0x1c0
 80239dc:	e9c3 1208 	strd	r1, r2, [r3, #32]
 80239e0:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80239e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80239e8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80239ec:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80239f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80239f4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80239f8:	ea80 0402 	eor.w	r4, r0, r2
 80239fc:	61bc      	str	r4, [r7, #24]
 80239fe:	404b      	eors	r3, r1
 8023a00:	61fb      	str	r3, [r7, #28]
 8023a02:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8023a06:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 8023a0a:	e9c2 3400 	strd	r3, r4, [r2]
 8023a0e:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023a12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023a16:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8023a1a:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023a1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023a22:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8023a26:	ea80 0402 	eor.w	r4, r0, r2
 8023a2a:	613c      	str	r4, [r7, #16]
 8023a2c:	404b      	eors	r3, r1
 8023a2e:	617b      	str	r3, [r7, #20]
 8023a30:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8023a34:	f607 12f8 	addw	r2, r7, #2552	; 0x9f8
 8023a38:	e9c2 3400 	strd	r3, r4, [r2]
 8023a3c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023a40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023a44:	e9d3 4500 	ldrd	r4, r5, [r3]
 8023a48:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023a4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023a50:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8023a54:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8023a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a5c:	ea00 0602 	and.w	r6, r0, r2
 8023a60:	f8c7 61b8 	str.w	r6, [r7, #440]	; 0x1b8
 8023a64:	400b      	ands	r3, r1
 8023a66:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8023a6a:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023a6e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8023a72:	681b      	ldr	r3, [r3, #0]
 8023a74:	3378      	adds	r3, #120	; 0x78
 8023a76:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8023a7a:	4602      	mov	r2, r0
 8023a7c:	4062      	eors	r2, r4
 8023a7e:	f8c7 21b0 	str.w	r2, [r7, #432]	; 0x1b0
 8023a82:	460a      	mov	r2, r1
 8023a84:	406a      	eors	r2, r5
 8023a86:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8023a8a:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8023a8e:	e9c3 1200 	strd	r1, r2, [r3]
 8023a92:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023a96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023a9a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8023a9e:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023aa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023aa6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8023aaa:	ea40 0402 	orr.w	r4, r0, r2
 8023aae:	f8c7 41a8 	str.w	r4, [r7, #424]	; 0x1a8
 8023ab2:	430b      	orrs	r3, r1
 8023ab4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8023ab8:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023abc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8023ac0:	681b      	ldr	r3, [r3, #0]
 8023ac2:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8023ac6:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8023aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ace:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8023ad2:	4620      	mov	r0, r4
 8023ad4:	4050      	eors	r0, r2
 8023ad6:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
 8023ada:	4628      	mov	r0, r5
 8023adc:	4043      	eors	r3, r0
 8023ade:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8023ae2:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 8023ae6:	e9c1 3400 	strd	r3, r4, [r1]
 8023aea:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023aee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023af2:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8023af6:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023afa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023afe:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8023b02:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8023b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b0a:	ea00 0602 	and.w	r6, r0, r2
 8023b0e:	f8c7 6198 	str.w	r6, [r7, #408]	; 0x198
 8023b12:	400b      	ands	r3, r1
 8023b14:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8023b18:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023b1c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8023b20:	681b      	ldr	r3, [r3, #0]
 8023b22:	3388      	adds	r3, #136	; 0x88
 8023b24:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8023b28:	4602      	mov	r2, r0
 8023b2a:	4062      	eors	r2, r4
 8023b2c:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
 8023b30:	460a      	mov	r2, r1
 8023b32:	406a      	eors	r2, r5
 8023b34:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8023b38:	e9d7 1264 	ldrd	r1, r2, [r7, #400]	; 0x190
 8023b3c:	e9c3 1200 	strd	r1, r2, [r3]
 8023b40:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023b44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023b48:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8023b4c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b58:	ea40 0402 	orr.w	r4, r0, r2
 8023b5c:	f8c7 4188 	str.w	r4, [r7, #392]	; 0x188
 8023b60:	430b      	orrs	r3, r1
 8023b62:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8023b66:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023b6a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8023b6e:	681b      	ldr	r3, [r3, #0]
 8023b70:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8023b74:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8023b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b7c:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 8023b80:	4620      	mov	r0, r4
 8023b82:	4050      	eors	r0, r2
 8023b84:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
 8023b88:	4628      	mov	r0, r5
 8023b8a:	4043      	eors	r3, r0
 8023b8c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8023b90:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 8023b94:	e9c1 3400 	strd	r3, r4, [r1]
 8023b98:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023b9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023ba0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8023ba4:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023ba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023bb0:	43d4      	mvns	r4, r2
 8023bb2:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8023bb6:	43db      	mvns	r3, r3
 8023bb8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8023bbc:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023bc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023bc4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8023bc8:	e9d7 565e 	ldrd	r5, r6, [r7, #376]	; 0x178
 8023bcc:	462c      	mov	r4, r5
 8023bce:	4014      	ands	r4, r2
 8023bd0:	f8c7 4170 	str.w	r4, [r7, #368]	; 0x170
 8023bd4:	4634      	mov	r4, r6
 8023bd6:	4023      	ands	r3, r4
 8023bd8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8023bdc:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023be0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8023be4:	681b      	ldr	r3, [r3, #0]
 8023be6:	3398      	adds	r3, #152	; 0x98
 8023be8:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	; 0x170
 8023bec:	4622      	mov	r2, r4
 8023bee:	4042      	eors	r2, r0
 8023bf0:	f8c7 2168 	str.w	r2, [r7, #360]	; 0x168
 8023bf4:	462a      	mov	r2, r5
 8023bf6:	404a      	eors	r2, r1
 8023bf8:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8023bfc:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8023c00:	e9c3 1200 	strd	r1, r2, [r3]
 8023c04:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8023c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c0c:	0798      	lsls	r0, r3, #30
 8023c0e:	0891      	lsrs	r1, r2, #2
 8023c10:	4301      	orrs	r1, r0
 8023c12:	f8c7 1160 	str.w	r1, [r7, #352]	; 0x160
 8023c16:	0791      	lsls	r1, r2, #30
 8023c18:	089b      	lsrs	r3, r3, #2
 8023c1a:	430b      	orrs	r3, r1
 8023c1c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8023c20:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023c24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023c28:	e9d7 1258 	ldrd	r1, r2, [r7, #352]	; 0x160
 8023c2c:	e9c3 1200 	strd	r1, r2, [r3]
 8023c30:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8023c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c38:	05d8      	lsls	r0, r3, #23
 8023c3a:	0a51      	lsrs	r1, r2, #9
 8023c3c:	4301      	orrs	r1, r0
 8023c3e:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 8023c42:	05d1      	lsls	r1, r2, #23
 8023c44:	0a5b      	lsrs	r3, r3, #9
 8023c46:	430b      	orrs	r3, r1
 8023c48:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8023c4c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023c50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023c54:	e9d7 1256 	ldrd	r1, r2, [r7, #344]	; 0x158
 8023c58:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8023c5c:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8023c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c64:	01d8      	lsls	r0, r3, #7
 8023c66:	0e51      	lsrs	r1, r2, #25
 8023c68:	4301      	orrs	r1, r0
 8023c6a:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 8023c6e:	01d1      	lsls	r1, r2, #7
 8023c70:	0e5b      	lsrs	r3, r3, #25
 8023c72:	430b      	orrs	r3, r1
 8023c74:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8023c78:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023c7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023c80:	e9d7 1254 	ldrd	r1, r2, [r7, #336]	; 0x150
 8023c84:	e9c3 1204 	strd	r1, r2, [r3, #16]
 8023c88:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8023c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c90:	0258      	lsls	r0, r3, #9
 8023c92:	0dd1      	lsrs	r1, r2, #23
 8023c94:	4301      	orrs	r1, r0
 8023c96:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8023c9a:	0251      	lsls	r1, r2, #9
 8023c9c:	0ddb      	lsrs	r3, r3, #23
 8023c9e:	430b      	orrs	r3, r1
 8023ca0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8023ca4:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023cac:	e9d7 1252 	ldrd	r1, r2, [r7, #328]	; 0x148
 8023cb0:	e9c3 1206 	strd	r1, r2, [r3, #24]
 8023cb4:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 8023cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023cbc:	0f90      	lsrs	r0, r2, #30
 8023cbe:	0099      	lsls	r1, r3, #2
 8023cc0:	4301      	orrs	r1, r0
 8023cc2:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 8023cc6:	0f99      	lsrs	r1, r3, #30
 8023cc8:	0093      	lsls	r3, r2, #2
 8023cca:	430b      	orrs	r3, r1
 8023ccc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8023cd0:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023cd8:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 8023cdc:	e9c3 1208 	strd	r1, r2, [r3, #32]
 8023ce0:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023ce4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023ce8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8023cec:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023cf4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8023cf8:	ea80 0402 	eor.w	r4, r0, r2
 8023cfc:	60bc      	str	r4, [r7, #8]
 8023cfe:	404b      	eors	r3, r1
 8023d00:	60fb      	str	r3, [r7, #12]
 8023d02:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8023d06:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 8023d0a:	e9c2 3400 	strd	r3, r4, [r2]
 8023d0e:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023d12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023d16:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8023d1a:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023d1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023d22:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8023d26:	ea80 0402 	eor.w	r4, r0, r2
 8023d2a:	603c      	str	r4, [r7, #0]
 8023d2c:	404b      	eors	r3, r1
 8023d2e:	607b      	str	r3, [r7, #4]
 8023d30:	e9d7 3400 	ldrd	r3, r4, [r7]
 8023d34:	f607 12f8 	addw	r2, r7, #2552	; 0x9f8
 8023d38:	e9c2 3400 	strd	r3, r4, [r2]
 8023d3c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023d40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023d44:	e9d3 4500 	ldrd	r4, r5, [r3]
 8023d48:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023d4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023d50:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8023d54:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8023d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d5c:	ea00 0602 	and.w	r6, r0, r2
 8023d60:	f8c7 6138 	str.w	r6, [r7, #312]	; 0x138
 8023d64:	400b      	ands	r3, r1
 8023d66:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8023d6a:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023d6e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8023d72:	681b      	ldr	r3, [r3, #0]
 8023d74:	33a0      	adds	r3, #160	; 0xa0
 8023d76:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8023d7a:	4602      	mov	r2, r0
 8023d7c:	4062      	eors	r2, r4
 8023d7e:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8023d82:	460a      	mov	r2, r1
 8023d84:	406a      	eors	r2, r5
 8023d86:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8023d8a:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 8023d8e:	e9c3 1200 	strd	r1, r2, [r3]
 8023d92:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023d96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023d9a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8023d9e:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023da2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023da6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8023daa:	ea40 0402 	orr.w	r4, r0, r2
 8023dae:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 8023db2:	430b      	orrs	r3, r1
 8023db4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8023db8:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023dbc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8023dc0:	681b      	ldr	r3, [r3, #0]
 8023dc2:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 8023dc6:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8023dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023dce:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8023dd2:	4620      	mov	r0, r4
 8023dd4:	4050      	eors	r0, r2
 8023dd6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
 8023dda:	4628      	mov	r0, r5
 8023ddc:	4043      	eors	r3, r0
 8023dde:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8023de2:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8023de6:	e9c1 3400 	strd	r3, r4, [r1]
 8023dea:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023dee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023df2:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8023df6:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023dfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023dfe:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8023e02:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8023e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e0a:	ea00 0602 	and.w	r6, r0, r2
 8023e0e:	f8c7 6118 	str.w	r6, [r7, #280]	; 0x118
 8023e12:	400b      	ands	r3, r1
 8023e14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8023e18:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023e1c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8023e20:	681b      	ldr	r3, [r3, #0]
 8023e22:	33b0      	adds	r3, #176	; 0xb0
 8023e24:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8023e28:	4602      	mov	r2, r0
 8023e2a:	4062      	eors	r2, r4
 8023e2c:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8023e30:	460a      	mov	r2, r1
 8023e32:	406a      	eors	r2, r5
 8023e34:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8023e38:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8023e3c:	e9c3 1200 	strd	r1, r2, [r3]
 8023e40:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023e44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023e48:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8023e4c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023e50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e58:	ea40 0402 	orr.w	r4, r0, r2
 8023e5c:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
 8023e60:	430b      	orrs	r3, r1
 8023e62:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8023e66:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023e6a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8023e6e:	681b      	ldr	r3, [r3, #0]
 8023e70:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8023e74:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8023e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e7c:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8023e80:	4620      	mov	r0, r4
 8023e82:	4050      	eors	r0, r2
 8023e84:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 8023e88:	4628      	mov	r0, r5
 8023e8a:	4043      	eors	r3, r0
 8023e8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8023e90:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8023e94:	e9c1 3400 	strd	r3, r4, [r1]
 8023e98:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023e9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023ea0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8023ea4:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023ea8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023eb0:	ea6f 0a02 	mvn.w	sl, r2
 8023eb4:	ea6f 0b03 	mvn.w	fp, r3
 8023eb8:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023ebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8023ec0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8023ec4:	ea0a 0802 	and.w	r8, sl, r2
 8023ec8:	ea0b 0903 	and.w	r9, fp, r3
 8023ecc:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023ed0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8023ed4:	681b      	ldr	r3, [r3, #0]
 8023ed6:	33c0      	adds	r3, #192	; 0xc0
 8023ed8:	ea80 0208 	eor.w	r2, r0, r8
 8023edc:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8023ee0:	ea81 0209 	eor.w	r2, r1, r9
 8023ee4:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8023ee8:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8023eec:	e9c3 1200 	strd	r1, r2, [r3]
        s[0] ^= hash_keccak_r[i+1];
 8023ef0:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023ef4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8023ef8:	681b      	ldr	r3, [r3, #0]
 8023efa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8023efe:	f897 3a0f 	ldrb.w	r3, [r7, #2575]	; 0xa0f
 8023f02:	3301      	adds	r3, #1
 8023f04:	4a13      	ldr	r2, [pc, #76]	; (8023f54 <BlockSha3+0x33b0>)
 8023f06:	00db      	lsls	r3, r3, #3
 8023f08:	4413      	add	r3, r2
 8023f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f0e:	ea80 0402 	eor.w	r4, r0, r2
 8023f12:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8023f16:	404b      	eors	r3, r1
 8023f18:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8023f1c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8023f20:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8023f24:	681b      	ldr	r3, [r3, #0]
 8023f26:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8023f2a:	e9c3 1200 	strd	r1, r2, [r3]
    for (i = 0; i < 24; i += 2)
 8023f2e:	f897 3a0f 	ldrb.w	r3, [r7, #2575]	; 0xa0f
 8023f32:	3302      	adds	r3, #2
 8023f34:	f887 3a0f 	strb.w	r3, [r7, #2575]	; 0xa0f
 8023f38:	f897 3a0f 	ldrb.w	r3, [r7, #2575]	; 0xa0f
 8023f3c:	2b17      	cmp	r3, #23
 8023f3e:	f67c ae40 	bls.w	8020bc2 <BlockSha3+0x1e>
    }
}
 8023f42:	bf00      	nop
 8023f44:	bf00      	nop
 8023f46:	f507 6721 	add.w	r7, r7, #2576	; 0xa10
 8023f4a:	46bd      	mov	sp, r7
 8023f4c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8023f50:	4770      	bx	lr
 8023f52:	bf00      	nop
 8023f54:	0802d788 	.word	0x0802d788

08023f58 <Load64Unaligned>:
#endif /* WOLFSSL_SHA3_SMALL */
#endif /* !WOLFSSL_ARMASM */

static WC_INLINE word64 Load64Unaligned(const unsigned char *a)
{
 8023f58:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8023f5c:	b09d      	sub	sp, #116	; 0x74
 8023f5e:	af00      	add	r7, sp, #0
 8023f60:	66f8      	str	r0, [r7, #108]	; 0x6c
    return ((word64)a[0] <<  0) |
 8023f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8023f64:	781b      	ldrb	r3, [r3, #0]
 8023f66:	b2db      	uxtb	r3, r3
 8023f68:	2200      	movs	r2, #0
 8023f6a:	663b      	str	r3, [r7, #96]	; 0x60
 8023f6c:	667a      	str	r2, [r7, #100]	; 0x64
           ((word64)a[1] <<  8) |
 8023f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8023f70:	3301      	adds	r3, #1
 8023f72:	781b      	ldrb	r3, [r3, #0]
 8023f74:	b2db      	uxtb	r3, r3
 8023f76:	2200      	movs	r2, #0
 8023f78:	461c      	mov	r4, r3
 8023f7a:	4615      	mov	r5, r2
 8023f7c:	f04f 0200 	mov.w	r2, #0
 8023f80:	f04f 0300 	mov.w	r3, #0
 8023f84:	022b      	lsls	r3, r5, #8
 8023f86:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8023f8a:	0222      	lsls	r2, r4, #8
    return ((word64)a[0] <<  0) |
 8023f8c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8023f90:	4621      	mov	r1, r4
 8023f92:	4311      	orrs	r1, r2
 8023f94:	65b9      	str	r1, [r7, #88]	; 0x58
 8023f96:	4629      	mov	r1, r5
 8023f98:	4319      	orrs	r1, r3
 8023f9a:	65f9      	str	r1, [r7, #92]	; 0x5c
           ((word64)a[2] << 16) |
 8023f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8023f9e:	3302      	adds	r3, #2
 8023fa0:	781b      	ldrb	r3, [r3, #0]
 8023fa2:	b2db      	uxtb	r3, r3
 8023fa4:	2200      	movs	r2, #0
 8023fa6:	4698      	mov	r8, r3
 8023fa8:	4691      	mov	r9, r2
 8023faa:	f04f 0200 	mov.w	r2, #0
 8023fae:	f04f 0300 	mov.w	r3, #0
 8023fb2:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8023fb6:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8023fba:	ea4f 4208 	mov.w	r2, r8, lsl #16
           ((word64)a[1] <<  8) |
 8023fbe:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8023fc2:	4621      	mov	r1, r4
 8023fc4:	4311      	orrs	r1, r2
 8023fc6:	6539      	str	r1, [r7, #80]	; 0x50
 8023fc8:	4629      	mov	r1, r5
 8023fca:	4319      	orrs	r1, r3
 8023fcc:	6579      	str	r1, [r7, #84]	; 0x54
           ((word64)a[3] << 24) |
 8023fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8023fd0:	3303      	adds	r3, #3
 8023fd2:	781b      	ldrb	r3, [r3, #0]
 8023fd4:	b2db      	uxtb	r3, r3
 8023fd6:	2200      	movs	r2, #0
 8023fd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8023fda:	64fa      	str	r2, [r7, #76]	; 0x4c
 8023fdc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8023fe0:	460b      	mov	r3, r1
 8023fe2:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8023fe6:	460b      	mov	r3, r1
 8023fe8:	ea4f 6a03 	mov.w	sl, r3, lsl #24
           ((word64)a[2] << 16) |
 8023fec:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8023ff0:	460b      	mov	r3, r1
 8023ff2:	ea43 030a 	orr.w	r3, r3, sl
 8023ff6:	643b      	str	r3, [r7, #64]	; 0x40
 8023ff8:	4613      	mov	r3, r2
 8023ffa:	ea43 030b 	orr.w	r3, r3, fp
 8023ffe:	647b      	str	r3, [r7, #68]	; 0x44
           ((word64)a[4] << 32) |
 8024000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8024002:	3304      	adds	r3, #4
 8024004:	781b      	ldrb	r3, [r3, #0]
 8024006:	b2db      	uxtb	r3, r3
 8024008:	2200      	movs	r2, #0
 802400a:	63bb      	str	r3, [r7, #56]	; 0x38
 802400c:	63fa      	str	r2, [r7, #60]	; 0x3c
 802400e:	f04f 0200 	mov.w	r2, #0
 8024012:	f04f 0300 	mov.w	r3, #0
 8024016:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8024018:	000b      	movs	r3, r1
 802401a:	2200      	movs	r2, #0
           ((word64)a[3] << 24) |
 802401c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8024020:	4621      	mov	r1, r4
 8024022:	4311      	orrs	r1, r2
 8024024:	6339      	str	r1, [r7, #48]	; 0x30
 8024026:	4629      	mov	r1, r5
 8024028:	4319      	orrs	r1, r3
 802402a:	6379      	str	r1, [r7, #52]	; 0x34
           ((word64)a[5] << 40) |
 802402c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802402e:	3305      	adds	r3, #5
 8024030:	781b      	ldrb	r3, [r3, #0]
 8024032:	b2db      	uxtb	r3, r3
 8024034:	2200      	movs	r2, #0
 8024036:	62bb      	str	r3, [r7, #40]	; 0x28
 8024038:	62fa      	str	r2, [r7, #44]	; 0x2c
 802403a:	f04f 0200 	mov.w	r2, #0
 802403e:	f04f 0300 	mov.w	r3, #0
 8024042:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8024044:	020b      	lsls	r3, r1, #8
 8024046:	2200      	movs	r2, #0
           ((word64)a[4] << 32) |
 8024048:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 802404c:	4621      	mov	r1, r4
 802404e:	4311      	orrs	r1, r2
 8024050:	6239      	str	r1, [r7, #32]
 8024052:	4629      	mov	r1, r5
 8024054:	4319      	orrs	r1, r3
 8024056:	6279      	str	r1, [r7, #36]	; 0x24
           ((word64)a[6] << 48) |
 8024058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802405a:	3306      	adds	r3, #6
 802405c:	781b      	ldrb	r3, [r3, #0]
 802405e:	b2db      	uxtb	r3, r3
 8024060:	2200      	movs	r2, #0
 8024062:	61bb      	str	r3, [r7, #24]
 8024064:	61fa      	str	r2, [r7, #28]
 8024066:	f04f 0200 	mov.w	r2, #0
 802406a:	f04f 0300 	mov.w	r3, #0
 802406e:	69b9      	ldr	r1, [r7, #24]
 8024070:	040b      	lsls	r3, r1, #16
 8024072:	2200      	movs	r2, #0
           ((word64)a[5] << 40) |
 8024074:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8024078:	4621      	mov	r1, r4
 802407a:	4311      	orrs	r1, r2
 802407c:	6139      	str	r1, [r7, #16]
 802407e:	4629      	mov	r1, r5
 8024080:	4319      	orrs	r1, r3
 8024082:	6179      	str	r1, [r7, #20]
           ((word64)a[7] << 56);
 8024084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8024086:	3307      	adds	r3, #7
 8024088:	781b      	ldrb	r3, [r3, #0]
 802408a:	b2db      	uxtb	r3, r3
 802408c:	2200      	movs	r2, #0
 802408e:	60bb      	str	r3, [r7, #8]
 8024090:	60fa      	str	r2, [r7, #12]
 8024092:	f04f 0200 	mov.w	r2, #0
 8024096:	f04f 0300 	mov.w	r3, #0
 802409a:	68b9      	ldr	r1, [r7, #8]
 802409c:	060b      	lsls	r3, r1, #24
 802409e:	2200      	movs	r2, #0
           ((word64)a[6] << 48) |
 80240a0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80240a4:	4621      	mov	r1, r4
 80240a6:	4311      	orrs	r1, r2
 80240a8:	6039      	str	r1, [r7, #0]
 80240aa:	4629      	mov	r1, r5
 80240ac:	4319      	orrs	r1, r3
 80240ae:	6079      	str	r1, [r7, #4]
 80240b0:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80240b4:	4610      	mov	r0, r2
 80240b6:	4619      	mov	r1, r3
 80240b8:	3774      	adds	r7, #116	; 0x74
 80240ba:	46bd      	mov	sp, r7
 80240bc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80240c0:	4770      	bx	lr

080240c2 <Load64BitBigEndian>:
 *
 * a  Array of bytes.
 * returns a 64-bit integer.
 */
static word64 Load64BitBigEndian(const byte* a)
{
 80240c2:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80240c6:	b085      	sub	sp, #20
 80240c8:	af00      	add	r7, sp, #0
 80240ca:	6078      	str	r0, [r7, #4]

    return n;
#elif ((WOLFSSL_GENERAL_ALIGNMENT > 0) && (WOLFSSL_GENERAL_ALIGNMENT == 4))
    word64 n;

    n  =          *(word32*) a;
 80240cc:	6879      	ldr	r1, [r7, #4]
 80240ce:	6809      	ldr	r1, [r1, #0]
 80240d0:	2000      	movs	r0, #0
 80240d2:	460a      	mov	r2, r1
 80240d4:	4603      	mov	r3, r0
 80240d6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    n |= ((word64)*(word32*)(a + 4)) << 32;
 80240da:	687b      	ldr	r3, [r7, #4]
 80240dc:	3304      	adds	r3, #4
 80240de:	681b      	ldr	r3, [r3, #0]
 80240e0:	2200      	movs	r2, #0
 80240e2:	4698      	mov	r8, r3
 80240e4:	4691      	mov	r9, r2
 80240e6:	f04f 0200 	mov.w	r2, #0
 80240ea:	f04f 0300 	mov.w	r3, #0
 80240ee:	4643      	mov	r3, r8
 80240f0:	2200      	movs	r2, #0
 80240f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80240f6:	ea40 0402 	orr.w	r4, r0, r2
 80240fa:	ea41 0503 	orr.w	r5, r1, r3
 80240fe:	e9c7 4502 	strd	r4, r5, [r7, #8]

    return n;
 8024102:	e9d7 2302 	ldrd	r2, r3, [r7, #8]

    return n;
#else
    return *(const word64*)a;
#endif
}
 8024106:	4610      	mov	r0, r2
 8024108:	4619      	mov	r1, r3
 802410a:	3714      	adds	r7, #20
 802410c:	46bd      	mov	sp, r7
 802410e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8024112:	4770      	bx	lr

08024114 <InitSha3>:
 *
 * sha3   wc_Sha3 object holding state.
 * returns 0 on success.
 */
static int InitSha3(wc_Sha3* sha3)
{
 8024114:	b480      	push	{r7}
 8024116:	b085      	sub	sp, #20
 8024118:	af00      	add	r7, sp, #0
 802411a:	6078      	str	r0, [r7, #4]
    int i;

    for (i = 0; i < 25; i++)
 802411c:	2300      	movs	r3, #0
 802411e:	60fb      	str	r3, [r7, #12]
 8024120:	e00c      	b.n	802413c <InitSha3+0x28>
        sha3->s[i] = 0;
 8024122:	687a      	ldr	r2, [r7, #4]
 8024124:	68fb      	ldr	r3, [r7, #12]
 8024126:	00db      	lsls	r3, r3, #3
 8024128:	18d1      	adds	r1, r2, r3
 802412a:	f04f 0200 	mov.w	r2, #0
 802412e:	f04f 0300 	mov.w	r3, #0
 8024132:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 25; i++)
 8024136:	68fb      	ldr	r3, [r7, #12]
 8024138:	3301      	adds	r3, #1
 802413a:	60fb      	str	r3, [r7, #12]
 802413c:	68fb      	ldr	r3, [r7, #12]
 802413e:	2b18      	cmp	r3, #24
 8024140:	ddef      	ble.n	8024122 <InitSha3+0xe>
    sha3->i = 0;
 8024142:	687b      	ldr	r3, [r7, #4]
 8024144:	2200      	movs	r2, #0
 8024146:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
#ifdef WOLFSSL_HASH_FLAGS
    sha3->flags = 0;
#endif

    return 0;
 802414a:	2300      	movs	r3, #0
}
 802414c:	4618      	mov	r0, r3
 802414e:	3714      	adds	r7, #20
 8024150:	46bd      	mov	sp, r7
 8024152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024156:	4770      	bx	lr

08024158 <Sha3Update>:
 * len   Length of the message data.
 * p     Number of 64-bit numbers in a block of data to process.
 * returns 0 on success.
 */
static int Sha3Update(wc_Sha3* sha3, const byte* data, word32 len, byte p)
{
 8024158:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 802415c:	b088      	sub	sp, #32
 802415e:	af00      	add	r7, sp, #0
 8024160:	60f8      	str	r0, [r7, #12]
 8024162:	60b9      	str	r1, [r7, #8]
 8024164:	607a      	str	r2, [r7, #4]
 8024166:	70fb      	strb	r3, [r7, #3]
    word32 i;
    byte l;
    byte *t;

    if (sha3->i > 0) {
 8024168:	68fb      	ldr	r3, [r7, #12]
 802416a:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 802416e:	2b00      	cmp	r3, #0
 8024170:	f000 809e 	beq.w	80242b0 <Sha3Update+0x158>
        l = p * 8 - sha3->i;
 8024174:	78fb      	ldrb	r3, [r7, #3]
 8024176:	00db      	lsls	r3, r3, #3
 8024178:	b2da      	uxtb	r2, r3
 802417a:	68fb      	ldr	r3, [r7, #12]
 802417c:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8024180:	1ad3      	subs	r3, r2, r3
 8024182:	76fb      	strb	r3, [r7, #27]
        if (l > len) {
 8024184:	7efb      	ldrb	r3, [r7, #27]
 8024186:	687a      	ldr	r2, [r7, #4]
 8024188:	429a      	cmp	r2, r3
 802418a:	d201      	bcs.n	8024190 <Sha3Update+0x38>
            l = (byte)len;
 802418c:	687b      	ldr	r3, [r7, #4]
 802418e:	76fb      	strb	r3, [r7, #27]
        }

        t = &sha3->t[sha3->i];
 8024190:	68fb      	ldr	r3, [r7, #12]
 8024192:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8024196:	33c8      	adds	r3, #200	; 0xc8
 8024198:	68fa      	ldr	r2, [r7, #12]
 802419a:	4413      	add	r3, r2
 802419c:	617b      	str	r3, [r7, #20]
        for (i = 0; i < l; i++)
 802419e:	2300      	movs	r3, #0
 80241a0:	61fb      	str	r3, [r7, #28]
 80241a2:	e00a      	b.n	80241ba <Sha3Update+0x62>
            t[i] = data[i];
 80241a4:	68ba      	ldr	r2, [r7, #8]
 80241a6:	69fb      	ldr	r3, [r7, #28]
 80241a8:	441a      	add	r2, r3
 80241aa:	6979      	ldr	r1, [r7, #20]
 80241ac:	69fb      	ldr	r3, [r7, #28]
 80241ae:	440b      	add	r3, r1
 80241b0:	7812      	ldrb	r2, [r2, #0]
 80241b2:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < l; i++)
 80241b4:	69fb      	ldr	r3, [r7, #28]
 80241b6:	3301      	adds	r3, #1
 80241b8:	61fb      	str	r3, [r7, #28]
 80241ba:	7efb      	ldrb	r3, [r7, #27]
 80241bc:	69fa      	ldr	r2, [r7, #28]
 80241be:	429a      	cmp	r2, r3
 80241c0:	d3f0      	bcc.n	80241a4 <Sha3Update+0x4c>
        data += i;
 80241c2:	68ba      	ldr	r2, [r7, #8]
 80241c4:	69fb      	ldr	r3, [r7, #28]
 80241c6:	4413      	add	r3, r2
 80241c8:	60bb      	str	r3, [r7, #8]
        len -= i;
 80241ca:	687a      	ldr	r2, [r7, #4]
 80241cc:	69fb      	ldr	r3, [r7, #28]
 80241ce:	1ad3      	subs	r3, r2, r3
 80241d0:	607b      	str	r3, [r7, #4]
        sha3->i += i;
 80241d2:	68fb      	ldr	r3, [r7, #12]
 80241d4:	f893 2190 	ldrb.w	r2, [r3, #400]	; 0x190
 80241d8:	69fb      	ldr	r3, [r7, #28]
 80241da:	b2db      	uxtb	r3, r3
 80241dc:	4413      	add	r3, r2
 80241de:	b2da      	uxtb	r2, r3
 80241e0:	68fb      	ldr	r3, [r7, #12]
 80241e2:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190

        if (sha3->i == p * 8) {
 80241e6:	68fb      	ldr	r3, [r7, #12]
 80241e8:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 80241ec:	461a      	mov	r2, r3
 80241ee:	78fb      	ldrb	r3, [r7, #3]
 80241f0:	00db      	lsls	r3, r3, #3
 80241f2:	429a      	cmp	r2, r3
 80241f4:	d15c      	bne.n	80242b0 <Sha3Update+0x158>
            for (i = 0; i < p; i++)
 80241f6:	2300      	movs	r3, #0
 80241f8:	61fb      	str	r3, [r7, #28]
 80241fa:	e01b      	b.n	8024234 <Sha3Update+0xdc>
                sha3->s[i] ^= Load64BitBigEndian(sha3->t + 8 * i);
 80241fc:	68fb      	ldr	r3, [r7, #12]
 80241fe:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 8024202:	69fb      	ldr	r3, [r7, #28]
 8024204:	00db      	lsls	r3, r3, #3
 8024206:	4413      	add	r3, r2
 8024208:	4618      	mov	r0, r3
 802420a:	f7ff ff5a 	bl	80240c2 <Load64BitBigEndian>
 802420e:	68fa      	ldr	r2, [r7, #12]
 8024210:	69fb      	ldr	r3, [r7, #28]
 8024212:	00db      	lsls	r3, r3, #3
 8024214:	4413      	add	r3, r2
 8024216:	e9d3 2300 	ldrd	r2, r3, [r3]
 802421a:	ea80 0802 	eor.w	r8, r0, r2
 802421e:	ea81 0903 	eor.w	r9, r1, r3
 8024222:	68fa      	ldr	r2, [r7, #12]
 8024224:	69fb      	ldr	r3, [r7, #28]
 8024226:	00db      	lsls	r3, r3, #3
 8024228:	4413      	add	r3, r2
 802422a:	e9c3 8900 	strd	r8, r9, [r3]
            for (i = 0; i < p; i++)
 802422e:	69fb      	ldr	r3, [r7, #28]
 8024230:	3301      	adds	r3, #1
 8024232:	61fb      	str	r3, [r7, #28]
 8024234:	78fb      	ldrb	r3, [r7, #3]
 8024236:	69fa      	ldr	r2, [r7, #28]
 8024238:	429a      	cmp	r2, r3
 802423a:	d3df      	bcc.n	80241fc <Sha3Update+0xa4>
            BlockSha3(sha3->s);
 802423c:	68fb      	ldr	r3, [r7, #12]
 802423e:	4618      	mov	r0, r3
 8024240:	f7fc fcb0 	bl	8020ba4 <BlockSha3>
            sha3->i = 0;
 8024244:	68fb      	ldr	r3, [r7, #12]
 8024246:	2200      	movs	r2, #0
 8024248:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
        }
    }
    while (len >= ((word32)(p * 8))) {
 802424c:	e030      	b.n	80242b0 <Sha3Update+0x158>
        for (i = 0; i < p; i++)
 802424e:	2300      	movs	r3, #0
 8024250:	61fb      	str	r3, [r7, #28]
 8024252:	e019      	b.n	8024288 <Sha3Update+0x130>
            sha3->s[i] ^= Load64Unaligned(data + 8 * i);
 8024254:	69fb      	ldr	r3, [r7, #28]
 8024256:	00db      	lsls	r3, r3, #3
 8024258:	68ba      	ldr	r2, [r7, #8]
 802425a:	4413      	add	r3, r2
 802425c:	4618      	mov	r0, r3
 802425e:	f7ff fe7b 	bl	8023f58 <Load64Unaligned>
 8024262:	68fa      	ldr	r2, [r7, #12]
 8024264:	69fb      	ldr	r3, [r7, #28]
 8024266:	00db      	lsls	r3, r3, #3
 8024268:	4413      	add	r3, r2
 802426a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802426e:	ea80 0402 	eor.w	r4, r0, r2
 8024272:	ea81 0503 	eor.w	r5, r1, r3
 8024276:	68fa      	ldr	r2, [r7, #12]
 8024278:	69fb      	ldr	r3, [r7, #28]
 802427a:	00db      	lsls	r3, r3, #3
 802427c:	4413      	add	r3, r2
 802427e:	e9c3 4500 	strd	r4, r5, [r3]
        for (i = 0; i < p; i++)
 8024282:	69fb      	ldr	r3, [r7, #28]
 8024284:	3301      	adds	r3, #1
 8024286:	61fb      	str	r3, [r7, #28]
 8024288:	78fb      	ldrb	r3, [r7, #3]
 802428a:	69fa      	ldr	r2, [r7, #28]
 802428c:	429a      	cmp	r2, r3
 802428e:	d3e1      	bcc.n	8024254 <Sha3Update+0xfc>
        BlockSha3(sha3->s);
 8024290:	68fb      	ldr	r3, [r7, #12]
 8024292:	4618      	mov	r0, r3
 8024294:	f7fc fc86 	bl	8020ba4 <BlockSha3>
        len -= p * 8;
 8024298:	78fb      	ldrb	r3, [r7, #3]
 802429a:	00db      	lsls	r3, r3, #3
 802429c:	461a      	mov	r2, r3
 802429e:	687b      	ldr	r3, [r7, #4]
 80242a0:	1a9b      	subs	r3, r3, r2
 80242a2:	607b      	str	r3, [r7, #4]
        data += p * 8;
 80242a4:	78fb      	ldrb	r3, [r7, #3]
 80242a6:	00db      	lsls	r3, r3, #3
 80242a8:	461a      	mov	r2, r3
 80242aa:	68bb      	ldr	r3, [r7, #8]
 80242ac:	4413      	add	r3, r2
 80242ae:	60bb      	str	r3, [r7, #8]
    while (len >= ((word32)(p * 8))) {
 80242b0:	78fb      	ldrb	r3, [r7, #3]
 80242b2:	00db      	lsls	r3, r3, #3
 80242b4:	461a      	mov	r2, r3
 80242b6:	687b      	ldr	r3, [r7, #4]
 80242b8:	4293      	cmp	r3, r2
 80242ba:	d2c8      	bcs.n	802424e <Sha3Update+0xf6>
    }
    for (i = 0; i < len; i++)
 80242bc:	2300      	movs	r3, #0
 80242be:	61fb      	str	r3, [r7, #28]
 80242c0:	e00c      	b.n	80242dc <Sha3Update+0x184>
        sha3->t[i] = data[i];
 80242c2:	68ba      	ldr	r2, [r7, #8]
 80242c4:	69fb      	ldr	r3, [r7, #28]
 80242c6:	4413      	add	r3, r2
 80242c8:	7819      	ldrb	r1, [r3, #0]
 80242ca:	68fa      	ldr	r2, [r7, #12]
 80242cc:	69fb      	ldr	r3, [r7, #28]
 80242ce:	4413      	add	r3, r2
 80242d0:	33c8      	adds	r3, #200	; 0xc8
 80242d2:	460a      	mov	r2, r1
 80242d4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < len; i++)
 80242d6:	69fb      	ldr	r3, [r7, #28]
 80242d8:	3301      	adds	r3, #1
 80242da:	61fb      	str	r3, [r7, #28]
 80242dc:	69fa      	ldr	r2, [r7, #28]
 80242de:	687b      	ldr	r3, [r7, #4]
 80242e0:	429a      	cmp	r2, r3
 80242e2:	d3ee      	bcc.n	80242c2 <Sha3Update+0x16a>
    sha3->i += i;
 80242e4:	68fb      	ldr	r3, [r7, #12]
 80242e6:	f893 2190 	ldrb.w	r2, [r3, #400]	; 0x190
 80242ea:	69fb      	ldr	r3, [r7, #28]
 80242ec:	b2db      	uxtb	r3, r3
 80242ee:	4413      	add	r3, r2
 80242f0:	b2da      	uxtb	r2, r3
 80242f2:	68fb      	ldr	r3, [r7, #12]
 80242f4:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190

    return 0;
 80242f8:	2300      	movs	r3, #0
}
 80242fa:	4618      	mov	r0, r3
 80242fc:	3720      	adds	r7, #32
 80242fe:	46bd      	mov	sp, r7
 8024300:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08024304 <Sha3Final>:
 * p     Number of 64-bit numbers in a block of data to process.
 * len   Number of bytes in output.
 * returns 0 on success.
 */
static int Sha3Final(wc_Sha3* sha3, byte padChar, byte* hash, byte p, word32 l)
{
 8024304:	b5b0      	push	{r4, r5, r7, lr}
 8024306:	b088      	sub	sp, #32
 8024308:	af00      	add	r7, sp, #0
 802430a:	60f8      	str	r0, [r7, #12]
 802430c:	607a      	str	r2, [r7, #4]
 802430e:	461a      	mov	r2, r3
 8024310:	460b      	mov	r3, r1
 8024312:	72fb      	strb	r3, [r7, #11]
 8024314:	4613      	mov	r3, r2
 8024316:	72bb      	strb	r3, [r7, #10]
    word32 rate = p * 8;
 8024318:	7abb      	ldrb	r3, [r7, #10]
 802431a:	00db      	lsls	r3, r3, #3
 802431c:	617b      	str	r3, [r7, #20]
    word32 j;
    word32 i;

    sha3->t[rate - 1]  = 0x00;
 802431e:	697b      	ldr	r3, [r7, #20]
 8024320:	3b01      	subs	r3, #1
 8024322:	68fa      	ldr	r2, [r7, #12]
 8024324:	4413      	add	r3, r2
 8024326:	2200      	movs	r2, #0
 8024328:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
#ifdef WOLFSSL_HASH_FLAGS
    if (p == WC_SHA3_256_COUNT && sha3->flags & WC_HASH_SHA3_KECCAK256)
        padChar = 0x01;
#endif
    sha3->t[sha3->i ]  = padChar;
 802432c:	68fb      	ldr	r3, [r7, #12]
 802432e:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8024332:	461a      	mov	r2, r3
 8024334:	68fb      	ldr	r3, [r7, #12]
 8024336:	4413      	add	r3, r2
 8024338:	7afa      	ldrb	r2, [r7, #11]
 802433a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
    sha3->t[rate - 1] |= 0x80;
 802433e:	697b      	ldr	r3, [r7, #20]
 8024340:	3b01      	subs	r3, #1
 8024342:	68fa      	ldr	r2, [r7, #12]
 8024344:	4413      	add	r3, r2
 8024346:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
 802434a:	697b      	ldr	r3, [r7, #20]
 802434c:	3b01      	subs	r3, #1
 802434e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8024352:	b2d1      	uxtb	r1, r2
 8024354:	68fa      	ldr	r2, [r7, #12]
 8024356:	4413      	add	r3, r2
 8024358:	460a      	mov	r2, r1
 802435a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
    for (i=sha3->i + 1; i < rate - 1; i++)
 802435e:	68fb      	ldr	r3, [r7, #12]
 8024360:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8024364:	3301      	adds	r3, #1
 8024366:	61bb      	str	r3, [r7, #24]
 8024368:	e008      	b.n	802437c <Sha3Final+0x78>
        sha3->t[i] = 0;
 802436a:	68fa      	ldr	r2, [r7, #12]
 802436c:	69bb      	ldr	r3, [r7, #24]
 802436e:	4413      	add	r3, r2
 8024370:	33c8      	adds	r3, #200	; 0xc8
 8024372:	2200      	movs	r2, #0
 8024374:	701a      	strb	r2, [r3, #0]
    for (i=sha3->i + 1; i < rate - 1; i++)
 8024376:	69bb      	ldr	r3, [r7, #24]
 8024378:	3301      	adds	r3, #1
 802437a:	61bb      	str	r3, [r7, #24]
 802437c:	697b      	ldr	r3, [r7, #20]
 802437e:	3b01      	subs	r3, #1
 8024380:	69ba      	ldr	r2, [r7, #24]
 8024382:	429a      	cmp	r2, r3
 8024384:	d3f1      	bcc.n	802436a <Sha3Final+0x66>
    for (i = 0; i < p; i++)
 8024386:	2300      	movs	r3, #0
 8024388:	61bb      	str	r3, [r7, #24]
 802438a:	e01b      	b.n	80243c4 <Sha3Final+0xc0>
        sha3->s[i] ^= Load64BitBigEndian(sha3->t + 8 * i);
 802438c:	68fb      	ldr	r3, [r7, #12]
 802438e:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 8024392:	69bb      	ldr	r3, [r7, #24]
 8024394:	00db      	lsls	r3, r3, #3
 8024396:	4413      	add	r3, r2
 8024398:	4618      	mov	r0, r3
 802439a:	f7ff fe92 	bl	80240c2 <Load64BitBigEndian>
 802439e:	68fa      	ldr	r2, [r7, #12]
 80243a0:	69bb      	ldr	r3, [r7, #24]
 80243a2:	00db      	lsls	r3, r3, #3
 80243a4:	4413      	add	r3, r2
 80243a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80243aa:	ea80 0402 	eor.w	r4, r0, r2
 80243ae:	ea81 0503 	eor.w	r5, r1, r3
 80243b2:	68fa      	ldr	r2, [r7, #12]
 80243b4:	69bb      	ldr	r3, [r7, #24]
 80243b6:	00db      	lsls	r3, r3, #3
 80243b8:	4413      	add	r3, r2
 80243ba:	e9c3 4500 	strd	r4, r5, [r3]
    for (i = 0; i < p; i++)
 80243be:	69bb      	ldr	r3, [r7, #24]
 80243c0:	3301      	adds	r3, #1
 80243c2:	61bb      	str	r3, [r7, #24]
 80243c4:	7abb      	ldrb	r3, [r7, #10]
 80243c6:	69ba      	ldr	r2, [r7, #24]
 80243c8:	429a      	cmp	r2, r3
 80243ca:	d3df      	bcc.n	802438c <Sha3Final+0x88>
    for (j = 0; l - j >= rate; j += rate) {
 80243cc:	2300      	movs	r3, #0
 80243ce:	61fb      	str	r3, [r7, #28]
 80243d0:	e00f      	b.n	80243f2 <Sha3Final+0xee>
        BlockSha3(sha3->s);
 80243d2:	68fb      	ldr	r3, [r7, #12]
 80243d4:	4618      	mov	r0, r3
 80243d6:	f7fc fbe5 	bl	8020ba4 <BlockSha3>
    #if defined(BIG_ENDIAN_ORDER)
        ByteReverseWords64((word64*)(hash + j), sha3->s, rate);
    #else
        XMEMCPY(hash + j, sha3->s, rate);
 80243da:	687a      	ldr	r2, [r7, #4]
 80243dc:	69fb      	ldr	r3, [r7, #28]
 80243de:	4413      	add	r3, r2
 80243e0:	68f9      	ldr	r1, [r7, #12]
 80243e2:	697a      	ldr	r2, [r7, #20]
 80243e4:	4618      	mov	r0, r3
 80243e6:	f006 f86f 	bl	802a4c8 <memcpy>
    for (j = 0; l - j >= rate; j += rate) {
 80243ea:	69fa      	ldr	r2, [r7, #28]
 80243ec:	697b      	ldr	r3, [r7, #20]
 80243ee:	4413      	add	r3, r2
 80243f0:	61fb      	str	r3, [r7, #28]
 80243f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80243f4:	69fb      	ldr	r3, [r7, #28]
 80243f6:	1ad3      	subs	r3, r2, r3
 80243f8:	697a      	ldr	r2, [r7, #20]
 80243fa:	429a      	cmp	r2, r3
 80243fc:	d9e9      	bls.n	80243d2 <Sha3Final+0xce>
    #endif
    }
    if (j != l) {
 80243fe:	69fa      	ldr	r2, [r7, #28]
 8024400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024402:	429a      	cmp	r2, r3
 8024404:	d00d      	beq.n	8024422 <Sha3Final+0x11e>
        BlockSha3(sha3->s);
 8024406:	68fb      	ldr	r3, [r7, #12]
 8024408:	4618      	mov	r0, r3
 802440a:	f7fc fbcb 	bl	8020ba4 <BlockSha3>
    #if defined(BIG_ENDIAN_ORDER)
        ByteReverseWords64(sha3->s, sha3->s, rate);
    #endif
        XMEMCPY(hash + j, sha3->s, l - j);
 802440e:	687a      	ldr	r2, [r7, #4]
 8024410:	69fb      	ldr	r3, [r7, #28]
 8024412:	18d0      	adds	r0, r2, r3
 8024414:	68f9      	ldr	r1, [r7, #12]
 8024416:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8024418:	69fb      	ldr	r3, [r7, #28]
 802441a:	1ad3      	subs	r3, r2, r3
 802441c:	461a      	mov	r2, r3
 802441e:	f006 f853 	bl	802a4c8 <memcpy>
    }
    return 0;
 8024422:	2300      	movs	r3, #0
}
 8024424:	4618      	mov	r0, r3
 8024426:	3720      	adds	r7, #32
 8024428:	46bd      	mov	sp, r7
 802442a:	bdb0      	pop	{r4, r5, r7, pc}

0802442c <wc_InitSha3>:
 * heap   Heap reference for dynamic memory allocation. (Used in async ops.)
 * devId  Device identifier for asynchronous operation.
 * returns 0 on success.
 */
static int wc_InitSha3(wc_Sha3* sha3, void* heap, int devId)
{
 802442c:	b580      	push	{r7, lr}
 802442e:	b086      	sub	sp, #24
 8024430:	af00      	add	r7, sp, #0
 8024432:	60f8      	str	r0, [r7, #12]
 8024434:	60b9      	str	r1, [r7, #8]
 8024436:	607a      	str	r2, [r7, #4]
    int ret = 0;
 8024438:	2300      	movs	r3, #0
 802443a:	617b      	str	r3, [r7, #20]

    if (sha3 == NULL)
 802443c:	68fb      	ldr	r3, [r7, #12]
 802443e:	2b00      	cmp	r3, #0
 8024440:	d102      	bne.n	8024448 <wc_InitSha3+0x1c>
        return BAD_FUNC_ARG;
 8024442:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8024446:	e00d      	b.n	8024464 <wc_InitSha3+0x38>

    sha3->heap = heap;
 8024448:	68fb      	ldr	r3, [r7, #12]
 802444a:	68ba      	ldr	r2, [r7, #8]
 802444c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    ret = InitSha3(sha3);
 8024450:	68f8      	ldr	r0, [r7, #12]
 8024452:	f7ff fe5f 	bl	8024114 <InitSha3>
 8024456:	6178      	str	r0, [r7, #20]
    if (ret != 0)
 8024458:	697b      	ldr	r3, [r7, #20]
 802445a:	2b00      	cmp	r3, #0
 802445c:	d001      	beq.n	8024462 <wc_InitSha3+0x36>
        return ret;
 802445e:	697b      	ldr	r3, [r7, #20]
 8024460:	e000      	b.n	8024464 <wc_InitSha3+0x38>
                        WOLFSSL_ASYNC_MARKER_SHA3, sha3->heap, devId);
#else
    (void)devId;
#endif /* WOLFSSL_ASYNC_CRYPT */

    return ret;
 8024462:	697b      	ldr	r3, [r7, #20]
}
 8024464:	4618      	mov	r0, r3
 8024466:	3718      	adds	r7, #24
 8024468:	46bd      	mov	sp, r7
 802446a:	bd80      	pop	{r7, pc}

0802446c <wc_Sha3Update>:
 * len   Length of the message data.
 * p     Number of 64-bit numbers in a block of data to process.
 * returns 0 on success.
 */
static int wc_Sha3Update(wc_Sha3* sha3, const byte* data, word32 len, byte p)
{
 802446c:	b580      	push	{r7, lr}
 802446e:	b086      	sub	sp, #24
 8024470:	af00      	add	r7, sp, #0
 8024472:	60f8      	str	r0, [r7, #12]
 8024474:	60b9      	str	r1, [r7, #8]
 8024476:	607a      	str	r2, [r7, #4]
 8024478:	70fb      	strb	r3, [r7, #3]
    int ret;

    if (sha3 == NULL || (data == NULL && len > 0)) {
 802447a:	68fb      	ldr	r3, [r7, #12]
 802447c:	2b00      	cmp	r3, #0
 802447e:	d005      	beq.n	802448c <wc_Sha3Update+0x20>
 8024480:	68bb      	ldr	r3, [r7, #8]
 8024482:	2b00      	cmp	r3, #0
 8024484:	d105      	bne.n	8024492 <wc_Sha3Update+0x26>
 8024486:	687b      	ldr	r3, [r7, #4]
 8024488:	2b00      	cmp	r3, #0
 802448a:	d002      	beq.n	8024492 <wc_Sha3Update+0x26>
        return BAD_FUNC_ARG;
 802448c:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8024490:	e00f      	b.n	80244b2 <wc_Sha3Update+0x46>
    }

    if (data == NULL && len == 0) {
 8024492:	68bb      	ldr	r3, [r7, #8]
 8024494:	2b00      	cmp	r3, #0
 8024496:	d104      	bne.n	80244a2 <wc_Sha3Update+0x36>
 8024498:	687b      	ldr	r3, [r7, #4]
 802449a:	2b00      	cmp	r3, #0
 802449c:	d101      	bne.n	80244a2 <wc_Sha3Update+0x36>
        /* valid, but do nothing */
        return 0;
 802449e:	2300      	movs	r3, #0
 80244a0:	e007      	b.n	80244b2 <wc_Sha3Update+0x46>
        }
    #endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    ret = Sha3Update(sha3, data, len, p);
 80244a2:	78fb      	ldrb	r3, [r7, #3]
 80244a4:	687a      	ldr	r2, [r7, #4]
 80244a6:	68b9      	ldr	r1, [r7, #8]
 80244a8:	68f8      	ldr	r0, [r7, #12]
 80244aa:	f7ff fe55 	bl	8024158 <Sha3Update>
 80244ae:	6178      	str	r0, [r7, #20]

    return ret;
 80244b0:	697b      	ldr	r3, [r7, #20]
}
 80244b2:	4618      	mov	r0, r3
 80244b4:	3718      	adds	r7, #24
 80244b6:	46bd      	mov	sp, r7
 80244b8:	bd80      	pop	{r7, pc}

080244ba <wc_Sha3Final>:
 * p     Number of 64-bit numbers in a block of data to process.
 * len   Number of bytes in output.
 * returns 0 on success.
 */
static int wc_Sha3Final(wc_Sha3* sha3, byte* hash, byte p, byte len)
{
 80244ba:	b580      	push	{r7, lr}
 80244bc:	b088      	sub	sp, #32
 80244be:	af02      	add	r7, sp, #8
 80244c0:	60f8      	str	r0, [r7, #12]
 80244c2:	60b9      	str	r1, [r7, #8]
 80244c4:	4611      	mov	r1, r2
 80244c6:	461a      	mov	r2, r3
 80244c8:	460b      	mov	r3, r1
 80244ca:	71fb      	strb	r3, [r7, #7]
 80244cc:	4613      	mov	r3, r2
 80244ce:	71bb      	strb	r3, [r7, #6]
    int ret;

    if (sha3 == NULL || hash == NULL) {
 80244d0:	68fb      	ldr	r3, [r7, #12]
 80244d2:	2b00      	cmp	r3, #0
 80244d4:	d002      	beq.n	80244dc <wc_Sha3Final+0x22>
 80244d6:	68bb      	ldr	r3, [r7, #8]
 80244d8:	2b00      	cmp	r3, #0
 80244da:	d102      	bne.n	80244e2 <wc_Sha3Final+0x28>
        return BAD_FUNC_ARG;
 80244dc:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80244e0:	e012      	b.n	8024508 <wc_Sha3Final+0x4e>
        }
    #endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    ret = Sha3Final(sha3, 0x06, hash, p, (word32)len);
 80244e2:	79bb      	ldrb	r3, [r7, #6]
 80244e4:	79fa      	ldrb	r2, [r7, #7]
 80244e6:	9300      	str	r3, [sp, #0]
 80244e8:	4613      	mov	r3, r2
 80244ea:	68ba      	ldr	r2, [r7, #8]
 80244ec:	2106      	movs	r1, #6
 80244ee:	68f8      	ldr	r0, [r7, #12]
 80244f0:	f7ff ff08 	bl	8024304 <Sha3Final>
 80244f4:	6178      	str	r0, [r7, #20]
    if (ret != 0)
 80244f6:	697b      	ldr	r3, [r7, #20]
 80244f8:	2b00      	cmp	r3, #0
 80244fa:	d001      	beq.n	8024500 <wc_Sha3Final+0x46>
        return ret;
 80244fc:	697b      	ldr	r3, [r7, #20]
 80244fe:	e003      	b.n	8024508 <wc_Sha3Final+0x4e>

    return InitSha3(sha3);  /* reset state */
 8024500:	68f8      	ldr	r0, [r7, #12]
 8024502:	f7ff fe07 	bl	8024114 <InitSha3>
 8024506:	4603      	mov	r3, r0
}
 8024508:	4618      	mov	r0, r3
 802450a:	3718      	adds	r7, #24
 802450c:	46bd      	mov	sp, r7
 802450e:	bd80      	pop	{r7, pc}

08024510 <wc_Sha3Free>:
 *
 * sha3  wc_Sha3 object holding state.
 * returns 0 on success.
 */
static void wc_Sha3Free(wc_Sha3* sha3)
{
 8024510:	b480      	push	{r7}
 8024512:	b083      	sub	sp, #12
 8024514:	af00      	add	r7, sp, #0
 8024516:	6078      	str	r0, [r7, #4]
    if (sha3 == NULL)
        return;

    wolfAsync_DevCtxFree(&sha3->asyncDev, WOLFSSL_ASYNC_MARKER_SHA3);
#endif /* WOLFSSL_ASYNC_CRYPT */
}
 8024518:	bf00      	nop
 802451a:	370c      	adds	r7, #12
 802451c:	46bd      	mov	sp, r7
 802451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024522:	4770      	bx	lr

08024524 <wc_InitSha3_224>:
 * heap   Heap reference for dynamic memory allocation. (Used in async ops.)
 * devId  Device identifier for asynchronous operation.
 * returns 0 on success.
 */
int wc_InitSha3_224(wc_Sha3* sha3, void* heap, int devId)
{
 8024524:	b580      	push	{r7, lr}
 8024526:	b084      	sub	sp, #16
 8024528:	af00      	add	r7, sp, #0
 802452a:	60f8      	str	r0, [r7, #12]
 802452c:	60b9      	str	r1, [r7, #8]
 802452e:	607a      	str	r2, [r7, #4]
    return wc_InitSha3(sha3, heap, devId);
 8024530:	687a      	ldr	r2, [r7, #4]
 8024532:	68b9      	ldr	r1, [r7, #8]
 8024534:	68f8      	ldr	r0, [r7, #12]
 8024536:	f7ff ff79 	bl	802442c <wc_InitSha3>
 802453a:	4603      	mov	r3, r0
}
 802453c:	4618      	mov	r0, r3
 802453e:	3710      	adds	r7, #16
 8024540:	46bd      	mov	sp, r7
 8024542:	bd80      	pop	{r7, pc}

08024544 <wc_Sha3_224_Update>:
 * data  Message data to be hashed.
 * len   Length of the message data.
 * returns 0 on success.
 */
int wc_Sha3_224_Update(wc_Sha3* sha3, const byte* data, word32 len)
{
 8024544:	b580      	push	{r7, lr}
 8024546:	b084      	sub	sp, #16
 8024548:	af00      	add	r7, sp, #0
 802454a:	60f8      	str	r0, [r7, #12]
 802454c:	60b9      	str	r1, [r7, #8]
 802454e:	607a      	str	r2, [r7, #4]
    return wc_Sha3Update(sha3, data, len, WC_SHA3_224_COUNT);
 8024550:	2312      	movs	r3, #18
 8024552:	687a      	ldr	r2, [r7, #4]
 8024554:	68b9      	ldr	r1, [r7, #8]
 8024556:	68f8      	ldr	r0, [r7, #12]
 8024558:	f7ff ff88 	bl	802446c <wc_Sha3Update>
 802455c:	4603      	mov	r3, r0
}
 802455e:	4618      	mov	r0, r3
 8024560:	3710      	adds	r7, #16
 8024562:	46bd      	mov	sp, r7
 8024564:	bd80      	pop	{r7, pc}

08024566 <wc_Sha3_224_Final>:
 * sha3  wc_Sha3 object holding state.
 * hash  Buffer to hold the hash result. Must be at least 28 bytes.
 * returns 0 on success.
 */
int wc_Sha3_224_Final(wc_Sha3* sha3, byte* hash)
{
 8024566:	b580      	push	{r7, lr}
 8024568:	b082      	sub	sp, #8
 802456a:	af00      	add	r7, sp, #0
 802456c:	6078      	str	r0, [r7, #4]
 802456e:	6039      	str	r1, [r7, #0]
    return wc_Sha3Final(sha3, hash, WC_SHA3_224_COUNT, WC_SHA3_224_DIGEST_SIZE);
 8024570:	231c      	movs	r3, #28
 8024572:	2212      	movs	r2, #18
 8024574:	6839      	ldr	r1, [r7, #0]
 8024576:	6878      	ldr	r0, [r7, #4]
 8024578:	f7ff ff9f 	bl	80244ba <wc_Sha3Final>
 802457c:	4603      	mov	r3, r0
}
 802457e:	4618      	mov	r0, r3
 8024580:	3708      	adds	r7, #8
 8024582:	46bd      	mov	sp, r7
 8024584:	bd80      	pop	{r7, pc}

08024586 <wc_Sha3_224_Free>:
 *
 * sha3  wc_Sha3 object holding state.
 * returns 0 on success.
 */
void wc_Sha3_224_Free(wc_Sha3* sha3)
{
 8024586:	b580      	push	{r7, lr}
 8024588:	b082      	sub	sp, #8
 802458a:	af00      	add	r7, sp, #0
 802458c:	6078      	str	r0, [r7, #4]
    wc_Sha3Free(sha3);
 802458e:	6878      	ldr	r0, [r7, #4]
 8024590:	f7ff ffbe 	bl	8024510 <wc_Sha3Free>
}
 8024594:	bf00      	nop
 8024596:	3708      	adds	r7, #8
 8024598:	46bd      	mov	sp, r7
 802459a:	bd80      	pop	{r7, pc}

0802459c <wc_InitSha3_256>:
 * heap   Heap reference for dynamic memory allocation. (Used in async ops.)
 * devId  Device identifier for asynchronous operation.
 * returns 0 on success.
 */
int wc_InitSha3_256(wc_Sha3* sha3, void* heap, int devId)
{
 802459c:	b580      	push	{r7, lr}
 802459e:	b084      	sub	sp, #16
 80245a0:	af00      	add	r7, sp, #0
 80245a2:	60f8      	str	r0, [r7, #12]
 80245a4:	60b9      	str	r1, [r7, #8]
 80245a6:	607a      	str	r2, [r7, #4]
    return wc_InitSha3(sha3, heap, devId);
 80245a8:	687a      	ldr	r2, [r7, #4]
 80245aa:	68b9      	ldr	r1, [r7, #8]
 80245ac:	68f8      	ldr	r0, [r7, #12]
 80245ae:	f7ff ff3d 	bl	802442c <wc_InitSha3>
 80245b2:	4603      	mov	r3, r0
}
 80245b4:	4618      	mov	r0, r3
 80245b6:	3710      	adds	r7, #16
 80245b8:	46bd      	mov	sp, r7
 80245ba:	bd80      	pop	{r7, pc}

080245bc <wc_Sha3_256_Update>:
 * data  Message data to be hashed.
 * len   Length of the message data.
 * returns 0 on success.
 */
int wc_Sha3_256_Update(wc_Sha3* sha3, const byte* data, word32 len)
{
 80245bc:	b580      	push	{r7, lr}
 80245be:	b084      	sub	sp, #16
 80245c0:	af00      	add	r7, sp, #0
 80245c2:	60f8      	str	r0, [r7, #12]
 80245c4:	60b9      	str	r1, [r7, #8]
 80245c6:	607a      	str	r2, [r7, #4]
    return wc_Sha3Update(sha3, data, len, WC_SHA3_256_COUNT);
 80245c8:	2311      	movs	r3, #17
 80245ca:	687a      	ldr	r2, [r7, #4]
 80245cc:	68b9      	ldr	r1, [r7, #8]
 80245ce:	68f8      	ldr	r0, [r7, #12]
 80245d0:	f7ff ff4c 	bl	802446c <wc_Sha3Update>
 80245d4:	4603      	mov	r3, r0
}
 80245d6:	4618      	mov	r0, r3
 80245d8:	3710      	adds	r7, #16
 80245da:	46bd      	mov	sp, r7
 80245dc:	bd80      	pop	{r7, pc}

080245de <wc_Sha3_256_Final>:
 * sha3  wc_Sha3 object holding state.
 * hash  Buffer to hold the hash result. Must be at least 32 bytes.
 * returns 0 on success.
 */
int wc_Sha3_256_Final(wc_Sha3* sha3, byte* hash)
{
 80245de:	b580      	push	{r7, lr}
 80245e0:	b082      	sub	sp, #8
 80245e2:	af00      	add	r7, sp, #0
 80245e4:	6078      	str	r0, [r7, #4]
 80245e6:	6039      	str	r1, [r7, #0]
    return wc_Sha3Final(sha3, hash, WC_SHA3_256_COUNT, WC_SHA3_256_DIGEST_SIZE);
 80245e8:	2320      	movs	r3, #32
 80245ea:	2211      	movs	r2, #17
 80245ec:	6839      	ldr	r1, [r7, #0]
 80245ee:	6878      	ldr	r0, [r7, #4]
 80245f0:	f7ff ff63 	bl	80244ba <wc_Sha3Final>
 80245f4:	4603      	mov	r3, r0
}
 80245f6:	4618      	mov	r0, r3
 80245f8:	3708      	adds	r7, #8
 80245fa:	46bd      	mov	sp, r7
 80245fc:	bd80      	pop	{r7, pc}

080245fe <wc_Sha3_256_Free>:
 *
 * sha3  wc_Sha3 object holding state.
 * returns 0 on success.
 */
void wc_Sha3_256_Free(wc_Sha3* sha3)
{
 80245fe:	b580      	push	{r7, lr}
 8024600:	b082      	sub	sp, #8
 8024602:	af00      	add	r7, sp, #0
 8024604:	6078      	str	r0, [r7, #4]
    wc_Sha3Free(sha3);
 8024606:	6878      	ldr	r0, [r7, #4]
 8024608:	f7ff ff82 	bl	8024510 <wc_Sha3Free>
}
 802460c:	bf00      	nop
 802460e:	3708      	adds	r7, #8
 8024610:	46bd      	mov	sp, r7
 8024612:	bd80      	pop	{r7, pc}

08024614 <wc_InitSha3_384>:
 * heap   Heap reference for dynamic memory allocation. (Used in async ops.)
 * devId  Device identifier for asynchronous operation.
 * returns 0 on success.
 */
int wc_InitSha3_384(wc_Sha3* sha3, void* heap, int devId)
{
 8024614:	b580      	push	{r7, lr}
 8024616:	b084      	sub	sp, #16
 8024618:	af00      	add	r7, sp, #0
 802461a:	60f8      	str	r0, [r7, #12]
 802461c:	60b9      	str	r1, [r7, #8]
 802461e:	607a      	str	r2, [r7, #4]
    return wc_InitSha3(sha3, heap, devId);
 8024620:	687a      	ldr	r2, [r7, #4]
 8024622:	68b9      	ldr	r1, [r7, #8]
 8024624:	68f8      	ldr	r0, [r7, #12]
 8024626:	f7ff ff01 	bl	802442c <wc_InitSha3>
 802462a:	4603      	mov	r3, r0
}
 802462c:	4618      	mov	r0, r3
 802462e:	3710      	adds	r7, #16
 8024630:	46bd      	mov	sp, r7
 8024632:	bd80      	pop	{r7, pc}

08024634 <wc_Sha3_384_Update>:
 * data  Message data to be hashed.
 * len   Length of the message data.
 * returns 0 on success.
 */
int wc_Sha3_384_Update(wc_Sha3* sha3, const byte* data, word32 len)
{
 8024634:	b580      	push	{r7, lr}
 8024636:	b084      	sub	sp, #16
 8024638:	af00      	add	r7, sp, #0
 802463a:	60f8      	str	r0, [r7, #12]
 802463c:	60b9      	str	r1, [r7, #8]
 802463e:	607a      	str	r2, [r7, #4]
    return wc_Sha3Update(sha3, data, len, WC_SHA3_384_COUNT);
 8024640:	230d      	movs	r3, #13
 8024642:	687a      	ldr	r2, [r7, #4]
 8024644:	68b9      	ldr	r1, [r7, #8]
 8024646:	68f8      	ldr	r0, [r7, #12]
 8024648:	f7ff ff10 	bl	802446c <wc_Sha3Update>
 802464c:	4603      	mov	r3, r0
}
 802464e:	4618      	mov	r0, r3
 8024650:	3710      	adds	r7, #16
 8024652:	46bd      	mov	sp, r7
 8024654:	bd80      	pop	{r7, pc}

08024656 <wc_Sha3_384_Final>:
 * sha3  wc_Sha3 object holding state.
 * hash  Buffer to hold the hash result. Must be at least 48 bytes.
 * returns 0 on success.
 */
int wc_Sha3_384_Final(wc_Sha3* sha3, byte* hash)
{
 8024656:	b580      	push	{r7, lr}
 8024658:	b082      	sub	sp, #8
 802465a:	af00      	add	r7, sp, #0
 802465c:	6078      	str	r0, [r7, #4]
 802465e:	6039      	str	r1, [r7, #0]
    return wc_Sha3Final(sha3, hash, WC_SHA3_384_COUNT, WC_SHA3_384_DIGEST_SIZE);
 8024660:	2330      	movs	r3, #48	; 0x30
 8024662:	220d      	movs	r2, #13
 8024664:	6839      	ldr	r1, [r7, #0]
 8024666:	6878      	ldr	r0, [r7, #4]
 8024668:	f7ff ff27 	bl	80244ba <wc_Sha3Final>
 802466c:	4603      	mov	r3, r0
}
 802466e:	4618      	mov	r0, r3
 8024670:	3708      	adds	r7, #8
 8024672:	46bd      	mov	sp, r7
 8024674:	bd80      	pop	{r7, pc}

08024676 <wc_Sha3_384_Free>:
 *
 * sha3  wc_Sha3 object holding state.
 * returns 0 on success.
 */
void wc_Sha3_384_Free(wc_Sha3* sha3)
{
 8024676:	b580      	push	{r7, lr}
 8024678:	b082      	sub	sp, #8
 802467a:	af00      	add	r7, sp, #0
 802467c:	6078      	str	r0, [r7, #4]
    wc_Sha3Free(sha3);
 802467e:	6878      	ldr	r0, [r7, #4]
 8024680:	f7ff ff46 	bl	8024510 <wc_Sha3Free>
}
 8024684:	bf00      	nop
 8024686:	3708      	adds	r7, #8
 8024688:	46bd      	mov	sp, r7
 802468a:	bd80      	pop	{r7, pc}

0802468c <wc_InitSha3_512>:
 * heap   Heap reference for dynamic memory allocation. (Used in async ops.)
 * devId  Device identifier for asynchronous operation.
 * returns 0 on success.
 */
int wc_InitSha3_512(wc_Sha3* sha3, void* heap, int devId)
{
 802468c:	b580      	push	{r7, lr}
 802468e:	b084      	sub	sp, #16
 8024690:	af00      	add	r7, sp, #0
 8024692:	60f8      	str	r0, [r7, #12]
 8024694:	60b9      	str	r1, [r7, #8]
 8024696:	607a      	str	r2, [r7, #4]
    return wc_InitSha3(sha3, heap, devId);
 8024698:	687a      	ldr	r2, [r7, #4]
 802469a:	68b9      	ldr	r1, [r7, #8]
 802469c:	68f8      	ldr	r0, [r7, #12]
 802469e:	f7ff fec5 	bl	802442c <wc_InitSha3>
 80246a2:	4603      	mov	r3, r0
}
 80246a4:	4618      	mov	r0, r3
 80246a6:	3710      	adds	r7, #16
 80246a8:	46bd      	mov	sp, r7
 80246aa:	bd80      	pop	{r7, pc}

080246ac <wc_Sha3_512_Update>:
 * data  Message data to be hashed.
 * len   Length of the message data.
 * returns 0 on success.
 */
int wc_Sha3_512_Update(wc_Sha3* sha3, const byte* data, word32 len)
{
 80246ac:	b580      	push	{r7, lr}
 80246ae:	b084      	sub	sp, #16
 80246b0:	af00      	add	r7, sp, #0
 80246b2:	60f8      	str	r0, [r7, #12]
 80246b4:	60b9      	str	r1, [r7, #8]
 80246b6:	607a      	str	r2, [r7, #4]
    return wc_Sha3Update(sha3, data, len, WC_SHA3_512_COUNT);
 80246b8:	2309      	movs	r3, #9
 80246ba:	687a      	ldr	r2, [r7, #4]
 80246bc:	68b9      	ldr	r1, [r7, #8]
 80246be:	68f8      	ldr	r0, [r7, #12]
 80246c0:	f7ff fed4 	bl	802446c <wc_Sha3Update>
 80246c4:	4603      	mov	r3, r0
}
 80246c6:	4618      	mov	r0, r3
 80246c8:	3710      	adds	r7, #16
 80246ca:	46bd      	mov	sp, r7
 80246cc:	bd80      	pop	{r7, pc}

080246ce <wc_Sha3_512_Final>:
 * sha3  wc_Sha3 object holding state.
 * hash  Buffer to hold the hash result. Must be at least 64 bytes.
 * returns 0 on success.
 */
int wc_Sha3_512_Final(wc_Sha3* sha3, byte* hash)
{
 80246ce:	b580      	push	{r7, lr}
 80246d0:	b082      	sub	sp, #8
 80246d2:	af00      	add	r7, sp, #0
 80246d4:	6078      	str	r0, [r7, #4]
 80246d6:	6039      	str	r1, [r7, #0]
    return wc_Sha3Final(sha3, hash, WC_SHA3_512_COUNT, WC_SHA3_512_DIGEST_SIZE);
 80246d8:	2340      	movs	r3, #64	; 0x40
 80246da:	2209      	movs	r2, #9
 80246dc:	6839      	ldr	r1, [r7, #0]
 80246de:	6878      	ldr	r0, [r7, #4]
 80246e0:	f7ff feeb 	bl	80244ba <wc_Sha3Final>
 80246e4:	4603      	mov	r3, r0
}
 80246e6:	4618      	mov	r0, r3
 80246e8:	3708      	adds	r7, #8
 80246ea:	46bd      	mov	sp, r7
 80246ec:	bd80      	pop	{r7, pc}

080246ee <wc_Sha3_512_Free>:
 *
 * sha3  wc_Sha3 object holding state.
 * returns 0 on success.
 */
void wc_Sha3_512_Free(wc_Sha3* sha3)
{
 80246ee:	b580      	push	{r7, lr}
 80246f0:	b082      	sub	sp, #8
 80246f2:	af00      	add	r7, sp, #0
 80246f4:	6078      	str	r0, [r7, #4]
    wc_Sha3Free(sha3);
 80246f6:	6878      	ldr	r0, [r7, #4]
 80246f8:	f7ff ff0a 	bl	8024510 <wc_Sha3Free>
}
 80246fc:	bf00      	nop
 80246fe:	3708      	adds	r7, #8
 8024700:	46bd      	mov	sp, r7
 8024702:	bd80      	pop	{r7, pc}

08024704 <rotlFixed>:
    {
 8024704:	b480      	push	{r7}
 8024706:	b083      	sub	sp, #12
 8024708:	af00      	add	r7, sp, #0
 802470a:	6078      	str	r0, [r7, #4]
 802470c:	6039      	str	r1, [r7, #0]
        return (x << y) | (x >> (sizeof(y) * 8 - y));
 802470e:	687a      	ldr	r2, [r7, #4]
 8024710:	683b      	ldr	r3, [r7, #0]
 8024712:	f1c3 0320 	rsb	r3, r3, #32
 8024716:	fa62 f303 	ror.w	r3, r2, r3
    }
 802471a:	4618      	mov	r0, r3
 802471c:	370c      	adds	r7, #12
 802471e:	46bd      	mov	sp, r7
 8024720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024724:	4770      	bx	lr

08024726 <ByteReverseWord32>:
{
 8024726:	b580      	push	{r7, lr}
 8024728:	b082      	sub	sp, #8
 802472a:	af00      	add	r7, sp, #0
 802472c:	6078      	str	r0, [r7, #4]
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
 802472e:	687b      	ldr	r3, [r7, #4]
 8024730:	0a1b      	lsrs	r3, r3, #8
 8024732:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 8024736:	687b      	ldr	r3, [r7, #4]
 8024738:	021b      	lsls	r3, r3, #8
 802473a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 802473e:	4313      	orrs	r3, r2
 8024740:	607b      	str	r3, [r7, #4]
    return rotlFixed(value, 16U);
 8024742:	2110      	movs	r1, #16
 8024744:	6878      	ldr	r0, [r7, #4]
 8024746:	f7ff ffdd 	bl	8024704 <rotlFixed>
 802474a:	4603      	mov	r3, r0
}
 802474c:	4618      	mov	r0, r3
 802474e:	3708      	adds	r7, #8
 8024750:	46bd      	mov	sp, r7
 8024752:	bd80      	pop	{r7, pc}

08024754 <rotrFixed64>:
{
 8024754:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8024758:	b084      	sub	sp, #16
 802475a:	af00      	add	r7, sp, #0
 802475c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8024760:	e9c7 2300 	strd	r2, r3, [r7]
    return (x >> y) | (x << (sizeof(y) * 8 - y));
 8024764:	6839      	ldr	r1, [r7, #0]
 8024766:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802476a:	f1c1 0620 	rsb	r6, r1, #32
 802476e:	f1a1 0020 	sub.w	r0, r1, #32
 8024772:	fa22 f801 	lsr.w	r8, r2, r1
 8024776:	fa03 f606 	lsl.w	r6, r3, r6
 802477a:	ea48 0806 	orr.w	r8, r8, r6
 802477e:	fa23 f000 	lsr.w	r0, r3, r0
 8024782:	ea48 0800 	orr.w	r8, r8, r0
 8024786:	fa23 f901 	lsr.w	r9, r3, r1
 802478a:	4249      	negs	r1, r1
 802478c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8024790:	f1a1 0620 	sub.w	r6, r1, #32
 8024794:	f1c1 0020 	rsb	r0, r1, #32
 8024798:	fa03 f501 	lsl.w	r5, r3, r1
 802479c:	fa02 f606 	lsl.w	r6, r2, r6
 80247a0:	4335      	orrs	r5, r6
 80247a2:	fa22 f000 	lsr.w	r0, r2, r0
 80247a6:	4305      	orrs	r5, r0
 80247a8:	fa02 f401 	lsl.w	r4, r2, r1
 80247ac:	ea48 0a04 	orr.w	sl, r8, r4
 80247b0:	ea49 0b05 	orr.w	fp, r9, r5
 80247b4:	4654      	mov	r4, sl
 80247b6:	465d      	mov	r5, fp
 80247b8:	4622      	mov	r2, r4
 80247ba:	462b      	mov	r3, r5
}
 80247bc:	4610      	mov	r0, r2
 80247be:	4619      	mov	r1, r3
 80247c0:	3710      	adds	r7, #16
 80247c2:	46bd      	mov	sp, r7
 80247c4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80247c8:	4770      	bx	lr

080247ca <ByteReverseWord64>:
{
 80247ca:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80247ce:	b084      	sub	sp, #16
 80247d0:	af00      	add	r7, sp, #0
 80247d2:	e9c7 0102 	strd	r0, r1, [r7, #8]
    return (word64)((word64)ByteReverseWord32((word32) value)) << 32 |
 80247d6:	68bb      	ldr	r3, [r7, #8]
 80247d8:	4618      	mov	r0, r3
 80247da:	f7ff ffa4 	bl	8024726 <ByteReverseWord32>
 80247de:	4603      	mov	r3, r0
 80247e0:	2200      	movs	r2, #0
 80247e2:	603b      	str	r3, [r7, #0]
 80247e4:	607a      	str	r2, [r7, #4]
 80247e6:	f04f 0400 	mov.w	r4, #0
 80247ea:	f04f 0500 	mov.w	r5, #0
 80247ee:	683b      	ldr	r3, [r7, #0]
 80247f0:	001d      	movs	r5, r3
 80247f2:	2400      	movs	r4, #0
        (word64)ByteReverseWord32((word32)(value   >> 32));
 80247f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80247f8:	f04f 0200 	mov.w	r2, #0
 80247fc:	f04f 0300 	mov.w	r3, #0
 8024800:	000a      	movs	r2, r1
 8024802:	2300      	movs	r3, #0
 8024804:	4613      	mov	r3, r2
 8024806:	4618      	mov	r0, r3
 8024808:	f7ff ff8d 	bl	8024726 <ByteReverseWord32>
 802480c:	4603      	mov	r3, r0
 802480e:	2200      	movs	r2, #0
 8024810:	4698      	mov	r8, r3
 8024812:	4691      	mov	r9, r2
    return (word64)((word64)ByteReverseWord32((word32) value)) << 32 |
 8024814:	ea44 0a08 	orr.w	sl, r4, r8
 8024818:	ea45 0b09 	orr.w	fp, r5, r9
 802481c:	4652      	mov	r2, sl
 802481e:	465b      	mov	r3, fp
}
 8024820:	4610      	mov	r0, r2
 8024822:	4619      	mov	r1, r3
 8024824:	3710      	adds	r7, #16
 8024826:	46bd      	mov	sp, r7
 8024828:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0802482c <ByteReverseWords64>:
{
 802482c:	b590      	push	{r4, r7, lr}
 802482e:	b087      	sub	sp, #28
 8024830:	af00      	add	r7, sp, #0
 8024832:	60f8      	str	r0, [r7, #12]
 8024834:	60b9      	str	r1, [r7, #8]
 8024836:	607a      	str	r2, [r7, #4]
    word32 count = byteCount/(word32)sizeof(word64), i;
 8024838:	687b      	ldr	r3, [r7, #4]
 802483a:	08db      	lsrs	r3, r3, #3
 802483c:	613b      	str	r3, [r7, #16]
    for (i = 0; i < count; i++)
 802483e:	2300      	movs	r3, #0
 8024840:	617b      	str	r3, [r7, #20]
 8024842:	e014      	b.n	802486e <ByteReverseWords64+0x42>
        out[i] = ByteReverseWord64(in[i]);
 8024844:	697b      	ldr	r3, [r7, #20]
 8024846:	00db      	lsls	r3, r3, #3
 8024848:	68ba      	ldr	r2, [r7, #8]
 802484a:	4413      	add	r3, r2
 802484c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024850:	6979      	ldr	r1, [r7, #20]
 8024852:	00c9      	lsls	r1, r1, #3
 8024854:	68f8      	ldr	r0, [r7, #12]
 8024856:	1844      	adds	r4, r0, r1
 8024858:	4610      	mov	r0, r2
 802485a:	4619      	mov	r1, r3
 802485c:	f7ff ffb5 	bl	80247ca <ByteReverseWord64>
 8024860:	4602      	mov	r2, r0
 8024862:	460b      	mov	r3, r1
 8024864:	e9c4 2300 	strd	r2, r3, [r4]
    for (i = 0; i < count; i++)
 8024868:	697b      	ldr	r3, [r7, #20]
 802486a:	3301      	adds	r3, #1
 802486c:	617b      	str	r3, [r7, #20]
 802486e:	697a      	ldr	r2, [r7, #20]
 8024870:	693b      	ldr	r3, [r7, #16]
 8024872:	429a      	cmp	r2, r3
 8024874:	d3e6      	bcc.n	8024844 <ByteReverseWords64+0x18>
}
 8024876:	bf00      	nop
 8024878:	bf00      	nop
 802487a:	371c      	adds	r7, #28
 802487c:	46bd      	mov	sp, r7
 802487e:	bd90      	pop	{r4, r7, pc}

08024880 <ForceZero>:
{
 8024880:	b480      	push	{r7}
 8024882:	b085      	sub	sp, #20
 8024884:	af00      	add	r7, sp, #0
 8024886:	6078      	str	r0, [r7, #4]
 8024888:	6039      	str	r1, [r7, #0]
    volatile byte* z = (volatile byte*)mem;
 802488a:	687b      	ldr	r3, [r7, #4]
 802488c:	60fb      	str	r3, [r7, #12]
    while (len--) *z++ = 0;
 802488e:	e004      	b.n	802489a <ForceZero+0x1a>
 8024890:	68fb      	ldr	r3, [r7, #12]
 8024892:	1c5a      	adds	r2, r3, #1
 8024894:	60fa      	str	r2, [r7, #12]
 8024896:	2200      	movs	r2, #0
 8024898:	701a      	strb	r2, [r3, #0]
 802489a:	683b      	ldr	r3, [r7, #0]
 802489c:	1e5a      	subs	r2, r3, #1
 802489e:	603a      	str	r2, [r7, #0]
 80248a0:	2b00      	cmp	r3, #0
 80248a2:	d1f5      	bne.n	8024890 <ForceZero+0x10>
}
 80248a4:	bf00      	nop
 80248a6:	bf00      	nop
 80248a8:	3714      	adds	r7, #20
 80248aa:	46bd      	mov	sp, r7
 80248ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80248b0:	4770      	bx	lr

080248b2 <min>:
    {
 80248b2:	b480      	push	{r7}
 80248b4:	b083      	sub	sp, #12
 80248b6:	af00      	add	r7, sp, #0
 80248b8:	6078      	str	r0, [r7, #4]
 80248ba:	6039      	str	r1, [r7, #0]
        return a > b ? b : a;
 80248bc:	687a      	ldr	r2, [r7, #4]
 80248be:	683b      	ldr	r3, [r7, #0]
 80248c0:	4293      	cmp	r3, r2
 80248c2:	bf28      	it	cs
 80248c4:	4613      	movcs	r3, r2
    }
 80248c6:	4618      	mov	r0, r3
 80248c8:	370c      	adds	r7, #12
 80248ca:	46bd      	mov	sp, r7
 80248cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80248d0:	4770      	bx	lr
 80248d2:	0000      	movs	r0, r0
 80248d4:	0000      	movs	r0, r0
	...

080248d8 <InitSha512>:
#else

#ifdef WOLFSSL_SHA512

static int InitSha512(wc_Sha512* sha512)
{
 80248d8:	b480      	push	{r7}
 80248da:	b083      	sub	sp, #12
 80248dc:	af00      	add	r7, sp, #0
 80248de:	6078      	str	r0, [r7, #4]
    if (sha512 == NULL)
 80248e0:	687b      	ldr	r3, [r7, #4]
 80248e2:	2b00      	cmp	r3, #0
 80248e4:	d102      	bne.n	80248ec <InitSha512+0x14>
        return BAD_FUNC_ARG;
 80248e6:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80248ea:	e042      	b.n	8024972 <InitSha512+0x9a>

    sha512->digest[0] = W64LIT(0x6a09e667f3bcc908);
 80248ec:	6879      	ldr	r1, [r7, #4]
 80248ee:	a324      	add	r3, pc, #144	; (adr r3, 8024980 <InitSha512+0xa8>)
 80248f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80248f4:	e9c1 2300 	strd	r2, r3, [r1]
    sha512->digest[1] = W64LIT(0xbb67ae8584caa73b);
 80248f8:	6879      	ldr	r1, [r7, #4]
 80248fa:	a323      	add	r3, pc, #140	; (adr r3, 8024988 <InitSha512+0xb0>)
 80248fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024900:	e9c1 2302 	strd	r2, r3, [r1, #8]
    sha512->digest[2] = W64LIT(0x3c6ef372fe94f82b);
 8024904:	6879      	ldr	r1, [r7, #4]
 8024906:	a322      	add	r3, pc, #136	; (adr r3, 8024990 <InitSha512+0xb8>)
 8024908:	e9d3 2300 	ldrd	r2, r3, [r3]
 802490c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    sha512->digest[3] = W64LIT(0xa54ff53a5f1d36f1);
 8024910:	6879      	ldr	r1, [r7, #4]
 8024912:	a321      	add	r3, pc, #132	; (adr r3, 8024998 <InitSha512+0xc0>)
 8024914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024918:	e9c1 2306 	strd	r2, r3, [r1, #24]
    sha512->digest[4] = W64LIT(0x510e527fade682d1);
 802491c:	6879      	ldr	r1, [r7, #4]
 802491e:	a320      	add	r3, pc, #128	; (adr r3, 80249a0 <InitSha512+0xc8>)
 8024920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024924:	e9c1 2308 	strd	r2, r3, [r1, #32]
    sha512->digest[5] = W64LIT(0x9b05688c2b3e6c1f);
 8024928:	6879      	ldr	r1, [r7, #4]
 802492a:	a31f      	add	r3, pc, #124	; (adr r3, 80249a8 <InitSha512+0xd0>)
 802492c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024930:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    sha512->digest[6] = W64LIT(0x1f83d9abfb41bd6b);
 8024934:	6879      	ldr	r1, [r7, #4]
 8024936:	a31e      	add	r3, pc, #120	; (adr r3, 80249b0 <InitSha512+0xd8>)
 8024938:	e9d3 2300 	ldrd	r2, r3, [r3]
 802493c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    sha512->digest[7] = W64LIT(0x5be0cd19137e2179);
 8024940:	6879      	ldr	r1, [r7, #4]
 8024942:	a31d      	add	r3, pc, #116	; (adr r3, 80249b8 <InitSha512+0xe0>)
 8024944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024948:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    sha512->buffLen = 0;
 802494c:	687b      	ldr	r3, [r7, #4]
 802494e:	2200      	movs	r2, #0
 8024950:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    sha512->loLen   = 0;
 8024954:	6879      	ldr	r1, [r7, #4]
 8024956:	f04f 0200 	mov.w	r2, #0
 802495a:	f04f 0300 	mov.w	r3, #0
 802495e:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
    sha512->hiLen   = 0;
 8024962:	6879      	ldr	r1, [r7, #4]
 8024964:	f04f 0200 	mov.w	r2, #0
 8024968:	f04f 0300 	mov.w	r3, #0
 802496c:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
    sha512->ctx.mode = ESP32_SHA_INIT;
#endif
#ifdef WOLFSSL_HASH_FLAGS
    sha512->flags = 0;
#endif
    return 0;
 8024970:	2300      	movs	r3, #0
}
 8024972:	4618      	mov	r0, r3
 8024974:	370c      	adds	r7, #12
 8024976:	46bd      	mov	sp, r7
 8024978:	f85d 7b04 	ldr.w	r7, [sp], #4
 802497c:	4770      	bx	lr
 802497e:	bf00      	nop
 8024980:	f3bcc908 	.word	0xf3bcc908
 8024984:	6a09e667 	.word	0x6a09e667
 8024988:	84caa73b 	.word	0x84caa73b
 802498c:	bb67ae85 	.word	0xbb67ae85
 8024990:	fe94f82b 	.word	0xfe94f82b
 8024994:	3c6ef372 	.word	0x3c6ef372
 8024998:	5f1d36f1 	.word	0x5f1d36f1
 802499c:	a54ff53a 	.word	0xa54ff53a
 80249a0:	ade682d1 	.word	0xade682d1
 80249a4:	510e527f 	.word	0x510e527f
 80249a8:	2b3e6c1f 	.word	0x2b3e6c1f
 80249ac:	9b05688c 	.word	0x9b05688c
 80249b0:	fb41bd6b 	.word	0xfb41bd6b
 80249b4:	1f83d9ab 	.word	0x1f83d9ab
 80249b8:	137e2179 	.word	0x137e2179
 80249bc:	5be0cd19 	.word	0x5be0cd19

080249c0 <InitSha512_224>:
 * Note that sha512/224 has different initial hash value from sha512.
 * The initial hash value consists of eight 64bit words. They are given
 * in FIPS180-4.
 */
static int InitSha512_224(wc_Sha512* sha512)
{
 80249c0:	b480      	push	{r7}
 80249c2:	b083      	sub	sp, #12
 80249c4:	af00      	add	r7, sp, #0
 80249c6:	6078      	str	r0, [r7, #4]
    if (sha512 == NULL)
 80249c8:	687b      	ldr	r3, [r7, #4]
 80249ca:	2b00      	cmp	r3, #0
 80249cc:	d102      	bne.n	80249d4 <InitSha512_224+0x14>
        return BAD_FUNC_ARG;
 80249ce:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80249d2:	e042      	b.n	8024a5a <InitSha512_224+0x9a>

    sha512->digest[0] = W64LIT(0x8c3d37c819544da2);
 80249d4:	6879      	ldr	r1, [r7, #4]
 80249d6:	a324      	add	r3, pc, #144	; (adr r3, 8024a68 <InitSha512_224+0xa8>)
 80249d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80249dc:	e9c1 2300 	strd	r2, r3, [r1]
    sha512->digest[1] = W64LIT(0x73e1996689dcd4d6);
 80249e0:	6879      	ldr	r1, [r7, #4]
 80249e2:	a323      	add	r3, pc, #140	; (adr r3, 8024a70 <InitSha512_224+0xb0>)
 80249e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80249e8:	e9c1 2302 	strd	r2, r3, [r1, #8]
    sha512->digest[2] = W64LIT(0x1dfab7ae32ff9c82);
 80249ec:	6879      	ldr	r1, [r7, #4]
 80249ee:	a322      	add	r3, pc, #136	; (adr r3, 8024a78 <InitSha512_224+0xb8>)
 80249f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80249f4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    sha512->digest[3] = W64LIT(0x679dd514582f9fcf);
 80249f8:	6879      	ldr	r1, [r7, #4]
 80249fa:	a321      	add	r3, pc, #132	; (adr r3, 8024a80 <InitSha512_224+0xc0>)
 80249fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a00:	e9c1 2306 	strd	r2, r3, [r1, #24]
    sha512->digest[4] = W64LIT(0x0f6d2b697bd44da8);
 8024a04:	6879      	ldr	r1, [r7, #4]
 8024a06:	a320      	add	r3, pc, #128	; (adr r3, 8024a88 <InitSha512_224+0xc8>)
 8024a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a0c:	e9c1 2308 	strd	r2, r3, [r1, #32]
    sha512->digest[5] = W64LIT(0x77e36f7304c48942);
 8024a10:	6879      	ldr	r1, [r7, #4]
 8024a12:	a31f      	add	r3, pc, #124	; (adr r3, 8024a90 <InitSha512_224+0xd0>)
 8024a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a18:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    sha512->digest[6] = W64LIT(0x3f9d85a86a1d36c8);
 8024a1c:	6879      	ldr	r1, [r7, #4]
 8024a1e:	a31e      	add	r3, pc, #120	; (adr r3, 8024a98 <InitSha512_224+0xd8>)
 8024a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a24:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    sha512->digest[7] = W64LIT(0x1112e6ad91d692a1);
 8024a28:	6879      	ldr	r1, [r7, #4]
 8024a2a:	a31d      	add	r3, pc, #116	; (adr r3, 8024aa0 <InitSha512_224+0xe0>)
 8024a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a30:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    sha512->buffLen = 0;
 8024a34:	687b      	ldr	r3, [r7, #4]
 8024a36:	2200      	movs	r2, #0
 8024a38:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    sha512->loLen   = 0;
 8024a3c:	6879      	ldr	r1, [r7, #4]
 8024a3e:	f04f 0200 	mov.w	r2, #0
 8024a42:	f04f 0300 	mov.w	r3, #0
 8024a46:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
    sha512->hiLen   = 0;
 8024a4a:	6879      	ldr	r1, [r7, #4]
 8024a4c:	f04f 0200 	mov.w	r2, #0
 8024a50:	f04f 0300 	mov.w	r3, #0
 8024a54:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
    sha512->ctx.mode = ESP32_SHA_INIT;
#endif
#ifdef WOLFSSL_HASH_FLAGS
    sha512->flags = 0;
#endif
    return 0;
 8024a58:	2300      	movs	r3, #0
}
 8024a5a:	4618      	mov	r0, r3
 8024a5c:	370c      	adds	r7, #12
 8024a5e:	46bd      	mov	sp, r7
 8024a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a64:	4770      	bx	lr
 8024a66:	bf00      	nop
 8024a68:	19544da2 	.word	0x19544da2
 8024a6c:	8c3d37c8 	.word	0x8c3d37c8
 8024a70:	89dcd4d6 	.word	0x89dcd4d6
 8024a74:	73e19966 	.word	0x73e19966
 8024a78:	32ff9c82 	.word	0x32ff9c82
 8024a7c:	1dfab7ae 	.word	0x1dfab7ae
 8024a80:	582f9fcf 	.word	0x582f9fcf
 8024a84:	679dd514 	.word	0x679dd514
 8024a88:	7bd44da8 	.word	0x7bd44da8
 8024a8c:	0f6d2b69 	.word	0x0f6d2b69
 8024a90:	04c48942 	.word	0x04c48942
 8024a94:	77e36f73 	.word	0x77e36f73
 8024a98:	6a1d36c8 	.word	0x6a1d36c8
 8024a9c:	3f9d85a8 	.word	0x3f9d85a8
 8024aa0:	91d692a1 	.word	0x91d692a1
 8024aa4:	1112e6ad 	.word	0x1112e6ad

08024aa8 <InitSha512_256>:
 * Note that sha512/256 has different initial hash value from sha512.
 * The initial hash value consists of eight 64bit words. They are given
 * in FIPS180-4.
 */
static int InitSha512_256(wc_Sha512* sha512)
{
 8024aa8:	b480      	push	{r7}
 8024aaa:	b083      	sub	sp, #12
 8024aac:	af00      	add	r7, sp, #0
 8024aae:	6078      	str	r0, [r7, #4]
    if (sha512 == NULL)
 8024ab0:	687b      	ldr	r3, [r7, #4]
 8024ab2:	2b00      	cmp	r3, #0
 8024ab4:	d102      	bne.n	8024abc <InitSha512_256+0x14>
        return BAD_FUNC_ARG;
 8024ab6:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8024aba:	e042      	b.n	8024b42 <InitSha512_256+0x9a>

    sha512->digest[0] = W64LIT(0x22312194fc2bf72c);
 8024abc:	6879      	ldr	r1, [r7, #4]
 8024abe:	a324      	add	r3, pc, #144	; (adr r3, 8024b50 <InitSha512_256+0xa8>)
 8024ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ac4:	e9c1 2300 	strd	r2, r3, [r1]
    sha512->digest[1] = W64LIT(0x9f555fa3c84c64c2);
 8024ac8:	6879      	ldr	r1, [r7, #4]
 8024aca:	a323      	add	r3, pc, #140	; (adr r3, 8024b58 <InitSha512_256+0xb0>)
 8024acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ad0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    sha512->digest[2] = W64LIT(0x2393b86b6f53b151);
 8024ad4:	6879      	ldr	r1, [r7, #4]
 8024ad6:	a322      	add	r3, pc, #136	; (adr r3, 8024b60 <InitSha512_256+0xb8>)
 8024ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024adc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    sha512->digest[3] = W64LIT(0x963877195940eabd);
 8024ae0:	6879      	ldr	r1, [r7, #4]
 8024ae2:	a321      	add	r3, pc, #132	; (adr r3, 8024b68 <InitSha512_256+0xc0>)
 8024ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ae8:	e9c1 2306 	strd	r2, r3, [r1, #24]
    sha512->digest[4] = W64LIT(0x96283ee2a88effe3);
 8024aec:	6879      	ldr	r1, [r7, #4]
 8024aee:	a320      	add	r3, pc, #128	; (adr r3, 8024b70 <InitSha512_256+0xc8>)
 8024af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024af4:	e9c1 2308 	strd	r2, r3, [r1, #32]
    sha512->digest[5] = W64LIT(0xbe5e1e2553863992);
 8024af8:	6879      	ldr	r1, [r7, #4]
 8024afa:	a31f      	add	r3, pc, #124	; (adr r3, 8024b78 <InitSha512_256+0xd0>)
 8024afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b00:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    sha512->digest[6] = W64LIT(0x2b0199fc2c85b8aa);
 8024b04:	6879      	ldr	r1, [r7, #4]
 8024b06:	a31e      	add	r3, pc, #120	; (adr r3, 8024b80 <InitSha512_256+0xd8>)
 8024b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b0c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    sha512->digest[7] = W64LIT(0x0eb72ddc81c52ca2);
 8024b10:	6879      	ldr	r1, [r7, #4]
 8024b12:	a31d      	add	r3, pc, #116	; (adr r3, 8024b88 <InitSha512_256+0xe0>)
 8024b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b18:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    sha512->buffLen = 0;
 8024b1c:	687b      	ldr	r3, [r7, #4]
 8024b1e:	2200      	movs	r2, #0
 8024b20:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    sha512->loLen   = 0;
 8024b24:	6879      	ldr	r1, [r7, #4]
 8024b26:	f04f 0200 	mov.w	r2, #0
 8024b2a:	f04f 0300 	mov.w	r3, #0
 8024b2e:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
    sha512->hiLen   = 0;
 8024b32:	6879      	ldr	r1, [r7, #4]
 8024b34:	f04f 0200 	mov.w	r2, #0
 8024b38:	f04f 0300 	mov.w	r3, #0
 8024b3c:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
    sha512->ctx.mode = ESP32_SHA_INIT;
#endif
#ifdef WOLFSSL_HASH_FLAGS
    sha512->flags = 0;
#endif
    return 0;
 8024b40:	2300      	movs	r3, #0
}
 8024b42:	4618      	mov	r0, r3
 8024b44:	370c      	adds	r7, #12
 8024b46:	46bd      	mov	sp, r7
 8024b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024b4c:	4770      	bx	lr
 8024b4e:	bf00      	nop
 8024b50:	fc2bf72c 	.word	0xfc2bf72c
 8024b54:	22312194 	.word	0x22312194
 8024b58:	c84c64c2 	.word	0xc84c64c2
 8024b5c:	9f555fa3 	.word	0x9f555fa3
 8024b60:	6f53b151 	.word	0x6f53b151
 8024b64:	2393b86b 	.word	0x2393b86b
 8024b68:	5940eabd 	.word	0x5940eabd
 8024b6c:	96387719 	.word	0x96387719
 8024b70:	a88effe3 	.word	0xa88effe3
 8024b74:	96283ee2 	.word	0x96283ee2
 8024b78:	53863992 	.word	0x53863992
 8024b7c:	be5e1e25 	.word	0xbe5e1e25
 8024b80:	2c85b8aa 	.word	0x2c85b8aa
 8024b84:	2b0199fc 	.word	0x2b0199fc
 8024b88:	81c52ca2 	.word	0x81c52ca2
 8024b8c:	0eb72ddc 	.word	0x0eb72ddc

08024b90 <InitSha512_Family>:

#ifdef WOLFSSL_SHA512

static int InitSha512_Family(wc_Sha512* sha512, void* heap, int devId,
                             int (*initfp)(wc_Sha512*))
{
 8024b90:	b580      	push	{r7, lr}
 8024b92:	b086      	sub	sp, #24
 8024b94:	af00      	add	r7, sp, #0
 8024b96:	60f8      	str	r0, [r7, #12]
 8024b98:	60b9      	str	r1, [r7, #8]
 8024b9a:	607a      	str	r2, [r7, #4]
 8024b9c:	603b      	str	r3, [r7, #0]
   int ret = 0;
 8024b9e:	2300      	movs	r3, #0
 8024ba0:	617b      	str	r3, [r7, #20]

    if (sha512 == NULL)
 8024ba2:	68fb      	ldr	r3, [r7, #12]
 8024ba4:	2b00      	cmp	r3, #0
 8024ba6:	d102      	bne.n	8024bae <InitSha512_Family+0x1e>
        return BAD_FUNC_ARG;
 8024ba8:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8024bac:	e00d      	b.n	8024bca <InitSha512_Family+0x3a>

    sha512->heap = heap;
 8024bae:	68fb      	ldr	r3, [r7, #12]
 8024bb0:	68ba      	ldr	r2, [r7, #8]
 8024bb2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
#ifdef WOLF_CRYPTO_CB
    sha512->devId = devId;
    sha512->devCtx = NULL;
#endif

    ret = initfp(sha512);
 8024bb6:	683b      	ldr	r3, [r7, #0]
 8024bb8:	68f8      	ldr	r0, [r7, #12]
 8024bba:	4798      	blx	r3
 8024bbc:	6178      	str	r0, [r7, #20]
    if (ret != 0)
 8024bbe:	697b      	ldr	r3, [r7, #20]
 8024bc0:	2b00      	cmp	r3, #0
 8024bc2:	d001      	beq.n	8024bc8 <InitSha512_Family+0x38>
        return ret;
 8024bc4:	697b      	ldr	r3, [r7, #20]
 8024bc6:	e000      	b.n	8024bca <InitSha512_Family+0x3a>
                        WOLFSSL_ASYNC_MARKER_SHA512, sha512->heap, devId);
#else
    (void)devId;
#endif /* WOLFSSL_ASYNC_CRYPT */

    return ret;
 8024bc8:	697b      	ldr	r3, [r7, #20]
}
 8024bca:	4618      	mov	r0, r3
 8024bcc:	3718      	adds	r7, #24
 8024bce:	46bd      	mov	sp, r7
 8024bd0:	bd80      	pop	{r7, pc}
	...

08024bd4 <wc_InitSha512_ex>:

int wc_InitSha512_ex(wc_Sha512* sha512, void* heap, int devId)
{
 8024bd4:	b580      	push	{r7, lr}
 8024bd6:	b084      	sub	sp, #16
 8024bd8:	af00      	add	r7, sp, #0
 8024bda:	60f8      	str	r0, [r7, #12]
 8024bdc:	60b9      	str	r1, [r7, #8]
 8024bde:	607a      	str	r2, [r7, #4]
    return InitSha512_Family(sha512, heap, devId, InitSha512);
 8024be0:	4b05      	ldr	r3, [pc, #20]	; (8024bf8 <wc_InitSha512_ex+0x24>)
 8024be2:	687a      	ldr	r2, [r7, #4]
 8024be4:	68b9      	ldr	r1, [r7, #8]
 8024be6:	68f8      	ldr	r0, [r7, #12]
 8024be8:	f7ff ffd2 	bl	8024b90 <InitSha512_Family>
 8024bec:	4603      	mov	r3, r0
}
 8024bee:	4618      	mov	r0, r3
 8024bf0:	3710      	adds	r7, #16
 8024bf2:	46bd      	mov	sp, r7
 8024bf4:	bd80      	pop	{r7, pc}
 8024bf6:	bf00      	nop
 8024bf8:	080248d9 	.word	0x080248d9

08024bfc <wc_InitSha512_224_ex>:

#if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
#if !defined(WOLFSSL_NOSHA512_224)
int wc_InitSha512_224_ex(wc_Sha512* sha512, void* heap, int devId)
{
 8024bfc:	b580      	push	{r7, lr}
 8024bfe:	b084      	sub	sp, #16
 8024c00:	af00      	add	r7, sp, #0
 8024c02:	60f8      	str	r0, [r7, #12]
 8024c04:	60b9      	str	r1, [r7, #8]
 8024c06:	607a      	str	r2, [r7, #4]
    return InitSha512_Family(sha512, heap, devId, InitSha512_224);
 8024c08:	4b05      	ldr	r3, [pc, #20]	; (8024c20 <wc_InitSha512_224_ex+0x24>)
 8024c0a:	687a      	ldr	r2, [r7, #4]
 8024c0c:	68b9      	ldr	r1, [r7, #8]
 8024c0e:	68f8      	ldr	r0, [r7, #12]
 8024c10:	f7ff ffbe 	bl	8024b90 <InitSha512_Family>
 8024c14:	4603      	mov	r3, r0
}
 8024c16:	4618      	mov	r0, r3
 8024c18:	3710      	adds	r7, #16
 8024c1a:	46bd      	mov	sp, r7
 8024c1c:	bd80      	pop	{r7, pc}
 8024c1e:	bf00      	nop
 8024c20:	080249c1 	.word	0x080249c1

08024c24 <wc_InitSha512_256_ex>:
#endif /* !HAVE_FIPS && !HAVE_SELFTEST */

#if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
#if !defined(WOLFSSL_NOSHA512_256)
int wc_InitSha512_256_ex(wc_Sha512* sha512, void* heap, int devId)
{
 8024c24:	b580      	push	{r7, lr}
 8024c26:	b084      	sub	sp, #16
 8024c28:	af00      	add	r7, sp, #0
 8024c2a:	60f8      	str	r0, [r7, #12]
 8024c2c:	60b9      	str	r1, [r7, #8]
 8024c2e:	607a      	str	r2, [r7, #4]
    return InitSha512_Family(sha512, heap, devId, InitSha512_256);
 8024c30:	4b05      	ldr	r3, [pc, #20]	; (8024c48 <wc_InitSha512_256_ex+0x24>)
 8024c32:	687a      	ldr	r2, [r7, #4]
 8024c34:	68b9      	ldr	r1, [r7, #8]
 8024c36:	68f8      	ldr	r0, [r7, #12]
 8024c38:	f7ff ffaa 	bl	8024b90 <InitSha512_Family>
 8024c3c:	4603      	mov	r3, r0
}
 8024c3e:	4618      	mov	r0, r3
 8024c40:	3710      	adds	r7, #16
 8024c42:	46bd      	mov	sp, r7
 8024c44:	bd80      	pop	{r7, pc}
 8024c46:	bf00      	nop
 8024c48:	08024aa9 	.word	0x08024aa9

08024c4c <_Transform_Sha512>:
    h(i) += S1(e(i)) + Ch(e(i),f(i),g(i)) + K[(i)+j] + (j ? blk2(i) : blk0(i)); \
    d(i) += h(i); \
    h(i) += S0(a(i)) + Maj(a(i),b(i),c(i))

static int _Transform_Sha512(wc_Sha512* sha512)
{
 8024c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c50:	f6ad 5d14 	subw	sp, sp, #3348	; 0xd14
 8024c54:	af00      	add	r7, sp, #0
 8024c56:	f8c7 0cbc 	str.w	r0, [r7, #3260]	; 0xcbc
    const word64* K = K512;
 8024c5a:	4bb1      	ldr	r3, [pc, #708]	; (8024f20 <_Transform_Sha512+0x2d4>)
 8024c5c:	f8c7 3d08 	str.w	r3, [r7, #3336]	; 0xd08
            return MEMORY_E;
        sha512->W = W;
    }
#elif defined(WOLFSSL_SMALL_STACK)
    word64* W;
    W = (word64*) XMALLOC(sizeof(word64) * 16, sha512->heap, DYNAMIC_TYPE_TMP_BUFFER);
 8024c60:	2080      	movs	r0, #128	; 0x80
 8024c62:	f7f9 fb27 	bl	801e2b4 <wolfSSL_Malloc>
 8024c66:	f8c7 0d04 	str.w	r0, [r7, #3332]	; 0xd04
    if (W == NULL)
 8024c6a:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8024c6e:	2b00      	cmp	r3, #0
 8024c70:	d103      	bne.n	8024c7a <_Transform_Sha512+0x2e>
        return MEMORY_E;
 8024c72:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8024c76:	f004 bb0b 	b.w	8029290 <_Transform_Sha512+0x4644>
#else
    word64 W[16];
#endif

    /* Copy digest to working vars */
    XMEMCPY(T, sha512->digest, sizeof(T));
 8024c7a:	f8d7 1cbc 	ldr.w	r1, [r7, #3260]	; 0xcbc
 8024c7e:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8024c82:	2240      	movs	r2, #64	; 0x40
 8024c84:	4618      	mov	r0, r3
 8024c86:	f005 fc1f 	bl	802a4c8 <memcpy>
            R(m);
        }
    }
#else
    /* 80 operations, partially loop unrolled */
    for (j = 0; j < 80; j += 16) {
 8024c8a:	2300      	movs	r3, #0
 8024c8c:	f8c7 3d0c 	str.w	r3, [r7, #3340]	; 0xd0c
 8024c90:	f004 ba39 	b.w	8029106 <_Transform_Sha512+0x44ba>
        R( 0); R( 1); R( 2); R( 3);
 8024c94:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 8024c98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8024c9c:	f04f 020e 	mov.w	r2, #14
 8024ca0:	f04f 0300 	mov.w	r3, #0
 8024ca4:	f7ff fd56 	bl	8024754 <rotrFixed64>
 8024ca8:	4604      	mov	r4, r0
 8024caa:	460d      	mov	r5, r1
 8024cac:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 8024cb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8024cb4:	f04f 0212 	mov.w	r2, #18
 8024cb8:	f04f 0300 	mov.w	r3, #0
 8024cbc:	f7ff fd4a 	bl	8024754 <rotrFixed64>
 8024cc0:	4602      	mov	r2, r0
 8024cc2:	460b      	mov	r3, r1
 8024cc4:	ea84 0102 	eor.w	r1, r4, r2
 8024cc8:	f8c7 1cb0 	str.w	r1, [r7, #3248]	; 0xcb0
 8024ccc:	406b      	eors	r3, r5
 8024cce:	f8c7 3cb4 	str.w	r3, [r7, #3252]	; 0xcb4
 8024cd2:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 8024cd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8024cda:	f04f 0229 	mov.w	r2, #41	; 0x29
 8024cde:	f04f 0300 	mov.w	r3, #0
 8024ce2:	f7ff fd37 	bl	8024754 <rotrFixed64>
 8024ce6:	4602      	mov	r2, r0
 8024ce8:	460b      	mov	r3, r1
 8024cea:	f507 614b 	add.w	r1, r7, #3248	; 0xcb0
 8024cee:	e9d1 4500 	ldrd	r4, r5, [r1]
 8024cf2:	4621      	mov	r1, r4
 8024cf4:	4051      	eors	r1, r2
 8024cf6:	f8c7 1ca8 	str.w	r1, [r7, #3240]	; 0xca8
 8024cfa:	4629      	mov	r1, r5
 8024cfc:	404b      	eors	r3, r1
 8024cfe:	f8c7 3cac 	str.w	r3, [r7, #3244]	; 0xcac
 8024d02:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8024d06:	e9d3 8900 	ldrd	r8, r9, [r3]
 8024d0a:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 8024d0e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8024d12:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8024d16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8024d1a:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8024d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024d22:	ea80 0602 	eor.w	r6, r0, r2
 8024d26:	f8c7 6ca0 	str.w	r6, [r7, #3232]	; 0xca0
 8024d2a:	404b      	eors	r3, r1
 8024d2c:	f8c7 3ca4 	str.w	r3, [r7, #3236]	; 0xca4
 8024d30:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 8024d34:	e9d3 1200 	ldrd	r1, r2, [r3]
 8024d38:	460b      	mov	r3, r1
 8024d3a:	4023      	ands	r3, r4
 8024d3c:	f8c7 3c98 	str.w	r3, [r7, #3224]	; 0xc98
 8024d40:	4613      	mov	r3, r2
 8024d42:	402b      	ands	r3, r5
 8024d44:	f8c7 3c9c 	str.w	r3, [r7, #3228]	; 0xc9c
 8024d48:	f607 4398 	addw	r3, r7, #3224	; 0xc98
 8024d4c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8024d50:	460b      	mov	r3, r1
 8024d52:	ea88 0303 	eor.w	r3, r8, r3
 8024d56:	f8c7 3c90 	str.w	r3, [r7, #3216]	; 0xc90
 8024d5a:	4613      	mov	r3, r2
 8024d5c:	ea89 0303 	eor.w	r3, r9, r3
 8024d60:	f8c7 3c94 	str.w	r3, [r7, #3220]	; 0xc94
 8024d64:	f607 43a8 	addw	r3, r7, #3240	; 0xca8
 8024d68:	e9d3 4500 	ldrd	r4, r5, [r3]
 8024d6c:	4623      	mov	r3, r4
 8024d6e:	f507 6249 	add.w	r2, r7, #3216	; 0xc90
 8024d72:	e9d2 0100 	ldrd	r0, r1, [r2]
 8024d76:	4602      	mov	r2, r0
 8024d78:	189b      	adds	r3, r3, r2
 8024d7a:	f8c7 3c88 	str.w	r3, [r7, #3208]	; 0xc88
 8024d7e:	462b      	mov	r3, r5
 8024d80:	460a      	mov	r2, r1
 8024d82:	4153      	adcs	r3, r2
 8024d84:	f8c7 3c8c 	str.w	r3, [r7, #3212]	; 0xc8c
 8024d88:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8024d8c:	00da      	lsls	r2, r3, #3
 8024d8e:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 8024d92:	4413      	add	r3, r2
 8024d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024d98:	f607 4188 	addw	r1, r7, #3208	; 0xc88
 8024d9c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8024da0:	4621      	mov	r1, r4
 8024da2:	eb11 0a02 	adds.w	sl, r1, r2
 8024da6:	4629      	mov	r1, r5
 8024da8:	eb41 0b03 	adc.w	fp, r1, r3
 8024dac:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8024db0:	2b00      	cmp	r3, #0
 8024db2:	f000 80b7 	beq.w	8024f24 <_Transform_Sha512+0x2d8>
 8024db6:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8024dba:	3370      	adds	r3, #112	; 0x70
 8024dbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8024dc0:	f04f 0213 	mov.w	r2, #19
 8024dc4:	f04f 0300 	mov.w	r3, #0
 8024dc8:	f7ff fcc4 	bl	8024754 <rotrFixed64>
 8024dcc:	4604      	mov	r4, r0
 8024dce:	460d      	mov	r5, r1
 8024dd0:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8024dd4:	3370      	adds	r3, #112	; 0x70
 8024dd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8024dda:	f04f 023d 	mov.w	r2, #61	; 0x3d
 8024dde:	f04f 0300 	mov.w	r3, #0
 8024de2:	f7ff fcb7 	bl	8024754 <rotrFixed64>
 8024de6:	4602      	mov	r2, r0
 8024de8:	460b      	mov	r3, r1
 8024dea:	ea84 0102 	eor.w	r1, r4, r2
 8024dee:	f8c7 1c80 	str.w	r1, [r7, #3200]	; 0xc80
 8024df2:	406b      	eors	r3, r5
 8024df4:	f8c7 3c84 	str.w	r3, [r7, #3204]	; 0xc84
 8024df8:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8024dfc:	3370      	adds	r3, #112	; 0x70
 8024dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024e02:	f04f 0000 	mov.w	r0, #0
 8024e06:	f04f 0100 	mov.w	r1, #0
 8024e0a:	0990      	lsrs	r0, r2, #6
 8024e0c:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 8024e10:	0999      	lsrs	r1, r3, #6
 8024e12:	f507 6348 	add.w	r3, r7, #3200	; 0xc80
 8024e16:	e9d3 4500 	ldrd	r4, r5, [r3]
 8024e1a:	4623      	mov	r3, r4
 8024e1c:	4043      	eors	r3, r0
 8024e1e:	f8c7 3c78 	str.w	r3, [r7, #3192]	; 0xc78
 8024e22:	462b      	mov	r3, r5
 8024e24:	404b      	eors	r3, r1
 8024e26:	f8c7 3c7c 	str.w	r3, [r7, #3196]	; 0xc7c
 8024e2a:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8024e2e:	3348      	adds	r3, #72	; 0x48
 8024e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024e34:	f607 4178 	addw	r1, r7, #3192	; 0xc78
 8024e38:	e9d1 4500 	ldrd	r4, r5, [r1]
 8024e3c:	4621      	mov	r1, r4
 8024e3e:	1889      	adds	r1, r1, r2
 8024e40:	f8c7 1c70 	str.w	r1, [r7, #3184]	; 0xc70
 8024e44:	4629      	mov	r1, r5
 8024e46:	eb41 0303 	adc.w	r3, r1, r3
 8024e4a:	f8c7 3c74 	str.w	r3, [r7, #3188]	; 0xc74
 8024e4e:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8024e52:	3308      	adds	r3, #8
 8024e54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8024e58:	f04f 0201 	mov.w	r2, #1
 8024e5c:	f04f 0300 	mov.w	r3, #0
 8024e60:	f7ff fc78 	bl	8024754 <rotrFixed64>
 8024e64:	4604      	mov	r4, r0
 8024e66:	460d      	mov	r5, r1
 8024e68:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8024e6c:	3308      	adds	r3, #8
 8024e6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8024e72:	f04f 0208 	mov.w	r2, #8
 8024e76:	f04f 0300 	mov.w	r3, #0
 8024e7a:	f7ff fc6b 	bl	8024754 <rotrFixed64>
 8024e7e:	4602      	mov	r2, r0
 8024e80:	460b      	mov	r3, r1
 8024e82:	ea84 0102 	eor.w	r1, r4, r2
 8024e86:	f8c7 1c68 	str.w	r1, [r7, #3176]	; 0xc68
 8024e8a:	406b      	eors	r3, r5
 8024e8c:	f8c7 3c6c 	str.w	r3, [r7, #3180]	; 0xc6c
 8024e90:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8024e94:	3308      	adds	r3, #8
 8024e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024e9a:	f04f 0000 	mov.w	r0, #0
 8024e9e:	f04f 0100 	mov.w	r1, #0
 8024ea2:	09d0      	lsrs	r0, r2, #7
 8024ea4:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8024ea8:	09d9      	lsrs	r1, r3, #7
 8024eaa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8024eae:	e9d3 4500 	ldrd	r4, r5, [r3]
 8024eb2:	4623      	mov	r3, r4
 8024eb4:	4043      	eors	r3, r0
 8024eb6:	f8c7 3c60 	str.w	r3, [r7, #3168]	; 0xc60
 8024eba:	462b      	mov	r3, r5
 8024ebc:	404b      	eors	r3, r1
 8024ebe:	f8c7 3c64 	str.w	r3, [r7, #3172]	; 0xc64
 8024ec2:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 8024ec6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8024eca:	4623      	mov	r3, r4
 8024ecc:	f507 6246 	add.w	r2, r7, #3168	; 0xc60
 8024ed0:	e9d2 0100 	ldrd	r0, r1, [r2]
 8024ed4:	4602      	mov	r2, r0
 8024ed6:	189b      	adds	r3, r3, r2
 8024ed8:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8024edc:	462b      	mov	r3, r5
 8024ede:	460a      	mov	r2, r1
 8024ee0:	4153      	adcs	r3, r2
 8024ee2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8024ee6:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8024eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024eee:	e9d7 455e 	ldrd	r4, r5, [r7, #376]	; 0x178
 8024ef2:	4621      	mov	r1, r4
 8024ef4:	1889      	adds	r1, r1, r2
 8024ef6:	f8c7 1c58 	str.w	r1, [r7, #3160]	; 0xc58
 8024efa:	4629      	mov	r1, r5
 8024efc:	eb41 0303 	adc.w	r3, r1, r3
 8024f00:	f8c7 3c5c 	str.w	r3, [r7, #3164]	; 0xc5c
 8024f04:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8024f08:	f607 4258 	addw	r2, r7, #3160	; 0xc58
 8024f0c:	e9d2 1200 	ldrd	r1, r2, [r2]
 8024f10:	e9c3 1200 	strd	r1, r2, [r3]
 8024f14:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8024f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f1c:	e00e      	b.n	8024f3c <_Transform_Sha512+0x2f0>
 8024f1e:	bf00      	nop
 8024f20:	0802d848 	.word	0x0802d848
 8024f24:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 8024f28:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8024f2c:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8024f30:	e9c3 0100 	strd	r0, r1, [r3]
 8024f34:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8024f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f3c:	eb12 010a 	adds.w	r1, r2, sl
 8024f40:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 8024f44:	eb43 030b 	adc.w	r3, r3, fp
 8024f48:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8024f4c:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8024f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f54:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	; 0x170
 8024f58:	4621      	mov	r1, r4
 8024f5a:	1889      	adds	r1, r1, r2
 8024f5c:	f8c7 1c50 	str.w	r1, [r7, #3152]	; 0xc50
 8024f60:	4629      	mov	r1, r5
 8024f62:	eb41 0303 	adc.w	r3, r1, r3
 8024f66:	f8c7 3c54 	str.w	r3, [r7, #3156]	; 0xc54
 8024f6a:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8024f6e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8024f72:	f607 42f8 	addw	r2, r7, #3320	; 0xcf8
 8024f76:	e9c2 3400 	strd	r3, r4, [r2]
 8024f7a:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 8024f7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8024f82:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8024f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f8a:	1884      	adds	r4, r0, r2
 8024f8c:	f8c7 4c48 	str.w	r4, [r7, #3144]	; 0xc48
 8024f90:	eb41 0303 	adc.w	r3, r1, r3
 8024f94:	f8c7 3c4c 	str.w	r3, [r7, #3148]	; 0xc4c
 8024f98:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8024f9c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8024fa0:	f607 42d8 	addw	r2, r7, #3288	; 0xcd8
 8024fa4:	e9c2 3400 	strd	r3, r4, [r2]
 8024fa8:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8024fac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8024fb0:	f04f 021c 	mov.w	r2, #28
 8024fb4:	f04f 0300 	mov.w	r3, #0
 8024fb8:	f7ff fbcc 	bl	8024754 <rotrFixed64>
 8024fbc:	4604      	mov	r4, r0
 8024fbe:	460d      	mov	r5, r1
 8024fc0:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8024fc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8024fc8:	f04f 0222 	mov.w	r2, #34	; 0x22
 8024fcc:	f04f 0300 	mov.w	r3, #0
 8024fd0:	f7ff fbc0 	bl	8024754 <rotrFixed64>
 8024fd4:	4602      	mov	r2, r0
 8024fd6:	460b      	mov	r3, r1
 8024fd8:	ea84 0102 	eor.w	r1, r4, r2
 8024fdc:	f8c7 1c40 	str.w	r1, [r7, #3136]	; 0xc40
 8024fe0:	406b      	eors	r3, r5
 8024fe2:	f8c7 3c44 	str.w	r3, [r7, #3140]	; 0xc44
 8024fe6:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8024fea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8024fee:	f04f 0227 	mov.w	r2, #39	; 0x27
 8024ff2:	f04f 0300 	mov.w	r3, #0
 8024ff6:	f7ff fbad 	bl	8024754 <rotrFixed64>
 8024ffa:	4602      	mov	r2, r0
 8024ffc:	460b      	mov	r3, r1
 8024ffe:	f507 6144 	add.w	r1, r7, #3136	; 0xc40
 8025002:	e9d1 4500 	ldrd	r4, r5, [r1]
 8025006:	4621      	mov	r1, r4
 8025008:	4051      	eors	r1, r2
 802500a:	f8c7 1c38 	str.w	r1, [r7, #3128]	; 0xc38
 802500e:	4629      	mov	r1, r5
 8025010:	404b      	eors	r3, r1
 8025012:	f8c7 3c3c 	str.w	r3, [r7, #3132]	; 0xc3c
 8025016:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 802501a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802501e:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8025022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025026:	ea00 0402 	and.w	r4, r0, r2
 802502a:	f8c7 4c30 	str.w	r4, [r7, #3120]	; 0xc30
 802502e:	400b      	ands	r3, r1
 8025030:	f8c7 3c34 	str.w	r3, [r7, #3124]	; 0xc34
 8025034:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8025038:	e9d3 4500 	ldrd	r4, r5, [r3]
 802503c:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8025040:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025044:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8025048:	e9d3 2300 	ldrd	r2, r3, [r3]
 802504c:	ea40 0602 	orr.w	r6, r0, r2
 8025050:	f8c7 6c28 	str.w	r6, [r7, #3112]	; 0xc28
 8025054:	430b      	orrs	r3, r1
 8025056:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 802505a:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 802505e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8025062:	460b      	mov	r3, r1
 8025064:	4023      	ands	r3, r4
 8025066:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 802506a:	4613      	mov	r3, r2
 802506c:	402b      	ands	r3, r5
 802506e:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 8025072:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8025076:	e9d3 4500 	ldrd	r4, r5, [r3]
 802507a:	4623      	mov	r3, r4
 802507c:	f507 6242 	add.w	r2, r7, #3104	; 0xc20
 8025080:	e9d2 0100 	ldrd	r0, r1, [r2]
 8025084:	4602      	mov	r2, r0
 8025086:	4313      	orrs	r3, r2
 8025088:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
 802508c:	462b      	mov	r3, r5
 802508e:	460a      	mov	r2, r1
 8025090:	4313      	orrs	r3, r2
 8025092:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 8025096:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 802509a:	e9d3 4500 	ldrd	r4, r5, [r3]
 802509e:	4623      	mov	r3, r4
 80250a0:	f607 4218 	addw	r2, r7, #3096	; 0xc18
 80250a4:	e9d2 0100 	ldrd	r0, r1, [r2]
 80250a8:	4602      	mov	r2, r0
 80250aa:	189b      	adds	r3, r3, r2
 80250ac:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80250b0:	462b      	mov	r3, r5
 80250b2:	460a      	mov	r2, r1
 80250b4:	4153      	adcs	r3, r2
 80250b6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80250ba:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 80250be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80250c2:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 80250c6:	4621      	mov	r1, r4
 80250c8:	1889      	adds	r1, r1, r2
 80250ca:	f8c7 1c10 	str.w	r1, [r7, #3088]	; 0xc10
 80250ce:	4629      	mov	r1, r5
 80250d0:	eb41 0303 	adc.w	r3, r1, r3
 80250d4:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
 80250d8:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80250dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80250e0:	f607 42f8 	addw	r2, r7, #3320	; 0xcf8
 80250e4:	e9c2 3400 	strd	r3, r4, [r2]
 80250e8:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 80250ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80250f0:	f04f 020e 	mov.w	r2, #14
 80250f4:	f04f 0300 	mov.w	r3, #0
 80250f8:	f7ff fb2c 	bl	8024754 <rotrFixed64>
 80250fc:	4604      	mov	r4, r0
 80250fe:	460d      	mov	r5, r1
 8025100:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 8025104:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025108:	f04f 0212 	mov.w	r2, #18
 802510c:	f04f 0300 	mov.w	r3, #0
 8025110:	f7ff fb20 	bl	8024754 <rotrFixed64>
 8025114:	4602      	mov	r2, r0
 8025116:	460b      	mov	r3, r1
 8025118:	ea84 0102 	eor.w	r1, r4, r2
 802511c:	f8c7 1c08 	str.w	r1, [r7, #3080]	; 0xc08
 8025120:	406b      	eors	r3, r5
 8025122:	f8c7 3c0c 	str.w	r3, [r7, #3084]	; 0xc0c
 8025126:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 802512a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802512e:	f04f 0229 	mov.w	r2, #41	; 0x29
 8025132:	f04f 0300 	mov.w	r3, #0
 8025136:	f7ff fb0d 	bl	8024754 <rotrFixed64>
 802513a:	4602      	mov	r2, r0
 802513c:	460b      	mov	r3, r1
 802513e:	f607 4108 	addw	r1, r7, #3080	; 0xc08
 8025142:	e9d1 4500 	ldrd	r4, r5, [r1]
 8025146:	4621      	mov	r1, r4
 8025148:	4051      	eors	r1, r2
 802514a:	f8c7 1c00 	str.w	r1, [r7, #3072]	; 0xc00
 802514e:	4629      	mov	r1, r5
 8025150:	404b      	eors	r3, r1
 8025152:	f8c7 3c04 	str.w	r3, [r7, #3076]	; 0xc04
 8025156:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 802515a:	e9d3 8900 	ldrd	r8, r9, [r3]
 802515e:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 8025162:	e9d3 4500 	ldrd	r4, r5, [r3]
 8025166:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 802516a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802516e:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8025172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025176:	ea80 0602 	eor.w	r6, r0, r2
 802517a:	f8c7 6bf8 	str.w	r6, [r7, #3064]	; 0xbf8
 802517e:	404b      	eors	r3, r1
 8025180:	f8c7 3bfc 	str.w	r3, [r7, #3068]	; 0xbfc
 8025184:	f607 33f8 	addw	r3, r7, #3064	; 0xbf8
 8025188:	e9d3 1200 	ldrd	r1, r2, [r3]
 802518c:	460b      	mov	r3, r1
 802518e:	4023      	ands	r3, r4
 8025190:	f8c7 3bf0 	str.w	r3, [r7, #3056]	; 0xbf0
 8025194:	4613      	mov	r3, r2
 8025196:	402b      	ands	r3, r5
 8025198:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
 802519c:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 80251a0:	e9d3 1200 	ldrd	r1, r2, [r3]
 80251a4:	460b      	mov	r3, r1
 80251a6:	ea88 0303 	eor.w	r3, r8, r3
 80251aa:	f8c7 3be8 	str.w	r3, [r7, #3048]	; 0xbe8
 80251ae:	4613      	mov	r3, r2
 80251b0:	ea89 0303 	eor.w	r3, r9, r3
 80251b4:	f8c7 3bec 	str.w	r3, [r7, #3052]	; 0xbec
 80251b8:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80251bc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80251c0:	4623      	mov	r3, r4
 80251c2:	f607 32e8 	addw	r2, r7, #3048	; 0xbe8
 80251c6:	e9d2 0100 	ldrd	r0, r1, [r2]
 80251ca:	4602      	mov	r2, r0
 80251cc:	189b      	adds	r3, r3, r2
 80251ce:	f8c7 3be0 	str.w	r3, [r7, #3040]	; 0xbe0
 80251d2:	462b      	mov	r3, r5
 80251d4:	460a      	mov	r2, r1
 80251d6:	4153      	adcs	r3, r2
 80251d8:	f8c7 3be4 	str.w	r3, [r7, #3044]	; 0xbe4
 80251dc:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80251e0:	3301      	adds	r3, #1
 80251e2:	00da      	lsls	r2, r3, #3
 80251e4:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 80251e8:	4413      	add	r3, r2
 80251ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80251ee:	f507 613e 	add.w	r1, r7, #3040	; 0xbe0
 80251f2:	e9d1 4500 	ldrd	r4, r5, [r1]
 80251f6:	4621      	mov	r1, r4
 80251f8:	1889      	adds	r1, r1, r2
 80251fa:	f8c7 1bd8 	str.w	r1, [r7, #3032]	; 0xbd8
 80251fe:	4629      	mov	r1, r5
 8025200:	eb41 0303 	adc.w	r3, r1, r3
 8025204:	f8c7 3bdc 	str.w	r3, [r7, #3036]	; 0xbdc
 8025208:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 802520c:	2b00      	cmp	r3, #0
 802520e:	f000 80b4 	beq.w	802537a <_Transform_Sha512+0x72e>
 8025212:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8025216:	3378      	adds	r3, #120	; 0x78
 8025218:	e9d3 0100 	ldrd	r0, r1, [r3]
 802521c:	f04f 0213 	mov.w	r2, #19
 8025220:	f04f 0300 	mov.w	r3, #0
 8025224:	f7ff fa96 	bl	8024754 <rotrFixed64>
 8025228:	4604      	mov	r4, r0
 802522a:	460d      	mov	r5, r1
 802522c:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8025230:	3378      	adds	r3, #120	; 0x78
 8025232:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025236:	f04f 023d 	mov.w	r2, #61	; 0x3d
 802523a:	f04f 0300 	mov.w	r3, #0
 802523e:	f7ff fa89 	bl	8024754 <rotrFixed64>
 8025242:	4602      	mov	r2, r0
 8025244:	460b      	mov	r3, r1
 8025246:	ea84 0102 	eor.w	r1, r4, r2
 802524a:	f8c7 1bd0 	str.w	r1, [r7, #3024]	; 0xbd0
 802524e:	406b      	eors	r3, r5
 8025250:	f8c7 3bd4 	str.w	r3, [r7, #3028]	; 0xbd4
 8025254:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8025258:	3378      	adds	r3, #120	; 0x78
 802525a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802525e:	f04f 0000 	mov.w	r0, #0
 8025262:	f04f 0100 	mov.w	r1, #0
 8025266:	0990      	lsrs	r0, r2, #6
 8025268:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 802526c:	0999      	lsrs	r1, r3, #6
 802526e:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8025272:	e9d3 4500 	ldrd	r4, r5, [r3]
 8025276:	4623      	mov	r3, r4
 8025278:	4043      	eors	r3, r0
 802527a:	f8c7 3bc8 	str.w	r3, [r7, #3016]	; 0xbc8
 802527e:	462b      	mov	r3, r5
 8025280:	404b      	eors	r3, r1
 8025282:	f8c7 3bcc 	str.w	r3, [r7, #3020]	; 0xbcc
 8025286:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 802528a:	3350      	adds	r3, #80	; 0x50
 802528c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025290:	f607 31c8 	addw	r1, r7, #3016	; 0xbc8
 8025294:	e9d1 4500 	ldrd	r4, r5, [r1]
 8025298:	4621      	mov	r1, r4
 802529a:	1889      	adds	r1, r1, r2
 802529c:	f8c7 1bc0 	str.w	r1, [r7, #3008]	; 0xbc0
 80252a0:	4629      	mov	r1, r5
 80252a2:	eb41 0303 	adc.w	r3, r1, r3
 80252a6:	f8c7 3bc4 	str.w	r3, [r7, #3012]	; 0xbc4
 80252aa:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80252ae:	3310      	adds	r3, #16
 80252b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80252b4:	f04f 0201 	mov.w	r2, #1
 80252b8:	f04f 0300 	mov.w	r3, #0
 80252bc:	f7ff fa4a 	bl	8024754 <rotrFixed64>
 80252c0:	4604      	mov	r4, r0
 80252c2:	460d      	mov	r5, r1
 80252c4:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80252c8:	3310      	adds	r3, #16
 80252ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80252ce:	f04f 0208 	mov.w	r2, #8
 80252d2:	f04f 0300 	mov.w	r3, #0
 80252d6:	f7ff fa3d 	bl	8024754 <rotrFixed64>
 80252da:	4602      	mov	r2, r0
 80252dc:	460b      	mov	r3, r1
 80252de:	ea84 0102 	eor.w	r1, r4, r2
 80252e2:	f8c7 1bb8 	str.w	r1, [r7, #3000]	; 0xbb8
 80252e6:	406b      	eors	r3, r5
 80252e8:	f8c7 3bbc 	str.w	r3, [r7, #3004]	; 0xbbc
 80252ec:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80252f0:	3310      	adds	r3, #16
 80252f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80252f6:	f04f 0000 	mov.w	r0, #0
 80252fa:	f04f 0100 	mov.w	r1, #0
 80252fe:	09d0      	lsrs	r0, r2, #7
 8025300:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8025304:	09d9      	lsrs	r1, r3, #7
 8025306:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 802530a:	e9d3 4500 	ldrd	r4, r5, [r3]
 802530e:	4623      	mov	r3, r4
 8025310:	4043      	eors	r3, r0
 8025312:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
 8025316:	462b      	mov	r3, r5
 8025318:	404b      	eors	r3, r1
 802531a:	f8c7 3bb4 	str.w	r3, [r7, #2996]	; 0xbb4
 802531e:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 8025322:	e9d3 4500 	ldrd	r4, r5, [r3]
 8025326:	4623      	mov	r3, r4
 8025328:	f507 623b 	add.w	r2, r7, #2992	; 0xbb0
 802532c:	e9d2 0100 	ldrd	r0, r1, [r2]
 8025330:	4602      	mov	r2, r0
 8025332:	189b      	adds	r3, r3, r2
 8025334:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8025338:	462b      	mov	r3, r5
 802533a:	460a      	mov	r2, r1
 802533c:	4153      	adcs	r3, r2
 802533e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8025342:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8025346:	3308      	adds	r3, #8
 8025348:	e9d3 2300 	ldrd	r2, r3, [r3]
 802534c:	f8d7 1d04 	ldr.w	r1, [r7, #3332]	; 0xd04
 8025350:	3108      	adds	r1, #8
 8025352:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8025356:	4620      	mov	r0, r4
 8025358:	1880      	adds	r0, r0, r2
 802535a:	f8c7 0ba8 	str.w	r0, [r7, #2984]	; 0xba8
 802535e:	4628      	mov	r0, r5
 8025360:	eb40 0303 	adc.w	r3, r0, r3
 8025364:	f8c7 3bac 	str.w	r3, [r7, #2988]	; 0xbac
 8025368:	f607 33a8 	addw	r3, r7, #2984	; 0xba8
 802536c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8025370:	e9c1 3400 	strd	r3, r4, [r1]
 8025374:	e9d1 2300 	ldrd	r2, r3, [r1]
 8025378:	e00b      	b.n	8025392 <_Transform_Sha512+0x746>
 802537a:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 802537e:	f103 0108 	add.w	r1, r3, #8
 8025382:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 8025386:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 802538a:	e9c1 2300 	strd	r2, r3, [r1]
 802538e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8025392:	f607 31d8 	addw	r1, r7, #3032	; 0xbd8
 8025396:	e9d1 4500 	ldrd	r4, r5, [r1]
 802539a:	4621      	mov	r1, r4
 802539c:	1851      	adds	r1, r2, r1
 802539e:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 80253a2:	4629      	mov	r1, r5
 80253a4:	414b      	adcs	r3, r1
 80253a6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80253aa:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 80253ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80253b2:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80253b6:	4621      	mov	r1, r4
 80253b8:	1889      	adds	r1, r1, r2
 80253ba:	f8c7 1ba0 	str.w	r1, [r7, #2976]	; 0xba0
 80253be:	4629      	mov	r1, r5
 80253c0:	eb41 0303 	adc.w	r3, r1, r3
 80253c4:	f8c7 3ba4 	str.w	r3, [r7, #2980]	; 0xba4
 80253c8:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 80253cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80253d0:	f507 624f 	add.w	r2, r7, #3312	; 0xcf0
 80253d4:	e9c2 3400 	strd	r3, r4, [r2]
 80253d8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80253dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80253e0:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 80253e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80253e8:	1884      	adds	r4, r0, r2
 80253ea:	f8c7 4b98 	str.w	r4, [r7, #2968]	; 0xb98
 80253ee:	eb41 0303 	adc.w	r3, r1, r3
 80253f2:	f8c7 3b9c 	str.w	r3, [r7, #2972]	; 0xb9c
 80253f6:	f607 3398 	addw	r3, r7, #2968	; 0xb98
 80253fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80253fe:	f507 624d 	add.w	r2, r7, #3280	; 0xcd0
 8025402:	e9c2 3400 	strd	r3, r4, [r2]
 8025406:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 802540a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802540e:	f04f 021c 	mov.w	r2, #28
 8025412:	f04f 0300 	mov.w	r3, #0
 8025416:	f7ff f99d 	bl	8024754 <rotrFixed64>
 802541a:	4604      	mov	r4, r0
 802541c:	460d      	mov	r5, r1
 802541e:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8025422:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025426:	f04f 0222 	mov.w	r2, #34	; 0x22
 802542a:	f04f 0300 	mov.w	r3, #0
 802542e:	f7ff f991 	bl	8024754 <rotrFixed64>
 8025432:	4602      	mov	r2, r0
 8025434:	460b      	mov	r3, r1
 8025436:	ea84 0102 	eor.w	r1, r4, r2
 802543a:	f8c7 1b90 	str.w	r1, [r7, #2960]	; 0xb90
 802543e:	406b      	eors	r3, r5
 8025440:	f8c7 3b94 	str.w	r3, [r7, #2964]	; 0xb94
 8025444:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8025448:	e9d3 0100 	ldrd	r0, r1, [r3]
 802544c:	f04f 0227 	mov.w	r2, #39	; 0x27
 8025450:	f04f 0300 	mov.w	r3, #0
 8025454:	f7ff f97e 	bl	8024754 <rotrFixed64>
 8025458:	4602      	mov	r2, r0
 802545a:	460b      	mov	r3, r1
 802545c:	f507 6139 	add.w	r1, r7, #2960	; 0xb90
 8025460:	e9d1 4500 	ldrd	r4, r5, [r1]
 8025464:	4621      	mov	r1, r4
 8025466:	4051      	eors	r1, r2
 8025468:	f8c7 1b88 	str.w	r1, [r7, #2952]	; 0xb88
 802546c:	4629      	mov	r1, r5
 802546e:	404b      	eors	r3, r1
 8025470:	f8c7 3b8c 	str.w	r3, [r7, #2956]	; 0xb8c
 8025474:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8025478:	e9d3 0100 	ldrd	r0, r1, [r3]
 802547c:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8025480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025484:	ea00 0402 	and.w	r4, r0, r2
 8025488:	f8c7 4b80 	str.w	r4, [r7, #2944]	; 0xb80
 802548c:	400b      	ands	r3, r1
 802548e:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 8025492:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8025496:	e9d3 4500 	ldrd	r4, r5, [r3]
 802549a:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 802549e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80254a2:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 80254a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80254aa:	ea40 0602 	orr.w	r6, r0, r2
 80254ae:	f8c7 6b78 	str.w	r6, [r7, #2936]	; 0xb78
 80254b2:	430b      	orrs	r3, r1
 80254b4:	f8c7 3b7c 	str.w	r3, [r7, #2940]	; 0xb7c
 80254b8:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80254bc:	e9d3 1200 	ldrd	r1, r2, [r3]
 80254c0:	460b      	mov	r3, r1
 80254c2:	4023      	ands	r3, r4
 80254c4:	f8c7 3b70 	str.w	r3, [r7, #2928]	; 0xb70
 80254c8:	4613      	mov	r3, r2
 80254ca:	402b      	ands	r3, r5
 80254cc:	f8c7 3b74 	str.w	r3, [r7, #2932]	; 0xb74
 80254d0:	f507 6338 	add.w	r3, r7, #2944	; 0xb80
 80254d4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80254d8:	4623      	mov	r3, r4
 80254da:	f507 6237 	add.w	r2, r7, #2928	; 0xb70
 80254de:	e9d2 0100 	ldrd	r0, r1, [r2]
 80254e2:	4602      	mov	r2, r0
 80254e4:	4313      	orrs	r3, r2
 80254e6:	f8c7 3b68 	str.w	r3, [r7, #2920]	; 0xb68
 80254ea:	462b      	mov	r3, r5
 80254ec:	460a      	mov	r2, r1
 80254ee:	4313      	orrs	r3, r2
 80254f0:	f8c7 3b6c 	str.w	r3, [r7, #2924]	; 0xb6c
 80254f4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80254f8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80254fc:	4623      	mov	r3, r4
 80254fe:	f607 3268 	addw	r2, r7, #2920	; 0xb68
 8025502:	e9d2 0100 	ldrd	r0, r1, [r2]
 8025506:	4602      	mov	r2, r0
 8025508:	189b      	adds	r3, r3, r2
 802550a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 802550e:	462b      	mov	r3, r5
 8025510:	460a      	mov	r2, r1
 8025512:	4153      	adcs	r3, r2
 8025514:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8025518:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 802551c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025520:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8025524:	4621      	mov	r1, r4
 8025526:	1889      	adds	r1, r1, r2
 8025528:	f8c7 1b60 	str.w	r1, [r7, #2912]	; 0xb60
 802552c:	4629      	mov	r1, r5
 802552e:	eb41 0303 	adc.w	r3, r1, r3
 8025532:	f8c7 3b64 	str.w	r3, [r7, #2916]	; 0xb64
 8025536:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 802553a:	e9d3 3400 	ldrd	r3, r4, [r3]
 802553e:	f507 624f 	add.w	r2, r7, #3312	; 0xcf0
 8025542:	e9c2 3400 	strd	r3, r4, [r2]
 8025546:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 802554a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802554e:	f04f 020e 	mov.w	r2, #14
 8025552:	f04f 0300 	mov.w	r3, #0
 8025556:	f7ff f8fd 	bl	8024754 <rotrFixed64>
 802555a:	4604      	mov	r4, r0
 802555c:	460d      	mov	r5, r1
 802555e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8025562:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025566:	f04f 0212 	mov.w	r2, #18
 802556a:	f04f 0300 	mov.w	r3, #0
 802556e:	f7ff f8f1 	bl	8024754 <rotrFixed64>
 8025572:	4602      	mov	r2, r0
 8025574:	460b      	mov	r3, r1
 8025576:	ea84 0102 	eor.w	r1, r4, r2
 802557a:	f8c7 1b58 	str.w	r1, [r7, #2904]	; 0xb58
 802557e:	406b      	eors	r3, r5
 8025580:	f8c7 3b5c 	str.w	r3, [r7, #2908]	; 0xb5c
 8025584:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8025588:	e9d3 0100 	ldrd	r0, r1, [r3]
 802558c:	f04f 0229 	mov.w	r2, #41	; 0x29
 8025590:	f04f 0300 	mov.w	r3, #0
 8025594:	f7ff f8de 	bl	8024754 <rotrFixed64>
 8025598:	4602      	mov	r2, r0
 802559a:	460b      	mov	r3, r1
 802559c:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 80255a0:	e9d1 4500 	ldrd	r4, r5, [r1]
 80255a4:	4621      	mov	r1, r4
 80255a6:	4051      	eors	r1, r2
 80255a8:	f8c7 1b50 	str.w	r1, [r7, #2896]	; 0xb50
 80255ac:	4629      	mov	r1, r5
 80255ae:	404b      	eors	r3, r1
 80255b0:	f8c7 3b54 	str.w	r3, [r7, #2900]	; 0xb54
 80255b4:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 80255b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80255bc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80255c0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80255c4:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 80255c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80255cc:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 80255d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80255d4:	ea80 0602 	eor.w	r6, r0, r2
 80255d8:	f8c7 6b48 	str.w	r6, [r7, #2888]	; 0xb48
 80255dc:	404b      	eors	r3, r1
 80255de:	f8c7 3b4c 	str.w	r3, [r7, #2892]	; 0xb4c
 80255e2:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 80255e6:	e9d3 1200 	ldrd	r1, r2, [r3]
 80255ea:	460b      	mov	r3, r1
 80255ec:	4023      	ands	r3, r4
 80255ee:	f8c7 3b40 	str.w	r3, [r7, #2880]	; 0xb40
 80255f2:	4613      	mov	r3, r2
 80255f4:	402b      	ands	r3, r5
 80255f6:	f8c7 3b44 	str.w	r3, [r7, #2884]	; 0xb44
 80255fa:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 80255fe:	e9d3 1200 	ldrd	r1, r2, [r3]
 8025602:	460b      	mov	r3, r1
 8025604:	ea88 0303 	eor.w	r3, r8, r3
 8025608:	f8c7 3b38 	str.w	r3, [r7, #2872]	; 0xb38
 802560c:	4613      	mov	r3, r2
 802560e:	ea89 0303 	eor.w	r3, r9, r3
 8025612:	f8c7 3b3c 	str.w	r3, [r7, #2876]	; 0xb3c
 8025616:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 802561a:	e9d3 4500 	ldrd	r4, r5, [r3]
 802561e:	4623      	mov	r3, r4
 8025620:	f607 3238 	addw	r2, r7, #2872	; 0xb38
 8025624:	e9d2 0100 	ldrd	r0, r1, [r2]
 8025628:	4602      	mov	r2, r0
 802562a:	189b      	adds	r3, r3, r2
 802562c:	f8c7 3b30 	str.w	r3, [r7, #2864]	; 0xb30
 8025630:	462b      	mov	r3, r5
 8025632:	460a      	mov	r2, r1
 8025634:	4153      	adcs	r3, r2
 8025636:	f8c7 3b34 	str.w	r3, [r7, #2868]	; 0xb34
 802563a:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 802563e:	3302      	adds	r3, #2
 8025640:	00da      	lsls	r2, r3, #3
 8025642:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 8025646:	4413      	add	r3, r2
 8025648:	e9d3 2300 	ldrd	r2, r3, [r3]
 802564c:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 8025650:	e9d1 4500 	ldrd	r4, r5, [r1]
 8025654:	4621      	mov	r1, r4
 8025656:	1889      	adds	r1, r1, r2
 8025658:	f8c7 1b28 	str.w	r1, [r7, #2856]	; 0xb28
 802565c:	4629      	mov	r1, r5
 802565e:	eb41 0303 	adc.w	r3, r1, r3
 8025662:	f8c7 3b2c 	str.w	r3, [r7, #2860]	; 0xb2c
 8025666:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 802566a:	2b00      	cmp	r3, #0
 802566c:	f000 80b1 	beq.w	80257d2 <_Transform_Sha512+0xb86>
 8025670:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8025674:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025678:	f04f 0213 	mov.w	r2, #19
 802567c:	f04f 0300 	mov.w	r3, #0
 8025680:	f7ff f868 	bl	8024754 <rotrFixed64>
 8025684:	4604      	mov	r4, r0
 8025686:	460d      	mov	r5, r1
 8025688:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 802568c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025690:	f04f 023d 	mov.w	r2, #61	; 0x3d
 8025694:	f04f 0300 	mov.w	r3, #0
 8025698:	f7ff f85c 	bl	8024754 <rotrFixed64>
 802569c:	4602      	mov	r2, r0
 802569e:	460b      	mov	r3, r1
 80256a0:	ea84 0102 	eor.w	r1, r4, r2
 80256a4:	f8c7 1b20 	str.w	r1, [r7, #2848]	; 0xb20
 80256a8:	406b      	eors	r3, r5
 80256aa:	f8c7 3b24 	str.w	r3, [r7, #2852]	; 0xb24
 80256ae:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80256b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80256b6:	f04f 0000 	mov.w	r0, #0
 80256ba:	f04f 0100 	mov.w	r1, #0
 80256be:	0990      	lsrs	r0, r2, #6
 80256c0:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 80256c4:	0999      	lsrs	r1, r3, #6
 80256c6:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 80256ca:	e9d3 4500 	ldrd	r4, r5, [r3]
 80256ce:	4623      	mov	r3, r4
 80256d0:	4043      	eors	r3, r0
 80256d2:	f8c7 3b18 	str.w	r3, [r7, #2840]	; 0xb18
 80256d6:	462b      	mov	r3, r5
 80256d8:	404b      	eors	r3, r1
 80256da:	f8c7 3b1c 	str.w	r3, [r7, #2844]	; 0xb1c
 80256de:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80256e2:	3358      	adds	r3, #88	; 0x58
 80256e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80256e8:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 80256ec:	e9d1 4500 	ldrd	r4, r5, [r1]
 80256f0:	4621      	mov	r1, r4
 80256f2:	1889      	adds	r1, r1, r2
 80256f4:	f8c7 1b10 	str.w	r1, [r7, #2832]	; 0xb10
 80256f8:	4629      	mov	r1, r5
 80256fa:	eb41 0303 	adc.w	r3, r1, r3
 80256fe:	f8c7 3b14 	str.w	r3, [r7, #2836]	; 0xb14
 8025702:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8025706:	3318      	adds	r3, #24
 8025708:	e9d3 0100 	ldrd	r0, r1, [r3]
 802570c:	f04f 0201 	mov.w	r2, #1
 8025710:	f04f 0300 	mov.w	r3, #0
 8025714:	f7ff f81e 	bl	8024754 <rotrFixed64>
 8025718:	4604      	mov	r4, r0
 802571a:	460d      	mov	r5, r1
 802571c:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8025720:	3318      	adds	r3, #24
 8025722:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025726:	f04f 0208 	mov.w	r2, #8
 802572a:	f04f 0300 	mov.w	r3, #0
 802572e:	f7ff f811 	bl	8024754 <rotrFixed64>
 8025732:	4602      	mov	r2, r0
 8025734:	460b      	mov	r3, r1
 8025736:	ea84 0102 	eor.w	r1, r4, r2
 802573a:	f8c7 1b08 	str.w	r1, [r7, #2824]	; 0xb08
 802573e:	406b      	eors	r3, r5
 8025740:	f8c7 3b0c 	str.w	r3, [r7, #2828]	; 0xb0c
 8025744:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8025748:	3318      	adds	r3, #24
 802574a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802574e:	f04f 0000 	mov.w	r0, #0
 8025752:	f04f 0100 	mov.w	r1, #0
 8025756:	09d0      	lsrs	r0, r2, #7
 8025758:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 802575c:	09d9      	lsrs	r1, r3, #7
 802575e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8025762:	e9d3 4500 	ldrd	r4, r5, [r3]
 8025766:	4623      	mov	r3, r4
 8025768:	4043      	eors	r3, r0
 802576a:	f8c7 3b00 	str.w	r3, [r7, #2816]	; 0xb00
 802576e:	462b      	mov	r3, r5
 8025770:	404b      	eors	r3, r1
 8025772:	f8c7 3b04 	str.w	r3, [r7, #2820]	; 0xb04
 8025776:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 802577a:	e9d3 4500 	ldrd	r4, r5, [r3]
 802577e:	4623      	mov	r3, r4
 8025780:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8025784:	e9d2 0100 	ldrd	r0, r1, [r2]
 8025788:	4602      	mov	r2, r0
 802578a:	189b      	adds	r3, r3, r2
 802578c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8025790:	462b      	mov	r3, r5
 8025792:	460a      	mov	r2, r1
 8025794:	4153      	adcs	r3, r2
 8025796:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 802579a:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 802579e:	3310      	adds	r3, #16
 80257a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80257a4:	f8d7 1d04 	ldr.w	r1, [r7, #3332]	; 0xd04
 80257a8:	3110      	adds	r1, #16
 80257aa:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	; 0x148
 80257ae:	4620      	mov	r0, r4
 80257b0:	1880      	adds	r0, r0, r2
 80257b2:	f8c7 0af8 	str.w	r0, [r7, #2808]	; 0xaf8
 80257b6:	4628      	mov	r0, r5
 80257b8:	eb40 0303 	adc.w	r3, r0, r3
 80257bc:	f8c7 3afc 	str.w	r3, [r7, #2812]	; 0xafc
 80257c0:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 80257c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80257c8:	e9c1 3400 	strd	r3, r4, [r1]
 80257cc:	e9d1 2300 	ldrd	r2, r3, [r1]
 80257d0:	e00b      	b.n	80257ea <_Transform_Sha512+0xb9e>
 80257d2:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80257d6:	f103 0110 	add.w	r1, r3, #16
 80257da:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 80257de:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80257e2:	e9c1 2300 	strd	r2, r3, [r1]
 80257e6:	e9d1 2300 	ldrd	r2, r3, [r1]
 80257ea:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 80257ee:	e9d1 4500 	ldrd	r4, r5, [r1]
 80257f2:	4621      	mov	r1, r4
 80257f4:	1851      	adds	r1, r2, r1
 80257f6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 80257fa:	4629      	mov	r1, r5
 80257fc:	414b      	adcs	r3, r1
 80257fe:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8025802:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8025806:	e9d3 2300 	ldrd	r2, r3, [r3]
 802580a:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 802580e:	4621      	mov	r1, r4
 8025810:	1889      	adds	r1, r1, r2
 8025812:	f8c7 1af0 	str.w	r1, [r7, #2800]	; 0xaf0
 8025816:	4629      	mov	r1, r5
 8025818:	eb41 0303 	adc.w	r3, r1, r3
 802581c:	f8c7 3af4 	str.w	r3, [r7, #2804]	; 0xaf4
 8025820:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8025824:	e9d3 3400 	ldrd	r3, r4, [r3]
 8025828:	f607 42e8 	addw	r2, r7, #3304	; 0xce8
 802582c:	e9c2 3400 	strd	r3, r4, [r2]
 8025830:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8025834:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025838:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 802583c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025840:	1884      	adds	r4, r0, r2
 8025842:	f8c7 4ae8 	str.w	r4, [r7, #2792]	; 0xae8
 8025846:	eb41 0303 	adc.w	r3, r1, r3
 802584a:	f8c7 3aec 	str.w	r3, [r7, #2796]	; 0xaec
 802584e:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8025852:	e9d3 3400 	ldrd	r3, r4, [r3]
 8025856:	f607 42c8 	addw	r2, r7, #3272	; 0xcc8
 802585a:	e9c2 3400 	strd	r3, r4, [r2]
 802585e:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8025862:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025866:	f04f 021c 	mov.w	r2, #28
 802586a:	f04f 0300 	mov.w	r3, #0
 802586e:	f7fe ff71 	bl	8024754 <rotrFixed64>
 8025872:	4604      	mov	r4, r0
 8025874:	460d      	mov	r5, r1
 8025876:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 802587a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802587e:	f04f 0222 	mov.w	r2, #34	; 0x22
 8025882:	f04f 0300 	mov.w	r3, #0
 8025886:	f7fe ff65 	bl	8024754 <rotrFixed64>
 802588a:	4602      	mov	r2, r0
 802588c:	460b      	mov	r3, r1
 802588e:	ea84 0102 	eor.w	r1, r4, r2
 8025892:	f8c7 1ae0 	str.w	r1, [r7, #2784]	; 0xae0
 8025896:	406b      	eors	r3, r5
 8025898:	f8c7 3ae4 	str.w	r3, [r7, #2788]	; 0xae4
 802589c:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 80258a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80258a4:	f04f 0227 	mov.w	r2, #39	; 0x27
 80258a8:	f04f 0300 	mov.w	r3, #0
 80258ac:	f7fe ff52 	bl	8024754 <rotrFixed64>
 80258b0:	4602      	mov	r2, r0
 80258b2:	460b      	mov	r3, r1
 80258b4:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 80258b8:	e9d1 4500 	ldrd	r4, r5, [r1]
 80258bc:	4621      	mov	r1, r4
 80258be:	4051      	eors	r1, r2
 80258c0:	f8c7 1ad8 	str.w	r1, [r7, #2776]	; 0xad8
 80258c4:	4629      	mov	r1, r5
 80258c6:	404b      	eors	r3, r1
 80258c8:	f8c7 3adc 	str.w	r3, [r7, #2780]	; 0xadc
 80258cc:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 80258d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80258d4:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 80258d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80258dc:	ea00 0402 	and.w	r4, r0, r2
 80258e0:	f8c7 4ad0 	str.w	r4, [r7, #2768]	; 0xad0
 80258e4:	400b      	ands	r3, r1
 80258e6:	f8c7 3ad4 	str.w	r3, [r7, #2772]	; 0xad4
 80258ea:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 80258ee:	e9d3 4500 	ldrd	r4, r5, [r3]
 80258f2:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 80258f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80258fa:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 80258fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025902:	ea40 0602 	orr.w	r6, r0, r2
 8025906:	f8c7 6ac8 	str.w	r6, [r7, #2760]	; 0xac8
 802590a:	430b      	orrs	r3, r1
 802590c:	f8c7 3acc 	str.w	r3, [r7, #2764]	; 0xacc
 8025910:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 8025914:	e9d3 1200 	ldrd	r1, r2, [r3]
 8025918:	460b      	mov	r3, r1
 802591a:	4023      	ands	r3, r4
 802591c:	f8c7 3ac0 	str.w	r3, [r7, #2752]	; 0xac0
 8025920:	4613      	mov	r3, r2
 8025922:	402b      	ands	r3, r5
 8025924:	f8c7 3ac4 	str.w	r3, [r7, #2756]	; 0xac4
 8025928:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 802592c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8025930:	4623      	mov	r3, r4
 8025932:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 8025936:	e9d2 0100 	ldrd	r0, r1, [r2]
 802593a:	4602      	mov	r2, r0
 802593c:	4313      	orrs	r3, r2
 802593e:	f8c7 3ab8 	str.w	r3, [r7, #2744]	; 0xab8
 8025942:	462b      	mov	r3, r5
 8025944:	460a      	mov	r2, r1
 8025946:	4313      	orrs	r3, r2
 8025948:	f8c7 3abc 	str.w	r3, [r7, #2748]	; 0xabc
 802594c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8025950:	e9d3 4500 	ldrd	r4, r5, [r3]
 8025954:	4623      	mov	r3, r4
 8025956:	f607 22b8 	addw	r2, r7, #2744	; 0xab8
 802595a:	e9d2 0100 	ldrd	r0, r1, [r2]
 802595e:	4602      	mov	r2, r0
 8025960:	189b      	adds	r3, r3, r2
 8025962:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8025966:	462b      	mov	r3, r5
 8025968:	460a      	mov	r2, r1
 802596a:	4153      	adcs	r3, r2
 802596c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8025970:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8025974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025978:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	; 0x138
 802597c:	4621      	mov	r1, r4
 802597e:	1889      	adds	r1, r1, r2
 8025980:	f8c7 1ab0 	str.w	r1, [r7, #2736]	; 0xab0
 8025984:	4629      	mov	r1, r5
 8025986:	eb41 0303 	adc.w	r3, r1, r3
 802598a:	f8c7 3ab4 	str.w	r3, [r7, #2740]	; 0xab4
 802598e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8025992:	e9d3 3400 	ldrd	r3, r4, [r3]
 8025996:	f607 42e8 	addw	r2, r7, #3304	; 0xce8
 802599a:	e9c2 3400 	strd	r3, r4, [r2]
 802599e:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 80259a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80259a6:	f04f 020e 	mov.w	r2, #14
 80259aa:	f04f 0300 	mov.w	r3, #0
 80259ae:	f7fe fed1 	bl	8024754 <rotrFixed64>
 80259b2:	4604      	mov	r4, r0
 80259b4:	460d      	mov	r5, r1
 80259b6:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 80259ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80259be:	f04f 0212 	mov.w	r2, #18
 80259c2:	f04f 0300 	mov.w	r3, #0
 80259c6:	f7fe fec5 	bl	8024754 <rotrFixed64>
 80259ca:	4602      	mov	r2, r0
 80259cc:	460b      	mov	r3, r1
 80259ce:	ea84 0102 	eor.w	r1, r4, r2
 80259d2:	f8c7 1aa8 	str.w	r1, [r7, #2728]	; 0xaa8
 80259d6:	406b      	eors	r3, r5
 80259d8:	f8c7 3aac 	str.w	r3, [r7, #2732]	; 0xaac
 80259dc:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 80259e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80259e4:	f04f 0229 	mov.w	r2, #41	; 0x29
 80259e8:	f04f 0300 	mov.w	r3, #0
 80259ec:	f7fe feb2 	bl	8024754 <rotrFixed64>
 80259f0:	4602      	mov	r2, r0
 80259f2:	460b      	mov	r3, r1
 80259f4:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 80259f8:	e9d1 4500 	ldrd	r4, r5, [r1]
 80259fc:	4621      	mov	r1, r4
 80259fe:	4051      	eors	r1, r2
 8025a00:	f8c7 1aa0 	str.w	r1, [r7, #2720]	; 0xaa0
 8025a04:	4629      	mov	r1, r5
 8025a06:	404b      	eors	r3, r1
 8025a08:	f8c7 3aa4 	str.w	r3, [r7, #2724]	; 0xaa4
 8025a0c:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 8025a10:	e9d3 8900 	ldrd	r8, r9, [r3]
 8025a14:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8025a18:	e9d3 4500 	ldrd	r4, r5, [r3]
 8025a1c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8025a20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025a24:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 8025a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025a2c:	ea80 0602 	eor.w	r6, r0, r2
 8025a30:	f8c7 6a98 	str.w	r6, [r7, #2712]	; 0xa98
 8025a34:	404b      	eors	r3, r1
 8025a36:	f8c7 3a9c 	str.w	r3, [r7, #2716]	; 0xa9c
 8025a3a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8025a3e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8025a42:	460b      	mov	r3, r1
 8025a44:	4023      	ands	r3, r4
 8025a46:	f8c7 3a90 	str.w	r3, [r7, #2704]	; 0xa90
 8025a4a:	4613      	mov	r3, r2
 8025a4c:	402b      	ands	r3, r5
 8025a4e:	f8c7 3a94 	str.w	r3, [r7, #2708]	; 0xa94
 8025a52:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8025a56:	e9d3 1200 	ldrd	r1, r2, [r3]
 8025a5a:	460b      	mov	r3, r1
 8025a5c:	ea88 0303 	eor.w	r3, r8, r3
 8025a60:	f8c7 3a88 	str.w	r3, [r7, #2696]	; 0xa88
 8025a64:	4613      	mov	r3, r2
 8025a66:	ea89 0303 	eor.w	r3, r9, r3
 8025a6a:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c
 8025a6e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8025a72:	e9d3 4500 	ldrd	r4, r5, [r3]
 8025a76:	4623      	mov	r3, r4
 8025a78:	f607 2288 	addw	r2, r7, #2696	; 0xa88
 8025a7c:	e9d2 0100 	ldrd	r0, r1, [r2]
 8025a80:	4602      	mov	r2, r0
 8025a82:	189b      	adds	r3, r3, r2
 8025a84:	f8c7 3a80 	str.w	r3, [r7, #2688]	; 0xa80
 8025a88:	462b      	mov	r3, r5
 8025a8a:	460a      	mov	r2, r1
 8025a8c:	4153      	adcs	r3, r2
 8025a8e:	f8c7 3a84 	str.w	r3, [r7, #2692]	; 0xa84
 8025a92:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8025a96:	3303      	adds	r3, #3
 8025a98:	00da      	lsls	r2, r3, #3
 8025a9a:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 8025a9e:	4413      	add	r3, r2
 8025aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025aa4:	f507 6128 	add.w	r1, r7, #2688	; 0xa80
 8025aa8:	e9d1 4500 	ldrd	r4, r5, [r1]
 8025aac:	4621      	mov	r1, r4
 8025aae:	1889      	adds	r1, r1, r2
 8025ab0:	f8c7 1a78 	str.w	r1, [r7, #2680]	; 0xa78
 8025ab4:	4629      	mov	r1, r5
 8025ab6:	eb41 0303 	adc.w	r3, r1, r3
 8025aba:	f8c7 3a7c 	str.w	r3, [r7, #2684]	; 0xa7c
 8025abe:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8025ac2:	2b00      	cmp	r3, #0
 8025ac4:	f000 80b4 	beq.w	8025c30 <_Transform_Sha512+0xfe4>
 8025ac8:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8025acc:	3308      	adds	r3, #8
 8025ace:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025ad2:	f04f 0213 	mov.w	r2, #19
 8025ad6:	f04f 0300 	mov.w	r3, #0
 8025ada:	f7fe fe3b 	bl	8024754 <rotrFixed64>
 8025ade:	4604      	mov	r4, r0
 8025ae0:	460d      	mov	r5, r1
 8025ae2:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8025ae6:	3308      	adds	r3, #8
 8025ae8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025aec:	f04f 023d 	mov.w	r2, #61	; 0x3d
 8025af0:	f04f 0300 	mov.w	r3, #0
 8025af4:	f7fe fe2e 	bl	8024754 <rotrFixed64>
 8025af8:	4602      	mov	r2, r0
 8025afa:	460b      	mov	r3, r1
 8025afc:	ea84 0102 	eor.w	r1, r4, r2
 8025b00:	f8c7 1a70 	str.w	r1, [r7, #2672]	; 0xa70
 8025b04:	406b      	eors	r3, r5
 8025b06:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
 8025b0a:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8025b0e:	3308      	adds	r3, #8
 8025b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025b14:	f04f 0000 	mov.w	r0, #0
 8025b18:	f04f 0100 	mov.w	r1, #0
 8025b1c:	0990      	lsrs	r0, r2, #6
 8025b1e:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 8025b22:	0999      	lsrs	r1, r3, #6
 8025b24:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8025b28:	e9d3 4500 	ldrd	r4, r5, [r3]
 8025b2c:	4623      	mov	r3, r4
 8025b2e:	4043      	eors	r3, r0
 8025b30:	f8c7 3a68 	str.w	r3, [r7, #2664]	; 0xa68
 8025b34:	462b      	mov	r3, r5
 8025b36:	404b      	eors	r3, r1
 8025b38:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
 8025b3c:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8025b40:	3360      	adds	r3, #96	; 0x60
 8025b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025b46:	f607 2168 	addw	r1, r7, #2664	; 0xa68
 8025b4a:	e9d1 4500 	ldrd	r4, r5, [r1]
 8025b4e:	4621      	mov	r1, r4
 8025b50:	1889      	adds	r1, r1, r2
 8025b52:	f8c7 1a60 	str.w	r1, [r7, #2656]	; 0xa60
 8025b56:	4629      	mov	r1, r5
 8025b58:	eb41 0303 	adc.w	r3, r1, r3
 8025b5c:	f8c7 3a64 	str.w	r3, [r7, #2660]	; 0xa64
 8025b60:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8025b64:	3320      	adds	r3, #32
 8025b66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025b6a:	f04f 0201 	mov.w	r2, #1
 8025b6e:	f04f 0300 	mov.w	r3, #0
 8025b72:	f7fe fdef 	bl	8024754 <rotrFixed64>
 8025b76:	4604      	mov	r4, r0
 8025b78:	460d      	mov	r5, r1
 8025b7a:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8025b7e:	3320      	adds	r3, #32
 8025b80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025b84:	f04f 0208 	mov.w	r2, #8
 8025b88:	f04f 0300 	mov.w	r3, #0
 8025b8c:	f7fe fde2 	bl	8024754 <rotrFixed64>
 8025b90:	4602      	mov	r2, r0
 8025b92:	460b      	mov	r3, r1
 8025b94:	ea84 0102 	eor.w	r1, r4, r2
 8025b98:	f8c7 1a58 	str.w	r1, [r7, #2648]	; 0xa58
 8025b9c:	406b      	eors	r3, r5
 8025b9e:	f8c7 3a5c 	str.w	r3, [r7, #2652]	; 0xa5c
 8025ba2:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8025ba6:	3320      	adds	r3, #32
 8025ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025bac:	f04f 0000 	mov.w	r0, #0
 8025bb0:	f04f 0100 	mov.w	r1, #0
 8025bb4:	09d0      	lsrs	r0, r2, #7
 8025bb6:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8025bba:	09d9      	lsrs	r1, r3, #7
 8025bbc:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 8025bc0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8025bc4:	4623      	mov	r3, r4
 8025bc6:	4043      	eors	r3, r0
 8025bc8:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
 8025bcc:	462b      	mov	r3, r5
 8025bce:	404b      	eors	r3, r1
 8025bd0:	f8c7 3a54 	str.w	r3, [r7, #2644]	; 0xa54
 8025bd4:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8025bd8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8025bdc:	4623      	mov	r3, r4
 8025bde:	f507 6225 	add.w	r2, r7, #2640	; 0xa50
 8025be2:	e9d2 0100 	ldrd	r0, r1, [r2]
 8025be6:	4602      	mov	r2, r0
 8025be8:	189b      	adds	r3, r3, r2
 8025bea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8025bee:	462b      	mov	r3, r5
 8025bf0:	460a      	mov	r2, r1
 8025bf2:	4153      	adcs	r3, r2
 8025bf4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8025bf8:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8025bfc:	3318      	adds	r3, #24
 8025bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025c02:	f8d7 1d04 	ldr.w	r1, [r7, #3332]	; 0xd04
 8025c06:	3118      	adds	r1, #24
 8025c08:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 8025c0c:	4620      	mov	r0, r4
 8025c0e:	1880      	adds	r0, r0, r2
 8025c10:	f8c7 0a48 	str.w	r0, [r7, #2632]	; 0xa48
 8025c14:	4628      	mov	r0, r5
 8025c16:	eb40 0303 	adc.w	r3, r0, r3
 8025c1a:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
 8025c1e:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8025c22:	e9d3 3400 	ldrd	r3, r4, [r3]
 8025c26:	e9c1 3400 	strd	r3, r4, [r1]
 8025c2a:	e9d1 2300 	ldrd	r2, r3, [r1]
 8025c2e:	e00b      	b.n	8025c48 <_Transform_Sha512+0xffc>
 8025c30:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8025c34:	f103 0118 	add.w	r1, r3, #24
 8025c38:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 8025c3c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8025c40:	e9c1 2300 	strd	r2, r3, [r1]
 8025c44:	e9d1 2300 	ldrd	r2, r3, [r1]
 8025c48:	f607 2178 	addw	r1, r7, #2680	; 0xa78
 8025c4c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8025c50:	4621      	mov	r1, r4
 8025c52:	1851      	adds	r1, r2, r1
 8025c54:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 8025c58:	4629      	mov	r1, r5
 8025c5a:	414b      	adcs	r3, r1
 8025c5c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8025c60:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 8025c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025c68:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8025c6c:	4621      	mov	r1, r4
 8025c6e:	1889      	adds	r1, r1, r2
 8025c70:	f8c7 1a40 	str.w	r1, [r7, #2624]	; 0xa40
 8025c74:	4629      	mov	r1, r5
 8025c76:	eb41 0303 	adc.w	r3, r1, r3
 8025c7a:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
 8025c7e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8025c82:	e9d3 3400 	ldrd	r3, r4, [r3]
 8025c86:	f507 624e 	add.w	r2, r7, #3296	; 0xce0
 8025c8a:	e9c2 3400 	strd	r3, r4, [r2]
 8025c8e:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8025c92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025c96:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 8025c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025c9e:	1884      	adds	r4, r0, r2
 8025ca0:	f8c7 4a38 	str.w	r4, [r7, #2616]	; 0xa38
 8025ca4:	eb41 0303 	adc.w	r3, r1, r3
 8025ca8:	f8c7 3a3c 	str.w	r3, [r7, #2620]	; 0xa3c
 8025cac:	f607 2338 	addw	r3, r7, #2616	; 0xa38
 8025cb0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8025cb4:	f507 624c 	add.w	r2, r7, #3264	; 0xcc0
 8025cb8:	e9c2 3400 	strd	r3, r4, [r2]
 8025cbc:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8025cc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025cc4:	f04f 021c 	mov.w	r2, #28
 8025cc8:	f04f 0300 	mov.w	r3, #0
 8025ccc:	f7fe fd42 	bl	8024754 <rotrFixed64>
 8025cd0:	4604      	mov	r4, r0
 8025cd2:	460d      	mov	r5, r1
 8025cd4:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8025cd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025cdc:	f04f 0222 	mov.w	r2, #34	; 0x22
 8025ce0:	f04f 0300 	mov.w	r3, #0
 8025ce4:	f7fe fd36 	bl	8024754 <rotrFixed64>
 8025ce8:	4602      	mov	r2, r0
 8025cea:	460b      	mov	r3, r1
 8025cec:	ea84 0102 	eor.w	r1, r4, r2
 8025cf0:	f8c7 1a30 	str.w	r1, [r7, #2608]	; 0xa30
 8025cf4:	406b      	eors	r3, r5
 8025cf6:	f8c7 3a34 	str.w	r3, [r7, #2612]	; 0xa34
 8025cfa:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8025cfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025d02:	f04f 0227 	mov.w	r2, #39	; 0x27
 8025d06:	f04f 0300 	mov.w	r3, #0
 8025d0a:	f7fe fd23 	bl	8024754 <rotrFixed64>
 8025d0e:	4602      	mov	r2, r0
 8025d10:	460b      	mov	r3, r1
 8025d12:	f507 6123 	add.w	r1, r7, #2608	; 0xa30
 8025d16:	e9d1 4500 	ldrd	r4, r5, [r1]
 8025d1a:	4621      	mov	r1, r4
 8025d1c:	4051      	eors	r1, r2
 8025d1e:	f8c7 1a28 	str.w	r1, [r7, #2600]	; 0xa28
 8025d22:	4629      	mov	r1, r5
 8025d24:	404b      	eors	r3, r1
 8025d26:	f8c7 3a2c 	str.w	r3, [r7, #2604]	; 0xa2c
 8025d2a:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8025d2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025d32:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8025d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025d3a:	ea00 0402 	and.w	r4, r0, r2
 8025d3e:	f8c7 4a20 	str.w	r4, [r7, #2592]	; 0xa20
 8025d42:	400b      	ands	r3, r1
 8025d44:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
 8025d48:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8025d4c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8025d50:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8025d54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025d58:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8025d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025d60:	ea40 0602 	orr.w	r6, r0, r2
 8025d64:	f8c7 6a18 	str.w	r6, [r7, #2584]	; 0xa18
 8025d68:	430b      	orrs	r3, r1
 8025d6a:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
 8025d6e:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8025d72:	e9d3 1200 	ldrd	r1, r2, [r3]
 8025d76:	460b      	mov	r3, r1
 8025d78:	4023      	ands	r3, r4
 8025d7a:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
 8025d7e:	4613      	mov	r3, r2
 8025d80:	402b      	ands	r3, r5
 8025d82:	f8c7 3a14 	str.w	r3, [r7, #2580]	; 0xa14
 8025d86:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 8025d8a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8025d8e:	4623      	mov	r3, r4
 8025d90:	f507 6221 	add.w	r2, r7, #2576	; 0xa10
 8025d94:	e9d2 0100 	ldrd	r0, r1, [r2]
 8025d98:	4602      	mov	r2, r0
 8025d9a:	4313      	orrs	r3, r2
 8025d9c:	f8c7 3a08 	str.w	r3, [r7, #2568]	; 0xa08
 8025da0:	462b      	mov	r3, r5
 8025da2:	460a      	mov	r2, r1
 8025da4:	4313      	orrs	r3, r2
 8025da6:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
 8025daa:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 8025dae:	e9d3 4500 	ldrd	r4, r5, [r3]
 8025db2:	4623      	mov	r3, r4
 8025db4:	f607 2208 	addw	r2, r7, #2568	; 0xa08
 8025db8:	e9d2 0100 	ldrd	r0, r1, [r2]
 8025dbc:	4602      	mov	r2, r0
 8025dbe:	189b      	adds	r3, r3, r2
 8025dc0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8025dc4:	462b      	mov	r3, r5
 8025dc6:	460a      	mov	r2, r1
 8025dc8:	4153      	adcs	r3, r2
 8025dca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8025dce:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 8025dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025dd6:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8025dda:	4621      	mov	r1, r4
 8025ddc:	1889      	adds	r1, r1, r2
 8025dde:	f8c7 1a00 	str.w	r1, [r7, #2560]	; 0xa00
 8025de2:	4629      	mov	r1, r5
 8025de4:	eb41 0303 	adc.w	r3, r1, r3
 8025de8:	f8c7 3a04 	str.w	r3, [r7, #2564]	; 0xa04
 8025dec:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8025df0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8025df4:	f507 624e 	add.w	r2, r7, #3296	; 0xce0
 8025df8:	e9c2 3400 	strd	r3, r4, [r2]
        R( 4); R( 5); R( 6); R( 7);
 8025dfc:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8025e00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025e04:	f04f 020e 	mov.w	r2, #14
 8025e08:	f04f 0300 	mov.w	r3, #0
 8025e0c:	f7fe fca2 	bl	8024754 <rotrFixed64>
 8025e10:	4604      	mov	r4, r0
 8025e12:	460d      	mov	r5, r1
 8025e14:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8025e18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025e1c:	f04f 0212 	mov.w	r2, #18
 8025e20:	f04f 0300 	mov.w	r3, #0
 8025e24:	f7fe fc96 	bl	8024754 <rotrFixed64>
 8025e28:	4602      	mov	r2, r0
 8025e2a:	460b      	mov	r3, r1
 8025e2c:	ea84 0102 	eor.w	r1, r4, r2
 8025e30:	f8c7 19f8 	str.w	r1, [r7, #2552]	; 0x9f8
 8025e34:	406b      	eors	r3, r5
 8025e36:	f8c7 39fc 	str.w	r3, [r7, #2556]	; 0x9fc
 8025e3a:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8025e3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025e42:	f04f 0229 	mov.w	r2, #41	; 0x29
 8025e46:	f04f 0300 	mov.w	r3, #0
 8025e4a:	f7fe fc83 	bl	8024754 <rotrFixed64>
 8025e4e:	4602      	mov	r2, r0
 8025e50:	460b      	mov	r3, r1
 8025e52:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 8025e56:	e9d1 4500 	ldrd	r4, r5, [r1]
 8025e5a:	4621      	mov	r1, r4
 8025e5c:	4051      	eors	r1, r2
 8025e5e:	f8c7 19f0 	str.w	r1, [r7, #2544]	; 0x9f0
 8025e62:	4629      	mov	r1, r5
 8025e64:	404b      	eors	r3, r1
 8025e66:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4
 8025e6a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8025e6e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8025e72:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8025e76:	e9d3 4500 	ldrd	r4, r5, [r3]
 8025e7a:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8025e7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025e82:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8025e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025e8a:	ea80 0602 	eor.w	r6, r0, r2
 8025e8e:	f8c7 69e8 	str.w	r6, [r7, #2536]	; 0x9e8
 8025e92:	404b      	eors	r3, r1
 8025e94:	f8c7 39ec 	str.w	r3, [r7, #2540]	; 0x9ec
 8025e98:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 8025e9c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8025ea0:	460b      	mov	r3, r1
 8025ea2:	4023      	ands	r3, r4
 8025ea4:	f8c7 39e0 	str.w	r3, [r7, #2528]	; 0x9e0
 8025ea8:	4613      	mov	r3, r2
 8025eaa:	402b      	ands	r3, r5
 8025eac:	f8c7 39e4 	str.w	r3, [r7, #2532]	; 0x9e4
 8025eb0:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8025eb4:	e9d3 1200 	ldrd	r1, r2, [r3]
 8025eb8:	460b      	mov	r3, r1
 8025eba:	ea88 0303 	eor.w	r3, r8, r3
 8025ebe:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8
 8025ec2:	4613      	mov	r3, r2
 8025ec4:	ea89 0303 	eor.w	r3, r9, r3
 8025ec8:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
 8025ecc:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8025ed0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8025ed4:	4623      	mov	r3, r4
 8025ed6:	f607 12d8 	addw	r2, r7, #2520	; 0x9d8
 8025eda:	e9d2 0100 	ldrd	r0, r1, [r2]
 8025ede:	4602      	mov	r2, r0
 8025ee0:	189b      	adds	r3, r3, r2
 8025ee2:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
 8025ee6:	462b      	mov	r3, r5
 8025ee8:	460a      	mov	r2, r1
 8025eea:	4153      	adcs	r3, r2
 8025eec:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
 8025ef0:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8025ef4:	3304      	adds	r3, #4
 8025ef6:	00da      	lsls	r2, r3, #3
 8025ef8:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 8025efc:	4413      	add	r3, r2
 8025efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025f02:	f507 611d 	add.w	r1, r7, #2512	; 0x9d0
 8025f06:	e9d1 4500 	ldrd	r4, r5, [r1]
 8025f0a:	4621      	mov	r1, r4
 8025f0c:	1889      	adds	r1, r1, r2
 8025f0e:	f8c7 19c8 	str.w	r1, [r7, #2504]	; 0x9c8
 8025f12:	4629      	mov	r1, r5
 8025f14:	eb41 0303 	adc.w	r3, r1, r3
 8025f18:	f8c7 39cc 	str.w	r3, [r7, #2508]	; 0x9cc
 8025f1c:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8025f20:	2b00      	cmp	r3, #0
 8025f22:	f000 80b4 	beq.w	802608e <_Transform_Sha512+0x1442>
 8025f26:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8025f2a:	3310      	adds	r3, #16
 8025f2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025f30:	f04f 0213 	mov.w	r2, #19
 8025f34:	f04f 0300 	mov.w	r3, #0
 8025f38:	f7fe fc0c 	bl	8024754 <rotrFixed64>
 8025f3c:	4604      	mov	r4, r0
 8025f3e:	460d      	mov	r5, r1
 8025f40:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8025f44:	3310      	adds	r3, #16
 8025f46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025f4a:	f04f 023d 	mov.w	r2, #61	; 0x3d
 8025f4e:	f04f 0300 	mov.w	r3, #0
 8025f52:	f7fe fbff 	bl	8024754 <rotrFixed64>
 8025f56:	4602      	mov	r2, r0
 8025f58:	460b      	mov	r3, r1
 8025f5a:	ea84 0102 	eor.w	r1, r4, r2
 8025f5e:	f8c7 19c0 	str.w	r1, [r7, #2496]	; 0x9c0
 8025f62:	406b      	eors	r3, r5
 8025f64:	f8c7 39c4 	str.w	r3, [r7, #2500]	; 0x9c4
 8025f68:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8025f6c:	3310      	adds	r3, #16
 8025f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025f72:	f04f 0000 	mov.w	r0, #0
 8025f76:	f04f 0100 	mov.w	r1, #0
 8025f7a:	0990      	lsrs	r0, r2, #6
 8025f7c:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 8025f80:	0999      	lsrs	r1, r3, #6
 8025f82:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8025f86:	e9d3 4500 	ldrd	r4, r5, [r3]
 8025f8a:	4623      	mov	r3, r4
 8025f8c:	4043      	eors	r3, r0
 8025f8e:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
 8025f92:	462b      	mov	r3, r5
 8025f94:	404b      	eors	r3, r1
 8025f96:	f8c7 39bc 	str.w	r3, [r7, #2492]	; 0x9bc
 8025f9a:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8025f9e:	3368      	adds	r3, #104	; 0x68
 8025fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025fa4:	f607 11b8 	addw	r1, r7, #2488	; 0x9b8
 8025fa8:	e9d1 4500 	ldrd	r4, r5, [r1]
 8025fac:	4621      	mov	r1, r4
 8025fae:	1889      	adds	r1, r1, r2
 8025fb0:	f8c7 19b0 	str.w	r1, [r7, #2480]	; 0x9b0
 8025fb4:	4629      	mov	r1, r5
 8025fb6:	eb41 0303 	adc.w	r3, r1, r3
 8025fba:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
 8025fbe:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8025fc2:	3328      	adds	r3, #40	; 0x28
 8025fc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025fc8:	f04f 0201 	mov.w	r2, #1
 8025fcc:	f04f 0300 	mov.w	r3, #0
 8025fd0:	f7fe fbc0 	bl	8024754 <rotrFixed64>
 8025fd4:	4604      	mov	r4, r0
 8025fd6:	460d      	mov	r5, r1
 8025fd8:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8025fdc:	3328      	adds	r3, #40	; 0x28
 8025fde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025fe2:	f04f 0208 	mov.w	r2, #8
 8025fe6:	f04f 0300 	mov.w	r3, #0
 8025fea:	f7fe fbb3 	bl	8024754 <rotrFixed64>
 8025fee:	4602      	mov	r2, r0
 8025ff0:	460b      	mov	r3, r1
 8025ff2:	ea84 0102 	eor.w	r1, r4, r2
 8025ff6:	f8c7 19a8 	str.w	r1, [r7, #2472]	; 0x9a8
 8025ffa:	406b      	eors	r3, r5
 8025ffc:	f8c7 39ac 	str.w	r3, [r7, #2476]	; 0x9ac
 8026000:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8026004:	3328      	adds	r3, #40	; 0x28
 8026006:	e9d3 2300 	ldrd	r2, r3, [r3]
 802600a:	f04f 0000 	mov.w	r0, #0
 802600e:	f04f 0100 	mov.w	r1, #0
 8026012:	09d0      	lsrs	r0, r2, #7
 8026014:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8026018:	09d9      	lsrs	r1, r3, #7
 802601a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 802601e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8026022:	4623      	mov	r3, r4
 8026024:	4043      	eors	r3, r0
 8026026:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 802602a:	462b      	mov	r3, r5
 802602c:	404b      	eors	r3, r1
 802602e:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8026032:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8026036:	e9d3 4500 	ldrd	r4, r5, [r3]
 802603a:	4623      	mov	r3, r4
 802603c:	f507 621a 	add.w	r2, r7, #2464	; 0x9a0
 8026040:	e9d2 0100 	ldrd	r0, r1, [r2]
 8026044:	4602      	mov	r2, r0
 8026046:	189b      	adds	r3, r3, r2
 8026048:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 802604c:	462b      	mov	r3, r5
 802604e:	460a      	mov	r2, r1
 8026050:	4153      	adcs	r3, r2
 8026052:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8026056:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 802605a:	3320      	adds	r3, #32
 802605c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026060:	f8d7 1d04 	ldr.w	r1, [r7, #3332]	; 0xd04
 8026064:	3120      	adds	r1, #32
 8026066:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 802606a:	4620      	mov	r0, r4
 802606c:	1880      	adds	r0, r0, r2
 802606e:	f8c7 0998 	str.w	r0, [r7, #2456]	; 0x998
 8026072:	4628      	mov	r0, r5
 8026074:	eb40 0303 	adc.w	r3, r0, r3
 8026078:	f8c7 399c 	str.w	r3, [r7, #2460]	; 0x99c
 802607c:	f607 1398 	addw	r3, r7, #2456	; 0x998
 8026080:	e9d3 3400 	ldrd	r3, r4, [r3]
 8026084:	e9c1 3400 	strd	r3, r4, [r1]
 8026088:	e9d1 2300 	ldrd	r2, r3, [r1]
 802608c:	e00b      	b.n	80260a6 <_Transform_Sha512+0x145a>
 802608e:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8026092:	f103 0120 	add.w	r1, r3, #32
 8026096:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 802609a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 802609e:	e9c1 2300 	strd	r2, r3, [r1]
 80260a2:	e9d1 2300 	ldrd	r2, r3, [r1]
 80260a6:	f607 11c8 	addw	r1, r7, #2504	; 0x9c8
 80260aa:	e9d1 4500 	ldrd	r4, r5, [r1]
 80260ae:	4621      	mov	r1, r4
 80260b0:	1851      	adds	r1, r2, r1
 80260b2:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 80260b6:	4629      	mov	r1, r5
 80260b8:	414b      	adcs	r3, r1
 80260ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80260be:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 80260c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80260c6:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 80260ca:	4621      	mov	r1, r4
 80260cc:	1889      	adds	r1, r1, r2
 80260ce:	f8c7 1990 	str.w	r1, [r7, #2448]	; 0x990
 80260d2:	4629      	mov	r1, r5
 80260d4:	eb41 0303 	adc.w	r3, r1, r3
 80260d8:	f8c7 3994 	str.w	r3, [r7, #2452]	; 0x994
 80260dc:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 80260e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80260e4:	f607 42d8 	addw	r2, r7, #3288	; 0xcd8
 80260e8:	e9c2 3400 	strd	r3, r4, [r2]
 80260ec:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 80260f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80260f4:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 80260f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80260fc:	1884      	adds	r4, r0, r2
 80260fe:	f8c7 4988 	str.w	r4, [r7, #2440]	; 0x988
 8026102:	eb41 0303 	adc.w	r3, r1, r3
 8026106:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
 802610a:	f607 1388 	addw	r3, r7, #2440	; 0x988
 802610e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8026112:	f607 42f8 	addw	r2, r7, #3320	; 0xcf8
 8026116:	e9c2 3400 	strd	r3, r4, [r2]
 802611a:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 802611e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026122:	f04f 021c 	mov.w	r2, #28
 8026126:	f04f 0300 	mov.w	r3, #0
 802612a:	f7fe fb13 	bl	8024754 <rotrFixed64>
 802612e:	4604      	mov	r4, r0
 8026130:	460d      	mov	r5, r1
 8026132:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 8026136:	e9d3 0100 	ldrd	r0, r1, [r3]
 802613a:	f04f 0222 	mov.w	r2, #34	; 0x22
 802613e:	f04f 0300 	mov.w	r3, #0
 8026142:	f7fe fb07 	bl	8024754 <rotrFixed64>
 8026146:	4602      	mov	r2, r0
 8026148:	460b      	mov	r3, r1
 802614a:	ea84 0102 	eor.w	r1, r4, r2
 802614e:	f8c7 1980 	str.w	r1, [r7, #2432]	; 0x980
 8026152:	406b      	eors	r3, r5
 8026154:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984
 8026158:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 802615c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026160:	f04f 0227 	mov.w	r2, #39	; 0x27
 8026164:	f04f 0300 	mov.w	r3, #0
 8026168:	f7fe faf4 	bl	8024754 <rotrFixed64>
 802616c:	4602      	mov	r2, r0
 802616e:	460b      	mov	r3, r1
 8026170:	f507 6118 	add.w	r1, r7, #2432	; 0x980
 8026174:	e9d1 4500 	ldrd	r4, r5, [r1]
 8026178:	4621      	mov	r1, r4
 802617a:	4051      	eors	r1, r2
 802617c:	f8c7 1978 	str.w	r1, [r7, #2424]	; 0x978
 8026180:	4629      	mov	r1, r5
 8026182:	404b      	eors	r3, r1
 8026184:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
 8026188:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 802618c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026190:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8026194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026198:	ea00 0402 	and.w	r4, r0, r2
 802619c:	f8c7 4970 	str.w	r4, [r7, #2416]	; 0x970
 80261a0:	400b      	ands	r3, r1
 80261a2:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
 80261a6:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 80261aa:	e9d3 4500 	ldrd	r4, r5, [r3]
 80261ae:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 80261b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80261b6:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 80261ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80261be:	ea40 0602 	orr.w	r6, r0, r2
 80261c2:	f8c7 6968 	str.w	r6, [r7, #2408]	; 0x968
 80261c6:	430b      	orrs	r3, r1
 80261c8:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 80261cc:	f607 1368 	addw	r3, r7, #2408	; 0x968
 80261d0:	e9d3 1200 	ldrd	r1, r2, [r3]
 80261d4:	460b      	mov	r3, r1
 80261d6:	4023      	ands	r3, r4
 80261d8:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 80261dc:	4613      	mov	r3, r2
 80261de:	402b      	ands	r3, r5
 80261e0:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 80261e4:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 80261e8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80261ec:	4623      	mov	r3, r4
 80261ee:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 80261f2:	e9d2 0100 	ldrd	r0, r1, [r2]
 80261f6:	4602      	mov	r2, r0
 80261f8:	4313      	orrs	r3, r2
 80261fa:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
 80261fe:	462b      	mov	r3, r5
 8026200:	460a      	mov	r2, r1
 8026202:	4313      	orrs	r3, r2
 8026204:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
 8026208:	f607 1378 	addw	r3, r7, #2424	; 0x978
 802620c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8026210:	4623      	mov	r3, r4
 8026212:	f607 1258 	addw	r2, r7, #2392	; 0x958
 8026216:	e9d2 0100 	ldrd	r0, r1, [r2]
 802621a:	4602      	mov	r2, r0
 802621c:	189b      	adds	r3, r3, r2
 802621e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8026222:	462b      	mov	r3, r5
 8026224:	460a      	mov	r2, r1
 8026226:	4153      	adcs	r3, r2
 8026228:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 802622c:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 8026230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026234:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8026238:	4621      	mov	r1, r4
 802623a:	1889      	adds	r1, r1, r2
 802623c:	f8c7 1950 	str.w	r1, [r7, #2384]	; 0x950
 8026240:	4629      	mov	r1, r5
 8026242:	eb41 0303 	adc.w	r3, r1, r3
 8026246:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 802624a:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 802624e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8026252:	f607 42d8 	addw	r2, r7, #3288	; 0xcd8
 8026256:	e9c2 3400 	strd	r3, r4, [r2]
 802625a:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 802625e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026262:	f04f 020e 	mov.w	r2, #14
 8026266:	f04f 0300 	mov.w	r3, #0
 802626a:	f7fe fa73 	bl	8024754 <rotrFixed64>
 802626e:	4604      	mov	r4, r0
 8026270:	460d      	mov	r5, r1
 8026272:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8026276:	e9d3 0100 	ldrd	r0, r1, [r3]
 802627a:	f04f 0212 	mov.w	r2, #18
 802627e:	f04f 0300 	mov.w	r3, #0
 8026282:	f7fe fa67 	bl	8024754 <rotrFixed64>
 8026286:	4602      	mov	r2, r0
 8026288:	460b      	mov	r3, r1
 802628a:	ea84 0102 	eor.w	r1, r4, r2
 802628e:	f8c7 1948 	str.w	r1, [r7, #2376]	; 0x948
 8026292:	406b      	eors	r3, r5
 8026294:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
 8026298:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 802629c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80262a0:	f04f 0229 	mov.w	r2, #41	; 0x29
 80262a4:	f04f 0300 	mov.w	r3, #0
 80262a8:	f7fe fa54 	bl	8024754 <rotrFixed64>
 80262ac:	4602      	mov	r2, r0
 80262ae:	460b      	mov	r3, r1
 80262b0:	f607 1148 	addw	r1, r7, #2376	; 0x948
 80262b4:	e9d1 4500 	ldrd	r4, r5, [r1]
 80262b8:	4621      	mov	r1, r4
 80262ba:	4051      	eors	r1, r2
 80262bc:	f8c7 1940 	str.w	r1, [r7, #2368]	; 0x940
 80262c0:	4629      	mov	r1, r5
 80262c2:	404b      	eors	r3, r1
 80262c4:	f8c7 3944 	str.w	r3, [r7, #2372]	; 0x944
 80262c8:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 80262cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80262d0:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 80262d4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80262d8:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 80262dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80262e0:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 80262e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80262e8:	ea80 0602 	eor.w	r6, r0, r2
 80262ec:	f8c7 6938 	str.w	r6, [r7, #2360]	; 0x938
 80262f0:	404b      	eors	r3, r1
 80262f2:	f8c7 393c 	str.w	r3, [r7, #2364]	; 0x93c
 80262f6:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80262fa:	e9d3 1200 	ldrd	r1, r2, [r3]
 80262fe:	460b      	mov	r3, r1
 8026300:	4023      	ands	r3, r4
 8026302:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
 8026306:	4613      	mov	r3, r2
 8026308:	402b      	ands	r3, r5
 802630a:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
 802630e:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8026312:	e9d3 1200 	ldrd	r1, r2, [r3]
 8026316:	460b      	mov	r3, r1
 8026318:	ea88 0303 	eor.w	r3, r8, r3
 802631c:	f8c7 3928 	str.w	r3, [r7, #2344]	; 0x928
 8026320:	4613      	mov	r3, r2
 8026322:	ea89 0303 	eor.w	r3, r9, r3
 8026326:	f8c7 392c 	str.w	r3, [r7, #2348]	; 0x92c
 802632a:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 802632e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8026332:	4623      	mov	r3, r4
 8026334:	f607 1228 	addw	r2, r7, #2344	; 0x928
 8026338:	e9d2 0100 	ldrd	r0, r1, [r2]
 802633c:	4602      	mov	r2, r0
 802633e:	189b      	adds	r3, r3, r2
 8026340:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
 8026344:	462b      	mov	r3, r5
 8026346:	460a      	mov	r2, r1
 8026348:	4153      	adcs	r3, r2
 802634a:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
 802634e:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8026352:	3305      	adds	r3, #5
 8026354:	00da      	lsls	r2, r3, #3
 8026356:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 802635a:	4413      	add	r3, r2
 802635c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026360:	f507 6112 	add.w	r1, r7, #2336	; 0x920
 8026364:	e9d1 4500 	ldrd	r4, r5, [r1]
 8026368:	4621      	mov	r1, r4
 802636a:	1889      	adds	r1, r1, r2
 802636c:	f8c7 1918 	str.w	r1, [r7, #2328]	; 0x918
 8026370:	4629      	mov	r1, r5
 8026372:	eb41 0303 	adc.w	r3, r1, r3
 8026376:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 802637a:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 802637e:	2b00      	cmp	r3, #0
 8026380:	f000 80b4 	beq.w	80264ec <_Transform_Sha512+0x18a0>
 8026384:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8026388:	3318      	adds	r3, #24
 802638a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802638e:	f04f 0213 	mov.w	r2, #19
 8026392:	f04f 0300 	mov.w	r3, #0
 8026396:	f7fe f9dd 	bl	8024754 <rotrFixed64>
 802639a:	4604      	mov	r4, r0
 802639c:	460d      	mov	r5, r1
 802639e:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80263a2:	3318      	adds	r3, #24
 80263a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80263a8:	f04f 023d 	mov.w	r2, #61	; 0x3d
 80263ac:	f04f 0300 	mov.w	r3, #0
 80263b0:	f7fe f9d0 	bl	8024754 <rotrFixed64>
 80263b4:	4602      	mov	r2, r0
 80263b6:	460b      	mov	r3, r1
 80263b8:	ea84 0102 	eor.w	r1, r4, r2
 80263bc:	f8c7 1910 	str.w	r1, [r7, #2320]	; 0x910
 80263c0:	406b      	eors	r3, r5
 80263c2:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
 80263c6:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80263ca:	3318      	adds	r3, #24
 80263cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80263d0:	f04f 0000 	mov.w	r0, #0
 80263d4:	f04f 0100 	mov.w	r1, #0
 80263d8:	0990      	lsrs	r0, r2, #6
 80263da:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 80263de:	0999      	lsrs	r1, r3, #6
 80263e0:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80263e4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80263e8:	4623      	mov	r3, r4
 80263ea:	4043      	eors	r3, r0
 80263ec:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
 80263f0:	462b      	mov	r3, r5
 80263f2:	404b      	eors	r3, r1
 80263f4:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
 80263f8:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80263fc:	3370      	adds	r3, #112	; 0x70
 80263fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026402:	f607 1108 	addw	r1, r7, #2312	; 0x908
 8026406:	e9d1 4500 	ldrd	r4, r5, [r1]
 802640a:	4621      	mov	r1, r4
 802640c:	1889      	adds	r1, r1, r2
 802640e:	f8c7 1900 	str.w	r1, [r7, #2304]	; 0x900
 8026412:	4629      	mov	r1, r5
 8026414:	eb41 0303 	adc.w	r3, r1, r3
 8026418:	f8c7 3904 	str.w	r3, [r7, #2308]	; 0x904
 802641c:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8026420:	3330      	adds	r3, #48	; 0x30
 8026422:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026426:	f04f 0201 	mov.w	r2, #1
 802642a:	f04f 0300 	mov.w	r3, #0
 802642e:	f7fe f991 	bl	8024754 <rotrFixed64>
 8026432:	4604      	mov	r4, r0
 8026434:	460d      	mov	r5, r1
 8026436:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 802643a:	3330      	adds	r3, #48	; 0x30
 802643c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026440:	f04f 0208 	mov.w	r2, #8
 8026444:	f04f 0300 	mov.w	r3, #0
 8026448:	f7fe f984 	bl	8024754 <rotrFixed64>
 802644c:	4602      	mov	r2, r0
 802644e:	460b      	mov	r3, r1
 8026450:	ea84 0102 	eor.w	r1, r4, r2
 8026454:	f8c7 18f8 	str.w	r1, [r7, #2296]	; 0x8f8
 8026458:	406b      	eors	r3, r5
 802645a:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
 802645e:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8026462:	3330      	adds	r3, #48	; 0x30
 8026464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026468:	f04f 0000 	mov.w	r0, #0
 802646c:	f04f 0100 	mov.w	r1, #0
 8026470:	09d0      	lsrs	r0, r2, #7
 8026472:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8026476:	09d9      	lsrs	r1, r3, #7
 8026478:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 802647c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8026480:	4623      	mov	r3, r4
 8026482:	4043      	eors	r3, r0
 8026484:	f8c7 38f0 	str.w	r3, [r7, #2288]	; 0x8f0
 8026488:	462b      	mov	r3, r5
 802648a:	404b      	eors	r3, r1
 802648c:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
 8026490:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8026494:	e9d3 4500 	ldrd	r4, r5, [r3]
 8026498:	4623      	mov	r3, r4
 802649a:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 802649e:	e9d2 0100 	ldrd	r0, r1, [r2]
 80264a2:	4602      	mov	r2, r0
 80264a4:	189b      	adds	r3, r3, r2
 80264a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80264aa:	462b      	mov	r3, r5
 80264ac:	460a      	mov	r2, r1
 80264ae:	4153      	adcs	r3, r2
 80264b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80264b4:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80264b8:	3328      	adds	r3, #40	; 0x28
 80264ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80264be:	f8d7 1d04 	ldr.w	r1, [r7, #3332]	; 0xd04
 80264c2:	3128      	adds	r1, #40	; 0x28
 80264c4:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80264c8:	4620      	mov	r0, r4
 80264ca:	1880      	adds	r0, r0, r2
 80264cc:	f8c7 08e8 	str.w	r0, [r7, #2280]	; 0x8e8
 80264d0:	4628      	mov	r0, r5
 80264d2:	eb40 0303 	adc.w	r3, r0, r3
 80264d6:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
 80264da:	f607 03e8 	addw	r3, r7, #2280	; 0x8e8
 80264de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80264e2:	e9c1 3400 	strd	r3, r4, [r1]
 80264e6:	e9d1 2300 	ldrd	r2, r3, [r1]
 80264ea:	e00b      	b.n	8026504 <_Transform_Sha512+0x18b8>
 80264ec:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80264f0:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80264f4:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 80264f8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80264fc:	e9c1 2300 	strd	r2, r3, [r1]
 8026500:	e9d1 2300 	ldrd	r2, r3, [r1]
 8026504:	f607 1118 	addw	r1, r7, #2328	; 0x918
 8026508:	e9d1 4500 	ldrd	r4, r5, [r1]
 802650c:	4621      	mov	r1, r4
 802650e:	1851      	adds	r1, r2, r1
 8026510:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8026514:	4629      	mov	r1, r5
 8026516:	414b      	adcs	r3, r1
 8026518:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 802651c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8026520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026524:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8026528:	4621      	mov	r1, r4
 802652a:	1889      	adds	r1, r1, r2
 802652c:	f8c7 18e0 	str.w	r1, [r7, #2272]	; 0x8e0
 8026530:	4629      	mov	r1, r5
 8026532:	eb41 0303 	adc.w	r3, r1, r3
 8026536:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
 802653a:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 802653e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8026542:	f507 624d 	add.w	r2, r7, #3280	; 0xcd0
 8026546:	e9c2 3400 	strd	r3, r4, [r2]
 802654a:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 802654e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026552:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8026556:	e9d3 2300 	ldrd	r2, r3, [r3]
 802655a:	1884      	adds	r4, r0, r2
 802655c:	f8c7 48d8 	str.w	r4, [r7, #2264]	; 0x8d8
 8026560:	eb41 0303 	adc.w	r3, r1, r3
 8026564:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
 8026568:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 802656c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8026570:	f507 624f 	add.w	r2, r7, #3312	; 0xcf0
 8026574:	e9c2 3400 	strd	r3, r4, [r2]
 8026578:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 802657c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026580:	f04f 021c 	mov.w	r2, #28
 8026584:	f04f 0300 	mov.w	r3, #0
 8026588:	f7fe f8e4 	bl	8024754 <rotrFixed64>
 802658c:	4604      	mov	r4, r0
 802658e:	460d      	mov	r5, r1
 8026590:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 8026594:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026598:	f04f 0222 	mov.w	r2, #34	; 0x22
 802659c:	f04f 0300 	mov.w	r3, #0
 80265a0:	f7fe f8d8 	bl	8024754 <rotrFixed64>
 80265a4:	4602      	mov	r2, r0
 80265a6:	460b      	mov	r3, r1
 80265a8:	ea84 0102 	eor.w	r1, r4, r2
 80265ac:	f8c7 18d0 	str.w	r1, [r7, #2256]	; 0x8d0
 80265b0:	406b      	eors	r3, r5
 80265b2:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
 80265b6:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 80265ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80265be:	f04f 0227 	mov.w	r2, #39	; 0x27
 80265c2:	f04f 0300 	mov.w	r3, #0
 80265c6:	f7fe f8c5 	bl	8024754 <rotrFixed64>
 80265ca:	4602      	mov	r2, r0
 80265cc:	460b      	mov	r3, r1
 80265ce:	f507 610d 	add.w	r1, r7, #2256	; 0x8d0
 80265d2:	e9d1 4500 	ldrd	r4, r5, [r1]
 80265d6:	4621      	mov	r1, r4
 80265d8:	4051      	eors	r1, r2
 80265da:	f8c7 18c8 	str.w	r1, [r7, #2248]	; 0x8c8
 80265de:	4629      	mov	r1, r5
 80265e0:	404b      	eors	r3, r1
 80265e2:	f8c7 38cc 	str.w	r3, [r7, #2252]	; 0x8cc
 80265e6:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 80265ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80265ee:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 80265f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80265f6:	ea00 0402 	and.w	r4, r0, r2
 80265fa:	f8c7 48c0 	str.w	r4, [r7, #2240]	; 0x8c0
 80265fe:	400b      	ands	r3, r1
 8026600:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8026604:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8026608:	e9d3 4500 	ldrd	r4, r5, [r3]
 802660c:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 8026610:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026614:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 8026618:	e9d3 2300 	ldrd	r2, r3, [r3]
 802661c:	ea40 0602 	orr.w	r6, r0, r2
 8026620:	f8c7 68b8 	str.w	r6, [r7, #2232]	; 0x8b8
 8026624:	430b      	orrs	r3, r1
 8026626:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 802662a:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 802662e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8026632:	460b      	mov	r3, r1
 8026634:	4023      	ands	r3, r4
 8026636:	f8c7 38b0 	str.w	r3, [r7, #2224]	; 0x8b0
 802663a:	4613      	mov	r3, r2
 802663c:	402b      	ands	r3, r5
 802663e:	f8c7 38b4 	str.w	r3, [r7, #2228]	; 0x8b4
 8026642:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 8026646:	e9d3 4500 	ldrd	r4, r5, [r3]
 802664a:	4623      	mov	r3, r4
 802664c:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8026650:	e9d2 0100 	ldrd	r0, r1, [r2]
 8026654:	4602      	mov	r2, r0
 8026656:	4313      	orrs	r3, r2
 8026658:	f8c7 38a8 	str.w	r3, [r7, #2216]	; 0x8a8
 802665c:	462b      	mov	r3, r5
 802665e:	460a      	mov	r2, r1
 8026660:	4313      	orrs	r3, r2
 8026662:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
 8026666:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 802666a:	e9d3 4500 	ldrd	r4, r5, [r3]
 802666e:	4623      	mov	r3, r4
 8026670:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 8026674:	e9d2 0100 	ldrd	r0, r1, [r2]
 8026678:	4602      	mov	r2, r0
 802667a:	189b      	adds	r3, r3, r2
 802667c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8026680:	462b      	mov	r3, r5
 8026682:	460a      	mov	r2, r1
 8026684:	4153      	adcs	r3, r2
 8026686:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 802668a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 802668e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026692:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8026696:	4621      	mov	r1, r4
 8026698:	1889      	adds	r1, r1, r2
 802669a:	f8c7 18a0 	str.w	r1, [r7, #2208]	; 0x8a0
 802669e:	4629      	mov	r1, r5
 80266a0:	eb41 0303 	adc.w	r3, r1, r3
 80266a4:	f8c7 38a4 	str.w	r3, [r7, #2212]	; 0x8a4
 80266a8:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 80266ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80266b0:	f507 624d 	add.w	r2, r7, #3280	; 0xcd0
 80266b4:	e9c2 3400 	strd	r3, r4, [r2]
 80266b8:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 80266bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80266c0:	f04f 020e 	mov.w	r2, #14
 80266c4:	f04f 0300 	mov.w	r3, #0
 80266c8:	f7fe f844 	bl	8024754 <rotrFixed64>
 80266cc:	4604      	mov	r4, r0
 80266ce:	460d      	mov	r5, r1
 80266d0:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 80266d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80266d8:	f04f 0212 	mov.w	r2, #18
 80266dc:	f04f 0300 	mov.w	r3, #0
 80266e0:	f7fe f838 	bl	8024754 <rotrFixed64>
 80266e4:	4602      	mov	r2, r0
 80266e6:	460b      	mov	r3, r1
 80266e8:	ea84 0102 	eor.w	r1, r4, r2
 80266ec:	f8c7 1898 	str.w	r1, [r7, #2200]	; 0x898
 80266f0:	406b      	eors	r3, r5
 80266f2:	f8c7 389c 	str.w	r3, [r7, #2204]	; 0x89c
 80266f6:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 80266fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80266fe:	f04f 0229 	mov.w	r2, #41	; 0x29
 8026702:	f04f 0300 	mov.w	r3, #0
 8026706:	f7fe f825 	bl	8024754 <rotrFixed64>
 802670a:	4602      	mov	r2, r0
 802670c:	460b      	mov	r3, r1
 802670e:	f607 0198 	addw	r1, r7, #2200	; 0x898
 8026712:	e9d1 4500 	ldrd	r4, r5, [r1]
 8026716:	4621      	mov	r1, r4
 8026718:	4051      	eors	r1, r2
 802671a:	f8c7 1890 	str.w	r1, [r7, #2192]	; 0x890
 802671e:	4629      	mov	r1, r5
 8026720:	404b      	eors	r3, r1
 8026722:	f8c7 3894 	str.w	r3, [r7, #2196]	; 0x894
 8026726:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 802672a:	e9d3 8900 	ldrd	r8, r9, [r3]
 802672e:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8026732:	e9d3 4500 	ldrd	r4, r5, [r3]
 8026736:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 802673a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802673e:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8026742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026746:	ea80 0602 	eor.w	r6, r0, r2
 802674a:	f8c7 6888 	str.w	r6, [r7, #2184]	; 0x888
 802674e:	404b      	eors	r3, r1
 8026750:	f8c7 388c 	str.w	r3, [r7, #2188]	; 0x88c
 8026754:	f607 0388 	addw	r3, r7, #2184	; 0x888
 8026758:	e9d3 1200 	ldrd	r1, r2, [r3]
 802675c:	460b      	mov	r3, r1
 802675e:	4023      	ands	r3, r4
 8026760:	f8c7 3880 	str.w	r3, [r7, #2176]	; 0x880
 8026764:	4613      	mov	r3, r2
 8026766:	402b      	ands	r3, r5
 8026768:	f8c7 3884 	str.w	r3, [r7, #2180]	; 0x884
 802676c:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8026770:	e9d3 1200 	ldrd	r1, r2, [r3]
 8026774:	460b      	mov	r3, r1
 8026776:	ea88 0303 	eor.w	r3, r8, r3
 802677a:	f8c7 3878 	str.w	r3, [r7, #2168]	; 0x878
 802677e:	4613      	mov	r3, r2
 8026780:	ea89 0303 	eor.w	r3, r9, r3
 8026784:	f8c7 387c 	str.w	r3, [r7, #2172]	; 0x87c
 8026788:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 802678c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8026790:	4623      	mov	r3, r4
 8026792:	f607 0278 	addw	r2, r7, #2168	; 0x878
 8026796:	e9d2 0100 	ldrd	r0, r1, [r2]
 802679a:	4602      	mov	r2, r0
 802679c:	189b      	adds	r3, r3, r2
 802679e:	f8c7 3870 	str.w	r3, [r7, #2160]	; 0x870
 80267a2:	462b      	mov	r3, r5
 80267a4:	460a      	mov	r2, r1
 80267a6:	4153      	adcs	r3, r2
 80267a8:	f8c7 3874 	str.w	r3, [r7, #2164]	; 0x874
 80267ac:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80267b0:	3306      	adds	r3, #6
 80267b2:	00da      	lsls	r2, r3, #3
 80267b4:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 80267b8:	4413      	add	r3, r2
 80267ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80267be:	f507 6107 	add.w	r1, r7, #2160	; 0x870
 80267c2:	e9d1 4500 	ldrd	r4, r5, [r1]
 80267c6:	4621      	mov	r1, r4
 80267c8:	1889      	adds	r1, r1, r2
 80267ca:	f8c7 1868 	str.w	r1, [r7, #2152]	; 0x868
 80267ce:	4629      	mov	r1, r5
 80267d0:	eb41 0303 	adc.w	r3, r1, r3
 80267d4:	f8c7 386c 	str.w	r3, [r7, #2156]	; 0x86c
 80267d8:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80267dc:	2b00      	cmp	r3, #0
 80267de:	f000 80b4 	beq.w	802694a <_Transform_Sha512+0x1cfe>
 80267e2:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80267e6:	3320      	adds	r3, #32
 80267e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80267ec:	f04f 0213 	mov.w	r2, #19
 80267f0:	f04f 0300 	mov.w	r3, #0
 80267f4:	f7fd ffae 	bl	8024754 <rotrFixed64>
 80267f8:	4604      	mov	r4, r0
 80267fa:	460d      	mov	r5, r1
 80267fc:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8026800:	3320      	adds	r3, #32
 8026802:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026806:	f04f 023d 	mov.w	r2, #61	; 0x3d
 802680a:	f04f 0300 	mov.w	r3, #0
 802680e:	f7fd ffa1 	bl	8024754 <rotrFixed64>
 8026812:	4602      	mov	r2, r0
 8026814:	460b      	mov	r3, r1
 8026816:	ea84 0102 	eor.w	r1, r4, r2
 802681a:	f8c7 1860 	str.w	r1, [r7, #2144]	; 0x860
 802681e:	406b      	eors	r3, r5
 8026820:	f8c7 3864 	str.w	r3, [r7, #2148]	; 0x864
 8026824:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8026828:	3320      	adds	r3, #32
 802682a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802682e:	f04f 0000 	mov.w	r0, #0
 8026832:	f04f 0100 	mov.w	r1, #0
 8026836:	0990      	lsrs	r0, r2, #6
 8026838:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 802683c:	0999      	lsrs	r1, r3, #6
 802683e:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8026842:	e9d3 4500 	ldrd	r4, r5, [r3]
 8026846:	4623      	mov	r3, r4
 8026848:	4043      	eors	r3, r0
 802684a:	f8c7 3858 	str.w	r3, [r7, #2136]	; 0x858
 802684e:	462b      	mov	r3, r5
 8026850:	404b      	eors	r3, r1
 8026852:	f8c7 385c 	str.w	r3, [r7, #2140]	; 0x85c
 8026856:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 802685a:	3378      	adds	r3, #120	; 0x78
 802685c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026860:	f607 0158 	addw	r1, r7, #2136	; 0x858
 8026864:	e9d1 4500 	ldrd	r4, r5, [r1]
 8026868:	4621      	mov	r1, r4
 802686a:	1889      	adds	r1, r1, r2
 802686c:	f8c7 1850 	str.w	r1, [r7, #2128]	; 0x850
 8026870:	4629      	mov	r1, r5
 8026872:	eb41 0303 	adc.w	r3, r1, r3
 8026876:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
 802687a:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 802687e:	3338      	adds	r3, #56	; 0x38
 8026880:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026884:	f04f 0201 	mov.w	r2, #1
 8026888:	f04f 0300 	mov.w	r3, #0
 802688c:	f7fd ff62 	bl	8024754 <rotrFixed64>
 8026890:	4604      	mov	r4, r0
 8026892:	460d      	mov	r5, r1
 8026894:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8026898:	3338      	adds	r3, #56	; 0x38
 802689a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802689e:	f04f 0208 	mov.w	r2, #8
 80268a2:	f04f 0300 	mov.w	r3, #0
 80268a6:	f7fd ff55 	bl	8024754 <rotrFixed64>
 80268aa:	4602      	mov	r2, r0
 80268ac:	460b      	mov	r3, r1
 80268ae:	ea84 0102 	eor.w	r1, r4, r2
 80268b2:	f8c7 1848 	str.w	r1, [r7, #2120]	; 0x848
 80268b6:	406b      	eors	r3, r5
 80268b8:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
 80268bc:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80268c0:	3338      	adds	r3, #56	; 0x38
 80268c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80268c6:	f04f 0000 	mov.w	r0, #0
 80268ca:	f04f 0100 	mov.w	r1, #0
 80268ce:	09d0      	lsrs	r0, r2, #7
 80268d0:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 80268d4:	09d9      	lsrs	r1, r3, #7
 80268d6:	f607 0348 	addw	r3, r7, #2120	; 0x848
 80268da:	e9d3 4500 	ldrd	r4, r5, [r3]
 80268de:	4623      	mov	r3, r4
 80268e0:	4043      	eors	r3, r0
 80268e2:	f8c7 3840 	str.w	r3, [r7, #2112]	; 0x840
 80268e6:	462b      	mov	r3, r5
 80268e8:	404b      	eors	r3, r1
 80268ea:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
 80268ee:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 80268f2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80268f6:	4623      	mov	r3, r4
 80268f8:	f507 6204 	add.w	r2, r7, #2112	; 0x840
 80268fc:	e9d2 0100 	ldrd	r0, r1, [r2]
 8026900:	4602      	mov	r2, r0
 8026902:	189b      	adds	r3, r3, r2
 8026904:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8026908:	462b      	mov	r3, r5
 802690a:	460a      	mov	r2, r1
 802690c:	4153      	adcs	r3, r2
 802690e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8026912:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8026916:	3330      	adds	r3, #48	; 0x30
 8026918:	e9d3 2300 	ldrd	r2, r3, [r3]
 802691c:	f8d7 1d04 	ldr.w	r1, [r7, #3332]	; 0xd04
 8026920:	3130      	adds	r1, #48	; 0x30
 8026922:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8026926:	4620      	mov	r0, r4
 8026928:	1880      	adds	r0, r0, r2
 802692a:	f8c7 0838 	str.w	r0, [r7, #2104]	; 0x838
 802692e:	4628      	mov	r0, r5
 8026930:	eb40 0303 	adc.w	r3, r0, r3
 8026934:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
 8026938:	f607 0338 	addw	r3, r7, #2104	; 0x838
 802693c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8026940:	e9c1 3400 	strd	r3, r4, [r1]
 8026944:	e9d1 2300 	ldrd	r2, r3, [r1]
 8026948:	e00b      	b.n	8026962 <_Transform_Sha512+0x1d16>
 802694a:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 802694e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8026952:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 8026956:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 802695a:	e9c1 2300 	strd	r2, r3, [r1]
 802695e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8026962:	f607 0168 	addw	r1, r7, #2152	; 0x868
 8026966:	e9d1 4500 	ldrd	r4, r5, [r1]
 802696a:	4621      	mov	r1, r4
 802696c:	1851      	adds	r1, r2, r1
 802696e:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8026972:	4629      	mov	r1, r5
 8026974:	414b      	adcs	r3, r1
 8026976:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 802697a:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 802697e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026982:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8026986:	4621      	mov	r1, r4
 8026988:	1889      	adds	r1, r1, r2
 802698a:	f8c7 1830 	str.w	r1, [r7, #2096]	; 0x830
 802698e:	4629      	mov	r1, r5
 8026990:	eb41 0303 	adc.w	r3, r1, r3
 8026994:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 8026998:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 802699c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80269a0:	f607 42c8 	addw	r2, r7, #3272	; 0xcc8
 80269a4:	e9c2 3400 	strd	r3, r4, [r2]
 80269a8:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 80269ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80269b0:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 80269b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80269b8:	1884      	adds	r4, r0, r2
 80269ba:	f8c7 4828 	str.w	r4, [r7, #2088]	; 0x828
 80269be:	eb41 0303 	adc.w	r3, r1, r3
 80269c2:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 80269c6:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80269ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80269ce:	f607 42e8 	addw	r2, r7, #3304	; 0xce8
 80269d2:	e9c2 3400 	strd	r3, r4, [r2]
 80269d6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80269da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80269de:	f04f 021c 	mov.w	r2, #28
 80269e2:	f04f 0300 	mov.w	r3, #0
 80269e6:	f7fd feb5 	bl	8024754 <rotrFixed64>
 80269ea:	4604      	mov	r4, r0
 80269ec:	460d      	mov	r5, r1
 80269ee:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80269f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80269f6:	f04f 0222 	mov.w	r2, #34	; 0x22
 80269fa:	f04f 0300 	mov.w	r3, #0
 80269fe:	f7fd fea9 	bl	8024754 <rotrFixed64>
 8026a02:	4602      	mov	r2, r0
 8026a04:	460b      	mov	r3, r1
 8026a06:	ea84 0102 	eor.w	r1, r4, r2
 8026a0a:	f8c7 1820 	str.w	r1, [r7, #2080]	; 0x820
 8026a0e:	406b      	eors	r3, r5
 8026a10:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 8026a14:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8026a18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026a1c:	f04f 0227 	mov.w	r2, #39	; 0x27
 8026a20:	f04f 0300 	mov.w	r3, #0
 8026a24:	f7fd fe96 	bl	8024754 <rotrFixed64>
 8026a28:	4602      	mov	r2, r0
 8026a2a:	460b      	mov	r3, r1
 8026a2c:	f507 6102 	add.w	r1, r7, #2080	; 0x820
 8026a30:	e9d1 4500 	ldrd	r4, r5, [r1]
 8026a34:	4621      	mov	r1, r4
 8026a36:	4051      	eors	r1, r2
 8026a38:	f8c7 1818 	str.w	r1, [r7, #2072]	; 0x818
 8026a3c:	4629      	mov	r1, r5
 8026a3e:	404b      	eors	r3, r1
 8026a40:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 8026a44:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8026a48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026a4c:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 8026a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026a54:	ea00 0402 	and.w	r4, r0, r2
 8026a58:	f8c7 4810 	str.w	r4, [r7, #2064]	; 0x810
 8026a5c:	400b      	ands	r3, r1
 8026a5e:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 8026a62:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 8026a66:	e9d3 4500 	ldrd	r4, r5, [r3]
 8026a6a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8026a6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026a72:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 8026a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026a7a:	ea40 0602 	orr.w	r6, r0, r2
 8026a7e:	f8c7 6808 	str.w	r6, [r7, #2056]	; 0x808
 8026a82:	430b      	orrs	r3, r1
 8026a84:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8026a88:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8026a8c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8026a90:	460b      	mov	r3, r1
 8026a92:	4023      	ands	r3, r4
 8026a94:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
 8026a98:	4613      	mov	r3, r2
 8026a9a:	402b      	ands	r3, r5
 8026a9c:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 8026aa0:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8026aa4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8026aa8:	4623      	mov	r3, r4
 8026aaa:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 8026aae:	e9d2 0100 	ldrd	r0, r1, [r2]
 8026ab2:	4602      	mov	r2, r0
 8026ab4:	4313      	orrs	r3, r2
 8026ab6:	f8c7 37f8 	str.w	r3, [r7, #2040]	; 0x7f8
 8026aba:	462b      	mov	r3, r5
 8026abc:	460a      	mov	r2, r1
 8026abe:	4313      	orrs	r3, r2
 8026ac0:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
 8026ac4:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8026ac8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8026acc:	4623      	mov	r3, r4
 8026ace:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 8026ad2:	e9d2 0100 	ldrd	r0, r1, [r2]
 8026ad6:	4602      	mov	r2, r0
 8026ad8:	189b      	adds	r3, r3, r2
 8026ada:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8026ade:	462b      	mov	r3, r5
 8026ae0:	460a      	mov	r2, r1
 8026ae2:	4153      	adcs	r3, r2
 8026ae4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8026ae8:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8026aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026af0:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8026af4:	4621      	mov	r1, r4
 8026af6:	1889      	adds	r1, r1, r2
 8026af8:	f8c7 17f0 	str.w	r1, [r7, #2032]	; 0x7f0
 8026afc:	4629      	mov	r1, r5
 8026afe:	eb41 0303 	adc.w	r3, r1, r3
 8026b02:	f8c7 37f4 	str.w	r3, [r7, #2036]	; 0x7f4
 8026b06:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8026b0a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8026b0e:	f607 42c8 	addw	r2, r7, #3272	; 0xcc8
 8026b12:	e9c2 3400 	strd	r3, r4, [r2]
 8026b16:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8026b1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026b1e:	f04f 020e 	mov.w	r2, #14
 8026b22:	f04f 0300 	mov.w	r3, #0
 8026b26:	f7fd fe15 	bl	8024754 <rotrFixed64>
 8026b2a:	4604      	mov	r4, r0
 8026b2c:	460d      	mov	r5, r1
 8026b2e:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8026b32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026b36:	f04f 0212 	mov.w	r2, #18
 8026b3a:	f04f 0300 	mov.w	r3, #0
 8026b3e:	f7fd fe09 	bl	8024754 <rotrFixed64>
 8026b42:	4602      	mov	r2, r0
 8026b44:	460b      	mov	r3, r1
 8026b46:	ea84 0102 	eor.w	r1, r4, r2
 8026b4a:	f8c7 17e8 	str.w	r1, [r7, #2024]	; 0x7e8
 8026b4e:	406b      	eors	r3, r5
 8026b50:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
 8026b54:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8026b58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026b5c:	f04f 0229 	mov.w	r2, #41	; 0x29
 8026b60:	f04f 0300 	mov.w	r3, #0
 8026b64:	f7fd fdf6 	bl	8024754 <rotrFixed64>
 8026b68:	4602      	mov	r2, r0
 8026b6a:	460b      	mov	r3, r1
 8026b6c:	f507 61fd 	add.w	r1, r7, #2024	; 0x7e8
 8026b70:	e9d1 4500 	ldrd	r4, r5, [r1]
 8026b74:	4621      	mov	r1, r4
 8026b76:	4051      	eors	r1, r2
 8026b78:	f8c7 17e0 	str.w	r1, [r7, #2016]	; 0x7e0
 8026b7c:	4629      	mov	r1, r5
 8026b7e:	404b      	eors	r3, r1
 8026b80:	f8c7 37e4 	str.w	r3, [r7, #2020]	; 0x7e4
 8026b84:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8026b88:	e9d3 8900 	ldrd	r8, r9, [r3]
 8026b8c:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8026b90:	e9d3 4500 	ldrd	r4, r5, [r3]
 8026b94:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8026b98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026b9c:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8026ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026ba4:	ea80 0602 	eor.w	r6, r0, r2
 8026ba8:	f8c7 67d8 	str.w	r6, [r7, #2008]	; 0x7d8
 8026bac:	404b      	eors	r3, r1
 8026bae:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
 8026bb2:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8026bb6:	e9d3 1200 	ldrd	r1, r2, [r3]
 8026bba:	460b      	mov	r3, r1
 8026bbc:	4023      	ands	r3, r4
 8026bbe:	f8c7 37d0 	str.w	r3, [r7, #2000]	; 0x7d0
 8026bc2:	4613      	mov	r3, r2
 8026bc4:	402b      	ands	r3, r5
 8026bc6:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4
 8026bca:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 8026bce:	e9d3 1200 	ldrd	r1, r2, [r3]
 8026bd2:	460b      	mov	r3, r1
 8026bd4:	ea88 0303 	eor.w	r3, r8, r3
 8026bd8:	f8c7 37c8 	str.w	r3, [r7, #1992]	; 0x7c8
 8026bdc:	4613      	mov	r3, r2
 8026bde:	ea89 0303 	eor.w	r3, r9, r3
 8026be2:	f8c7 37cc 	str.w	r3, [r7, #1996]	; 0x7cc
 8026be6:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8026bea:	e9d3 4500 	ldrd	r4, r5, [r3]
 8026bee:	4623      	mov	r3, r4
 8026bf0:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 8026bf4:	e9d2 0100 	ldrd	r0, r1, [r2]
 8026bf8:	4602      	mov	r2, r0
 8026bfa:	189b      	adds	r3, r3, r2
 8026bfc:	f8c7 37c0 	str.w	r3, [r7, #1984]	; 0x7c0
 8026c00:	462b      	mov	r3, r5
 8026c02:	460a      	mov	r2, r1
 8026c04:	4153      	adcs	r3, r2
 8026c06:	f8c7 37c4 	str.w	r3, [r7, #1988]	; 0x7c4
 8026c0a:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8026c0e:	3307      	adds	r3, #7
 8026c10:	00da      	lsls	r2, r3, #3
 8026c12:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 8026c16:	4413      	add	r3, r2
 8026c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026c1c:	f507 61f8 	add.w	r1, r7, #1984	; 0x7c0
 8026c20:	e9d1 4500 	ldrd	r4, r5, [r1]
 8026c24:	4621      	mov	r1, r4
 8026c26:	1889      	adds	r1, r1, r2
 8026c28:	f8c7 17b8 	str.w	r1, [r7, #1976]	; 0x7b8
 8026c2c:	4629      	mov	r1, r5
 8026c2e:	eb41 0303 	adc.w	r3, r1, r3
 8026c32:	f8c7 37bc 	str.w	r3, [r7, #1980]	; 0x7bc
 8026c36:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8026c3a:	2b00      	cmp	r3, #0
 8026c3c:	f000 80b3 	beq.w	8026da6 <_Transform_Sha512+0x215a>
 8026c40:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8026c44:	3328      	adds	r3, #40	; 0x28
 8026c46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026c4a:	f04f 0213 	mov.w	r2, #19
 8026c4e:	f04f 0300 	mov.w	r3, #0
 8026c52:	f7fd fd7f 	bl	8024754 <rotrFixed64>
 8026c56:	4604      	mov	r4, r0
 8026c58:	460d      	mov	r5, r1
 8026c5a:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8026c5e:	3328      	adds	r3, #40	; 0x28
 8026c60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026c64:	f04f 023d 	mov.w	r2, #61	; 0x3d
 8026c68:	f04f 0300 	mov.w	r3, #0
 8026c6c:	f7fd fd72 	bl	8024754 <rotrFixed64>
 8026c70:	4602      	mov	r2, r0
 8026c72:	460b      	mov	r3, r1
 8026c74:	ea84 0102 	eor.w	r1, r4, r2
 8026c78:	f8c7 17b0 	str.w	r1, [r7, #1968]	; 0x7b0
 8026c7c:	406b      	eors	r3, r5
 8026c7e:	f8c7 37b4 	str.w	r3, [r7, #1972]	; 0x7b4
 8026c82:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8026c86:	3328      	adds	r3, #40	; 0x28
 8026c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026c8c:	f04f 0000 	mov.w	r0, #0
 8026c90:	f04f 0100 	mov.w	r1, #0
 8026c94:	0990      	lsrs	r0, r2, #6
 8026c96:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 8026c9a:	0999      	lsrs	r1, r3, #6
 8026c9c:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 8026ca0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8026ca4:	4623      	mov	r3, r4
 8026ca6:	4043      	eors	r3, r0
 8026ca8:	f8c7 37a8 	str.w	r3, [r7, #1960]	; 0x7a8
 8026cac:	462b      	mov	r3, r5
 8026cae:	404b      	eors	r3, r1
 8026cb0:	f8c7 37ac 	str.w	r3, [r7, #1964]	; 0x7ac
 8026cb4:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8026cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026cbc:	f507 61f5 	add.w	r1, r7, #1960	; 0x7a8
 8026cc0:	e9d1 4500 	ldrd	r4, r5, [r1]
 8026cc4:	4621      	mov	r1, r4
 8026cc6:	1889      	adds	r1, r1, r2
 8026cc8:	f8c7 17a0 	str.w	r1, [r7, #1952]	; 0x7a0
 8026ccc:	4629      	mov	r1, r5
 8026cce:	eb41 0303 	adc.w	r3, r1, r3
 8026cd2:	f8c7 37a4 	str.w	r3, [r7, #1956]	; 0x7a4
 8026cd6:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8026cda:	3340      	adds	r3, #64	; 0x40
 8026cdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026ce0:	f04f 0201 	mov.w	r2, #1
 8026ce4:	f04f 0300 	mov.w	r3, #0
 8026ce8:	f7fd fd34 	bl	8024754 <rotrFixed64>
 8026cec:	4604      	mov	r4, r0
 8026cee:	460d      	mov	r5, r1
 8026cf0:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8026cf4:	3340      	adds	r3, #64	; 0x40
 8026cf6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026cfa:	f04f 0208 	mov.w	r2, #8
 8026cfe:	f04f 0300 	mov.w	r3, #0
 8026d02:	f7fd fd27 	bl	8024754 <rotrFixed64>
 8026d06:	4602      	mov	r2, r0
 8026d08:	460b      	mov	r3, r1
 8026d0a:	ea84 0102 	eor.w	r1, r4, r2
 8026d0e:	f8c7 1798 	str.w	r1, [r7, #1944]	; 0x798
 8026d12:	406b      	eors	r3, r5
 8026d14:	f8c7 379c 	str.w	r3, [r7, #1948]	; 0x79c
 8026d18:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8026d1c:	3340      	adds	r3, #64	; 0x40
 8026d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026d22:	f04f 0000 	mov.w	r0, #0
 8026d26:	f04f 0100 	mov.w	r1, #0
 8026d2a:	09d0      	lsrs	r0, r2, #7
 8026d2c:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8026d30:	09d9      	lsrs	r1, r3, #7
 8026d32:	f507 63f3 	add.w	r3, r7, #1944	; 0x798
 8026d36:	e9d3 4500 	ldrd	r4, r5, [r3]
 8026d3a:	4623      	mov	r3, r4
 8026d3c:	4043      	eors	r3, r0
 8026d3e:	f8c7 3790 	str.w	r3, [r7, #1936]	; 0x790
 8026d42:	462b      	mov	r3, r5
 8026d44:	404b      	eors	r3, r1
 8026d46:	f8c7 3794 	str.w	r3, [r7, #1940]	; 0x794
 8026d4a:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8026d4e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8026d52:	4623      	mov	r3, r4
 8026d54:	f507 62f2 	add.w	r2, r7, #1936	; 0x790
 8026d58:	e9d2 0100 	ldrd	r0, r1, [r2]
 8026d5c:	4602      	mov	r2, r0
 8026d5e:	189b      	adds	r3, r3, r2
 8026d60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8026d64:	462b      	mov	r3, r5
 8026d66:	460a      	mov	r2, r1
 8026d68:	4153      	adcs	r3, r2
 8026d6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8026d6e:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8026d72:	3338      	adds	r3, #56	; 0x38
 8026d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026d78:	f8d7 1d04 	ldr.w	r1, [r7, #3332]	; 0xd04
 8026d7c:	3138      	adds	r1, #56	; 0x38
 8026d7e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8026d82:	4620      	mov	r0, r4
 8026d84:	1880      	adds	r0, r0, r2
 8026d86:	f8c7 0788 	str.w	r0, [r7, #1928]	; 0x788
 8026d8a:	4628      	mov	r0, r5
 8026d8c:	eb40 0303 	adc.w	r3, r0, r3
 8026d90:	f8c7 378c 	str.w	r3, [r7, #1932]	; 0x78c
 8026d94:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 8026d98:	e9d3 3400 	ldrd	r3, r4, [r3]
 8026d9c:	e9c1 3400 	strd	r3, r4, [r1]
 8026da0:	e9d1 2300 	ldrd	r2, r3, [r1]
 8026da4:	e00b      	b.n	8026dbe <_Transform_Sha512+0x2172>
 8026da6:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8026daa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8026dae:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 8026db2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8026db6:	e9c1 2300 	strd	r2, r3, [r1]
 8026dba:	e9d1 2300 	ldrd	r2, r3, [r1]
 8026dbe:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 8026dc2:	e9d1 4500 	ldrd	r4, r5, [r1]
 8026dc6:	4621      	mov	r1, r4
 8026dc8:	1851      	adds	r1, r2, r1
 8026dca:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8026dce:	4629      	mov	r1, r5
 8026dd0:	414b      	adcs	r3, r1
 8026dd2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8026dd6:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8026dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026dde:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8026de2:	4621      	mov	r1, r4
 8026de4:	1889      	adds	r1, r1, r2
 8026de6:	f8c7 1780 	str.w	r1, [r7, #1920]	; 0x780
 8026dea:	4629      	mov	r1, r5
 8026dec:	eb41 0303 	adc.w	r3, r1, r3
 8026df0:	f8c7 3784 	str.w	r3, [r7, #1924]	; 0x784
 8026df4:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8026df8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8026dfc:	f507 624c 	add.w	r2, r7, #3264	; 0xcc0
 8026e00:	e9c2 3400 	strd	r3, r4, [r2]
 8026e04:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 8026e08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026e0c:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8026e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026e14:	1884      	adds	r4, r0, r2
 8026e16:	f8c7 4778 	str.w	r4, [r7, #1912]	; 0x778
 8026e1a:	eb41 0303 	adc.w	r3, r1, r3
 8026e1e:	f8c7 377c 	str.w	r3, [r7, #1916]	; 0x77c
 8026e22:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 8026e26:	e9d3 3400 	ldrd	r3, r4, [r3]
 8026e2a:	f507 624e 	add.w	r2, r7, #3296	; 0xce0
 8026e2e:	e9c2 3400 	strd	r3, r4, [r2]
 8026e32:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8026e36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026e3a:	f04f 021c 	mov.w	r2, #28
 8026e3e:	f04f 0300 	mov.w	r3, #0
 8026e42:	f7fd fc87 	bl	8024754 <rotrFixed64>
 8026e46:	4604      	mov	r4, r0
 8026e48:	460d      	mov	r5, r1
 8026e4a:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8026e4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026e52:	f04f 0222 	mov.w	r2, #34	; 0x22
 8026e56:	f04f 0300 	mov.w	r3, #0
 8026e5a:	f7fd fc7b 	bl	8024754 <rotrFixed64>
 8026e5e:	4602      	mov	r2, r0
 8026e60:	460b      	mov	r3, r1
 8026e62:	ea84 0102 	eor.w	r1, r4, r2
 8026e66:	f8c7 1770 	str.w	r1, [r7, #1904]	; 0x770
 8026e6a:	406b      	eors	r3, r5
 8026e6c:	f8c7 3774 	str.w	r3, [r7, #1908]	; 0x774
 8026e70:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8026e74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026e78:	f04f 0227 	mov.w	r2, #39	; 0x27
 8026e7c:	f04f 0300 	mov.w	r3, #0
 8026e80:	f7fd fc68 	bl	8024754 <rotrFixed64>
 8026e84:	4602      	mov	r2, r0
 8026e86:	460b      	mov	r3, r1
 8026e88:	f507 61ee 	add.w	r1, r7, #1904	; 0x770
 8026e8c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8026e90:	4621      	mov	r1, r4
 8026e92:	4051      	eors	r1, r2
 8026e94:	f8c7 1768 	str.w	r1, [r7, #1896]	; 0x768
 8026e98:	4629      	mov	r1, r5
 8026e9a:	404b      	eors	r3, r1
 8026e9c:	f8c7 376c 	str.w	r3, [r7, #1900]	; 0x76c
 8026ea0:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8026ea4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026ea8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8026eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026eb0:	ea00 0402 	and.w	r4, r0, r2
 8026eb4:	f8c7 4760 	str.w	r4, [r7, #1888]	; 0x760
 8026eb8:	400b      	ands	r3, r1
 8026eba:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
 8026ebe:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 8026ec2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8026ec6:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8026eca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026ece:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8026ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026ed6:	ea40 0602 	orr.w	r6, r0, r2
 8026eda:	f8c7 6758 	str.w	r6, [r7, #1880]	; 0x758
 8026ede:	430b      	orrs	r3, r1
 8026ee0:	f8c7 375c 	str.w	r3, [r7, #1884]	; 0x75c
 8026ee4:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 8026ee8:	e9d3 1200 	ldrd	r1, r2, [r3]
 8026eec:	460b      	mov	r3, r1
 8026eee:	4023      	ands	r3, r4
 8026ef0:	f8c7 3750 	str.w	r3, [r7, #1872]	; 0x750
 8026ef4:	4613      	mov	r3, r2
 8026ef6:	402b      	ands	r3, r5
 8026ef8:	f8c7 3754 	str.w	r3, [r7, #1876]	; 0x754
 8026efc:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 8026f00:	e9d3 4500 	ldrd	r4, r5, [r3]
 8026f04:	4623      	mov	r3, r4
 8026f06:	f507 62ea 	add.w	r2, r7, #1872	; 0x750
 8026f0a:	e9d2 0100 	ldrd	r0, r1, [r2]
 8026f0e:	4602      	mov	r2, r0
 8026f10:	4313      	orrs	r3, r2
 8026f12:	f8c7 3748 	str.w	r3, [r7, #1864]	; 0x748
 8026f16:	462b      	mov	r3, r5
 8026f18:	460a      	mov	r2, r1
 8026f1a:	4313      	orrs	r3, r2
 8026f1c:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
 8026f20:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8026f24:	e9d3 4500 	ldrd	r4, r5, [r3]
 8026f28:	4623      	mov	r3, r4
 8026f2a:	f507 62e9 	add.w	r2, r7, #1864	; 0x748
 8026f2e:	e9d2 0100 	ldrd	r0, r1, [r2]
 8026f32:	4602      	mov	r2, r0
 8026f34:	189b      	adds	r3, r3, r2
 8026f36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8026f3a:	462b      	mov	r3, r5
 8026f3c:	460a      	mov	r2, r1
 8026f3e:	4153      	adcs	r3, r2
 8026f40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8026f44:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8026f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026f4c:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8026f50:	4621      	mov	r1, r4
 8026f52:	1889      	adds	r1, r1, r2
 8026f54:	f8c7 1740 	str.w	r1, [r7, #1856]	; 0x740
 8026f58:	4629      	mov	r1, r5
 8026f5a:	eb41 0303 	adc.w	r3, r1, r3
 8026f5e:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
 8026f62:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8026f66:	e9d3 3400 	ldrd	r3, r4, [r3]
 8026f6a:	f507 624c 	add.w	r2, r7, #3264	; 0xcc0
 8026f6e:	e9c2 3400 	strd	r3, r4, [r2]
        R( 8); R( 9); R(10); R(11);
 8026f72:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 8026f76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026f7a:	f04f 020e 	mov.w	r2, #14
 8026f7e:	f04f 0300 	mov.w	r3, #0
 8026f82:	f7fd fbe7 	bl	8024754 <rotrFixed64>
 8026f86:	4604      	mov	r4, r0
 8026f88:	460d      	mov	r5, r1
 8026f8a:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 8026f8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026f92:	f04f 0212 	mov.w	r2, #18
 8026f96:	f04f 0300 	mov.w	r3, #0
 8026f9a:	f7fd fbdb 	bl	8024754 <rotrFixed64>
 8026f9e:	4602      	mov	r2, r0
 8026fa0:	460b      	mov	r3, r1
 8026fa2:	ea84 0102 	eor.w	r1, r4, r2
 8026fa6:	f8c7 1738 	str.w	r1, [r7, #1848]	; 0x738
 8026faa:	406b      	eors	r3, r5
 8026fac:	f8c7 373c 	str.w	r3, [r7, #1852]	; 0x73c
 8026fb0:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 8026fb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026fb8:	f04f 0229 	mov.w	r2, #41	; 0x29
 8026fbc:	f04f 0300 	mov.w	r3, #0
 8026fc0:	f7fd fbc8 	bl	8024754 <rotrFixed64>
 8026fc4:	4602      	mov	r2, r0
 8026fc6:	460b      	mov	r3, r1
 8026fc8:	f507 61e7 	add.w	r1, r7, #1848	; 0x738
 8026fcc:	e9d1 4500 	ldrd	r4, r5, [r1]
 8026fd0:	4621      	mov	r1, r4
 8026fd2:	4051      	eors	r1, r2
 8026fd4:	f8c7 1730 	str.w	r1, [r7, #1840]	; 0x730
 8026fd8:	4629      	mov	r1, r5
 8026fda:	404b      	eors	r3, r1
 8026fdc:	f8c7 3734 	str.w	r3, [r7, #1844]	; 0x734
 8026fe0:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8026fe4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8026fe8:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 8026fec:	e9d3 4500 	ldrd	r4, r5, [r3]
 8026ff0:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8026ff4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026ff8:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8026ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027000:	ea80 0602 	eor.w	r6, r0, r2
 8027004:	f8c7 6728 	str.w	r6, [r7, #1832]	; 0x728
 8027008:	404b      	eors	r3, r1
 802700a:	f8c7 372c 	str.w	r3, [r7, #1836]	; 0x72c
 802700e:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8027012:	e9d3 1200 	ldrd	r1, r2, [r3]
 8027016:	460b      	mov	r3, r1
 8027018:	4023      	ands	r3, r4
 802701a:	f8c7 3720 	str.w	r3, [r7, #1824]	; 0x720
 802701e:	4613      	mov	r3, r2
 8027020:	402b      	ands	r3, r5
 8027022:	f8c7 3724 	str.w	r3, [r7, #1828]	; 0x724
 8027026:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 802702a:	e9d3 1200 	ldrd	r1, r2, [r3]
 802702e:	460b      	mov	r3, r1
 8027030:	ea88 0303 	eor.w	r3, r8, r3
 8027034:	f8c7 3718 	str.w	r3, [r7, #1816]	; 0x718
 8027038:	4613      	mov	r3, r2
 802703a:	ea89 0303 	eor.w	r3, r9, r3
 802703e:	f8c7 371c 	str.w	r3, [r7, #1820]	; 0x71c
 8027042:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8027046:	e9d3 4500 	ldrd	r4, r5, [r3]
 802704a:	4623      	mov	r3, r4
 802704c:	f507 62e3 	add.w	r2, r7, #1816	; 0x718
 8027050:	e9d2 0100 	ldrd	r0, r1, [r2]
 8027054:	4602      	mov	r2, r0
 8027056:	189b      	adds	r3, r3, r2
 8027058:	f8c7 3710 	str.w	r3, [r7, #1808]	; 0x710
 802705c:	462b      	mov	r3, r5
 802705e:	460a      	mov	r2, r1
 8027060:	4153      	adcs	r3, r2
 8027062:	f8c7 3714 	str.w	r3, [r7, #1812]	; 0x714
 8027066:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 802706a:	3308      	adds	r3, #8
 802706c:	00da      	lsls	r2, r3, #3
 802706e:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 8027072:	4413      	add	r3, r2
 8027074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027078:	f507 61e2 	add.w	r1, r7, #1808	; 0x710
 802707c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8027080:	4621      	mov	r1, r4
 8027082:	1889      	adds	r1, r1, r2
 8027084:	f8c7 1708 	str.w	r1, [r7, #1800]	; 0x708
 8027088:	4629      	mov	r1, r5
 802708a:	eb41 0303 	adc.w	r3, r1, r3
 802708e:	f8c7 370c 	str.w	r3, [r7, #1804]	; 0x70c
 8027092:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8027096:	2b00      	cmp	r3, #0
 8027098:	f000 80b4 	beq.w	8027204 <_Transform_Sha512+0x25b8>
 802709c:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80270a0:	3330      	adds	r3, #48	; 0x30
 80270a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80270a6:	f04f 0213 	mov.w	r2, #19
 80270aa:	f04f 0300 	mov.w	r3, #0
 80270ae:	f7fd fb51 	bl	8024754 <rotrFixed64>
 80270b2:	4604      	mov	r4, r0
 80270b4:	460d      	mov	r5, r1
 80270b6:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80270ba:	3330      	adds	r3, #48	; 0x30
 80270bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80270c0:	f04f 023d 	mov.w	r2, #61	; 0x3d
 80270c4:	f04f 0300 	mov.w	r3, #0
 80270c8:	f7fd fb44 	bl	8024754 <rotrFixed64>
 80270cc:	4602      	mov	r2, r0
 80270ce:	460b      	mov	r3, r1
 80270d0:	ea84 0102 	eor.w	r1, r4, r2
 80270d4:	f8c7 1700 	str.w	r1, [r7, #1792]	; 0x700
 80270d8:	406b      	eors	r3, r5
 80270da:	f8c7 3704 	str.w	r3, [r7, #1796]	; 0x704
 80270de:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80270e2:	3330      	adds	r3, #48	; 0x30
 80270e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80270e8:	f04f 0000 	mov.w	r0, #0
 80270ec:	f04f 0100 	mov.w	r1, #0
 80270f0:	0990      	lsrs	r0, r2, #6
 80270f2:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 80270f6:	0999      	lsrs	r1, r3, #6
 80270f8:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 80270fc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8027100:	4623      	mov	r3, r4
 8027102:	4043      	eors	r3, r0
 8027104:	f8c7 36f8 	str.w	r3, [r7, #1784]	; 0x6f8
 8027108:	462b      	mov	r3, r5
 802710a:	404b      	eors	r3, r1
 802710c:	f8c7 36fc 	str.w	r3, [r7, #1788]	; 0x6fc
 8027110:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8027114:	3308      	adds	r3, #8
 8027116:	e9d3 2300 	ldrd	r2, r3, [r3]
 802711a:	f507 61df 	add.w	r1, r7, #1784	; 0x6f8
 802711e:	e9d1 4500 	ldrd	r4, r5, [r1]
 8027122:	4621      	mov	r1, r4
 8027124:	1889      	adds	r1, r1, r2
 8027126:	f8c7 16f0 	str.w	r1, [r7, #1776]	; 0x6f0
 802712a:	4629      	mov	r1, r5
 802712c:	eb41 0303 	adc.w	r3, r1, r3
 8027130:	f8c7 36f4 	str.w	r3, [r7, #1780]	; 0x6f4
 8027134:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8027138:	3348      	adds	r3, #72	; 0x48
 802713a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802713e:	f04f 0201 	mov.w	r2, #1
 8027142:	f04f 0300 	mov.w	r3, #0
 8027146:	f7fd fb05 	bl	8024754 <rotrFixed64>
 802714a:	4604      	mov	r4, r0
 802714c:	460d      	mov	r5, r1
 802714e:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8027152:	3348      	adds	r3, #72	; 0x48
 8027154:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027158:	f04f 0208 	mov.w	r2, #8
 802715c:	f04f 0300 	mov.w	r3, #0
 8027160:	f7fd faf8 	bl	8024754 <rotrFixed64>
 8027164:	4602      	mov	r2, r0
 8027166:	460b      	mov	r3, r1
 8027168:	ea84 0102 	eor.w	r1, r4, r2
 802716c:	f8c7 16e8 	str.w	r1, [r7, #1768]	; 0x6e8
 8027170:	406b      	eors	r3, r5
 8027172:	f8c7 36ec 	str.w	r3, [r7, #1772]	; 0x6ec
 8027176:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 802717a:	3348      	adds	r3, #72	; 0x48
 802717c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027180:	f04f 0000 	mov.w	r0, #0
 8027184:	f04f 0100 	mov.w	r1, #0
 8027188:	09d0      	lsrs	r0, r2, #7
 802718a:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 802718e:	09d9      	lsrs	r1, r3, #7
 8027190:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 8027194:	e9d3 4500 	ldrd	r4, r5, [r3]
 8027198:	4623      	mov	r3, r4
 802719a:	4043      	eors	r3, r0
 802719c:	f8c7 36e0 	str.w	r3, [r7, #1760]	; 0x6e0
 80271a0:	462b      	mov	r3, r5
 80271a2:	404b      	eors	r3, r1
 80271a4:	f8c7 36e4 	str.w	r3, [r7, #1764]	; 0x6e4
 80271a8:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80271ac:	e9d3 4500 	ldrd	r4, r5, [r3]
 80271b0:	4623      	mov	r3, r4
 80271b2:	f507 62dc 	add.w	r2, r7, #1760	; 0x6e0
 80271b6:	e9d2 0100 	ldrd	r0, r1, [r2]
 80271ba:	4602      	mov	r2, r0
 80271bc:	189b      	adds	r3, r3, r2
 80271be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80271c2:	462b      	mov	r3, r5
 80271c4:	460a      	mov	r2, r1
 80271c6:	4153      	adcs	r3, r2
 80271c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80271cc:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80271d0:	3340      	adds	r3, #64	; 0x40
 80271d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80271d6:	f8d7 1d04 	ldr.w	r1, [r7, #3332]	; 0xd04
 80271da:	3140      	adds	r1, #64	; 0x40
 80271dc:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 80271e0:	4620      	mov	r0, r4
 80271e2:	1880      	adds	r0, r0, r2
 80271e4:	f8c7 06d8 	str.w	r0, [r7, #1752]	; 0x6d8
 80271e8:	4628      	mov	r0, r5
 80271ea:	eb40 0303 	adc.w	r3, r0, r3
 80271ee:	f8c7 36dc 	str.w	r3, [r7, #1756]	; 0x6dc
 80271f2:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 80271f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80271fa:	e9c1 3400 	strd	r3, r4, [r1]
 80271fe:	e9d1 2300 	ldrd	r2, r3, [r1]
 8027202:	e00b      	b.n	802721c <_Transform_Sha512+0x25d0>
 8027204:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8027208:	f103 0140 	add.w	r1, r3, #64	; 0x40
 802720c:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 8027210:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8027214:	e9c1 2300 	strd	r2, r3, [r1]
 8027218:	e9d1 2300 	ldrd	r2, r3, [r1]
 802721c:	f507 61e1 	add.w	r1, r7, #1800	; 0x708
 8027220:	e9d1 4500 	ldrd	r4, r5, [r1]
 8027224:	4621      	mov	r1, r4
 8027226:	1851      	adds	r1, r2, r1
 8027228:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 802722c:	4629      	mov	r1, r5
 802722e:	414b      	adcs	r3, r1
 8027230:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8027234:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8027238:	e9d3 2300 	ldrd	r2, r3, [r3]
 802723c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8027240:	4621      	mov	r1, r4
 8027242:	1889      	adds	r1, r1, r2
 8027244:	f8c7 16d0 	str.w	r1, [r7, #1744]	; 0x6d0
 8027248:	4629      	mov	r1, r5
 802724a:	eb41 0303 	adc.w	r3, r1, r3
 802724e:	f8c7 36d4 	str.w	r3, [r7, #1748]	; 0x6d4
 8027252:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 8027256:	e9d3 3400 	ldrd	r3, r4, [r3]
 802725a:	f607 42f8 	addw	r2, r7, #3320	; 0xcf8
 802725e:	e9c2 3400 	strd	r3, r4, [r2]
 8027262:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 8027266:	e9d3 0100 	ldrd	r0, r1, [r3]
 802726a:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 802726e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027272:	1884      	adds	r4, r0, r2
 8027274:	f8c7 46c8 	str.w	r4, [r7, #1736]	; 0x6c8
 8027278:	eb41 0303 	adc.w	r3, r1, r3
 802727c:	f8c7 36cc 	str.w	r3, [r7, #1740]	; 0x6cc
 8027280:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 8027284:	e9d3 3400 	ldrd	r3, r4, [r3]
 8027288:	f607 42d8 	addw	r2, r7, #3288	; 0xcd8
 802728c:	e9c2 3400 	strd	r3, r4, [r2]
 8027290:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8027294:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027298:	f04f 021c 	mov.w	r2, #28
 802729c:	f04f 0300 	mov.w	r3, #0
 80272a0:	f7fd fa58 	bl	8024754 <rotrFixed64>
 80272a4:	4604      	mov	r4, r0
 80272a6:	460d      	mov	r5, r1
 80272a8:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 80272ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80272b0:	f04f 0222 	mov.w	r2, #34	; 0x22
 80272b4:	f04f 0300 	mov.w	r3, #0
 80272b8:	f7fd fa4c 	bl	8024754 <rotrFixed64>
 80272bc:	4602      	mov	r2, r0
 80272be:	460b      	mov	r3, r1
 80272c0:	ea84 0102 	eor.w	r1, r4, r2
 80272c4:	f8c7 16c0 	str.w	r1, [r7, #1728]	; 0x6c0
 80272c8:	406b      	eors	r3, r5
 80272ca:	f8c7 36c4 	str.w	r3, [r7, #1732]	; 0x6c4
 80272ce:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 80272d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80272d6:	f04f 0227 	mov.w	r2, #39	; 0x27
 80272da:	f04f 0300 	mov.w	r3, #0
 80272de:	f7fd fa39 	bl	8024754 <rotrFixed64>
 80272e2:	4602      	mov	r2, r0
 80272e4:	460b      	mov	r3, r1
 80272e6:	f507 61d8 	add.w	r1, r7, #1728	; 0x6c0
 80272ea:	e9d1 4500 	ldrd	r4, r5, [r1]
 80272ee:	4621      	mov	r1, r4
 80272f0:	4051      	eors	r1, r2
 80272f2:	f8c7 16b8 	str.w	r1, [r7, #1720]	; 0x6b8
 80272f6:	4629      	mov	r1, r5
 80272f8:	404b      	eors	r3, r1
 80272fa:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc
 80272fe:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8027302:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027306:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 802730a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802730e:	ea00 0402 	and.w	r4, r0, r2
 8027312:	f8c7 46b0 	str.w	r4, [r7, #1712]	; 0x6b0
 8027316:	400b      	ands	r3, r1
 8027318:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4
 802731c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8027320:	e9d3 4500 	ldrd	r4, r5, [r3]
 8027324:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8027328:	e9d3 0100 	ldrd	r0, r1, [r3]
 802732c:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8027330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027334:	ea40 0602 	orr.w	r6, r0, r2
 8027338:	f8c7 66a8 	str.w	r6, [r7, #1704]	; 0x6a8
 802733c:	430b      	orrs	r3, r1
 802733e:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
 8027342:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8027346:	e9d3 1200 	ldrd	r1, r2, [r3]
 802734a:	460b      	mov	r3, r1
 802734c:	4023      	ands	r3, r4
 802734e:	f8c7 36a0 	str.w	r3, [r7, #1696]	; 0x6a0
 8027352:	4613      	mov	r3, r2
 8027354:	402b      	ands	r3, r5
 8027356:	f8c7 36a4 	str.w	r3, [r7, #1700]	; 0x6a4
 802735a:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 802735e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8027362:	4623      	mov	r3, r4
 8027364:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8027368:	e9d2 0100 	ldrd	r0, r1, [r2]
 802736c:	4602      	mov	r2, r0
 802736e:	4313      	orrs	r3, r2
 8027370:	f8c7 3698 	str.w	r3, [r7, #1688]	; 0x698
 8027374:	462b      	mov	r3, r5
 8027376:	460a      	mov	r2, r1
 8027378:	4313      	orrs	r3, r2
 802737a:	f8c7 369c 	str.w	r3, [r7, #1692]	; 0x69c
 802737e:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8027382:	e9d3 4500 	ldrd	r4, r5, [r3]
 8027386:	4623      	mov	r3, r4
 8027388:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 802738c:	e9d2 0100 	ldrd	r0, r1, [r2]
 8027390:	4602      	mov	r2, r0
 8027392:	189b      	adds	r3, r3, r2
 8027394:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8027398:	462b      	mov	r3, r5
 802739a:	460a      	mov	r2, r1
 802739c:	4153      	adcs	r3, r2
 802739e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80273a2:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 80273a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80273aa:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 80273ae:	4621      	mov	r1, r4
 80273b0:	1889      	adds	r1, r1, r2
 80273b2:	f8c7 1690 	str.w	r1, [r7, #1680]	; 0x690
 80273b6:	4629      	mov	r1, r5
 80273b8:	eb41 0303 	adc.w	r3, r1, r3
 80273bc:	f8c7 3694 	str.w	r3, [r7, #1684]	; 0x694
 80273c0:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 80273c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80273c8:	f607 42f8 	addw	r2, r7, #3320	; 0xcf8
 80273cc:	e9c2 3400 	strd	r3, r4, [r2]
 80273d0:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 80273d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80273d8:	f04f 020e 	mov.w	r2, #14
 80273dc:	f04f 0300 	mov.w	r3, #0
 80273e0:	f7fd f9b8 	bl	8024754 <rotrFixed64>
 80273e4:	4604      	mov	r4, r0
 80273e6:	460d      	mov	r5, r1
 80273e8:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 80273ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80273f0:	f04f 0212 	mov.w	r2, #18
 80273f4:	f04f 0300 	mov.w	r3, #0
 80273f8:	f7fd f9ac 	bl	8024754 <rotrFixed64>
 80273fc:	4602      	mov	r2, r0
 80273fe:	460b      	mov	r3, r1
 8027400:	ea84 0102 	eor.w	r1, r4, r2
 8027404:	f8c7 1688 	str.w	r1, [r7, #1672]	; 0x688
 8027408:	406b      	eors	r3, r5
 802740a:	f8c7 368c 	str.w	r3, [r7, #1676]	; 0x68c
 802740e:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 8027412:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027416:	f04f 0229 	mov.w	r2, #41	; 0x29
 802741a:	f04f 0300 	mov.w	r3, #0
 802741e:	f7fd f999 	bl	8024754 <rotrFixed64>
 8027422:	4602      	mov	r2, r0
 8027424:	460b      	mov	r3, r1
 8027426:	f507 61d1 	add.w	r1, r7, #1672	; 0x688
 802742a:	e9d1 4500 	ldrd	r4, r5, [r1]
 802742e:	4621      	mov	r1, r4
 8027430:	4051      	eors	r1, r2
 8027432:	f8c7 1680 	str.w	r1, [r7, #1664]	; 0x680
 8027436:	4629      	mov	r1, r5
 8027438:	404b      	eors	r3, r1
 802743a:	f8c7 3684 	str.w	r3, [r7, #1668]	; 0x684
 802743e:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8027442:	e9d3 8900 	ldrd	r8, r9, [r3]
 8027446:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 802744a:	e9d3 4500 	ldrd	r4, r5, [r3]
 802744e:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 8027452:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027456:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 802745a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802745e:	ea80 0602 	eor.w	r6, r0, r2
 8027462:	f8c7 6678 	str.w	r6, [r7, #1656]	; 0x678
 8027466:	404b      	eors	r3, r1
 8027468:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 802746c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8027470:	e9d3 1200 	ldrd	r1, r2, [r3]
 8027474:	460b      	mov	r3, r1
 8027476:	4023      	ands	r3, r4
 8027478:	f8c7 3670 	str.w	r3, [r7, #1648]	; 0x670
 802747c:	4613      	mov	r3, r2
 802747e:	402b      	ands	r3, r5
 8027480:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
 8027484:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8027488:	e9d3 1200 	ldrd	r1, r2, [r3]
 802748c:	460b      	mov	r3, r1
 802748e:	ea88 0303 	eor.w	r3, r8, r3
 8027492:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
 8027496:	4613      	mov	r3, r2
 8027498:	ea89 0303 	eor.w	r3, r9, r3
 802749c:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
 80274a0:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 80274a4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80274a8:	4623      	mov	r3, r4
 80274aa:	f507 62cd 	add.w	r2, r7, #1640	; 0x668
 80274ae:	e9d2 0100 	ldrd	r0, r1, [r2]
 80274b2:	4602      	mov	r2, r0
 80274b4:	189b      	adds	r3, r3, r2
 80274b6:	f8c7 3660 	str.w	r3, [r7, #1632]	; 0x660
 80274ba:	462b      	mov	r3, r5
 80274bc:	460a      	mov	r2, r1
 80274be:	4153      	adcs	r3, r2
 80274c0:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 80274c4:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80274c8:	3309      	adds	r3, #9
 80274ca:	00da      	lsls	r2, r3, #3
 80274cc:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 80274d0:	4413      	add	r3, r2
 80274d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80274d6:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 80274da:	e9d1 4500 	ldrd	r4, r5, [r1]
 80274de:	4621      	mov	r1, r4
 80274e0:	1889      	adds	r1, r1, r2
 80274e2:	f8c7 1658 	str.w	r1, [r7, #1624]	; 0x658
 80274e6:	4629      	mov	r1, r5
 80274e8:	eb41 0303 	adc.w	r3, r1, r3
 80274ec:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 80274f0:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80274f4:	2b00      	cmp	r3, #0
 80274f6:	f000 80b4 	beq.w	8027662 <_Transform_Sha512+0x2a16>
 80274fa:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80274fe:	3338      	adds	r3, #56	; 0x38
 8027500:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027504:	f04f 0213 	mov.w	r2, #19
 8027508:	f04f 0300 	mov.w	r3, #0
 802750c:	f7fd f922 	bl	8024754 <rotrFixed64>
 8027510:	4604      	mov	r4, r0
 8027512:	460d      	mov	r5, r1
 8027514:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8027518:	3338      	adds	r3, #56	; 0x38
 802751a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802751e:	f04f 023d 	mov.w	r2, #61	; 0x3d
 8027522:	f04f 0300 	mov.w	r3, #0
 8027526:	f7fd f915 	bl	8024754 <rotrFixed64>
 802752a:	4602      	mov	r2, r0
 802752c:	460b      	mov	r3, r1
 802752e:	ea84 0102 	eor.w	r1, r4, r2
 8027532:	f8c7 1650 	str.w	r1, [r7, #1616]	; 0x650
 8027536:	406b      	eors	r3, r5
 8027538:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
 802753c:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8027540:	3338      	adds	r3, #56	; 0x38
 8027542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027546:	f04f 0000 	mov.w	r0, #0
 802754a:	f04f 0100 	mov.w	r1, #0
 802754e:	0990      	lsrs	r0, r2, #6
 8027550:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 8027554:	0999      	lsrs	r1, r3, #6
 8027556:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 802755a:	e9d3 4500 	ldrd	r4, r5, [r3]
 802755e:	4623      	mov	r3, r4
 8027560:	4043      	eors	r3, r0
 8027562:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
 8027566:	462b      	mov	r3, r5
 8027568:	404b      	eors	r3, r1
 802756a:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
 802756e:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8027572:	3310      	adds	r3, #16
 8027574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027578:	f507 61c9 	add.w	r1, r7, #1608	; 0x648
 802757c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8027580:	4621      	mov	r1, r4
 8027582:	1889      	adds	r1, r1, r2
 8027584:	f8c7 1640 	str.w	r1, [r7, #1600]	; 0x640
 8027588:	4629      	mov	r1, r5
 802758a:	eb41 0303 	adc.w	r3, r1, r3
 802758e:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
 8027592:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8027596:	3350      	adds	r3, #80	; 0x50
 8027598:	e9d3 0100 	ldrd	r0, r1, [r3]
 802759c:	f04f 0201 	mov.w	r2, #1
 80275a0:	f04f 0300 	mov.w	r3, #0
 80275a4:	f7fd f8d6 	bl	8024754 <rotrFixed64>
 80275a8:	4604      	mov	r4, r0
 80275aa:	460d      	mov	r5, r1
 80275ac:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80275b0:	3350      	adds	r3, #80	; 0x50
 80275b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80275b6:	f04f 0208 	mov.w	r2, #8
 80275ba:	f04f 0300 	mov.w	r3, #0
 80275be:	f7fd f8c9 	bl	8024754 <rotrFixed64>
 80275c2:	4602      	mov	r2, r0
 80275c4:	460b      	mov	r3, r1
 80275c6:	ea84 0102 	eor.w	r1, r4, r2
 80275ca:	f8c7 1638 	str.w	r1, [r7, #1592]	; 0x638
 80275ce:	406b      	eors	r3, r5
 80275d0:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
 80275d4:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80275d8:	3350      	adds	r3, #80	; 0x50
 80275da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80275de:	f04f 0000 	mov.w	r0, #0
 80275e2:	f04f 0100 	mov.w	r1, #0
 80275e6:	09d0      	lsrs	r0, r2, #7
 80275e8:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 80275ec:	09d9      	lsrs	r1, r3, #7
 80275ee:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 80275f2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80275f6:	4623      	mov	r3, r4
 80275f8:	4043      	eors	r3, r0
 80275fa:	f8c7 3630 	str.w	r3, [r7, #1584]	; 0x630
 80275fe:	462b      	mov	r3, r5
 8027600:	404b      	eors	r3, r1
 8027602:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
 8027606:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 802760a:	e9d3 4500 	ldrd	r4, r5, [r3]
 802760e:	4623      	mov	r3, r4
 8027610:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8027614:	e9d2 0100 	ldrd	r0, r1, [r2]
 8027618:	4602      	mov	r2, r0
 802761a:	189b      	adds	r3, r3, r2
 802761c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8027620:	462b      	mov	r3, r5
 8027622:	460a      	mov	r2, r1
 8027624:	4153      	adcs	r3, r2
 8027626:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 802762a:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 802762e:	3348      	adds	r3, #72	; 0x48
 8027630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027634:	f8d7 1d04 	ldr.w	r1, [r7, #3332]	; 0xd04
 8027638:	3148      	adds	r1, #72	; 0x48
 802763a:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 802763e:	4620      	mov	r0, r4
 8027640:	1880      	adds	r0, r0, r2
 8027642:	f8c7 0628 	str.w	r0, [r7, #1576]	; 0x628
 8027646:	4628      	mov	r0, r5
 8027648:	eb40 0303 	adc.w	r3, r0, r3
 802764c:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 8027650:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8027654:	e9d3 3400 	ldrd	r3, r4, [r3]
 8027658:	e9c1 3400 	strd	r3, r4, [r1]
 802765c:	e9d1 2300 	ldrd	r2, r3, [r1]
 8027660:	e00b      	b.n	802767a <_Transform_Sha512+0x2a2e>
 8027662:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8027666:	f103 0148 	add.w	r1, r3, #72	; 0x48
 802766a:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 802766e:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8027672:	e9c1 2300 	strd	r2, r3, [r1]
 8027676:	e9d1 2300 	ldrd	r2, r3, [r1]
 802767a:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 802767e:	e9d1 4500 	ldrd	r4, r5, [r1]
 8027682:	4621      	mov	r1, r4
 8027684:	1851      	adds	r1, r2, r1
 8027686:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 802768a:	4629      	mov	r1, r5
 802768c:	414b      	adcs	r3, r1
 802768e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8027692:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8027696:	e9d3 2300 	ldrd	r2, r3, [r3]
 802769a:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 802769e:	4621      	mov	r1, r4
 80276a0:	1889      	adds	r1, r1, r2
 80276a2:	f8c7 1620 	str.w	r1, [r7, #1568]	; 0x620
 80276a6:	4629      	mov	r1, r5
 80276a8:	eb41 0303 	adc.w	r3, r1, r3
 80276ac:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
 80276b0:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 80276b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80276b8:	f507 624f 	add.w	r2, r7, #3312	; 0xcf0
 80276bc:	e9c2 3400 	strd	r3, r4, [r2]
 80276c0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80276c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80276c8:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 80276cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80276d0:	1884      	adds	r4, r0, r2
 80276d2:	f8c7 4618 	str.w	r4, [r7, #1560]	; 0x618
 80276d6:	eb41 0303 	adc.w	r3, r1, r3
 80276da:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 80276de:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 80276e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80276e6:	f507 624d 	add.w	r2, r7, #3280	; 0xcd0
 80276ea:	e9c2 3400 	strd	r3, r4, [r2]
 80276ee:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 80276f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80276f6:	f04f 021c 	mov.w	r2, #28
 80276fa:	f04f 0300 	mov.w	r3, #0
 80276fe:	f7fd f829 	bl	8024754 <rotrFixed64>
 8027702:	4604      	mov	r4, r0
 8027704:	460d      	mov	r5, r1
 8027706:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 802770a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802770e:	f04f 0222 	mov.w	r2, #34	; 0x22
 8027712:	f04f 0300 	mov.w	r3, #0
 8027716:	f7fd f81d 	bl	8024754 <rotrFixed64>
 802771a:	4602      	mov	r2, r0
 802771c:	460b      	mov	r3, r1
 802771e:	ea84 0102 	eor.w	r1, r4, r2
 8027722:	f8c7 1610 	str.w	r1, [r7, #1552]	; 0x610
 8027726:	406b      	eors	r3, r5
 8027728:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 802772c:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8027730:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027734:	f04f 0227 	mov.w	r2, #39	; 0x27
 8027738:	f04f 0300 	mov.w	r3, #0
 802773c:	f7fd f80a 	bl	8024754 <rotrFixed64>
 8027740:	4602      	mov	r2, r0
 8027742:	460b      	mov	r3, r1
 8027744:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 8027748:	e9d1 4500 	ldrd	r4, r5, [r1]
 802774c:	4621      	mov	r1, r4
 802774e:	4051      	eors	r1, r2
 8027750:	f8c7 1608 	str.w	r1, [r7, #1544]	; 0x608
 8027754:	4629      	mov	r1, r5
 8027756:	404b      	eors	r3, r1
 8027758:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 802775c:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8027760:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027764:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8027768:	e9d3 2300 	ldrd	r2, r3, [r3]
 802776c:	ea00 0402 	and.w	r4, r0, r2
 8027770:	f8c7 4600 	str.w	r4, [r7, #1536]	; 0x600
 8027774:	400b      	ands	r3, r1
 8027776:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 802777a:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 802777e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8027782:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8027786:	e9d3 0100 	ldrd	r0, r1, [r3]
 802778a:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 802778e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027792:	ea40 0602 	orr.w	r6, r0, r2
 8027796:	f8c7 65f8 	str.w	r6, [r7, #1528]	; 0x5f8
 802779a:	430b      	orrs	r3, r1
 802779c:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 80277a0:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 80277a4:	e9d3 1200 	ldrd	r1, r2, [r3]
 80277a8:	460b      	mov	r3, r1
 80277aa:	4023      	ands	r3, r4
 80277ac:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0
 80277b0:	4613      	mov	r3, r2
 80277b2:	402b      	ands	r3, r5
 80277b4:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 80277b8:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80277bc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80277c0:	4623      	mov	r3, r4
 80277c2:	f507 62be 	add.w	r2, r7, #1520	; 0x5f0
 80277c6:	e9d2 0100 	ldrd	r0, r1, [r2]
 80277ca:	4602      	mov	r2, r0
 80277cc:	4313      	orrs	r3, r2
 80277ce:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
 80277d2:	462b      	mov	r3, r5
 80277d4:	460a      	mov	r2, r1
 80277d6:	4313      	orrs	r3, r2
 80277d8:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
 80277dc:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 80277e0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80277e4:	4623      	mov	r3, r4
 80277e6:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 80277ea:	e9d2 0100 	ldrd	r0, r1, [r2]
 80277ee:	4602      	mov	r2, r0
 80277f0:	189b      	adds	r3, r3, r2
 80277f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80277f6:	462b      	mov	r3, r5
 80277f8:	460a      	mov	r2, r1
 80277fa:	4153      	adcs	r3, r2
 80277fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8027800:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8027804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027808:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 802780c:	4621      	mov	r1, r4
 802780e:	1889      	adds	r1, r1, r2
 8027810:	f8c7 15e0 	str.w	r1, [r7, #1504]	; 0x5e0
 8027814:	4629      	mov	r1, r5
 8027816:	eb41 0303 	adc.w	r3, r1, r3
 802781a:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
 802781e:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8027822:	e9d3 3400 	ldrd	r3, r4, [r3]
 8027826:	f507 624f 	add.w	r2, r7, #3312	; 0xcf0
 802782a:	e9c2 3400 	strd	r3, r4, [r2]
 802782e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8027832:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027836:	f04f 020e 	mov.w	r2, #14
 802783a:	f04f 0300 	mov.w	r3, #0
 802783e:	f7fc ff89 	bl	8024754 <rotrFixed64>
 8027842:	4604      	mov	r4, r0
 8027844:	460d      	mov	r5, r1
 8027846:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 802784a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802784e:	f04f 0212 	mov.w	r2, #18
 8027852:	f04f 0300 	mov.w	r3, #0
 8027856:	f7fc ff7d 	bl	8024754 <rotrFixed64>
 802785a:	4602      	mov	r2, r0
 802785c:	460b      	mov	r3, r1
 802785e:	ea84 0102 	eor.w	r1, r4, r2
 8027862:	f8c7 15d8 	str.w	r1, [r7, #1496]	; 0x5d8
 8027866:	406b      	eors	r3, r5
 8027868:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
 802786c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8027870:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027874:	f04f 0229 	mov.w	r2, #41	; 0x29
 8027878:	f04f 0300 	mov.w	r3, #0
 802787c:	f7fc ff6a 	bl	8024754 <rotrFixed64>
 8027880:	4602      	mov	r2, r0
 8027882:	460b      	mov	r3, r1
 8027884:	f507 61bb 	add.w	r1, r7, #1496	; 0x5d8
 8027888:	e9d1 4500 	ldrd	r4, r5, [r1]
 802788c:	4621      	mov	r1, r4
 802788e:	4051      	eors	r1, r2
 8027890:	f8c7 15d0 	str.w	r1, [r7, #1488]	; 0x5d0
 8027894:	4629      	mov	r1, r5
 8027896:	404b      	eors	r3, r1
 8027898:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 802789c:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 80278a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80278a4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80278a8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80278ac:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 80278b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80278b4:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 80278b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80278bc:	ea80 0602 	eor.w	r6, r0, r2
 80278c0:	f8c7 65c8 	str.w	r6, [r7, #1480]	; 0x5c8
 80278c4:	404b      	eors	r3, r1
 80278c6:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 80278ca:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 80278ce:	e9d3 1200 	ldrd	r1, r2, [r3]
 80278d2:	460b      	mov	r3, r1
 80278d4:	4023      	ands	r3, r4
 80278d6:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
 80278da:	4613      	mov	r3, r2
 80278dc:	402b      	ands	r3, r5
 80278de:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 80278e2:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 80278e6:	e9d3 1200 	ldrd	r1, r2, [r3]
 80278ea:	460b      	mov	r3, r1
 80278ec:	ea88 0303 	eor.w	r3, r8, r3
 80278f0:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 80278f4:	4613      	mov	r3, r2
 80278f6:	ea89 0303 	eor.w	r3, r9, r3
 80278fa:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 80278fe:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8027902:	e9d3 4500 	ldrd	r4, r5, [r3]
 8027906:	4623      	mov	r3, r4
 8027908:	f507 62b7 	add.w	r2, r7, #1464	; 0x5b8
 802790c:	e9d2 0100 	ldrd	r0, r1, [r2]
 8027910:	4602      	mov	r2, r0
 8027912:	189b      	adds	r3, r3, r2
 8027914:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 8027918:	462b      	mov	r3, r5
 802791a:	460a      	mov	r2, r1
 802791c:	4153      	adcs	r3, r2
 802791e:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8027922:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8027926:	330a      	adds	r3, #10
 8027928:	00da      	lsls	r2, r3, #3
 802792a:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 802792e:	4413      	add	r3, r2
 8027930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027934:	f507 61b6 	add.w	r1, r7, #1456	; 0x5b0
 8027938:	e9d1 4500 	ldrd	r4, r5, [r1]
 802793c:	4621      	mov	r1, r4
 802793e:	1889      	adds	r1, r1, r2
 8027940:	f8c7 15a8 	str.w	r1, [r7, #1448]	; 0x5a8
 8027944:	4629      	mov	r1, r5
 8027946:	eb41 0303 	adc.w	r3, r1, r3
 802794a:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 802794e:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8027952:	2b00      	cmp	r3, #0
 8027954:	f000 80b4 	beq.w	8027ac0 <_Transform_Sha512+0x2e74>
 8027958:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 802795c:	3340      	adds	r3, #64	; 0x40
 802795e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027962:	f04f 0213 	mov.w	r2, #19
 8027966:	f04f 0300 	mov.w	r3, #0
 802796a:	f7fc fef3 	bl	8024754 <rotrFixed64>
 802796e:	4604      	mov	r4, r0
 8027970:	460d      	mov	r5, r1
 8027972:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8027976:	3340      	adds	r3, #64	; 0x40
 8027978:	e9d3 0100 	ldrd	r0, r1, [r3]
 802797c:	f04f 023d 	mov.w	r2, #61	; 0x3d
 8027980:	f04f 0300 	mov.w	r3, #0
 8027984:	f7fc fee6 	bl	8024754 <rotrFixed64>
 8027988:	4602      	mov	r2, r0
 802798a:	460b      	mov	r3, r1
 802798c:	ea84 0102 	eor.w	r1, r4, r2
 8027990:	f8c7 15a0 	str.w	r1, [r7, #1440]	; 0x5a0
 8027994:	406b      	eors	r3, r5
 8027996:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 802799a:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 802799e:	3340      	adds	r3, #64	; 0x40
 80279a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80279a4:	f04f 0000 	mov.w	r0, #0
 80279a8:	f04f 0100 	mov.w	r1, #0
 80279ac:	0990      	lsrs	r0, r2, #6
 80279ae:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 80279b2:	0999      	lsrs	r1, r3, #6
 80279b4:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 80279b8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80279bc:	4623      	mov	r3, r4
 80279be:	4043      	eors	r3, r0
 80279c0:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
 80279c4:	462b      	mov	r3, r5
 80279c6:	404b      	eors	r3, r1
 80279c8:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 80279cc:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80279d0:	3318      	adds	r3, #24
 80279d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80279d6:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 80279da:	e9d1 4500 	ldrd	r4, r5, [r1]
 80279de:	4621      	mov	r1, r4
 80279e0:	1889      	adds	r1, r1, r2
 80279e2:	f8c7 1590 	str.w	r1, [r7, #1424]	; 0x590
 80279e6:	4629      	mov	r1, r5
 80279e8:	eb41 0303 	adc.w	r3, r1, r3
 80279ec:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 80279f0:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80279f4:	3358      	adds	r3, #88	; 0x58
 80279f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80279fa:	f04f 0201 	mov.w	r2, #1
 80279fe:	f04f 0300 	mov.w	r3, #0
 8027a02:	f7fc fea7 	bl	8024754 <rotrFixed64>
 8027a06:	4604      	mov	r4, r0
 8027a08:	460d      	mov	r5, r1
 8027a0a:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8027a0e:	3358      	adds	r3, #88	; 0x58
 8027a10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027a14:	f04f 0208 	mov.w	r2, #8
 8027a18:	f04f 0300 	mov.w	r3, #0
 8027a1c:	f7fc fe9a 	bl	8024754 <rotrFixed64>
 8027a20:	4602      	mov	r2, r0
 8027a22:	460b      	mov	r3, r1
 8027a24:	ea84 0102 	eor.w	r1, r4, r2
 8027a28:	f8c7 1588 	str.w	r1, [r7, #1416]	; 0x588
 8027a2c:	406b      	eors	r3, r5
 8027a2e:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 8027a32:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8027a36:	3358      	adds	r3, #88	; 0x58
 8027a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027a3c:	f04f 0000 	mov.w	r0, #0
 8027a40:	f04f 0100 	mov.w	r1, #0
 8027a44:	09d0      	lsrs	r0, r2, #7
 8027a46:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8027a4a:	09d9      	lsrs	r1, r3, #7
 8027a4c:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 8027a50:	e9d3 4500 	ldrd	r4, r5, [r3]
 8027a54:	4623      	mov	r3, r4
 8027a56:	4043      	eors	r3, r0
 8027a58:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
 8027a5c:	462b      	mov	r3, r5
 8027a5e:	404b      	eors	r3, r1
 8027a60:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8027a64:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8027a68:	e9d3 4500 	ldrd	r4, r5, [r3]
 8027a6c:	4623      	mov	r3, r4
 8027a6e:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8027a72:	e9d2 0100 	ldrd	r0, r1, [r2]
 8027a76:	4602      	mov	r2, r0
 8027a78:	189b      	adds	r3, r3, r2
 8027a7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8027a7e:	462b      	mov	r3, r5
 8027a80:	460a      	mov	r2, r1
 8027a82:	4153      	adcs	r3, r2
 8027a84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8027a88:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8027a8c:	3350      	adds	r3, #80	; 0x50
 8027a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027a92:	f8d7 1d04 	ldr.w	r1, [r7, #3332]	; 0xd04
 8027a96:	3150      	adds	r1, #80	; 0x50
 8027a98:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8027a9c:	4620      	mov	r0, r4
 8027a9e:	1880      	adds	r0, r0, r2
 8027aa0:	f8c7 0578 	str.w	r0, [r7, #1400]	; 0x578
 8027aa4:	4628      	mov	r0, r5
 8027aa6:	eb40 0303 	adc.w	r3, r0, r3
 8027aaa:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8027aae:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 8027ab2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8027ab6:	e9c1 3400 	strd	r3, r4, [r1]
 8027aba:	e9d1 2300 	ldrd	r2, r3, [r1]
 8027abe:	e00b      	b.n	8027ad8 <_Transform_Sha512+0x2e8c>
 8027ac0:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8027ac4:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8027ac8:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 8027acc:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8027ad0:	e9c1 2300 	strd	r2, r3, [r1]
 8027ad4:	e9d1 2300 	ldrd	r2, r3, [r1]
 8027ad8:	f507 61b5 	add.w	r1, r7, #1448	; 0x5a8
 8027adc:	e9d1 4500 	ldrd	r4, r5, [r1]
 8027ae0:	4621      	mov	r1, r4
 8027ae2:	1851      	adds	r1, r2, r1
 8027ae4:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8027ae8:	4629      	mov	r1, r5
 8027aea:	414b      	adcs	r3, r1
 8027aec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8027af0:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8027af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027af8:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8027afc:	4621      	mov	r1, r4
 8027afe:	1889      	adds	r1, r1, r2
 8027b00:	f8c7 1570 	str.w	r1, [r7, #1392]	; 0x570
 8027b04:	4629      	mov	r1, r5
 8027b06:	eb41 0303 	adc.w	r3, r1, r3
 8027b0a:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 8027b0e:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8027b12:	e9d3 3400 	ldrd	r3, r4, [r3]
 8027b16:	f607 42e8 	addw	r2, r7, #3304	; 0xce8
 8027b1a:	e9c2 3400 	strd	r3, r4, [r2]
 8027b1e:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8027b22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027b26:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8027b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027b2e:	1884      	adds	r4, r0, r2
 8027b30:	f8c7 4568 	str.w	r4, [r7, #1384]	; 0x568
 8027b34:	eb41 0303 	adc.w	r3, r1, r3
 8027b38:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8027b3c:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8027b40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8027b44:	f607 42c8 	addw	r2, r7, #3272	; 0xcc8
 8027b48:	e9c2 3400 	strd	r3, r4, [r2]
 8027b4c:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8027b50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027b54:	f04f 021c 	mov.w	r2, #28
 8027b58:	f04f 0300 	mov.w	r3, #0
 8027b5c:	f7fc fdfa 	bl	8024754 <rotrFixed64>
 8027b60:	4604      	mov	r4, r0
 8027b62:	460d      	mov	r5, r1
 8027b64:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8027b68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027b6c:	f04f 0222 	mov.w	r2, #34	; 0x22
 8027b70:	f04f 0300 	mov.w	r3, #0
 8027b74:	f7fc fdee 	bl	8024754 <rotrFixed64>
 8027b78:	4602      	mov	r2, r0
 8027b7a:	460b      	mov	r3, r1
 8027b7c:	ea84 0102 	eor.w	r1, r4, r2
 8027b80:	f8c7 1560 	str.w	r1, [r7, #1376]	; 0x560
 8027b84:	406b      	eors	r3, r5
 8027b86:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 8027b8a:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8027b8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027b92:	f04f 0227 	mov.w	r2, #39	; 0x27
 8027b96:	f04f 0300 	mov.w	r3, #0
 8027b9a:	f7fc fddb 	bl	8024754 <rotrFixed64>
 8027b9e:	4602      	mov	r2, r0
 8027ba0:	460b      	mov	r3, r1
 8027ba2:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 8027ba6:	e9d1 4500 	ldrd	r4, r5, [r1]
 8027baa:	4621      	mov	r1, r4
 8027bac:	4051      	eors	r1, r2
 8027bae:	f8c7 1558 	str.w	r1, [r7, #1368]	; 0x558
 8027bb2:	4629      	mov	r1, r5
 8027bb4:	404b      	eors	r3, r1
 8027bb6:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 8027bba:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8027bbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027bc2:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8027bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027bca:	ea00 0402 	and.w	r4, r0, r2
 8027bce:	f8c7 4550 	str.w	r4, [r7, #1360]	; 0x550
 8027bd2:	400b      	ands	r3, r1
 8027bd4:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 8027bd8:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8027bdc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8027be0:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8027be4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027be8:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8027bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027bf0:	ea40 0602 	orr.w	r6, r0, r2
 8027bf4:	f8c7 6548 	str.w	r6, [r7, #1352]	; 0x548
 8027bf8:	430b      	orrs	r3, r1
 8027bfa:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 8027bfe:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 8027c02:	e9d3 1200 	ldrd	r1, r2, [r3]
 8027c06:	460b      	mov	r3, r1
 8027c08:	4023      	ands	r3, r4
 8027c0a:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
 8027c0e:	4613      	mov	r3, r2
 8027c10:	402b      	ands	r3, r5
 8027c12:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 8027c16:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8027c1a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8027c1e:	4623      	mov	r3, r4
 8027c20:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 8027c24:	e9d2 0100 	ldrd	r0, r1, [r2]
 8027c28:	4602      	mov	r2, r0
 8027c2a:	4313      	orrs	r3, r2
 8027c2c:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
 8027c30:	462b      	mov	r3, r5
 8027c32:	460a      	mov	r2, r1
 8027c34:	4313      	orrs	r3, r2
 8027c36:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 8027c3a:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 8027c3e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8027c42:	4623      	mov	r3, r4
 8027c44:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8027c48:	e9d2 0100 	ldrd	r0, r1, [r2]
 8027c4c:	4602      	mov	r2, r0
 8027c4e:	189b      	adds	r3, r3, r2
 8027c50:	67bb      	str	r3, [r7, #120]	; 0x78
 8027c52:	462b      	mov	r3, r5
 8027c54:	460a      	mov	r2, r1
 8027c56:	4153      	adcs	r3, r2
 8027c58:	67fb      	str	r3, [r7, #124]	; 0x7c
 8027c5a:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8027c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027c62:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8027c66:	4621      	mov	r1, r4
 8027c68:	1889      	adds	r1, r1, r2
 8027c6a:	f8c7 1530 	str.w	r1, [r7, #1328]	; 0x530
 8027c6e:	4629      	mov	r1, r5
 8027c70:	eb41 0303 	adc.w	r3, r1, r3
 8027c74:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 8027c78:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8027c7c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8027c80:	f607 42e8 	addw	r2, r7, #3304	; 0xce8
 8027c84:	e9c2 3400 	strd	r3, r4, [r2]
 8027c88:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8027c8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027c90:	f04f 020e 	mov.w	r2, #14
 8027c94:	f04f 0300 	mov.w	r3, #0
 8027c98:	f7fc fd5c 	bl	8024754 <rotrFixed64>
 8027c9c:	4604      	mov	r4, r0
 8027c9e:	460d      	mov	r5, r1
 8027ca0:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8027ca4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027ca8:	f04f 0212 	mov.w	r2, #18
 8027cac:	f04f 0300 	mov.w	r3, #0
 8027cb0:	f7fc fd50 	bl	8024754 <rotrFixed64>
 8027cb4:	4602      	mov	r2, r0
 8027cb6:	460b      	mov	r3, r1
 8027cb8:	ea84 0102 	eor.w	r1, r4, r2
 8027cbc:	f8c7 1528 	str.w	r1, [r7, #1320]	; 0x528
 8027cc0:	406b      	eors	r3, r5
 8027cc2:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8027cc6:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8027cca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027cce:	f04f 0229 	mov.w	r2, #41	; 0x29
 8027cd2:	f04f 0300 	mov.w	r3, #0
 8027cd6:	f7fc fd3d 	bl	8024754 <rotrFixed64>
 8027cda:	4602      	mov	r2, r0
 8027cdc:	460b      	mov	r3, r1
 8027cde:	f507 61a5 	add.w	r1, r7, #1320	; 0x528
 8027ce2:	e9d1 4500 	ldrd	r4, r5, [r1]
 8027ce6:	4621      	mov	r1, r4
 8027ce8:	4051      	eors	r1, r2
 8027cea:	f8c7 1520 	str.w	r1, [r7, #1312]	; 0x520
 8027cee:	4629      	mov	r1, r5
 8027cf0:	404b      	eors	r3, r1
 8027cf2:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 8027cf6:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 8027cfa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8027cfe:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8027d02:	e9d3 4500 	ldrd	r4, r5, [r3]
 8027d06:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8027d0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027d0e:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 8027d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027d16:	ea80 0602 	eor.w	r6, r0, r2
 8027d1a:	f8c7 6518 	str.w	r6, [r7, #1304]	; 0x518
 8027d1e:	404b      	eors	r3, r1
 8027d20:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 8027d24:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8027d28:	e9d3 1200 	ldrd	r1, r2, [r3]
 8027d2c:	460b      	mov	r3, r1
 8027d2e:	4023      	ands	r3, r4
 8027d30:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 8027d34:	4613      	mov	r3, r2
 8027d36:	402b      	ands	r3, r5
 8027d38:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 8027d3c:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8027d40:	e9d3 1200 	ldrd	r1, r2, [r3]
 8027d44:	460b      	mov	r3, r1
 8027d46:	ea88 0303 	eor.w	r3, r8, r3
 8027d4a:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
 8027d4e:	4613      	mov	r3, r2
 8027d50:	ea89 0303 	eor.w	r3, r9, r3
 8027d54:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8027d58:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8027d5c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8027d60:	4623      	mov	r3, r4
 8027d62:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
 8027d66:	e9d2 0100 	ldrd	r0, r1, [r2]
 8027d6a:	4602      	mov	r2, r0
 8027d6c:	189b      	adds	r3, r3, r2
 8027d6e:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8027d72:	462b      	mov	r3, r5
 8027d74:	460a      	mov	r2, r1
 8027d76:	4153      	adcs	r3, r2
 8027d78:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 8027d7c:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8027d80:	330b      	adds	r3, #11
 8027d82:	00da      	lsls	r2, r3, #3
 8027d84:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 8027d88:	4413      	add	r3, r2
 8027d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027d8e:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 8027d92:	e9d1 4500 	ldrd	r4, r5, [r1]
 8027d96:	4621      	mov	r1, r4
 8027d98:	1889      	adds	r1, r1, r2
 8027d9a:	f8c7 14f8 	str.w	r1, [r7, #1272]	; 0x4f8
 8027d9e:	4629      	mov	r1, r5
 8027da0:	eb41 0303 	adc.w	r3, r1, r3
 8027da4:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8027da8:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8027dac:	2b00      	cmp	r3, #0
 8027dae:	f000 80b2 	beq.w	8027f16 <_Transform_Sha512+0x32ca>
 8027db2:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8027db6:	3348      	adds	r3, #72	; 0x48
 8027db8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027dbc:	f04f 0213 	mov.w	r2, #19
 8027dc0:	f04f 0300 	mov.w	r3, #0
 8027dc4:	f7fc fcc6 	bl	8024754 <rotrFixed64>
 8027dc8:	4604      	mov	r4, r0
 8027dca:	460d      	mov	r5, r1
 8027dcc:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8027dd0:	3348      	adds	r3, #72	; 0x48
 8027dd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027dd6:	f04f 023d 	mov.w	r2, #61	; 0x3d
 8027dda:	f04f 0300 	mov.w	r3, #0
 8027dde:	f7fc fcb9 	bl	8024754 <rotrFixed64>
 8027de2:	4602      	mov	r2, r0
 8027de4:	460b      	mov	r3, r1
 8027de6:	ea84 0102 	eor.w	r1, r4, r2
 8027dea:	f8c7 14f0 	str.w	r1, [r7, #1264]	; 0x4f0
 8027dee:	406b      	eors	r3, r5
 8027df0:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8027df4:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8027df8:	3348      	adds	r3, #72	; 0x48
 8027dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027dfe:	f04f 0000 	mov.w	r0, #0
 8027e02:	f04f 0100 	mov.w	r1, #0
 8027e06:	0990      	lsrs	r0, r2, #6
 8027e08:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 8027e0c:	0999      	lsrs	r1, r3, #6
 8027e0e:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8027e12:	e9d3 4500 	ldrd	r4, r5, [r3]
 8027e16:	4623      	mov	r3, r4
 8027e18:	4043      	eors	r3, r0
 8027e1a:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 8027e1e:	462b      	mov	r3, r5
 8027e20:	404b      	eors	r3, r1
 8027e22:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 8027e26:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8027e2a:	3320      	adds	r3, #32
 8027e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027e30:	f507 619d 	add.w	r1, r7, #1256	; 0x4e8
 8027e34:	e9d1 4500 	ldrd	r4, r5, [r1]
 8027e38:	4621      	mov	r1, r4
 8027e3a:	1889      	adds	r1, r1, r2
 8027e3c:	f8c7 14e0 	str.w	r1, [r7, #1248]	; 0x4e0
 8027e40:	4629      	mov	r1, r5
 8027e42:	eb41 0303 	adc.w	r3, r1, r3
 8027e46:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 8027e4a:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8027e4e:	3360      	adds	r3, #96	; 0x60
 8027e50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027e54:	f04f 0201 	mov.w	r2, #1
 8027e58:	f04f 0300 	mov.w	r3, #0
 8027e5c:	f7fc fc7a 	bl	8024754 <rotrFixed64>
 8027e60:	4604      	mov	r4, r0
 8027e62:	460d      	mov	r5, r1
 8027e64:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8027e68:	3360      	adds	r3, #96	; 0x60
 8027e6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027e6e:	f04f 0208 	mov.w	r2, #8
 8027e72:	f04f 0300 	mov.w	r3, #0
 8027e76:	f7fc fc6d 	bl	8024754 <rotrFixed64>
 8027e7a:	4602      	mov	r2, r0
 8027e7c:	460b      	mov	r3, r1
 8027e7e:	ea84 0102 	eor.w	r1, r4, r2
 8027e82:	f8c7 14d8 	str.w	r1, [r7, #1240]	; 0x4d8
 8027e86:	406b      	eors	r3, r5
 8027e88:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
 8027e8c:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8027e90:	3360      	adds	r3, #96	; 0x60
 8027e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027e96:	f04f 0000 	mov.w	r0, #0
 8027e9a:	f04f 0100 	mov.w	r1, #0
 8027e9e:	09d0      	lsrs	r0, r2, #7
 8027ea0:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8027ea4:	09d9      	lsrs	r1, r3, #7
 8027ea6:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8027eaa:	e9d3 4500 	ldrd	r4, r5, [r3]
 8027eae:	4623      	mov	r3, r4
 8027eb0:	4043      	eors	r3, r0
 8027eb2:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
 8027eb6:	462b      	mov	r3, r5
 8027eb8:	404b      	eors	r3, r1
 8027eba:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 8027ebe:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8027ec2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8027ec6:	4623      	mov	r3, r4
 8027ec8:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 8027ecc:	e9d2 0100 	ldrd	r0, r1, [r2]
 8027ed0:	4602      	mov	r2, r0
 8027ed2:	189b      	adds	r3, r3, r2
 8027ed4:	673b      	str	r3, [r7, #112]	; 0x70
 8027ed6:	462b      	mov	r3, r5
 8027ed8:	460a      	mov	r2, r1
 8027eda:	4153      	adcs	r3, r2
 8027edc:	677b      	str	r3, [r7, #116]	; 0x74
 8027ede:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8027ee2:	3358      	adds	r3, #88	; 0x58
 8027ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027ee8:	f8d7 1d04 	ldr.w	r1, [r7, #3332]	; 0xd04
 8027eec:	3158      	adds	r1, #88	; 0x58
 8027eee:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8027ef2:	4620      	mov	r0, r4
 8027ef4:	1880      	adds	r0, r0, r2
 8027ef6:	f8c7 04c8 	str.w	r0, [r7, #1224]	; 0x4c8
 8027efa:	4628      	mov	r0, r5
 8027efc:	eb40 0303 	adc.w	r3, r0, r3
 8027f00:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 8027f04:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8027f08:	e9d3 3400 	ldrd	r3, r4, [r3]
 8027f0c:	e9c1 3400 	strd	r3, r4, [r1]
 8027f10:	e9d1 2300 	ldrd	r2, r3, [r1]
 8027f14:	e00b      	b.n	8027f2e <_Transform_Sha512+0x32e2>
 8027f16:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8027f1a:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8027f1e:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 8027f22:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8027f26:	e9c1 2300 	strd	r2, r3, [r1]
 8027f2a:	e9d1 2300 	ldrd	r2, r3, [r1]
 8027f2e:	f507 619f 	add.w	r1, r7, #1272	; 0x4f8
 8027f32:	e9d1 4500 	ldrd	r4, r5, [r1]
 8027f36:	4621      	mov	r1, r4
 8027f38:	1851      	adds	r1, r2, r1
 8027f3a:	66b9      	str	r1, [r7, #104]	; 0x68
 8027f3c:	4629      	mov	r1, r5
 8027f3e:	414b      	adcs	r3, r1
 8027f40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8027f42:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 8027f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027f4a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8027f4e:	4621      	mov	r1, r4
 8027f50:	1889      	adds	r1, r1, r2
 8027f52:	f8c7 14c0 	str.w	r1, [r7, #1216]	; 0x4c0
 8027f56:	4629      	mov	r1, r5
 8027f58:	eb41 0303 	adc.w	r3, r1, r3
 8027f5c:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 8027f60:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8027f64:	e9d3 3400 	ldrd	r3, r4, [r3]
 8027f68:	f507 624e 	add.w	r2, r7, #3296	; 0xce0
 8027f6c:	e9c2 3400 	strd	r3, r4, [r2]
 8027f70:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8027f74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027f78:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 8027f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027f80:	1884      	adds	r4, r0, r2
 8027f82:	f8c7 44b8 	str.w	r4, [r7, #1208]	; 0x4b8
 8027f86:	eb41 0303 	adc.w	r3, r1, r3
 8027f8a:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 8027f8e:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8027f92:	e9d3 3400 	ldrd	r3, r4, [r3]
 8027f96:	f507 624c 	add.w	r2, r7, #3264	; 0xcc0
 8027f9a:	e9c2 3400 	strd	r3, r4, [r2]
 8027f9e:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8027fa2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027fa6:	f04f 021c 	mov.w	r2, #28
 8027faa:	f04f 0300 	mov.w	r3, #0
 8027fae:	f7fc fbd1 	bl	8024754 <rotrFixed64>
 8027fb2:	4604      	mov	r4, r0
 8027fb4:	460d      	mov	r5, r1
 8027fb6:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8027fba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027fbe:	f04f 0222 	mov.w	r2, #34	; 0x22
 8027fc2:	f04f 0300 	mov.w	r3, #0
 8027fc6:	f7fc fbc5 	bl	8024754 <rotrFixed64>
 8027fca:	4602      	mov	r2, r0
 8027fcc:	460b      	mov	r3, r1
 8027fce:	ea84 0102 	eor.w	r1, r4, r2
 8027fd2:	f8c7 14b0 	str.w	r1, [r7, #1200]	; 0x4b0
 8027fd6:	406b      	eors	r3, r5
 8027fd8:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
 8027fdc:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8027fe0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027fe4:	f04f 0227 	mov.w	r2, #39	; 0x27
 8027fe8:	f04f 0300 	mov.w	r3, #0
 8027fec:	f7fc fbb2 	bl	8024754 <rotrFixed64>
 8027ff0:	4602      	mov	r2, r0
 8027ff2:	460b      	mov	r3, r1
 8027ff4:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 8027ff8:	e9d1 4500 	ldrd	r4, r5, [r1]
 8027ffc:	4621      	mov	r1, r4
 8027ffe:	4051      	eors	r1, r2
 8028000:	f8c7 14a8 	str.w	r1, [r7, #1192]	; 0x4a8
 8028004:	4629      	mov	r1, r5
 8028006:	404b      	eors	r3, r1
 8028008:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 802800c:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8028010:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028014:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8028018:	e9d3 2300 	ldrd	r2, r3, [r3]
 802801c:	ea00 0402 	and.w	r4, r0, r2
 8028020:	f8c7 44a0 	str.w	r4, [r7, #1184]	; 0x4a0
 8028024:	400b      	ands	r3, r1
 8028026:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 802802a:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 802802e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8028032:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8028036:	e9d3 0100 	ldrd	r0, r1, [r3]
 802803a:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 802803e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028042:	ea40 0602 	orr.w	r6, r0, r2
 8028046:	f8c7 6498 	str.w	r6, [r7, #1176]	; 0x498
 802804a:	430b      	orrs	r3, r1
 802804c:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 8028050:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8028054:	e9d3 1200 	ldrd	r1, r2, [r3]
 8028058:	460b      	mov	r3, r1
 802805a:	4023      	ands	r3, r4
 802805c:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 8028060:	4613      	mov	r3, r2
 8028062:	402b      	ands	r3, r5
 8028064:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 8028068:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 802806c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8028070:	4623      	mov	r3, r4
 8028072:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 8028076:	e9d2 0100 	ldrd	r0, r1, [r2]
 802807a:	4602      	mov	r2, r0
 802807c:	4313      	orrs	r3, r2
 802807e:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 8028082:	462b      	mov	r3, r5
 8028084:	460a      	mov	r2, r1
 8028086:	4313      	orrs	r3, r2
 8028088:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
 802808c:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8028090:	e9d3 4500 	ldrd	r4, r5, [r3]
 8028094:	4623      	mov	r3, r4
 8028096:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 802809a:	e9d2 0100 	ldrd	r0, r1, [r2]
 802809e:	4602      	mov	r2, r0
 80280a0:	189b      	adds	r3, r3, r2
 80280a2:	663b      	str	r3, [r7, #96]	; 0x60
 80280a4:	462b      	mov	r3, r5
 80280a6:	460a      	mov	r2, r1
 80280a8:	4153      	adcs	r3, r2
 80280aa:	667b      	str	r3, [r7, #100]	; 0x64
 80280ac:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 80280b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80280b4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80280b8:	4621      	mov	r1, r4
 80280ba:	1889      	adds	r1, r1, r2
 80280bc:	f8c7 1480 	str.w	r1, [r7, #1152]	; 0x480
 80280c0:	4629      	mov	r1, r5
 80280c2:	eb41 0303 	adc.w	r3, r1, r3
 80280c6:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 80280ca:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80280ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80280d2:	f507 624e 	add.w	r2, r7, #3296	; 0xce0
 80280d6:	e9c2 3400 	strd	r3, r4, [r2]
        R(12); R(13); R(14); R(15);
 80280da:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 80280de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80280e2:	f04f 020e 	mov.w	r2, #14
 80280e6:	f04f 0300 	mov.w	r3, #0
 80280ea:	f7fc fb33 	bl	8024754 <rotrFixed64>
 80280ee:	4604      	mov	r4, r0
 80280f0:	460d      	mov	r5, r1
 80280f2:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 80280f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80280fa:	f04f 0212 	mov.w	r2, #18
 80280fe:	f04f 0300 	mov.w	r3, #0
 8028102:	f7fc fb27 	bl	8024754 <rotrFixed64>
 8028106:	4602      	mov	r2, r0
 8028108:	460b      	mov	r3, r1
 802810a:	ea84 0102 	eor.w	r1, r4, r2
 802810e:	f8c7 1478 	str.w	r1, [r7, #1144]	; 0x478
 8028112:	406b      	eors	r3, r5
 8028114:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 8028118:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 802811c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028120:	f04f 0229 	mov.w	r2, #41	; 0x29
 8028124:	f04f 0300 	mov.w	r3, #0
 8028128:	f7fc fb14 	bl	8024754 <rotrFixed64>
 802812c:	4602      	mov	r2, r0
 802812e:	460b      	mov	r3, r1
 8028130:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 8028134:	e9d1 4500 	ldrd	r4, r5, [r1]
 8028138:	4621      	mov	r1, r4
 802813a:	4051      	eors	r1, r2
 802813c:	f8c7 1470 	str.w	r1, [r7, #1136]	; 0x470
 8028140:	4629      	mov	r1, r5
 8028142:	404b      	eors	r3, r1
 8028144:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 8028148:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 802814c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8028150:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8028154:	e9d3 4500 	ldrd	r4, r5, [r3]
 8028158:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 802815c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028160:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8028164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028168:	ea80 0602 	eor.w	r6, r0, r2
 802816c:	f8c7 6468 	str.w	r6, [r7, #1128]	; 0x468
 8028170:	404b      	eors	r3, r1
 8028172:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 8028176:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 802817a:	e9d3 1200 	ldrd	r1, r2, [r3]
 802817e:	460b      	mov	r3, r1
 8028180:	4023      	ands	r3, r4
 8028182:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8028186:	4613      	mov	r3, r2
 8028188:	402b      	ands	r3, r5
 802818a:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 802818e:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8028192:	e9d3 1200 	ldrd	r1, r2, [r3]
 8028196:	460b      	mov	r3, r1
 8028198:	ea88 0303 	eor.w	r3, r8, r3
 802819c:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 80281a0:	4613      	mov	r3, r2
 80281a2:	ea89 0303 	eor.w	r3, r9, r3
 80281a6:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 80281aa:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80281ae:	e9d3 4500 	ldrd	r4, r5, [r3]
 80281b2:	4623      	mov	r3, r4
 80281b4:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 80281b8:	e9d2 0100 	ldrd	r0, r1, [r2]
 80281bc:	4602      	mov	r2, r0
 80281be:	189b      	adds	r3, r3, r2
 80281c0:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 80281c4:	462b      	mov	r3, r5
 80281c6:	460a      	mov	r2, r1
 80281c8:	4153      	adcs	r3, r2
 80281ca:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 80281ce:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80281d2:	330c      	adds	r3, #12
 80281d4:	00da      	lsls	r2, r3, #3
 80281d6:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 80281da:	4413      	add	r3, r2
 80281dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80281e0:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 80281e4:	e9d1 4500 	ldrd	r4, r5, [r1]
 80281e8:	4621      	mov	r1, r4
 80281ea:	1889      	adds	r1, r1, r2
 80281ec:	f8c7 1448 	str.w	r1, [r7, #1096]	; 0x448
 80281f0:	4629      	mov	r1, r5
 80281f2:	eb41 0303 	adc.w	r3, r1, r3
 80281f6:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 80281fa:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80281fe:	2b00      	cmp	r3, #0
 8028200:	f000 80b2 	beq.w	8028368 <_Transform_Sha512+0x371c>
 8028204:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8028208:	3350      	adds	r3, #80	; 0x50
 802820a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802820e:	f04f 0213 	mov.w	r2, #19
 8028212:	f04f 0300 	mov.w	r3, #0
 8028216:	f7fc fa9d 	bl	8024754 <rotrFixed64>
 802821a:	4604      	mov	r4, r0
 802821c:	460d      	mov	r5, r1
 802821e:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8028222:	3350      	adds	r3, #80	; 0x50
 8028224:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028228:	f04f 023d 	mov.w	r2, #61	; 0x3d
 802822c:	f04f 0300 	mov.w	r3, #0
 8028230:	f7fc fa90 	bl	8024754 <rotrFixed64>
 8028234:	4602      	mov	r2, r0
 8028236:	460b      	mov	r3, r1
 8028238:	ea84 0102 	eor.w	r1, r4, r2
 802823c:	f8c7 1440 	str.w	r1, [r7, #1088]	; 0x440
 8028240:	406b      	eors	r3, r5
 8028242:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 8028246:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 802824a:	3350      	adds	r3, #80	; 0x50
 802824c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028250:	f04f 0000 	mov.w	r0, #0
 8028254:	f04f 0100 	mov.w	r1, #0
 8028258:	0990      	lsrs	r0, r2, #6
 802825a:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 802825e:	0999      	lsrs	r1, r3, #6
 8028260:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8028264:	e9d3 4500 	ldrd	r4, r5, [r3]
 8028268:	4623      	mov	r3, r4
 802826a:	4043      	eors	r3, r0
 802826c:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 8028270:	462b      	mov	r3, r5
 8028272:	404b      	eors	r3, r1
 8028274:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 8028278:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 802827c:	3328      	adds	r3, #40	; 0x28
 802827e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028282:	f507 6187 	add.w	r1, r7, #1080	; 0x438
 8028286:	e9d1 4500 	ldrd	r4, r5, [r1]
 802828a:	4621      	mov	r1, r4
 802828c:	1889      	adds	r1, r1, r2
 802828e:	f8c7 1430 	str.w	r1, [r7, #1072]	; 0x430
 8028292:	4629      	mov	r1, r5
 8028294:	eb41 0303 	adc.w	r3, r1, r3
 8028298:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 802829c:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80282a0:	3368      	adds	r3, #104	; 0x68
 80282a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80282a6:	f04f 0201 	mov.w	r2, #1
 80282aa:	f04f 0300 	mov.w	r3, #0
 80282ae:	f7fc fa51 	bl	8024754 <rotrFixed64>
 80282b2:	4604      	mov	r4, r0
 80282b4:	460d      	mov	r5, r1
 80282b6:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80282ba:	3368      	adds	r3, #104	; 0x68
 80282bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80282c0:	f04f 0208 	mov.w	r2, #8
 80282c4:	f04f 0300 	mov.w	r3, #0
 80282c8:	f7fc fa44 	bl	8024754 <rotrFixed64>
 80282cc:	4602      	mov	r2, r0
 80282ce:	460b      	mov	r3, r1
 80282d0:	ea84 0102 	eor.w	r1, r4, r2
 80282d4:	f8c7 1428 	str.w	r1, [r7, #1064]	; 0x428
 80282d8:	406b      	eors	r3, r5
 80282da:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 80282de:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80282e2:	3368      	adds	r3, #104	; 0x68
 80282e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80282e8:	f04f 0000 	mov.w	r0, #0
 80282ec:	f04f 0100 	mov.w	r1, #0
 80282f0:	09d0      	lsrs	r0, r2, #7
 80282f2:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 80282f6:	09d9      	lsrs	r1, r3, #7
 80282f8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80282fc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8028300:	4623      	mov	r3, r4
 8028302:	4043      	eors	r3, r0
 8028304:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 8028308:	462b      	mov	r3, r5
 802830a:	404b      	eors	r3, r1
 802830c:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8028310:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8028314:	e9d3 4500 	ldrd	r4, r5, [r3]
 8028318:	4623      	mov	r3, r4
 802831a:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 802831e:	e9d2 0100 	ldrd	r0, r1, [r2]
 8028322:	4602      	mov	r2, r0
 8028324:	189b      	adds	r3, r3, r2
 8028326:	65bb      	str	r3, [r7, #88]	; 0x58
 8028328:	462b      	mov	r3, r5
 802832a:	460a      	mov	r2, r1
 802832c:	4153      	adcs	r3, r2
 802832e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8028330:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8028334:	3360      	adds	r3, #96	; 0x60
 8028336:	e9d3 2300 	ldrd	r2, r3, [r3]
 802833a:	f8d7 1d04 	ldr.w	r1, [r7, #3332]	; 0xd04
 802833e:	3160      	adds	r1, #96	; 0x60
 8028340:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8028344:	4620      	mov	r0, r4
 8028346:	1880      	adds	r0, r0, r2
 8028348:	f8c7 0418 	str.w	r0, [r7, #1048]	; 0x418
 802834c:	4628      	mov	r0, r5
 802834e:	eb40 0303 	adc.w	r3, r0, r3
 8028352:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 8028356:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 802835a:	e9d3 3400 	ldrd	r3, r4, [r3]
 802835e:	e9c1 3400 	strd	r3, r4, [r1]
 8028362:	e9d1 2300 	ldrd	r2, r3, [r1]
 8028366:	e00b      	b.n	8028380 <_Transform_Sha512+0x3734>
 8028368:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 802836c:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8028370:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 8028374:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8028378:	e9c1 2300 	strd	r2, r3, [r1]
 802837c:	e9d1 2300 	ldrd	r2, r3, [r1]
 8028380:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 8028384:	e9d1 4500 	ldrd	r4, r5, [r1]
 8028388:	4621      	mov	r1, r4
 802838a:	1851      	adds	r1, r2, r1
 802838c:	6539      	str	r1, [r7, #80]	; 0x50
 802838e:	4629      	mov	r1, r5
 8028390:	414b      	adcs	r3, r1
 8028392:	657b      	str	r3, [r7, #84]	; 0x54
 8028394:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 8028398:	e9d3 2300 	ldrd	r2, r3, [r3]
 802839c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80283a0:	4621      	mov	r1, r4
 80283a2:	1889      	adds	r1, r1, r2
 80283a4:	f8c7 1410 	str.w	r1, [r7, #1040]	; 0x410
 80283a8:	4629      	mov	r1, r5
 80283aa:	eb41 0303 	adc.w	r3, r1, r3
 80283ae:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 80283b2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80283b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80283ba:	f607 42d8 	addw	r2, r7, #3288	; 0xcd8
 80283be:	e9c2 3400 	strd	r3, r4, [r2]
 80283c2:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 80283c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80283ca:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 80283ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80283d2:	1884      	adds	r4, r0, r2
 80283d4:	f8c7 4408 	str.w	r4, [r7, #1032]	; 0x408
 80283d8:	eb41 0303 	adc.w	r3, r1, r3
 80283dc:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 80283e0:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80283e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80283e8:	f607 42f8 	addw	r2, r7, #3320	; 0xcf8
 80283ec:	e9c2 3400 	strd	r3, r4, [r2]
 80283f0:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 80283f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80283f8:	f04f 021c 	mov.w	r2, #28
 80283fc:	f04f 0300 	mov.w	r3, #0
 8028400:	f7fc f9a8 	bl	8024754 <rotrFixed64>
 8028404:	4604      	mov	r4, r0
 8028406:	460d      	mov	r5, r1
 8028408:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 802840c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028410:	f04f 0222 	mov.w	r2, #34	; 0x22
 8028414:	f04f 0300 	mov.w	r3, #0
 8028418:	f7fc f99c 	bl	8024754 <rotrFixed64>
 802841c:	4602      	mov	r2, r0
 802841e:	460b      	mov	r3, r1
 8028420:	ea84 0102 	eor.w	r1, r4, r2
 8028424:	f8c7 1400 	str.w	r1, [r7, #1024]	; 0x400
 8028428:	406b      	eors	r3, r5
 802842a:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 802842e:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 8028432:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028436:	f04f 0227 	mov.w	r2, #39	; 0x27
 802843a:	f04f 0300 	mov.w	r3, #0
 802843e:	f7fc f989 	bl	8024754 <rotrFixed64>
 8028442:	4602      	mov	r2, r0
 8028444:	460b      	mov	r3, r1
 8028446:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 802844a:	e9d1 4500 	ldrd	r4, r5, [r1]
 802844e:	4621      	mov	r1, r4
 8028450:	4051      	eors	r1, r2
 8028452:	f8c7 13f8 	str.w	r1, [r7, #1016]	; 0x3f8
 8028456:	4629      	mov	r1, r5
 8028458:	404b      	eors	r3, r1
 802845a:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 802845e:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 8028462:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028466:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 802846a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802846e:	ea00 0402 	and.w	r4, r0, r2
 8028472:	f8c7 43f0 	str.w	r4, [r7, #1008]	; 0x3f0
 8028476:	400b      	ands	r3, r1
 8028478:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 802847c:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8028480:	e9d3 4500 	ldrd	r4, r5, [r3]
 8028484:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 8028488:	e9d3 0100 	ldrd	r0, r1, [r3]
 802848c:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8028490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028494:	ea40 0602 	orr.w	r6, r0, r2
 8028498:	f8c7 63e8 	str.w	r6, [r7, #1000]	; 0x3e8
 802849c:	430b      	orrs	r3, r1
 802849e:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 80284a2:	e9d7 12fa 	ldrd	r1, r2, [r7, #1000]	; 0x3e8
 80284a6:	460b      	mov	r3, r1
 80284a8:	4023      	ands	r3, r4
 80284aa:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 80284ae:	4613      	mov	r3, r2
 80284b0:	402b      	ands	r3, r5
 80284b2:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 80284b6:	e9d7 45fc 	ldrd	r4, r5, [r7, #1008]	; 0x3f0
 80284ba:	4623      	mov	r3, r4
 80284bc:	e9d7 01f8 	ldrd	r0, r1, [r7, #992]	; 0x3e0
 80284c0:	4602      	mov	r2, r0
 80284c2:	4313      	orrs	r3, r2
 80284c4:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 80284c8:	462b      	mov	r3, r5
 80284ca:	460a      	mov	r2, r1
 80284cc:	4313      	orrs	r3, r2
 80284ce:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 80284d2:	e9d7 45fe 	ldrd	r4, r5, [r7, #1016]	; 0x3f8
 80284d6:	4623      	mov	r3, r4
 80284d8:	e9d7 01f6 	ldrd	r0, r1, [r7, #984]	; 0x3d8
 80284dc:	4602      	mov	r2, r0
 80284de:	189b      	adds	r3, r3, r2
 80284e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80284e2:	462b      	mov	r3, r5
 80284e4:	460a      	mov	r2, r1
 80284e6:	4153      	adcs	r3, r2
 80284e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80284ea:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 80284ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80284f2:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80284f6:	4621      	mov	r1, r4
 80284f8:	1889      	adds	r1, r1, r2
 80284fa:	f8c7 13d0 	str.w	r1, [r7, #976]	; 0x3d0
 80284fe:	4629      	mov	r1, r5
 8028500:	eb41 0303 	adc.w	r3, r1, r3
 8028504:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 8028508:	e9d7 34f4 	ldrd	r3, r4, [r7, #976]	; 0x3d0
 802850c:	f607 42d8 	addw	r2, r7, #3288	; 0xcd8
 8028510:	e9c2 3400 	strd	r3, r4, [r2]
 8028514:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8028518:	e9d3 0100 	ldrd	r0, r1, [r3]
 802851c:	f04f 020e 	mov.w	r2, #14
 8028520:	f04f 0300 	mov.w	r3, #0
 8028524:	f7fc f916 	bl	8024754 <rotrFixed64>
 8028528:	4604      	mov	r4, r0
 802852a:	460d      	mov	r5, r1
 802852c:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8028530:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028534:	f04f 0212 	mov.w	r2, #18
 8028538:	f04f 0300 	mov.w	r3, #0
 802853c:	f7fc f90a 	bl	8024754 <rotrFixed64>
 8028540:	4602      	mov	r2, r0
 8028542:	460b      	mov	r3, r1
 8028544:	ea84 0102 	eor.w	r1, r4, r2
 8028548:	f8c7 13c8 	str.w	r1, [r7, #968]	; 0x3c8
 802854c:	406b      	eors	r3, r5
 802854e:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8028552:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8028556:	e9d3 0100 	ldrd	r0, r1, [r3]
 802855a:	f04f 0229 	mov.w	r2, #41	; 0x29
 802855e:	f04f 0300 	mov.w	r3, #0
 8028562:	f7fc f8f7 	bl	8024754 <rotrFixed64>
 8028566:	4602      	mov	r2, r0
 8028568:	460b      	mov	r3, r1
 802856a:	e9d7 45f2 	ldrd	r4, r5, [r7, #968]	; 0x3c8
 802856e:	4621      	mov	r1, r4
 8028570:	4051      	eors	r1, r2
 8028572:	f8c7 13c0 	str.w	r1, [r7, #960]	; 0x3c0
 8028576:	4629      	mov	r1, r5
 8028578:	404b      	eors	r3, r1
 802857a:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 802857e:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8028582:	e9d3 8900 	ldrd	r8, r9, [r3]
 8028586:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 802858a:	e9d3 4500 	ldrd	r4, r5, [r3]
 802858e:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8028592:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028596:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 802859a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802859e:	ea80 0602 	eor.w	r6, r0, r2
 80285a2:	f8c7 63b8 	str.w	r6, [r7, #952]	; 0x3b8
 80285a6:	404b      	eors	r3, r1
 80285a8:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 80285ac:	e9d7 12ee 	ldrd	r1, r2, [r7, #952]	; 0x3b8
 80285b0:	460b      	mov	r3, r1
 80285b2:	4023      	ands	r3, r4
 80285b4:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 80285b8:	4613      	mov	r3, r2
 80285ba:	402b      	ands	r3, r5
 80285bc:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 80285c0:	e9d7 12ec 	ldrd	r1, r2, [r7, #944]	; 0x3b0
 80285c4:	460b      	mov	r3, r1
 80285c6:	ea88 0303 	eor.w	r3, r8, r3
 80285ca:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 80285ce:	4613      	mov	r3, r2
 80285d0:	ea89 0303 	eor.w	r3, r9, r3
 80285d4:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 80285d8:	e9d7 45f0 	ldrd	r4, r5, [r7, #960]	; 0x3c0
 80285dc:	4623      	mov	r3, r4
 80285de:	e9d7 01ea 	ldrd	r0, r1, [r7, #936]	; 0x3a8
 80285e2:	4602      	mov	r2, r0
 80285e4:	189b      	adds	r3, r3, r2
 80285e6:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 80285ea:	462b      	mov	r3, r5
 80285ec:	460a      	mov	r2, r1
 80285ee:	4153      	adcs	r3, r2
 80285f0:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 80285f4:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80285f8:	330d      	adds	r3, #13
 80285fa:	00da      	lsls	r2, r3, #3
 80285fc:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 8028600:	4413      	add	r3, r2
 8028602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028606:	e9d7 45e8 	ldrd	r4, r5, [r7, #928]	; 0x3a0
 802860a:	4621      	mov	r1, r4
 802860c:	1889      	adds	r1, r1, r2
 802860e:	f8c7 1398 	str.w	r1, [r7, #920]	; 0x398
 8028612:	4629      	mov	r1, r5
 8028614:	eb41 0303 	adc.w	r3, r1, r3
 8028618:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 802861c:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8028620:	2b00      	cmp	r3, #0
 8028622:	f000 80a6 	beq.w	8028772 <_Transform_Sha512+0x3b26>
 8028626:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 802862a:	3358      	adds	r3, #88	; 0x58
 802862c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028630:	f04f 0213 	mov.w	r2, #19
 8028634:	f04f 0300 	mov.w	r3, #0
 8028638:	f7fc f88c 	bl	8024754 <rotrFixed64>
 802863c:	4604      	mov	r4, r0
 802863e:	460d      	mov	r5, r1
 8028640:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8028644:	3358      	adds	r3, #88	; 0x58
 8028646:	e9d3 0100 	ldrd	r0, r1, [r3]
 802864a:	f04f 023d 	mov.w	r2, #61	; 0x3d
 802864e:	f04f 0300 	mov.w	r3, #0
 8028652:	f7fc f87f 	bl	8024754 <rotrFixed64>
 8028656:	4602      	mov	r2, r0
 8028658:	460b      	mov	r3, r1
 802865a:	ea84 0102 	eor.w	r1, r4, r2
 802865e:	f8c7 1390 	str.w	r1, [r7, #912]	; 0x390
 8028662:	406b      	eors	r3, r5
 8028664:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 8028668:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 802866c:	3358      	adds	r3, #88	; 0x58
 802866e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028672:	f04f 0000 	mov.w	r0, #0
 8028676:	f04f 0100 	mov.w	r1, #0
 802867a:	0990      	lsrs	r0, r2, #6
 802867c:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 8028680:	0999      	lsrs	r1, r3, #6
 8028682:	e9d7 45e4 	ldrd	r4, r5, [r7, #912]	; 0x390
 8028686:	4623      	mov	r3, r4
 8028688:	4043      	eors	r3, r0
 802868a:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 802868e:	462b      	mov	r3, r5
 8028690:	404b      	eors	r3, r1
 8028692:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 8028696:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 802869a:	3330      	adds	r3, #48	; 0x30
 802869c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80286a0:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	; 0x388
 80286a4:	4621      	mov	r1, r4
 80286a6:	1889      	adds	r1, r1, r2
 80286a8:	f8c7 1380 	str.w	r1, [r7, #896]	; 0x380
 80286ac:	4629      	mov	r1, r5
 80286ae:	eb41 0303 	adc.w	r3, r1, r3
 80286b2:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 80286b6:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80286ba:	3370      	adds	r3, #112	; 0x70
 80286bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80286c0:	f04f 0201 	mov.w	r2, #1
 80286c4:	f04f 0300 	mov.w	r3, #0
 80286c8:	f7fc f844 	bl	8024754 <rotrFixed64>
 80286cc:	4604      	mov	r4, r0
 80286ce:	460d      	mov	r5, r1
 80286d0:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80286d4:	3370      	adds	r3, #112	; 0x70
 80286d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80286da:	f04f 0208 	mov.w	r2, #8
 80286de:	f04f 0300 	mov.w	r3, #0
 80286e2:	f7fc f837 	bl	8024754 <rotrFixed64>
 80286e6:	4602      	mov	r2, r0
 80286e8:	460b      	mov	r3, r1
 80286ea:	ea84 0102 	eor.w	r1, r4, r2
 80286ee:	f8c7 1378 	str.w	r1, [r7, #888]	; 0x378
 80286f2:	406b      	eors	r3, r5
 80286f4:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 80286f8:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80286fc:	3370      	adds	r3, #112	; 0x70
 80286fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028702:	f04f 0000 	mov.w	r0, #0
 8028706:	f04f 0100 	mov.w	r1, #0
 802870a:	09d0      	lsrs	r0, r2, #7
 802870c:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8028710:	09d9      	lsrs	r1, r3, #7
 8028712:	e9d7 45de 	ldrd	r4, r5, [r7, #888]	; 0x378
 8028716:	4623      	mov	r3, r4
 8028718:	4043      	eors	r3, r0
 802871a:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 802871e:	462b      	mov	r3, r5
 8028720:	404b      	eors	r3, r1
 8028722:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8028726:	e9d7 45e0 	ldrd	r4, r5, [r7, #896]	; 0x380
 802872a:	4623      	mov	r3, r4
 802872c:	e9d7 01dc 	ldrd	r0, r1, [r7, #880]	; 0x370
 8028730:	4602      	mov	r2, r0
 8028732:	189b      	adds	r3, r3, r2
 8028734:	643b      	str	r3, [r7, #64]	; 0x40
 8028736:	462b      	mov	r3, r5
 8028738:	460a      	mov	r2, r1
 802873a:	4153      	adcs	r3, r2
 802873c:	647b      	str	r3, [r7, #68]	; 0x44
 802873e:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8028742:	3368      	adds	r3, #104	; 0x68
 8028744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028748:	f8d7 1d04 	ldr.w	r1, [r7, #3332]	; 0xd04
 802874c:	3168      	adds	r1, #104	; 0x68
 802874e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8028752:	4620      	mov	r0, r4
 8028754:	1880      	adds	r0, r0, r2
 8028756:	f8c7 0368 	str.w	r0, [r7, #872]	; 0x368
 802875a:	4628      	mov	r0, r5
 802875c:	eb40 0303 	adc.w	r3, r0, r3
 8028760:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8028764:	e9d7 34da 	ldrd	r3, r4, [r7, #872]	; 0x368
 8028768:	e9c1 3400 	strd	r3, r4, [r1]
 802876c:	e9d1 2300 	ldrd	r2, r3, [r1]
 8028770:	e00b      	b.n	802878a <_Transform_Sha512+0x3b3e>
 8028772:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8028776:	f103 0168 	add.w	r1, r3, #104	; 0x68
 802877a:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 802877e:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8028782:	e9c1 2300 	strd	r2, r3, [r1]
 8028786:	e9d1 2300 	ldrd	r2, r3, [r1]
 802878a:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	; 0x398
 802878e:	4621      	mov	r1, r4
 8028790:	1851      	adds	r1, r2, r1
 8028792:	63b9      	str	r1, [r7, #56]	; 0x38
 8028794:	4629      	mov	r1, r5
 8028796:	414b      	adcs	r3, r1
 8028798:	63fb      	str	r3, [r7, #60]	; 0x3c
 802879a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 802879e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80287a2:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80287a6:	4621      	mov	r1, r4
 80287a8:	1889      	adds	r1, r1, r2
 80287aa:	f8c7 1360 	str.w	r1, [r7, #864]	; 0x360
 80287ae:	4629      	mov	r1, r5
 80287b0:	eb41 0303 	adc.w	r3, r1, r3
 80287b4:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 80287b8:	e9d7 34d8 	ldrd	r3, r4, [r7, #864]	; 0x360
 80287bc:	f507 624d 	add.w	r2, r7, #3280	; 0xcd0
 80287c0:	e9c2 3400 	strd	r3, r4, [r2]
 80287c4:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 80287c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80287cc:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80287d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80287d4:	1884      	adds	r4, r0, r2
 80287d6:	f8c7 4358 	str.w	r4, [r7, #856]	; 0x358
 80287da:	eb41 0303 	adc.w	r3, r1, r3
 80287de:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 80287e2:	e9d7 34d6 	ldrd	r3, r4, [r7, #856]	; 0x358
 80287e6:	f507 624f 	add.w	r2, r7, #3312	; 0xcf0
 80287ea:	e9c2 3400 	strd	r3, r4, [r2]
 80287ee:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 80287f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80287f6:	f04f 021c 	mov.w	r2, #28
 80287fa:	f04f 0300 	mov.w	r3, #0
 80287fe:	f7fb ffa9 	bl	8024754 <rotrFixed64>
 8028802:	4604      	mov	r4, r0
 8028804:	460d      	mov	r5, r1
 8028806:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 802880a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802880e:	f04f 0222 	mov.w	r2, #34	; 0x22
 8028812:	f04f 0300 	mov.w	r3, #0
 8028816:	f7fb ff9d 	bl	8024754 <rotrFixed64>
 802881a:	4602      	mov	r2, r0
 802881c:	460b      	mov	r3, r1
 802881e:	ea84 0102 	eor.w	r1, r4, r2
 8028822:	f8c7 1350 	str.w	r1, [r7, #848]	; 0x350
 8028826:	406b      	eors	r3, r5
 8028828:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 802882c:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 8028830:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028834:	f04f 0227 	mov.w	r2, #39	; 0x27
 8028838:	f04f 0300 	mov.w	r3, #0
 802883c:	f7fb ff8a 	bl	8024754 <rotrFixed64>
 8028840:	4602      	mov	r2, r0
 8028842:	460b      	mov	r3, r1
 8028844:	e9d7 45d4 	ldrd	r4, r5, [r7, #848]	; 0x350
 8028848:	4621      	mov	r1, r4
 802884a:	4051      	eors	r1, r2
 802884c:	f8c7 1348 	str.w	r1, [r7, #840]	; 0x348
 8028850:	4629      	mov	r1, r5
 8028852:	404b      	eors	r3, r1
 8028854:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8028858:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 802885c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028860:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 8028864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028868:	ea00 0402 	and.w	r4, r0, r2
 802886c:	f8c7 4340 	str.w	r4, [r7, #832]	; 0x340
 8028870:	400b      	ands	r3, r1
 8028872:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 8028876:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 802887a:	e9d3 4500 	ldrd	r4, r5, [r3]
 802887e:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 8028882:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028886:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 802888a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802888e:	ea40 0602 	orr.w	r6, r0, r2
 8028892:	f8c7 6338 	str.w	r6, [r7, #824]	; 0x338
 8028896:	430b      	orrs	r3, r1
 8028898:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 802889c:	e9d7 12ce 	ldrd	r1, r2, [r7, #824]	; 0x338
 80288a0:	460b      	mov	r3, r1
 80288a2:	4023      	ands	r3, r4
 80288a4:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
 80288a8:	4613      	mov	r3, r2
 80288aa:	402b      	ands	r3, r5
 80288ac:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 80288b0:	e9d7 45d0 	ldrd	r4, r5, [r7, #832]	; 0x340
 80288b4:	4623      	mov	r3, r4
 80288b6:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	; 0x330
 80288ba:	4602      	mov	r2, r0
 80288bc:	4313      	orrs	r3, r2
 80288be:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 80288c2:	462b      	mov	r3, r5
 80288c4:	460a      	mov	r2, r1
 80288c6:	4313      	orrs	r3, r2
 80288c8:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 80288cc:	e9d7 45d2 	ldrd	r4, r5, [r7, #840]	; 0x348
 80288d0:	4623      	mov	r3, r4
 80288d2:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	; 0x328
 80288d6:	4602      	mov	r2, r0
 80288d8:	189b      	adds	r3, r3, r2
 80288da:	633b      	str	r3, [r7, #48]	; 0x30
 80288dc:	462b      	mov	r3, r5
 80288de:	460a      	mov	r2, r1
 80288e0:	4153      	adcs	r3, r2
 80288e2:	637b      	str	r3, [r7, #52]	; 0x34
 80288e4:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 80288e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80288ec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80288f0:	4621      	mov	r1, r4
 80288f2:	1889      	adds	r1, r1, r2
 80288f4:	f8c7 1320 	str.w	r1, [r7, #800]	; 0x320
 80288f8:	4629      	mov	r1, r5
 80288fa:	eb41 0303 	adc.w	r3, r1, r3
 80288fe:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 8028902:	e9d7 34c8 	ldrd	r3, r4, [r7, #800]	; 0x320
 8028906:	f507 624d 	add.w	r2, r7, #3280	; 0xcd0
 802890a:	e9c2 3400 	strd	r3, r4, [r2]
 802890e:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8028912:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028916:	f04f 020e 	mov.w	r2, #14
 802891a:	f04f 0300 	mov.w	r3, #0
 802891e:	f7fb ff19 	bl	8024754 <rotrFixed64>
 8028922:	4604      	mov	r4, r0
 8028924:	460d      	mov	r5, r1
 8028926:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 802892a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802892e:	f04f 0212 	mov.w	r2, #18
 8028932:	f04f 0300 	mov.w	r3, #0
 8028936:	f7fb ff0d 	bl	8024754 <rotrFixed64>
 802893a:	4602      	mov	r2, r0
 802893c:	460b      	mov	r3, r1
 802893e:	ea84 0102 	eor.w	r1, r4, r2
 8028942:	f8c7 1318 	str.w	r1, [r7, #792]	; 0x318
 8028946:	406b      	eors	r3, r5
 8028948:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 802894c:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8028950:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028954:	f04f 0229 	mov.w	r2, #41	; 0x29
 8028958:	f04f 0300 	mov.w	r3, #0
 802895c:	f7fb fefa 	bl	8024754 <rotrFixed64>
 8028960:	4602      	mov	r2, r0
 8028962:	460b      	mov	r3, r1
 8028964:	e9d7 45c6 	ldrd	r4, r5, [r7, #792]	; 0x318
 8028968:	4621      	mov	r1, r4
 802896a:	4051      	eors	r1, r2
 802896c:	f8c7 1310 	str.w	r1, [r7, #784]	; 0x310
 8028970:	4629      	mov	r1, r5
 8028972:	404b      	eors	r3, r1
 8028974:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8028978:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 802897c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8028980:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8028984:	e9d3 4500 	ldrd	r4, r5, [r3]
 8028988:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 802898c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028990:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8028994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028998:	ea80 0602 	eor.w	r6, r0, r2
 802899c:	f8c7 6308 	str.w	r6, [r7, #776]	; 0x308
 80289a0:	404b      	eors	r3, r1
 80289a2:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 80289a6:	e9d7 12c2 	ldrd	r1, r2, [r7, #776]	; 0x308
 80289aa:	460b      	mov	r3, r1
 80289ac:	4023      	ands	r3, r4
 80289ae:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
 80289b2:	4613      	mov	r3, r2
 80289b4:	402b      	ands	r3, r5
 80289b6:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 80289ba:	e9d7 12c0 	ldrd	r1, r2, [r7, #768]	; 0x300
 80289be:	460b      	mov	r3, r1
 80289c0:	ea88 0303 	eor.w	r3, r8, r3
 80289c4:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
 80289c8:	4613      	mov	r3, r2
 80289ca:	ea89 0303 	eor.w	r3, r9, r3
 80289ce:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 80289d2:	e9d7 45c4 	ldrd	r4, r5, [r7, #784]	; 0x310
 80289d6:	4623      	mov	r3, r4
 80289d8:	e9d7 01be 	ldrd	r0, r1, [r7, #760]	; 0x2f8
 80289dc:	4602      	mov	r2, r0
 80289de:	189b      	adds	r3, r3, r2
 80289e0:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 80289e4:	462b      	mov	r3, r5
 80289e6:	460a      	mov	r2, r1
 80289e8:	4153      	adcs	r3, r2
 80289ea:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 80289ee:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80289f2:	330e      	adds	r3, #14
 80289f4:	00da      	lsls	r2, r3, #3
 80289f6:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 80289fa:	4413      	add	r3, r2
 80289fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028a00:	e9d7 45bc 	ldrd	r4, r5, [r7, #752]	; 0x2f0
 8028a04:	4621      	mov	r1, r4
 8028a06:	1889      	adds	r1, r1, r2
 8028a08:	f8c7 12e8 	str.w	r1, [r7, #744]	; 0x2e8
 8028a0c:	4629      	mov	r1, r5
 8028a0e:	eb41 0303 	adc.w	r3, r1, r3
 8028a12:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8028a16:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8028a1a:	2b00      	cmp	r3, #0
 8028a1c:	f000 80a6 	beq.w	8028b6c <_Transform_Sha512+0x3f20>
 8028a20:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8028a24:	3360      	adds	r3, #96	; 0x60
 8028a26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028a2a:	f04f 0213 	mov.w	r2, #19
 8028a2e:	f04f 0300 	mov.w	r3, #0
 8028a32:	f7fb fe8f 	bl	8024754 <rotrFixed64>
 8028a36:	4604      	mov	r4, r0
 8028a38:	460d      	mov	r5, r1
 8028a3a:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8028a3e:	3360      	adds	r3, #96	; 0x60
 8028a40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028a44:	f04f 023d 	mov.w	r2, #61	; 0x3d
 8028a48:	f04f 0300 	mov.w	r3, #0
 8028a4c:	f7fb fe82 	bl	8024754 <rotrFixed64>
 8028a50:	4602      	mov	r2, r0
 8028a52:	460b      	mov	r3, r1
 8028a54:	ea84 0102 	eor.w	r1, r4, r2
 8028a58:	f8c7 12e0 	str.w	r1, [r7, #736]	; 0x2e0
 8028a5c:	406b      	eors	r3, r5
 8028a5e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8028a62:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8028a66:	3360      	adds	r3, #96	; 0x60
 8028a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028a6c:	f04f 0000 	mov.w	r0, #0
 8028a70:	f04f 0100 	mov.w	r1, #0
 8028a74:	0990      	lsrs	r0, r2, #6
 8028a76:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 8028a7a:	0999      	lsrs	r1, r3, #6
 8028a7c:	e9d7 45b8 	ldrd	r4, r5, [r7, #736]	; 0x2e0
 8028a80:	4623      	mov	r3, r4
 8028a82:	4043      	eors	r3, r0
 8028a84:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
 8028a88:	462b      	mov	r3, r5
 8028a8a:	404b      	eors	r3, r1
 8028a8c:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 8028a90:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8028a94:	3338      	adds	r3, #56	; 0x38
 8028a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028a9a:	e9d7 45b6 	ldrd	r4, r5, [r7, #728]	; 0x2d8
 8028a9e:	4621      	mov	r1, r4
 8028aa0:	1889      	adds	r1, r1, r2
 8028aa2:	f8c7 12d0 	str.w	r1, [r7, #720]	; 0x2d0
 8028aa6:	4629      	mov	r1, r5
 8028aa8:	eb41 0303 	adc.w	r3, r1, r3
 8028aac:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 8028ab0:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8028ab4:	3378      	adds	r3, #120	; 0x78
 8028ab6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028aba:	f04f 0201 	mov.w	r2, #1
 8028abe:	f04f 0300 	mov.w	r3, #0
 8028ac2:	f7fb fe47 	bl	8024754 <rotrFixed64>
 8028ac6:	4604      	mov	r4, r0
 8028ac8:	460d      	mov	r5, r1
 8028aca:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8028ace:	3378      	adds	r3, #120	; 0x78
 8028ad0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028ad4:	f04f 0208 	mov.w	r2, #8
 8028ad8:	f04f 0300 	mov.w	r3, #0
 8028adc:	f7fb fe3a 	bl	8024754 <rotrFixed64>
 8028ae0:	4602      	mov	r2, r0
 8028ae2:	460b      	mov	r3, r1
 8028ae4:	ea84 0102 	eor.w	r1, r4, r2
 8028ae8:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 8028aec:	406b      	eors	r3, r5
 8028aee:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 8028af2:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8028af6:	3378      	adds	r3, #120	; 0x78
 8028af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028afc:	f04f 0000 	mov.w	r0, #0
 8028b00:	f04f 0100 	mov.w	r1, #0
 8028b04:	09d0      	lsrs	r0, r2, #7
 8028b06:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8028b0a:	09d9      	lsrs	r1, r3, #7
 8028b0c:	e9d7 45b2 	ldrd	r4, r5, [r7, #712]	; 0x2c8
 8028b10:	4623      	mov	r3, r4
 8028b12:	4043      	eors	r3, r0
 8028b14:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8028b18:	462b      	mov	r3, r5
 8028b1a:	404b      	eors	r3, r1
 8028b1c:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8028b20:	e9d7 45b4 	ldrd	r4, r5, [r7, #720]	; 0x2d0
 8028b24:	4623      	mov	r3, r4
 8028b26:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8028b2a:	4602      	mov	r2, r0
 8028b2c:	189b      	adds	r3, r3, r2
 8028b2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8028b30:	462b      	mov	r3, r5
 8028b32:	460a      	mov	r2, r1
 8028b34:	4153      	adcs	r3, r2
 8028b36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8028b38:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8028b3c:	3370      	adds	r3, #112	; 0x70
 8028b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028b42:	f8d7 1d04 	ldr.w	r1, [r7, #3332]	; 0xd04
 8028b46:	3170      	adds	r1, #112	; 0x70
 8028b48:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8028b4c:	4620      	mov	r0, r4
 8028b4e:	1880      	adds	r0, r0, r2
 8028b50:	f8c7 02b8 	str.w	r0, [r7, #696]	; 0x2b8
 8028b54:	4628      	mov	r0, r5
 8028b56:	eb40 0303 	adc.w	r3, r0, r3
 8028b5a:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8028b5e:	e9d7 34ae 	ldrd	r3, r4, [r7, #696]	; 0x2b8
 8028b62:	e9c1 3400 	strd	r3, r4, [r1]
 8028b66:	e9d1 2300 	ldrd	r2, r3, [r1]
 8028b6a:	e00b      	b.n	8028b84 <_Transform_Sha512+0x3f38>
 8028b6c:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8028b70:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8028b74:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 8028b78:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 8028b7c:	e9c1 2300 	strd	r2, r3, [r1]
 8028b80:	e9d1 2300 	ldrd	r2, r3, [r1]
 8028b84:	e9d7 45ba 	ldrd	r4, r5, [r7, #744]	; 0x2e8
 8028b88:	4621      	mov	r1, r4
 8028b8a:	1851      	adds	r1, r2, r1
 8028b8c:	6239      	str	r1, [r7, #32]
 8028b8e:	4629      	mov	r1, r5
 8028b90:	414b      	adcs	r3, r1
 8028b92:	627b      	str	r3, [r7, #36]	; 0x24
 8028b94:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8028b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028b9c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8028ba0:	4621      	mov	r1, r4
 8028ba2:	1889      	adds	r1, r1, r2
 8028ba4:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 8028ba8:	4629      	mov	r1, r5
 8028baa:	eb41 0303 	adc.w	r3, r1, r3
 8028bae:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 8028bb2:	e9d7 34ac 	ldrd	r3, r4, [r7, #688]	; 0x2b0
 8028bb6:	f607 42c8 	addw	r2, r7, #3272	; 0xcc8
 8028bba:	e9c2 3400 	strd	r3, r4, [r2]
 8028bbe:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8028bc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028bc6:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8028bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028bce:	1884      	adds	r4, r0, r2
 8028bd0:	f8c7 42a8 	str.w	r4, [r7, #680]	; 0x2a8
 8028bd4:	eb41 0303 	adc.w	r3, r1, r3
 8028bd8:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8028bdc:	e9d7 34aa 	ldrd	r3, r4, [r7, #680]	; 0x2a8
 8028be0:	f607 42e8 	addw	r2, r7, #3304	; 0xce8
 8028be4:	e9c2 3400 	strd	r3, r4, [r2]
 8028be8:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8028bec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028bf0:	f04f 021c 	mov.w	r2, #28
 8028bf4:	f04f 0300 	mov.w	r3, #0
 8028bf8:	f7fb fdac 	bl	8024754 <rotrFixed64>
 8028bfc:	4604      	mov	r4, r0
 8028bfe:	460d      	mov	r5, r1
 8028c00:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8028c04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028c08:	f04f 0222 	mov.w	r2, #34	; 0x22
 8028c0c:	f04f 0300 	mov.w	r3, #0
 8028c10:	f7fb fda0 	bl	8024754 <rotrFixed64>
 8028c14:	4602      	mov	r2, r0
 8028c16:	460b      	mov	r3, r1
 8028c18:	ea84 0102 	eor.w	r1, r4, r2
 8028c1c:	f8c7 12a0 	str.w	r1, [r7, #672]	; 0x2a0
 8028c20:	406b      	eors	r3, r5
 8028c22:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8028c26:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8028c2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028c2e:	f04f 0227 	mov.w	r2, #39	; 0x27
 8028c32:	f04f 0300 	mov.w	r3, #0
 8028c36:	f7fb fd8d 	bl	8024754 <rotrFixed64>
 8028c3a:	4602      	mov	r2, r0
 8028c3c:	460b      	mov	r3, r1
 8028c3e:	e9d7 45a8 	ldrd	r4, r5, [r7, #672]	; 0x2a0
 8028c42:	4621      	mov	r1, r4
 8028c44:	4051      	eors	r1, r2
 8028c46:	f8c7 1298 	str.w	r1, [r7, #664]	; 0x298
 8028c4a:	4629      	mov	r1, r5
 8028c4c:	404b      	eors	r3, r1
 8028c4e:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8028c52:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8028c56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028c5a:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 8028c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028c62:	ea00 0402 	and.w	r4, r0, r2
 8028c66:	f8c7 4290 	str.w	r4, [r7, #656]	; 0x290
 8028c6a:	400b      	ands	r3, r1
 8028c6c:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8028c70:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 8028c74:	e9d3 4500 	ldrd	r4, r5, [r3]
 8028c78:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8028c7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028c80:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 8028c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028c88:	ea40 0602 	orr.w	r6, r0, r2
 8028c8c:	f8c7 6288 	str.w	r6, [r7, #648]	; 0x288
 8028c90:	430b      	orrs	r3, r1
 8028c92:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8028c96:	e9d7 12a2 	ldrd	r1, r2, [r7, #648]	; 0x288
 8028c9a:	460b      	mov	r3, r1
 8028c9c:	4023      	ands	r3, r4
 8028c9e:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 8028ca2:	4613      	mov	r3, r2
 8028ca4:	402b      	ands	r3, r5
 8028ca6:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8028caa:	e9d7 45a4 	ldrd	r4, r5, [r7, #656]	; 0x290
 8028cae:	4623      	mov	r3, r4
 8028cb0:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	; 0x280
 8028cb4:	4602      	mov	r2, r0
 8028cb6:	4313      	orrs	r3, r2
 8028cb8:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
 8028cbc:	462b      	mov	r3, r5
 8028cbe:	460a      	mov	r2, r1
 8028cc0:	4313      	orrs	r3, r2
 8028cc2:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 8028cc6:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	; 0x298
 8028cca:	4623      	mov	r3, r4
 8028ccc:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8028cd0:	4602      	mov	r2, r0
 8028cd2:	189b      	adds	r3, r3, r2
 8028cd4:	61bb      	str	r3, [r7, #24]
 8028cd6:	462b      	mov	r3, r5
 8028cd8:	460a      	mov	r2, r1
 8028cda:	4153      	adcs	r3, r2
 8028cdc:	61fb      	str	r3, [r7, #28]
 8028cde:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8028ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028ce6:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8028cea:	4621      	mov	r1, r4
 8028cec:	1889      	adds	r1, r1, r2
 8028cee:	f8c7 1270 	str.w	r1, [r7, #624]	; 0x270
 8028cf2:	4629      	mov	r1, r5
 8028cf4:	eb41 0303 	adc.w	r3, r1, r3
 8028cf8:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8028cfc:	e9d7 349c 	ldrd	r3, r4, [r7, #624]	; 0x270
 8028d00:	f607 42c8 	addw	r2, r7, #3272	; 0xcc8
 8028d04:	e9c2 3400 	strd	r3, r4, [r2]
 8028d08:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8028d0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028d10:	f04f 020e 	mov.w	r2, #14
 8028d14:	f04f 0300 	mov.w	r3, #0
 8028d18:	f7fb fd1c 	bl	8024754 <rotrFixed64>
 8028d1c:	4604      	mov	r4, r0
 8028d1e:	460d      	mov	r5, r1
 8028d20:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8028d24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028d28:	f04f 0212 	mov.w	r2, #18
 8028d2c:	f04f 0300 	mov.w	r3, #0
 8028d30:	f7fb fd10 	bl	8024754 <rotrFixed64>
 8028d34:	4602      	mov	r2, r0
 8028d36:	460b      	mov	r3, r1
 8028d38:	ea84 0102 	eor.w	r1, r4, r2
 8028d3c:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
 8028d40:	406b      	eors	r3, r5
 8028d42:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8028d46:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8028d4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028d4e:	f04f 0229 	mov.w	r2, #41	; 0x29
 8028d52:	f04f 0300 	mov.w	r3, #0
 8028d56:	f7fb fcfd 	bl	8024754 <rotrFixed64>
 8028d5a:	4602      	mov	r2, r0
 8028d5c:	460b      	mov	r3, r1
 8028d5e:	e9d7 459a 	ldrd	r4, r5, [r7, #616]	; 0x268
 8028d62:	4621      	mov	r1, r4
 8028d64:	4051      	eors	r1, r2
 8028d66:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 8028d6a:	4629      	mov	r1, r5
 8028d6c:	404b      	eors	r3, r1
 8028d6e:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8028d72:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8028d76:	e9d3 8900 	ldrd	r8, r9, [r3]
 8028d7a:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 8028d7e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8028d82:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8028d86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028d8a:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8028d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028d92:	ea80 0602 	eor.w	r6, r0, r2
 8028d96:	f8c7 6258 	str.w	r6, [r7, #600]	; 0x258
 8028d9a:	404b      	eors	r3, r1
 8028d9c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8028da0:	e9d7 1296 	ldrd	r1, r2, [r7, #600]	; 0x258
 8028da4:	460b      	mov	r3, r1
 8028da6:	4023      	ands	r3, r4
 8028da8:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8028dac:	4613      	mov	r3, r2
 8028dae:	402b      	ands	r3, r5
 8028db0:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8028db4:	e9d7 1294 	ldrd	r1, r2, [r7, #592]	; 0x250
 8028db8:	460b      	mov	r3, r1
 8028dba:	ea88 0303 	eor.w	r3, r8, r3
 8028dbe:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8028dc2:	4613      	mov	r3, r2
 8028dc4:	ea89 0303 	eor.w	r3, r9, r3
 8028dc8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8028dcc:	e9d7 4598 	ldrd	r4, r5, [r7, #608]	; 0x260
 8028dd0:	4623      	mov	r3, r4
 8028dd2:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	; 0x248
 8028dd6:	4602      	mov	r2, r0
 8028dd8:	189b      	adds	r3, r3, r2
 8028dda:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8028dde:	462b      	mov	r3, r5
 8028de0:	460a      	mov	r2, r1
 8028de2:	4153      	adcs	r3, r2
 8028de4:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8028de8:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8028dec:	330f      	adds	r3, #15
 8028dee:	00da      	lsls	r2, r3, #3
 8028df0:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 8028df4:	4413      	add	r3, r2
 8028df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028dfa:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	; 0x240
 8028dfe:	4621      	mov	r1, r4
 8028e00:	1889      	adds	r1, r1, r2
 8028e02:	f8c7 1238 	str.w	r1, [r7, #568]	; 0x238
 8028e06:	4629      	mov	r1, r5
 8028e08:	eb41 0303 	adc.w	r3, r1, r3
 8028e0c:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8028e10:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8028e14:	2b00      	cmp	r3, #0
 8028e16:	f000 80a3 	beq.w	8028f60 <_Transform_Sha512+0x4314>
 8028e1a:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8028e1e:	3368      	adds	r3, #104	; 0x68
 8028e20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028e24:	f04f 0213 	mov.w	r2, #19
 8028e28:	f04f 0300 	mov.w	r3, #0
 8028e2c:	f7fb fc92 	bl	8024754 <rotrFixed64>
 8028e30:	4604      	mov	r4, r0
 8028e32:	460d      	mov	r5, r1
 8028e34:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8028e38:	3368      	adds	r3, #104	; 0x68
 8028e3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028e3e:	f04f 023d 	mov.w	r2, #61	; 0x3d
 8028e42:	f04f 0300 	mov.w	r3, #0
 8028e46:	f7fb fc85 	bl	8024754 <rotrFixed64>
 8028e4a:	4602      	mov	r2, r0
 8028e4c:	460b      	mov	r3, r1
 8028e4e:	ea84 0102 	eor.w	r1, r4, r2
 8028e52:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 8028e56:	406b      	eors	r3, r5
 8028e58:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8028e5c:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8028e60:	3368      	adds	r3, #104	; 0x68
 8028e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028e66:	f04f 0000 	mov.w	r0, #0
 8028e6a:	f04f 0100 	mov.w	r1, #0
 8028e6e:	0990      	lsrs	r0, r2, #6
 8028e70:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 8028e74:	0999      	lsrs	r1, r3, #6
 8028e76:	e9d7 458c 	ldrd	r4, r5, [r7, #560]	; 0x230
 8028e7a:	4623      	mov	r3, r4
 8028e7c:	4043      	eors	r3, r0
 8028e7e:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8028e82:	462b      	mov	r3, r5
 8028e84:	404b      	eors	r3, r1
 8028e86:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8028e8a:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8028e8e:	3340      	adds	r3, #64	; 0x40
 8028e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028e94:	e9d7 458a 	ldrd	r4, r5, [r7, #552]	; 0x228
 8028e98:	4621      	mov	r1, r4
 8028e9a:	1889      	adds	r1, r1, r2
 8028e9c:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 8028ea0:	4629      	mov	r1, r5
 8028ea2:	eb41 0303 	adc.w	r3, r1, r3
 8028ea6:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8028eaa:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8028eae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028eb2:	f04f 0201 	mov.w	r2, #1
 8028eb6:	f04f 0300 	mov.w	r3, #0
 8028eba:	f7fb fc4b 	bl	8024754 <rotrFixed64>
 8028ebe:	4604      	mov	r4, r0
 8028ec0:	460d      	mov	r5, r1
 8028ec2:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8028ec6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028eca:	f04f 0208 	mov.w	r2, #8
 8028ece:	f04f 0300 	mov.w	r3, #0
 8028ed2:	f7fb fc3f 	bl	8024754 <rotrFixed64>
 8028ed6:	4602      	mov	r2, r0
 8028ed8:	460b      	mov	r3, r1
 8028eda:	ea84 0102 	eor.w	r1, r4, r2
 8028ede:	f8c7 1218 	str.w	r1, [r7, #536]	; 0x218
 8028ee2:	406b      	eors	r3, r5
 8028ee4:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8028ee8:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8028eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028ef0:	f04f 0000 	mov.w	r0, #0
 8028ef4:	f04f 0100 	mov.w	r1, #0
 8028ef8:	09d0      	lsrs	r0, r2, #7
 8028efa:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8028efe:	09d9      	lsrs	r1, r3, #7
 8028f00:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	; 0x218
 8028f04:	4623      	mov	r3, r4
 8028f06:	4043      	eors	r3, r0
 8028f08:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8028f0c:	462b      	mov	r3, r5
 8028f0e:	404b      	eors	r3, r1
 8028f10:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8028f14:	e9d7 4588 	ldrd	r4, r5, [r7, #544]	; 0x220
 8028f18:	4623      	mov	r3, r4
 8028f1a:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8028f1e:	4602      	mov	r2, r0
 8028f20:	189b      	adds	r3, r3, r2
 8028f22:	613b      	str	r3, [r7, #16]
 8028f24:	462b      	mov	r3, r5
 8028f26:	460a      	mov	r2, r1
 8028f28:	4153      	adcs	r3, r2
 8028f2a:	617b      	str	r3, [r7, #20]
 8028f2c:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8028f30:	3378      	adds	r3, #120	; 0x78
 8028f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028f36:	f8d7 1d04 	ldr.w	r1, [r7, #3332]	; 0xd04
 8028f3a:	3178      	adds	r1, #120	; 0x78
 8028f3c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8028f40:	4620      	mov	r0, r4
 8028f42:	1880      	adds	r0, r0, r2
 8028f44:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208
 8028f48:	4628      	mov	r0, r5
 8028f4a:	eb40 0303 	adc.w	r3, r0, r3
 8028f4e:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8028f52:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 8028f56:	e9c1 3400 	strd	r3, r4, [r1]
 8028f5a:	e9d1 2300 	ldrd	r2, r3, [r1]
 8028f5e:	e00b      	b.n	8028f78 <_Transform_Sha512+0x432c>
 8028f60:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8028f64:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8028f68:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 8028f6c:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8028f70:	e9c1 2300 	strd	r2, r3, [r1]
 8028f74:	e9d1 2300 	ldrd	r2, r3, [r1]
 8028f78:	e9d7 458e 	ldrd	r4, r5, [r7, #568]	; 0x238
 8028f7c:	4621      	mov	r1, r4
 8028f7e:	1851      	adds	r1, r2, r1
 8028f80:	60b9      	str	r1, [r7, #8]
 8028f82:	4629      	mov	r1, r5
 8028f84:	414b      	adcs	r3, r1
 8028f86:	60fb      	str	r3, [r7, #12]
 8028f88:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8028f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028f90:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8028f94:	4621      	mov	r1, r4
 8028f96:	1889      	adds	r1, r1, r2
 8028f98:	f8c7 1200 	str.w	r1, [r7, #512]	; 0x200
 8028f9c:	4629      	mov	r1, r5
 8028f9e:	eb41 0303 	adc.w	r3, r1, r3
 8028fa2:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8028fa6:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	; 0x200
 8028faa:	f507 624c 	add.w	r2, r7, #3264	; 0xcc0
 8028fae:	e9c2 3400 	strd	r3, r4, [r2]
 8028fb2:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 8028fb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028fba:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8028fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028fc2:	1884      	adds	r4, r0, r2
 8028fc4:	f8c7 41f8 	str.w	r4, [r7, #504]	; 0x1f8
 8028fc8:	eb41 0303 	adc.w	r3, r1, r3
 8028fcc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8028fd0:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	; 0x1f8
 8028fd4:	f507 624e 	add.w	r2, r7, #3296	; 0xce0
 8028fd8:	e9c2 3400 	strd	r3, r4, [r2]
 8028fdc:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8028fe0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028fe4:	f04f 021c 	mov.w	r2, #28
 8028fe8:	f04f 0300 	mov.w	r3, #0
 8028fec:	f7fb fbb2 	bl	8024754 <rotrFixed64>
 8028ff0:	4604      	mov	r4, r0
 8028ff2:	460d      	mov	r5, r1
 8028ff4:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8028ff8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028ffc:	f04f 0222 	mov.w	r2, #34	; 0x22
 8029000:	f04f 0300 	mov.w	r3, #0
 8029004:	f7fb fba6 	bl	8024754 <rotrFixed64>
 8029008:	4602      	mov	r2, r0
 802900a:	460b      	mov	r3, r1
 802900c:	ea84 0102 	eor.w	r1, r4, r2
 8029010:	f8c7 11f0 	str.w	r1, [r7, #496]	; 0x1f0
 8029014:	406b      	eors	r3, r5
 8029016:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 802901a:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 802901e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8029022:	f04f 0227 	mov.w	r2, #39	; 0x27
 8029026:	f04f 0300 	mov.w	r3, #0
 802902a:	f7fb fb93 	bl	8024754 <rotrFixed64>
 802902e:	4602      	mov	r2, r0
 8029030:	460b      	mov	r3, r1
 8029032:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8029036:	4621      	mov	r1, r4
 8029038:	4051      	eors	r1, r2
 802903a:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 802903e:	4629      	mov	r1, r5
 8029040:	404b      	eors	r3, r1
 8029042:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8029046:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 802904a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802904e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8029052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029056:	ea00 0402 	and.w	r4, r0, r2
 802905a:	f8c7 41e0 	str.w	r4, [r7, #480]	; 0x1e0
 802905e:	400b      	ands	r3, r1
 8029060:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8029064:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 8029068:	e9d3 4500 	ldrd	r4, r5, [r3]
 802906c:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8029070:	e9d3 0100 	ldrd	r0, r1, [r3]
 8029074:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8029078:	e9d3 2300 	ldrd	r2, r3, [r3]
 802907c:	ea40 0602 	orr.w	r6, r0, r2
 8029080:	f8c7 61d8 	str.w	r6, [r7, #472]	; 0x1d8
 8029084:	430b      	orrs	r3, r1
 8029086:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 802908a:	e9d7 1276 	ldrd	r1, r2, [r7, #472]	; 0x1d8
 802908e:	460b      	mov	r3, r1
 8029090:	4023      	ands	r3, r4
 8029092:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8029096:	4613      	mov	r3, r2
 8029098:	402b      	ands	r3, r5
 802909a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 802909e:	e9d7 4578 	ldrd	r4, r5, [r7, #480]	; 0x1e0
 80290a2:	4623      	mov	r3, r4
 80290a4:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 80290a8:	4602      	mov	r2, r0
 80290aa:	4313      	orrs	r3, r2
 80290ac:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80290b0:	462b      	mov	r3, r5
 80290b2:	460a      	mov	r2, r1
 80290b4:	4313      	orrs	r3, r2
 80290b6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 80290ba:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	; 0x1e8
 80290be:	4623      	mov	r3, r4
 80290c0:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 80290c4:	4602      	mov	r2, r0
 80290c6:	189b      	adds	r3, r3, r2
 80290c8:	603b      	str	r3, [r7, #0]
 80290ca:	462b      	mov	r3, r5
 80290cc:	460a      	mov	r2, r1
 80290ce:	4153      	adcs	r3, r2
 80290d0:	607b      	str	r3, [r7, #4]
 80290d2:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 80290d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80290da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80290de:	4621      	mov	r1, r4
 80290e0:	1889      	adds	r1, r1, r2
 80290e2:	f8c7 11c0 	str.w	r1, [r7, #448]	; 0x1c0
 80290e6:	4629      	mov	r1, r5
 80290e8:	eb41 0303 	adc.w	r3, r1, r3
 80290ec:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80290f0:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	; 0x1c0
 80290f4:	f507 624c 	add.w	r2, r7, #3264	; 0xcc0
 80290f8:	e9c2 3400 	strd	r3, r4, [r2]
    for (j = 0; j < 80; j += 16) {
 80290fc:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8029100:	3310      	adds	r3, #16
 8029102:	f8c7 3d0c 	str.w	r3, [r7, #3340]	; 0xd0c
 8029106:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 802910a:	2b4f      	cmp	r3, #79	; 0x4f
 802910c:	f67b adc2 	bls.w	8024c94 <_Transform_Sha512+0x48>
    }
#endif /* USE_SLOW_SHA512 */

    /* Add the working vars back into digest */
    sha512->digest[0] += a(0);
 8029110:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 8029114:	e9d3 0100 	ldrd	r0, r1, [r3]
 8029118:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 802911c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029120:	1884      	adds	r4, r0, r2
 8029122:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
 8029126:	eb41 0303 	adc.w	r3, r1, r3
 802912a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 802912e:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 8029132:	e9d7 126e 	ldrd	r1, r2, [r7, #440]	; 0x1b8
 8029136:	e9c3 1200 	strd	r1, r2, [r3]
    sha512->digest[1] += b(0);
 802913a:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 802913e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8029142:	f607 43c8 	addw	r3, r7, #3272	; 0xcc8
 8029146:	e9d3 2300 	ldrd	r2, r3, [r3]
 802914a:	1884      	adds	r4, r0, r2
 802914c:	f8c7 41b0 	str.w	r4, [r7, #432]	; 0x1b0
 8029150:	eb41 0303 	adc.w	r3, r1, r3
 8029154:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8029158:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 802915c:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8029160:	e9c3 1202 	strd	r1, r2, [r3, #8]
    sha512->digest[2] += c(0);
 8029164:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 8029168:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 802916c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8029170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029174:	1884      	adds	r4, r0, r2
 8029176:	f8c7 41a8 	str.w	r4, [r7, #424]	; 0x1a8
 802917a:	eb41 0303 	adc.w	r3, r1, r3
 802917e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8029182:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 8029186:	e9d7 126a 	ldrd	r1, r2, [r7, #424]	; 0x1a8
 802918a:	e9c3 1204 	strd	r1, r2, [r3, #16]
    sha512->digest[3] += d(0);
 802918e:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 8029192:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8029196:	f607 43d8 	addw	r3, r7, #3288	; 0xcd8
 802919a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802919e:	1884      	adds	r4, r0, r2
 80291a0:	f8c7 41a0 	str.w	r4, [r7, #416]	; 0x1a0
 80291a4:	eb41 0303 	adc.w	r3, r1, r3
 80291a8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80291ac:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 80291b0:	e9d7 1268 	ldrd	r1, r2, [r7, #416]	; 0x1a0
 80291b4:	e9c3 1206 	strd	r1, r2, [r3, #24]
    sha512->digest[4] += e(0);
 80291b8:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 80291bc:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80291c0:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 80291c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80291c8:	1884      	adds	r4, r0, r2
 80291ca:	f8c7 4198 	str.w	r4, [r7, #408]	; 0x198
 80291ce:	eb41 0303 	adc.w	r3, r1, r3
 80291d2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80291d6:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 80291da:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 80291de:	e9c3 1208 	strd	r1, r2, [r3, #32]
    sha512->digest[5] += f(0);
 80291e2:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 80291e6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80291ea:	f607 43e8 	addw	r3, r7, #3304	; 0xce8
 80291ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80291f2:	1884      	adds	r4, r0, r2
 80291f4:	f8c7 4190 	str.w	r4, [r7, #400]	; 0x190
 80291f8:	eb41 0303 	adc.w	r3, r1, r3
 80291fc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8029200:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 8029204:	e9d7 1264 	ldrd	r1, r2, [r7, #400]	; 0x190
 8029208:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
    sha512->digest[6] += g(0);
 802920c:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 8029210:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8029214:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8029218:	e9d3 2300 	ldrd	r2, r3, [r3]
 802921c:	1884      	adds	r4, r0, r2
 802921e:	f8c7 4188 	str.w	r4, [r7, #392]	; 0x188
 8029222:	eb41 0303 	adc.w	r3, r1, r3
 8029226:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 802922a:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 802922e:	e9d7 1262 	ldrd	r1, r2, [r7, #392]	; 0x188
 8029232:	e9c3 120c 	strd	r1, r2, [r3, #48]	; 0x30
    sha512->digest[7] += h(0);
 8029236:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 802923a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 802923e:	f607 43f8 	addw	r3, r7, #3320	; 0xcf8
 8029242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029246:	1884      	adds	r4, r0, r2
 8029248:	f8c7 4180 	str.w	r4, [r7, #384]	; 0x180
 802924c:	eb41 0303 	adc.w	r3, r1, r3
 8029250:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8029254:	f8d7 3cbc 	ldr.w	r3, [r7, #3260]	; 0xcbc
 8029258:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 802925c:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38

    /* Wipe variables */
    ForceZero(W, sizeof(word64) * 16);
 8029260:	2180      	movs	r1, #128	; 0x80
 8029262:	f8d7 0d04 	ldr.w	r0, [r7, #3332]	; 0xd04
 8029266:	f7fb fb0b 	bl	8024880 <ForceZero>
    ForceZero(T, sizeof(T));
 802926a:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 802926e:	2140      	movs	r1, #64	; 0x40
 8029270:	4618      	mov	r0, r3
 8029272:	f7fb fb05 	bl	8024880 <ForceZero>

#if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SMALL_STACK_CACHE)
    XFREE(W, sha512->heap, DYNAMIC_TYPE_TMP_BUFFER);
 8029276:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 802927a:	f8c7 3d00 	str.w	r3, [r7, #3328]	; 0xd00
 802927e:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8029282:	2b00      	cmp	r3, #0
 8029284:	d003      	beq.n	802928e <_Transform_Sha512+0x4642>
 8029286:	f8d7 0d00 	ldr.w	r0, [r7, #3328]	; 0xd00
 802928a:	f7f5 f82f 	bl	801e2ec <wolfSSL_Free>
#endif

    return 0;
 802928e:	2300      	movs	r3, #0
}
 8029290:	4618      	mov	r0, r3
 8029292:	f607 5714 	addw	r7, r7, #3348	; 0xd14
 8029296:	46bd      	mov	sp, r7
 8029298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802929c <AddLength>:


static WC_INLINE void AddLength(wc_Sha512* sha512, word32 len)
{
 802929c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80292a0:	b085      	sub	sp, #20
 80292a2:	af00      	add	r7, sp, #0
 80292a4:	6078      	str	r0, [r7, #4]
 80292a6:	6039      	str	r1, [r7, #0]
    word64 tmp = sha512->loLen;
 80292a8:	687b      	ldr	r3, [r7, #4]
 80292aa:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 80292ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
    if ( (sha512->loLen += len) < tmp)
 80292b2:	687b      	ldr	r3, [r7, #4]
 80292b4:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 80292b8:	6839      	ldr	r1, [r7, #0]
 80292ba:	2000      	movs	r0, #0
 80292bc:	460c      	mov	r4, r1
 80292be:	4605      	mov	r5, r0
 80292c0:	eb12 0a04 	adds.w	sl, r2, r4
 80292c4:	eb43 0b05 	adc.w	fp, r3, r5
 80292c8:	687b      	ldr	r3, [r7, #4]
 80292ca:	e9c3 ab32 	strd	sl, fp, [r3, #200]	; 0xc8
 80292ce:	687b      	ldr	r3, [r7, #4]
 80292d0:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 80292d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80292d8:	4290      	cmp	r0, r2
 80292da:	eb71 0303 	sbcs.w	r3, r1, r3
 80292de:	d209      	bcs.n	80292f4 <AddLength+0x58>
        sha512->hiLen++;                       /* carry low to high */
 80292e0:	687b      	ldr	r3, [r7, #4]
 80292e2:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 80292e6:	f112 0801 	adds.w	r8, r2, #1
 80292ea:	f143 0900 	adc.w	r9, r3, #0
 80292ee:	687b      	ldr	r3, [r7, #4]
 80292f0:	e9c3 8934 	strd	r8, r9, [r3, #208]	; 0xd0
}
 80292f4:	bf00      	nop
 80292f6:	3714      	adds	r7, #20
 80292f8:	46bd      	mov	sp, r7
 80292fa:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80292fe:	4770      	bx	lr

08029300 <Sha512Update>:

static WC_INLINE int Sha512Update(wc_Sha512* sha512, const byte* data, word32 len)
{
 8029300:	b580      	push	{r7, lr}
 8029302:	b088      	sub	sp, #32
 8029304:	af00      	add	r7, sp, #0
 8029306:	60f8      	str	r0, [r7, #12]
 8029308:	60b9      	str	r1, [r7, #8]
 802930a:	607a      	str	r2, [r7, #4]
    int ret = 0;
 802930c:	2300      	movs	r3, #0
 802930e:	61fb      	str	r3, [r7, #28]
    /* do block size increments */
    byte* local = (byte*)sha512->buffer;
 8029310:	68fb      	ldr	r3, [r7, #12]
 8029312:	3340      	adds	r3, #64	; 0x40
 8029314:	61bb      	str	r3, [r7, #24]

    /* check that internal buffLen is valid */
    if (sha512->buffLen >= WC_SHA512_BLOCK_SIZE)
 8029316:	68fb      	ldr	r3, [r7, #12]
 8029318:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 802931c:	2b7f      	cmp	r3, #127	; 0x7f
 802931e:	d902      	bls.n	8029326 <Sha512Update+0x26>
        return BUFFER_E;
 8029320:	f06f 0383 	mvn.w	r3, #131	; 0x83
 8029324:	e081      	b.n	802942a <Sha512Update+0x12a>

    if (len == 0)
 8029326:	687b      	ldr	r3, [r7, #4]
 8029328:	2b00      	cmp	r3, #0
 802932a:	d101      	bne.n	8029330 <Sha512Update+0x30>
        return 0;
 802932c:	2300      	movs	r3, #0
 802932e:	e07c      	b.n	802942a <Sha512Update+0x12a>

    AddLength(sha512, len);
 8029330:	6879      	ldr	r1, [r7, #4]
 8029332:	68f8      	ldr	r0, [r7, #12]
 8029334:	f7ff ffb2 	bl	802929c <AddLength>

    if (sha512->buffLen > 0) {
 8029338:	68fb      	ldr	r3, [r7, #12]
 802933a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 802933e:	2b00      	cmp	r3, #0
 8029340:	d05e      	beq.n	8029400 <Sha512Update+0x100>
        word32 add = min(len, WC_SHA512_BLOCK_SIZE - sha512->buffLen);
 8029342:	68fb      	ldr	r3, [r7, #12]
 8029344:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8029348:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 802934c:	4619      	mov	r1, r3
 802934e:	6878      	ldr	r0, [r7, #4]
 8029350:	f7fb faaf 	bl	80248b2 <min>
 8029354:	6178      	str	r0, [r7, #20]
        if (add > 0) {
 8029356:	697b      	ldr	r3, [r7, #20]
 8029358:	2b00      	cmp	r3, #0
 802935a:	d019      	beq.n	8029390 <Sha512Update+0x90>
            XMEMCPY(&local[sha512->buffLen], data, add);
 802935c:	68fb      	ldr	r3, [r7, #12]
 802935e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8029362:	69ba      	ldr	r2, [r7, #24]
 8029364:	4413      	add	r3, r2
 8029366:	697a      	ldr	r2, [r7, #20]
 8029368:	68b9      	ldr	r1, [r7, #8]
 802936a:	4618      	mov	r0, r3
 802936c:	f001 f8ac 	bl	802a4c8 <memcpy>

            sha512->buffLen += add;
 8029370:	68fb      	ldr	r3, [r7, #12]
 8029372:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8029376:	697b      	ldr	r3, [r7, #20]
 8029378:	441a      	add	r2, r3
 802937a:	68fb      	ldr	r3, [r7, #12]
 802937c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
            data            += add;
 8029380:	68ba      	ldr	r2, [r7, #8]
 8029382:	697b      	ldr	r3, [r7, #20]
 8029384:	4413      	add	r3, r2
 8029386:	60bb      	str	r3, [r7, #8]
            len             -= add;
 8029388:	687a      	ldr	r2, [r7, #4]
 802938a:	697b      	ldr	r3, [r7, #20]
 802938c:	1ad3      	subs	r3, r2, r3
 802938e:	607b      	str	r3, [r7, #4]
        }

        if (sha512->buffLen == WC_SHA512_BLOCK_SIZE) {
 8029390:	68fb      	ldr	r3, [r7, #12]
 8029392:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8029396:	2b80      	cmp	r3, #128	; 0x80
 8029398:	d132      	bne.n	8029400 <Sha512Update+0x100>
            if (!IS_INTEL_AVX1(intel_flags) && !IS_INTEL_AVX2(intel_flags))
        #endif
            {
        #if !defined(WOLFSSL_ESP32WROOM32_CRYPT) || \
             defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
                ByteReverseWords64(sha512->buffer, sha512->buffer,
 802939a:	68fb      	ldr	r3, [r7, #12]
 802939c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80293a0:	68fb      	ldr	r3, [r7, #12]
 80293a2:	3340      	adds	r3, #64	; 0x40
 80293a4:	2280      	movs	r2, #128	; 0x80
 80293a6:	4619      	mov	r1, r3
 80293a8:	f7fb fa40 	bl	802482c <ByteReverseWords64>
        #endif
            }
    #endif
    #if !defined(WOLFSSL_ESP32WROOM32_CRYPT) || \
         defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
            ret = Transform_Sha512(sha512);
 80293ac:	68f8      	ldr	r0, [r7, #12]
 80293ae:	f7fb fc4d 	bl	8024c4c <_Transform_Sha512>
 80293b2:	61f8      	str	r0, [r7, #28]
            ret = esp_sha512_process(sha512);
            if(ret == 0 && sha512->ctx.mode == ESP32_SHA_SW){
                ret = Transform_Sha512(sha512);
            }
    #endif
            if (ret == 0)
 80293b4:	69fb      	ldr	r3, [r7, #28]
 80293b6:	2b00      	cmp	r3, #0
 80293b8:	d104      	bne.n	80293c4 <Sha512Update+0xc4>
                sha512->buffLen = 0;
 80293ba:	68fb      	ldr	r3, [r7, #12]
 80293bc:	2200      	movs	r2, #0
 80293be:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80293c2:	e01d      	b.n	8029400 <Sha512Update+0x100>
            else
                len = 0;
 80293c4:	2300      	movs	r3, #0
 80293c6:	607b      	str	r3, [r7, #4]
                break;
        }
    }
#else
    {
        while (len >= WC_SHA512_BLOCK_SIZE) {
 80293c8:	e01a      	b.n	8029400 <Sha512Update+0x100>
            XMEMCPY(local, data, WC_SHA512_BLOCK_SIZE);
 80293ca:	2280      	movs	r2, #128	; 0x80
 80293cc:	68b9      	ldr	r1, [r7, #8]
 80293ce:	69b8      	ldr	r0, [r7, #24]
 80293d0:	f001 f87a 	bl	802a4c8 <memcpy>

            data += WC_SHA512_BLOCK_SIZE;
 80293d4:	68bb      	ldr	r3, [r7, #8]
 80293d6:	3380      	adds	r3, #128	; 0x80
 80293d8:	60bb      	str	r3, [r7, #8]
            len  -= WC_SHA512_BLOCK_SIZE;
 80293da:	687b      	ldr	r3, [r7, #4]
 80293dc:	3b80      	subs	r3, #128	; 0x80
 80293de:	607b      	str	r3, [r7, #4]
    #if !defined(WOLFSSL_ESP32WROOM32_CRYPT) || \
         defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
            ByteReverseWords64(sha512->buffer, sha512->buffer,
 80293e0:	68fb      	ldr	r3, [r7, #12]
 80293e2:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80293e6:	68fb      	ldr	r3, [r7, #12]
 80293e8:	3340      	adds	r3, #64	; 0x40
 80293ea:	2280      	movs	r2, #128	; 0x80
 80293ec:	4619      	mov	r1, r3
 80293ee:	f7fb fa1d 	bl	802482c <ByteReverseWords64>
                                                       WC_SHA512_BLOCK_SIZE);
    #endif
    #if !defined(WOLFSSL_ESP32WROOM32_CRYPT) || \
         defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
            ret = Transform_Sha512(sha512);
 80293f2:	68f8      	ldr	r0, [r7, #12]
 80293f4:	f7fb fc2a 	bl	8024c4c <_Transform_Sha512>
 80293f8:	61f8      	str	r0, [r7, #28]
            ret = esp_sha512_process(sha512);
            if(ret == 0 && sha512->ctx.mode == ESP32_SHA_SW){
                ret = Transform_Sha512(sha512);
            }
    #endif
            if (ret != 0)
 80293fa:	69fb      	ldr	r3, [r7, #28]
 80293fc:	2b00      	cmp	r3, #0
 80293fe:	d103      	bne.n	8029408 <Sha512Update+0x108>
        while (len >= WC_SHA512_BLOCK_SIZE) {
 8029400:	687b      	ldr	r3, [r7, #4]
 8029402:	2b7f      	cmp	r3, #127	; 0x7f
 8029404:	d8e1      	bhi.n	80293ca <Sha512Update+0xca>
 8029406:	e000      	b.n	802940a <Sha512Update+0x10a>
                break;
 8029408:	bf00      	nop
        }
    }
#endif

    if (ret == 0 && len > 0) {
 802940a:	69fb      	ldr	r3, [r7, #28]
 802940c:	2b00      	cmp	r3, #0
 802940e:	d10b      	bne.n	8029428 <Sha512Update+0x128>
 8029410:	687b      	ldr	r3, [r7, #4]
 8029412:	2b00      	cmp	r3, #0
 8029414:	d008      	beq.n	8029428 <Sha512Update+0x128>
        XMEMCPY(local, data, len);
 8029416:	687a      	ldr	r2, [r7, #4]
 8029418:	68b9      	ldr	r1, [r7, #8]
 802941a:	69b8      	ldr	r0, [r7, #24]
 802941c:	f001 f854 	bl	802a4c8 <memcpy>
        sha512->buffLen = len;
 8029420:	68fb      	ldr	r3, [r7, #12]
 8029422:	687a      	ldr	r2, [r7, #4]
 8029424:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    }

    return ret;
 8029428:	69fb      	ldr	r3, [r7, #28]
}
 802942a:	4618      	mov	r0, r3
 802942c:	3720      	adds	r7, #32
 802942e:	46bd      	mov	sp, r7
 8029430:	bd80      	pop	{r7, pc}

08029432 <wc_Sha512Update>:

#ifdef WOLFSSL_SHA512

int wc_Sha512Update(wc_Sha512* sha512, const byte* data, word32 len)
{
 8029432:	b580      	push	{r7, lr}
 8029434:	b084      	sub	sp, #16
 8029436:	af00      	add	r7, sp, #0
 8029438:	60f8      	str	r0, [r7, #12]
 802943a:	60b9      	str	r1, [r7, #8]
 802943c:	607a      	str	r2, [r7, #4]
    if (sha512 == NULL || (data == NULL && len > 0)) {
 802943e:	68fb      	ldr	r3, [r7, #12]
 8029440:	2b00      	cmp	r3, #0
 8029442:	d005      	beq.n	8029450 <wc_Sha512Update+0x1e>
 8029444:	68bb      	ldr	r3, [r7, #8]
 8029446:	2b00      	cmp	r3, #0
 8029448:	d105      	bne.n	8029456 <wc_Sha512Update+0x24>
 802944a:	687b      	ldr	r3, [r7, #4]
 802944c:	2b00      	cmp	r3, #0
 802944e:	d002      	beq.n	8029456 <wc_Sha512Update+0x24>
        return BAD_FUNC_ARG;
 8029450:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8029454:	e005      	b.n	8029462 <wc_Sha512Update+0x30>
        return IntelQaSymSha512(&sha512->asyncDev, NULL, data, len);
    #endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    return Sha512Update(sha512, data, len);
 8029456:	687a      	ldr	r2, [r7, #4]
 8029458:	68b9      	ldr	r1, [r7, #8]
 802945a:	68f8      	ldr	r0, [r7, #12]
 802945c:	f7ff ff50 	bl	8029300 <Sha512Update>
 8029460:	4603      	mov	r3, r0
}
 8029462:	4618      	mov	r0, r3
 8029464:	3710      	adds	r7, #16
 8029466:	46bd      	mov	sp, r7
 8029468:	bd80      	pop	{r7, pc}

0802946a <Sha512Final>:
#elif defined(WOLFSSL_SE050) && defined(WOLFSSL_SE050_HASH)

#else

static WC_INLINE int Sha512Final(wc_Sha512* sha512)
{
 802946a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 802946e:	b084      	sub	sp, #16
 8029470:	af00      	add	r7, sp, #0
 8029472:	6078      	str	r0, [r7, #4]
    byte* local;
    int ret;

    if (sha512 == NULL) {
 8029474:	687b      	ldr	r3, [r7, #4]
 8029476:	2b00      	cmp	r3, #0
 8029478:	d102      	bne.n	8029480 <Sha512Final+0x16>
        return BAD_FUNC_ARG;
 802947a:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 802947e:	e096      	b.n	80295ae <Sha512Final+0x144>
    }

    local = (byte*)sha512->buffer;
 8029480:	687b      	ldr	r3, [r7, #4]
 8029482:	3340      	adds	r3, #64	; 0x40
 8029484:	60fb      	str	r3, [r7, #12]

    local[sha512->buffLen++] = 0x80;  /* add 1 */
 8029486:	687b      	ldr	r3, [r7, #4]
 8029488:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 802948c:	1c59      	adds	r1, r3, #1
 802948e:	687a      	ldr	r2, [r7, #4]
 8029490:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
 8029494:	68fa      	ldr	r2, [r7, #12]
 8029496:	4413      	add	r3, r2
 8029498:	2280      	movs	r2, #128	; 0x80
 802949a:	701a      	strb	r2, [r3, #0]

    /* pad with zeros */
    if (sha512->buffLen > WC_SHA512_PAD_SIZE) {
 802949c:	687b      	ldr	r3, [r7, #4]
 802949e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80294a2:	2b70      	cmp	r3, #112	; 0x70
 80294a4:	d927      	bls.n	80294f6 <Sha512Final+0x8c>
        XMEMSET(&local[sha512->buffLen], 0, WC_SHA512_BLOCK_SIZE - sha512->buffLen);
 80294a6:	687b      	ldr	r3, [r7, #4]
 80294a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80294ac:	68fa      	ldr	r2, [r7, #12]
 80294ae:	18d0      	adds	r0, r2, r3
 80294b0:	687b      	ldr	r3, [r7, #4]
 80294b2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80294b6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80294ba:	461a      	mov	r2, r3
 80294bc:	2100      	movs	r1, #0
 80294be:	f001 f82b 	bl	802a518 <memset>
        sha512->buffLen += WC_SHA512_BLOCK_SIZE - sha512->buffLen;
 80294c2:	687b      	ldr	r3, [r7, #4]
 80294c4:	2280      	movs	r2, #128	; 0x80
 80294c6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    #endif
        {

       #if !defined(WOLFSSL_ESP32WROOM32_CRYPT) || \
            defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
            ByteReverseWords64(sha512->buffer,sha512->buffer,
 80294ca:	687b      	ldr	r3, [r7, #4]
 80294cc:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80294d0:	687b      	ldr	r3, [r7, #4]
 80294d2:	3340      	adds	r3, #64	; 0x40
 80294d4:	2280      	movs	r2, #128	; 0x80
 80294d6:	4619      	mov	r1, r3
 80294d8:	f7fb f9a8 	bl	802482c <ByteReverseWords64>
       #endif
        }
#endif /* LITTLE_ENDIAN_ORDER */
#if !defined(WOLFSSL_ESP32WROOM32_CRYPT) || \
     defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
        ret = Transform_Sha512(sha512);
 80294dc:	6878      	ldr	r0, [r7, #4]
 80294de:	f7fb fbb5 	bl	8024c4c <_Transform_Sha512>
 80294e2:	60b8      	str	r0, [r7, #8]
        ret = esp_sha512_process(sha512);
        if(ret == 0 && sha512->ctx.mode == ESP32_SHA_SW){
            ret = Transform_Sha512(sha512);
        }
#endif
        if (ret != 0)
 80294e4:	68bb      	ldr	r3, [r7, #8]
 80294e6:	2b00      	cmp	r3, #0
 80294e8:	d001      	beq.n	80294ee <Sha512Final+0x84>
            return ret;
 80294ea:	68bb      	ldr	r3, [r7, #8]
 80294ec:	e05f      	b.n	80295ae <Sha512Final+0x144>

        sha512->buffLen = 0;
 80294ee:	687b      	ldr	r3, [r7, #4]
 80294f0:	2200      	movs	r2, #0
 80294f2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    }
    XMEMSET(&local[sha512->buffLen], 0, WC_SHA512_PAD_SIZE - sha512->buffLen);
 80294f6:	687b      	ldr	r3, [r7, #4]
 80294f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80294fc:	68fa      	ldr	r2, [r7, #12]
 80294fe:	18d0      	adds	r0, r2, r3
 8029500:	687b      	ldr	r3, [r7, #4]
 8029502:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8029506:	f1c3 0370 	rsb	r3, r3, #112	; 0x70
 802950a:	461a      	mov	r2, r3
 802950c:	2100      	movs	r1, #0
 802950e:	f001 f803 	bl	802a518 <memset>

    /* put lengths in bits */
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
 8029512:	687b      	ldr	r3, [r7, #4]
 8029514:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8029518:	f04f 0000 	mov.w	r0, #0
 802951c:	f04f 0100 	mov.w	r1, #0
 8029520:	0f58      	lsrs	r0, r3, #29
 8029522:	2100      	movs	r1, #0
                                                         (sha512->hiLen << 3);
 8029524:	687b      	ldr	r3, [r7, #4]
 8029526:	e9d3 4534 	ldrd	r4, r5, [r3, #208]	; 0xd0
 802952a:	f04f 0200 	mov.w	r2, #0
 802952e:	f04f 0300 	mov.w	r3, #0
 8029532:	00eb      	lsls	r3, r5, #3
 8029534:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8029538:	00e2      	lsls	r2, r4, #3
    sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
 802953a:	eb10 0802 	adds.w	r8, r0, r2
 802953e:	eb41 0903 	adc.w	r9, r1, r3
 8029542:	687b      	ldr	r3, [r7, #4]
 8029544:	e9c3 8934 	strd	r8, r9, [r3, #208]	; 0xd0
    sha512->loLen = sha512->loLen << 3;
 8029548:	687b      	ldr	r3, [r7, #4]
 802954a:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 802954e:	f04f 0200 	mov.w	r2, #0
 8029552:	f04f 0300 	mov.w	r3, #0
 8029556:	00cb      	lsls	r3, r1, #3
 8029558:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 802955c:	00c2      	lsls	r2, r0, #3
 802955e:	6879      	ldr	r1, [r7, #4]
 8029560:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
        (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2))
        if (!IS_INTEL_AVX1(intel_flags) && !IS_INTEL_AVX2(intel_flags))
    #endif
    #if !defined(WOLFSSL_ESP32WROOM32_CRYPT) || \
         defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
            ByteReverseWords64(sha512->buffer, sha512->buffer, WC_SHA512_PAD_SIZE);
 8029564:	687b      	ldr	r3, [r7, #4]
 8029566:	f103 0040 	add.w	r0, r3, #64	; 0x40
 802956a:	687b      	ldr	r3, [r7, #4]
 802956c:	3340      	adds	r3, #64	; 0x40
 802956e:	2270      	movs	r2, #112	; 0x70
 8029570:	4619      	mov	r1, r3
 8029572:	f7fb f95b 	bl	802482c <ByteReverseWords64>
#endif
    /* ! length ordering dependent on digest endian type ! */

#if !defined(WOLFSSL_ESP32WROOM32_CRYPT) || \
     defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
    sha512->buffer[WC_SHA512_BLOCK_SIZE / sizeof(word64) - 2] = sha512->hiLen;
 8029576:	687b      	ldr	r3, [r7, #4]
 8029578:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 802957c:	6879      	ldr	r1, [r7, #4]
 802957e:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
    sha512->buffer[WC_SHA512_BLOCK_SIZE / sizeof(word64) - 1] = sha512->loLen;
 8029582:	687b      	ldr	r3, [r7, #4]
 8029584:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8029588:	6879      	ldr	r1, [r7, #4]
 802958a:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
                           &(sha512->buffer[WC_SHA512_BLOCK_SIZE / sizeof(word64) - 2]),
                           WC_SHA512_BLOCK_SIZE - WC_SHA512_PAD_SIZE);
#endif
#if !defined(WOLFSSL_ESP32WROOM32_CRYPT) || \
    defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
    ret = Transform_Sha512(sha512);
 802958e:	6878      	ldr	r0, [r7, #4]
 8029590:	f7fb fb5c 	bl	8024c4c <_Transform_Sha512>
 8029594:	60b8      	str	r0, [r7, #8]
    ret = esp_sha512_digest_process(sha512, 1);
    if(ret == 0 && sha512->ctx.mode == ESP32_SHA_SW) {
        ret = Transform_Sha512(sha512);
    }
#endif
    if (ret != 0)
 8029596:	68bb      	ldr	r3, [r7, #8]
 8029598:	2b00      	cmp	r3, #0
 802959a:	d001      	beq.n	80295a0 <Sha512Final+0x136>
        return ret;
 802959c:	68bb      	ldr	r3, [r7, #8]
 802959e:	e006      	b.n	80295ae <Sha512Final+0x144>

    #ifdef LITTLE_ENDIAN_ORDER
        ByteReverseWords64(sha512->digest, sha512->digest, WC_SHA512_DIGEST_SIZE);
 80295a0:	687b      	ldr	r3, [r7, #4]
 80295a2:	6879      	ldr	r1, [r7, #4]
 80295a4:	2240      	movs	r2, #64	; 0x40
 80295a6:	4618      	mov	r0, r3
 80295a8:	f7fb f940 	bl	802482c <ByteReverseWords64>
    #endif

    return 0;
 80295ac:	2300      	movs	r3, #0
}
 80295ae:	4618      	mov	r0, r3
 80295b0:	3710      	adds	r7, #16
 80295b2:	46bd      	mov	sp, r7
 80295b4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080295b8 <Sha512_Family_Final>:
    return Sha512FinalRaw(sha512, hash, WC_SHA512_DIGEST_SIZE);
}

static int Sha512_Family_Final(wc_Sha512* sha512, byte* hash, int digestSz,
                               int (*initfp)(wc_Sha512*))
{
 80295b8:	b580      	push	{r7, lr}
 80295ba:	b086      	sub	sp, #24
 80295bc:	af00      	add	r7, sp, #0
 80295be:	60f8      	str	r0, [r7, #12]
 80295c0:	60b9      	str	r1, [r7, #8]
 80295c2:	607a      	str	r2, [r7, #4]
 80295c4:	603b      	str	r3, [r7, #0]
    int ret;

    if (sha512 == NULL || hash == NULL) {
 80295c6:	68fb      	ldr	r3, [r7, #12]
 80295c8:	2b00      	cmp	r3, #0
 80295ca:	d002      	beq.n	80295d2 <Sha512_Family_Final+0x1a>
 80295cc:	68bb      	ldr	r3, [r7, #8]
 80295ce:	2b00      	cmp	r3, #0
 80295d0:	d102      	bne.n	80295d8 <Sha512_Family_Final+0x20>
        return BAD_FUNC_ARG;
 80295d2:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80295d6:	e012      	b.n	80295fe <Sha512_Family_Final+0x46>
        return IntelQaSymSha512(&sha512->asyncDev, hash, NULL, digestSz);
    #endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    ret = Sha512Final(sha512);
 80295d8:	68f8      	ldr	r0, [r7, #12]
 80295da:	f7ff ff46 	bl	802946a <Sha512Final>
 80295de:	6178      	str	r0, [r7, #20]
    if (ret != 0)
 80295e0:	697b      	ldr	r3, [r7, #20]
 80295e2:	2b00      	cmp	r3, #0
 80295e4:	d001      	beq.n	80295ea <Sha512_Family_Final+0x32>
        return ret;
 80295e6:	697b      	ldr	r3, [r7, #20]
 80295e8:	e009      	b.n	80295fe <Sha512_Family_Final+0x46>

    XMEMCPY(hash, sha512->digest, digestSz);
 80295ea:	68fb      	ldr	r3, [r7, #12]
 80295ec:	687a      	ldr	r2, [r7, #4]
 80295ee:	4619      	mov	r1, r3
 80295f0:	68b8      	ldr	r0, [r7, #8]
 80295f2:	f000 ff69 	bl	802a4c8 <memcpy>

    /* initialize Sha512 structure for the next use */
    return initfp(sha512);
 80295f6:	683b      	ldr	r3, [r7, #0]
 80295f8:	68f8      	ldr	r0, [r7, #12]
 80295fa:	4798      	blx	r3
 80295fc:	4603      	mov	r3, r0
}
 80295fe:	4618      	mov	r0, r3
 8029600:	3718      	adds	r7, #24
 8029602:	46bd      	mov	sp, r7
 8029604:	bd80      	pop	{r7, pc}
	...

08029608 <wc_Sha512Final>:

int wc_Sha512Final(wc_Sha512* sha512, byte* hash)
{
 8029608:	b580      	push	{r7, lr}
 802960a:	b082      	sub	sp, #8
 802960c:	af00      	add	r7, sp, #0
 802960e:	6078      	str	r0, [r7, #4]
 8029610:	6039      	str	r1, [r7, #0]
    return Sha512_Family_Final(sha512, hash, WC_SHA512_DIGEST_SIZE, InitSha512);
 8029612:	4b05      	ldr	r3, [pc, #20]	; (8029628 <wc_Sha512Final+0x20>)
 8029614:	2240      	movs	r2, #64	; 0x40
 8029616:	6839      	ldr	r1, [r7, #0]
 8029618:	6878      	ldr	r0, [r7, #4]
 802961a:	f7ff ffcd 	bl	80295b8 <Sha512_Family_Final>
 802961e:	4603      	mov	r3, r0
}
 8029620:	4618      	mov	r0, r3
 8029622:	3708      	adds	r7, #8
 8029624:	46bd      	mov	sp, r7
 8029626:	bd80      	pop	{r7, pc}
 8029628:	080248d9 	.word	0x080248d9

0802962c <wc_InitSha512>:

#endif /* WOLFSSL_KCAPI_HASH */

#if !defined(WOLFSSL_SE050) || !defined(WOLFSSL_SE050_HASH)
int wc_InitSha512(wc_Sha512* sha512)
{
 802962c:	b580      	push	{r7, lr}
 802962e:	b082      	sub	sp, #8
 8029630:	af00      	add	r7, sp, #0
 8029632:	6078      	str	r0, [r7, #4]
    return wc_InitSha512_ex(sha512, NULL, INVALID_DEVID);
 8029634:	f06f 0201 	mvn.w	r2, #1
 8029638:	2100      	movs	r1, #0
 802963a:	6878      	ldr	r0, [r7, #4]
 802963c:	f7fb faca 	bl	8024bd4 <wc_InitSha512_ex>
 8029640:	4603      	mov	r3, r0
}
 8029642:	4618      	mov	r0, r3
 8029644:	3708      	adds	r7, #8
 8029646:	46bd      	mov	sp, r7
 8029648:	bd80      	pop	{r7, pc}

0802964a <wc_Sha512Free>:

void wc_Sha512Free(wc_Sha512* sha512)
{
 802964a:	b480      	push	{r7}
 802964c:	b083      	sub	sp, #12
 802964e:	af00      	add	r7, sp, #0
 8029650:	6078      	str	r0, [r7, #4]
    if (sha512 == NULL)
 8029652:	687b      	ldr	r3, [r7, #4]
 8029654:	2b00      	cmp	r3, #0
#endif

#if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_SHA512)
    wolfAsync_DevCtxFree(&sha512->asyncDev, WOLFSSL_ASYNC_MARKER_SHA512);
#endif /* WOLFSSL_ASYNC_CRYPT */
}
 8029656:	370c      	adds	r7, #12
 8029658:	46bd      	mov	sp, r7
 802965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802965e:	4770      	bx	lr

08029660 <InitSha384>:
    /* functions defined in wolfcrypt/src/port/kcapi/kcapi_hash.c */

#else

static int InitSha384(wc_Sha384* sha384)
{
 8029660:	b480      	push	{r7}
 8029662:	b083      	sub	sp, #12
 8029664:	af00      	add	r7, sp, #0
 8029666:	6078      	str	r0, [r7, #4]
    if (sha384 == NULL) {
 8029668:	687b      	ldr	r3, [r7, #4]
 802966a:	2b00      	cmp	r3, #0
 802966c:	d102      	bne.n	8029674 <InitSha384+0x14>
        return BAD_FUNC_ARG;
 802966e:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 8029672:	e042      	b.n	80296fa <InitSha384+0x9a>
    }

    sha384->digest[0] = W64LIT(0xcbbb9d5dc1059ed8);
 8029674:	6879      	ldr	r1, [r7, #4]
 8029676:	a324      	add	r3, pc, #144	; (adr r3, 8029708 <InitSha384+0xa8>)
 8029678:	e9d3 2300 	ldrd	r2, r3, [r3]
 802967c:	e9c1 2300 	strd	r2, r3, [r1]
    sha384->digest[1] = W64LIT(0x629a292a367cd507);
 8029680:	6879      	ldr	r1, [r7, #4]
 8029682:	a323      	add	r3, pc, #140	; (adr r3, 8029710 <InitSha384+0xb0>)
 8029684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029688:	e9c1 2302 	strd	r2, r3, [r1, #8]
    sha384->digest[2] = W64LIT(0x9159015a3070dd17);
 802968c:	6879      	ldr	r1, [r7, #4]
 802968e:	a322      	add	r3, pc, #136	; (adr r3, 8029718 <InitSha384+0xb8>)
 8029690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029694:	e9c1 2304 	strd	r2, r3, [r1, #16]
    sha384->digest[3] = W64LIT(0x152fecd8f70e5939);
 8029698:	6879      	ldr	r1, [r7, #4]
 802969a:	a321      	add	r3, pc, #132	; (adr r3, 8029720 <InitSha384+0xc0>)
 802969c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80296a0:	e9c1 2306 	strd	r2, r3, [r1, #24]
    sha384->digest[4] = W64LIT(0x67332667ffc00b31);
 80296a4:	6879      	ldr	r1, [r7, #4]
 80296a6:	a320      	add	r3, pc, #128	; (adr r3, 8029728 <InitSha384+0xc8>)
 80296a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80296ac:	e9c1 2308 	strd	r2, r3, [r1, #32]
    sha384->digest[5] = W64LIT(0x8eb44a8768581511);
 80296b0:	6879      	ldr	r1, [r7, #4]
 80296b2:	a31f      	add	r3, pc, #124	; (adr r3, 8029730 <InitSha384+0xd0>)
 80296b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80296b8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    sha384->digest[6] = W64LIT(0xdb0c2e0d64f98fa7);
 80296bc:	6879      	ldr	r1, [r7, #4]
 80296be:	a31e      	add	r3, pc, #120	; (adr r3, 8029738 <InitSha384+0xd8>)
 80296c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80296c4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    sha384->digest[7] = W64LIT(0x47b5481dbefa4fa4);
 80296c8:	6879      	ldr	r1, [r7, #4]
 80296ca:	a31d      	add	r3, pc, #116	; (adr r3, 8029740 <InitSha384+0xe0>)
 80296cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80296d0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    sha384->buffLen = 0;
 80296d4:	687b      	ldr	r3, [r7, #4]
 80296d6:	2200      	movs	r2, #0
 80296d8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    sha384->loLen   = 0;
 80296dc:	6879      	ldr	r1, [r7, #4]
 80296de:	f04f 0200 	mov.w	r2, #0
 80296e2:	f04f 0300 	mov.w	r3, #0
 80296e6:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
    sha384->hiLen   = 0;
 80296ea:	6879      	ldr	r1, [r7, #4]
 80296ec:	f04f 0200 	mov.w	r2, #0
 80296f0:	f04f 0300 	mov.w	r3, #0
 80296f4:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
#endif
#ifdef WOLFSSL_HASH_FLAGS
    sha384->flags = 0;
#endif

    return 0;
 80296f8:	2300      	movs	r3, #0
}
 80296fa:	4618      	mov	r0, r3
 80296fc:	370c      	adds	r7, #12
 80296fe:	46bd      	mov	sp, r7
 8029700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029704:	4770      	bx	lr
 8029706:	bf00      	nop
 8029708:	c1059ed8 	.word	0xc1059ed8
 802970c:	cbbb9d5d 	.word	0xcbbb9d5d
 8029710:	367cd507 	.word	0x367cd507
 8029714:	629a292a 	.word	0x629a292a
 8029718:	3070dd17 	.word	0x3070dd17
 802971c:	9159015a 	.word	0x9159015a
 8029720:	f70e5939 	.word	0xf70e5939
 8029724:	152fecd8 	.word	0x152fecd8
 8029728:	ffc00b31 	.word	0xffc00b31
 802972c:	67332667 	.word	0x67332667
 8029730:	68581511 	.word	0x68581511
 8029734:	8eb44a87 	.word	0x8eb44a87
 8029738:	64f98fa7 	.word	0x64f98fa7
 802973c:	db0c2e0d 	.word	0xdb0c2e0d
 8029740:	befa4fa4 	.word	0xbefa4fa4
 8029744:	47b5481d 	.word	0x47b5481d

08029748 <wc_Sha384Update>:

int wc_Sha384Update(wc_Sha384* sha384, const byte* data, word32 len)
{
 8029748:	b580      	push	{r7, lr}
 802974a:	b084      	sub	sp, #16
 802974c:	af00      	add	r7, sp, #0
 802974e:	60f8      	str	r0, [r7, #12]
 8029750:	60b9      	str	r1, [r7, #8]
 8029752:	607a      	str	r2, [r7, #4]
    if (sha384 == NULL || (data == NULL && len > 0)) {
 8029754:	68fb      	ldr	r3, [r7, #12]
 8029756:	2b00      	cmp	r3, #0
 8029758:	d005      	beq.n	8029766 <wc_Sha384Update+0x1e>
 802975a:	68bb      	ldr	r3, [r7, #8]
 802975c:	2b00      	cmp	r3, #0
 802975e:	d105      	bne.n	802976c <wc_Sha384Update+0x24>
 8029760:	687b      	ldr	r3, [r7, #4]
 8029762:	2b00      	cmp	r3, #0
 8029764:	d002      	beq.n	802976c <wc_Sha384Update+0x24>
        return BAD_FUNC_ARG;
 8029766:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 802976a:	e005      	b.n	8029778 <wc_Sha384Update+0x30>
        return IntelQaSymSha384(&sha384->asyncDev, NULL, data, len);
    #endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    return Sha512Update((wc_Sha512*)sha384, data, len);
 802976c:	687a      	ldr	r2, [r7, #4]
 802976e:	68b9      	ldr	r1, [r7, #8]
 8029770:	68f8      	ldr	r0, [r7, #12]
 8029772:	f7ff fdc5 	bl	8029300 <Sha512Update>
 8029776:	4603      	mov	r3, r0
}
 8029778:	4618      	mov	r0, r3
 802977a:	3710      	adds	r7, #16
 802977c:	46bd      	mov	sp, r7
 802977e:	bd80      	pop	{r7, pc}

08029780 <wc_Sha384Final>:

    return 0;
}

int wc_Sha384Final(wc_Sha384* sha384, byte* hash)
{
 8029780:	b580      	push	{r7, lr}
 8029782:	b084      	sub	sp, #16
 8029784:	af00      	add	r7, sp, #0
 8029786:	6078      	str	r0, [r7, #4]
 8029788:	6039      	str	r1, [r7, #0]
    int ret;

    if (sha384 == NULL || hash == NULL) {
 802978a:	687b      	ldr	r3, [r7, #4]
 802978c:	2b00      	cmp	r3, #0
 802978e:	d002      	beq.n	8029796 <wc_Sha384Final+0x16>
 8029790:	683b      	ldr	r3, [r7, #0]
 8029792:	2b00      	cmp	r3, #0
 8029794:	d102      	bne.n	802979c <wc_Sha384Final+0x1c>
        return BAD_FUNC_ARG;
 8029796:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 802979a:	e012      	b.n	80297c2 <wc_Sha384Final+0x42>
                                            WC_SHA384_DIGEST_SIZE);
    #endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    ret = Sha512Final((wc_Sha512*)sha384);
 802979c:	6878      	ldr	r0, [r7, #4]
 802979e:	f7ff fe64 	bl	802946a <Sha512Final>
 80297a2:	60f8      	str	r0, [r7, #12]
    if (ret != 0)
 80297a4:	68fb      	ldr	r3, [r7, #12]
 80297a6:	2b00      	cmp	r3, #0
 80297a8:	d001      	beq.n	80297ae <wc_Sha384Final+0x2e>
        return ret;
 80297aa:	68fb      	ldr	r3, [r7, #12]
 80297ac:	e009      	b.n	80297c2 <wc_Sha384Final+0x42>

    XMEMCPY(hash, sha384->digest, WC_SHA384_DIGEST_SIZE);
 80297ae:	687b      	ldr	r3, [r7, #4]
 80297b0:	2230      	movs	r2, #48	; 0x30
 80297b2:	4619      	mov	r1, r3
 80297b4:	6838      	ldr	r0, [r7, #0]
 80297b6:	f000 fe87 	bl	802a4c8 <memcpy>

    return InitSha384(sha384);  /* reset state */
 80297ba:	6878      	ldr	r0, [r7, #4]
 80297bc:	f7ff ff50 	bl	8029660 <InitSha384>
 80297c0:	4603      	mov	r3, r0
}
 80297c2:	4618      	mov	r0, r3
 80297c4:	3710      	adds	r7, #16
 80297c6:	46bd      	mov	sp, r7
 80297c8:	bd80      	pop	{r7, pc}

080297ca <wc_InitSha384_ex>:

int wc_InitSha384_ex(wc_Sha384* sha384, void* heap, int devId)
{
 80297ca:	b580      	push	{r7, lr}
 80297cc:	b086      	sub	sp, #24
 80297ce:	af00      	add	r7, sp, #0
 80297d0:	60f8      	str	r0, [r7, #12]
 80297d2:	60b9      	str	r1, [r7, #8]
 80297d4:	607a      	str	r2, [r7, #4]
    int ret;

    if (sha384 == NULL) {
 80297d6:	68fb      	ldr	r3, [r7, #12]
 80297d8:	2b00      	cmp	r3, #0
 80297da:	d102      	bne.n	80297e2 <wc_InitSha384_ex+0x18>
        return BAD_FUNC_ARG;
 80297dc:	f06f 03ac 	mvn.w	r3, #172	; 0xac
 80297e0:	e00d      	b.n	80297fe <wc_InitSha384_ex+0x34>
    }

    sha384->heap = heap;
 80297e2:	68fb      	ldr	r3, [r7, #12]
 80297e4:	68ba      	ldr	r2, [r7, #8]
 80297e6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
#ifdef WOLF_CRYPTO_CB
    sha384->devId = devId;
    sha384->devCtx = NULL;
#endif

    ret = InitSha384(sha384);
 80297ea:	68f8      	ldr	r0, [r7, #12]
 80297ec:	f7ff ff38 	bl	8029660 <InitSha384>
 80297f0:	6178      	str	r0, [r7, #20]
    if (ret != 0)
 80297f2:	697b      	ldr	r3, [r7, #20]
 80297f4:	2b00      	cmp	r3, #0
 80297f6:	d001      	beq.n	80297fc <wc_InitSha384_ex+0x32>
        return ret;
 80297f8:	697b      	ldr	r3, [r7, #20]
 80297fa:	e000      	b.n	80297fe <wc_InitSha384_ex+0x34>
                                                           sha384->heap, devId);
#else
    (void)devId;
#endif /* WOLFSSL_ASYNC_CRYPT */

    return ret;
 80297fc:	697b      	ldr	r3, [r7, #20]
}
 80297fe:	4618      	mov	r0, r3
 8029800:	3718      	adds	r7, #24
 8029802:	46bd      	mov	sp, r7
 8029804:	bd80      	pop	{r7, pc}

08029806 <wc_InitSha384>:

#endif /* WOLFSSL_IMX6_CAAM || WOLFSSL_SILABS_SHA512 || WOLFSSL_KCAPI_HASH */

int wc_InitSha384(wc_Sha384* sha384)
{
 8029806:	b580      	push	{r7, lr}
 8029808:	b082      	sub	sp, #8
 802980a:	af00      	add	r7, sp, #0
 802980c:	6078      	str	r0, [r7, #4]
    return wc_InitSha384_ex(sha384, NULL, INVALID_DEVID);
 802980e:	f06f 0201 	mvn.w	r2, #1
 8029812:	2100      	movs	r1, #0
 8029814:	6878      	ldr	r0, [r7, #4]
 8029816:	f7ff ffd8 	bl	80297ca <wc_InitSha384_ex>
 802981a:	4603      	mov	r3, r0
}
 802981c:	4618      	mov	r0, r3
 802981e:	3708      	adds	r7, #8
 8029820:	46bd      	mov	sp, r7
 8029822:	bd80      	pop	{r7, pc}

08029824 <wc_Sha384Free>:

void wc_Sha384Free(wc_Sha384* sha384)
{
 8029824:	b480      	push	{r7}
 8029826:	b083      	sub	sp, #12
 8029828:	af00      	add	r7, sp, #0
 802982a:	6078      	str	r0, [r7, #4]
    if (sha384 == NULL)
 802982c:	687b      	ldr	r3, [r7, #4]
 802982e:	2b00      	cmp	r3, #0


#if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_SHA384)
    wolfAsync_DevCtxFree(&sha384->asyncDev, WOLFSSL_ASYNC_MARKER_SHA384);
#endif /* WOLFSSL_ASYNC_CRYPT */
}
 8029830:	370c      	adds	r7, #12
 8029832:	46bd      	mov	sp, r7
 8029834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029838:	4770      	bx	lr

0802983a <wc_InitSha512_224>:

#if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)

#if !defined(WOLFSSL_NOSHA512_224)
int wc_InitSha512_224(wc_Sha512* sha)
{
 802983a:	b580      	push	{r7, lr}
 802983c:	b082      	sub	sp, #8
 802983e:	af00      	add	r7, sp, #0
 8029840:	6078      	str	r0, [r7, #4]
    return wc_InitSha512_224_ex(sha, NULL, INVALID_DEVID);
 8029842:	f06f 0201 	mvn.w	r2, #1
 8029846:	2100      	movs	r1, #0
 8029848:	6878      	ldr	r0, [r7, #4]
 802984a:	f7fb f9d7 	bl	8024bfc <wc_InitSha512_224_ex>
 802984e:	4603      	mov	r3, r0
}
 8029850:	4618      	mov	r0, r3
 8029852:	3708      	adds	r7, #8
 8029854:	46bd      	mov	sp, r7
 8029856:	bd80      	pop	{r7, pc}

08029858 <wc_Sha512_224Update>:
int wc_Sha512_224Update(wc_Sha512* sha, const byte* data, word32 len)
{
 8029858:	b580      	push	{r7, lr}
 802985a:	b084      	sub	sp, #16
 802985c:	af00      	add	r7, sp, #0
 802985e:	60f8      	str	r0, [r7, #12]
 8029860:	60b9      	str	r1, [r7, #8]
 8029862:	607a      	str	r2, [r7, #4]
    return wc_Sha512Update(sha, data, len);
 8029864:	687a      	ldr	r2, [r7, #4]
 8029866:	68b9      	ldr	r1, [r7, #8]
 8029868:	68f8      	ldr	r0, [r7, #12]
 802986a:	f7ff fde2 	bl	8029432 <wc_Sha512Update>
 802986e:	4603      	mov	r3, r0
}
 8029870:	4618      	mov	r0, r3
 8029872:	3710      	adds	r7, #16
 8029874:	46bd      	mov	sp, r7
 8029876:	bd80      	pop	{r7, pc}

08029878 <wc_Sha512_224Final>:
int wc_Sha512_224FinalRaw(wc_Sha512* sha, byte* hash)
{
    return Sha512FinalRaw(sha, hash, WC_SHA512_224_DIGEST_SIZE);
}
int wc_Sha512_224Final(wc_Sha512* sha512, byte* hash)
{
 8029878:	b580      	push	{r7, lr}
 802987a:	b082      	sub	sp, #8
 802987c:	af00      	add	r7, sp, #0
 802987e:	6078      	str	r0, [r7, #4]
 8029880:	6039      	str	r1, [r7, #0]
    return Sha512_Family_Final(sha512, hash, WC_SHA512_224_DIGEST_SIZE,
 8029882:	4b05      	ldr	r3, [pc, #20]	; (8029898 <wc_Sha512_224Final+0x20>)
 8029884:	221c      	movs	r2, #28
 8029886:	6839      	ldr	r1, [r7, #0]
 8029888:	6878      	ldr	r0, [r7, #4]
 802988a:	f7ff fe95 	bl	80295b8 <Sha512_Family_Final>
 802988e:	4603      	mov	r3, r0
                               InitSha512_224);
}
 8029890:	4618      	mov	r0, r3
 8029892:	3708      	adds	r7, #8
 8029894:	46bd      	mov	sp, r7
 8029896:	bd80      	pop	{r7, pc}
 8029898:	080249c1 	.word	0x080249c1

0802989c <wc_Sha512_224Free>:
#endif
void wc_Sha512_224Free(wc_Sha512* sha)
{
 802989c:	b580      	push	{r7, lr}
 802989e:	b082      	sub	sp, #8
 80298a0:	af00      	add	r7, sp, #0
 80298a2:	6078      	str	r0, [r7, #4]
    wc_Sha512Free(sha);
 80298a4:	6878      	ldr	r0, [r7, #4]
 80298a6:	f7ff fed0 	bl	802964a <wc_Sha512Free>
}
 80298aa:	bf00      	nop
 80298ac:	3708      	adds	r7, #8
 80298ae:	46bd      	mov	sp, r7
 80298b0:	bd80      	pop	{r7, pc}

080298b2 <wc_InitSha512_256>:

#endif /* !WOLFSSL_NOSHA512_224 */

#if !defined(WOLFSSL_NOSHA512_256)
int wc_InitSha512_256(wc_Sha512* sha)
{
 80298b2:	b580      	push	{r7, lr}
 80298b4:	b082      	sub	sp, #8
 80298b6:	af00      	add	r7, sp, #0
 80298b8:	6078      	str	r0, [r7, #4]
    return wc_InitSha512_256_ex(sha, NULL, INVALID_DEVID);
 80298ba:	f06f 0201 	mvn.w	r2, #1
 80298be:	2100      	movs	r1, #0
 80298c0:	6878      	ldr	r0, [r7, #4]
 80298c2:	f7fb f9af 	bl	8024c24 <wc_InitSha512_256_ex>
 80298c6:	4603      	mov	r3, r0
}
 80298c8:	4618      	mov	r0, r3
 80298ca:	3708      	adds	r7, #8
 80298cc:	46bd      	mov	sp, r7
 80298ce:	bd80      	pop	{r7, pc}

080298d0 <wc_Sha512_256Update>:
int wc_Sha512_256Update(wc_Sha512* sha, const byte* data, word32 len)
{
 80298d0:	b580      	push	{r7, lr}
 80298d2:	b084      	sub	sp, #16
 80298d4:	af00      	add	r7, sp, #0
 80298d6:	60f8      	str	r0, [r7, #12]
 80298d8:	60b9      	str	r1, [r7, #8]
 80298da:	607a      	str	r2, [r7, #4]
    return wc_Sha512Update(sha, data, len);
 80298dc:	687a      	ldr	r2, [r7, #4]
 80298de:	68b9      	ldr	r1, [r7, #8]
 80298e0:	68f8      	ldr	r0, [r7, #12]
 80298e2:	f7ff fda6 	bl	8029432 <wc_Sha512Update>
 80298e6:	4603      	mov	r3, r0
}
 80298e8:	4618      	mov	r0, r3
 80298ea:	3710      	adds	r7, #16
 80298ec:	46bd      	mov	sp, r7
 80298ee:	bd80      	pop	{r7, pc}

080298f0 <wc_Sha512_256Final>:
int wc_Sha512_256FinalRaw(wc_Sha512* sha, byte* hash)
{
    return Sha512FinalRaw(sha, hash, WC_SHA512_256_DIGEST_SIZE);
}
int wc_Sha512_256Final(wc_Sha512* sha512, byte* hash)
{
 80298f0:	b580      	push	{r7, lr}
 80298f2:	b082      	sub	sp, #8
 80298f4:	af00      	add	r7, sp, #0
 80298f6:	6078      	str	r0, [r7, #4]
 80298f8:	6039      	str	r1, [r7, #0]
    return Sha512_Family_Final(sha512, hash, WC_SHA512_256_DIGEST_SIZE,
 80298fa:	4b05      	ldr	r3, [pc, #20]	; (8029910 <wc_Sha512_256Final+0x20>)
 80298fc:	2220      	movs	r2, #32
 80298fe:	6839      	ldr	r1, [r7, #0]
 8029900:	6878      	ldr	r0, [r7, #4]
 8029902:	f7ff fe59 	bl	80295b8 <Sha512_Family_Final>
 8029906:	4603      	mov	r3, r0
                               InitSha512_256);
}
 8029908:	4618      	mov	r0, r3
 802990a:	3708      	adds	r7, #8
 802990c:	46bd      	mov	sp, r7
 802990e:	bd80      	pop	{r7, pc}
 8029910:	08024aa9 	.word	0x08024aa9

08029914 <wc_Sha512_256Free>:
#endif
void wc_Sha512_256Free(wc_Sha512* sha)
{
 8029914:	b580      	push	{r7, lr}
 8029916:	b082      	sub	sp, #8
 8029918:	af00      	add	r7, sp, #0
 802991a:	6078      	str	r0, [r7, #4]
    wc_Sha512Free(sha);
 802991c:	6878      	ldr	r0, [r7, #4]
 802991e:	f7ff fe94 	bl	802964a <wc_Sha512Free>
}
 8029922:	bf00      	nop
 8029924:	3708      	adds	r7, #8
 8029926:	46bd      	mov	sp, r7
 8029928:	bd80      	pop	{r7, pc}
	...

0802992c <wolfCrypt_Init>:

/* Used to initialize state for wolfcrypt
   return 0 on success
 */
int wolfCrypt_Init(void)
{
 802992c:	b480      	push	{r7}
 802992e:	b083      	sub	sp, #12
 8029930:	af00      	add	r7, sp, #0
    int ret = 0;
 8029932:	2300      	movs	r3, #0
 8029934:	607b      	str	r3, [r7, #4]
    if (initRefCount == 0) {
 8029936:	4b07      	ldr	r3, [pc, #28]	; (8029954 <wolfCrypt_Init+0x28>)
 8029938:	681b      	ldr	r3, [r3, #0]
            return ret;
        }
        rpcmem_init();
#endif
    }
    initRefCount++;
 802993a:	4b06      	ldr	r3, [pc, #24]	; (8029954 <wolfCrypt_Init+0x28>)
 802993c:	681b      	ldr	r3, [r3, #0]
 802993e:	3301      	adds	r3, #1
 8029940:	4a04      	ldr	r2, [pc, #16]	; (8029954 <wolfCrypt_Init+0x28>)
 8029942:	6013      	str	r3, [r2, #0]

    return ret;
 8029944:	687b      	ldr	r3, [r7, #4]
}
 8029946:	4618      	mov	r0, r3
 8029948:	370c      	adds	r7, #12
 802994a:	46bd      	mov	sp, r7
 802994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029950:	4770      	bx	lr
 8029952:	bf00      	nop
 8029954:	2401e554 	.word	0x2401e554

08029958 <wolfCrypt_Cleanup>:
}
#endif

/* return success value is the same as wolfCrypt_Init */
int wolfCrypt_Cleanup(void)
{
 8029958:	b480      	push	{r7}
 802995a:	b083      	sub	sp, #12
 802995c:	af00      	add	r7, sp, #0
    int ret = 0;
 802995e:	2300      	movs	r3, #0
 8029960:	607b      	str	r3, [r7, #4]

    initRefCount--;
 8029962:	4b0a      	ldr	r3, [pc, #40]	; (802998c <wolfCrypt_Cleanup+0x34>)
 8029964:	681b      	ldr	r3, [r3, #0]
 8029966:	3b01      	subs	r3, #1
 8029968:	4a08      	ldr	r2, [pc, #32]	; (802998c <wolfCrypt_Cleanup+0x34>)
 802996a:	6013      	str	r3, [r2, #0]
    if (initRefCount < 0)
 802996c:	4b07      	ldr	r3, [pc, #28]	; (802998c <wolfCrypt_Cleanup+0x34>)
 802996e:	681b      	ldr	r3, [r3, #0]
 8029970:	2b00      	cmp	r3, #0
 8029972:	da02      	bge.n	802997a <wolfCrypt_Cleanup+0x22>
        initRefCount = 0;
 8029974:	4b05      	ldr	r3, [pc, #20]	; (802998c <wolfCrypt_Cleanup+0x34>)
 8029976:	2200      	movs	r2, #0
 8029978:	601a      	str	r2, [r3, #0]

    if (initRefCount == 0) {
 802997a:	4b04      	ldr	r3, [pc, #16]	; (802998c <wolfCrypt_Cleanup+0x34>)
 802997c:	681b      	ldr	r3, [r3, #0]
    #if defined(WOLFSSL_LINUXKM_SIMD_X86)
        free_wolfcrypt_linuxkm_fpu_states();
    #endif
    }

    return ret;
 802997e:	687b      	ldr	r3, [r7, #4]
}
 8029980:	4618      	mov	r0, r3
 8029982:	370c      	adds	r7, #12
 8029984:	46bd      	mov	sp, r7
 8029986:	f85d 7b04 	ldr.w	r7, [sp], #4
 802998a:	4770      	bx	lr
 802998c:	2401e554 	.word	0x2401e554

08029990 <hash_data>:



char print_string[200];

void hash_data(enum wc_HashType type,char* data){
 8029990:	b590      	push	{r4, r7, lr}
 8029992:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 8029996:	af02      	add	r7, sp, #8
 8029998:	4602      	mov	r2, r0
 802999a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 802999e:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80299a2:	6019      	str	r1, [r3, #0]
 80299a4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80299a8:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 80299ac:	701a      	strb	r2, [r3, #0]

byte result[512];
clock_t tick,tock;
double spent;
word32 hash_len = wc_HashGetDigestSize(type);
 80299ae:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80299b2:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 80299b6:	781b      	ldrb	r3, [r3, #0]
 80299b8:	4618      	mov	r0, r3
 80299ba:	f7f3 f8db 	bl	801cb74 <wc_HashGetDigestSize>
 80299be:	4603      	mov	r3, r0
 80299c0:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
int i, ret;
int byte_value;

 tick =  clock();
 80299c4:	f000 fd32 	bl	802a42c <clock>
 80299c8:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
 if(wc_Hash(type,(byte*)data,strlen(data),result,hash_len))
 80299cc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80299d0:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80299d4:	6818      	ldr	r0, [r3, #0]
 80299d6:	f7d6 fc83 	bl	80002e0 <strlen>
 80299da:	4604      	mov	r4, r0
 80299dc:	f107 020c 	add.w	r2, r7, #12
 80299e0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80299e4:	f5a3 710a 	sub.w	r1, r3, #552	; 0x228
 80299e8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80299ec:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 80299f0:	7818      	ldrb	r0, [r3, #0]
 80299f2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80299f6:	9300      	str	r3, [sp, #0]
 80299f8:	4613      	mov	r3, r2
 80299fa:	4622      	mov	r2, r4
 80299fc:	6809      	ldr	r1, [r1, #0]
 80299fe:	f7f3 f921 	bl	801cc44 <wc_Hash>
 8029a02:	4603      	mov	r3, r0
 8029a04:	2b00      	cmp	r3, #0
 8029a06:	d003      	beq.n	8029a10 <hash_data+0x80>
     sprintf(print_string,"ERROR\n");
 8029a08:	4926      	ldr	r1, [pc, #152]	; (8029aa4 <hash_data+0x114>)
 8029a0a:	4827      	ldr	r0, [pc, #156]	; (8029aa8 <hash_data+0x118>)
 8029a0c:	f001 fb34 	bl	802b078 <siprintf>
 tock = clock();
 8029a10:	f000 fd0c 	bl	802a42c <clock>
 8029a14:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
 spent = (float)(tock - tick) / CLOCKS_PER_SEC;
 8029a18:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8029a1c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8029a20:	1ad3      	subs	r3, r2, r3
 8029a22:	ee07 3a90 	vmov	s15, r3
 8029a26:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8029a2a:	eddf 6a20 	vldr	s13, [pc, #128]	; 8029aac <hash_data+0x11c>
 8029a2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8029a32:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8029a36:	ed87 7b84 	vstr	d7, [r7, #528]	; 0x210
  sprintf(print_string,"Elapsed time: %.0lf nanoseconds\n", spent);
 8029a3a:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 8029a3e:	491c      	ldr	r1, [pc, #112]	; (8029ab0 <hash_data+0x120>)
 8029a40:	4819      	ldr	r0, [pc, #100]	; (8029aa8 <hash_data+0x118>)
 8029a42:	f001 fb19 	bl	802b078 <siprintf>
  HAL_UART_Transmit(&HAL_CONSOLE_UART,(uint8_t*)print_string, strlen(print_string), 60);
 8029a46:	4818      	ldr	r0, [pc, #96]	; (8029aa8 <hash_data+0x118>)
 8029a48:	f7d6 fc4a 	bl	80002e0 <strlen>
 8029a4c:	4603      	mov	r3, r0
 8029a4e:	b29a      	uxth	r2, r3
 8029a50:	233c      	movs	r3, #60	; 0x3c
 8029a52:	4915      	ldr	r1, [pc, #84]	; (8029aa8 <hash_data+0x118>)
 8029a54:	4817      	ldr	r0, [pc, #92]	; (8029ab4 <hash_data+0x124>)
 8029a56:	f7da fe69 	bl	800472c <HAL_UART_Transmit>
 #ifdef DEBUG
    for(i = 0;i < hash_len;i++)
 8029a5a:	2300      	movs	r3, #0
 8029a5c:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8029a60:	e014      	b.n	8029a8c <hash_data+0xfc>
    {
      byte_value = result[i];
 8029a62:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8029a66:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 8029a6a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8029a6e:	4413      	add	r3, r2
 8029a70:	781b      	ldrb	r3, [r3, #0]
 8029a72:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
      sprintf("%x",byte_value);
 8029a76:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8029a7a:	4619      	mov	r1, r3
 8029a7c:	480e      	ldr	r0, [pc, #56]	; (8029ab8 <hash_data+0x128>)
 8029a7e:	f001 fafb 	bl	802b078 <siprintf>
    for(i = 0;i < hash_len;i++)
 8029a82:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8029a86:	3301      	adds	r3, #1
 8029a88:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8029a8c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8029a90:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8029a94:	429a      	cmp	r2, r3
 8029a96:	d8e4      	bhi.n	8029a62 <hash_data+0xd2>
    }
   // sprintf("\n");
  #endif
}
 8029a98:	bf00      	nop
 8029a9a:	bf00      	nop
 8029a9c:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8029aa0:	46bd      	mov	sp, r7
 8029aa2:	bd90      	pop	{r4, r7, pc}
 8029aa4:	0802d278 	.word	0x0802d278
 8029aa8:	2401e558 	.word	0x2401e558
 8029aac:	42c80000 	.word	0x42c80000
 8029ab0:	0802d280 	.word	0x0802d280
 8029ab4:	24000250 	.word	0x24000250
 8029ab8:	0802d2a4 	.word	0x0802d2a4

08029abc <hash_blake2b>:
void hash_blake2b(char* data, int digestsize)
{
 8029abc:	b580      	push	{r7, lr}
 8029abe:	b0f6      	sub	sp, #472	; 0x1d8
 8029ac0:	af00      	add	r7, sp, #0
 8029ac2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8029ac6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8029aca:	6018      	str	r0, [r3, #0]
 8029acc:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8029ad0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8029ad4:	6019      	str	r1, [r3, #0]
  byte hash[64];

  // initialize Blake2b structure with 64 byte digest
  clock_t tick,tock;
  double spent;
  tick =  clock();
 8029ad6:	f000 fca9 	bl	802a42c <clock>
 8029ada:	f8c7 01d0 	str.w	r0, [r7, #464]	; 0x1d0
  wc_InitBlake2b(&b2b, digestsize);
 8029ade:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8029ae2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8029ae6:	681a      	ldr	r2, [r3, #0]
 8029ae8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8029aec:	4611      	mov	r1, r2
 8029aee:	4618      	mov	r0, r3
 8029af0:	f7ee f8c5 	bl	8017c7e <wc_InitBlake2b>
  wc_Blake2bUpdate(&b2b,(byte*)data,strlen(data));
 8029af4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8029af8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8029afc:	6818      	ldr	r0, [r3, #0]
 8029afe:	f7d6 fbef 	bl	80002e0 <strlen>
 8029b02:	4602      	mov	r2, r0
 8029b04:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8029b08:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8029b0c:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8029b10:	6819      	ldr	r1, [r3, #0]
 8029b12:	f7ee f8cf 	bl	8017cb4 <wc_Blake2bUpdate>
  ret = wc_Blake2bFinal(&b2b, hash, digestsize);
 8029b16:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8029b1a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8029b1e:	681a      	ldr	r2, [r3, #0]
 8029b20:	f107 010c 	add.w	r1, r7, #12
 8029b24:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8029b28:	4618      	mov	r0, r3
 8029b2a:	f7ee f8d8 	bl	8017cde <wc_Blake2bFinal>
 8029b2e:	f8c7 01cc 	str.w	r0, [r7, #460]	; 0x1cc
  if( ret != 0) {
 8029b32:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8029b36:	2b00      	cmp	r3, #0
 8029b38:	d003      	beq.n	8029b42 <hash_blake2b+0x86>
	  sprintf(print_string,"ERROR\n");
 8029b3a:	4928      	ldr	r1, [pc, #160]	; (8029bdc <hash_blake2b+0x120>)
 8029b3c:	4828      	ldr	r0, [pc, #160]	; (8029be0 <hash_blake2b+0x124>)
 8029b3e:	f001 fa9b 	bl	802b078 <siprintf>
  }
  tock = clock();
 8029b42:	f000 fc73 	bl	802a42c <clock>
 8029b46:	f8c7 01c8 	str.w	r0, [r7, #456]	; 0x1c8
  spent = (float)(tock - tick) / CLOCKS_PER_SEC;
 8029b4a:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8029b4e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8029b52:	1ad3      	subs	r3, r2, r3
 8029b54:	ee07 3a90 	vmov	s15, r3
 8029b58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8029b5c:	eddf 6a21 	vldr	s13, [pc, #132]	; 8029be4 <hash_blake2b+0x128>
 8029b60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8029b64:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8029b68:	ed87 7b70 	vstr	d7, [r7, #448]	; 0x1c0
  sprintf(print_string,"Elapsed time: %.0lf nanoseconds\n", spent);
 8029b6c:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8029b70:	491d      	ldr	r1, [pc, #116]	; (8029be8 <hash_blake2b+0x12c>)
 8029b72:	481b      	ldr	r0, [pc, #108]	; (8029be0 <hash_blake2b+0x124>)
 8029b74:	f001 fa80 	bl	802b078 <siprintf>
  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 8029b78:	4819      	ldr	r0, [pc, #100]	; (8029be0 <hash_blake2b+0x124>)
 8029b7a:	f7d6 fbb1 	bl	80002e0 <strlen>
 8029b7e:	4603      	mov	r3, r0
 8029b80:	b29a      	uxth	r2, r3
 8029b82:	233c      	movs	r3, #60	; 0x3c
 8029b84:	4916      	ldr	r1, [pc, #88]	; (8029be0 <hash_blake2b+0x124>)
 8029b86:	4819      	ldr	r0, [pc, #100]	; (8029bec <hash_blake2b+0x130>)
 8029b88:	f7da fdd0 	bl	800472c <HAL_UART_Transmit>
  #ifdef DEBUG
    for(i = 0;i < digestsize;i++)
 8029b8c:	2300      	movs	r3, #0
 8029b8e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8029b92:	e014      	b.n	8029bbe <hash_blake2b+0x102>
    {
      byte_value = hash[i];
 8029b94:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8029b98:	f5a3 72e6 	sub.w	r2, r3, #460	; 0x1cc
 8029b9c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8029ba0:	4413      	add	r3, r2
 8029ba2:	781b      	ldrb	r3, [r3, #0]
 8029ba4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
      sprintf("%x",byte_value);
 8029ba8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8029bac:	4619      	mov	r1, r3
 8029bae:	4810      	ldr	r0, [pc, #64]	; (8029bf0 <hash_blake2b+0x134>)
 8029bb0:	f001 fa62 	bl	802b078 <siprintf>
    for(i = 0;i < digestsize;i++)
 8029bb4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8029bb8:	3301      	adds	r3, #1
 8029bba:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8029bbe:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8029bc2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8029bc6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8029bca:	681b      	ldr	r3, [r3, #0]
 8029bcc:	429a      	cmp	r2, r3
 8029bce:	dbe1      	blt.n	8029b94 <hash_blake2b+0xd8>
    }
   // sprintf("\n");
  #endif
}
 8029bd0:	bf00      	nop
 8029bd2:	bf00      	nop
 8029bd4:	f507 77ec 	add.w	r7, r7, #472	; 0x1d8
 8029bd8:	46bd      	mov	sp, r7
 8029bda:	bd80      	pop	{r7, pc}
 8029bdc:	0802d278 	.word	0x0802d278
 8029be0:	2401e558 	.word	0x2401e558
 8029be4:	42c80000 	.word	0x42c80000
 8029be8:	0802d280 	.word	0x0802d280
 8029bec:	24000250 	.word	0x24000250
 8029bf0:	0802d2a4 	.word	0x0802d2a4

08029bf4 <hash_blake2s>:

void hash_blake2s(char* data, int digestsize)
{
 8029bf4:	b580      	push	{r7, lr}
 8029bf6:	b0c8      	sub	sp, #288	; 0x120
 8029bf8:	af00      	add	r7, sp, #0
 8029bfa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8029bfe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8029c02:	6018      	str	r0, [r3, #0]
 8029c04:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8029c08:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8029c0c:	6019      	str	r1, [r3, #0]
  byte hash[64];

  // initialize Blake2b structure with 64 byte digest
  clock_t tick,tock;
  double spent;
  tick =  clock();
 8029c0e:	f000 fc0d 	bl	802a42c <clock>
 8029c12:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
  wc_InitBlake2s(&b2s, digestsize);
 8029c16:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8029c1a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8029c1e:	681a      	ldr	r2, [r3, #0]
 8029c20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8029c24:	4611      	mov	r1, r2
 8029c26:	4618      	mov	r0, r3
 8029c28:	f7f2 ff5d 	bl	801cae6 <wc_InitBlake2s>
  wc_Blake2sUpdate(&b2s,(byte*)data,strlen(data));
 8029c2c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8029c30:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8029c34:	6818      	ldr	r0, [r3, #0]
 8029c36:	f7d6 fb53 	bl	80002e0 <strlen>
 8029c3a:	4602      	mov	r2, r0
 8029c3c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8029c40:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8029c44:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8029c48:	6819      	ldr	r1, [r3, #0]
 8029c4a:	f7f2 ff67 	bl	801cb1c <wc_Blake2sUpdate>
  ret = wc_Blake2sFinal(&b2s, hash, digestsize);
 8029c4e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8029c52:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8029c56:	681a      	ldr	r2, [r3, #0]
 8029c58:	f107 0108 	add.w	r1, r7, #8
 8029c5c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8029c60:	4618      	mov	r0, r3
 8029c62:	f7f2 ff6c 	bl	801cb3e <wc_Blake2sFinal>
 8029c66:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  if( ret != 0) {
 8029c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8029c6e:	2b00      	cmp	r3, #0
 8029c70:	d003      	beq.n	8029c7a <hash_blake2s+0x86>
	  sprintf(print_string,"ERROR\n");
 8029c72:	4928      	ldr	r1, [pc, #160]	; (8029d14 <hash_blake2s+0x120>)
 8029c74:	4828      	ldr	r0, [pc, #160]	; (8029d18 <hash_blake2s+0x124>)
 8029c76:	f001 f9ff 	bl	802b078 <siprintf>
  }
  tock = clock();
 8029c7a:	f000 fbd7 	bl	802a42c <clock>
 8029c7e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
  spent = (float)(tock - tick) / CLOCKS_PER_SEC;
 8029c82:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8029c86:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8029c8a:	1ad3      	subs	r3, r2, r3
 8029c8c:	ee07 3a90 	vmov	s15, r3
 8029c90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8029c94:	eddf 6a21 	vldr	s13, [pc, #132]	; 8029d1c <hash_blake2s+0x128>
 8029c98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8029c9c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8029ca0:	ed87 7b42 	vstr	d7, [r7, #264]	; 0x108
  sprintf(print_string,"Elapsed time: %.0lf nanoseconds\n", spent);
 8029ca4:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8029ca8:	491d      	ldr	r1, [pc, #116]	; (8029d20 <hash_blake2s+0x12c>)
 8029caa:	481b      	ldr	r0, [pc, #108]	; (8029d18 <hash_blake2s+0x124>)
 8029cac:	f001 f9e4 	bl	802b078 <siprintf>
  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 8029cb0:	4819      	ldr	r0, [pc, #100]	; (8029d18 <hash_blake2s+0x124>)
 8029cb2:	f7d6 fb15 	bl	80002e0 <strlen>
 8029cb6:	4603      	mov	r3, r0
 8029cb8:	b29a      	uxth	r2, r3
 8029cba:	233c      	movs	r3, #60	; 0x3c
 8029cbc:	4916      	ldr	r1, [pc, #88]	; (8029d18 <hash_blake2s+0x124>)
 8029cbe:	4819      	ldr	r0, [pc, #100]	; (8029d24 <hash_blake2s+0x130>)
 8029cc0:	f7da fd34 	bl	800472c <HAL_UART_Transmit>
  #ifdef DEBUG
    for(i = 0;i < digestsize;i++)
 8029cc4:	2300      	movs	r3, #0
 8029cc6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8029cca:	e014      	b.n	8029cf6 <hash_blake2s+0x102>
    {
      byte_value = hash[i];
 8029ccc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8029cd0:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8029cd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8029cd8:	4413      	add	r3, r2
 8029cda:	781b      	ldrb	r3, [r3, #0]
 8029cdc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
      sprintf(print_string,"%x",byte_value);
 8029ce0:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8029ce4:	4910      	ldr	r1, [pc, #64]	; (8029d28 <hash_blake2s+0x134>)
 8029ce6:	480c      	ldr	r0, [pc, #48]	; (8029d18 <hash_blake2s+0x124>)
 8029ce8:	f001 f9c6 	bl	802b078 <siprintf>
    for(i = 0;i < digestsize;i++)
 8029cec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8029cf0:	3301      	adds	r3, #1
 8029cf2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8029cf6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8029cfa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8029cfe:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8029d02:	681b      	ldr	r3, [r3, #0]
 8029d04:	429a      	cmp	r2, r3
 8029d06:	dbe1      	blt.n	8029ccc <hash_blake2s+0xd8>
    }
  //  HAL_UART_transmit("\n");
  #endif
}
 8029d08:	bf00      	nop
 8029d0a:	bf00      	nop
 8029d0c:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8029d10:	46bd      	mov	sp, r7
 8029d12:	bd80      	pop	{r7, pc}
 8029d14:	0802d278 	.word	0x0802d278
 8029d18:	2401e558 	.word	0x2401e558
 8029d1c:	42c80000 	.word	0x42c80000
 8029d20:	0802d280 	.word	0x0802d280
 8029d24:	24000250 	.word	0x24000250
 8029d28:	0802d2a4 	.word	0x0802d2a4

08029d2c <wolfCryptDemo>:
char data[] = "The quick brown fox jumps over the lazy dog";
byte result[32];


void wolfCryptDemo(const void* argument)
{
 8029d2c:	b580      	push	{r7, lr}
 8029d2e:	b094      	sub	sp, #80	; 0x50
 8029d30:	af00      	add	r7, sp, #0
 8029d32:	6078      	str	r0, [r7, #4]

	sprintf(print_string,"Starting MD5\n");
 8029d34:	499f      	ldr	r1, [pc, #636]	; (8029fb4 <wolfCryptDemo+0x288>)
 8029d36:	48a0      	ldr	r0, [pc, #640]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029d38:	f001 f99e 	bl	802b078 <siprintf>
	HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 8029d3c:	489e      	ldr	r0, [pc, #632]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029d3e:	f7d6 facf 	bl	80002e0 <strlen>
 8029d42:	4603      	mov	r3, r0
 8029d44:	b29a      	uxth	r2, r3
 8029d46:	233c      	movs	r3, #60	; 0x3c
 8029d48:	499b      	ldr	r1, [pc, #620]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029d4a:	489c      	ldr	r0, [pc, #624]	; (8029fbc <wolfCryptDemo+0x290>)
 8029d4c:	f7da fcee 	bl	800472c <HAL_UART_Transmit>
	#ifdef REPEAT
	  for(int i = 0;i<REP_TIMES;i++)
 8029d50:	2300      	movs	r3, #0
 8029d52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8029d54:	e006      	b.n	8029d64 <wolfCryptDemo+0x38>
	#endif
	    hash_data(WC_HASH_TYPE_MD5,data);
 8029d56:	499a      	ldr	r1, [pc, #616]	; (8029fc0 <wolfCryptDemo+0x294>)
 8029d58:	2003      	movs	r0, #3
 8029d5a:	f7ff fe19 	bl	8029990 <hash_data>
	  for(int i = 0;i<REP_TIMES;i++)
 8029d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029d60:	3301      	adds	r3, #1
 8029d62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8029d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029d66:	2b0e      	cmp	r3, #14
 8029d68:	ddf5      	ble.n	8029d56 <wolfCryptDemo+0x2a>
	  sprintf(print_string,"Finished MD5\n");
 8029d6a:	4996      	ldr	r1, [pc, #600]	; (8029fc4 <wolfCryptDemo+0x298>)
 8029d6c:	4892      	ldr	r0, [pc, #584]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029d6e:	f001 f983 	bl	802b078 <siprintf>
	  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 8029d72:	4891      	ldr	r0, [pc, #580]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029d74:	f7d6 fab4 	bl	80002e0 <strlen>
 8029d78:	4603      	mov	r3, r0
 8029d7a:	b29a      	uxth	r2, r3
 8029d7c:	233c      	movs	r3, #60	; 0x3c
 8029d7e:	498e      	ldr	r1, [pc, #568]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029d80:	488e      	ldr	r0, [pc, #568]	; (8029fbc <wolfCryptDemo+0x290>)
 8029d82:	f7da fcd3 	bl	800472c <HAL_UART_Transmit>
	 // HAL_UART_Transmit("################################\n");
	  wolfCrypt_Cleanup();
 8029d86:	f7ff fde7 	bl	8029958 <wolfCrypt_Cleanup>
	  wolfCrypt_Init();
 8029d8a:	f7ff fdcf 	bl	802992c <wolfCrypt_Init>

	  sprintf(print_string,"Starting SHA1\n");
 8029d8e:	498e      	ldr	r1, [pc, #568]	; (8029fc8 <wolfCryptDemo+0x29c>)
 8029d90:	4889      	ldr	r0, [pc, #548]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029d92:	f001 f971 	bl	802b078 <siprintf>
	  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 8029d96:	4888      	ldr	r0, [pc, #544]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029d98:	f7d6 faa2 	bl	80002e0 <strlen>
 8029d9c:	4603      	mov	r3, r0
 8029d9e:	b29a      	uxth	r2, r3
 8029da0:	233c      	movs	r3, #60	; 0x3c
 8029da2:	4985      	ldr	r1, [pc, #532]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029da4:	4885      	ldr	r0, [pc, #532]	; (8029fbc <wolfCryptDemo+0x290>)
 8029da6:	f7da fcc1 	bl	800472c <HAL_UART_Transmit>
	#ifdef REPEAT
	  for(int i = 0;i<REP_TIMES;i++)
 8029daa:	2300      	movs	r3, #0
 8029dac:	64bb      	str	r3, [r7, #72]	; 0x48
 8029dae:	e006      	b.n	8029dbe <wolfCryptDemo+0x92>
	#endif
	    hash_data(WC_HASH_TYPE_SHA,data);
 8029db0:	4983      	ldr	r1, [pc, #524]	; (8029fc0 <wolfCryptDemo+0x294>)
 8029db2:	2004      	movs	r0, #4
 8029db4:	f7ff fdec 	bl	8029990 <hash_data>
	  for(int i = 0;i<REP_TIMES;i++)
 8029db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029dba:	3301      	adds	r3, #1
 8029dbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8029dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029dc0:	2b0e      	cmp	r3, #14
 8029dc2:	ddf5      	ble.n	8029db0 <wolfCryptDemo+0x84>
	  sprintf(print_string,"Finished SHA1\n");
 8029dc4:	4981      	ldr	r1, [pc, #516]	; (8029fcc <wolfCryptDemo+0x2a0>)
 8029dc6:	487c      	ldr	r0, [pc, #496]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029dc8:	f001 f956 	bl	802b078 <siprintf>
	  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 8029dcc:	487a      	ldr	r0, [pc, #488]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029dce:	f7d6 fa87 	bl	80002e0 <strlen>
 8029dd2:	4603      	mov	r3, r0
 8029dd4:	b29a      	uxth	r2, r3
 8029dd6:	233c      	movs	r3, #60	; 0x3c
 8029dd8:	4977      	ldr	r1, [pc, #476]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029dda:	4878      	ldr	r0, [pc, #480]	; (8029fbc <wolfCryptDemo+0x290>)
 8029ddc:	f7da fca6 	bl	800472c <HAL_UART_Transmit>
	//  HAL_UART_Transmit("################################\n");
	  wolfCrypt_Cleanup();
 8029de0:	f7ff fdba 	bl	8029958 <wolfCrypt_Cleanup>
	  wolfCrypt_Init();
 8029de4:	f7ff fda2 	bl	802992c <wolfCrypt_Init>

	  sprintf(print_string,"Starting SHA2-224\n");
 8029de8:	4979      	ldr	r1, [pc, #484]	; (8029fd0 <wolfCryptDemo+0x2a4>)
 8029dea:	4873      	ldr	r0, [pc, #460]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029dec:	f001 f944 	bl	802b078 <siprintf>
	  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 8029df0:	4871      	ldr	r0, [pc, #452]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029df2:	f7d6 fa75 	bl	80002e0 <strlen>
 8029df6:	4603      	mov	r3, r0
 8029df8:	b29a      	uxth	r2, r3
 8029dfa:	233c      	movs	r3, #60	; 0x3c
 8029dfc:	496e      	ldr	r1, [pc, #440]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029dfe:	486f      	ldr	r0, [pc, #444]	; (8029fbc <wolfCryptDemo+0x290>)
 8029e00:	f7da fc94 	bl	800472c <HAL_UART_Transmit>
	#ifdef REPEAT
	  for(int i = 0;i<REP_TIMES;i++)
 8029e04:	2300      	movs	r3, #0
 8029e06:	647b      	str	r3, [r7, #68]	; 0x44
 8029e08:	e006      	b.n	8029e18 <wolfCryptDemo+0xec>
	#endif
	    hash_data(WC_HASH_TYPE_SHA224,data);
 8029e0a:	496d      	ldr	r1, [pc, #436]	; (8029fc0 <wolfCryptDemo+0x294>)
 8029e0c:	2005      	movs	r0, #5
 8029e0e:	f7ff fdbf 	bl	8029990 <hash_data>
	  for(int i = 0;i<REP_TIMES;i++)
 8029e12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8029e14:	3301      	adds	r3, #1
 8029e16:	647b      	str	r3, [r7, #68]	; 0x44
 8029e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8029e1a:	2b0e      	cmp	r3, #14
 8029e1c:	ddf5      	ble.n	8029e0a <wolfCryptDemo+0xde>
	  sprintf(print_string,"Finished SHA2-224\n");
 8029e1e:	496d      	ldr	r1, [pc, #436]	; (8029fd4 <wolfCryptDemo+0x2a8>)
 8029e20:	4865      	ldr	r0, [pc, #404]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029e22:	f001 f929 	bl	802b078 <siprintf>
	  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 8029e26:	4864      	ldr	r0, [pc, #400]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029e28:	f7d6 fa5a 	bl	80002e0 <strlen>
 8029e2c:	4603      	mov	r3, r0
 8029e2e:	b29a      	uxth	r2, r3
 8029e30:	233c      	movs	r3, #60	; 0x3c
 8029e32:	4961      	ldr	r1, [pc, #388]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029e34:	4861      	ldr	r0, [pc, #388]	; (8029fbc <wolfCryptDemo+0x290>)
 8029e36:	f7da fc79 	bl	800472c <HAL_UART_Transmit>
	 // HAL_UART_Transmit("################################\n");
	  wolfCrypt_Cleanup();
 8029e3a:	f7ff fd8d 	bl	8029958 <wolfCrypt_Cleanup>
	  wolfCrypt_Init();
 8029e3e:	f7ff fd75 	bl	802992c <wolfCrypt_Init>

	  sprintf(print_string,"Starting SHA2-256\n");
 8029e42:	4965      	ldr	r1, [pc, #404]	; (8029fd8 <wolfCryptDemo+0x2ac>)
 8029e44:	485c      	ldr	r0, [pc, #368]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029e46:	f001 f917 	bl	802b078 <siprintf>
	  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 8029e4a:	485b      	ldr	r0, [pc, #364]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029e4c:	f7d6 fa48 	bl	80002e0 <strlen>
 8029e50:	4603      	mov	r3, r0
 8029e52:	b29a      	uxth	r2, r3
 8029e54:	233c      	movs	r3, #60	; 0x3c
 8029e56:	4958      	ldr	r1, [pc, #352]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029e58:	4858      	ldr	r0, [pc, #352]	; (8029fbc <wolfCryptDemo+0x290>)
 8029e5a:	f7da fc67 	bl	800472c <HAL_UART_Transmit>
	#ifdef REPEAT
	  for(int i = 0;i<REP_TIMES;i++)
 8029e5e:	2300      	movs	r3, #0
 8029e60:	643b      	str	r3, [r7, #64]	; 0x40
 8029e62:	e006      	b.n	8029e72 <wolfCryptDemo+0x146>
	#endif
	    hash_data(WC_HASH_TYPE_SHA256,data);
 8029e64:	4956      	ldr	r1, [pc, #344]	; (8029fc0 <wolfCryptDemo+0x294>)
 8029e66:	2006      	movs	r0, #6
 8029e68:	f7ff fd92 	bl	8029990 <hash_data>
	  for(int i = 0;i<REP_TIMES;i++)
 8029e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029e6e:	3301      	adds	r3, #1
 8029e70:	643b      	str	r3, [r7, #64]	; 0x40
 8029e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029e74:	2b0e      	cmp	r3, #14
 8029e76:	ddf5      	ble.n	8029e64 <wolfCryptDemo+0x138>
	  sprintf(print_string,"Finished SHA2-256\n");
 8029e78:	4958      	ldr	r1, [pc, #352]	; (8029fdc <wolfCryptDemo+0x2b0>)
 8029e7a:	484f      	ldr	r0, [pc, #316]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029e7c:	f001 f8fc 	bl	802b078 <siprintf>
	  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 8029e80:	484d      	ldr	r0, [pc, #308]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029e82:	f7d6 fa2d 	bl	80002e0 <strlen>
 8029e86:	4603      	mov	r3, r0
 8029e88:	b29a      	uxth	r2, r3
 8029e8a:	233c      	movs	r3, #60	; 0x3c
 8029e8c:	494a      	ldr	r1, [pc, #296]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029e8e:	484b      	ldr	r0, [pc, #300]	; (8029fbc <wolfCryptDemo+0x290>)
 8029e90:	f7da fc4c 	bl	800472c <HAL_UART_Transmit>
	 // HAL_UART_Transmit("################################\n");
	  wolfCrypt_Cleanup();
 8029e94:	f7ff fd60 	bl	8029958 <wolfCrypt_Cleanup>
	  wolfCrypt_Init();
 8029e98:	f7ff fd48 	bl	802992c <wolfCrypt_Init>

	  sprintf(print_string,"Starting SHA2-384\n");
 8029e9c:	4950      	ldr	r1, [pc, #320]	; (8029fe0 <wolfCryptDemo+0x2b4>)
 8029e9e:	4846      	ldr	r0, [pc, #280]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029ea0:	f001 f8ea 	bl	802b078 <siprintf>
	  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 8029ea4:	4844      	ldr	r0, [pc, #272]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029ea6:	f7d6 fa1b 	bl	80002e0 <strlen>
 8029eaa:	4603      	mov	r3, r0
 8029eac:	b29a      	uxth	r2, r3
 8029eae:	233c      	movs	r3, #60	; 0x3c
 8029eb0:	4941      	ldr	r1, [pc, #260]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029eb2:	4842      	ldr	r0, [pc, #264]	; (8029fbc <wolfCryptDemo+0x290>)
 8029eb4:	f7da fc3a 	bl	800472c <HAL_UART_Transmit>
	#ifdef REPEAT
	  for(int i = 0;i<REP_TIMES;i++)
 8029eb8:	2300      	movs	r3, #0
 8029eba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8029ebc:	e006      	b.n	8029ecc <wolfCryptDemo+0x1a0>
	#endif
	  hash_data(WC_HASH_TYPE_SHA384,data);
 8029ebe:	4940      	ldr	r1, [pc, #256]	; (8029fc0 <wolfCryptDemo+0x294>)
 8029ec0:	2007      	movs	r0, #7
 8029ec2:	f7ff fd65 	bl	8029990 <hash_data>
	  for(int i = 0;i<REP_TIMES;i++)
 8029ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029ec8:	3301      	adds	r3, #1
 8029eca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8029ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029ece:	2b0e      	cmp	r3, #14
 8029ed0:	ddf5      	ble.n	8029ebe <wolfCryptDemo+0x192>
	  sprintf(print_string,"Finished SHA2-384\n");
 8029ed2:	4944      	ldr	r1, [pc, #272]	; (8029fe4 <wolfCryptDemo+0x2b8>)
 8029ed4:	4838      	ldr	r0, [pc, #224]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029ed6:	f001 f8cf 	bl	802b078 <siprintf>
	  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 8029eda:	4837      	ldr	r0, [pc, #220]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029edc:	f7d6 fa00 	bl	80002e0 <strlen>
 8029ee0:	4603      	mov	r3, r0
 8029ee2:	b29a      	uxth	r2, r3
 8029ee4:	233c      	movs	r3, #60	; 0x3c
 8029ee6:	4934      	ldr	r1, [pc, #208]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029ee8:	4834      	ldr	r0, [pc, #208]	; (8029fbc <wolfCryptDemo+0x290>)
 8029eea:	f7da fc1f 	bl	800472c <HAL_UART_Transmit>
	//  HAL_UART_Transmit("################################\n");
	  wolfCrypt_Cleanup();
 8029eee:	f7ff fd33 	bl	8029958 <wolfCrypt_Cleanup>
	  wolfCrypt_Init();
 8029ef2:	f7ff fd1b 	bl	802992c <wolfCrypt_Init>

	  printf("Starting SHA2-512\n");
 8029ef6:	483c      	ldr	r0, [pc, #240]	; (8029fe8 <wolfCryptDemo+0x2bc>)
 8029ef8:	f001 f8a6 	bl	802b048 <puts>
	#ifdef REPEAT
	  for(int i = 0;i<REP_TIMES;i++)
 8029efc:	2300      	movs	r3, #0
 8029efe:	63bb      	str	r3, [r7, #56]	; 0x38
 8029f00:	e006      	b.n	8029f10 <wolfCryptDemo+0x1e4>
	#endif
	  hash_data(WC_HASH_TYPE_SHA512,data);
 8029f02:	492f      	ldr	r1, [pc, #188]	; (8029fc0 <wolfCryptDemo+0x294>)
 8029f04:	2008      	movs	r0, #8
 8029f06:	f7ff fd43 	bl	8029990 <hash_data>
	  for(int i = 0;i<REP_TIMES;i++)
 8029f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029f0c:	3301      	adds	r3, #1
 8029f0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8029f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029f12:	2b0e      	cmp	r3, #14
 8029f14:	ddf5      	ble.n	8029f02 <wolfCryptDemo+0x1d6>
	  sprintf(print_string,"Finished SHA2-512\n");
 8029f16:	4935      	ldr	r1, [pc, #212]	; (8029fec <wolfCryptDemo+0x2c0>)
 8029f18:	4827      	ldr	r0, [pc, #156]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029f1a:	f001 f8ad 	bl	802b078 <siprintf>
	  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 8029f1e:	4826      	ldr	r0, [pc, #152]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029f20:	f7d6 f9de 	bl	80002e0 <strlen>
 8029f24:	4603      	mov	r3, r0
 8029f26:	b29a      	uxth	r2, r3
 8029f28:	233c      	movs	r3, #60	; 0x3c
 8029f2a:	4923      	ldr	r1, [pc, #140]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029f2c:	4823      	ldr	r0, [pc, #140]	; (8029fbc <wolfCryptDemo+0x290>)
 8029f2e:	f7da fbfd 	bl	800472c <HAL_UART_Transmit>
	 // HAL_UART_Transmit("################################\n");
	  wolfCrypt_Cleanup();
 8029f32:	f7ff fd11 	bl	8029958 <wolfCrypt_Cleanup>

	  sprintf(print_string,"Starting SHA3-224\n");
 8029f36:	492e      	ldr	r1, [pc, #184]	; (8029ff0 <wolfCryptDemo+0x2c4>)
 8029f38:	481f      	ldr	r0, [pc, #124]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029f3a:	f001 f89d 	bl	802b078 <siprintf>
	  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 8029f3e:	481e      	ldr	r0, [pc, #120]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029f40:	f7d6 f9ce 	bl	80002e0 <strlen>
 8029f44:	4603      	mov	r3, r0
 8029f46:	b29a      	uxth	r2, r3
 8029f48:	233c      	movs	r3, #60	; 0x3c
 8029f4a:	491b      	ldr	r1, [pc, #108]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029f4c:	481b      	ldr	r0, [pc, #108]	; (8029fbc <wolfCryptDemo+0x290>)
 8029f4e:	f7da fbed 	bl	800472c <HAL_UART_Transmit>
	#ifdef REPEAT
	  for(int i = 0;i<REP_TIMES;i++)
 8029f52:	2300      	movs	r3, #0
 8029f54:	637b      	str	r3, [r7, #52]	; 0x34
 8029f56:	e006      	b.n	8029f66 <wolfCryptDemo+0x23a>
	#endif
	  hash_data(WC_HASH_TYPE_SHA3_224,data);
 8029f58:	4919      	ldr	r1, [pc, #100]	; (8029fc0 <wolfCryptDemo+0x294>)
 8029f5a:	200a      	movs	r0, #10
 8029f5c:	f7ff fd18 	bl	8029990 <hash_data>
	  for(int i = 0;i<REP_TIMES;i++)
 8029f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029f62:	3301      	adds	r3, #1
 8029f64:	637b      	str	r3, [r7, #52]	; 0x34
 8029f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029f68:	2b0e      	cmp	r3, #14
 8029f6a:	ddf5      	ble.n	8029f58 <wolfCryptDemo+0x22c>
	  sprintf(print_string,"Finished SHA3-224\n");
 8029f6c:	4921      	ldr	r1, [pc, #132]	; (8029ff4 <wolfCryptDemo+0x2c8>)
 8029f6e:	4812      	ldr	r0, [pc, #72]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029f70:	f001 f882 	bl	802b078 <siprintf>
	  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 8029f74:	4810      	ldr	r0, [pc, #64]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029f76:	f7d6 f9b3 	bl	80002e0 <strlen>
 8029f7a:	4603      	mov	r3, r0
 8029f7c:	b29a      	uxth	r2, r3
 8029f7e:	233c      	movs	r3, #60	; 0x3c
 8029f80:	490d      	ldr	r1, [pc, #52]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029f82:	480e      	ldr	r0, [pc, #56]	; (8029fbc <wolfCryptDemo+0x290>)
 8029f84:	f7da fbd2 	bl	800472c <HAL_UART_Transmit>
	 // HAL_UART_Transmit("################################\n");
	  wolfCrypt_Cleanup();
 8029f88:	f7ff fce6 	bl	8029958 <wolfCrypt_Cleanup>
	  wolfCrypt_Init();
 8029f8c:	f7ff fcce 	bl	802992c <wolfCrypt_Init>

	  sprintf(print_string,"Starting SHA3-256\n");
 8029f90:	4919      	ldr	r1, [pc, #100]	; (8029ff8 <wolfCryptDemo+0x2cc>)
 8029f92:	4809      	ldr	r0, [pc, #36]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029f94:	f001 f870 	bl	802b078 <siprintf>
	  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 8029f98:	4807      	ldr	r0, [pc, #28]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029f9a:	f7d6 f9a1 	bl	80002e0 <strlen>
 8029f9e:	4603      	mov	r3, r0
 8029fa0:	b29a      	uxth	r2, r3
 8029fa2:	233c      	movs	r3, #60	; 0x3c
 8029fa4:	4904      	ldr	r1, [pc, #16]	; (8029fb8 <wolfCryptDemo+0x28c>)
 8029fa6:	4805      	ldr	r0, [pc, #20]	; (8029fbc <wolfCryptDemo+0x290>)
 8029fa8:	f7da fbc0 	bl	800472c <HAL_UART_Transmit>
	#ifdef REPEAT
	  for(int i = 0;i<REP_TIMES;i++)
 8029fac:	2300      	movs	r3, #0
 8029fae:	633b      	str	r3, [r7, #48]	; 0x30
 8029fb0:	e02b      	b.n	802a00a <wolfCryptDemo+0x2de>
 8029fb2:	bf00      	nop
 8029fb4:	0802d2a8 	.word	0x0802d2a8
 8029fb8:	2401e558 	.word	0x2401e558
 8029fbc:	24000250 	.word	0x24000250
 8029fc0:	24000014 	.word	0x24000014
 8029fc4:	0802d2b8 	.word	0x0802d2b8
 8029fc8:	0802d2c8 	.word	0x0802d2c8
 8029fcc:	0802d2d8 	.word	0x0802d2d8
 8029fd0:	0802d2e8 	.word	0x0802d2e8
 8029fd4:	0802d2fc 	.word	0x0802d2fc
 8029fd8:	0802d310 	.word	0x0802d310
 8029fdc:	0802d324 	.word	0x0802d324
 8029fe0:	0802d338 	.word	0x0802d338
 8029fe4:	0802d34c 	.word	0x0802d34c
 8029fe8:	0802d360 	.word	0x0802d360
 8029fec:	0802d374 	.word	0x0802d374
 8029ff0:	0802d388 	.word	0x0802d388
 8029ff4:	0802d39c 	.word	0x0802d39c
 8029ff8:	0802d3b0 	.word	0x0802d3b0
	#endif
	  hash_data(WC_HASH_TYPE_SHA3_256,data);
 8029ffc:	499d      	ldr	r1, [pc, #628]	; (802a274 <wolfCryptDemo+0x548>)
 8029ffe:	200b      	movs	r0, #11
 802a000:	f7ff fcc6 	bl	8029990 <hash_data>
	  for(int i = 0;i<REP_TIMES;i++)
 802a004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a006:	3301      	adds	r3, #1
 802a008:	633b      	str	r3, [r7, #48]	; 0x30
 802a00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a00c:	2b0e      	cmp	r3, #14
 802a00e:	ddf5      	ble.n	8029ffc <wolfCryptDemo+0x2d0>
	  sprintf(print_string,"Finished SHA3-256\n");
 802a010:	4999      	ldr	r1, [pc, #612]	; (802a278 <wolfCryptDemo+0x54c>)
 802a012:	489a      	ldr	r0, [pc, #616]	; (802a27c <wolfCryptDemo+0x550>)
 802a014:	f001 f830 	bl	802b078 <siprintf>
	  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 802a018:	4898      	ldr	r0, [pc, #608]	; (802a27c <wolfCryptDemo+0x550>)
 802a01a:	f7d6 f961 	bl	80002e0 <strlen>
 802a01e:	4603      	mov	r3, r0
 802a020:	b29a      	uxth	r2, r3
 802a022:	233c      	movs	r3, #60	; 0x3c
 802a024:	4995      	ldr	r1, [pc, #596]	; (802a27c <wolfCryptDemo+0x550>)
 802a026:	4896      	ldr	r0, [pc, #600]	; (802a280 <wolfCryptDemo+0x554>)
 802a028:	f7da fb80 	bl	800472c <HAL_UART_Transmit>
	 // HAL_UART_Transmit("################################\n");
	  wolfCrypt_Cleanup();
 802a02c:	f7ff fc94 	bl	8029958 <wolfCrypt_Cleanup>
	  wolfCrypt_Init();
 802a030:	f7ff fc7c 	bl	802992c <wolfCrypt_Init>

	  sprintf(print_string,"Starting SHA3-384\n");
 802a034:	4993      	ldr	r1, [pc, #588]	; (802a284 <wolfCryptDemo+0x558>)
 802a036:	4891      	ldr	r0, [pc, #580]	; (802a27c <wolfCryptDemo+0x550>)
 802a038:	f001 f81e 	bl	802b078 <siprintf>
	  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 802a03c:	488f      	ldr	r0, [pc, #572]	; (802a27c <wolfCryptDemo+0x550>)
 802a03e:	f7d6 f94f 	bl	80002e0 <strlen>
 802a042:	4603      	mov	r3, r0
 802a044:	b29a      	uxth	r2, r3
 802a046:	233c      	movs	r3, #60	; 0x3c
 802a048:	498c      	ldr	r1, [pc, #560]	; (802a27c <wolfCryptDemo+0x550>)
 802a04a:	488d      	ldr	r0, [pc, #564]	; (802a280 <wolfCryptDemo+0x554>)
 802a04c:	f7da fb6e 	bl	800472c <HAL_UART_Transmit>
	#ifdef REPEAT
	  for(int i = 0;i<REP_TIMES;i++)
 802a050:	2300      	movs	r3, #0
 802a052:	62fb      	str	r3, [r7, #44]	; 0x2c
 802a054:	e006      	b.n	802a064 <wolfCryptDemo+0x338>
	#endif
	  hash_data(WC_HASH_TYPE_SHA3_384,data);
 802a056:	4987      	ldr	r1, [pc, #540]	; (802a274 <wolfCryptDemo+0x548>)
 802a058:	200c      	movs	r0, #12
 802a05a:	f7ff fc99 	bl	8029990 <hash_data>
	  for(int i = 0;i<REP_TIMES;i++)
 802a05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a060:	3301      	adds	r3, #1
 802a062:	62fb      	str	r3, [r7, #44]	; 0x2c
 802a064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a066:	2b0e      	cmp	r3, #14
 802a068:	ddf5      	ble.n	802a056 <wolfCryptDemo+0x32a>
	  sprintf(print_string,"Finished SHA3-384\n");
 802a06a:	4987      	ldr	r1, [pc, #540]	; (802a288 <wolfCryptDemo+0x55c>)
 802a06c:	4883      	ldr	r0, [pc, #524]	; (802a27c <wolfCryptDemo+0x550>)
 802a06e:	f001 f803 	bl	802b078 <siprintf>
	  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 802a072:	4882      	ldr	r0, [pc, #520]	; (802a27c <wolfCryptDemo+0x550>)
 802a074:	f7d6 f934 	bl	80002e0 <strlen>
 802a078:	4603      	mov	r3, r0
 802a07a:	b29a      	uxth	r2, r3
 802a07c:	233c      	movs	r3, #60	; 0x3c
 802a07e:	497f      	ldr	r1, [pc, #508]	; (802a27c <wolfCryptDemo+0x550>)
 802a080:	487f      	ldr	r0, [pc, #508]	; (802a280 <wolfCryptDemo+0x554>)
 802a082:	f7da fb53 	bl	800472c <HAL_UART_Transmit>
	 // HAL_UART_Transmit("################################\n");
	  wolfCrypt_Cleanup();
 802a086:	f7ff fc67 	bl	8029958 <wolfCrypt_Cleanup>
	  wolfCrypt_Init();
 802a08a:	f7ff fc4f 	bl	802992c <wolfCrypt_Init>

	  sprintf(print_string,"Starting SHA3-512\n");
 802a08e:	497f      	ldr	r1, [pc, #508]	; (802a28c <wolfCryptDemo+0x560>)
 802a090:	487a      	ldr	r0, [pc, #488]	; (802a27c <wolfCryptDemo+0x550>)
 802a092:	f000 fff1 	bl	802b078 <siprintf>
	  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 802a096:	4879      	ldr	r0, [pc, #484]	; (802a27c <wolfCryptDemo+0x550>)
 802a098:	f7d6 f922 	bl	80002e0 <strlen>
 802a09c:	4603      	mov	r3, r0
 802a09e:	b29a      	uxth	r2, r3
 802a0a0:	233c      	movs	r3, #60	; 0x3c
 802a0a2:	4976      	ldr	r1, [pc, #472]	; (802a27c <wolfCryptDemo+0x550>)
 802a0a4:	4876      	ldr	r0, [pc, #472]	; (802a280 <wolfCryptDemo+0x554>)
 802a0a6:	f7da fb41 	bl	800472c <HAL_UART_Transmit>
	#ifdef REPEAT
	  for(int i = 0;i<REP_TIMES;i++)
 802a0aa:	2300      	movs	r3, #0
 802a0ac:	62bb      	str	r3, [r7, #40]	; 0x28
 802a0ae:	e006      	b.n	802a0be <wolfCryptDemo+0x392>
	#endif
	  hash_data(WC_HASH_TYPE_SHA3_512,data);
 802a0b0:	4970      	ldr	r1, [pc, #448]	; (802a274 <wolfCryptDemo+0x548>)
 802a0b2:	200d      	movs	r0, #13
 802a0b4:	f7ff fc6c 	bl	8029990 <hash_data>
	  for(int i = 0;i<REP_TIMES;i++)
 802a0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a0ba:	3301      	adds	r3, #1
 802a0bc:	62bb      	str	r3, [r7, #40]	; 0x28
 802a0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a0c0:	2b0e      	cmp	r3, #14
 802a0c2:	ddf5      	ble.n	802a0b0 <wolfCryptDemo+0x384>
	  sprintf(print_string,"Finished SHA3-512\n");
 802a0c4:	4972      	ldr	r1, [pc, #456]	; (802a290 <wolfCryptDemo+0x564>)
 802a0c6:	486d      	ldr	r0, [pc, #436]	; (802a27c <wolfCryptDemo+0x550>)
 802a0c8:	f000 ffd6 	bl	802b078 <siprintf>
	  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 802a0cc:	486b      	ldr	r0, [pc, #428]	; (802a27c <wolfCryptDemo+0x550>)
 802a0ce:	f7d6 f907 	bl	80002e0 <strlen>
 802a0d2:	4603      	mov	r3, r0
 802a0d4:	b29a      	uxth	r2, r3
 802a0d6:	233c      	movs	r3, #60	; 0x3c
 802a0d8:	4968      	ldr	r1, [pc, #416]	; (802a27c <wolfCryptDemo+0x550>)
 802a0da:	4869      	ldr	r0, [pc, #420]	; (802a280 <wolfCryptDemo+0x554>)
 802a0dc:	f7da fb26 	bl	800472c <HAL_UART_Transmit>
	//  HAL_UART_Transmit("################################\n");
	  wolfCrypt_Cleanup();
 802a0e0:	f7ff fc3a 	bl	8029958 <wolfCrypt_Cleanup>
	  wolfCrypt_Init();
 802a0e4:	f7ff fc22 	bl	802992c <wolfCrypt_Init>

	  sprintf(print_string,"Starting BLAKE2B-224\n");
 802a0e8:	496a      	ldr	r1, [pc, #424]	; (802a294 <wolfCryptDemo+0x568>)
 802a0ea:	4864      	ldr	r0, [pc, #400]	; (802a27c <wolfCryptDemo+0x550>)
 802a0ec:	f000 ffc4 	bl	802b078 <siprintf>
	  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 802a0f0:	4862      	ldr	r0, [pc, #392]	; (802a27c <wolfCryptDemo+0x550>)
 802a0f2:	f7d6 f8f5 	bl	80002e0 <strlen>
 802a0f6:	4603      	mov	r3, r0
 802a0f8:	b29a      	uxth	r2, r3
 802a0fa:	233c      	movs	r3, #60	; 0x3c
 802a0fc:	495f      	ldr	r1, [pc, #380]	; (802a27c <wolfCryptDemo+0x550>)
 802a0fe:	4860      	ldr	r0, [pc, #384]	; (802a280 <wolfCryptDemo+0x554>)
 802a100:	f7da fb14 	bl	800472c <HAL_UART_Transmit>
	#ifdef REPEAT
	  for(int i = 0;i<REP_TIMES;i++)
 802a104:	2300      	movs	r3, #0
 802a106:	627b      	str	r3, [r7, #36]	; 0x24
 802a108:	e006      	b.n	802a118 <wolfCryptDemo+0x3ec>
	#endif
	  hash_blake2b(data,28);
 802a10a:	211c      	movs	r1, #28
 802a10c:	4859      	ldr	r0, [pc, #356]	; (802a274 <wolfCryptDemo+0x548>)
 802a10e:	f7ff fcd5 	bl	8029abc <hash_blake2b>
	  for(int i = 0;i<REP_TIMES;i++)
 802a112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a114:	3301      	adds	r3, #1
 802a116:	627b      	str	r3, [r7, #36]	; 0x24
 802a118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a11a:	2b0e      	cmp	r3, #14
 802a11c:	ddf5      	ble.n	802a10a <wolfCryptDemo+0x3de>
	  sprintf(print_string,"Finished BLAKE2B-224\n");
 802a11e:	495e      	ldr	r1, [pc, #376]	; (802a298 <wolfCryptDemo+0x56c>)
 802a120:	4856      	ldr	r0, [pc, #344]	; (802a27c <wolfCryptDemo+0x550>)
 802a122:	f000 ffa9 	bl	802b078 <siprintf>
	  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 802a126:	4855      	ldr	r0, [pc, #340]	; (802a27c <wolfCryptDemo+0x550>)
 802a128:	f7d6 f8da 	bl	80002e0 <strlen>
 802a12c:	4603      	mov	r3, r0
 802a12e:	b29a      	uxth	r2, r3
 802a130:	233c      	movs	r3, #60	; 0x3c
 802a132:	4952      	ldr	r1, [pc, #328]	; (802a27c <wolfCryptDemo+0x550>)
 802a134:	4852      	ldr	r0, [pc, #328]	; (802a280 <wolfCryptDemo+0x554>)
 802a136:	f7da faf9 	bl	800472c <HAL_UART_Transmit>
	  //HAL_UART_Transmit("################################\n");
	  wolfCrypt_Cleanup();
 802a13a:	f7ff fc0d 	bl	8029958 <wolfCrypt_Cleanup>
	  wolfCrypt_Init();
 802a13e:	f7ff fbf5 	bl	802992c <wolfCrypt_Init>

	  sprintf(print_string,"Starting BLAKE2B-256\n");
 802a142:	4956      	ldr	r1, [pc, #344]	; (802a29c <wolfCryptDemo+0x570>)
 802a144:	484d      	ldr	r0, [pc, #308]	; (802a27c <wolfCryptDemo+0x550>)
 802a146:	f000 ff97 	bl	802b078 <siprintf>
	  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 802a14a:	484c      	ldr	r0, [pc, #304]	; (802a27c <wolfCryptDemo+0x550>)
 802a14c:	f7d6 f8c8 	bl	80002e0 <strlen>
 802a150:	4603      	mov	r3, r0
 802a152:	b29a      	uxth	r2, r3
 802a154:	233c      	movs	r3, #60	; 0x3c
 802a156:	4949      	ldr	r1, [pc, #292]	; (802a27c <wolfCryptDemo+0x550>)
 802a158:	4849      	ldr	r0, [pc, #292]	; (802a280 <wolfCryptDemo+0x554>)
 802a15a:	f7da fae7 	bl	800472c <HAL_UART_Transmit>
	#ifdef REPEAT
	  for(int i = 0;i<REP_TIMES;i++)
 802a15e:	2300      	movs	r3, #0
 802a160:	623b      	str	r3, [r7, #32]
 802a162:	e006      	b.n	802a172 <wolfCryptDemo+0x446>
	#endif
	  hash_blake2b(data,32);
 802a164:	2120      	movs	r1, #32
 802a166:	4843      	ldr	r0, [pc, #268]	; (802a274 <wolfCryptDemo+0x548>)
 802a168:	f7ff fca8 	bl	8029abc <hash_blake2b>
	  for(int i = 0;i<REP_TIMES;i++)
 802a16c:	6a3b      	ldr	r3, [r7, #32]
 802a16e:	3301      	adds	r3, #1
 802a170:	623b      	str	r3, [r7, #32]
 802a172:	6a3b      	ldr	r3, [r7, #32]
 802a174:	2b0e      	cmp	r3, #14
 802a176:	ddf5      	ble.n	802a164 <wolfCryptDemo+0x438>
	  sprintf(print_string,"Finished BLAKE2B-256\n");
 802a178:	4949      	ldr	r1, [pc, #292]	; (802a2a0 <wolfCryptDemo+0x574>)
 802a17a:	4840      	ldr	r0, [pc, #256]	; (802a27c <wolfCryptDemo+0x550>)
 802a17c:	f000 ff7c 	bl	802b078 <siprintf>
	  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 802a180:	483e      	ldr	r0, [pc, #248]	; (802a27c <wolfCryptDemo+0x550>)
 802a182:	f7d6 f8ad 	bl	80002e0 <strlen>
 802a186:	4603      	mov	r3, r0
 802a188:	b29a      	uxth	r2, r3
 802a18a:	233c      	movs	r3, #60	; 0x3c
 802a18c:	493b      	ldr	r1, [pc, #236]	; (802a27c <wolfCryptDemo+0x550>)
 802a18e:	483c      	ldr	r0, [pc, #240]	; (802a280 <wolfCryptDemo+0x554>)
 802a190:	f7da facc 	bl	800472c <HAL_UART_Transmit>
	 // HAL_UART_Transmit("################################\n");
	  wolfCrypt_Cleanup();
 802a194:	f7ff fbe0 	bl	8029958 <wolfCrypt_Cleanup>
	  wolfCrypt_Init();
 802a198:	f7ff fbc8 	bl	802992c <wolfCrypt_Init>

	  sprintf(print_string,"Starting BLAKE2B-384\n");
 802a19c:	4941      	ldr	r1, [pc, #260]	; (802a2a4 <wolfCryptDemo+0x578>)
 802a19e:	4837      	ldr	r0, [pc, #220]	; (802a27c <wolfCryptDemo+0x550>)
 802a1a0:	f000 ff6a 	bl	802b078 <siprintf>
	  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 802a1a4:	4835      	ldr	r0, [pc, #212]	; (802a27c <wolfCryptDemo+0x550>)
 802a1a6:	f7d6 f89b 	bl	80002e0 <strlen>
 802a1aa:	4603      	mov	r3, r0
 802a1ac:	b29a      	uxth	r2, r3
 802a1ae:	233c      	movs	r3, #60	; 0x3c
 802a1b0:	4932      	ldr	r1, [pc, #200]	; (802a27c <wolfCryptDemo+0x550>)
 802a1b2:	4833      	ldr	r0, [pc, #204]	; (802a280 <wolfCryptDemo+0x554>)
 802a1b4:	f7da faba 	bl	800472c <HAL_UART_Transmit>
	#ifdef REPEAT
	  for(int i = 0;i<REP_TIMES;i++)
 802a1b8:	2300      	movs	r3, #0
 802a1ba:	61fb      	str	r3, [r7, #28]
 802a1bc:	e006      	b.n	802a1cc <wolfCryptDemo+0x4a0>
	#endif
	  hash_blake2b(data,48);
 802a1be:	2130      	movs	r1, #48	; 0x30
 802a1c0:	482c      	ldr	r0, [pc, #176]	; (802a274 <wolfCryptDemo+0x548>)
 802a1c2:	f7ff fc7b 	bl	8029abc <hash_blake2b>
	  for(int i = 0;i<REP_TIMES;i++)
 802a1c6:	69fb      	ldr	r3, [r7, #28]
 802a1c8:	3301      	adds	r3, #1
 802a1ca:	61fb      	str	r3, [r7, #28]
 802a1cc:	69fb      	ldr	r3, [r7, #28]
 802a1ce:	2b0e      	cmp	r3, #14
 802a1d0:	ddf5      	ble.n	802a1be <wolfCryptDemo+0x492>
	  sprintf(print_string,"Finished BLAKE2B-384\n");
 802a1d2:	4935      	ldr	r1, [pc, #212]	; (802a2a8 <wolfCryptDemo+0x57c>)
 802a1d4:	4829      	ldr	r0, [pc, #164]	; (802a27c <wolfCryptDemo+0x550>)
 802a1d6:	f000 ff4f 	bl	802b078 <siprintf>
	  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 802a1da:	4828      	ldr	r0, [pc, #160]	; (802a27c <wolfCryptDemo+0x550>)
 802a1dc:	f7d6 f880 	bl	80002e0 <strlen>
 802a1e0:	4603      	mov	r3, r0
 802a1e2:	b29a      	uxth	r2, r3
 802a1e4:	233c      	movs	r3, #60	; 0x3c
 802a1e6:	4925      	ldr	r1, [pc, #148]	; (802a27c <wolfCryptDemo+0x550>)
 802a1e8:	4825      	ldr	r0, [pc, #148]	; (802a280 <wolfCryptDemo+0x554>)
 802a1ea:	f7da fa9f 	bl	800472c <HAL_UART_Transmit>
	  //printf("################################\n");
	  wolfCrypt_Cleanup();
 802a1ee:	f7ff fbb3 	bl	8029958 <wolfCrypt_Cleanup>
	  wolfCrypt_Init();
 802a1f2:	f7ff fb9b 	bl	802992c <wolfCrypt_Init>

	  sprintf(print_string,"Starting BLAKE2B-512\n");
 802a1f6:	492d      	ldr	r1, [pc, #180]	; (802a2ac <wolfCryptDemo+0x580>)
 802a1f8:	4820      	ldr	r0, [pc, #128]	; (802a27c <wolfCryptDemo+0x550>)
 802a1fa:	f000 ff3d 	bl	802b078 <siprintf>
	  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 802a1fe:	481f      	ldr	r0, [pc, #124]	; (802a27c <wolfCryptDemo+0x550>)
 802a200:	f7d6 f86e 	bl	80002e0 <strlen>
 802a204:	4603      	mov	r3, r0
 802a206:	b29a      	uxth	r2, r3
 802a208:	233c      	movs	r3, #60	; 0x3c
 802a20a:	491c      	ldr	r1, [pc, #112]	; (802a27c <wolfCryptDemo+0x550>)
 802a20c:	481c      	ldr	r0, [pc, #112]	; (802a280 <wolfCryptDemo+0x554>)
 802a20e:	f7da fa8d 	bl	800472c <HAL_UART_Transmit>
	#ifdef REPEAT
	  for(int i = 0;i<REP_TIMES;i++)
 802a212:	2300      	movs	r3, #0
 802a214:	61bb      	str	r3, [r7, #24]
 802a216:	e006      	b.n	802a226 <wolfCryptDemo+0x4fa>
	#endif
	  hash_blake2b(data,64);
 802a218:	2140      	movs	r1, #64	; 0x40
 802a21a:	4816      	ldr	r0, [pc, #88]	; (802a274 <wolfCryptDemo+0x548>)
 802a21c:	f7ff fc4e 	bl	8029abc <hash_blake2b>
	  for(int i = 0;i<REP_TIMES;i++)
 802a220:	69bb      	ldr	r3, [r7, #24]
 802a222:	3301      	adds	r3, #1
 802a224:	61bb      	str	r3, [r7, #24]
 802a226:	69bb      	ldr	r3, [r7, #24]
 802a228:	2b0e      	cmp	r3, #14
 802a22a:	ddf5      	ble.n	802a218 <wolfCryptDemo+0x4ec>
	  sprintf(print_string,"Finished BLAKE2B-512\n");
 802a22c:	4920      	ldr	r1, [pc, #128]	; (802a2b0 <wolfCryptDemo+0x584>)
 802a22e:	4813      	ldr	r0, [pc, #76]	; (802a27c <wolfCryptDemo+0x550>)
 802a230:	f000 ff22 	bl	802b078 <siprintf>
	  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 802a234:	4811      	ldr	r0, [pc, #68]	; (802a27c <wolfCryptDemo+0x550>)
 802a236:	f7d6 f853 	bl	80002e0 <strlen>
 802a23a:	4603      	mov	r3, r0
 802a23c:	b29a      	uxth	r2, r3
 802a23e:	233c      	movs	r3, #60	; 0x3c
 802a240:	490e      	ldr	r1, [pc, #56]	; (802a27c <wolfCryptDemo+0x550>)
 802a242:	480f      	ldr	r0, [pc, #60]	; (802a280 <wolfCryptDemo+0x554>)
 802a244:	f7da fa72 	bl	800472c <HAL_UART_Transmit>
	//  printf("################################\n");
	  wolfCrypt_Cleanup();
 802a248:	f7ff fb86 	bl	8029958 <wolfCrypt_Cleanup>
	  wolfCrypt_Init();
 802a24c:	f7ff fb6e 	bl	802992c <wolfCrypt_Init>

	  sprintf(print_string,"Starting BLAKE2S-128\n");
 802a250:	4918      	ldr	r1, [pc, #96]	; (802a2b4 <wolfCryptDemo+0x588>)
 802a252:	480a      	ldr	r0, [pc, #40]	; (802a27c <wolfCryptDemo+0x550>)
 802a254:	f000 ff10 	bl	802b078 <siprintf>
	  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 802a258:	4808      	ldr	r0, [pc, #32]	; (802a27c <wolfCryptDemo+0x550>)
 802a25a:	f7d6 f841 	bl	80002e0 <strlen>
 802a25e:	4603      	mov	r3, r0
 802a260:	b29a      	uxth	r2, r3
 802a262:	233c      	movs	r3, #60	; 0x3c
 802a264:	4905      	ldr	r1, [pc, #20]	; (802a27c <wolfCryptDemo+0x550>)
 802a266:	4806      	ldr	r0, [pc, #24]	; (802a280 <wolfCryptDemo+0x554>)
 802a268:	f7da fa60 	bl	800472c <HAL_UART_Transmit>
	#ifdef REPEAT
	  for(int i = 0;i<REP_TIMES;i++)
 802a26c:	2300      	movs	r3, #0
 802a26e:	617b      	str	r3, [r7, #20]
 802a270:	e029      	b.n	802a2c6 <wolfCryptDemo+0x59a>
 802a272:	bf00      	nop
 802a274:	24000014 	.word	0x24000014
 802a278:	0802d3c4 	.word	0x0802d3c4
 802a27c:	2401e558 	.word	0x2401e558
 802a280:	24000250 	.word	0x24000250
 802a284:	0802d3d8 	.word	0x0802d3d8
 802a288:	0802d3ec 	.word	0x0802d3ec
 802a28c:	0802d400 	.word	0x0802d400
 802a290:	0802d414 	.word	0x0802d414
 802a294:	0802d428 	.word	0x0802d428
 802a298:	0802d440 	.word	0x0802d440
 802a29c:	0802d458 	.word	0x0802d458
 802a2a0:	0802d470 	.word	0x0802d470
 802a2a4:	0802d488 	.word	0x0802d488
 802a2a8:	0802d4a0 	.word	0x0802d4a0
 802a2ac:	0802d4b8 	.word	0x0802d4b8
 802a2b0:	0802d4d0 	.word	0x0802d4d0
 802a2b4:	0802d4e8 	.word	0x0802d4e8
	#endif
	  hash_blake2s(data,16);
 802a2b8:	2110      	movs	r1, #16
 802a2ba:	4852      	ldr	r0, [pc, #328]	; (802a404 <wolfCryptDemo+0x6d8>)
 802a2bc:	f7ff fc9a 	bl	8029bf4 <hash_blake2s>
	  for(int i = 0;i<REP_TIMES;i++)
 802a2c0:	697b      	ldr	r3, [r7, #20]
 802a2c2:	3301      	adds	r3, #1
 802a2c4:	617b      	str	r3, [r7, #20]
 802a2c6:	697b      	ldr	r3, [r7, #20]
 802a2c8:	2b0e      	cmp	r3, #14
 802a2ca:	ddf5      	ble.n	802a2b8 <wolfCryptDemo+0x58c>
	  sprintf(print_string,"Finished BLAKE2S-128\n");
 802a2cc:	494e      	ldr	r1, [pc, #312]	; (802a408 <wolfCryptDemo+0x6dc>)
 802a2ce:	484f      	ldr	r0, [pc, #316]	; (802a40c <wolfCryptDemo+0x6e0>)
 802a2d0:	f000 fed2 	bl	802b078 <siprintf>
	  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 802a2d4:	484d      	ldr	r0, [pc, #308]	; (802a40c <wolfCryptDemo+0x6e0>)
 802a2d6:	f7d6 f803 	bl	80002e0 <strlen>
 802a2da:	4603      	mov	r3, r0
 802a2dc:	b29a      	uxth	r2, r3
 802a2de:	233c      	movs	r3, #60	; 0x3c
 802a2e0:	494a      	ldr	r1, [pc, #296]	; (802a40c <wolfCryptDemo+0x6e0>)
 802a2e2:	484b      	ldr	r0, [pc, #300]	; (802a410 <wolfCryptDemo+0x6e4>)
 802a2e4:	f7da fa22 	bl	800472c <HAL_UART_Transmit>
	  //printf("################################\n");
	  wolfCrypt_Cleanup();
 802a2e8:	f7ff fb36 	bl	8029958 <wolfCrypt_Cleanup>
	  wolfCrypt_Init();
 802a2ec:	f7ff fb1e 	bl	802992c <wolfCrypt_Init>

	  sprintf(print_string,"Starting BLAKE2S-192\n");
 802a2f0:	4948      	ldr	r1, [pc, #288]	; (802a414 <wolfCryptDemo+0x6e8>)
 802a2f2:	4846      	ldr	r0, [pc, #280]	; (802a40c <wolfCryptDemo+0x6e0>)
 802a2f4:	f000 fec0 	bl	802b078 <siprintf>
	  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 802a2f8:	4844      	ldr	r0, [pc, #272]	; (802a40c <wolfCryptDemo+0x6e0>)
 802a2fa:	f7d5 fff1 	bl	80002e0 <strlen>
 802a2fe:	4603      	mov	r3, r0
 802a300:	b29a      	uxth	r2, r3
 802a302:	233c      	movs	r3, #60	; 0x3c
 802a304:	4941      	ldr	r1, [pc, #260]	; (802a40c <wolfCryptDemo+0x6e0>)
 802a306:	4842      	ldr	r0, [pc, #264]	; (802a410 <wolfCryptDemo+0x6e4>)
 802a308:	f7da fa10 	bl	800472c <HAL_UART_Transmit>
	#ifdef REPEAT
	  for(int i = 0;i<REP_TIMES;i++)
 802a30c:	2300      	movs	r3, #0
 802a30e:	613b      	str	r3, [r7, #16]
 802a310:	e006      	b.n	802a320 <wolfCryptDemo+0x5f4>
	#endif
	  hash_blake2s(data,24);
 802a312:	2118      	movs	r1, #24
 802a314:	483b      	ldr	r0, [pc, #236]	; (802a404 <wolfCryptDemo+0x6d8>)
 802a316:	f7ff fc6d 	bl	8029bf4 <hash_blake2s>
	  for(int i = 0;i<REP_TIMES;i++)
 802a31a:	693b      	ldr	r3, [r7, #16]
 802a31c:	3301      	adds	r3, #1
 802a31e:	613b      	str	r3, [r7, #16]
 802a320:	693b      	ldr	r3, [r7, #16]
 802a322:	2b0e      	cmp	r3, #14
 802a324:	ddf5      	ble.n	802a312 <wolfCryptDemo+0x5e6>
	  sprintf(print_string,"Finished BLAKE2S-192\n");
 802a326:	493c      	ldr	r1, [pc, #240]	; (802a418 <wolfCryptDemo+0x6ec>)
 802a328:	4838      	ldr	r0, [pc, #224]	; (802a40c <wolfCryptDemo+0x6e0>)
 802a32a:	f000 fea5 	bl	802b078 <siprintf>
	  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 802a32e:	4837      	ldr	r0, [pc, #220]	; (802a40c <wolfCryptDemo+0x6e0>)
 802a330:	f7d5 ffd6 	bl	80002e0 <strlen>
 802a334:	4603      	mov	r3, r0
 802a336:	b29a      	uxth	r2, r3
 802a338:	233c      	movs	r3, #60	; 0x3c
 802a33a:	4934      	ldr	r1, [pc, #208]	; (802a40c <wolfCryptDemo+0x6e0>)
 802a33c:	4834      	ldr	r0, [pc, #208]	; (802a410 <wolfCryptDemo+0x6e4>)
 802a33e:	f7da f9f5 	bl	800472c <HAL_UART_Transmit>
	 // printf("################################\n");
	  wolfCrypt_Cleanup();
 802a342:	f7ff fb09 	bl	8029958 <wolfCrypt_Cleanup>
	  wolfCrypt_Init();
 802a346:	f7ff faf1 	bl	802992c <wolfCrypt_Init>

	  sprintf(print_string,"Starting BLAKE2S-224\n");
 802a34a:	4934      	ldr	r1, [pc, #208]	; (802a41c <wolfCryptDemo+0x6f0>)
 802a34c:	482f      	ldr	r0, [pc, #188]	; (802a40c <wolfCryptDemo+0x6e0>)
 802a34e:	f000 fe93 	bl	802b078 <siprintf>
	  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 802a352:	482e      	ldr	r0, [pc, #184]	; (802a40c <wolfCryptDemo+0x6e0>)
 802a354:	f7d5 ffc4 	bl	80002e0 <strlen>
 802a358:	4603      	mov	r3, r0
 802a35a:	b29a      	uxth	r2, r3
 802a35c:	233c      	movs	r3, #60	; 0x3c
 802a35e:	492b      	ldr	r1, [pc, #172]	; (802a40c <wolfCryptDemo+0x6e0>)
 802a360:	482b      	ldr	r0, [pc, #172]	; (802a410 <wolfCryptDemo+0x6e4>)
 802a362:	f7da f9e3 	bl	800472c <HAL_UART_Transmit>
	#ifdef REPEAT
	  for(int i = 0;i<REP_TIMES;i++)
 802a366:	2300      	movs	r3, #0
 802a368:	60fb      	str	r3, [r7, #12]
 802a36a:	e006      	b.n	802a37a <wolfCryptDemo+0x64e>
	#endif
	  hash_blake2s(data,28);
 802a36c:	211c      	movs	r1, #28
 802a36e:	4825      	ldr	r0, [pc, #148]	; (802a404 <wolfCryptDemo+0x6d8>)
 802a370:	f7ff fc40 	bl	8029bf4 <hash_blake2s>
	  for(int i = 0;i<REP_TIMES;i++)
 802a374:	68fb      	ldr	r3, [r7, #12]
 802a376:	3301      	adds	r3, #1
 802a378:	60fb      	str	r3, [r7, #12]
 802a37a:	68fb      	ldr	r3, [r7, #12]
 802a37c:	2b0e      	cmp	r3, #14
 802a37e:	ddf5      	ble.n	802a36c <wolfCryptDemo+0x640>
	  sprintf(print_string,"Finished BLAKE2S-224\n");
 802a380:	4927      	ldr	r1, [pc, #156]	; (802a420 <wolfCryptDemo+0x6f4>)
 802a382:	4822      	ldr	r0, [pc, #136]	; (802a40c <wolfCryptDemo+0x6e0>)
 802a384:	f000 fe78 	bl	802b078 <siprintf>
	  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 802a388:	4820      	ldr	r0, [pc, #128]	; (802a40c <wolfCryptDemo+0x6e0>)
 802a38a:	f7d5 ffa9 	bl	80002e0 <strlen>
 802a38e:	4603      	mov	r3, r0
 802a390:	b29a      	uxth	r2, r3
 802a392:	233c      	movs	r3, #60	; 0x3c
 802a394:	491d      	ldr	r1, [pc, #116]	; (802a40c <wolfCryptDemo+0x6e0>)
 802a396:	481e      	ldr	r0, [pc, #120]	; (802a410 <wolfCryptDemo+0x6e4>)
 802a398:	f7da f9c8 	bl	800472c <HAL_UART_Transmit>
	  //printf("################################\n");
	  wolfCrypt_Cleanup();
 802a39c:	f7ff fadc 	bl	8029958 <wolfCrypt_Cleanup>
	  wolfCrypt_Init();
 802a3a0:	f7ff fac4 	bl	802992c <wolfCrypt_Init>

	  sprintf(print_string,"Starting BLAKE2S-256\n");
 802a3a4:	491f      	ldr	r1, [pc, #124]	; (802a424 <wolfCryptDemo+0x6f8>)
 802a3a6:	4819      	ldr	r0, [pc, #100]	; (802a40c <wolfCryptDemo+0x6e0>)
 802a3a8:	f000 fe66 	bl	802b078 <siprintf>
	  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 802a3ac:	4817      	ldr	r0, [pc, #92]	; (802a40c <wolfCryptDemo+0x6e0>)
 802a3ae:	f7d5 ff97 	bl	80002e0 <strlen>
 802a3b2:	4603      	mov	r3, r0
 802a3b4:	b29a      	uxth	r2, r3
 802a3b6:	233c      	movs	r3, #60	; 0x3c
 802a3b8:	4914      	ldr	r1, [pc, #80]	; (802a40c <wolfCryptDemo+0x6e0>)
 802a3ba:	4815      	ldr	r0, [pc, #84]	; (802a410 <wolfCryptDemo+0x6e4>)
 802a3bc:	f7da f9b6 	bl	800472c <HAL_UART_Transmit>
	#ifdef REPEAT
	  for(int i = 0;i<REP_TIMES;i++)
 802a3c0:	2300      	movs	r3, #0
 802a3c2:	60bb      	str	r3, [r7, #8]
 802a3c4:	e006      	b.n	802a3d4 <wolfCryptDemo+0x6a8>
	#endif
	  hash_blake2s(data,32);
 802a3c6:	2120      	movs	r1, #32
 802a3c8:	480e      	ldr	r0, [pc, #56]	; (802a404 <wolfCryptDemo+0x6d8>)
 802a3ca:	f7ff fc13 	bl	8029bf4 <hash_blake2s>
	  for(int i = 0;i<REP_TIMES;i++)
 802a3ce:	68bb      	ldr	r3, [r7, #8]
 802a3d0:	3301      	adds	r3, #1
 802a3d2:	60bb      	str	r3, [r7, #8]
 802a3d4:	68bb      	ldr	r3, [r7, #8]
 802a3d6:	2b0e      	cmp	r3, #14
 802a3d8:	ddf5      	ble.n	802a3c6 <wolfCryptDemo+0x69a>

	  sprintf(print_string,"Finished BLAKE2S-256\n");
 802a3da:	4913      	ldr	r1, [pc, #76]	; (802a428 <wolfCryptDemo+0x6fc>)
 802a3dc:	480b      	ldr	r0, [pc, #44]	; (802a40c <wolfCryptDemo+0x6e0>)
 802a3de:	f000 fe4b 	bl	802b078 <siprintf>
	  HAL_UART_Transmit(&HAL_CONSOLE_UART,print_string, strlen(print_string), 60);
 802a3e2:	480a      	ldr	r0, [pc, #40]	; (802a40c <wolfCryptDemo+0x6e0>)
 802a3e4:	f7d5 ff7c 	bl	80002e0 <strlen>
 802a3e8:	4603      	mov	r3, r0
 802a3ea:	b29a      	uxth	r2, r3
 802a3ec:	233c      	movs	r3, #60	; 0x3c
 802a3ee:	4907      	ldr	r1, [pc, #28]	; (802a40c <wolfCryptDemo+0x6e0>)
 802a3f0:	4807      	ldr	r0, [pc, #28]	; (802a410 <wolfCryptDemo+0x6e4>)
 802a3f2:	f7da f99b 	bl	800472c <HAL_UART_Transmit>
	 // printf("################################\n");

	  wolfCrypt_Cleanup();
 802a3f6:	f7ff faaf 	bl	8029958 <wolfCrypt_Cleanup>

	  while(1)
		  HAL_Delay(1000);
 802a3fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 802a3fe:	f7d6 fe33 	bl	8001068 <HAL_Delay>
 802a402:	e7fa      	b.n	802a3fa <wolfCryptDemo+0x6ce>
 802a404:	24000014 	.word	0x24000014
 802a408:	0802d500 	.word	0x0802d500
 802a40c:	2401e558 	.word	0x2401e558
 802a410:	24000250 	.word	0x24000250
 802a414:	0802d518 	.word	0x0802d518
 802a418:	0802d530 	.word	0x0802d530
 802a41c:	0802d548 	.word	0x0802d548
 802a420:	0802d560 	.word	0x0802d560
 802a424:	0802d578 	.word	0x0802d578
 802a428:	0802d590 	.word	0x0802d590

0802a42c <clock>:
 802a42c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802a42e:	4b08      	ldr	r3, [pc, #32]	; (802a450 <clock+0x24>)
 802a430:	4669      	mov	r1, sp
 802a432:	6818      	ldr	r0, [r3, #0]
 802a434:	f000 fe40 	bl	802b0b8 <_times_r>
 802a438:	1c43      	adds	r3, r0, #1
 802a43a:	d006      	beq.n	802a44a <clock+0x1e>
 802a43c:	e9dd 0300 	ldrd	r0, r3, [sp]
 802a440:	4418      	add	r0, r3
 802a442:	9b02      	ldr	r3, [sp, #8]
 802a444:	4418      	add	r0, r3
 802a446:	9b03      	ldr	r3, [sp, #12]
 802a448:	4418      	add	r0, r3
 802a44a:	b005      	add	sp, #20
 802a44c:	f85d fb04 	ldr.w	pc, [sp], #4
 802a450:	24000040 	.word	0x24000040

0802a454 <__errno>:
 802a454:	4b01      	ldr	r3, [pc, #4]	; (802a45c <__errno+0x8>)
 802a456:	6818      	ldr	r0, [r3, #0]
 802a458:	4770      	bx	lr
 802a45a:	bf00      	nop
 802a45c:	24000040 	.word	0x24000040

0802a460 <__libc_init_array>:
 802a460:	b570      	push	{r4, r5, r6, lr}
 802a462:	4d0d      	ldr	r5, [pc, #52]	; (802a498 <__libc_init_array+0x38>)
 802a464:	4c0d      	ldr	r4, [pc, #52]	; (802a49c <__libc_init_array+0x3c>)
 802a466:	1b64      	subs	r4, r4, r5
 802a468:	10a4      	asrs	r4, r4, #2
 802a46a:	2600      	movs	r6, #0
 802a46c:	42a6      	cmp	r6, r4
 802a46e:	d109      	bne.n	802a484 <__libc_init_array+0x24>
 802a470:	4d0b      	ldr	r5, [pc, #44]	; (802a4a0 <__libc_init_array+0x40>)
 802a472:	4c0c      	ldr	r4, [pc, #48]	; (802a4a4 <__libc_init_array+0x44>)
 802a474:	f002 feda 	bl	802d22c <_init>
 802a478:	1b64      	subs	r4, r4, r5
 802a47a:	10a4      	asrs	r4, r4, #2
 802a47c:	2600      	movs	r6, #0
 802a47e:	42a6      	cmp	r6, r4
 802a480:	d105      	bne.n	802a48e <__libc_init_array+0x2e>
 802a482:	bd70      	pop	{r4, r5, r6, pc}
 802a484:	f855 3b04 	ldr.w	r3, [r5], #4
 802a488:	4798      	blx	r3
 802a48a:	3601      	adds	r6, #1
 802a48c:	e7ee      	b.n	802a46c <__libc_init_array+0xc>
 802a48e:	f855 3b04 	ldr.w	r3, [r5], #4
 802a492:	4798      	blx	r3
 802a494:	3601      	adds	r6, #1
 802a496:	e7f2      	b.n	802a47e <__libc_init_array+0x1e>
 802a498:	0802deac 	.word	0x0802deac
 802a49c:	0802deac 	.word	0x0802deac
 802a4a0:	0802deac 	.word	0x0802deac
 802a4a4:	0802deb0 	.word	0x0802deb0

0802a4a8 <malloc>:
 802a4a8:	4b02      	ldr	r3, [pc, #8]	; (802a4b4 <malloc+0xc>)
 802a4aa:	4601      	mov	r1, r0
 802a4ac:	6818      	ldr	r0, [r3, #0]
 802a4ae:	f000 b8a7 	b.w	802a600 <_malloc_r>
 802a4b2:	bf00      	nop
 802a4b4:	24000040 	.word	0x24000040

0802a4b8 <free>:
 802a4b8:	4b02      	ldr	r3, [pc, #8]	; (802a4c4 <free+0xc>)
 802a4ba:	4601      	mov	r1, r0
 802a4bc:	6818      	ldr	r0, [r3, #0]
 802a4be:	f000 b833 	b.w	802a528 <_free_r>
 802a4c2:	bf00      	nop
 802a4c4:	24000040 	.word	0x24000040

0802a4c8 <memcpy>:
 802a4c8:	440a      	add	r2, r1
 802a4ca:	4291      	cmp	r1, r2
 802a4cc:	f100 33ff 	add.w	r3, r0, #4294967295
 802a4d0:	d100      	bne.n	802a4d4 <memcpy+0xc>
 802a4d2:	4770      	bx	lr
 802a4d4:	b510      	push	{r4, lr}
 802a4d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 802a4da:	f803 4f01 	strb.w	r4, [r3, #1]!
 802a4de:	4291      	cmp	r1, r2
 802a4e0:	d1f9      	bne.n	802a4d6 <memcpy+0xe>
 802a4e2:	bd10      	pop	{r4, pc}

0802a4e4 <memmove>:
 802a4e4:	4288      	cmp	r0, r1
 802a4e6:	b510      	push	{r4, lr}
 802a4e8:	eb01 0402 	add.w	r4, r1, r2
 802a4ec:	d902      	bls.n	802a4f4 <memmove+0x10>
 802a4ee:	4284      	cmp	r4, r0
 802a4f0:	4623      	mov	r3, r4
 802a4f2:	d807      	bhi.n	802a504 <memmove+0x20>
 802a4f4:	1e43      	subs	r3, r0, #1
 802a4f6:	42a1      	cmp	r1, r4
 802a4f8:	d008      	beq.n	802a50c <memmove+0x28>
 802a4fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 802a4fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 802a502:	e7f8      	b.n	802a4f6 <memmove+0x12>
 802a504:	4402      	add	r2, r0
 802a506:	4601      	mov	r1, r0
 802a508:	428a      	cmp	r2, r1
 802a50a:	d100      	bne.n	802a50e <memmove+0x2a>
 802a50c:	bd10      	pop	{r4, pc}
 802a50e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802a512:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802a516:	e7f7      	b.n	802a508 <memmove+0x24>

0802a518 <memset>:
 802a518:	4402      	add	r2, r0
 802a51a:	4603      	mov	r3, r0
 802a51c:	4293      	cmp	r3, r2
 802a51e:	d100      	bne.n	802a522 <memset+0xa>
 802a520:	4770      	bx	lr
 802a522:	f803 1b01 	strb.w	r1, [r3], #1
 802a526:	e7f9      	b.n	802a51c <memset+0x4>

0802a528 <_free_r>:
 802a528:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802a52a:	2900      	cmp	r1, #0
 802a52c:	d044      	beq.n	802a5b8 <_free_r+0x90>
 802a52e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802a532:	9001      	str	r0, [sp, #4]
 802a534:	2b00      	cmp	r3, #0
 802a536:	f1a1 0404 	sub.w	r4, r1, #4
 802a53a:	bfb8      	it	lt
 802a53c:	18e4      	addlt	r4, r4, r3
 802a53e:	f001 fe9d 	bl	802c27c <__malloc_lock>
 802a542:	4a1e      	ldr	r2, [pc, #120]	; (802a5bc <_free_r+0x94>)
 802a544:	9801      	ldr	r0, [sp, #4]
 802a546:	6813      	ldr	r3, [r2, #0]
 802a548:	b933      	cbnz	r3, 802a558 <_free_r+0x30>
 802a54a:	6063      	str	r3, [r4, #4]
 802a54c:	6014      	str	r4, [r2, #0]
 802a54e:	b003      	add	sp, #12
 802a550:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802a554:	f001 be98 	b.w	802c288 <__malloc_unlock>
 802a558:	42a3      	cmp	r3, r4
 802a55a:	d908      	bls.n	802a56e <_free_r+0x46>
 802a55c:	6825      	ldr	r5, [r4, #0]
 802a55e:	1961      	adds	r1, r4, r5
 802a560:	428b      	cmp	r3, r1
 802a562:	bf01      	itttt	eq
 802a564:	6819      	ldreq	r1, [r3, #0]
 802a566:	685b      	ldreq	r3, [r3, #4]
 802a568:	1949      	addeq	r1, r1, r5
 802a56a:	6021      	streq	r1, [r4, #0]
 802a56c:	e7ed      	b.n	802a54a <_free_r+0x22>
 802a56e:	461a      	mov	r2, r3
 802a570:	685b      	ldr	r3, [r3, #4]
 802a572:	b10b      	cbz	r3, 802a578 <_free_r+0x50>
 802a574:	42a3      	cmp	r3, r4
 802a576:	d9fa      	bls.n	802a56e <_free_r+0x46>
 802a578:	6811      	ldr	r1, [r2, #0]
 802a57a:	1855      	adds	r5, r2, r1
 802a57c:	42a5      	cmp	r5, r4
 802a57e:	d10b      	bne.n	802a598 <_free_r+0x70>
 802a580:	6824      	ldr	r4, [r4, #0]
 802a582:	4421      	add	r1, r4
 802a584:	1854      	adds	r4, r2, r1
 802a586:	42a3      	cmp	r3, r4
 802a588:	6011      	str	r1, [r2, #0]
 802a58a:	d1e0      	bne.n	802a54e <_free_r+0x26>
 802a58c:	681c      	ldr	r4, [r3, #0]
 802a58e:	685b      	ldr	r3, [r3, #4]
 802a590:	6053      	str	r3, [r2, #4]
 802a592:	4421      	add	r1, r4
 802a594:	6011      	str	r1, [r2, #0]
 802a596:	e7da      	b.n	802a54e <_free_r+0x26>
 802a598:	d902      	bls.n	802a5a0 <_free_r+0x78>
 802a59a:	230c      	movs	r3, #12
 802a59c:	6003      	str	r3, [r0, #0]
 802a59e:	e7d6      	b.n	802a54e <_free_r+0x26>
 802a5a0:	6825      	ldr	r5, [r4, #0]
 802a5a2:	1961      	adds	r1, r4, r5
 802a5a4:	428b      	cmp	r3, r1
 802a5a6:	bf04      	itt	eq
 802a5a8:	6819      	ldreq	r1, [r3, #0]
 802a5aa:	685b      	ldreq	r3, [r3, #4]
 802a5ac:	6063      	str	r3, [r4, #4]
 802a5ae:	bf04      	itt	eq
 802a5b0:	1949      	addeq	r1, r1, r5
 802a5b2:	6021      	streq	r1, [r4, #0]
 802a5b4:	6054      	str	r4, [r2, #4]
 802a5b6:	e7ca      	b.n	802a54e <_free_r+0x26>
 802a5b8:	b003      	add	sp, #12
 802a5ba:	bd30      	pop	{r4, r5, pc}
 802a5bc:	2401e620 	.word	0x2401e620

0802a5c0 <sbrk_aligned>:
 802a5c0:	b570      	push	{r4, r5, r6, lr}
 802a5c2:	4e0e      	ldr	r6, [pc, #56]	; (802a5fc <sbrk_aligned+0x3c>)
 802a5c4:	460c      	mov	r4, r1
 802a5c6:	6831      	ldr	r1, [r6, #0]
 802a5c8:	4605      	mov	r5, r0
 802a5ca:	b911      	cbnz	r1, 802a5d2 <sbrk_aligned+0x12>
 802a5cc:	f000 fd44 	bl	802b058 <_sbrk_r>
 802a5d0:	6030      	str	r0, [r6, #0]
 802a5d2:	4621      	mov	r1, r4
 802a5d4:	4628      	mov	r0, r5
 802a5d6:	f000 fd3f 	bl	802b058 <_sbrk_r>
 802a5da:	1c43      	adds	r3, r0, #1
 802a5dc:	d00a      	beq.n	802a5f4 <sbrk_aligned+0x34>
 802a5de:	1cc4      	adds	r4, r0, #3
 802a5e0:	f024 0403 	bic.w	r4, r4, #3
 802a5e4:	42a0      	cmp	r0, r4
 802a5e6:	d007      	beq.n	802a5f8 <sbrk_aligned+0x38>
 802a5e8:	1a21      	subs	r1, r4, r0
 802a5ea:	4628      	mov	r0, r5
 802a5ec:	f000 fd34 	bl	802b058 <_sbrk_r>
 802a5f0:	3001      	adds	r0, #1
 802a5f2:	d101      	bne.n	802a5f8 <sbrk_aligned+0x38>
 802a5f4:	f04f 34ff 	mov.w	r4, #4294967295
 802a5f8:	4620      	mov	r0, r4
 802a5fa:	bd70      	pop	{r4, r5, r6, pc}
 802a5fc:	2401e624 	.word	0x2401e624

0802a600 <_malloc_r>:
 802a600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a604:	1ccd      	adds	r5, r1, #3
 802a606:	f025 0503 	bic.w	r5, r5, #3
 802a60a:	3508      	adds	r5, #8
 802a60c:	2d0c      	cmp	r5, #12
 802a60e:	bf38      	it	cc
 802a610:	250c      	movcc	r5, #12
 802a612:	2d00      	cmp	r5, #0
 802a614:	4607      	mov	r7, r0
 802a616:	db01      	blt.n	802a61c <_malloc_r+0x1c>
 802a618:	42a9      	cmp	r1, r5
 802a61a:	d905      	bls.n	802a628 <_malloc_r+0x28>
 802a61c:	230c      	movs	r3, #12
 802a61e:	603b      	str	r3, [r7, #0]
 802a620:	2600      	movs	r6, #0
 802a622:	4630      	mov	r0, r6
 802a624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a628:	4e2e      	ldr	r6, [pc, #184]	; (802a6e4 <_malloc_r+0xe4>)
 802a62a:	f001 fe27 	bl	802c27c <__malloc_lock>
 802a62e:	6833      	ldr	r3, [r6, #0]
 802a630:	461c      	mov	r4, r3
 802a632:	bb34      	cbnz	r4, 802a682 <_malloc_r+0x82>
 802a634:	4629      	mov	r1, r5
 802a636:	4638      	mov	r0, r7
 802a638:	f7ff ffc2 	bl	802a5c0 <sbrk_aligned>
 802a63c:	1c43      	adds	r3, r0, #1
 802a63e:	4604      	mov	r4, r0
 802a640:	d14d      	bne.n	802a6de <_malloc_r+0xde>
 802a642:	6834      	ldr	r4, [r6, #0]
 802a644:	4626      	mov	r6, r4
 802a646:	2e00      	cmp	r6, #0
 802a648:	d140      	bne.n	802a6cc <_malloc_r+0xcc>
 802a64a:	6823      	ldr	r3, [r4, #0]
 802a64c:	4631      	mov	r1, r6
 802a64e:	4638      	mov	r0, r7
 802a650:	eb04 0803 	add.w	r8, r4, r3
 802a654:	f000 fd00 	bl	802b058 <_sbrk_r>
 802a658:	4580      	cmp	r8, r0
 802a65a:	d13a      	bne.n	802a6d2 <_malloc_r+0xd2>
 802a65c:	6821      	ldr	r1, [r4, #0]
 802a65e:	3503      	adds	r5, #3
 802a660:	1a6d      	subs	r5, r5, r1
 802a662:	f025 0503 	bic.w	r5, r5, #3
 802a666:	3508      	adds	r5, #8
 802a668:	2d0c      	cmp	r5, #12
 802a66a:	bf38      	it	cc
 802a66c:	250c      	movcc	r5, #12
 802a66e:	4629      	mov	r1, r5
 802a670:	4638      	mov	r0, r7
 802a672:	f7ff ffa5 	bl	802a5c0 <sbrk_aligned>
 802a676:	3001      	adds	r0, #1
 802a678:	d02b      	beq.n	802a6d2 <_malloc_r+0xd2>
 802a67a:	6823      	ldr	r3, [r4, #0]
 802a67c:	442b      	add	r3, r5
 802a67e:	6023      	str	r3, [r4, #0]
 802a680:	e00e      	b.n	802a6a0 <_malloc_r+0xa0>
 802a682:	6822      	ldr	r2, [r4, #0]
 802a684:	1b52      	subs	r2, r2, r5
 802a686:	d41e      	bmi.n	802a6c6 <_malloc_r+0xc6>
 802a688:	2a0b      	cmp	r2, #11
 802a68a:	d916      	bls.n	802a6ba <_malloc_r+0xba>
 802a68c:	1961      	adds	r1, r4, r5
 802a68e:	42a3      	cmp	r3, r4
 802a690:	6025      	str	r5, [r4, #0]
 802a692:	bf18      	it	ne
 802a694:	6059      	strne	r1, [r3, #4]
 802a696:	6863      	ldr	r3, [r4, #4]
 802a698:	bf08      	it	eq
 802a69a:	6031      	streq	r1, [r6, #0]
 802a69c:	5162      	str	r2, [r4, r5]
 802a69e:	604b      	str	r3, [r1, #4]
 802a6a0:	4638      	mov	r0, r7
 802a6a2:	f104 060b 	add.w	r6, r4, #11
 802a6a6:	f001 fdef 	bl	802c288 <__malloc_unlock>
 802a6aa:	f026 0607 	bic.w	r6, r6, #7
 802a6ae:	1d23      	adds	r3, r4, #4
 802a6b0:	1af2      	subs	r2, r6, r3
 802a6b2:	d0b6      	beq.n	802a622 <_malloc_r+0x22>
 802a6b4:	1b9b      	subs	r3, r3, r6
 802a6b6:	50a3      	str	r3, [r4, r2]
 802a6b8:	e7b3      	b.n	802a622 <_malloc_r+0x22>
 802a6ba:	6862      	ldr	r2, [r4, #4]
 802a6bc:	42a3      	cmp	r3, r4
 802a6be:	bf0c      	ite	eq
 802a6c0:	6032      	streq	r2, [r6, #0]
 802a6c2:	605a      	strne	r2, [r3, #4]
 802a6c4:	e7ec      	b.n	802a6a0 <_malloc_r+0xa0>
 802a6c6:	4623      	mov	r3, r4
 802a6c8:	6864      	ldr	r4, [r4, #4]
 802a6ca:	e7b2      	b.n	802a632 <_malloc_r+0x32>
 802a6cc:	4634      	mov	r4, r6
 802a6ce:	6876      	ldr	r6, [r6, #4]
 802a6d0:	e7b9      	b.n	802a646 <_malloc_r+0x46>
 802a6d2:	230c      	movs	r3, #12
 802a6d4:	603b      	str	r3, [r7, #0]
 802a6d6:	4638      	mov	r0, r7
 802a6d8:	f001 fdd6 	bl	802c288 <__malloc_unlock>
 802a6dc:	e7a1      	b.n	802a622 <_malloc_r+0x22>
 802a6de:	6025      	str	r5, [r4, #0]
 802a6e0:	e7de      	b.n	802a6a0 <_malloc_r+0xa0>
 802a6e2:	bf00      	nop
 802a6e4:	2401e620 	.word	0x2401e620

0802a6e8 <__cvt>:
 802a6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a6ea:	ed2d 8b02 	vpush	{d8}
 802a6ee:	eeb0 8b40 	vmov.f64	d8, d0
 802a6f2:	b085      	sub	sp, #20
 802a6f4:	4617      	mov	r7, r2
 802a6f6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802a6f8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802a6fa:	ee18 2a90 	vmov	r2, s17
 802a6fe:	f025 0520 	bic.w	r5, r5, #32
 802a702:	2a00      	cmp	r2, #0
 802a704:	bfb6      	itet	lt
 802a706:	222d      	movlt	r2, #45	; 0x2d
 802a708:	2200      	movge	r2, #0
 802a70a:	eeb1 8b40 	vneglt.f64	d8, d0
 802a70e:	2d46      	cmp	r5, #70	; 0x46
 802a710:	460c      	mov	r4, r1
 802a712:	701a      	strb	r2, [r3, #0]
 802a714:	d004      	beq.n	802a720 <__cvt+0x38>
 802a716:	2d45      	cmp	r5, #69	; 0x45
 802a718:	d100      	bne.n	802a71c <__cvt+0x34>
 802a71a:	3401      	adds	r4, #1
 802a71c:	2102      	movs	r1, #2
 802a71e:	e000      	b.n	802a722 <__cvt+0x3a>
 802a720:	2103      	movs	r1, #3
 802a722:	ab03      	add	r3, sp, #12
 802a724:	9301      	str	r3, [sp, #4]
 802a726:	ab02      	add	r3, sp, #8
 802a728:	9300      	str	r3, [sp, #0]
 802a72a:	4622      	mov	r2, r4
 802a72c:	4633      	mov	r3, r6
 802a72e:	eeb0 0b48 	vmov.f64	d0, d8
 802a732:	f000 fe11 	bl	802b358 <_dtoa_r>
 802a736:	2d47      	cmp	r5, #71	; 0x47
 802a738:	d101      	bne.n	802a73e <__cvt+0x56>
 802a73a:	07fb      	lsls	r3, r7, #31
 802a73c:	d51a      	bpl.n	802a774 <__cvt+0x8c>
 802a73e:	2d46      	cmp	r5, #70	; 0x46
 802a740:	eb00 0204 	add.w	r2, r0, r4
 802a744:	d10c      	bne.n	802a760 <__cvt+0x78>
 802a746:	7803      	ldrb	r3, [r0, #0]
 802a748:	2b30      	cmp	r3, #48	; 0x30
 802a74a:	d107      	bne.n	802a75c <__cvt+0x74>
 802a74c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802a750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a754:	bf1c      	itt	ne
 802a756:	f1c4 0401 	rsbne	r4, r4, #1
 802a75a:	6034      	strne	r4, [r6, #0]
 802a75c:	6833      	ldr	r3, [r6, #0]
 802a75e:	441a      	add	r2, r3
 802a760:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802a764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a768:	bf08      	it	eq
 802a76a:	9203      	streq	r2, [sp, #12]
 802a76c:	2130      	movs	r1, #48	; 0x30
 802a76e:	9b03      	ldr	r3, [sp, #12]
 802a770:	4293      	cmp	r3, r2
 802a772:	d307      	bcc.n	802a784 <__cvt+0x9c>
 802a774:	9b03      	ldr	r3, [sp, #12]
 802a776:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802a778:	1a1b      	subs	r3, r3, r0
 802a77a:	6013      	str	r3, [r2, #0]
 802a77c:	b005      	add	sp, #20
 802a77e:	ecbd 8b02 	vpop	{d8}
 802a782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a784:	1c5c      	adds	r4, r3, #1
 802a786:	9403      	str	r4, [sp, #12]
 802a788:	7019      	strb	r1, [r3, #0]
 802a78a:	e7f0      	b.n	802a76e <__cvt+0x86>

0802a78c <__exponent>:
 802a78c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802a78e:	4603      	mov	r3, r0
 802a790:	2900      	cmp	r1, #0
 802a792:	bfb8      	it	lt
 802a794:	4249      	neglt	r1, r1
 802a796:	f803 2b02 	strb.w	r2, [r3], #2
 802a79a:	bfb4      	ite	lt
 802a79c:	222d      	movlt	r2, #45	; 0x2d
 802a79e:	222b      	movge	r2, #43	; 0x2b
 802a7a0:	2909      	cmp	r1, #9
 802a7a2:	7042      	strb	r2, [r0, #1]
 802a7a4:	dd2a      	ble.n	802a7fc <__exponent+0x70>
 802a7a6:	f10d 0407 	add.w	r4, sp, #7
 802a7aa:	46a4      	mov	ip, r4
 802a7ac:	270a      	movs	r7, #10
 802a7ae:	46a6      	mov	lr, r4
 802a7b0:	460a      	mov	r2, r1
 802a7b2:	fb91 f6f7 	sdiv	r6, r1, r7
 802a7b6:	fb07 1516 	mls	r5, r7, r6, r1
 802a7ba:	3530      	adds	r5, #48	; 0x30
 802a7bc:	2a63      	cmp	r2, #99	; 0x63
 802a7be:	f104 34ff 	add.w	r4, r4, #4294967295
 802a7c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 802a7c6:	4631      	mov	r1, r6
 802a7c8:	dcf1      	bgt.n	802a7ae <__exponent+0x22>
 802a7ca:	3130      	adds	r1, #48	; 0x30
 802a7cc:	f1ae 0502 	sub.w	r5, lr, #2
 802a7d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 802a7d4:	1c44      	adds	r4, r0, #1
 802a7d6:	4629      	mov	r1, r5
 802a7d8:	4561      	cmp	r1, ip
 802a7da:	d30a      	bcc.n	802a7f2 <__exponent+0x66>
 802a7dc:	f10d 0209 	add.w	r2, sp, #9
 802a7e0:	eba2 020e 	sub.w	r2, r2, lr
 802a7e4:	4565      	cmp	r5, ip
 802a7e6:	bf88      	it	hi
 802a7e8:	2200      	movhi	r2, #0
 802a7ea:	4413      	add	r3, r2
 802a7ec:	1a18      	subs	r0, r3, r0
 802a7ee:	b003      	add	sp, #12
 802a7f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a7f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 802a7f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 802a7fa:	e7ed      	b.n	802a7d8 <__exponent+0x4c>
 802a7fc:	2330      	movs	r3, #48	; 0x30
 802a7fe:	3130      	adds	r1, #48	; 0x30
 802a800:	7083      	strb	r3, [r0, #2]
 802a802:	70c1      	strb	r1, [r0, #3]
 802a804:	1d03      	adds	r3, r0, #4
 802a806:	e7f1      	b.n	802a7ec <__exponent+0x60>

0802a808 <_printf_float>:
 802a808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a80c:	b08b      	sub	sp, #44	; 0x2c
 802a80e:	460c      	mov	r4, r1
 802a810:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 802a814:	4616      	mov	r6, r2
 802a816:	461f      	mov	r7, r3
 802a818:	4605      	mov	r5, r0
 802a81a:	f001 fcc3 	bl	802c1a4 <_localeconv_r>
 802a81e:	f8d0 b000 	ldr.w	fp, [r0]
 802a822:	4658      	mov	r0, fp
 802a824:	f7d5 fd5c 	bl	80002e0 <strlen>
 802a828:	2300      	movs	r3, #0
 802a82a:	9308      	str	r3, [sp, #32]
 802a82c:	f8d8 3000 	ldr.w	r3, [r8]
 802a830:	f894 9018 	ldrb.w	r9, [r4, #24]
 802a834:	6822      	ldr	r2, [r4, #0]
 802a836:	3307      	adds	r3, #7
 802a838:	f023 0307 	bic.w	r3, r3, #7
 802a83c:	f103 0108 	add.w	r1, r3, #8
 802a840:	f8c8 1000 	str.w	r1, [r8]
 802a844:	4682      	mov	sl, r0
 802a846:	e9d3 0100 	ldrd	r0, r1, [r3]
 802a84a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 802a84e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 802aab0 <_printf_float+0x2a8>
 802a852:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 802a856:	eeb0 6bc0 	vabs.f64	d6, d0
 802a85a:	eeb4 6b47 	vcmp.f64	d6, d7
 802a85e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a862:	dd24      	ble.n	802a8ae <_printf_float+0xa6>
 802a864:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 802a868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a86c:	d502      	bpl.n	802a874 <_printf_float+0x6c>
 802a86e:	232d      	movs	r3, #45	; 0x2d
 802a870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802a874:	4b90      	ldr	r3, [pc, #576]	; (802aab8 <_printf_float+0x2b0>)
 802a876:	4891      	ldr	r0, [pc, #580]	; (802aabc <_printf_float+0x2b4>)
 802a878:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 802a87c:	bf94      	ite	ls
 802a87e:	4698      	movls	r8, r3
 802a880:	4680      	movhi	r8, r0
 802a882:	2303      	movs	r3, #3
 802a884:	6123      	str	r3, [r4, #16]
 802a886:	f022 0204 	bic.w	r2, r2, #4
 802a88a:	2300      	movs	r3, #0
 802a88c:	6022      	str	r2, [r4, #0]
 802a88e:	9304      	str	r3, [sp, #16]
 802a890:	9700      	str	r7, [sp, #0]
 802a892:	4633      	mov	r3, r6
 802a894:	aa09      	add	r2, sp, #36	; 0x24
 802a896:	4621      	mov	r1, r4
 802a898:	4628      	mov	r0, r5
 802a89a:	f000 f9d3 	bl	802ac44 <_printf_common>
 802a89e:	3001      	adds	r0, #1
 802a8a0:	f040 808a 	bne.w	802a9b8 <_printf_float+0x1b0>
 802a8a4:	f04f 30ff 	mov.w	r0, #4294967295
 802a8a8:	b00b      	add	sp, #44	; 0x2c
 802a8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a8ae:	eeb4 0b40 	vcmp.f64	d0, d0
 802a8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a8b6:	d709      	bvc.n	802a8cc <_printf_float+0xc4>
 802a8b8:	ee10 3a90 	vmov	r3, s1
 802a8bc:	2b00      	cmp	r3, #0
 802a8be:	bfbc      	itt	lt
 802a8c0:	232d      	movlt	r3, #45	; 0x2d
 802a8c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 802a8c6:	487e      	ldr	r0, [pc, #504]	; (802aac0 <_printf_float+0x2b8>)
 802a8c8:	4b7e      	ldr	r3, [pc, #504]	; (802aac4 <_printf_float+0x2bc>)
 802a8ca:	e7d5      	b.n	802a878 <_printf_float+0x70>
 802a8cc:	6863      	ldr	r3, [r4, #4]
 802a8ce:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 802a8d2:	9104      	str	r1, [sp, #16]
 802a8d4:	1c59      	adds	r1, r3, #1
 802a8d6:	d13c      	bne.n	802a952 <_printf_float+0x14a>
 802a8d8:	2306      	movs	r3, #6
 802a8da:	6063      	str	r3, [r4, #4]
 802a8dc:	2300      	movs	r3, #0
 802a8de:	9303      	str	r3, [sp, #12]
 802a8e0:	ab08      	add	r3, sp, #32
 802a8e2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 802a8e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 802a8ea:	ab07      	add	r3, sp, #28
 802a8ec:	6861      	ldr	r1, [r4, #4]
 802a8ee:	9300      	str	r3, [sp, #0]
 802a8f0:	6022      	str	r2, [r4, #0]
 802a8f2:	f10d 031b 	add.w	r3, sp, #27
 802a8f6:	4628      	mov	r0, r5
 802a8f8:	f7ff fef6 	bl	802a6e8 <__cvt>
 802a8fc:	9b04      	ldr	r3, [sp, #16]
 802a8fe:	9907      	ldr	r1, [sp, #28]
 802a900:	2b47      	cmp	r3, #71	; 0x47
 802a902:	4680      	mov	r8, r0
 802a904:	d108      	bne.n	802a918 <_printf_float+0x110>
 802a906:	1cc8      	adds	r0, r1, #3
 802a908:	db02      	blt.n	802a910 <_printf_float+0x108>
 802a90a:	6863      	ldr	r3, [r4, #4]
 802a90c:	4299      	cmp	r1, r3
 802a90e:	dd41      	ble.n	802a994 <_printf_float+0x18c>
 802a910:	f1a9 0902 	sub.w	r9, r9, #2
 802a914:	fa5f f989 	uxtb.w	r9, r9
 802a918:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 802a91c:	d820      	bhi.n	802a960 <_printf_float+0x158>
 802a91e:	3901      	subs	r1, #1
 802a920:	464a      	mov	r2, r9
 802a922:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802a926:	9107      	str	r1, [sp, #28]
 802a928:	f7ff ff30 	bl	802a78c <__exponent>
 802a92c:	9a08      	ldr	r2, [sp, #32]
 802a92e:	9004      	str	r0, [sp, #16]
 802a930:	1813      	adds	r3, r2, r0
 802a932:	2a01      	cmp	r2, #1
 802a934:	6123      	str	r3, [r4, #16]
 802a936:	dc02      	bgt.n	802a93e <_printf_float+0x136>
 802a938:	6822      	ldr	r2, [r4, #0]
 802a93a:	07d2      	lsls	r2, r2, #31
 802a93c:	d501      	bpl.n	802a942 <_printf_float+0x13a>
 802a93e:	3301      	adds	r3, #1
 802a940:	6123      	str	r3, [r4, #16]
 802a942:	f89d 301b 	ldrb.w	r3, [sp, #27]
 802a946:	2b00      	cmp	r3, #0
 802a948:	d0a2      	beq.n	802a890 <_printf_float+0x88>
 802a94a:	232d      	movs	r3, #45	; 0x2d
 802a94c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802a950:	e79e      	b.n	802a890 <_printf_float+0x88>
 802a952:	9904      	ldr	r1, [sp, #16]
 802a954:	2947      	cmp	r1, #71	; 0x47
 802a956:	d1c1      	bne.n	802a8dc <_printf_float+0xd4>
 802a958:	2b00      	cmp	r3, #0
 802a95a:	d1bf      	bne.n	802a8dc <_printf_float+0xd4>
 802a95c:	2301      	movs	r3, #1
 802a95e:	e7bc      	b.n	802a8da <_printf_float+0xd2>
 802a960:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 802a964:	d118      	bne.n	802a998 <_printf_float+0x190>
 802a966:	2900      	cmp	r1, #0
 802a968:	6863      	ldr	r3, [r4, #4]
 802a96a:	dd0b      	ble.n	802a984 <_printf_float+0x17c>
 802a96c:	6121      	str	r1, [r4, #16]
 802a96e:	b913      	cbnz	r3, 802a976 <_printf_float+0x16e>
 802a970:	6822      	ldr	r2, [r4, #0]
 802a972:	07d0      	lsls	r0, r2, #31
 802a974:	d502      	bpl.n	802a97c <_printf_float+0x174>
 802a976:	3301      	adds	r3, #1
 802a978:	440b      	add	r3, r1
 802a97a:	6123      	str	r3, [r4, #16]
 802a97c:	2300      	movs	r3, #0
 802a97e:	65a1      	str	r1, [r4, #88]	; 0x58
 802a980:	9304      	str	r3, [sp, #16]
 802a982:	e7de      	b.n	802a942 <_printf_float+0x13a>
 802a984:	b913      	cbnz	r3, 802a98c <_printf_float+0x184>
 802a986:	6822      	ldr	r2, [r4, #0]
 802a988:	07d2      	lsls	r2, r2, #31
 802a98a:	d501      	bpl.n	802a990 <_printf_float+0x188>
 802a98c:	3302      	adds	r3, #2
 802a98e:	e7f4      	b.n	802a97a <_printf_float+0x172>
 802a990:	2301      	movs	r3, #1
 802a992:	e7f2      	b.n	802a97a <_printf_float+0x172>
 802a994:	f04f 0967 	mov.w	r9, #103	; 0x67
 802a998:	9b08      	ldr	r3, [sp, #32]
 802a99a:	4299      	cmp	r1, r3
 802a99c:	db05      	blt.n	802a9aa <_printf_float+0x1a2>
 802a99e:	6823      	ldr	r3, [r4, #0]
 802a9a0:	6121      	str	r1, [r4, #16]
 802a9a2:	07d8      	lsls	r0, r3, #31
 802a9a4:	d5ea      	bpl.n	802a97c <_printf_float+0x174>
 802a9a6:	1c4b      	adds	r3, r1, #1
 802a9a8:	e7e7      	b.n	802a97a <_printf_float+0x172>
 802a9aa:	2900      	cmp	r1, #0
 802a9ac:	bfd4      	ite	le
 802a9ae:	f1c1 0202 	rsble	r2, r1, #2
 802a9b2:	2201      	movgt	r2, #1
 802a9b4:	4413      	add	r3, r2
 802a9b6:	e7e0      	b.n	802a97a <_printf_float+0x172>
 802a9b8:	6823      	ldr	r3, [r4, #0]
 802a9ba:	055a      	lsls	r2, r3, #21
 802a9bc:	d407      	bmi.n	802a9ce <_printf_float+0x1c6>
 802a9be:	6923      	ldr	r3, [r4, #16]
 802a9c0:	4642      	mov	r2, r8
 802a9c2:	4631      	mov	r1, r6
 802a9c4:	4628      	mov	r0, r5
 802a9c6:	47b8      	blx	r7
 802a9c8:	3001      	adds	r0, #1
 802a9ca:	d12a      	bne.n	802aa22 <_printf_float+0x21a>
 802a9cc:	e76a      	b.n	802a8a4 <_printf_float+0x9c>
 802a9ce:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 802a9d2:	f240 80e2 	bls.w	802ab9a <_printf_float+0x392>
 802a9d6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 802a9da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802a9de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a9e2:	d133      	bne.n	802aa4c <_printf_float+0x244>
 802a9e4:	4a38      	ldr	r2, [pc, #224]	; (802aac8 <_printf_float+0x2c0>)
 802a9e6:	2301      	movs	r3, #1
 802a9e8:	4631      	mov	r1, r6
 802a9ea:	4628      	mov	r0, r5
 802a9ec:	47b8      	blx	r7
 802a9ee:	3001      	adds	r0, #1
 802a9f0:	f43f af58 	beq.w	802a8a4 <_printf_float+0x9c>
 802a9f4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 802a9f8:	429a      	cmp	r2, r3
 802a9fa:	db02      	blt.n	802aa02 <_printf_float+0x1fa>
 802a9fc:	6823      	ldr	r3, [r4, #0]
 802a9fe:	07d8      	lsls	r0, r3, #31
 802aa00:	d50f      	bpl.n	802aa22 <_printf_float+0x21a>
 802aa02:	4653      	mov	r3, sl
 802aa04:	465a      	mov	r2, fp
 802aa06:	4631      	mov	r1, r6
 802aa08:	4628      	mov	r0, r5
 802aa0a:	47b8      	blx	r7
 802aa0c:	3001      	adds	r0, #1
 802aa0e:	f43f af49 	beq.w	802a8a4 <_printf_float+0x9c>
 802aa12:	f04f 0800 	mov.w	r8, #0
 802aa16:	f104 091a 	add.w	r9, r4, #26
 802aa1a:	9b08      	ldr	r3, [sp, #32]
 802aa1c:	3b01      	subs	r3, #1
 802aa1e:	4543      	cmp	r3, r8
 802aa20:	dc09      	bgt.n	802aa36 <_printf_float+0x22e>
 802aa22:	6823      	ldr	r3, [r4, #0]
 802aa24:	079b      	lsls	r3, r3, #30
 802aa26:	f100 8108 	bmi.w	802ac3a <_printf_float+0x432>
 802aa2a:	68e0      	ldr	r0, [r4, #12]
 802aa2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802aa2e:	4298      	cmp	r0, r3
 802aa30:	bfb8      	it	lt
 802aa32:	4618      	movlt	r0, r3
 802aa34:	e738      	b.n	802a8a8 <_printf_float+0xa0>
 802aa36:	2301      	movs	r3, #1
 802aa38:	464a      	mov	r2, r9
 802aa3a:	4631      	mov	r1, r6
 802aa3c:	4628      	mov	r0, r5
 802aa3e:	47b8      	blx	r7
 802aa40:	3001      	adds	r0, #1
 802aa42:	f43f af2f 	beq.w	802a8a4 <_printf_float+0x9c>
 802aa46:	f108 0801 	add.w	r8, r8, #1
 802aa4a:	e7e6      	b.n	802aa1a <_printf_float+0x212>
 802aa4c:	9b07      	ldr	r3, [sp, #28]
 802aa4e:	2b00      	cmp	r3, #0
 802aa50:	dc3c      	bgt.n	802aacc <_printf_float+0x2c4>
 802aa52:	4a1d      	ldr	r2, [pc, #116]	; (802aac8 <_printf_float+0x2c0>)
 802aa54:	2301      	movs	r3, #1
 802aa56:	4631      	mov	r1, r6
 802aa58:	4628      	mov	r0, r5
 802aa5a:	47b8      	blx	r7
 802aa5c:	3001      	adds	r0, #1
 802aa5e:	f43f af21 	beq.w	802a8a4 <_printf_float+0x9c>
 802aa62:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 802aa66:	4313      	orrs	r3, r2
 802aa68:	d102      	bne.n	802aa70 <_printf_float+0x268>
 802aa6a:	6823      	ldr	r3, [r4, #0]
 802aa6c:	07d9      	lsls	r1, r3, #31
 802aa6e:	d5d8      	bpl.n	802aa22 <_printf_float+0x21a>
 802aa70:	4653      	mov	r3, sl
 802aa72:	465a      	mov	r2, fp
 802aa74:	4631      	mov	r1, r6
 802aa76:	4628      	mov	r0, r5
 802aa78:	47b8      	blx	r7
 802aa7a:	3001      	adds	r0, #1
 802aa7c:	f43f af12 	beq.w	802a8a4 <_printf_float+0x9c>
 802aa80:	f04f 0900 	mov.w	r9, #0
 802aa84:	f104 0a1a 	add.w	sl, r4, #26
 802aa88:	9b07      	ldr	r3, [sp, #28]
 802aa8a:	425b      	negs	r3, r3
 802aa8c:	454b      	cmp	r3, r9
 802aa8e:	dc01      	bgt.n	802aa94 <_printf_float+0x28c>
 802aa90:	9b08      	ldr	r3, [sp, #32]
 802aa92:	e795      	b.n	802a9c0 <_printf_float+0x1b8>
 802aa94:	2301      	movs	r3, #1
 802aa96:	4652      	mov	r2, sl
 802aa98:	4631      	mov	r1, r6
 802aa9a:	4628      	mov	r0, r5
 802aa9c:	47b8      	blx	r7
 802aa9e:	3001      	adds	r0, #1
 802aaa0:	f43f af00 	beq.w	802a8a4 <_printf_float+0x9c>
 802aaa4:	f109 0901 	add.w	r9, r9, #1
 802aaa8:	e7ee      	b.n	802aa88 <_printf_float+0x280>
 802aaaa:	bf00      	nop
 802aaac:	f3af 8000 	nop.w
 802aab0:	ffffffff 	.word	0xffffffff
 802aab4:	7fefffff 	.word	0x7fefffff
 802aab8:	0802dbd0 	.word	0x0802dbd0
 802aabc:	0802dbd4 	.word	0x0802dbd4
 802aac0:	0802dbdc 	.word	0x0802dbdc
 802aac4:	0802dbd8 	.word	0x0802dbd8
 802aac8:	0802dbe0 	.word	0x0802dbe0
 802aacc:	9a08      	ldr	r2, [sp, #32]
 802aace:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802aad0:	429a      	cmp	r2, r3
 802aad2:	bfa8      	it	ge
 802aad4:	461a      	movge	r2, r3
 802aad6:	2a00      	cmp	r2, #0
 802aad8:	4691      	mov	r9, r2
 802aada:	dc38      	bgt.n	802ab4e <_printf_float+0x346>
 802aadc:	2300      	movs	r3, #0
 802aade:	9305      	str	r3, [sp, #20]
 802aae0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802aae4:	f104 021a 	add.w	r2, r4, #26
 802aae8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802aaea:	9905      	ldr	r1, [sp, #20]
 802aaec:	9304      	str	r3, [sp, #16]
 802aaee:	eba3 0309 	sub.w	r3, r3, r9
 802aaf2:	428b      	cmp	r3, r1
 802aaf4:	dc33      	bgt.n	802ab5e <_printf_float+0x356>
 802aaf6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 802aafa:	429a      	cmp	r2, r3
 802aafc:	db3c      	blt.n	802ab78 <_printf_float+0x370>
 802aafe:	6823      	ldr	r3, [r4, #0]
 802ab00:	07da      	lsls	r2, r3, #31
 802ab02:	d439      	bmi.n	802ab78 <_printf_float+0x370>
 802ab04:	9b08      	ldr	r3, [sp, #32]
 802ab06:	9a04      	ldr	r2, [sp, #16]
 802ab08:	9907      	ldr	r1, [sp, #28]
 802ab0a:	1a9a      	subs	r2, r3, r2
 802ab0c:	eba3 0901 	sub.w	r9, r3, r1
 802ab10:	4591      	cmp	r9, r2
 802ab12:	bfa8      	it	ge
 802ab14:	4691      	movge	r9, r2
 802ab16:	f1b9 0f00 	cmp.w	r9, #0
 802ab1a:	dc35      	bgt.n	802ab88 <_printf_float+0x380>
 802ab1c:	f04f 0800 	mov.w	r8, #0
 802ab20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802ab24:	f104 0a1a 	add.w	sl, r4, #26
 802ab28:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 802ab2c:	1a9b      	subs	r3, r3, r2
 802ab2e:	eba3 0309 	sub.w	r3, r3, r9
 802ab32:	4543      	cmp	r3, r8
 802ab34:	f77f af75 	ble.w	802aa22 <_printf_float+0x21a>
 802ab38:	2301      	movs	r3, #1
 802ab3a:	4652      	mov	r2, sl
 802ab3c:	4631      	mov	r1, r6
 802ab3e:	4628      	mov	r0, r5
 802ab40:	47b8      	blx	r7
 802ab42:	3001      	adds	r0, #1
 802ab44:	f43f aeae 	beq.w	802a8a4 <_printf_float+0x9c>
 802ab48:	f108 0801 	add.w	r8, r8, #1
 802ab4c:	e7ec      	b.n	802ab28 <_printf_float+0x320>
 802ab4e:	4613      	mov	r3, r2
 802ab50:	4631      	mov	r1, r6
 802ab52:	4642      	mov	r2, r8
 802ab54:	4628      	mov	r0, r5
 802ab56:	47b8      	blx	r7
 802ab58:	3001      	adds	r0, #1
 802ab5a:	d1bf      	bne.n	802aadc <_printf_float+0x2d4>
 802ab5c:	e6a2      	b.n	802a8a4 <_printf_float+0x9c>
 802ab5e:	2301      	movs	r3, #1
 802ab60:	4631      	mov	r1, r6
 802ab62:	4628      	mov	r0, r5
 802ab64:	9204      	str	r2, [sp, #16]
 802ab66:	47b8      	blx	r7
 802ab68:	3001      	adds	r0, #1
 802ab6a:	f43f ae9b 	beq.w	802a8a4 <_printf_float+0x9c>
 802ab6e:	9b05      	ldr	r3, [sp, #20]
 802ab70:	9a04      	ldr	r2, [sp, #16]
 802ab72:	3301      	adds	r3, #1
 802ab74:	9305      	str	r3, [sp, #20]
 802ab76:	e7b7      	b.n	802aae8 <_printf_float+0x2e0>
 802ab78:	4653      	mov	r3, sl
 802ab7a:	465a      	mov	r2, fp
 802ab7c:	4631      	mov	r1, r6
 802ab7e:	4628      	mov	r0, r5
 802ab80:	47b8      	blx	r7
 802ab82:	3001      	adds	r0, #1
 802ab84:	d1be      	bne.n	802ab04 <_printf_float+0x2fc>
 802ab86:	e68d      	b.n	802a8a4 <_printf_float+0x9c>
 802ab88:	9a04      	ldr	r2, [sp, #16]
 802ab8a:	464b      	mov	r3, r9
 802ab8c:	4442      	add	r2, r8
 802ab8e:	4631      	mov	r1, r6
 802ab90:	4628      	mov	r0, r5
 802ab92:	47b8      	blx	r7
 802ab94:	3001      	adds	r0, #1
 802ab96:	d1c1      	bne.n	802ab1c <_printf_float+0x314>
 802ab98:	e684      	b.n	802a8a4 <_printf_float+0x9c>
 802ab9a:	9a08      	ldr	r2, [sp, #32]
 802ab9c:	2a01      	cmp	r2, #1
 802ab9e:	dc01      	bgt.n	802aba4 <_printf_float+0x39c>
 802aba0:	07db      	lsls	r3, r3, #31
 802aba2:	d537      	bpl.n	802ac14 <_printf_float+0x40c>
 802aba4:	2301      	movs	r3, #1
 802aba6:	4642      	mov	r2, r8
 802aba8:	4631      	mov	r1, r6
 802abaa:	4628      	mov	r0, r5
 802abac:	47b8      	blx	r7
 802abae:	3001      	adds	r0, #1
 802abb0:	f43f ae78 	beq.w	802a8a4 <_printf_float+0x9c>
 802abb4:	4653      	mov	r3, sl
 802abb6:	465a      	mov	r2, fp
 802abb8:	4631      	mov	r1, r6
 802abba:	4628      	mov	r0, r5
 802abbc:	47b8      	blx	r7
 802abbe:	3001      	adds	r0, #1
 802abc0:	f43f ae70 	beq.w	802a8a4 <_printf_float+0x9c>
 802abc4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 802abc8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802abcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802abd0:	d01b      	beq.n	802ac0a <_printf_float+0x402>
 802abd2:	9b08      	ldr	r3, [sp, #32]
 802abd4:	f108 0201 	add.w	r2, r8, #1
 802abd8:	3b01      	subs	r3, #1
 802abda:	4631      	mov	r1, r6
 802abdc:	4628      	mov	r0, r5
 802abde:	47b8      	blx	r7
 802abe0:	3001      	adds	r0, #1
 802abe2:	d10e      	bne.n	802ac02 <_printf_float+0x3fa>
 802abe4:	e65e      	b.n	802a8a4 <_printf_float+0x9c>
 802abe6:	2301      	movs	r3, #1
 802abe8:	464a      	mov	r2, r9
 802abea:	4631      	mov	r1, r6
 802abec:	4628      	mov	r0, r5
 802abee:	47b8      	blx	r7
 802abf0:	3001      	adds	r0, #1
 802abf2:	f43f ae57 	beq.w	802a8a4 <_printf_float+0x9c>
 802abf6:	f108 0801 	add.w	r8, r8, #1
 802abfa:	9b08      	ldr	r3, [sp, #32]
 802abfc:	3b01      	subs	r3, #1
 802abfe:	4543      	cmp	r3, r8
 802ac00:	dcf1      	bgt.n	802abe6 <_printf_float+0x3de>
 802ac02:	9b04      	ldr	r3, [sp, #16]
 802ac04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 802ac08:	e6db      	b.n	802a9c2 <_printf_float+0x1ba>
 802ac0a:	f04f 0800 	mov.w	r8, #0
 802ac0e:	f104 091a 	add.w	r9, r4, #26
 802ac12:	e7f2      	b.n	802abfa <_printf_float+0x3f2>
 802ac14:	2301      	movs	r3, #1
 802ac16:	4642      	mov	r2, r8
 802ac18:	e7df      	b.n	802abda <_printf_float+0x3d2>
 802ac1a:	2301      	movs	r3, #1
 802ac1c:	464a      	mov	r2, r9
 802ac1e:	4631      	mov	r1, r6
 802ac20:	4628      	mov	r0, r5
 802ac22:	47b8      	blx	r7
 802ac24:	3001      	adds	r0, #1
 802ac26:	f43f ae3d 	beq.w	802a8a4 <_printf_float+0x9c>
 802ac2a:	f108 0801 	add.w	r8, r8, #1
 802ac2e:	68e3      	ldr	r3, [r4, #12]
 802ac30:	9909      	ldr	r1, [sp, #36]	; 0x24
 802ac32:	1a5b      	subs	r3, r3, r1
 802ac34:	4543      	cmp	r3, r8
 802ac36:	dcf0      	bgt.n	802ac1a <_printf_float+0x412>
 802ac38:	e6f7      	b.n	802aa2a <_printf_float+0x222>
 802ac3a:	f04f 0800 	mov.w	r8, #0
 802ac3e:	f104 0919 	add.w	r9, r4, #25
 802ac42:	e7f4      	b.n	802ac2e <_printf_float+0x426>

0802ac44 <_printf_common>:
 802ac44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802ac48:	4616      	mov	r6, r2
 802ac4a:	4699      	mov	r9, r3
 802ac4c:	688a      	ldr	r2, [r1, #8]
 802ac4e:	690b      	ldr	r3, [r1, #16]
 802ac50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802ac54:	4293      	cmp	r3, r2
 802ac56:	bfb8      	it	lt
 802ac58:	4613      	movlt	r3, r2
 802ac5a:	6033      	str	r3, [r6, #0]
 802ac5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802ac60:	4607      	mov	r7, r0
 802ac62:	460c      	mov	r4, r1
 802ac64:	b10a      	cbz	r2, 802ac6a <_printf_common+0x26>
 802ac66:	3301      	adds	r3, #1
 802ac68:	6033      	str	r3, [r6, #0]
 802ac6a:	6823      	ldr	r3, [r4, #0]
 802ac6c:	0699      	lsls	r1, r3, #26
 802ac6e:	bf42      	ittt	mi
 802ac70:	6833      	ldrmi	r3, [r6, #0]
 802ac72:	3302      	addmi	r3, #2
 802ac74:	6033      	strmi	r3, [r6, #0]
 802ac76:	6825      	ldr	r5, [r4, #0]
 802ac78:	f015 0506 	ands.w	r5, r5, #6
 802ac7c:	d106      	bne.n	802ac8c <_printf_common+0x48>
 802ac7e:	f104 0a19 	add.w	sl, r4, #25
 802ac82:	68e3      	ldr	r3, [r4, #12]
 802ac84:	6832      	ldr	r2, [r6, #0]
 802ac86:	1a9b      	subs	r3, r3, r2
 802ac88:	42ab      	cmp	r3, r5
 802ac8a:	dc26      	bgt.n	802acda <_printf_common+0x96>
 802ac8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802ac90:	1e13      	subs	r3, r2, #0
 802ac92:	6822      	ldr	r2, [r4, #0]
 802ac94:	bf18      	it	ne
 802ac96:	2301      	movne	r3, #1
 802ac98:	0692      	lsls	r2, r2, #26
 802ac9a:	d42b      	bmi.n	802acf4 <_printf_common+0xb0>
 802ac9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802aca0:	4649      	mov	r1, r9
 802aca2:	4638      	mov	r0, r7
 802aca4:	47c0      	blx	r8
 802aca6:	3001      	adds	r0, #1
 802aca8:	d01e      	beq.n	802ace8 <_printf_common+0xa4>
 802acaa:	6823      	ldr	r3, [r4, #0]
 802acac:	68e5      	ldr	r5, [r4, #12]
 802acae:	6832      	ldr	r2, [r6, #0]
 802acb0:	f003 0306 	and.w	r3, r3, #6
 802acb4:	2b04      	cmp	r3, #4
 802acb6:	bf08      	it	eq
 802acb8:	1aad      	subeq	r5, r5, r2
 802acba:	68a3      	ldr	r3, [r4, #8]
 802acbc:	6922      	ldr	r2, [r4, #16]
 802acbe:	bf0c      	ite	eq
 802acc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802acc4:	2500      	movne	r5, #0
 802acc6:	4293      	cmp	r3, r2
 802acc8:	bfc4      	itt	gt
 802acca:	1a9b      	subgt	r3, r3, r2
 802accc:	18ed      	addgt	r5, r5, r3
 802acce:	2600      	movs	r6, #0
 802acd0:	341a      	adds	r4, #26
 802acd2:	42b5      	cmp	r5, r6
 802acd4:	d11a      	bne.n	802ad0c <_printf_common+0xc8>
 802acd6:	2000      	movs	r0, #0
 802acd8:	e008      	b.n	802acec <_printf_common+0xa8>
 802acda:	2301      	movs	r3, #1
 802acdc:	4652      	mov	r2, sl
 802acde:	4649      	mov	r1, r9
 802ace0:	4638      	mov	r0, r7
 802ace2:	47c0      	blx	r8
 802ace4:	3001      	adds	r0, #1
 802ace6:	d103      	bne.n	802acf0 <_printf_common+0xac>
 802ace8:	f04f 30ff 	mov.w	r0, #4294967295
 802acec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802acf0:	3501      	adds	r5, #1
 802acf2:	e7c6      	b.n	802ac82 <_printf_common+0x3e>
 802acf4:	18e1      	adds	r1, r4, r3
 802acf6:	1c5a      	adds	r2, r3, #1
 802acf8:	2030      	movs	r0, #48	; 0x30
 802acfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802acfe:	4422      	add	r2, r4
 802ad00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802ad04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802ad08:	3302      	adds	r3, #2
 802ad0a:	e7c7      	b.n	802ac9c <_printf_common+0x58>
 802ad0c:	2301      	movs	r3, #1
 802ad0e:	4622      	mov	r2, r4
 802ad10:	4649      	mov	r1, r9
 802ad12:	4638      	mov	r0, r7
 802ad14:	47c0      	blx	r8
 802ad16:	3001      	adds	r0, #1
 802ad18:	d0e6      	beq.n	802ace8 <_printf_common+0xa4>
 802ad1a:	3601      	adds	r6, #1
 802ad1c:	e7d9      	b.n	802acd2 <_printf_common+0x8e>
	...

0802ad20 <_printf_i>:
 802ad20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802ad24:	7e0f      	ldrb	r7, [r1, #24]
 802ad26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802ad28:	2f78      	cmp	r7, #120	; 0x78
 802ad2a:	4691      	mov	r9, r2
 802ad2c:	4680      	mov	r8, r0
 802ad2e:	460c      	mov	r4, r1
 802ad30:	469a      	mov	sl, r3
 802ad32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802ad36:	d807      	bhi.n	802ad48 <_printf_i+0x28>
 802ad38:	2f62      	cmp	r7, #98	; 0x62
 802ad3a:	d80a      	bhi.n	802ad52 <_printf_i+0x32>
 802ad3c:	2f00      	cmp	r7, #0
 802ad3e:	f000 80d8 	beq.w	802aef2 <_printf_i+0x1d2>
 802ad42:	2f58      	cmp	r7, #88	; 0x58
 802ad44:	f000 80a3 	beq.w	802ae8e <_printf_i+0x16e>
 802ad48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802ad4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802ad50:	e03a      	b.n	802adc8 <_printf_i+0xa8>
 802ad52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802ad56:	2b15      	cmp	r3, #21
 802ad58:	d8f6      	bhi.n	802ad48 <_printf_i+0x28>
 802ad5a:	a101      	add	r1, pc, #4	; (adr r1, 802ad60 <_printf_i+0x40>)
 802ad5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802ad60:	0802adb9 	.word	0x0802adb9
 802ad64:	0802adcd 	.word	0x0802adcd
 802ad68:	0802ad49 	.word	0x0802ad49
 802ad6c:	0802ad49 	.word	0x0802ad49
 802ad70:	0802ad49 	.word	0x0802ad49
 802ad74:	0802ad49 	.word	0x0802ad49
 802ad78:	0802adcd 	.word	0x0802adcd
 802ad7c:	0802ad49 	.word	0x0802ad49
 802ad80:	0802ad49 	.word	0x0802ad49
 802ad84:	0802ad49 	.word	0x0802ad49
 802ad88:	0802ad49 	.word	0x0802ad49
 802ad8c:	0802aed9 	.word	0x0802aed9
 802ad90:	0802adfd 	.word	0x0802adfd
 802ad94:	0802aebb 	.word	0x0802aebb
 802ad98:	0802ad49 	.word	0x0802ad49
 802ad9c:	0802ad49 	.word	0x0802ad49
 802ada0:	0802aefb 	.word	0x0802aefb
 802ada4:	0802ad49 	.word	0x0802ad49
 802ada8:	0802adfd 	.word	0x0802adfd
 802adac:	0802ad49 	.word	0x0802ad49
 802adb0:	0802ad49 	.word	0x0802ad49
 802adb4:	0802aec3 	.word	0x0802aec3
 802adb8:	682b      	ldr	r3, [r5, #0]
 802adba:	1d1a      	adds	r2, r3, #4
 802adbc:	681b      	ldr	r3, [r3, #0]
 802adbe:	602a      	str	r2, [r5, #0]
 802adc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802adc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802adc8:	2301      	movs	r3, #1
 802adca:	e0a3      	b.n	802af14 <_printf_i+0x1f4>
 802adcc:	6820      	ldr	r0, [r4, #0]
 802adce:	6829      	ldr	r1, [r5, #0]
 802add0:	0606      	lsls	r6, r0, #24
 802add2:	f101 0304 	add.w	r3, r1, #4
 802add6:	d50a      	bpl.n	802adee <_printf_i+0xce>
 802add8:	680e      	ldr	r6, [r1, #0]
 802adda:	602b      	str	r3, [r5, #0]
 802addc:	2e00      	cmp	r6, #0
 802adde:	da03      	bge.n	802ade8 <_printf_i+0xc8>
 802ade0:	232d      	movs	r3, #45	; 0x2d
 802ade2:	4276      	negs	r6, r6
 802ade4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802ade8:	485e      	ldr	r0, [pc, #376]	; (802af64 <_printf_i+0x244>)
 802adea:	230a      	movs	r3, #10
 802adec:	e019      	b.n	802ae22 <_printf_i+0x102>
 802adee:	680e      	ldr	r6, [r1, #0]
 802adf0:	602b      	str	r3, [r5, #0]
 802adf2:	f010 0f40 	tst.w	r0, #64	; 0x40
 802adf6:	bf18      	it	ne
 802adf8:	b236      	sxthne	r6, r6
 802adfa:	e7ef      	b.n	802addc <_printf_i+0xbc>
 802adfc:	682b      	ldr	r3, [r5, #0]
 802adfe:	6820      	ldr	r0, [r4, #0]
 802ae00:	1d19      	adds	r1, r3, #4
 802ae02:	6029      	str	r1, [r5, #0]
 802ae04:	0601      	lsls	r1, r0, #24
 802ae06:	d501      	bpl.n	802ae0c <_printf_i+0xec>
 802ae08:	681e      	ldr	r6, [r3, #0]
 802ae0a:	e002      	b.n	802ae12 <_printf_i+0xf2>
 802ae0c:	0646      	lsls	r6, r0, #25
 802ae0e:	d5fb      	bpl.n	802ae08 <_printf_i+0xe8>
 802ae10:	881e      	ldrh	r6, [r3, #0]
 802ae12:	4854      	ldr	r0, [pc, #336]	; (802af64 <_printf_i+0x244>)
 802ae14:	2f6f      	cmp	r7, #111	; 0x6f
 802ae16:	bf0c      	ite	eq
 802ae18:	2308      	moveq	r3, #8
 802ae1a:	230a      	movne	r3, #10
 802ae1c:	2100      	movs	r1, #0
 802ae1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802ae22:	6865      	ldr	r5, [r4, #4]
 802ae24:	60a5      	str	r5, [r4, #8]
 802ae26:	2d00      	cmp	r5, #0
 802ae28:	bfa2      	ittt	ge
 802ae2a:	6821      	ldrge	r1, [r4, #0]
 802ae2c:	f021 0104 	bicge.w	r1, r1, #4
 802ae30:	6021      	strge	r1, [r4, #0]
 802ae32:	b90e      	cbnz	r6, 802ae38 <_printf_i+0x118>
 802ae34:	2d00      	cmp	r5, #0
 802ae36:	d04d      	beq.n	802aed4 <_printf_i+0x1b4>
 802ae38:	4615      	mov	r5, r2
 802ae3a:	fbb6 f1f3 	udiv	r1, r6, r3
 802ae3e:	fb03 6711 	mls	r7, r3, r1, r6
 802ae42:	5dc7      	ldrb	r7, [r0, r7]
 802ae44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802ae48:	4637      	mov	r7, r6
 802ae4a:	42bb      	cmp	r3, r7
 802ae4c:	460e      	mov	r6, r1
 802ae4e:	d9f4      	bls.n	802ae3a <_printf_i+0x11a>
 802ae50:	2b08      	cmp	r3, #8
 802ae52:	d10b      	bne.n	802ae6c <_printf_i+0x14c>
 802ae54:	6823      	ldr	r3, [r4, #0]
 802ae56:	07de      	lsls	r6, r3, #31
 802ae58:	d508      	bpl.n	802ae6c <_printf_i+0x14c>
 802ae5a:	6923      	ldr	r3, [r4, #16]
 802ae5c:	6861      	ldr	r1, [r4, #4]
 802ae5e:	4299      	cmp	r1, r3
 802ae60:	bfde      	ittt	le
 802ae62:	2330      	movle	r3, #48	; 0x30
 802ae64:	f805 3c01 	strble.w	r3, [r5, #-1]
 802ae68:	f105 35ff 	addle.w	r5, r5, #4294967295
 802ae6c:	1b52      	subs	r2, r2, r5
 802ae6e:	6122      	str	r2, [r4, #16]
 802ae70:	f8cd a000 	str.w	sl, [sp]
 802ae74:	464b      	mov	r3, r9
 802ae76:	aa03      	add	r2, sp, #12
 802ae78:	4621      	mov	r1, r4
 802ae7a:	4640      	mov	r0, r8
 802ae7c:	f7ff fee2 	bl	802ac44 <_printf_common>
 802ae80:	3001      	adds	r0, #1
 802ae82:	d14c      	bne.n	802af1e <_printf_i+0x1fe>
 802ae84:	f04f 30ff 	mov.w	r0, #4294967295
 802ae88:	b004      	add	sp, #16
 802ae8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ae8e:	4835      	ldr	r0, [pc, #212]	; (802af64 <_printf_i+0x244>)
 802ae90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802ae94:	6829      	ldr	r1, [r5, #0]
 802ae96:	6823      	ldr	r3, [r4, #0]
 802ae98:	f851 6b04 	ldr.w	r6, [r1], #4
 802ae9c:	6029      	str	r1, [r5, #0]
 802ae9e:	061d      	lsls	r5, r3, #24
 802aea0:	d514      	bpl.n	802aecc <_printf_i+0x1ac>
 802aea2:	07df      	lsls	r7, r3, #31
 802aea4:	bf44      	itt	mi
 802aea6:	f043 0320 	orrmi.w	r3, r3, #32
 802aeaa:	6023      	strmi	r3, [r4, #0]
 802aeac:	b91e      	cbnz	r6, 802aeb6 <_printf_i+0x196>
 802aeae:	6823      	ldr	r3, [r4, #0]
 802aeb0:	f023 0320 	bic.w	r3, r3, #32
 802aeb4:	6023      	str	r3, [r4, #0]
 802aeb6:	2310      	movs	r3, #16
 802aeb8:	e7b0      	b.n	802ae1c <_printf_i+0xfc>
 802aeba:	6823      	ldr	r3, [r4, #0]
 802aebc:	f043 0320 	orr.w	r3, r3, #32
 802aec0:	6023      	str	r3, [r4, #0]
 802aec2:	2378      	movs	r3, #120	; 0x78
 802aec4:	4828      	ldr	r0, [pc, #160]	; (802af68 <_printf_i+0x248>)
 802aec6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802aeca:	e7e3      	b.n	802ae94 <_printf_i+0x174>
 802aecc:	0659      	lsls	r1, r3, #25
 802aece:	bf48      	it	mi
 802aed0:	b2b6      	uxthmi	r6, r6
 802aed2:	e7e6      	b.n	802aea2 <_printf_i+0x182>
 802aed4:	4615      	mov	r5, r2
 802aed6:	e7bb      	b.n	802ae50 <_printf_i+0x130>
 802aed8:	682b      	ldr	r3, [r5, #0]
 802aeda:	6826      	ldr	r6, [r4, #0]
 802aedc:	6961      	ldr	r1, [r4, #20]
 802aede:	1d18      	adds	r0, r3, #4
 802aee0:	6028      	str	r0, [r5, #0]
 802aee2:	0635      	lsls	r5, r6, #24
 802aee4:	681b      	ldr	r3, [r3, #0]
 802aee6:	d501      	bpl.n	802aeec <_printf_i+0x1cc>
 802aee8:	6019      	str	r1, [r3, #0]
 802aeea:	e002      	b.n	802aef2 <_printf_i+0x1d2>
 802aeec:	0670      	lsls	r0, r6, #25
 802aeee:	d5fb      	bpl.n	802aee8 <_printf_i+0x1c8>
 802aef0:	8019      	strh	r1, [r3, #0]
 802aef2:	2300      	movs	r3, #0
 802aef4:	6123      	str	r3, [r4, #16]
 802aef6:	4615      	mov	r5, r2
 802aef8:	e7ba      	b.n	802ae70 <_printf_i+0x150>
 802aefa:	682b      	ldr	r3, [r5, #0]
 802aefc:	1d1a      	adds	r2, r3, #4
 802aefe:	602a      	str	r2, [r5, #0]
 802af00:	681d      	ldr	r5, [r3, #0]
 802af02:	6862      	ldr	r2, [r4, #4]
 802af04:	2100      	movs	r1, #0
 802af06:	4628      	mov	r0, r5
 802af08:	f7d5 f9f2 	bl	80002f0 <memchr>
 802af0c:	b108      	cbz	r0, 802af12 <_printf_i+0x1f2>
 802af0e:	1b40      	subs	r0, r0, r5
 802af10:	6060      	str	r0, [r4, #4]
 802af12:	6863      	ldr	r3, [r4, #4]
 802af14:	6123      	str	r3, [r4, #16]
 802af16:	2300      	movs	r3, #0
 802af18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802af1c:	e7a8      	b.n	802ae70 <_printf_i+0x150>
 802af1e:	6923      	ldr	r3, [r4, #16]
 802af20:	462a      	mov	r2, r5
 802af22:	4649      	mov	r1, r9
 802af24:	4640      	mov	r0, r8
 802af26:	47d0      	blx	sl
 802af28:	3001      	adds	r0, #1
 802af2a:	d0ab      	beq.n	802ae84 <_printf_i+0x164>
 802af2c:	6823      	ldr	r3, [r4, #0]
 802af2e:	079b      	lsls	r3, r3, #30
 802af30:	d413      	bmi.n	802af5a <_printf_i+0x23a>
 802af32:	68e0      	ldr	r0, [r4, #12]
 802af34:	9b03      	ldr	r3, [sp, #12]
 802af36:	4298      	cmp	r0, r3
 802af38:	bfb8      	it	lt
 802af3a:	4618      	movlt	r0, r3
 802af3c:	e7a4      	b.n	802ae88 <_printf_i+0x168>
 802af3e:	2301      	movs	r3, #1
 802af40:	4632      	mov	r2, r6
 802af42:	4649      	mov	r1, r9
 802af44:	4640      	mov	r0, r8
 802af46:	47d0      	blx	sl
 802af48:	3001      	adds	r0, #1
 802af4a:	d09b      	beq.n	802ae84 <_printf_i+0x164>
 802af4c:	3501      	adds	r5, #1
 802af4e:	68e3      	ldr	r3, [r4, #12]
 802af50:	9903      	ldr	r1, [sp, #12]
 802af52:	1a5b      	subs	r3, r3, r1
 802af54:	42ab      	cmp	r3, r5
 802af56:	dcf2      	bgt.n	802af3e <_printf_i+0x21e>
 802af58:	e7eb      	b.n	802af32 <_printf_i+0x212>
 802af5a:	2500      	movs	r5, #0
 802af5c:	f104 0619 	add.w	r6, r4, #25
 802af60:	e7f5      	b.n	802af4e <_printf_i+0x22e>
 802af62:	bf00      	nop
 802af64:	0802dbe2 	.word	0x0802dbe2
 802af68:	0802dbf3 	.word	0x0802dbf3

0802af6c <_puts_r>:
 802af6c:	b570      	push	{r4, r5, r6, lr}
 802af6e:	460e      	mov	r6, r1
 802af70:	4605      	mov	r5, r0
 802af72:	b118      	cbz	r0, 802af7c <_puts_r+0x10>
 802af74:	6983      	ldr	r3, [r0, #24]
 802af76:	b90b      	cbnz	r3, 802af7c <_puts_r+0x10>
 802af78:	f001 f876 	bl	802c068 <__sinit>
 802af7c:	69ab      	ldr	r3, [r5, #24]
 802af7e:	68ac      	ldr	r4, [r5, #8]
 802af80:	b913      	cbnz	r3, 802af88 <_puts_r+0x1c>
 802af82:	4628      	mov	r0, r5
 802af84:	f001 f870 	bl	802c068 <__sinit>
 802af88:	4b2c      	ldr	r3, [pc, #176]	; (802b03c <_puts_r+0xd0>)
 802af8a:	429c      	cmp	r4, r3
 802af8c:	d120      	bne.n	802afd0 <_puts_r+0x64>
 802af8e:	686c      	ldr	r4, [r5, #4]
 802af90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802af92:	07db      	lsls	r3, r3, #31
 802af94:	d405      	bmi.n	802afa2 <_puts_r+0x36>
 802af96:	89a3      	ldrh	r3, [r4, #12]
 802af98:	0598      	lsls	r0, r3, #22
 802af9a:	d402      	bmi.n	802afa2 <_puts_r+0x36>
 802af9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802af9e:	f001 f906 	bl	802c1ae <__retarget_lock_acquire_recursive>
 802afa2:	89a3      	ldrh	r3, [r4, #12]
 802afa4:	0719      	lsls	r1, r3, #28
 802afa6:	d51d      	bpl.n	802afe4 <_puts_r+0x78>
 802afa8:	6923      	ldr	r3, [r4, #16]
 802afaa:	b1db      	cbz	r3, 802afe4 <_puts_r+0x78>
 802afac:	3e01      	subs	r6, #1
 802afae:	68a3      	ldr	r3, [r4, #8]
 802afb0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802afb4:	3b01      	subs	r3, #1
 802afb6:	60a3      	str	r3, [r4, #8]
 802afb8:	bb39      	cbnz	r1, 802b00a <_puts_r+0x9e>
 802afba:	2b00      	cmp	r3, #0
 802afbc:	da38      	bge.n	802b030 <_puts_r+0xc4>
 802afbe:	4622      	mov	r2, r4
 802afc0:	210a      	movs	r1, #10
 802afc2:	4628      	mov	r0, r5
 802afc4:	f000 f87c 	bl	802b0c0 <__swbuf_r>
 802afc8:	3001      	adds	r0, #1
 802afca:	d011      	beq.n	802aff0 <_puts_r+0x84>
 802afcc:	250a      	movs	r5, #10
 802afce:	e011      	b.n	802aff4 <_puts_r+0x88>
 802afd0:	4b1b      	ldr	r3, [pc, #108]	; (802b040 <_puts_r+0xd4>)
 802afd2:	429c      	cmp	r4, r3
 802afd4:	d101      	bne.n	802afda <_puts_r+0x6e>
 802afd6:	68ac      	ldr	r4, [r5, #8]
 802afd8:	e7da      	b.n	802af90 <_puts_r+0x24>
 802afda:	4b1a      	ldr	r3, [pc, #104]	; (802b044 <_puts_r+0xd8>)
 802afdc:	429c      	cmp	r4, r3
 802afde:	bf08      	it	eq
 802afe0:	68ec      	ldreq	r4, [r5, #12]
 802afe2:	e7d5      	b.n	802af90 <_puts_r+0x24>
 802afe4:	4621      	mov	r1, r4
 802afe6:	4628      	mov	r0, r5
 802afe8:	f000 f8bc 	bl	802b164 <__swsetup_r>
 802afec:	2800      	cmp	r0, #0
 802afee:	d0dd      	beq.n	802afac <_puts_r+0x40>
 802aff0:	f04f 35ff 	mov.w	r5, #4294967295
 802aff4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802aff6:	07da      	lsls	r2, r3, #31
 802aff8:	d405      	bmi.n	802b006 <_puts_r+0x9a>
 802affa:	89a3      	ldrh	r3, [r4, #12]
 802affc:	059b      	lsls	r3, r3, #22
 802affe:	d402      	bmi.n	802b006 <_puts_r+0x9a>
 802b000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802b002:	f001 f8d5 	bl	802c1b0 <__retarget_lock_release_recursive>
 802b006:	4628      	mov	r0, r5
 802b008:	bd70      	pop	{r4, r5, r6, pc}
 802b00a:	2b00      	cmp	r3, #0
 802b00c:	da04      	bge.n	802b018 <_puts_r+0xac>
 802b00e:	69a2      	ldr	r2, [r4, #24]
 802b010:	429a      	cmp	r2, r3
 802b012:	dc06      	bgt.n	802b022 <_puts_r+0xb6>
 802b014:	290a      	cmp	r1, #10
 802b016:	d004      	beq.n	802b022 <_puts_r+0xb6>
 802b018:	6823      	ldr	r3, [r4, #0]
 802b01a:	1c5a      	adds	r2, r3, #1
 802b01c:	6022      	str	r2, [r4, #0]
 802b01e:	7019      	strb	r1, [r3, #0]
 802b020:	e7c5      	b.n	802afae <_puts_r+0x42>
 802b022:	4622      	mov	r2, r4
 802b024:	4628      	mov	r0, r5
 802b026:	f000 f84b 	bl	802b0c0 <__swbuf_r>
 802b02a:	3001      	adds	r0, #1
 802b02c:	d1bf      	bne.n	802afae <_puts_r+0x42>
 802b02e:	e7df      	b.n	802aff0 <_puts_r+0x84>
 802b030:	6823      	ldr	r3, [r4, #0]
 802b032:	250a      	movs	r5, #10
 802b034:	1c5a      	adds	r2, r3, #1
 802b036:	6022      	str	r2, [r4, #0]
 802b038:	701d      	strb	r5, [r3, #0]
 802b03a:	e7db      	b.n	802aff4 <_puts_r+0x88>
 802b03c:	0802dcb4 	.word	0x0802dcb4
 802b040:	0802dcd4 	.word	0x0802dcd4
 802b044:	0802dc94 	.word	0x0802dc94

0802b048 <puts>:
 802b048:	4b02      	ldr	r3, [pc, #8]	; (802b054 <puts+0xc>)
 802b04a:	4601      	mov	r1, r0
 802b04c:	6818      	ldr	r0, [r3, #0]
 802b04e:	f7ff bf8d 	b.w	802af6c <_puts_r>
 802b052:	bf00      	nop
 802b054:	24000040 	.word	0x24000040

0802b058 <_sbrk_r>:
 802b058:	b538      	push	{r3, r4, r5, lr}
 802b05a:	4d06      	ldr	r5, [pc, #24]	; (802b074 <_sbrk_r+0x1c>)
 802b05c:	2300      	movs	r3, #0
 802b05e:	4604      	mov	r4, r0
 802b060:	4608      	mov	r0, r1
 802b062:	602b      	str	r3, [r5, #0]
 802b064:	f7d5 ff44 	bl	8000ef0 <_sbrk>
 802b068:	1c43      	adds	r3, r0, #1
 802b06a:	d102      	bne.n	802b072 <_sbrk_r+0x1a>
 802b06c:	682b      	ldr	r3, [r5, #0]
 802b06e:	b103      	cbz	r3, 802b072 <_sbrk_r+0x1a>
 802b070:	6023      	str	r3, [r4, #0]
 802b072:	bd38      	pop	{r3, r4, r5, pc}
 802b074:	2401e62c 	.word	0x2401e62c

0802b078 <siprintf>:
 802b078:	b40e      	push	{r1, r2, r3}
 802b07a:	b500      	push	{lr}
 802b07c:	b09c      	sub	sp, #112	; 0x70
 802b07e:	ab1d      	add	r3, sp, #116	; 0x74
 802b080:	9002      	str	r0, [sp, #8]
 802b082:	9006      	str	r0, [sp, #24]
 802b084:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802b088:	4809      	ldr	r0, [pc, #36]	; (802b0b0 <siprintf+0x38>)
 802b08a:	9107      	str	r1, [sp, #28]
 802b08c:	9104      	str	r1, [sp, #16]
 802b08e:	4909      	ldr	r1, [pc, #36]	; (802b0b4 <siprintf+0x3c>)
 802b090:	f853 2b04 	ldr.w	r2, [r3], #4
 802b094:	9105      	str	r1, [sp, #20]
 802b096:	6800      	ldr	r0, [r0, #0]
 802b098:	9301      	str	r3, [sp, #4]
 802b09a:	a902      	add	r1, sp, #8
 802b09c:	f001 fd1e 	bl	802cadc <_svfiprintf_r>
 802b0a0:	9b02      	ldr	r3, [sp, #8]
 802b0a2:	2200      	movs	r2, #0
 802b0a4:	701a      	strb	r2, [r3, #0]
 802b0a6:	b01c      	add	sp, #112	; 0x70
 802b0a8:	f85d eb04 	ldr.w	lr, [sp], #4
 802b0ac:	b003      	add	sp, #12
 802b0ae:	4770      	bx	lr
 802b0b0:	24000040 	.word	0x24000040
 802b0b4:	ffff0208 	.word	0xffff0208

0802b0b8 <_times_r>:
 802b0b8:	4608      	mov	r0, r1
 802b0ba:	f7d5 bf0c 	b.w	8000ed6 <_times>
	...

0802b0c0 <__swbuf_r>:
 802b0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b0c2:	460e      	mov	r6, r1
 802b0c4:	4614      	mov	r4, r2
 802b0c6:	4605      	mov	r5, r0
 802b0c8:	b118      	cbz	r0, 802b0d2 <__swbuf_r+0x12>
 802b0ca:	6983      	ldr	r3, [r0, #24]
 802b0cc:	b90b      	cbnz	r3, 802b0d2 <__swbuf_r+0x12>
 802b0ce:	f000 ffcb 	bl	802c068 <__sinit>
 802b0d2:	4b21      	ldr	r3, [pc, #132]	; (802b158 <__swbuf_r+0x98>)
 802b0d4:	429c      	cmp	r4, r3
 802b0d6:	d12b      	bne.n	802b130 <__swbuf_r+0x70>
 802b0d8:	686c      	ldr	r4, [r5, #4]
 802b0da:	69a3      	ldr	r3, [r4, #24]
 802b0dc:	60a3      	str	r3, [r4, #8]
 802b0de:	89a3      	ldrh	r3, [r4, #12]
 802b0e0:	071a      	lsls	r2, r3, #28
 802b0e2:	d52f      	bpl.n	802b144 <__swbuf_r+0x84>
 802b0e4:	6923      	ldr	r3, [r4, #16]
 802b0e6:	b36b      	cbz	r3, 802b144 <__swbuf_r+0x84>
 802b0e8:	6923      	ldr	r3, [r4, #16]
 802b0ea:	6820      	ldr	r0, [r4, #0]
 802b0ec:	1ac0      	subs	r0, r0, r3
 802b0ee:	6963      	ldr	r3, [r4, #20]
 802b0f0:	b2f6      	uxtb	r6, r6
 802b0f2:	4283      	cmp	r3, r0
 802b0f4:	4637      	mov	r7, r6
 802b0f6:	dc04      	bgt.n	802b102 <__swbuf_r+0x42>
 802b0f8:	4621      	mov	r1, r4
 802b0fa:	4628      	mov	r0, r5
 802b0fc:	f000 ff20 	bl	802bf40 <_fflush_r>
 802b100:	bb30      	cbnz	r0, 802b150 <__swbuf_r+0x90>
 802b102:	68a3      	ldr	r3, [r4, #8]
 802b104:	3b01      	subs	r3, #1
 802b106:	60a3      	str	r3, [r4, #8]
 802b108:	6823      	ldr	r3, [r4, #0]
 802b10a:	1c5a      	adds	r2, r3, #1
 802b10c:	6022      	str	r2, [r4, #0]
 802b10e:	701e      	strb	r6, [r3, #0]
 802b110:	6963      	ldr	r3, [r4, #20]
 802b112:	3001      	adds	r0, #1
 802b114:	4283      	cmp	r3, r0
 802b116:	d004      	beq.n	802b122 <__swbuf_r+0x62>
 802b118:	89a3      	ldrh	r3, [r4, #12]
 802b11a:	07db      	lsls	r3, r3, #31
 802b11c:	d506      	bpl.n	802b12c <__swbuf_r+0x6c>
 802b11e:	2e0a      	cmp	r6, #10
 802b120:	d104      	bne.n	802b12c <__swbuf_r+0x6c>
 802b122:	4621      	mov	r1, r4
 802b124:	4628      	mov	r0, r5
 802b126:	f000 ff0b 	bl	802bf40 <_fflush_r>
 802b12a:	b988      	cbnz	r0, 802b150 <__swbuf_r+0x90>
 802b12c:	4638      	mov	r0, r7
 802b12e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b130:	4b0a      	ldr	r3, [pc, #40]	; (802b15c <__swbuf_r+0x9c>)
 802b132:	429c      	cmp	r4, r3
 802b134:	d101      	bne.n	802b13a <__swbuf_r+0x7a>
 802b136:	68ac      	ldr	r4, [r5, #8]
 802b138:	e7cf      	b.n	802b0da <__swbuf_r+0x1a>
 802b13a:	4b09      	ldr	r3, [pc, #36]	; (802b160 <__swbuf_r+0xa0>)
 802b13c:	429c      	cmp	r4, r3
 802b13e:	bf08      	it	eq
 802b140:	68ec      	ldreq	r4, [r5, #12]
 802b142:	e7ca      	b.n	802b0da <__swbuf_r+0x1a>
 802b144:	4621      	mov	r1, r4
 802b146:	4628      	mov	r0, r5
 802b148:	f000 f80c 	bl	802b164 <__swsetup_r>
 802b14c:	2800      	cmp	r0, #0
 802b14e:	d0cb      	beq.n	802b0e8 <__swbuf_r+0x28>
 802b150:	f04f 37ff 	mov.w	r7, #4294967295
 802b154:	e7ea      	b.n	802b12c <__swbuf_r+0x6c>
 802b156:	bf00      	nop
 802b158:	0802dcb4 	.word	0x0802dcb4
 802b15c:	0802dcd4 	.word	0x0802dcd4
 802b160:	0802dc94 	.word	0x0802dc94

0802b164 <__swsetup_r>:
 802b164:	4b32      	ldr	r3, [pc, #200]	; (802b230 <__swsetup_r+0xcc>)
 802b166:	b570      	push	{r4, r5, r6, lr}
 802b168:	681d      	ldr	r5, [r3, #0]
 802b16a:	4606      	mov	r6, r0
 802b16c:	460c      	mov	r4, r1
 802b16e:	b125      	cbz	r5, 802b17a <__swsetup_r+0x16>
 802b170:	69ab      	ldr	r3, [r5, #24]
 802b172:	b913      	cbnz	r3, 802b17a <__swsetup_r+0x16>
 802b174:	4628      	mov	r0, r5
 802b176:	f000 ff77 	bl	802c068 <__sinit>
 802b17a:	4b2e      	ldr	r3, [pc, #184]	; (802b234 <__swsetup_r+0xd0>)
 802b17c:	429c      	cmp	r4, r3
 802b17e:	d10f      	bne.n	802b1a0 <__swsetup_r+0x3c>
 802b180:	686c      	ldr	r4, [r5, #4]
 802b182:	89a3      	ldrh	r3, [r4, #12]
 802b184:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b188:	0719      	lsls	r1, r3, #28
 802b18a:	d42c      	bmi.n	802b1e6 <__swsetup_r+0x82>
 802b18c:	06dd      	lsls	r5, r3, #27
 802b18e:	d411      	bmi.n	802b1b4 <__swsetup_r+0x50>
 802b190:	2309      	movs	r3, #9
 802b192:	6033      	str	r3, [r6, #0]
 802b194:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802b198:	81a3      	strh	r3, [r4, #12]
 802b19a:	f04f 30ff 	mov.w	r0, #4294967295
 802b19e:	e03e      	b.n	802b21e <__swsetup_r+0xba>
 802b1a0:	4b25      	ldr	r3, [pc, #148]	; (802b238 <__swsetup_r+0xd4>)
 802b1a2:	429c      	cmp	r4, r3
 802b1a4:	d101      	bne.n	802b1aa <__swsetup_r+0x46>
 802b1a6:	68ac      	ldr	r4, [r5, #8]
 802b1a8:	e7eb      	b.n	802b182 <__swsetup_r+0x1e>
 802b1aa:	4b24      	ldr	r3, [pc, #144]	; (802b23c <__swsetup_r+0xd8>)
 802b1ac:	429c      	cmp	r4, r3
 802b1ae:	bf08      	it	eq
 802b1b0:	68ec      	ldreq	r4, [r5, #12]
 802b1b2:	e7e6      	b.n	802b182 <__swsetup_r+0x1e>
 802b1b4:	0758      	lsls	r0, r3, #29
 802b1b6:	d512      	bpl.n	802b1de <__swsetup_r+0x7a>
 802b1b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802b1ba:	b141      	cbz	r1, 802b1ce <__swsetup_r+0x6a>
 802b1bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b1c0:	4299      	cmp	r1, r3
 802b1c2:	d002      	beq.n	802b1ca <__swsetup_r+0x66>
 802b1c4:	4630      	mov	r0, r6
 802b1c6:	f7ff f9af 	bl	802a528 <_free_r>
 802b1ca:	2300      	movs	r3, #0
 802b1cc:	6363      	str	r3, [r4, #52]	; 0x34
 802b1ce:	89a3      	ldrh	r3, [r4, #12]
 802b1d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802b1d4:	81a3      	strh	r3, [r4, #12]
 802b1d6:	2300      	movs	r3, #0
 802b1d8:	6063      	str	r3, [r4, #4]
 802b1da:	6923      	ldr	r3, [r4, #16]
 802b1dc:	6023      	str	r3, [r4, #0]
 802b1de:	89a3      	ldrh	r3, [r4, #12]
 802b1e0:	f043 0308 	orr.w	r3, r3, #8
 802b1e4:	81a3      	strh	r3, [r4, #12]
 802b1e6:	6923      	ldr	r3, [r4, #16]
 802b1e8:	b94b      	cbnz	r3, 802b1fe <__swsetup_r+0x9a>
 802b1ea:	89a3      	ldrh	r3, [r4, #12]
 802b1ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802b1f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802b1f4:	d003      	beq.n	802b1fe <__swsetup_r+0x9a>
 802b1f6:	4621      	mov	r1, r4
 802b1f8:	4630      	mov	r0, r6
 802b1fa:	f000 ffff 	bl	802c1fc <__smakebuf_r>
 802b1fe:	89a0      	ldrh	r0, [r4, #12]
 802b200:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b204:	f010 0301 	ands.w	r3, r0, #1
 802b208:	d00a      	beq.n	802b220 <__swsetup_r+0xbc>
 802b20a:	2300      	movs	r3, #0
 802b20c:	60a3      	str	r3, [r4, #8]
 802b20e:	6963      	ldr	r3, [r4, #20]
 802b210:	425b      	negs	r3, r3
 802b212:	61a3      	str	r3, [r4, #24]
 802b214:	6923      	ldr	r3, [r4, #16]
 802b216:	b943      	cbnz	r3, 802b22a <__swsetup_r+0xc6>
 802b218:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802b21c:	d1ba      	bne.n	802b194 <__swsetup_r+0x30>
 802b21e:	bd70      	pop	{r4, r5, r6, pc}
 802b220:	0781      	lsls	r1, r0, #30
 802b222:	bf58      	it	pl
 802b224:	6963      	ldrpl	r3, [r4, #20]
 802b226:	60a3      	str	r3, [r4, #8]
 802b228:	e7f4      	b.n	802b214 <__swsetup_r+0xb0>
 802b22a:	2000      	movs	r0, #0
 802b22c:	e7f7      	b.n	802b21e <__swsetup_r+0xba>
 802b22e:	bf00      	nop
 802b230:	24000040 	.word	0x24000040
 802b234:	0802dcb4 	.word	0x0802dcb4
 802b238:	0802dcd4 	.word	0x0802dcd4
 802b23c:	0802dc94 	.word	0x0802dc94

0802b240 <quorem>:
 802b240:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b244:	6903      	ldr	r3, [r0, #16]
 802b246:	690c      	ldr	r4, [r1, #16]
 802b248:	42a3      	cmp	r3, r4
 802b24a:	4607      	mov	r7, r0
 802b24c:	f2c0 8081 	blt.w	802b352 <quorem+0x112>
 802b250:	3c01      	subs	r4, #1
 802b252:	f101 0814 	add.w	r8, r1, #20
 802b256:	f100 0514 	add.w	r5, r0, #20
 802b25a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802b25e:	9301      	str	r3, [sp, #4]
 802b260:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802b264:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802b268:	3301      	adds	r3, #1
 802b26a:	429a      	cmp	r2, r3
 802b26c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 802b270:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802b274:	fbb2 f6f3 	udiv	r6, r2, r3
 802b278:	d331      	bcc.n	802b2de <quorem+0x9e>
 802b27a:	f04f 0e00 	mov.w	lr, #0
 802b27e:	4640      	mov	r0, r8
 802b280:	46ac      	mov	ip, r5
 802b282:	46f2      	mov	sl, lr
 802b284:	f850 2b04 	ldr.w	r2, [r0], #4
 802b288:	b293      	uxth	r3, r2
 802b28a:	fb06 e303 	mla	r3, r6, r3, lr
 802b28e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 802b292:	b29b      	uxth	r3, r3
 802b294:	ebaa 0303 	sub.w	r3, sl, r3
 802b298:	f8dc a000 	ldr.w	sl, [ip]
 802b29c:	0c12      	lsrs	r2, r2, #16
 802b29e:	fa13 f38a 	uxtah	r3, r3, sl
 802b2a2:	fb06 e202 	mla	r2, r6, r2, lr
 802b2a6:	9300      	str	r3, [sp, #0]
 802b2a8:	9b00      	ldr	r3, [sp, #0]
 802b2aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802b2ae:	b292      	uxth	r2, r2
 802b2b0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 802b2b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802b2b8:	f8bd 3000 	ldrh.w	r3, [sp]
 802b2bc:	4581      	cmp	r9, r0
 802b2be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802b2c2:	f84c 3b04 	str.w	r3, [ip], #4
 802b2c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 802b2ca:	d2db      	bcs.n	802b284 <quorem+0x44>
 802b2cc:	f855 300b 	ldr.w	r3, [r5, fp]
 802b2d0:	b92b      	cbnz	r3, 802b2de <quorem+0x9e>
 802b2d2:	9b01      	ldr	r3, [sp, #4]
 802b2d4:	3b04      	subs	r3, #4
 802b2d6:	429d      	cmp	r5, r3
 802b2d8:	461a      	mov	r2, r3
 802b2da:	d32e      	bcc.n	802b33a <quorem+0xfa>
 802b2dc:	613c      	str	r4, [r7, #16]
 802b2de:	4638      	mov	r0, r7
 802b2e0:	f001 fa5a 	bl	802c798 <__mcmp>
 802b2e4:	2800      	cmp	r0, #0
 802b2e6:	db24      	blt.n	802b332 <quorem+0xf2>
 802b2e8:	3601      	adds	r6, #1
 802b2ea:	4628      	mov	r0, r5
 802b2ec:	f04f 0c00 	mov.w	ip, #0
 802b2f0:	f858 2b04 	ldr.w	r2, [r8], #4
 802b2f4:	f8d0 e000 	ldr.w	lr, [r0]
 802b2f8:	b293      	uxth	r3, r2
 802b2fa:	ebac 0303 	sub.w	r3, ip, r3
 802b2fe:	0c12      	lsrs	r2, r2, #16
 802b300:	fa13 f38e 	uxtah	r3, r3, lr
 802b304:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 802b308:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802b30c:	b29b      	uxth	r3, r3
 802b30e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802b312:	45c1      	cmp	r9, r8
 802b314:	f840 3b04 	str.w	r3, [r0], #4
 802b318:	ea4f 4c22 	mov.w	ip, r2, asr #16
 802b31c:	d2e8      	bcs.n	802b2f0 <quorem+0xb0>
 802b31e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802b322:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802b326:	b922      	cbnz	r2, 802b332 <quorem+0xf2>
 802b328:	3b04      	subs	r3, #4
 802b32a:	429d      	cmp	r5, r3
 802b32c:	461a      	mov	r2, r3
 802b32e:	d30a      	bcc.n	802b346 <quorem+0x106>
 802b330:	613c      	str	r4, [r7, #16]
 802b332:	4630      	mov	r0, r6
 802b334:	b003      	add	sp, #12
 802b336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b33a:	6812      	ldr	r2, [r2, #0]
 802b33c:	3b04      	subs	r3, #4
 802b33e:	2a00      	cmp	r2, #0
 802b340:	d1cc      	bne.n	802b2dc <quorem+0x9c>
 802b342:	3c01      	subs	r4, #1
 802b344:	e7c7      	b.n	802b2d6 <quorem+0x96>
 802b346:	6812      	ldr	r2, [r2, #0]
 802b348:	3b04      	subs	r3, #4
 802b34a:	2a00      	cmp	r2, #0
 802b34c:	d1f0      	bne.n	802b330 <quorem+0xf0>
 802b34e:	3c01      	subs	r4, #1
 802b350:	e7eb      	b.n	802b32a <quorem+0xea>
 802b352:	2000      	movs	r0, #0
 802b354:	e7ee      	b.n	802b334 <quorem+0xf4>
	...

0802b358 <_dtoa_r>:
 802b358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b35c:	ed2d 8b02 	vpush	{d8}
 802b360:	6a45      	ldr	r5, [r0, #36]	; 0x24
 802b362:	b091      	sub	sp, #68	; 0x44
 802b364:	ed8d 0b02 	vstr	d0, [sp, #8]
 802b368:	ec59 8b10 	vmov	r8, r9, d0
 802b36c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 802b36e:	9106      	str	r1, [sp, #24]
 802b370:	4606      	mov	r6, r0
 802b372:	9208      	str	r2, [sp, #32]
 802b374:	930c      	str	r3, [sp, #48]	; 0x30
 802b376:	b975      	cbnz	r5, 802b396 <_dtoa_r+0x3e>
 802b378:	2010      	movs	r0, #16
 802b37a:	f7ff f895 	bl	802a4a8 <malloc>
 802b37e:	4602      	mov	r2, r0
 802b380:	6270      	str	r0, [r6, #36]	; 0x24
 802b382:	b920      	cbnz	r0, 802b38e <_dtoa_r+0x36>
 802b384:	4baa      	ldr	r3, [pc, #680]	; (802b630 <_dtoa_r+0x2d8>)
 802b386:	21ea      	movs	r1, #234	; 0xea
 802b388:	48aa      	ldr	r0, [pc, #680]	; (802b634 <_dtoa_r+0x2dc>)
 802b38a:	f001 fcfd 	bl	802cd88 <__assert_func>
 802b38e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802b392:	6005      	str	r5, [r0, #0]
 802b394:	60c5      	str	r5, [r0, #12]
 802b396:	6a73      	ldr	r3, [r6, #36]	; 0x24
 802b398:	6819      	ldr	r1, [r3, #0]
 802b39a:	b151      	cbz	r1, 802b3b2 <_dtoa_r+0x5a>
 802b39c:	685a      	ldr	r2, [r3, #4]
 802b39e:	604a      	str	r2, [r1, #4]
 802b3a0:	2301      	movs	r3, #1
 802b3a2:	4093      	lsls	r3, r2
 802b3a4:	608b      	str	r3, [r1, #8]
 802b3a6:	4630      	mov	r0, r6
 802b3a8:	f000 ffb4 	bl	802c314 <_Bfree>
 802b3ac:	6a73      	ldr	r3, [r6, #36]	; 0x24
 802b3ae:	2200      	movs	r2, #0
 802b3b0:	601a      	str	r2, [r3, #0]
 802b3b2:	f1b9 0300 	subs.w	r3, r9, #0
 802b3b6:	bfbb      	ittet	lt
 802b3b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 802b3bc:	9303      	strlt	r3, [sp, #12]
 802b3be:	2300      	movge	r3, #0
 802b3c0:	2201      	movlt	r2, #1
 802b3c2:	bfac      	ite	ge
 802b3c4:	6023      	strge	r3, [r4, #0]
 802b3c6:	6022      	strlt	r2, [r4, #0]
 802b3c8:	4b9b      	ldr	r3, [pc, #620]	; (802b638 <_dtoa_r+0x2e0>)
 802b3ca:	9c03      	ldr	r4, [sp, #12]
 802b3cc:	43a3      	bics	r3, r4
 802b3ce:	d11c      	bne.n	802b40a <_dtoa_r+0xb2>
 802b3d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802b3d2:	f242 730f 	movw	r3, #9999	; 0x270f
 802b3d6:	6013      	str	r3, [r2, #0]
 802b3d8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 802b3dc:	ea53 0308 	orrs.w	r3, r3, r8
 802b3e0:	f000 84fd 	beq.w	802bdde <_dtoa_r+0xa86>
 802b3e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802b3e6:	b963      	cbnz	r3, 802b402 <_dtoa_r+0xaa>
 802b3e8:	4b94      	ldr	r3, [pc, #592]	; (802b63c <_dtoa_r+0x2e4>)
 802b3ea:	e01f      	b.n	802b42c <_dtoa_r+0xd4>
 802b3ec:	4b94      	ldr	r3, [pc, #592]	; (802b640 <_dtoa_r+0x2e8>)
 802b3ee:	9301      	str	r3, [sp, #4]
 802b3f0:	3308      	adds	r3, #8
 802b3f2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802b3f4:	6013      	str	r3, [r2, #0]
 802b3f6:	9801      	ldr	r0, [sp, #4]
 802b3f8:	b011      	add	sp, #68	; 0x44
 802b3fa:	ecbd 8b02 	vpop	{d8}
 802b3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b402:	4b8e      	ldr	r3, [pc, #568]	; (802b63c <_dtoa_r+0x2e4>)
 802b404:	9301      	str	r3, [sp, #4]
 802b406:	3303      	adds	r3, #3
 802b408:	e7f3      	b.n	802b3f2 <_dtoa_r+0x9a>
 802b40a:	ed9d 8b02 	vldr	d8, [sp, #8]
 802b40e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802b412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b416:	d10b      	bne.n	802b430 <_dtoa_r+0xd8>
 802b418:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802b41a:	2301      	movs	r3, #1
 802b41c:	6013      	str	r3, [r2, #0]
 802b41e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802b420:	2b00      	cmp	r3, #0
 802b422:	f000 84d9 	beq.w	802bdd8 <_dtoa_r+0xa80>
 802b426:	4887      	ldr	r0, [pc, #540]	; (802b644 <_dtoa_r+0x2ec>)
 802b428:	6018      	str	r0, [r3, #0]
 802b42a:	1e43      	subs	r3, r0, #1
 802b42c:	9301      	str	r3, [sp, #4]
 802b42e:	e7e2      	b.n	802b3f6 <_dtoa_r+0x9e>
 802b430:	a90f      	add	r1, sp, #60	; 0x3c
 802b432:	aa0e      	add	r2, sp, #56	; 0x38
 802b434:	4630      	mov	r0, r6
 802b436:	eeb0 0b48 	vmov.f64	d0, d8
 802b43a:	f001 fa53 	bl	802c8e4 <__d2b>
 802b43e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 802b442:	4605      	mov	r5, r0
 802b444:	980e      	ldr	r0, [sp, #56]	; 0x38
 802b446:	2900      	cmp	r1, #0
 802b448:	d046      	beq.n	802b4d8 <_dtoa_r+0x180>
 802b44a:	ee18 4a90 	vmov	r4, s17
 802b44e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 802b452:	ec53 2b18 	vmov	r2, r3, d8
 802b456:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 802b45a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802b45e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 802b462:	2400      	movs	r4, #0
 802b464:	ec43 2b16 	vmov	d6, r2, r3
 802b468:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 802b46c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 802b618 <_dtoa_r+0x2c0>
 802b470:	ee36 7b47 	vsub.f64	d7, d6, d7
 802b474:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 802b620 <_dtoa_r+0x2c8>
 802b478:	eea7 6b05 	vfma.f64	d6, d7, d5
 802b47c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 802b628 <_dtoa_r+0x2d0>
 802b480:	ee07 1a90 	vmov	s15, r1
 802b484:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 802b488:	eeb0 7b46 	vmov.f64	d7, d6
 802b48c:	eea4 7b05 	vfma.f64	d7, d4, d5
 802b490:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 802b494:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 802b498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b49c:	ee16 ba90 	vmov	fp, s13
 802b4a0:	940a      	str	r4, [sp, #40]	; 0x28
 802b4a2:	d508      	bpl.n	802b4b6 <_dtoa_r+0x15e>
 802b4a4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 802b4a8:	eeb4 6b47 	vcmp.f64	d6, d7
 802b4ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b4b0:	bf18      	it	ne
 802b4b2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 802b4b6:	f1bb 0f16 	cmp.w	fp, #22
 802b4ba:	d82f      	bhi.n	802b51c <_dtoa_r+0x1c4>
 802b4bc:	4b62      	ldr	r3, [pc, #392]	; (802b648 <_dtoa_r+0x2f0>)
 802b4be:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802b4c2:	ed93 7b00 	vldr	d7, [r3]
 802b4c6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802b4ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b4ce:	d501      	bpl.n	802b4d4 <_dtoa_r+0x17c>
 802b4d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 802b4d4:	2300      	movs	r3, #0
 802b4d6:	e022      	b.n	802b51e <_dtoa_r+0x1c6>
 802b4d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802b4da:	4401      	add	r1, r0
 802b4dc:	f201 4332 	addw	r3, r1, #1074	; 0x432
 802b4e0:	2b20      	cmp	r3, #32
 802b4e2:	bfc1      	itttt	gt
 802b4e4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 802b4e8:	fa04 f303 	lslgt.w	r3, r4, r3
 802b4ec:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 802b4f0:	fa28 f804 	lsrgt.w	r8, r8, r4
 802b4f4:	bfd6      	itet	le
 802b4f6:	f1c3 0320 	rsble	r3, r3, #32
 802b4fa:	ea43 0808 	orrgt.w	r8, r3, r8
 802b4fe:	fa08 f803 	lslle.w	r8, r8, r3
 802b502:	ee07 8a90 	vmov	s15, r8
 802b506:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 802b50a:	3901      	subs	r1, #1
 802b50c:	ee17 4a90 	vmov	r4, s15
 802b510:	ec53 2b17 	vmov	r2, r3, d7
 802b514:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 802b518:	2401      	movs	r4, #1
 802b51a:	e7a3      	b.n	802b464 <_dtoa_r+0x10c>
 802b51c:	2301      	movs	r3, #1
 802b51e:	930b      	str	r3, [sp, #44]	; 0x2c
 802b520:	1a43      	subs	r3, r0, r1
 802b522:	1e5a      	subs	r2, r3, #1
 802b524:	bf45      	ittet	mi
 802b526:	f1c3 0301 	rsbmi	r3, r3, #1
 802b52a:	9304      	strmi	r3, [sp, #16]
 802b52c:	2300      	movpl	r3, #0
 802b52e:	2300      	movmi	r3, #0
 802b530:	9205      	str	r2, [sp, #20]
 802b532:	bf54      	ite	pl
 802b534:	9304      	strpl	r3, [sp, #16]
 802b536:	9305      	strmi	r3, [sp, #20]
 802b538:	f1bb 0f00 	cmp.w	fp, #0
 802b53c:	db18      	blt.n	802b570 <_dtoa_r+0x218>
 802b53e:	9b05      	ldr	r3, [sp, #20]
 802b540:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 802b544:	445b      	add	r3, fp
 802b546:	9305      	str	r3, [sp, #20]
 802b548:	2300      	movs	r3, #0
 802b54a:	9a06      	ldr	r2, [sp, #24]
 802b54c:	2a09      	cmp	r2, #9
 802b54e:	d849      	bhi.n	802b5e4 <_dtoa_r+0x28c>
 802b550:	2a05      	cmp	r2, #5
 802b552:	bfc4      	itt	gt
 802b554:	3a04      	subgt	r2, #4
 802b556:	9206      	strgt	r2, [sp, #24]
 802b558:	9a06      	ldr	r2, [sp, #24]
 802b55a:	f1a2 0202 	sub.w	r2, r2, #2
 802b55e:	bfcc      	ite	gt
 802b560:	2400      	movgt	r4, #0
 802b562:	2401      	movle	r4, #1
 802b564:	2a03      	cmp	r2, #3
 802b566:	d848      	bhi.n	802b5fa <_dtoa_r+0x2a2>
 802b568:	e8df f002 	tbb	[pc, r2]
 802b56c:	3a2c2e0b 	.word	0x3a2c2e0b
 802b570:	9b04      	ldr	r3, [sp, #16]
 802b572:	2200      	movs	r2, #0
 802b574:	eba3 030b 	sub.w	r3, r3, fp
 802b578:	9304      	str	r3, [sp, #16]
 802b57a:	9209      	str	r2, [sp, #36]	; 0x24
 802b57c:	f1cb 0300 	rsb	r3, fp, #0
 802b580:	e7e3      	b.n	802b54a <_dtoa_r+0x1f2>
 802b582:	2200      	movs	r2, #0
 802b584:	9207      	str	r2, [sp, #28]
 802b586:	9a08      	ldr	r2, [sp, #32]
 802b588:	2a00      	cmp	r2, #0
 802b58a:	dc39      	bgt.n	802b600 <_dtoa_r+0x2a8>
 802b58c:	f04f 0a01 	mov.w	sl, #1
 802b590:	46d1      	mov	r9, sl
 802b592:	4652      	mov	r2, sl
 802b594:	f8cd a020 	str.w	sl, [sp, #32]
 802b598:	6a77      	ldr	r7, [r6, #36]	; 0x24
 802b59a:	2100      	movs	r1, #0
 802b59c:	6079      	str	r1, [r7, #4]
 802b59e:	2004      	movs	r0, #4
 802b5a0:	f100 0c14 	add.w	ip, r0, #20
 802b5a4:	4594      	cmp	ip, r2
 802b5a6:	6879      	ldr	r1, [r7, #4]
 802b5a8:	d92f      	bls.n	802b60a <_dtoa_r+0x2b2>
 802b5aa:	4630      	mov	r0, r6
 802b5ac:	930d      	str	r3, [sp, #52]	; 0x34
 802b5ae:	f000 fe71 	bl	802c294 <_Balloc>
 802b5b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802b5b4:	9001      	str	r0, [sp, #4]
 802b5b6:	4602      	mov	r2, r0
 802b5b8:	2800      	cmp	r0, #0
 802b5ba:	d149      	bne.n	802b650 <_dtoa_r+0x2f8>
 802b5bc:	4b23      	ldr	r3, [pc, #140]	; (802b64c <_dtoa_r+0x2f4>)
 802b5be:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 802b5c2:	e6e1      	b.n	802b388 <_dtoa_r+0x30>
 802b5c4:	2201      	movs	r2, #1
 802b5c6:	e7dd      	b.n	802b584 <_dtoa_r+0x22c>
 802b5c8:	2200      	movs	r2, #0
 802b5ca:	9207      	str	r2, [sp, #28]
 802b5cc:	9a08      	ldr	r2, [sp, #32]
 802b5ce:	eb0b 0a02 	add.w	sl, fp, r2
 802b5d2:	f10a 0901 	add.w	r9, sl, #1
 802b5d6:	464a      	mov	r2, r9
 802b5d8:	2a01      	cmp	r2, #1
 802b5da:	bfb8      	it	lt
 802b5dc:	2201      	movlt	r2, #1
 802b5de:	e7db      	b.n	802b598 <_dtoa_r+0x240>
 802b5e0:	2201      	movs	r2, #1
 802b5e2:	e7f2      	b.n	802b5ca <_dtoa_r+0x272>
 802b5e4:	2401      	movs	r4, #1
 802b5e6:	2200      	movs	r2, #0
 802b5e8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 802b5ec:	f04f 3aff 	mov.w	sl, #4294967295
 802b5f0:	2100      	movs	r1, #0
 802b5f2:	46d1      	mov	r9, sl
 802b5f4:	2212      	movs	r2, #18
 802b5f6:	9108      	str	r1, [sp, #32]
 802b5f8:	e7ce      	b.n	802b598 <_dtoa_r+0x240>
 802b5fa:	2201      	movs	r2, #1
 802b5fc:	9207      	str	r2, [sp, #28]
 802b5fe:	e7f5      	b.n	802b5ec <_dtoa_r+0x294>
 802b600:	f8dd a020 	ldr.w	sl, [sp, #32]
 802b604:	46d1      	mov	r9, sl
 802b606:	4652      	mov	r2, sl
 802b608:	e7c6      	b.n	802b598 <_dtoa_r+0x240>
 802b60a:	3101      	adds	r1, #1
 802b60c:	6079      	str	r1, [r7, #4]
 802b60e:	0040      	lsls	r0, r0, #1
 802b610:	e7c6      	b.n	802b5a0 <_dtoa_r+0x248>
 802b612:	bf00      	nop
 802b614:	f3af 8000 	nop.w
 802b618:	636f4361 	.word	0x636f4361
 802b61c:	3fd287a7 	.word	0x3fd287a7
 802b620:	8b60c8b3 	.word	0x8b60c8b3
 802b624:	3fc68a28 	.word	0x3fc68a28
 802b628:	509f79fb 	.word	0x509f79fb
 802b62c:	3fd34413 	.word	0x3fd34413
 802b630:	0802dc11 	.word	0x0802dc11
 802b634:	0802dc28 	.word	0x0802dc28
 802b638:	7ff00000 	.word	0x7ff00000
 802b63c:	0802dc0d 	.word	0x0802dc0d
 802b640:	0802dc04 	.word	0x0802dc04
 802b644:	0802dbe1 	.word	0x0802dbe1
 802b648:	0802dd78 	.word	0x0802dd78
 802b64c:	0802dc83 	.word	0x0802dc83
 802b650:	6a72      	ldr	r2, [r6, #36]	; 0x24
 802b652:	9901      	ldr	r1, [sp, #4]
 802b654:	6011      	str	r1, [r2, #0]
 802b656:	f1b9 0f0e 	cmp.w	r9, #14
 802b65a:	d86c      	bhi.n	802b736 <_dtoa_r+0x3de>
 802b65c:	2c00      	cmp	r4, #0
 802b65e:	d06a      	beq.n	802b736 <_dtoa_r+0x3de>
 802b660:	f1bb 0f00 	cmp.w	fp, #0
 802b664:	f340 80a0 	ble.w	802b7a8 <_dtoa_r+0x450>
 802b668:	49c1      	ldr	r1, [pc, #772]	; (802b970 <_dtoa_r+0x618>)
 802b66a:	f00b 020f 	and.w	r2, fp, #15
 802b66e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 802b672:	f41b 7f80 	tst.w	fp, #256	; 0x100
 802b676:	ed92 7b00 	vldr	d7, [r2]
 802b67a:	ea4f 112b 	mov.w	r1, fp, asr #4
 802b67e:	f000 8087 	beq.w	802b790 <_dtoa_r+0x438>
 802b682:	4abc      	ldr	r2, [pc, #752]	; (802b974 <_dtoa_r+0x61c>)
 802b684:	ed92 6b08 	vldr	d6, [r2, #32]
 802b688:	ee88 6b06 	vdiv.f64	d6, d8, d6
 802b68c:	ed8d 6b02 	vstr	d6, [sp, #8]
 802b690:	f001 010f 	and.w	r1, r1, #15
 802b694:	2203      	movs	r2, #3
 802b696:	48b7      	ldr	r0, [pc, #732]	; (802b974 <_dtoa_r+0x61c>)
 802b698:	2900      	cmp	r1, #0
 802b69a:	d17b      	bne.n	802b794 <_dtoa_r+0x43c>
 802b69c:	ed9d 6b02 	vldr	d6, [sp, #8]
 802b6a0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 802b6a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 802b6a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802b6aa:	2900      	cmp	r1, #0
 802b6ac:	f000 80a2 	beq.w	802b7f4 <_dtoa_r+0x49c>
 802b6b0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 802b6b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 802b6b8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802b6bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b6c0:	f140 8098 	bpl.w	802b7f4 <_dtoa_r+0x49c>
 802b6c4:	f1b9 0f00 	cmp.w	r9, #0
 802b6c8:	f000 8094 	beq.w	802b7f4 <_dtoa_r+0x49c>
 802b6cc:	f1ba 0f00 	cmp.w	sl, #0
 802b6d0:	dd2f      	ble.n	802b732 <_dtoa_r+0x3da>
 802b6d2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 802b6d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 802b6da:	ed8d 7b02 	vstr	d7, [sp, #8]
 802b6de:	f10b 37ff 	add.w	r7, fp, #4294967295
 802b6e2:	3201      	adds	r2, #1
 802b6e4:	4650      	mov	r0, sl
 802b6e6:	ed9d 6b02 	vldr	d6, [sp, #8]
 802b6ea:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 802b6ee:	ee07 2a90 	vmov	s15, r2
 802b6f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802b6f6:	eea7 5b06 	vfma.f64	d5, d7, d6
 802b6fa:	ee15 4a90 	vmov	r4, s11
 802b6fe:	ec52 1b15 	vmov	r1, r2, d5
 802b702:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 802b706:	2800      	cmp	r0, #0
 802b708:	d177      	bne.n	802b7fa <_dtoa_r+0x4a2>
 802b70a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 802b70e:	ee36 6b47 	vsub.f64	d6, d6, d7
 802b712:	ec42 1b17 	vmov	d7, r1, r2
 802b716:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802b71a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b71e:	f300 8263 	bgt.w	802bbe8 <_dtoa_r+0x890>
 802b722:	eeb1 7b47 	vneg.f64	d7, d7
 802b726:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802b72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b72e:	f100 8258 	bmi.w	802bbe2 <_dtoa_r+0x88a>
 802b732:	ed8d 8b02 	vstr	d8, [sp, #8]
 802b736:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802b738:	2a00      	cmp	r2, #0
 802b73a:	f2c0 811d 	blt.w	802b978 <_dtoa_r+0x620>
 802b73e:	f1bb 0f0e 	cmp.w	fp, #14
 802b742:	f300 8119 	bgt.w	802b978 <_dtoa_r+0x620>
 802b746:	4b8a      	ldr	r3, [pc, #552]	; (802b970 <_dtoa_r+0x618>)
 802b748:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802b74c:	ed93 6b00 	vldr	d6, [r3]
 802b750:	9b08      	ldr	r3, [sp, #32]
 802b752:	2b00      	cmp	r3, #0
 802b754:	f280 80b7 	bge.w	802b8c6 <_dtoa_r+0x56e>
 802b758:	f1b9 0f00 	cmp.w	r9, #0
 802b75c:	f300 80b3 	bgt.w	802b8c6 <_dtoa_r+0x56e>
 802b760:	f040 823f 	bne.w	802bbe2 <_dtoa_r+0x88a>
 802b764:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 802b768:	ee26 6b07 	vmul.f64	d6, d6, d7
 802b76c:	ed9d 7b02 	vldr	d7, [sp, #8]
 802b770:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802b774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b778:	464c      	mov	r4, r9
 802b77a:	464f      	mov	r7, r9
 802b77c:	f280 8215 	bge.w	802bbaa <_dtoa_r+0x852>
 802b780:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802b784:	2331      	movs	r3, #49	; 0x31
 802b786:	f808 3b01 	strb.w	r3, [r8], #1
 802b78a:	f10b 0b01 	add.w	fp, fp, #1
 802b78e:	e211      	b.n	802bbb4 <_dtoa_r+0x85c>
 802b790:	2202      	movs	r2, #2
 802b792:	e780      	b.n	802b696 <_dtoa_r+0x33e>
 802b794:	07cc      	lsls	r4, r1, #31
 802b796:	d504      	bpl.n	802b7a2 <_dtoa_r+0x44a>
 802b798:	ed90 6b00 	vldr	d6, [r0]
 802b79c:	3201      	adds	r2, #1
 802b79e:	ee27 7b06 	vmul.f64	d7, d7, d6
 802b7a2:	1049      	asrs	r1, r1, #1
 802b7a4:	3008      	adds	r0, #8
 802b7a6:	e777      	b.n	802b698 <_dtoa_r+0x340>
 802b7a8:	d022      	beq.n	802b7f0 <_dtoa_r+0x498>
 802b7aa:	f1cb 0100 	rsb	r1, fp, #0
 802b7ae:	4a70      	ldr	r2, [pc, #448]	; (802b970 <_dtoa_r+0x618>)
 802b7b0:	f001 000f 	and.w	r0, r1, #15
 802b7b4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 802b7b8:	ed92 7b00 	vldr	d7, [r2]
 802b7bc:	ee28 7b07 	vmul.f64	d7, d8, d7
 802b7c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 802b7c4:	486b      	ldr	r0, [pc, #428]	; (802b974 <_dtoa_r+0x61c>)
 802b7c6:	1109      	asrs	r1, r1, #4
 802b7c8:	2400      	movs	r4, #0
 802b7ca:	2202      	movs	r2, #2
 802b7cc:	b929      	cbnz	r1, 802b7da <_dtoa_r+0x482>
 802b7ce:	2c00      	cmp	r4, #0
 802b7d0:	f43f af6a 	beq.w	802b6a8 <_dtoa_r+0x350>
 802b7d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 802b7d8:	e766      	b.n	802b6a8 <_dtoa_r+0x350>
 802b7da:	07cf      	lsls	r7, r1, #31
 802b7dc:	d505      	bpl.n	802b7ea <_dtoa_r+0x492>
 802b7de:	ed90 6b00 	vldr	d6, [r0]
 802b7e2:	3201      	adds	r2, #1
 802b7e4:	2401      	movs	r4, #1
 802b7e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 802b7ea:	1049      	asrs	r1, r1, #1
 802b7ec:	3008      	adds	r0, #8
 802b7ee:	e7ed      	b.n	802b7cc <_dtoa_r+0x474>
 802b7f0:	2202      	movs	r2, #2
 802b7f2:	e759      	b.n	802b6a8 <_dtoa_r+0x350>
 802b7f4:	465f      	mov	r7, fp
 802b7f6:	4648      	mov	r0, r9
 802b7f8:	e775      	b.n	802b6e6 <_dtoa_r+0x38e>
 802b7fa:	ec42 1b17 	vmov	d7, r1, r2
 802b7fe:	4a5c      	ldr	r2, [pc, #368]	; (802b970 <_dtoa_r+0x618>)
 802b800:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 802b804:	ed12 4b02 	vldr	d4, [r2, #-8]
 802b808:	9a01      	ldr	r2, [sp, #4]
 802b80a:	1814      	adds	r4, r2, r0
 802b80c:	9a07      	ldr	r2, [sp, #28]
 802b80e:	b352      	cbz	r2, 802b866 <_dtoa_r+0x50e>
 802b810:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 802b814:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 802b818:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802b81c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 802b820:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 802b824:	ee35 7b47 	vsub.f64	d7, d5, d7
 802b828:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 802b82c:	ee14 2a90 	vmov	r2, s9
 802b830:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 802b834:	3230      	adds	r2, #48	; 0x30
 802b836:	ee36 6b45 	vsub.f64	d6, d6, d5
 802b83a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802b83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b842:	f808 2b01 	strb.w	r2, [r8], #1
 802b846:	d439      	bmi.n	802b8bc <_dtoa_r+0x564>
 802b848:	ee32 5b46 	vsub.f64	d5, d2, d6
 802b84c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 802b850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b854:	d472      	bmi.n	802b93c <_dtoa_r+0x5e4>
 802b856:	45a0      	cmp	r8, r4
 802b858:	f43f af6b 	beq.w	802b732 <_dtoa_r+0x3da>
 802b85c:	ee27 7b03 	vmul.f64	d7, d7, d3
 802b860:	ee26 6b03 	vmul.f64	d6, d6, d3
 802b864:	e7e0      	b.n	802b828 <_dtoa_r+0x4d0>
 802b866:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802b86a:	ee27 7b04 	vmul.f64	d7, d7, d4
 802b86e:	4621      	mov	r1, r4
 802b870:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 802b874:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 802b878:	ee14 2a90 	vmov	r2, s9
 802b87c:	3230      	adds	r2, #48	; 0x30
 802b87e:	f808 2b01 	strb.w	r2, [r8], #1
 802b882:	45a0      	cmp	r8, r4
 802b884:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 802b888:	ee36 6b45 	vsub.f64	d6, d6, d5
 802b88c:	d118      	bne.n	802b8c0 <_dtoa_r+0x568>
 802b88e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 802b892:	ee37 4b05 	vadd.f64	d4, d7, d5
 802b896:	eeb4 6bc4 	vcmpe.f64	d6, d4
 802b89a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b89e:	dc4d      	bgt.n	802b93c <_dtoa_r+0x5e4>
 802b8a0:	ee35 7b47 	vsub.f64	d7, d5, d7
 802b8a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802b8a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b8ac:	f57f af41 	bpl.w	802b732 <_dtoa_r+0x3da>
 802b8b0:	4688      	mov	r8, r1
 802b8b2:	3901      	subs	r1, #1
 802b8b4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 802b8b8:	2b30      	cmp	r3, #48	; 0x30
 802b8ba:	d0f9      	beq.n	802b8b0 <_dtoa_r+0x558>
 802b8bc:	46bb      	mov	fp, r7
 802b8be:	e02a      	b.n	802b916 <_dtoa_r+0x5be>
 802b8c0:	ee26 6b03 	vmul.f64	d6, d6, d3
 802b8c4:	e7d6      	b.n	802b874 <_dtoa_r+0x51c>
 802b8c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 802b8ca:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 802b8ce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802b8d2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 802b8d6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 802b8da:	ee15 3a10 	vmov	r3, s10
 802b8de:	3330      	adds	r3, #48	; 0x30
 802b8e0:	f808 3b01 	strb.w	r3, [r8], #1
 802b8e4:	9b01      	ldr	r3, [sp, #4]
 802b8e6:	eba8 0303 	sub.w	r3, r8, r3
 802b8ea:	4599      	cmp	r9, r3
 802b8ec:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 802b8f0:	eea3 7b46 	vfms.f64	d7, d3, d6
 802b8f4:	d133      	bne.n	802b95e <_dtoa_r+0x606>
 802b8f6:	ee37 7b07 	vadd.f64	d7, d7, d7
 802b8fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802b8fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b902:	dc1a      	bgt.n	802b93a <_dtoa_r+0x5e2>
 802b904:	eeb4 7b46 	vcmp.f64	d7, d6
 802b908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b90c:	d103      	bne.n	802b916 <_dtoa_r+0x5be>
 802b90e:	ee15 3a10 	vmov	r3, s10
 802b912:	07d9      	lsls	r1, r3, #31
 802b914:	d411      	bmi.n	802b93a <_dtoa_r+0x5e2>
 802b916:	4629      	mov	r1, r5
 802b918:	4630      	mov	r0, r6
 802b91a:	f000 fcfb 	bl	802c314 <_Bfree>
 802b91e:	2300      	movs	r3, #0
 802b920:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802b922:	f888 3000 	strb.w	r3, [r8]
 802b926:	f10b 0301 	add.w	r3, fp, #1
 802b92a:	6013      	str	r3, [r2, #0]
 802b92c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802b92e:	2b00      	cmp	r3, #0
 802b930:	f43f ad61 	beq.w	802b3f6 <_dtoa_r+0x9e>
 802b934:	f8c3 8000 	str.w	r8, [r3]
 802b938:	e55d      	b.n	802b3f6 <_dtoa_r+0x9e>
 802b93a:	465f      	mov	r7, fp
 802b93c:	4643      	mov	r3, r8
 802b93e:	4698      	mov	r8, r3
 802b940:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802b944:	2a39      	cmp	r2, #57	; 0x39
 802b946:	d106      	bne.n	802b956 <_dtoa_r+0x5fe>
 802b948:	9a01      	ldr	r2, [sp, #4]
 802b94a:	429a      	cmp	r2, r3
 802b94c:	d1f7      	bne.n	802b93e <_dtoa_r+0x5e6>
 802b94e:	9901      	ldr	r1, [sp, #4]
 802b950:	2230      	movs	r2, #48	; 0x30
 802b952:	3701      	adds	r7, #1
 802b954:	700a      	strb	r2, [r1, #0]
 802b956:	781a      	ldrb	r2, [r3, #0]
 802b958:	3201      	adds	r2, #1
 802b95a:	701a      	strb	r2, [r3, #0]
 802b95c:	e7ae      	b.n	802b8bc <_dtoa_r+0x564>
 802b95e:	ee27 7b04 	vmul.f64	d7, d7, d4
 802b962:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802b966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b96a:	d1b2      	bne.n	802b8d2 <_dtoa_r+0x57a>
 802b96c:	e7d3      	b.n	802b916 <_dtoa_r+0x5be>
 802b96e:	bf00      	nop
 802b970:	0802dd78 	.word	0x0802dd78
 802b974:	0802dd50 	.word	0x0802dd50
 802b978:	9907      	ldr	r1, [sp, #28]
 802b97a:	2900      	cmp	r1, #0
 802b97c:	f000 80d0 	beq.w	802bb20 <_dtoa_r+0x7c8>
 802b980:	9906      	ldr	r1, [sp, #24]
 802b982:	2901      	cmp	r1, #1
 802b984:	f300 80b4 	bgt.w	802baf0 <_dtoa_r+0x798>
 802b988:	990a      	ldr	r1, [sp, #40]	; 0x28
 802b98a:	2900      	cmp	r1, #0
 802b98c:	f000 80ac 	beq.w	802bae8 <_dtoa_r+0x790>
 802b990:	f202 4233 	addw	r2, r2, #1075	; 0x433
 802b994:	f8dd 8010 	ldr.w	r8, [sp, #16]
 802b998:	461c      	mov	r4, r3
 802b99a:	930a      	str	r3, [sp, #40]	; 0x28
 802b99c:	9b04      	ldr	r3, [sp, #16]
 802b99e:	4413      	add	r3, r2
 802b9a0:	9304      	str	r3, [sp, #16]
 802b9a2:	9b05      	ldr	r3, [sp, #20]
 802b9a4:	2101      	movs	r1, #1
 802b9a6:	4413      	add	r3, r2
 802b9a8:	4630      	mov	r0, r6
 802b9aa:	9305      	str	r3, [sp, #20]
 802b9ac:	f000 fd6a 	bl	802c484 <__i2b>
 802b9b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b9b2:	4607      	mov	r7, r0
 802b9b4:	f1b8 0f00 	cmp.w	r8, #0
 802b9b8:	dd0d      	ble.n	802b9d6 <_dtoa_r+0x67e>
 802b9ba:	9a05      	ldr	r2, [sp, #20]
 802b9bc:	2a00      	cmp	r2, #0
 802b9be:	dd0a      	ble.n	802b9d6 <_dtoa_r+0x67e>
 802b9c0:	4542      	cmp	r2, r8
 802b9c2:	9904      	ldr	r1, [sp, #16]
 802b9c4:	bfa8      	it	ge
 802b9c6:	4642      	movge	r2, r8
 802b9c8:	1a89      	subs	r1, r1, r2
 802b9ca:	9104      	str	r1, [sp, #16]
 802b9cc:	9905      	ldr	r1, [sp, #20]
 802b9ce:	eba8 0802 	sub.w	r8, r8, r2
 802b9d2:	1a8a      	subs	r2, r1, r2
 802b9d4:	9205      	str	r2, [sp, #20]
 802b9d6:	b303      	cbz	r3, 802ba1a <_dtoa_r+0x6c2>
 802b9d8:	9a07      	ldr	r2, [sp, #28]
 802b9da:	2a00      	cmp	r2, #0
 802b9dc:	f000 80a5 	beq.w	802bb2a <_dtoa_r+0x7d2>
 802b9e0:	2c00      	cmp	r4, #0
 802b9e2:	dd13      	ble.n	802ba0c <_dtoa_r+0x6b4>
 802b9e4:	4639      	mov	r1, r7
 802b9e6:	4622      	mov	r2, r4
 802b9e8:	4630      	mov	r0, r6
 802b9ea:	930d      	str	r3, [sp, #52]	; 0x34
 802b9ec:	f000 fe0a 	bl	802c604 <__pow5mult>
 802b9f0:	462a      	mov	r2, r5
 802b9f2:	4601      	mov	r1, r0
 802b9f4:	4607      	mov	r7, r0
 802b9f6:	4630      	mov	r0, r6
 802b9f8:	f000 fd5a 	bl	802c4b0 <__multiply>
 802b9fc:	4629      	mov	r1, r5
 802b9fe:	900a      	str	r0, [sp, #40]	; 0x28
 802ba00:	4630      	mov	r0, r6
 802ba02:	f000 fc87 	bl	802c314 <_Bfree>
 802ba06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802ba08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802ba0a:	4615      	mov	r5, r2
 802ba0c:	1b1a      	subs	r2, r3, r4
 802ba0e:	d004      	beq.n	802ba1a <_dtoa_r+0x6c2>
 802ba10:	4629      	mov	r1, r5
 802ba12:	4630      	mov	r0, r6
 802ba14:	f000 fdf6 	bl	802c604 <__pow5mult>
 802ba18:	4605      	mov	r5, r0
 802ba1a:	2101      	movs	r1, #1
 802ba1c:	4630      	mov	r0, r6
 802ba1e:	f000 fd31 	bl	802c484 <__i2b>
 802ba22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ba24:	2b00      	cmp	r3, #0
 802ba26:	4604      	mov	r4, r0
 802ba28:	f340 8081 	ble.w	802bb2e <_dtoa_r+0x7d6>
 802ba2c:	461a      	mov	r2, r3
 802ba2e:	4601      	mov	r1, r0
 802ba30:	4630      	mov	r0, r6
 802ba32:	f000 fde7 	bl	802c604 <__pow5mult>
 802ba36:	9b06      	ldr	r3, [sp, #24]
 802ba38:	2b01      	cmp	r3, #1
 802ba3a:	4604      	mov	r4, r0
 802ba3c:	dd7a      	ble.n	802bb34 <_dtoa_r+0x7dc>
 802ba3e:	2300      	movs	r3, #0
 802ba40:	930a      	str	r3, [sp, #40]	; 0x28
 802ba42:	6922      	ldr	r2, [r4, #16]
 802ba44:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 802ba48:	6910      	ldr	r0, [r2, #16]
 802ba4a:	f000 fccb 	bl	802c3e4 <__hi0bits>
 802ba4e:	f1c0 0020 	rsb	r0, r0, #32
 802ba52:	9b05      	ldr	r3, [sp, #20]
 802ba54:	4418      	add	r0, r3
 802ba56:	f010 001f 	ands.w	r0, r0, #31
 802ba5a:	f000 808c 	beq.w	802bb76 <_dtoa_r+0x81e>
 802ba5e:	f1c0 0220 	rsb	r2, r0, #32
 802ba62:	2a04      	cmp	r2, #4
 802ba64:	f340 8085 	ble.w	802bb72 <_dtoa_r+0x81a>
 802ba68:	f1c0 001c 	rsb	r0, r0, #28
 802ba6c:	9b04      	ldr	r3, [sp, #16]
 802ba6e:	4403      	add	r3, r0
 802ba70:	9304      	str	r3, [sp, #16]
 802ba72:	9b05      	ldr	r3, [sp, #20]
 802ba74:	4403      	add	r3, r0
 802ba76:	4480      	add	r8, r0
 802ba78:	9305      	str	r3, [sp, #20]
 802ba7a:	9b04      	ldr	r3, [sp, #16]
 802ba7c:	2b00      	cmp	r3, #0
 802ba7e:	dd05      	ble.n	802ba8c <_dtoa_r+0x734>
 802ba80:	4629      	mov	r1, r5
 802ba82:	461a      	mov	r2, r3
 802ba84:	4630      	mov	r0, r6
 802ba86:	f000 fe17 	bl	802c6b8 <__lshift>
 802ba8a:	4605      	mov	r5, r0
 802ba8c:	9b05      	ldr	r3, [sp, #20]
 802ba8e:	2b00      	cmp	r3, #0
 802ba90:	dd05      	ble.n	802ba9e <_dtoa_r+0x746>
 802ba92:	4621      	mov	r1, r4
 802ba94:	461a      	mov	r2, r3
 802ba96:	4630      	mov	r0, r6
 802ba98:	f000 fe0e 	bl	802c6b8 <__lshift>
 802ba9c:	4604      	mov	r4, r0
 802ba9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802baa0:	2b00      	cmp	r3, #0
 802baa2:	d06a      	beq.n	802bb7a <_dtoa_r+0x822>
 802baa4:	4621      	mov	r1, r4
 802baa6:	4628      	mov	r0, r5
 802baa8:	f000 fe76 	bl	802c798 <__mcmp>
 802baac:	2800      	cmp	r0, #0
 802baae:	da64      	bge.n	802bb7a <_dtoa_r+0x822>
 802bab0:	2300      	movs	r3, #0
 802bab2:	4629      	mov	r1, r5
 802bab4:	220a      	movs	r2, #10
 802bab6:	4630      	mov	r0, r6
 802bab8:	f000 fc4e 	bl	802c358 <__multadd>
 802babc:	9b07      	ldr	r3, [sp, #28]
 802babe:	f10b 3bff 	add.w	fp, fp, #4294967295
 802bac2:	4605      	mov	r5, r0
 802bac4:	2b00      	cmp	r3, #0
 802bac6:	f000 8191 	beq.w	802bdec <_dtoa_r+0xa94>
 802baca:	4639      	mov	r1, r7
 802bacc:	2300      	movs	r3, #0
 802bace:	220a      	movs	r2, #10
 802bad0:	4630      	mov	r0, r6
 802bad2:	f000 fc41 	bl	802c358 <__multadd>
 802bad6:	f1ba 0f00 	cmp.w	sl, #0
 802bada:	4607      	mov	r7, r0
 802badc:	f300 808d 	bgt.w	802bbfa <_dtoa_r+0x8a2>
 802bae0:	9b06      	ldr	r3, [sp, #24]
 802bae2:	2b02      	cmp	r3, #2
 802bae4:	dc50      	bgt.n	802bb88 <_dtoa_r+0x830>
 802bae6:	e088      	b.n	802bbfa <_dtoa_r+0x8a2>
 802bae8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802baea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 802baee:	e751      	b.n	802b994 <_dtoa_r+0x63c>
 802baf0:	f109 34ff 	add.w	r4, r9, #4294967295
 802baf4:	42a3      	cmp	r3, r4
 802baf6:	bfbf      	itttt	lt
 802baf8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 802bafa:	1ae3      	sublt	r3, r4, r3
 802bafc:	18d2      	addlt	r2, r2, r3
 802bafe:	9209      	strlt	r2, [sp, #36]	; 0x24
 802bb00:	bfb6      	itet	lt
 802bb02:	4623      	movlt	r3, r4
 802bb04:	1b1c      	subge	r4, r3, r4
 802bb06:	2400      	movlt	r4, #0
 802bb08:	f1b9 0f00 	cmp.w	r9, #0
 802bb0c:	bfb5      	itete	lt
 802bb0e:	9a04      	ldrlt	r2, [sp, #16]
 802bb10:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 802bb14:	eba2 0809 	sublt.w	r8, r2, r9
 802bb18:	464a      	movge	r2, r9
 802bb1a:	bfb8      	it	lt
 802bb1c:	2200      	movlt	r2, #0
 802bb1e:	e73c      	b.n	802b99a <_dtoa_r+0x642>
 802bb20:	f8dd 8010 	ldr.w	r8, [sp, #16]
 802bb24:	9f07      	ldr	r7, [sp, #28]
 802bb26:	461c      	mov	r4, r3
 802bb28:	e744      	b.n	802b9b4 <_dtoa_r+0x65c>
 802bb2a:	461a      	mov	r2, r3
 802bb2c:	e770      	b.n	802ba10 <_dtoa_r+0x6b8>
 802bb2e:	9b06      	ldr	r3, [sp, #24]
 802bb30:	2b01      	cmp	r3, #1
 802bb32:	dc18      	bgt.n	802bb66 <_dtoa_r+0x80e>
 802bb34:	9b02      	ldr	r3, [sp, #8]
 802bb36:	b9b3      	cbnz	r3, 802bb66 <_dtoa_r+0x80e>
 802bb38:	9b03      	ldr	r3, [sp, #12]
 802bb3a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 802bb3e:	b9a2      	cbnz	r2, 802bb6a <_dtoa_r+0x812>
 802bb40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 802bb44:	0d12      	lsrs	r2, r2, #20
 802bb46:	0512      	lsls	r2, r2, #20
 802bb48:	b18a      	cbz	r2, 802bb6e <_dtoa_r+0x816>
 802bb4a:	9b04      	ldr	r3, [sp, #16]
 802bb4c:	3301      	adds	r3, #1
 802bb4e:	9304      	str	r3, [sp, #16]
 802bb50:	9b05      	ldr	r3, [sp, #20]
 802bb52:	3301      	adds	r3, #1
 802bb54:	9305      	str	r3, [sp, #20]
 802bb56:	2301      	movs	r3, #1
 802bb58:	930a      	str	r3, [sp, #40]	; 0x28
 802bb5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802bb5c:	2b00      	cmp	r3, #0
 802bb5e:	f47f af70 	bne.w	802ba42 <_dtoa_r+0x6ea>
 802bb62:	2001      	movs	r0, #1
 802bb64:	e775      	b.n	802ba52 <_dtoa_r+0x6fa>
 802bb66:	2300      	movs	r3, #0
 802bb68:	e7f6      	b.n	802bb58 <_dtoa_r+0x800>
 802bb6a:	9b02      	ldr	r3, [sp, #8]
 802bb6c:	e7f4      	b.n	802bb58 <_dtoa_r+0x800>
 802bb6e:	920a      	str	r2, [sp, #40]	; 0x28
 802bb70:	e7f3      	b.n	802bb5a <_dtoa_r+0x802>
 802bb72:	d082      	beq.n	802ba7a <_dtoa_r+0x722>
 802bb74:	4610      	mov	r0, r2
 802bb76:	301c      	adds	r0, #28
 802bb78:	e778      	b.n	802ba6c <_dtoa_r+0x714>
 802bb7a:	f1b9 0f00 	cmp.w	r9, #0
 802bb7e:	dc37      	bgt.n	802bbf0 <_dtoa_r+0x898>
 802bb80:	9b06      	ldr	r3, [sp, #24]
 802bb82:	2b02      	cmp	r3, #2
 802bb84:	dd34      	ble.n	802bbf0 <_dtoa_r+0x898>
 802bb86:	46ca      	mov	sl, r9
 802bb88:	f1ba 0f00 	cmp.w	sl, #0
 802bb8c:	d10d      	bne.n	802bbaa <_dtoa_r+0x852>
 802bb8e:	4621      	mov	r1, r4
 802bb90:	4653      	mov	r3, sl
 802bb92:	2205      	movs	r2, #5
 802bb94:	4630      	mov	r0, r6
 802bb96:	f000 fbdf 	bl	802c358 <__multadd>
 802bb9a:	4601      	mov	r1, r0
 802bb9c:	4604      	mov	r4, r0
 802bb9e:	4628      	mov	r0, r5
 802bba0:	f000 fdfa 	bl	802c798 <__mcmp>
 802bba4:	2800      	cmp	r0, #0
 802bba6:	f73f adeb 	bgt.w	802b780 <_dtoa_r+0x428>
 802bbaa:	9b08      	ldr	r3, [sp, #32]
 802bbac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802bbb0:	ea6f 0b03 	mvn.w	fp, r3
 802bbb4:	f04f 0900 	mov.w	r9, #0
 802bbb8:	4621      	mov	r1, r4
 802bbba:	4630      	mov	r0, r6
 802bbbc:	f000 fbaa 	bl	802c314 <_Bfree>
 802bbc0:	2f00      	cmp	r7, #0
 802bbc2:	f43f aea8 	beq.w	802b916 <_dtoa_r+0x5be>
 802bbc6:	f1b9 0f00 	cmp.w	r9, #0
 802bbca:	d005      	beq.n	802bbd8 <_dtoa_r+0x880>
 802bbcc:	45b9      	cmp	r9, r7
 802bbce:	d003      	beq.n	802bbd8 <_dtoa_r+0x880>
 802bbd0:	4649      	mov	r1, r9
 802bbd2:	4630      	mov	r0, r6
 802bbd4:	f000 fb9e 	bl	802c314 <_Bfree>
 802bbd8:	4639      	mov	r1, r7
 802bbda:	4630      	mov	r0, r6
 802bbdc:	f000 fb9a 	bl	802c314 <_Bfree>
 802bbe0:	e699      	b.n	802b916 <_dtoa_r+0x5be>
 802bbe2:	2400      	movs	r4, #0
 802bbe4:	4627      	mov	r7, r4
 802bbe6:	e7e0      	b.n	802bbaa <_dtoa_r+0x852>
 802bbe8:	46bb      	mov	fp, r7
 802bbea:	4604      	mov	r4, r0
 802bbec:	4607      	mov	r7, r0
 802bbee:	e5c7      	b.n	802b780 <_dtoa_r+0x428>
 802bbf0:	9b07      	ldr	r3, [sp, #28]
 802bbf2:	46ca      	mov	sl, r9
 802bbf4:	2b00      	cmp	r3, #0
 802bbf6:	f000 8100 	beq.w	802bdfa <_dtoa_r+0xaa2>
 802bbfa:	f1b8 0f00 	cmp.w	r8, #0
 802bbfe:	dd05      	ble.n	802bc0c <_dtoa_r+0x8b4>
 802bc00:	4639      	mov	r1, r7
 802bc02:	4642      	mov	r2, r8
 802bc04:	4630      	mov	r0, r6
 802bc06:	f000 fd57 	bl	802c6b8 <__lshift>
 802bc0a:	4607      	mov	r7, r0
 802bc0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802bc0e:	2b00      	cmp	r3, #0
 802bc10:	d05d      	beq.n	802bcce <_dtoa_r+0x976>
 802bc12:	6879      	ldr	r1, [r7, #4]
 802bc14:	4630      	mov	r0, r6
 802bc16:	f000 fb3d 	bl	802c294 <_Balloc>
 802bc1a:	4680      	mov	r8, r0
 802bc1c:	b928      	cbnz	r0, 802bc2a <_dtoa_r+0x8d2>
 802bc1e:	4b82      	ldr	r3, [pc, #520]	; (802be28 <_dtoa_r+0xad0>)
 802bc20:	4602      	mov	r2, r0
 802bc22:	f240 21ea 	movw	r1, #746	; 0x2ea
 802bc26:	f7ff bbaf 	b.w	802b388 <_dtoa_r+0x30>
 802bc2a:	693a      	ldr	r2, [r7, #16]
 802bc2c:	3202      	adds	r2, #2
 802bc2e:	0092      	lsls	r2, r2, #2
 802bc30:	f107 010c 	add.w	r1, r7, #12
 802bc34:	300c      	adds	r0, #12
 802bc36:	f7fe fc47 	bl	802a4c8 <memcpy>
 802bc3a:	2201      	movs	r2, #1
 802bc3c:	4641      	mov	r1, r8
 802bc3e:	4630      	mov	r0, r6
 802bc40:	f000 fd3a 	bl	802c6b8 <__lshift>
 802bc44:	9b01      	ldr	r3, [sp, #4]
 802bc46:	3301      	adds	r3, #1
 802bc48:	9304      	str	r3, [sp, #16]
 802bc4a:	9b01      	ldr	r3, [sp, #4]
 802bc4c:	4453      	add	r3, sl
 802bc4e:	9308      	str	r3, [sp, #32]
 802bc50:	9b02      	ldr	r3, [sp, #8]
 802bc52:	f003 0301 	and.w	r3, r3, #1
 802bc56:	46b9      	mov	r9, r7
 802bc58:	9307      	str	r3, [sp, #28]
 802bc5a:	4607      	mov	r7, r0
 802bc5c:	9b04      	ldr	r3, [sp, #16]
 802bc5e:	4621      	mov	r1, r4
 802bc60:	3b01      	subs	r3, #1
 802bc62:	4628      	mov	r0, r5
 802bc64:	9302      	str	r3, [sp, #8]
 802bc66:	f7ff faeb 	bl	802b240 <quorem>
 802bc6a:	4603      	mov	r3, r0
 802bc6c:	3330      	adds	r3, #48	; 0x30
 802bc6e:	9005      	str	r0, [sp, #20]
 802bc70:	4649      	mov	r1, r9
 802bc72:	4628      	mov	r0, r5
 802bc74:	9309      	str	r3, [sp, #36]	; 0x24
 802bc76:	f000 fd8f 	bl	802c798 <__mcmp>
 802bc7a:	463a      	mov	r2, r7
 802bc7c:	4682      	mov	sl, r0
 802bc7e:	4621      	mov	r1, r4
 802bc80:	4630      	mov	r0, r6
 802bc82:	f000 fda5 	bl	802c7d0 <__mdiff>
 802bc86:	68c2      	ldr	r2, [r0, #12]
 802bc88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802bc8a:	4680      	mov	r8, r0
 802bc8c:	bb0a      	cbnz	r2, 802bcd2 <_dtoa_r+0x97a>
 802bc8e:	4601      	mov	r1, r0
 802bc90:	4628      	mov	r0, r5
 802bc92:	f000 fd81 	bl	802c798 <__mcmp>
 802bc96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802bc98:	4602      	mov	r2, r0
 802bc9a:	4641      	mov	r1, r8
 802bc9c:	4630      	mov	r0, r6
 802bc9e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 802bca2:	f000 fb37 	bl	802c314 <_Bfree>
 802bca6:	9b06      	ldr	r3, [sp, #24]
 802bca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802bcaa:	f8dd 8010 	ldr.w	r8, [sp, #16]
 802bcae:	ea43 0102 	orr.w	r1, r3, r2
 802bcb2:	9b07      	ldr	r3, [sp, #28]
 802bcb4:	430b      	orrs	r3, r1
 802bcb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802bcb8:	d10d      	bne.n	802bcd6 <_dtoa_r+0x97e>
 802bcba:	2b39      	cmp	r3, #57	; 0x39
 802bcbc:	d029      	beq.n	802bd12 <_dtoa_r+0x9ba>
 802bcbe:	f1ba 0f00 	cmp.w	sl, #0
 802bcc2:	dd01      	ble.n	802bcc8 <_dtoa_r+0x970>
 802bcc4:	9b05      	ldr	r3, [sp, #20]
 802bcc6:	3331      	adds	r3, #49	; 0x31
 802bcc8:	9a02      	ldr	r2, [sp, #8]
 802bcca:	7013      	strb	r3, [r2, #0]
 802bccc:	e774      	b.n	802bbb8 <_dtoa_r+0x860>
 802bcce:	4638      	mov	r0, r7
 802bcd0:	e7b8      	b.n	802bc44 <_dtoa_r+0x8ec>
 802bcd2:	2201      	movs	r2, #1
 802bcd4:	e7e1      	b.n	802bc9a <_dtoa_r+0x942>
 802bcd6:	f1ba 0f00 	cmp.w	sl, #0
 802bcda:	db06      	blt.n	802bcea <_dtoa_r+0x992>
 802bcdc:	9906      	ldr	r1, [sp, #24]
 802bcde:	ea41 0a0a 	orr.w	sl, r1, sl
 802bce2:	9907      	ldr	r1, [sp, #28]
 802bce4:	ea5a 0101 	orrs.w	r1, sl, r1
 802bce8:	d120      	bne.n	802bd2c <_dtoa_r+0x9d4>
 802bcea:	2a00      	cmp	r2, #0
 802bcec:	ddec      	ble.n	802bcc8 <_dtoa_r+0x970>
 802bcee:	4629      	mov	r1, r5
 802bcf0:	2201      	movs	r2, #1
 802bcf2:	4630      	mov	r0, r6
 802bcf4:	9304      	str	r3, [sp, #16]
 802bcf6:	f000 fcdf 	bl	802c6b8 <__lshift>
 802bcfa:	4621      	mov	r1, r4
 802bcfc:	4605      	mov	r5, r0
 802bcfe:	f000 fd4b 	bl	802c798 <__mcmp>
 802bd02:	2800      	cmp	r0, #0
 802bd04:	9b04      	ldr	r3, [sp, #16]
 802bd06:	dc02      	bgt.n	802bd0e <_dtoa_r+0x9b6>
 802bd08:	d1de      	bne.n	802bcc8 <_dtoa_r+0x970>
 802bd0a:	07da      	lsls	r2, r3, #31
 802bd0c:	d5dc      	bpl.n	802bcc8 <_dtoa_r+0x970>
 802bd0e:	2b39      	cmp	r3, #57	; 0x39
 802bd10:	d1d8      	bne.n	802bcc4 <_dtoa_r+0x96c>
 802bd12:	9a02      	ldr	r2, [sp, #8]
 802bd14:	2339      	movs	r3, #57	; 0x39
 802bd16:	7013      	strb	r3, [r2, #0]
 802bd18:	4643      	mov	r3, r8
 802bd1a:	4698      	mov	r8, r3
 802bd1c:	3b01      	subs	r3, #1
 802bd1e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 802bd22:	2a39      	cmp	r2, #57	; 0x39
 802bd24:	d051      	beq.n	802bdca <_dtoa_r+0xa72>
 802bd26:	3201      	adds	r2, #1
 802bd28:	701a      	strb	r2, [r3, #0]
 802bd2a:	e745      	b.n	802bbb8 <_dtoa_r+0x860>
 802bd2c:	2a00      	cmp	r2, #0
 802bd2e:	dd03      	ble.n	802bd38 <_dtoa_r+0x9e0>
 802bd30:	2b39      	cmp	r3, #57	; 0x39
 802bd32:	d0ee      	beq.n	802bd12 <_dtoa_r+0x9ba>
 802bd34:	3301      	adds	r3, #1
 802bd36:	e7c7      	b.n	802bcc8 <_dtoa_r+0x970>
 802bd38:	9a04      	ldr	r2, [sp, #16]
 802bd3a:	9908      	ldr	r1, [sp, #32]
 802bd3c:	f802 3c01 	strb.w	r3, [r2, #-1]
 802bd40:	428a      	cmp	r2, r1
 802bd42:	d02b      	beq.n	802bd9c <_dtoa_r+0xa44>
 802bd44:	4629      	mov	r1, r5
 802bd46:	2300      	movs	r3, #0
 802bd48:	220a      	movs	r2, #10
 802bd4a:	4630      	mov	r0, r6
 802bd4c:	f000 fb04 	bl	802c358 <__multadd>
 802bd50:	45b9      	cmp	r9, r7
 802bd52:	4605      	mov	r5, r0
 802bd54:	f04f 0300 	mov.w	r3, #0
 802bd58:	f04f 020a 	mov.w	r2, #10
 802bd5c:	4649      	mov	r1, r9
 802bd5e:	4630      	mov	r0, r6
 802bd60:	d107      	bne.n	802bd72 <_dtoa_r+0xa1a>
 802bd62:	f000 faf9 	bl	802c358 <__multadd>
 802bd66:	4681      	mov	r9, r0
 802bd68:	4607      	mov	r7, r0
 802bd6a:	9b04      	ldr	r3, [sp, #16]
 802bd6c:	3301      	adds	r3, #1
 802bd6e:	9304      	str	r3, [sp, #16]
 802bd70:	e774      	b.n	802bc5c <_dtoa_r+0x904>
 802bd72:	f000 faf1 	bl	802c358 <__multadd>
 802bd76:	4639      	mov	r1, r7
 802bd78:	4681      	mov	r9, r0
 802bd7a:	2300      	movs	r3, #0
 802bd7c:	220a      	movs	r2, #10
 802bd7e:	4630      	mov	r0, r6
 802bd80:	f000 faea 	bl	802c358 <__multadd>
 802bd84:	4607      	mov	r7, r0
 802bd86:	e7f0      	b.n	802bd6a <_dtoa_r+0xa12>
 802bd88:	f1ba 0f00 	cmp.w	sl, #0
 802bd8c:	9a01      	ldr	r2, [sp, #4]
 802bd8e:	bfcc      	ite	gt
 802bd90:	46d0      	movgt	r8, sl
 802bd92:	f04f 0801 	movle.w	r8, #1
 802bd96:	4490      	add	r8, r2
 802bd98:	f04f 0900 	mov.w	r9, #0
 802bd9c:	4629      	mov	r1, r5
 802bd9e:	2201      	movs	r2, #1
 802bda0:	4630      	mov	r0, r6
 802bda2:	9302      	str	r3, [sp, #8]
 802bda4:	f000 fc88 	bl	802c6b8 <__lshift>
 802bda8:	4621      	mov	r1, r4
 802bdaa:	4605      	mov	r5, r0
 802bdac:	f000 fcf4 	bl	802c798 <__mcmp>
 802bdb0:	2800      	cmp	r0, #0
 802bdb2:	dcb1      	bgt.n	802bd18 <_dtoa_r+0x9c0>
 802bdb4:	d102      	bne.n	802bdbc <_dtoa_r+0xa64>
 802bdb6:	9b02      	ldr	r3, [sp, #8]
 802bdb8:	07db      	lsls	r3, r3, #31
 802bdba:	d4ad      	bmi.n	802bd18 <_dtoa_r+0x9c0>
 802bdbc:	4643      	mov	r3, r8
 802bdbe:	4698      	mov	r8, r3
 802bdc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802bdc4:	2a30      	cmp	r2, #48	; 0x30
 802bdc6:	d0fa      	beq.n	802bdbe <_dtoa_r+0xa66>
 802bdc8:	e6f6      	b.n	802bbb8 <_dtoa_r+0x860>
 802bdca:	9a01      	ldr	r2, [sp, #4]
 802bdcc:	429a      	cmp	r2, r3
 802bdce:	d1a4      	bne.n	802bd1a <_dtoa_r+0x9c2>
 802bdd0:	f10b 0b01 	add.w	fp, fp, #1
 802bdd4:	2331      	movs	r3, #49	; 0x31
 802bdd6:	e778      	b.n	802bcca <_dtoa_r+0x972>
 802bdd8:	4b14      	ldr	r3, [pc, #80]	; (802be2c <_dtoa_r+0xad4>)
 802bdda:	f7ff bb27 	b.w	802b42c <_dtoa_r+0xd4>
 802bdde:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802bde0:	2b00      	cmp	r3, #0
 802bde2:	f47f ab03 	bne.w	802b3ec <_dtoa_r+0x94>
 802bde6:	4b12      	ldr	r3, [pc, #72]	; (802be30 <_dtoa_r+0xad8>)
 802bde8:	f7ff bb20 	b.w	802b42c <_dtoa_r+0xd4>
 802bdec:	f1ba 0f00 	cmp.w	sl, #0
 802bdf0:	dc03      	bgt.n	802bdfa <_dtoa_r+0xaa2>
 802bdf2:	9b06      	ldr	r3, [sp, #24]
 802bdf4:	2b02      	cmp	r3, #2
 802bdf6:	f73f aec7 	bgt.w	802bb88 <_dtoa_r+0x830>
 802bdfa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802bdfe:	4621      	mov	r1, r4
 802be00:	4628      	mov	r0, r5
 802be02:	f7ff fa1d 	bl	802b240 <quorem>
 802be06:	f100 0330 	add.w	r3, r0, #48	; 0x30
 802be0a:	f808 3b01 	strb.w	r3, [r8], #1
 802be0e:	9a01      	ldr	r2, [sp, #4]
 802be10:	eba8 0202 	sub.w	r2, r8, r2
 802be14:	4592      	cmp	sl, r2
 802be16:	ddb7      	ble.n	802bd88 <_dtoa_r+0xa30>
 802be18:	4629      	mov	r1, r5
 802be1a:	2300      	movs	r3, #0
 802be1c:	220a      	movs	r2, #10
 802be1e:	4630      	mov	r0, r6
 802be20:	f000 fa9a 	bl	802c358 <__multadd>
 802be24:	4605      	mov	r5, r0
 802be26:	e7ea      	b.n	802bdfe <_dtoa_r+0xaa6>
 802be28:	0802dc83 	.word	0x0802dc83
 802be2c:	0802dbe0 	.word	0x0802dbe0
 802be30:	0802dc04 	.word	0x0802dc04

0802be34 <__sflush_r>:
 802be34:	898a      	ldrh	r2, [r1, #12]
 802be36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802be3a:	4605      	mov	r5, r0
 802be3c:	0710      	lsls	r0, r2, #28
 802be3e:	460c      	mov	r4, r1
 802be40:	d458      	bmi.n	802bef4 <__sflush_r+0xc0>
 802be42:	684b      	ldr	r3, [r1, #4]
 802be44:	2b00      	cmp	r3, #0
 802be46:	dc05      	bgt.n	802be54 <__sflush_r+0x20>
 802be48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802be4a:	2b00      	cmp	r3, #0
 802be4c:	dc02      	bgt.n	802be54 <__sflush_r+0x20>
 802be4e:	2000      	movs	r0, #0
 802be50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802be54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802be56:	2e00      	cmp	r6, #0
 802be58:	d0f9      	beq.n	802be4e <__sflush_r+0x1a>
 802be5a:	2300      	movs	r3, #0
 802be5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802be60:	682f      	ldr	r7, [r5, #0]
 802be62:	602b      	str	r3, [r5, #0]
 802be64:	d032      	beq.n	802becc <__sflush_r+0x98>
 802be66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802be68:	89a3      	ldrh	r3, [r4, #12]
 802be6a:	075a      	lsls	r2, r3, #29
 802be6c:	d505      	bpl.n	802be7a <__sflush_r+0x46>
 802be6e:	6863      	ldr	r3, [r4, #4]
 802be70:	1ac0      	subs	r0, r0, r3
 802be72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802be74:	b10b      	cbz	r3, 802be7a <__sflush_r+0x46>
 802be76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802be78:	1ac0      	subs	r0, r0, r3
 802be7a:	2300      	movs	r3, #0
 802be7c:	4602      	mov	r2, r0
 802be7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802be80:	6a21      	ldr	r1, [r4, #32]
 802be82:	4628      	mov	r0, r5
 802be84:	47b0      	blx	r6
 802be86:	1c43      	adds	r3, r0, #1
 802be88:	89a3      	ldrh	r3, [r4, #12]
 802be8a:	d106      	bne.n	802be9a <__sflush_r+0x66>
 802be8c:	6829      	ldr	r1, [r5, #0]
 802be8e:	291d      	cmp	r1, #29
 802be90:	d82c      	bhi.n	802beec <__sflush_r+0xb8>
 802be92:	4a2a      	ldr	r2, [pc, #168]	; (802bf3c <__sflush_r+0x108>)
 802be94:	40ca      	lsrs	r2, r1
 802be96:	07d6      	lsls	r6, r2, #31
 802be98:	d528      	bpl.n	802beec <__sflush_r+0xb8>
 802be9a:	2200      	movs	r2, #0
 802be9c:	6062      	str	r2, [r4, #4]
 802be9e:	04d9      	lsls	r1, r3, #19
 802bea0:	6922      	ldr	r2, [r4, #16]
 802bea2:	6022      	str	r2, [r4, #0]
 802bea4:	d504      	bpl.n	802beb0 <__sflush_r+0x7c>
 802bea6:	1c42      	adds	r2, r0, #1
 802bea8:	d101      	bne.n	802beae <__sflush_r+0x7a>
 802beaa:	682b      	ldr	r3, [r5, #0]
 802beac:	b903      	cbnz	r3, 802beb0 <__sflush_r+0x7c>
 802beae:	6560      	str	r0, [r4, #84]	; 0x54
 802beb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802beb2:	602f      	str	r7, [r5, #0]
 802beb4:	2900      	cmp	r1, #0
 802beb6:	d0ca      	beq.n	802be4e <__sflush_r+0x1a>
 802beb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802bebc:	4299      	cmp	r1, r3
 802bebe:	d002      	beq.n	802bec6 <__sflush_r+0x92>
 802bec0:	4628      	mov	r0, r5
 802bec2:	f7fe fb31 	bl	802a528 <_free_r>
 802bec6:	2000      	movs	r0, #0
 802bec8:	6360      	str	r0, [r4, #52]	; 0x34
 802beca:	e7c1      	b.n	802be50 <__sflush_r+0x1c>
 802becc:	6a21      	ldr	r1, [r4, #32]
 802bece:	2301      	movs	r3, #1
 802bed0:	4628      	mov	r0, r5
 802bed2:	47b0      	blx	r6
 802bed4:	1c41      	adds	r1, r0, #1
 802bed6:	d1c7      	bne.n	802be68 <__sflush_r+0x34>
 802bed8:	682b      	ldr	r3, [r5, #0]
 802beda:	2b00      	cmp	r3, #0
 802bedc:	d0c4      	beq.n	802be68 <__sflush_r+0x34>
 802bede:	2b1d      	cmp	r3, #29
 802bee0:	d001      	beq.n	802bee6 <__sflush_r+0xb2>
 802bee2:	2b16      	cmp	r3, #22
 802bee4:	d101      	bne.n	802beea <__sflush_r+0xb6>
 802bee6:	602f      	str	r7, [r5, #0]
 802bee8:	e7b1      	b.n	802be4e <__sflush_r+0x1a>
 802beea:	89a3      	ldrh	r3, [r4, #12]
 802beec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802bef0:	81a3      	strh	r3, [r4, #12]
 802bef2:	e7ad      	b.n	802be50 <__sflush_r+0x1c>
 802bef4:	690f      	ldr	r7, [r1, #16]
 802bef6:	2f00      	cmp	r7, #0
 802bef8:	d0a9      	beq.n	802be4e <__sflush_r+0x1a>
 802befa:	0793      	lsls	r3, r2, #30
 802befc:	680e      	ldr	r6, [r1, #0]
 802befe:	bf08      	it	eq
 802bf00:	694b      	ldreq	r3, [r1, #20]
 802bf02:	600f      	str	r7, [r1, #0]
 802bf04:	bf18      	it	ne
 802bf06:	2300      	movne	r3, #0
 802bf08:	eba6 0807 	sub.w	r8, r6, r7
 802bf0c:	608b      	str	r3, [r1, #8]
 802bf0e:	f1b8 0f00 	cmp.w	r8, #0
 802bf12:	dd9c      	ble.n	802be4e <__sflush_r+0x1a>
 802bf14:	6a21      	ldr	r1, [r4, #32]
 802bf16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802bf18:	4643      	mov	r3, r8
 802bf1a:	463a      	mov	r2, r7
 802bf1c:	4628      	mov	r0, r5
 802bf1e:	47b0      	blx	r6
 802bf20:	2800      	cmp	r0, #0
 802bf22:	dc06      	bgt.n	802bf32 <__sflush_r+0xfe>
 802bf24:	89a3      	ldrh	r3, [r4, #12]
 802bf26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802bf2a:	81a3      	strh	r3, [r4, #12]
 802bf2c:	f04f 30ff 	mov.w	r0, #4294967295
 802bf30:	e78e      	b.n	802be50 <__sflush_r+0x1c>
 802bf32:	4407      	add	r7, r0
 802bf34:	eba8 0800 	sub.w	r8, r8, r0
 802bf38:	e7e9      	b.n	802bf0e <__sflush_r+0xda>
 802bf3a:	bf00      	nop
 802bf3c:	20400001 	.word	0x20400001

0802bf40 <_fflush_r>:
 802bf40:	b538      	push	{r3, r4, r5, lr}
 802bf42:	690b      	ldr	r3, [r1, #16]
 802bf44:	4605      	mov	r5, r0
 802bf46:	460c      	mov	r4, r1
 802bf48:	b913      	cbnz	r3, 802bf50 <_fflush_r+0x10>
 802bf4a:	2500      	movs	r5, #0
 802bf4c:	4628      	mov	r0, r5
 802bf4e:	bd38      	pop	{r3, r4, r5, pc}
 802bf50:	b118      	cbz	r0, 802bf5a <_fflush_r+0x1a>
 802bf52:	6983      	ldr	r3, [r0, #24]
 802bf54:	b90b      	cbnz	r3, 802bf5a <_fflush_r+0x1a>
 802bf56:	f000 f887 	bl	802c068 <__sinit>
 802bf5a:	4b14      	ldr	r3, [pc, #80]	; (802bfac <_fflush_r+0x6c>)
 802bf5c:	429c      	cmp	r4, r3
 802bf5e:	d11b      	bne.n	802bf98 <_fflush_r+0x58>
 802bf60:	686c      	ldr	r4, [r5, #4]
 802bf62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bf66:	2b00      	cmp	r3, #0
 802bf68:	d0ef      	beq.n	802bf4a <_fflush_r+0xa>
 802bf6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802bf6c:	07d0      	lsls	r0, r2, #31
 802bf6e:	d404      	bmi.n	802bf7a <_fflush_r+0x3a>
 802bf70:	0599      	lsls	r1, r3, #22
 802bf72:	d402      	bmi.n	802bf7a <_fflush_r+0x3a>
 802bf74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802bf76:	f000 f91a 	bl	802c1ae <__retarget_lock_acquire_recursive>
 802bf7a:	4628      	mov	r0, r5
 802bf7c:	4621      	mov	r1, r4
 802bf7e:	f7ff ff59 	bl	802be34 <__sflush_r>
 802bf82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802bf84:	07da      	lsls	r2, r3, #31
 802bf86:	4605      	mov	r5, r0
 802bf88:	d4e0      	bmi.n	802bf4c <_fflush_r+0xc>
 802bf8a:	89a3      	ldrh	r3, [r4, #12]
 802bf8c:	059b      	lsls	r3, r3, #22
 802bf8e:	d4dd      	bmi.n	802bf4c <_fflush_r+0xc>
 802bf90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802bf92:	f000 f90d 	bl	802c1b0 <__retarget_lock_release_recursive>
 802bf96:	e7d9      	b.n	802bf4c <_fflush_r+0xc>
 802bf98:	4b05      	ldr	r3, [pc, #20]	; (802bfb0 <_fflush_r+0x70>)
 802bf9a:	429c      	cmp	r4, r3
 802bf9c:	d101      	bne.n	802bfa2 <_fflush_r+0x62>
 802bf9e:	68ac      	ldr	r4, [r5, #8]
 802bfa0:	e7df      	b.n	802bf62 <_fflush_r+0x22>
 802bfa2:	4b04      	ldr	r3, [pc, #16]	; (802bfb4 <_fflush_r+0x74>)
 802bfa4:	429c      	cmp	r4, r3
 802bfa6:	bf08      	it	eq
 802bfa8:	68ec      	ldreq	r4, [r5, #12]
 802bfaa:	e7da      	b.n	802bf62 <_fflush_r+0x22>
 802bfac:	0802dcb4 	.word	0x0802dcb4
 802bfb0:	0802dcd4 	.word	0x0802dcd4
 802bfb4:	0802dc94 	.word	0x0802dc94

0802bfb8 <std>:
 802bfb8:	2300      	movs	r3, #0
 802bfba:	b510      	push	{r4, lr}
 802bfbc:	4604      	mov	r4, r0
 802bfbe:	e9c0 3300 	strd	r3, r3, [r0]
 802bfc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802bfc6:	6083      	str	r3, [r0, #8]
 802bfc8:	8181      	strh	r1, [r0, #12]
 802bfca:	6643      	str	r3, [r0, #100]	; 0x64
 802bfcc:	81c2      	strh	r2, [r0, #14]
 802bfce:	6183      	str	r3, [r0, #24]
 802bfd0:	4619      	mov	r1, r3
 802bfd2:	2208      	movs	r2, #8
 802bfd4:	305c      	adds	r0, #92	; 0x5c
 802bfd6:	f7fe fa9f 	bl	802a518 <memset>
 802bfda:	4b05      	ldr	r3, [pc, #20]	; (802bff0 <std+0x38>)
 802bfdc:	6263      	str	r3, [r4, #36]	; 0x24
 802bfde:	4b05      	ldr	r3, [pc, #20]	; (802bff4 <std+0x3c>)
 802bfe0:	62a3      	str	r3, [r4, #40]	; 0x28
 802bfe2:	4b05      	ldr	r3, [pc, #20]	; (802bff8 <std+0x40>)
 802bfe4:	62e3      	str	r3, [r4, #44]	; 0x2c
 802bfe6:	4b05      	ldr	r3, [pc, #20]	; (802bffc <std+0x44>)
 802bfe8:	6224      	str	r4, [r4, #32]
 802bfea:	6323      	str	r3, [r4, #48]	; 0x30
 802bfec:	bd10      	pop	{r4, pc}
 802bfee:	bf00      	nop
 802bff0:	0802ccdd 	.word	0x0802ccdd
 802bff4:	0802ccff 	.word	0x0802ccff
 802bff8:	0802cd37 	.word	0x0802cd37
 802bffc:	0802cd5b 	.word	0x0802cd5b

0802c000 <_cleanup_r>:
 802c000:	4901      	ldr	r1, [pc, #4]	; (802c008 <_cleanup_r+0x8>)
 802c002:	f000 b8af 	b.w	802c164 <_fwalk_reent>
 802c006:	bf00      	nop
 802c008:	0802bf41 	.word	0x0802bf41

0802c00c <__sfmoreglue>:
 802c00c:	b570      	push	{r4, r5, r6, lr}
 802c00e:	2268      	movs	r2, #104	; 0x68
 802c010:	1e4d      	subs	r5, r1, #1
 802c012:	4355      	muls	r5, r2
 802c014:	460e      	mov	r6, r1
 802c016:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802c01a:	f7fe faf1 	bl	802a600 <_malloc_r>
 802c01e:	4604      	mov	r4, r0
 802c020:	b140      	cbz	r0, 802c034 <__sfmoreglue+0x28>
 802c022:	2100      	movs	r1, #0
 802c024:	e9c0 1600 	strd	r1, r6, [r0]
 802c028:	300c      	adds	r0, #12
 802c02a:	60a0      	str	r0, [r4, #8]
 802c02c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802c030:	f7fe fa72 	bl	802a518 <memset>
 802c034:	4620      	mov	r0, r4
 802c036:	bd70      	pop	{r4, r5, r6, pc}

0802c038 <__sfp_lock_acquire>:
 802c038:	4801      	ldr	r0, [pc, #4]	; (802c040 <__sfp_lock_acquire+0x8>)
 802c03a:	f000 b8b8 	b.w	802c1ae <__retarget_lock_acquire_recursive>
 802c03e:	bf00      	nop
 802c040:	2401e629 	.word	0x2401e629

0802c044 <__sfp_lock_release>:
 802c044:	4801      	ldr	r0, [pc, #4]	; (802c04c <__sfp_lock_release+0x8>)
 802c046:	f000 b8b3 	b.w	802c1b0 <__retarget_lock_release_recursive>
 802c04a:	bf00      	nop
 802c04c:	2401e629 	.word	0x2401e629

0802c050 <__sinit_lock_acquire>:
 802c050:	4801      	ldr	r0, [pc, #4]	; (802c058 <__sinit_lock_acquire+0x8>)
 802c052:	f000 b8ac 	b.w	802c1ae <__retarget_lock_acquire_recursive>
 802c056:	bf00      	nop
 802c058:	2401e62a 	.word	0x2401e62a

0802c05c <__sinit_lock_release>:
 802c05c:	4801      	ldr	r0, [pc, #4]	; (802c064 <__sinit_lock_release+0x8>)
 802c05e:	f000 b8a7 	b.w	802c1b0 <__retarget_lock_release_recursive>
 802c062:	bf00      	nop
 802c064:	2401e62a 	.word	0x2401e62a

0802c068 <__sinit>:
 802c068:	b510      	push	{r4, lr}
 802c06a:	4604      	mov	r4, r0
 802c06c:	f7ff fff0 	bl	802c050 <__sinit_lock_acquire>
 802c070:	69a3      	ldr	r3, [r4, #24]
 802c072:	b11b      	cbz	r3, 802c07c <__sinit+0x14>
 802c074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c078:	f7ff bff0 	b.w	802c05c <__sinit_lock_release>
 802c07c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802c080:	6523      	str	r3, [r4, #80]	; 0x50
 802c082:	4b13      	ldr	r3, [pc, #76]	; (802c0d0 <__sinit+0x68>)
 802c084:	4a13      	ldr	r2, [pc, #76]	; (802c0d4 <__sinit+0x6c>)
 802c086:	681b      	ldr	r3, [r3, #0]
 802c088:	62a2      	str	r2, [r4, #40]	; 0x28
 802c08a:	42a3      	cmp	r3, r4
 802c08c:	bf04      	itt	eq
 802c08e:	2301      	moveq	r3, #1
 802c090:	61a3      	streq	r3, [r4, #24]
 802c092:	4620      	mov	r0, r4
 802c094:	f000 f820 	bl	802c0d8 <__sfp>
 802c098:	6060      	str	r0, [r4, #4]
 802c09a:	4620      	mov	r0, r4
 802c09c:	f000 f81c 	bl	802c0d8 <__sfp>
 802c0a0:	60a0      	str	r0, [r4, #8]
 802c0a2:	4620      	mov	r0, r4
 802c0a4:	f000 f818 	bl	802c0d8 <__sfp>
 802c0a8:	2200      	movs	r2, #0
 802c0aa:	60e0      	str	r0, [r4, #12]
 802c0ac:	2104      	movs	r1, #4
 802c0ae:	6860      	ldr	r0, [r4, #4]
 802c0b0:	f7ff ff82 	bl	802bfb8 <std>
 802c0b4:	68a0      	ldr	r0, [r4, #8]
 802c0b6:	2201      	movs	r2, #1
 802c0b8:	2109      	movs	r1, #9
 802c0ba:	f7ff ff7d 	bl	802bfb8 <std>
 802c0be:	68e0      	ldr	r0, [r4, #12]
 802c0c0:	2202      	movs	r2, #2
 802c0c2:	2112      	movs	r1, #18
 802c0c4:	f7ff ff78 	bl	802bfb8 <std>
 802c0c8:	2301      	movs	r3, #1
 802c0ca:	61a3      	str	r3, [r4, #24]
 802c0cc:	e7d2      	b.n	802c074 <__sinit+0xc>
 802c0ce:	bf00      	nop
 802c0d0:	0802dbcc 	.word	0x0802dbcc
 802c0d4:	0802c001 	.word	0x0802c001

0802c0d8 <__sfp>:
 802c0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c0da:	4607      	mov	r7, r0
 802c0dc:	f7ff ffac 	bl	802c038 <__sfp_lock_acquire>
 802c0e0:	4b1e      	ldr	r3, [pc, #120]	; (802c15c <__sfp+0x84>)
 802c0e2:	681e      	ldr	r6, [r3, #0]
 802c0e4:	69b3      	ldr	r3, [r6, #24]
 802c0e6:	b913      	cbnz	r3, 802c0ee <__sfp+0x16>
 802c0e8:	4630      	mov	r0, r6
 802c0ea:	f7ff ffbd 	bl	802c068 <__sinit>
 802c0ee:	3648      	adds	r6, #72	; 0x48
 802c0f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802c0f4:	3b01      	subs	r3, #1
 802c0f6:	d503      	bpl.n	802c100 <__sfp+0x28>
 802c0f8:	6833      	ldr	r3, [r6, #0]
 802c0fa:	b30b      	cbz	r3, 802c140 <__sfp+0x68>
 802c0fc:	6836      	ldr	r6, [r6, #0]
 802c0fe:	e7f7      	b.n	802c0f0 <__sfp+0x18>
 802c100:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802c104:	b9d5      	cbnz	r5, 802c13c <__sfp+0x64>
 802c106:	4b16      	ldr	r3, [pc, #88]	; (802c160 <__sfp+0x88>)
 802c108:	60e3      	str	r3, [r4, #12]
 802c10a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802c10e:	6665      	str	r5, [r4, #100]	; 0x64
 802c110:	f000 f84c 	bl	802c1ac <__retarget_lock_init_recursive>
 802c114:	f7ff ff96 	bl	802c044 <__sfp_lock_release>
 802c118:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802c11c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802c120:	6025      	str	r5, [r4, #0]
 802c122:	61a5      	str	r5, [r4, #24]
 802c124:	2208      	movs	r2, #8
 802c126:	4629      	mov	r1, r5
 802c128:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802c12c:	f7fe f9f4 	bl	802a518 <memset>
 802c130:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802c134:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802c138:	4620      	mov	r0, r4
 802c13a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802c13c:	3468      	adds	r4, #104	; 0x68
 802c13e:	e7d9      	b.n	802c0f4 <__sfp+0x1c>
 802c140:	2104      	movs	r1, #4
 802c142:	4638      	mov	r0, r7
 802c144:	f7ff ff62 	bl	802c00c <__sfmoreglue>
 802c148:	4604      	mov	r4, r0
 802c14a:	6030      	str	r0, [r6, #0]
 802c14c:	2800      	cmp	r0, #0
 802c14e:	d1d5      	bne.n	802c0fc <__sfp+0x24>
 802c150:	f7ff ff78 	bl	802c044 <__sfp_lock_release>
 802c154:	230c      	movs	r3, #12
 802c156:	603b      	str	r3, [r7, #0]
 802c158:	e7ee      	b.n	802c138 <__sfp+0x60>
 802c15a:	bf00      	nop
 802c15c:	0802dbcc 	.word	0x0802dbcc
 802c160:	ffff0001 	.word	0xffff0001

0802c164 <_fwalk_reent>:
 802c164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c168:	4606      	mov	r6, r0
 802c16a:	4688      	mov	r8, r1
 802c16c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802c170:	2700      	movs	r7, #0
 802c172:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802c176:	f1b9 0901 	subs.w	r9, r9, #1
 802c17a:	d505      	bpl.n	802c188 <_fwalk_reent+0x24>
 802c17c:	6824      	ldr	r4, [r4, #0]
 802c17e:	2c00      	cmp	r4, #0
 802c180:	d1f7      	bne.n	802c172 <_fwalk_reent+0xe>
 802c182:	4638      	mov	r0, r7
 802c184:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c188:	89ab      	ldrh	r3, [r5, #12]
 802c18a:	2b01      	cmp	r3, #1
 802c18c:	d907      	bls.n	802c19e <_fwalk_reent+0x3a>
 802c18e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802c192:	3301      	adds	r3, #1
 802c194:	d003      	beq.n	802c19e <_fwalk_reent+0x3a>
 802c196:	4629      	mov	r1, r5
 802c198:	4630      	mov	r0, r6
 802c19a:	47c0      	blx	r8
 802c19c:	4307      	orrs	r7, r0
 802c19e:	3568      	adds	r5, #104	; 0x68
 802c1a0:	e7e9      	b.n	802c176 <_fwalk_reent+0x12>
	...

0802c1a4 <_localeconv_r>:
 802c1a4:	4800      	ldr	r0, [pc, #0]	; (802c1a8 <_localeconv_r+0x4>)
 802c1a6:	4770      	bx	lr
 802c1a8:	24000194 	.word	0x24000194

0802c1ac <__retarget_lock_init_recursive>:
 802c1ac:	4770      	bx	lr

0802c1ae <__retarget_lock_acquire_recursive>:
 802c1ae:	4770      	bx	lr

0802c1b0 <__retarget_lock_release_recursive>:
 802c1b0:	4770      	bx	lr

0802c1b2 <__swhatbuf_r>:
 802c1b2:	b570      	push	{r4, r5, r6, lr}
 802c1b4:	460e      	mov	r6, r1
 802c1b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c1ba:	2900      	cmp	r1, #0
 802c1bc:	b096      	sub	sp, #88	; 0x58
 802c1be:	4614      	mov	r4, r2
 802c1c0:	461d      	mov	r5, r3
 802c1c2:	da08      	bge.n	802c1d6 <__swhatbuf_r+0x24>
 802c1c4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802c1c8:	2200      	movs	r2, #0
 802c1ca:	602a      	str	r2, [r5, #0]
 802c1cc:	061a      	lsls	r2, r3, #24
 802c1ce:	d410      	bmi.n	802c1f2 <__swhatbuf_r+0x40>
 802c1d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802c1d4:	e00e      	b.n	802c1f4 <__swhatbuf_r+0x42>
 802c1d6:	466a      	mov	r2, sp
 802c1d8:	f000 fe16 	bl	802ce08 <_fstat_r>
 802c1dc:	2800      	cmp	r0, #0
 802c1de:	dbf1      	blt.n	802c1c4 <__swhatbuf_r+0x12>
 802c1e0:	9a01      	ldr	r2, [sp, #4]
 802c1e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802c1e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802c1ea:	425a      	negs	r2, r3
 802c1ec:	415a      	adcs	r2, r3
 802c1ee:	602a      	str	r2, [r5, #0]
 802c1f0:	e7ee      	b.n	802c1d0 <__swhatbuf_r+0x1e>
 802c1f2:	2340      	movs	r3, #64	; 0x40
 802c1f4:	2000      	movs	r0, #0
 802c1f6:	6023      	str	r3, [r4, #0]
 802c1f8:	b016      	add	sp, #88	; 0x58
 802c1fa:	bd70      	pop	{r4, r5, r6, pc}

0802c1fc <__smakebuf_r>:
 802c1fc:	898b      	ldrh	r3, [r1, #12]
 802c1fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802c200:	079d      	lsls	r5, r3, #30
 802c202:	4606      	mov	r6, r0
 802c204:	460c      	mov	r4, r1
 802c206:	d507      	bpl.n	802c218 <__smakebuf_r+0x1c>
 802c208:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802c20c:	6023      	str	r3, [r4, #0]
 802c20e:	6123      	str	r3, [r4, #16]
 802c210:	2301      	movs	r3, #1
 802c212:	6163      	str	r3, [r4, #20]
 802c214:	b002      	add	sp, #8
 802c216:	bd70      	pop	{r4, r5, r6, pc}
 802c218:	ab01      	add	r3, sp, #4
 802c21a:	466a      	mov	r2, sp
 802c21c:	f7ff ffc9 	bl	802c1b2 <__swhatbuf_r>
 802c220:	9900      	ldr	r1, [sp, #0]
 802c222:	4605      	mov	r5, r0
 802c224:	4630      	mov	r0, r6
 802c226:	f7fe f9eb 	bl	802a600 <_malloc_r>
 802c22a:	b948      	cbnz	r0, 802c240 <__smakebuf_r+0x44>
 802c22c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c230:	059a      	lsls	r2, r3, #22
 802c232:	d4ef      	bmi.n	802c214 <__smakebuf_r+0x18>
 802c234:	f023 0303 	bic.w	r3, r3, #3
 802c238:	f043 0302 	orr.w	r3, r3, #2
 802c23c:	81a3      	strh	r3, [r4, #12]
 802c23e:	e7e3      	b.n	802c208 <__smakebuf_r+0xc>
 802c240:	4b0d      	ldr	r3, [pc, #52]	; (802c278 <__smakebuf_r+0x7c>)
 802c242:	62b3      	str	r3, [r6, #40]	; 0x28
 802c244:	89a3      	ldrh	r3, [r4, #12]
 802c246:	6020      	str	r0, [r4, #0]
 802c248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802c24c:	81a3      	strh	r3, [r4, #12]
 802c24e:	9b00      	ldr	r3, [sp, #0]
 802c250:	6163      	str	r3, [r4, #20]
 802c252:	9b01      	ldr	r3, [sp, #4]
 802c254:	6120      	str	r0, [r4, #16]
 802c256:	b15b      	cbz	r3, 802c270 <__smakebuf_r+0x74>
 802c258:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802c25c:	4630      	mov	r0, r6
 802c25e:	f000 fde5 	bl	802ce2c <_isatty_r>
 802c262:	b128      	cbz	r0, 802c270 <__smakebuf_r+0x74>
 802c264:	89a3      	ldrh	r3, [r4, #12]
 802c266:	f023 0303 	bic.w	r3, r3, #3
 802c26a:	f043 0301 	orr.w	r3, r3, #1
 802c26e:	81a3      	strh	r3, [r4, #12]
 802c270:	89a0      	ldrh	r0, [r4, #12]
 802c272:	4305      	orrs	r5, r0
 802c274:	81a5      	strh	r5, [r4, #12]
 802c276:	e7cd      	b.n	802c214 <__smakebuf_r+0x18>
 802c278:	0802c001 	.word	0x0802c001

0802c27c <__malloc_lock>:
 802c27c:	4801      	ldr	r0, [pc, #4]	; (802c284 <__malloc_lock+0x8>)
 802c27e:	f7ff bf96 	b.w	802c1ae <__retarget_lock_acquire_recursive>
 802c282:	bf00      	nop
 802c284:	2401e628 	.word	0x2401e628

0802c288 <__malloc_unlock>:
 802c288:	4801      	ldr	r0, [pc, #4]	; (802c290 <__malloc_unlock+0x8>)
 802c28a:	f7ff bf91 	b.w	802c1b0 <__retarget_lock_release_recursive>
 802c28e:	bf00      	nop
 802c290:	2401e628 	.word	0x2401e628

0802c294 <_Balloc>:
 802c294:	b570      	push	{r4, r5, r6, lr}
 802c296:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802c298:	4604      	mov	r4, r0
 802c29a:	460d      	mov	r5, r1
 802c29c:	b976      	cbnz	r6, 802c2bc <_Balloc+0x28>
 802c29e:	2010      	movs	r0, #16
 802c2a0:	f7fe f902 	bl	802a4a8 <malloc>
 802c2a4:	4602      	mov	r2, r0
 802c2a6:	6260      	str	r0, [r4, #36]	; 0x24
 802c2a8:	b920      	cbnz	r0, 802c2b4 <_Balloc+0x20>
 802c2aa:	4b18      	ldr	r3, [pc, #96]	; (802c30c <_Balloc+0x78>)
 802c2ac:	4818      	ldr	r0, [pc, #96]	; (802c310 <_Balloc+0x7c>)
 802c2ae:	2166      	movs	r1, #102	; 0x66
 802c2b0:	f000 fd6a 	bl	802cd88 <__assert_func>
 802c2b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802c2b8:	6006      	str	r6, [r0, #0]
 802c2ba:	60c6      	str	r6, [r0, #12]
 802c2bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802c2be:	68f3      	ldr	r3, [r6, #12]
 802c2c0:	b183      	cbz	r3, 802c2e4 <_Balloc+0x50>
 802c2c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802c2c4:	68db      	ldr	r3, [r3, #12]
 802c2c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802c2ca:	b9b8      	cbnz	r0, 802c2fc <_Balloc+0x68>
 802c2cc:	2101      	movs	r1, #1
 802c2ce:	fa01 f605 	lsl.w	r6, r1, r5
 802c2d2:	1d72      	adds	r2, r6, #5
 802c2d4:	0092      	lsls	r2, r2, #2
 802c2d6:	4620      	mov	r0, r4
 802c2d8:	f000 fb60 	bl	802c99c <_calloc_r>
 802c2dc:	b160      	cbz	r0, 802c2f8 <_Balloc+0x64>
 802c2de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802c2e2:	e00e      	b.n	802c302 <_Balloc+0x6e>
 802c2e4:	2221      	movs	r2, #33	; 0x21
 802c2e6:	2104      	movs	r1, #4
 802c2e8:	4620      	mov	r0, r4
 802c2ea:	f000 fb57 	bl	802c99c <_calloc_r>
 802c2ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802c2f0:	60f0      	str	r0, [r6, #12]
 802c2f2:	68db      	ldr	r3, [r3, #12]
 802c2f4:	2b00      	cmp	r3, #0
 802c2f6:	d1e4      	bne.n	802c2c2 <_Balloc+0x2e>
 802c2f8:	2000      	movs	r0, #0
 802c2fa:	bd70      	pop	{r4, r5, r6, pc}
 802c2fc:	6802      	ldr	r2, [r0, #0]
 802c2fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802c302:	2300      	movs	r3, #0
 802c304:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802c308:	e7f7      	b.n	802c2fa <_Balloc+0x66>
 802c30a:	bf00      	nop
 802c30c:	0802dc11 	.word	0x0802dc11
 802c310:	0802dcf4 	.word	0x0802dcf4

0802c314 <_Bfree>:
 802c314:	b570      	push	{r4, r5, r6, lr}
 802c316:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802c318:	4605      	mov	r5, r0
 802c31a:	460c      	mov	r4, r1
 802c31c:	b976      	cbnz	r6, 802c33c <_Bfree+0x28>
 802c31e:	2010      	movs	r0, #16
 802c320:	f7fe f8c2 	bl	802a4a8 <malloc>
 802c324:	4602      	mov	r2, r0
 802c326:	6268      	str	r0, [r5, #36]	; 0x24
 802c328:	b920      	cbnz	r0, 802c334 <_Bfree+0x20>
 802c32a:	4b09      	ldr	r3, [pc, #36]	; (802c350 <_Bfree+0x3c>)
 802c32c:	4809      	ldr	r0, [pc, #36]	; (802c354 <_Bfree+0x40>)
 802c32e:	218a      	movs	r1, #138	; 0x8a
 802c330:	f000 fd2a 	bl	802cd88 <__assert_func>
 802c334:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802c338:	6006      	str	r6, [r0, #0]
 802c33a:	60c6      	str	r6, [r0, #12]
 802c33c:	b13c      	cbz	r4, 802c34e <_Bfree+0x3a>
 802c33e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 802c340:	6862      	ldr	r2, [r4, #4]
 802c342:	68db      	ldr	r3, [r3, #12]
 802c344:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802c348:	6021      	str	r1, [r4, #0]
 802c34a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802c34e:	bd70      	pop	{r4, r5, r6, pc}
 802c350:	0802dc11 	.word	0x0802dc11
 802c354:	0802dcf4 	.word	0x0802dcf4

0802c358 <__multadd>:
 802c358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c35c:	690d      	ldr	r5, [r1, #16]
 802c35e:	4607      	mov	r7, r0
 802c360:	460c      	mov	r4, r1
 802c362:	461e      	mov	r6, r3
 802c364:	f101 0c14 	add.w	ip, r1, #20
 802c368:	2000      	movs	r0, #0
 802c36a:	f8dc 3000 	ldr.w	r3, [ip]
 802c36e:	b299      	uxth	r1, r3
 802c370:	fb02 6101 	mla	r1, r2, r1, r6
 802c374:	0c1e      	lsrs	r6, r3, #16
 802c376:	0c0b      	lsrs	r3, r1, #16
 802c378:	fb02 3306 	mla	r3, r2, r6, r3
 802c37c:	b289      	uxth	r1, r1
 802c37e:	3001      	adds	r0, #1
 802c380:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802c384:	4285      	cmp	r5, r0
 802c386:	f84c 1b04 	str.w	r1, [ip], #4
 802c38a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802c38e:	dcec      	bgt.n	802c36a <__multadd+0x12>
 802c390:	b30e      	cbz	r6, 802c3d6 <__multadd+0x7e>
 802c392:	68a3      	ldr	r3, [r4, #8]
 802c394:	42ab      	cmp	r3, r5
 802c396:	dc19      	bgt.n	802c3cc <__multadd+0x74>
 802c398:	6861      	ldr	r1, [r4, #4]
 802c39a:	4638      	mov	r0, r7
 802c39c:	3101      	adds	r1, #1
 802c39e:	f7ff ff79 	bl	802c294 <_Balloc>
 802c3a2:	4680      	mov	r8, r0
 802c3a4:	b928      	cbnz	r0, 802c3b2 <__multadd+0x5a>
 802c3a6:	4602      	mov	r2, r0
 802c3a8:	4b0c      	ldr	r3, [pc, #48]	; (802c3dc <__multadd+0x84>)
 802c3aa:	480d      	ldr	r0, [pc, #52]	; (802c3e0 <__multadd+0x88>)
 802c3ac:	21b5      	movs	r1, #181	; 0xb5
 802c3ae:	f000 fceb 	bl	802cd88 <__assert_func>
 802c3b2:	6922      	ldr	r2, [r4, #16]
 802c3b4:	3202      	adds	r2, #2
 802c3b6:	f104 010c 	add.w	r1, r4, #12
 802c3ba:	0092      	lsls	r2, r2, #2
 802c3bc:	300c      	adds	r0, #12
 802c3be:	f7fe f883 	bl	802a4c8 <memcpy>
 802c3c2:	4621      	mov	r1, r4
 802c3c4:	4638      	mov	r0, r7
 802c3c6:	f7ff ffa5 	bl	802c314 <_Bfree>
 802c3ca:	4644      	mov	r4, r8
 802c3cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802c3d0:	3501      	adds	r5, #1
 802c3d2:	615e      	str	r6, [r3, #20]
 802c3d4:	6125      	str	r5, [r4, #16]
 802c3d6:	4620      	mov	r0, r4
 802c3d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c3dc:	0802dc83 	.word	0x0802dc83
 802c3e0:	0802dcf4 	.word	0x0802dcf4

0802c3e4 <__hi0bits>:
 802c3e4:	0c03      	lsrs	r3, r0, #16
 802c3e6:	041b      	lsls	r3, r3, #16
 802c3e8:	b9d3      	cbnz	r3, 802c420 <__hi0bits+0x3c>
 802c3ea:	0400      	lsls	r0, r0, #16
 802c3ec:	2310      	movs	r3, #16
 802c3ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802c3f2:	bf04      	itt	eq
 802c3f4:	0200      	lsleq	r0, r0, #8
 802c3f6:	3308      	addeq	r3, #8
 802c3f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802c3fc:	bf04      	itt	eq
 802c3fe:	0100      	lsleq	r0, r0, #4
 802c400:	3304      	addeq	r3, #4
 802c402:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802c406:	bf04      	itt	eq
 802c408:	0080      	lsleq	r0, r0, #2
 802c40a:	3302      	addeq	r3, #2
 802c40c:	2800      	cmp	r0, #0
 802c40e:	db05      	blt.n	802c41c <__hi0bits+0x38>
 802c410:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 802c414:	f103 0301 	add.w	r3, r3, #1
 802c418:	bf08      	it	eq
 802c41a:	2320      	moveq	r3, #32
 802c41c:	4618      	mov	r0, r3
 802c41e:	4770      	bx	lr
 802c420:	2300      	movs	r3, #0
 802c422:	e7e4      	b.n	802c3ee <__hi0bits+0xa>

0802c424 <__lo0bits>:
 802c424:	6803      	ldr	r3, [r0, #0]
 802c426:	f013 0207 	ands.w	r2, r3, #7
 802c42a:	4601      	mov	r1, r0
 802c42c:	d00b      	beq.n	802c446 <__lo0bits+0x22>
 802c42e:	07da      	lsls	r2, r3, #31
 802c430:	d423      	bmi.n	802c47a <__lo0bits+0x56>
 802c432:	0798      	lsls	r0, r3, #30
 802c434:	bf49      	itett	mi
 802c436:	085b      	lsrmi	r3, r3, #1
 802c438:	089b      	lsrpl	r3, r3, #2
 802c43a:	2001      	movmi	r0, #1
 802c43c:	600b      	strmi	r3, [r1, #0]
 802c43e:	bf5c      	itt	pl
 802c440:	600b      	strpl	r3, [r1, #0]
 802c442:	2002      	movpl	r0, #2
 802c444:	4770      	bx	lr
 802c446:	b298      	uxth	r0, r3
 802c448:	b9a8      	cbnz	r0, 802c476 <__lo0bits+0x52>
 802c44a:	0c1b      	lsrs	r3, r3, #16
 802c44c:	2010      	movs	r0, #16
 802c44e:	b2da      	uxtb	r2, r3
 802c450:	b90a      	cbnz	r2, 802c456 <__lo0bits+0x32>
 802c452:	3008      	adds	r0, #8
 802c454:	0a1b      	lsrs	r3, r3, #8
 802c456:	071a      	lsls	r2, r3, #28
 802c458:	bf04      	itt	eq
 802c45a:	091b      	lsreq	r3, r3, #4
 802c45c:	3004      	addeq	r0, #4
 802c45e:	079a      	lsls	r2, r3, #30
 802c460:	bf04      	itt	eq
 802c462:	089b      	lsreq	r3, r3, #2
 802c464:	3002      	addeq	r0, #2
 802c466:	07da      	lsls	r2, r3, #31
 802c468:	d403      	bmi.n	802c472 <__lo0bits+0x4e>
 802c46a:	085b      	lsrs	r3, r3, #1
 802c46c:	f100 0001 	add.w	r0, r0, #1
 802c470:	d005      	beq.n	802c47e <__lo0bits+0x5a>
 802c472:	600b      	str	r3, [r1, #0]
 802c474:	4770      	bx	lr
 802c476:	4610      	mov	r0, r2
 802c478:	e7e9      	b.n	802c44e <__lo0bits+0x2a>
 802c47a:	2000      	movs	r0, #0
 802c47c:	4770      	bx	lr
 802c47e:	2020      	movs	r0, #32
 802c480:	4770      	bx	lr
	...

0802c484 <__i2b>:
 802c484:	b510      	push	{r4, lr}
 802c486:	460c      	mov	r4, r1
 802c488:	2101      	movs	r1, #1
 802c48a:	f7ff ff03 	bl	802c294 <_Balloc>
 802c48e:	4602      	mov	r2, r0
 802c490:	b928      	cbnz	r0, 802c49e <__i2b+0x1a>
 802c492:	4b05      	ldr	r3, [pc, #20]	; (802c4a8 <__i2b+0x24>)
 802c494:	4805      	ldr	r0, [pc, #20]	; (802c4ac <__i2b+0x28>)
 802c496:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802c49a:	f000 fc75 	bl	802cd88 <__assert_func>
 802c49e:	2301      	movs	r3, #1
 802c4a0:	6144      	str	r4, [r0, #20]
 802c4a2:	6103      	str	r3, [r0, #16]
 802c4a4:	bd10      	pop	{r4, pc}
 802c4a6:	bf00      	nop
 802c4a8:	0802dc83 	.word	0x0802dc83
 802c4ac:	0802dcf4 	.word	0x0802dcf4

0802c4b0 <__multiply>:
 802c4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c4b4:	4691      	mov	r9, r2
 802c4b6:	690a      	ldr	r2, [r1, #16]
 802c4b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802c4bc:	429a      	cmp	r2, r3
 802c4be:	bfb8      	it	lt
 802c4c0:	460b      	movlt	r3, r1
 802c4c2:	460c      	mov	r4, r1
 802c4c4:	bfbc      	itt	lt
 802c4c6:	464c      	movlt	r4, r9
 802c4c8:	4699      	movlt	r9, r3
 802c4ca:	6927      	ldr	r7, [r4, #16]
 802c4cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 802c4d0:	68a3      	ldr	r3, [r4, #8]
 802c4d2:	6861      	ldr	r1, [r4, #4]
 802c4d4:	eb07 060a 	add.w	r6, r7, sl
 802c4d8:	42b3      	cmp	r3, r6
 802c4da:	b085      	sub	sp, #20
 802c4dc:	bfb8      	it	lt
 802c4de:	3101      	addlt	r1, #1
 802c4e0:	f7ff fed8 	bl	802c294 <_Balloc>
 802c4e4:	b930      	cbnz	r0, 802c4f4 <__multiply+0x44>
 802c4e6:	4602      	mov	r2, r0
 802c4e8:	4b44      	ldr	r3, [pc, #272]	; (802c5fc <__multiply+0x14c>)
 802c4ea:	4845      	ldr	r0, [pc, #276]	; (802c600 <__multiply+0x150>)
 802c4ec:	f240 115d 	movw	r1, #349	; 0x15d
 802c4f0:	f000 fc4a 	bl	802cd88 <__assert_func>
 802c4f4:	f100 0514 	add.w	r5, r0, #20
 802c4f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802c4fc:	462b      	mov	r3, r5
 802c4fe:	2200      	movs	r2, #0
 802c500:	4543      	cmp	r3, r8
 802c502:	d321      	bcc.n	802c548 <__multiply+0x98>
 802c504:	f104 0314 	add.w	r3, r4, #20
 802c508:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 802c50c:	f109 0314 	add.w	r3, r9, #20
 802c510:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 802c514:	9202      	str	r2, [sp, #8]
 802c516:	1b3a      	subs	r2, r7, r4
 802c518:	3a15      	subs	r2, #21
 802c51a:	f022 0203 	bic.w	r2, r2, #3
 802c51e:	3204      	adds	r2, #4
 802c520:	f104 0115 	add.w	r1, r4, #21
 802c524:	428f      	cmp	r7, r1
 802c526:	bf38      	it	cc
 802c528:	2204      	movcc	r2, #4
 802c52a:	9201      	str	r2, [sp, #4]
 802c52c:	9a02      	ldr	r2, [sp, #8]
 802c52e:	9303      	str	r3, [sp, #12]
 802c530:	429a      	cmp	r2, r3
 802c532:	d80c      	bhi.n	802c54e <__multiply+0x9e>
 802c534:	2e00      	cmp	r6, #0
 802c536:	dd03      	ble.n	802c540 <__multiply+0x90>
 802c538:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802c53c:	2b00      	cmp	r3, #0
 802c53e:	d05a      	beq.n	802c5f6 <__multiply+0x146>
 802c540:	6106      	str	r6, [r0, #16]
 802c542:	b005      	add	sp, #20
 802c544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c548:	f843 2b04 	str.w	r2, [r3], #4
 802c54c:	e7d8      	b.n	802c500 <__multiply+0x50>
 802c54e:	f8b3 a000 	ldrh.w	sl, [r3]
 802c552:	f1ba 0f00 	cmp.w	sl, #0
 802c556:	d024      	beq.n	802c5a2 <__multiply+0xf2>
 802c558:	f104 0e14 	add.w	lr, r4, #20
 802c55c:	46a9      	mov	r9, r5
 802c55e:	f04f 0c00 	mov.w	ip, #0
 802c562:	f85e 2b04 	ldr.w	r2, [lr], #4
 802c566:	f8d9 1000 	ldr.w	r1, [r9]
 802c56a:	fa1f fb82 	uxth.w	fp, r2
 802c56e:	b289      	uxth	r1, r1
 802c570:	fb0a 110b 	mla	r1, sl, fp, r1
 802c574:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 802c578:	f8d9 2000 	ldr.w	r2, [r9]
 802c57c:	4461      	add	r1, ip
 802c57e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802c582:	fb0a c20b 	mla	r2, sl, fp, ip
 802c586:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802c58a:	b289      	uxth	r1, r1
 802c58c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802c590:	4577      	cmp	r7, lr
 802c592:	f849 1b04 	str.w	r1, [r9], #4
 802c596:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802c59a:	d8e2      	bhi.n	802c562 <__multiply+0xb2>
 802c59c:	9a01      	ldr	r2, [sp, #4]
 802c59e:	f845 c002 	str.w	ip, [r5, r2]
 802c5a2:	9a03      	ldr	r2, [sp, #12]
 802c5a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802c5a8:	3304      	adds	r3, #4
 802c5aa:	f1b9 0f00 	cmp.w	r9, #0
 802c5ae:	d020      	beq.n	802c5f2 <__multiply+0x142>
 802c5b0:	6829      	ldr	r1, [r5, #0]
 802c5b2:	f104 0c14 	add.w	ip, r4, #20
 802c5b6:	46ae      	mov	lr, r5
 802c5b8:	f04f 0a00 	mov.w	sl, #0
 802c5bc:	f8bc b000 	ldrh.w	fp, [ip]
 802c5c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 802c5c4:	fb09 220b 	mla	r2, r9, fp, r2
 802c5c8:	4492      	add	sl, r2
 802c5ca:	b289      	uxth	r1, r1
 802c5cc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 802c5d0:	f84e 1b04 	str.w	r1, [lr], #4
 802c5d4:	f85c 2b04 	ldr.w	r2, [ip], #4
 802c5d8:	f8be 1000 	ldrh.w	r1, [lr]
 802c5dc:	0c12      	lsrs	r2, r2, #16
 802c5de:	fb09 1102 	mla	r1, r9, r2, r1
 802c5e2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 802c5e6:	4567      	cmp	r7, ip
 802c5e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802c5ec:	d8e6      	bhi.n	802c5bc <__multiply+0x10c>
 802c5ee:	9a01      	ldr	r2, [sp, #4]
 802c5f0:	50a9      	str	r1, [r5, r2]
 802c5f2:	3504      	adds	r5, #4
 802c5f4:	e79a      	b.n	802c52c <__multiply+0x7c>
 802c5f6:	3e01      	subs	r6, #1
 802c5f8:	e79c      	b.n	802c534 <__multiply+0x84>
 802c5fa:	bf00      	nop
 802c5fc:	0802dc83 	.word	0x0802dc83
 802c600:	0802dcf4 	.word	0x0802dcf4

0802c604 <__pow5mult>:
 802c604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c608:	4615      	mov	r5, r2
 802c60a:	f012 0203 	ands.w	r2, r2, #3
 802c60e:	4606      	mov	r6, r0
 802c610:	460f      	mov	r7, r1
 802c612:	d007      	beq.n	802c624 <__pow5mult+0x20>
 802c614:	4c25      	ldr	r4, [pc, #148]	; (802c6ac <__pow5mult+0xa8>)
 802c616:	3a01      	subs	r2, #1
 802c618:	2300      	movs	r3, #0
 802c61a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802c61e:	f7ff fe9b 	bl	802c358 <__multadd>
 802c622:	4607      	mov	r7, r0
 802c624:	10ad      	asrs	r5, r5, #2
 802c626:	d03d      	beq.n	802c6a4 <__pow5mult+0xa0>
 802c628:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802c62a:	b97c      	cbnz	r4, 802c64c <__pow5mult+0x48>
 802c62c:	2010      	movs	r0, #16
 802c62e:	f7fd ff3b 	bl	802a4a8 <malloc>
 802c632:	4602      	mov	r2, r0
 802c634:	6270      	str	r0, [r6, #36]	; 0x24
 802c636:	b928      	cbnz	r0, 802c644 <__pow5mult+0x40>
 802c638:	4b1d      	ldr	r3, [pc, #116]	; (802c6b0 <__pow5mult+0xac>)
 802c63a:	481e      	ldr	r0, [pc, #120]	; (802c6b4 <__pow5mult+0xb0>)
 802c63c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 802c640:	f000 fba2 	bl	802cd88 <__assert_func>
 802c644:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802c648:	6004      	str	r4, [r0, #0]
 802c64a:	60c4      	str	r4, [r0, #12]
 802c64c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 802c650:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802c654:	b94c      	cbnz	r4, 802c66a <__pow5mult+0x66>
 802c656:	f240 2171 	movw	r1, #625	; 0x271
 802c65a:	4630      	mov	r0, r6
 802c65c:	f7ff ff12 	bl	802c484 <__i2b>
 802c660:	2300      	movs	r3, #0
 802c662:	f8c8 0008 	str.w	r0, [r8, #8]
 802c666:	4604      	mov	r4, r0
 802c668:	6003      	str	r3, [r0, #0]
 802c66a:	f04f 0900 	mov.w	r9, #0
 802c66e:	07eb      	lsls	r3, r5, #31
 802c670:	d50a      	bpl.n	802c688 <__pow5mult+0x84>
 802c672:	4639      	mov	r1, r7
 802c674:	4622      	mov	r2, r4
 802c676:	4630      	mov	r0, r6
 802c678:	f7ff ff1a 	bl	802c4b0 <__multiply>
 802c67c:	4639      	mov	r1, r7
 802c67e:	4680      	mov	r8, r0
 802c680:	4630      	mov	r0, r6
 802c682:	f7ff fe47 	bl	802c314 <_Bfree>
 802c686:	4647      	mov	r7, r8
 802c688:	106d      	asrs	r5, r5, #1
 802c68a:	d00b      	beq.n	802c6a4 <__pow5mult+0xa0>
 802c68c:	6820      	ldr	r0, [r4, #0]
 802c68e:	b938      	cbnz	r0, 802c6a0 <__pow5mult+0x9c>
 802c690:	4622      	mov	r2, r4
 802c692:	4621      	mov	r1, r4
 802c694:	4630      	mov	r0, r6
 802c696:	f7ff ff0b 	bl	802c4b0 <__multiply>
 802c69a:	6020      	str	r0, [r4, #0]
 802c69c:	f8c0 9000 	str.w	r9, [r0]
 802c6a0:	4604      	mov	r4, r0
 802c6a2:	e7e4      	b.n	802c66e <__pow5mult+0x6a>
 802c6a4:	4638      	mov	r0, r7
 802c6a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c6aa:	bf00      	nop
 802c6ac:	0802de40 	.word	0x0802de40
 802c6b0:	0802dc11 	.word	0x0802dc11
 802c6b4:	0802dcf4 	.word	0x0802dcf4

0802c6b8 <__lshift>:
 802c6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c6bc:	460c      	mov	r4, r1
 802c6be:	6849      	ldr	r1, [r1, #4]
 802c6c0:	6923      	ldr	r3, [r4, #16]
 802c6c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802c6c6:	68a3      	ldr	r3, [r4, #8]
 802c6c8:	4607      	mov	r7, r0
 802c6ca:	4691      	mov	r9, r2
 802c6cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802c6d0:	f108 0601 	add.w	r6, r8, #1
 802c6d4:	42b3      	cmp	r3, r6
 802c6d6:	db0b      	blt.n	802c6f0 <__lshift+0x38>
 802c6d8:	4638      	mov	r0, r7
 802c6da:	f7ff fddb 	bl	802c294 <_Balloc>
 802c6de:	4605      	mov	r5, r0
 802c6e0:	b948      	cbnz	r0, 802c6f6 <__lshift+0x3e>
 802c6e2:	4602      	mov	r2, r0
 802c6e4:	4b2a      	ldr	r3, [pc, #168]	; (802c790 <__lshift+0xd8>)
 802c6e6:	482b      	ldr	r0, [pc, #172]	; (802c794 <__lshift+0xdc>)
 802c6e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 802c6ec:	f000 fb4c 	bl	802cd88 <__assert_func>
 802c6f0:	3101      	adds	r1, #1
 802c6f2:	005b      	lsls	r3, r3, #1
 802c6f4:	e7ee      	b.n	802c6d4 <__lshift+0x1c>
 802c6f6:	2300      	movs	r3, #0
 802c6f8:	f100 0114 	add.w	r1, r0, #20
 802c6fc:	f100 0210 	add.w	r2, r0, #16
 802c700:	4618      	mov	r0, r3
 802c702:	4553      	cmp	r3, sl
 802c704:	db37      	blt.n	802c776 <__lshift+0xbe>
 802c706:	6920      	ldr	r0, [r4, #16]
 802c708:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802c70c:	f104 0314 	add.w	r3, r4, #20
 802c710:	f019 091f 	ands.w	r9, r9, #31
 802c714:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802c718:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 802c71c:	d02f      	beq.n	802c77e <__lshift+0xc6>
 802c71e:	f1c9 0e20 	rsb	lr, r9, #32
 802c722:	468a      	mov	sl, r1
 802c724:	f04f 0c00 	mov.w	ip, #0
 802c728:	681a      	ldr	r2, [r3, #0]
 802c72a:	fa02 f209 	lsl.w	r2, r2, r9
 802c72e:	ea42 020c 	orr.w	r2, r2, ip
 802c732:	f84a 2b04 	str.w	r2, [sl], #4
 802c736:	f853 2b04 	ldr.w	r2, [r3], #4
 802c73a:	4298      	cmp	r0, r3
 802c73c:	fa22 fc0e 	lsr.w	ip, r2, lr
 802c740:	d8f2      	bhi.n	802c728 <__lshift+0x70>
 802c742:	1b03      	subs	r3, r0, r4
 802c744:	3b15      	subs	r3, #21
 802c746:	f023 0303 	bic.w	r3, r3, #3
 802c74a:	3304      	adds	r3, #4
 802c74c:	f104 0215 	add.w	r2, r4, #21
 802c750:	4290      	cmp	r0, r2
 802c752:	bf38      	it	cc
 802c754:	2304      	movcc	r3, #4
 802c756:	f841 c003 	str.w	ip, [r1, r3]
 802c75a:	f1bc 0f00 	cmp.w	ip, #0
 802c75e:	d001      	beq.n	802c764 <__lshift+0xac>
 802c760:	f108 0602 	add.w	r6, r8, #2
 802c764:	3e01      	subs	r6, #1
 802c766:	4638      	mov	r0, r7
 802c768:	612e      	str	r6, [r5, #16]
 802c76a:	4621      	mov	r1, r4
 802c76c:	f7ff fdd2 	bl	802c314 <_Bfree>
 802c770:	4628      	mov	r0, r5
 802c772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c776:	f842 0f04 	str.w	r0, [r2, #4]!
 802c77a:	3301      	adds	r3, #1
 802c77c:	e7c1      	b.n	802c702 <__lshift+0x4a>
 802c77e:	3904      	subs	r1, #4
 802c780:	f853 2b04 	ldr.w	r2, [r3], #4
 802c784:	f841 2f04 	str.w	r2, [r1, #4]!
 802c788:	4298      	cmp	r0, r3
 802c78a:	d8f9      	bhi.n	802c780 <__lshift+0xc8>
 802c78c:	e7ea      	b.n	802c764 <__lshift+0xac>
 802c78e:	bf00      	nop
 802c790:	0802dc83 	.word	0x0802dc83
 802c794:	0802dcf4 	.word	0x0802dcf4

0802c798 <__mcmp>:
 802c798:	b530      	push	{r4, r5, lr}
 802c79a:	6902      	ldr	r2, [r0, #16]
 802c79c:	690c      	ldr	r4, [r1, #16]
 802c79e:	1b12      	subs	r2, r2, r4
 802c7a0:	d10e      	bne.n	802c7c0 <__mcmp+0x28>
 802c7a2:	f100 0314 	add.w	r3, r0, #20
 802c7a6:	3114      	adds	r1, #20
 802c7a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802c7ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 802c7b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802c7b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802c7b8:	42a5      	cmp	r5, r4
 802c7ba:	d003      	beq.n	802c7c4 <__mcmp+0x2c>
 802c7bc:	d305      	bcc.n	802c7ca <__mcmp+0x32>
 802c7be:	2201      	movs	r2, #1
 802c7c0:	4610      	mov	r0, r2
 802c7c2:	bd30      	pop	{r4, r5, pc}
 802c7c4:	4283      	cmp	r3, r0
 802c7c6:	d3f3      	bcc.n	802c7b0 <__mcmp+0x18>
 802c7c8:	e7fa      	b.n	802c7c0 <__mcmp+0x28>
 802c7ca:	f04f 32ff 	mov.w	r2, #4294967295
 802c7ce:	e7f7      	b.n	802c7c0 <__mcmp+0x28>

0802c7d0 <__mdiff>:
 802c7d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c7d4:	460c      	mov	r4, r1
 802c7d6:	4606      	mov	r6, r0
 802c7d8:	4611      	mov	r1, r2
 802c7da:	4620      	mov	r0, r4
 802c7dc:	4690      	mov	r8, r2
 802c7de:	f7ff ffdb 	bl	802c798 <__mcmp>
 802c7e2:	1e05      	subs	r5, r0, #0
 802c7e4:	d110      	bne.n	802c808 <__mdiff+0x38>
 802c7e6:	4629      	mov	r1, r5
 802c7e8:	4630      	mov	r0, r6
 802c7ea:	f7ff fd53 	bl	802c294 <_Balloc>
 802c7ee:	b930      	cbnz	r0, 802c7fe <__mdiff+0x2e>
 802c7f0:	4b3a      	ldr	r3, [pc, #232]	; (802c8dc <__mdiff+0x10c>)
 802c7f2:	4602      	mov	r2, r0
 802c7f4:	f240 2132 	movw	r1, #562	; 0x232
 802c7f8:	4839      	ldr	r0, [pc, #228]	; (802c8e0 <__mdiff+0x110>)
 802c7fa:	f000 fac5 	bl	802cd88 <__assert_func>
 802c7fe:	2301      	movs	r3, #1
 802c800:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802c804:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c808:	bfa4      	itt	ge
 802c80a:	4643      	movge	r3, r8
 802c80c:	46a0      	movge	r8, r4
 802c80e:	4630      	mov	r0, r6
 802c810:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802c814:	bfa6      	itte	ge
 802c816:	461c      	movge	r4, r3
 802c818:	2500      	movge	r5, #0
 802c81a:	2501      	movlt	r5, #1
 802c81c:	f7ff fd3a 	bl	802c294 <_Balloc>
 802c820:	b920      	cbnz	r0, 802c82c <__mdiff+0x5c>
 802c822:	4b2e      	ldr	r3, [pc, #184]	; (802c8dc <__mdiff+0x10c>)
 802c824:	4602      	mov	r2, r0
 802c826:	f44f 7110 	mov.w	r1, #576	; 0x240
 802c82a:	e7e5      	b.n	802c7f8 <__mdiff+0x28>
 802c82c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 802c830:	6926      	ldr	r6, [r4, #16]
 802c832:	60c5      	str	r5, [r0, #12]
 802c834:	f104 0914 	add.w	r9, r4, #20
 802c838:	f108 0514 	add.w	r5, r8, #20
 802c83c:	f100 0e14 	add.w	lr, r0, #20
 802c840:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 802c844:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 802c848:	f108 0210 	add.w	r2, r8, #16
 802c84c:	46f2      	mov	sl, lr
 802c84e:	2100      	movs	r1, #0
 802c850:	f859 3b04 	ldr.w	r3, [r9], #4
 802c854:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802c858:	fa1f f883 	uxth.w	r8, r3
 802c85c:	fa11 f18b 	uxtah	r1, r1, fp
 802c860:	0c1b      	lsrs	r3, r3, #16
 802c862:	eba1 0808 	sub.w	r8, r1, r8
 802c866:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802c86a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802c86e:	fa1f f888 	uxth.w	r8, r8
 802c872:	1419      	asrs	r1, r3, #16
 802c874:	454e      	cmp	r6, r9
 802c876:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802c87a:	f84a 3b04 	str.w	r3, [sl], #4
 802c87e:	d8e7      	bhi.n	802c850 <__mdiff+0x80>
 802c880:	1b33      	subs	r3, r6, r4
 802c882:	3b15      	subs	r3, #21
 802c884:	f023 0303 	bic.w	r3, r3, #3
 802c888:	3304      	adds	r3, #4
 802c88a:	3415      	adds	r4, #21
 802c88c:	42a6      	cmp	r6, r4
 802c88e:	bf38      	it	cc
 802c890:	2304      	movcc	r3, #4
 802c892:	441d      	add	r5, r3
 802c894:	4473      	add	r3, lr
 802c896:	469e      	mov	lr, r3
 802c898:	462e      	mov	r6, r5
 802c89a:	4566      	cmp	r6, ip
 802c89c:	d30e      	bcc.n	802c8bc <__mdiff+0xec>
 802c89e:	f10c 0203 	add.w	r2, ip, #3
 802c8a2:	1b52      	subs	r2, r2, r5
 802c8a4:	f022 0203 	bic.w	r2, r2, #3
 802c8a8:	3d03      	subs	r5, #3
 802c8aa:	45ac      	cmp	ip, r5
 802c8ac:	bf38      	it	cc
 802c8ae:	2200      	movcc	r2, #0
 802c8b0:	441a      	add	r2, r3
 802c8b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802c8b6:	b17b      	cbz	r3, 802c8d8 <__mdiff+0x108>
 802c8b8:	6107      	str	r7, [r0, #16]
 802c8ba:	e7a3      	b.n	802c804 <__mdiff+0x34>
 802c8bc:	f856 8b04 	ldr.w	r8, [r6], #4
 802c8c0:	fa11 f288 	uxtah	r2, r1, r8
 802c8c4:	1414      	asrs	r4, r2, #16
 802c8c6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802c8ca:	b292      	uxth	r2, r2
 802c8cc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 802c8d0:	f84e 2b04 	str.w	r2, [lr], #4
 802c8d4:	1421      	asrs	r1, r4, #16
 802c8d6:	e7e0      	b.n	802c89a <__mdiff+0xca>
 802c8d8:	3f01      	subs	r7, #1
 802c8da:	e7ea      	b.n	802c8b2 <__mdiff+0xe2>
 802c8dc:	0802dc83 	.word	0x0802dc83
 802c8e0:	0802dcf4 	.word	0x0802dcf4

0802c8e4 <__d2b>:
 802c8e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802c8e8:	4689      	mov	r9, r1
 802c8ea:	2101      	movs	r1, #1
 802c8ec:	ec57 6b10 	vmov	r6, r7, d0
 802c8f0:	4690      	mov	r8, r2
 802c8f2:	f7ff fccf 	bl	802c294 <_Balloc>
 802c8f6:	4604      	mov	r4, r0
 802c8f8:	b930      	cbnz	r0, 802c908 <__d2b+0x24>
 802c8fa:	4602      	mov	r2, r0
 802c8fc:	4b25      	ldr	r3, [pc, #148]	; (802c994 <__d2b+0xb0>)
 802c8fe:	4826      	ldr	r0, [pc, #152]	; (802c998 <__d2b+0xb4>)
 802c900:	f240 310a 	movw	r1, #778	; 0x30a
 802c904:	f000 fa40 	bl	802cd88 <__assert_func>
 802c908:	f3c7 550a 	ubfx	r5, r7, #20, #11
 802c90c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802c910:	bb35      	cbnz	r5, 802c960 <__d2b+0x7c>
 802c912:	2e00      	cmp	r6, #0
 802c914:	9301      	str	r3, [sp, #4]
 802c916:	d028      	beq.n	802c96a <__d2b+0x86>
 802c918:	4668      	mov	r0, sp
 802c91a:	9600      	str	r6, [sp, #0]
 802c91c:	f7ff fd82 	bl	802c424 <__lo0bits>
 802c920:	9900      	ldr	r1, [sp, #0]
 802c922:	b300      	cbz	r0, 802c966 <__d2b+0x82>
 802c924:	9a01      	ldr	r2, [sp, #4]
 802c926:	f1c0 0320 	rsb	r3, r0, #32
 802c92a:	fa02 f303 	lsl.w	r3, r2, r3
 802c92e:	430b      	orrs	r3, r1
 802c930:	40c2      	lsrs	r2, r0
 802c932:	6163      	str	r3, [r4, #20]
 802c934:	9201      	str	r2, [sp, #4]
 802c936:	9b01      	ldr	r3, [sp, #4]
 802c938:	61a3      	str	r3, [r4, #24]
 802c93a:	2b00      	cmp	r3, #0
 802c93c:	bf14      	ite	ne
 802c93e:	2202      	movne	r2, #2
 802c940:	2201      	moveq	r2, #1
 802c942:	6122      	str	r2, [r4, #16]
 802c944:	b1d5      	cbz	r5, 802c97c <__d2b+0x98>
 802c946:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802c94a:	4405      	add	r5, r0
 802c94c:	f8c9 5000 	str.w	r5, [r9]
 802c950:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802c954:	f8c8 0000 	str.w	r0, [r8]
 802c958:	4620      	mov	r0, r4
 802c95a:	b003      	add	sp, #12
 802c95c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802c960:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802c964:	e7d5      	b.n	802c912 <__d2b+0x2e>
 802c966:	6161      	str	r1, [r4, #20]
 802c968:	e7e5      	b.n	802c936 <__d2b+0x52>
 802c96a:	a801      	add	r0, sp, #4
 802c96c:	f7ff fd5a 	bl	802c424 <__lo0bits>
 802c970:	9b01      	ldr	r3, [sp, #4]
 802c972:	6163      	str	r3, [r4, #20]
 802c974:	2201      	movs	r2, #1
 802c976:	6122      	str	r2, [r4, #16]
 802c978:	3020      	adds	r0, #32
 802c97a:	e7e3      	b.n	802c944 <__d2b+0x60>
 802c97c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802c980:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802c984:	f8c9 0000 	str.w	r0, [r9]
 802c988:	6918      	ldr	r0, [r3, #16]
 802c98a:	f7ff fd2b 	bl	802c3e4 <__hi0bits>
 802c98e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802c992:	e7df      	b.n	802c954 <__d2b+0x70>
 802c994:	0802dc83 	.word	0x0802dc83
 802c998:	0802dcf4 	.word	0x0802dcf4

0802c99c <_calloc_r>:
 802c99c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802c99e:	fba1 2402 	umull	r2, r4, r1, r2
 802c9a2:	b94c      	cbnz	r4, 802c9b8 <_calloc_r+0x1c>
 802c9a4:	4611      	mov	r1, r2
 802c9a6:	9201      	str	r2, [sp, #4]
 802c9a8:	f7fd fe2a 	bl	802a600 <_malloc_r>
 802c9ac:	9a01      	ldr	r2, [sp, #4]
 802c9ae:	4605      	mov	r5, r0
 802c9b0:	b930      	cbnz	r0, 802c9c0 <_calloc_r+0x24>
 802c9b2:	4628      	mov	r0, r5
 802c9b4:	b003      	add	sp, #12
 802c9b6:	bd30      	pop	{r4, r5, pc}
 802c9b8:	220c      	movs	r2, #12
 802c9ba:	6002      	str	r2, [r0, #0]
 802c9bc:	2500      	movs	r5, #0
 802c9be:	e7f8      	b.n	802c9b2 <_calloc_r+0x16>
 802c9c0:	4621      	mov	r1, r4
 802c9c2:	f7fd fda9 	bl	802a518 <memset>
 802c9c6:	e7f4      	b.n	802c9b2 <_calloc_r+0x16>

0802c9c8 <_realloc_r>:
 802c9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c9cc:	4680      	mov	r8, r0
 802c9ce:	4614      	mov	r4, r2
 802c9d0:	460e      	mov	r6, r1
 802c9d2:	b921      	cbnz	r1, 802c9de <_realloc_r+0x16>
 802c9d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802c9d8:	4611      	mov	r1, r2
 802c9da:	f7fd be11 	b.w	802a600 <_malloc_r>
 802c9de:	b92a      	cbnz	r2, 802c9ec <_realloc_r+0x24>
 802c9e0:	f7fd fda2 	bl	802a528 <_free_r>
 802c9e4:	4625      	mov	r5, r4
 802c9e6:	4628      	mov	r0, r5
 802c9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c9ec:	f000 fa52 	bl	802ce94 <_malloc_usable_size_r>
 802c9f0:	4284      	cmp	r4, r0
 802c9f2:	4607      	mov	r7, r0
 802c9f4:	d802      	bhi.n	802c9fc <_realloc_r+0x34>
 802c9f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802c9fa:	d812      	bhi.n	802ca22 <_realloc_r+0x5a>
 802c9fc:	4621      	mov	r1, r4
 802c9fe:	4640      	mov	r0, r8
 802ca00:	f7fd fdfe 	bl	802a600 <_malloc_r>
 802ca04:	4605      	mov	r5, r0
 802ca06:	2800      	cmp	r0, #0
 802ca08:	d0ed      	beq.n	802c9e6 <_realloc_r+0x1e>
 802ca0a:	42bc      	cmp	r4, r7
 802ca0c:	4622      	mov	r2, r4
 802ca0e:	4631      	mov	r1, r6
 802ca10:	bf28      	it	cs
 802ca12:	463a      	movcs	r2, r7
 802ca14:	f7fd fd58 	bl	802a4c8 <memcpy>
 802ca18:	4631      	mov	r1, r6
 802ca1a:	4640      	mov	r0, r8
 802ca1c:	f7fd fd84 	bl	802a528 <_free_r>
 802ca20:	e7e1      	b.n	802c9e6 <_realloc_r+0x1e>
 802ca22:	4635      	mov	r5, r6
 802ca24:	e7df      	b.n	802c9e6 <_realloc_r+0x1e>

0802ca26 <__ssputs_r>:
 802ca26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802ca2a:	688e      	ldr	r6, [r1, #8]
 802ca2c:	429e      	cmp	r6, r3
 802ca2e:	4682      	mov	sl, r0
 802ca30:	460c      	mov	r4, r1
 802ca32:	4690      	mov	r8, r2
 802ca34:	461f      	mov	r7, r3
 802ca36:	d838      	bhi.n	802caaa <__ssputs_r+0x84>
 802ca38:	898a      	ldrh	r2, [r1, #12]
 802ca3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802ca3e:	d032      	beq.n	802caa6 <__ssputs_r+0x80>
 802ca40:	6825      	ldr	r5, [r4, #0]
 802ca42:	6909      	ldr	r1, [r1, #16]
 802ca44:	eba5 0901 	sub.w	r9, r5, r1
 802ca48:	6965      	ldr	r5, [r4, #20]
 802ca4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802ca4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802ca52:	3301      	adds	r3, #1
 802ca54:	444b      	add	r3, r9
 802ca56:	106d      	asrs	r5, r5, #1
 802ca58:	429d      	cmp	r5, r3
 802ca5a:	bf38      	it	cc
 802ca5c:	461d      	movcc	r5, r3
 802ca5e:	0553      	lsls	r3, r2, #21
 802ca60:	d531      	bpl.n	802cac6 <__ssputs_r+0xa0>
 802ca62:	4629      	mov	r1, r5
 802ca64:	f7fd fdcc 	bl	802a600 <_malloc_r>
 802ca68:	4606      	mov	r6, r0
 802ca6a:	b950      	cbnz	r0, 802ca82 <__ssputs_r+0x5c>
 802ca6c:	230c      	movs	r3, #12
 802ca6e:	f8ca 3000 	str.w	r3, [sl]
 802ca72:	89a3      	ldrh	r3, [r4, #12]
 802ca74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802ca78:	81a3      	strh	r3, [r4, #12]
 802ca7a:	f04f 30ff 	mov.w	r0, #4294967295
 802ca7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ca82:	6921      	ldr	r1, [r4, #16]
 802ca84:	464a      	mov	r2, r9
 802ca86:	f7fd fd1f 	bl	802a4c8 <memcpy>
 802ca8a:	89a3      	ldrh	r3, [r4, #12]
 802ca8c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802ca90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802ca94:	81a3      	strh	r3, [r4, #12]
 802ca96:	6126      	str	r6, [r4, #16]
 802ca98:	6165      	str	r5, [r4, #20]
 802ca9a:	444e      	add	r6, r9
 802ca9c:	eba5 0509 	sub.w	r5, r5, r9
 802caa0:	6026      	str	r6, [r4, #0]
 802caa2:	60a5      	str	r5, [r4, #8]
 802caa4:	463e      	mov	r6, r7
 802caa6:	42be      	cmp	r6, r7
 802caa8:	d900      	bls.n	802caac <__ssputs_r+0x86>
 802caaa:	463e      	mov	r6, r7
 802caac:	6820      	ldr	r0, [r4, #0]
 802caae:	4632      	mov	r2, r6
 802cab0:	4641      	mov	r1, r8
 802cab2:	f7fd fd17 	bl	802a4e4 <memmove>
 802cab6:	68a3      	ldr	r3, [r4, #8]
 802cab8:	1b9b      	subs	r3, r3, r6
 802caba:	60a3      	str	r3, [r4, #8]
 802cabc:	6823      	ldr	r3, [r4, #0]
 802cabe:	4433      	add	r3, r6
 802cac0:	6023      	str	r3, [r4, #0]
 802cac2:	2000      	movs	r0, #0
 802cac4:	e7db      	b.n	802ca7e <__ssputs_r+0x58>
 802cac6:	462a      	mov	r2, r5
 802cac8:	f7ff ff7e 	bl	802c9c8 <_realloc_r>
 802cacc:	4606      	mov	r6, r0
 802cace:	2800      	cmp	r0, #0
 802cad0:	d1e1      	bne.n	802ca96 <__ssputs_r+0x70>
 802cad2:	6921      	ldr	r1, [r4, #16]
 802cad4:	4650      	mov	r0, sl
 802cad6:	f7fd fd27 	bl	802a528 <_free_r>
 802cada:	e7c7      	b.n	802ca6c <__ssputs_r+0x46>

0802cadc <_svfiprintf_r>:
 802cadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cae0:	4698      	mov	r8, r3
 802cae2:	898b      	ldrh	r3, [r1, #12]
 802cae4:	061b      	lsls	r3, r3, #24
 802cae6:	b09d      	sub	sp, #116	; 0x74
 802cae8:	4607      	mov	r7, r0
 802caea:	460d      	mov	r5, r1
 802caec:	4614      	mov	r4, r2
 802caee:	d50e      	bpl.n	802cb0e <_svfiprintf_r+0x32>
 802caf0:	690b      	ldr	r3, [r1, #16]
 802caf2:	b963      	cbnz	r3, 802cb0e <_svfiprintf_r+0x32>
 802caf4:	2140      	movs	r1, #64	; 0x40
 802caf6:	f7fd fd83 	bl	802a600 <_malloc_r>
 802cafa:	6028      	str	r0, [r5, #0]
 802cafc:	6128      	str	r0, [r5, #16]
 802cafe:	b920      	cbnz	r0, 802cb0a <_svfiprintf_r+0x2e>
 802cb00:	230c      	movs	r3, #12
 802cb02:	603b      	str	r3, [r7, #0]
 802cb04:	f04f 30ff 	mov.w	r0, #4294967295
 802cb08:	e0d1      	b.n	802ccae <_svfiprintf_r+0x1d2>
 802cb0a:	2340      	movs	r3, #64	; 0x40
 802cb0c:	616b      	str	r3, [r5, #20]
 802cb0e:	2300      	movs	r3, #0
 802cb10:	9309      	str	r3, [sp, #36]	; 0x24
 802cb12:	2320      	movs	r3, #32
 802cb14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802cb18:	f8cd 800c 	str.w	r8, [sp, #12]
 802cb1c:	2330      	movs	r3, #48	; 0x30
 802cb1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802ccc8 <_svfiprintf_r+0x1ec>
 802cb22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802cb26:	f04f 0901 	mov.w	r9, #1
 802cb2a:	4623      	mov	r3, r4
 802cb2c:	469a      	mov	sl, r3
 802cb2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 802cb32:	b10a      	cbz	r2, 802cb38 <_svfiprintf_r+0x5c>
 802cb34:	2a25      	cmp	r2, #37	; 0x25
 802cb36:	d1f9      	bne.n	802cb2c <_svfiprintf_r+0x50>
 802cb38:	ebba 0b04 	subs.w	fp, sl, r4
 802cb3c:	d00b      	beq.n	802cb56 <_svfiprintf_r+0x7a>
 802cb3e:	465b      	mov	r3, fp
 802cb40:	4622      	mov	r2, r4
 802cb42:	4629      	mov	r1, r5
 802cb44:	4638      	mov	r0, r7
 802cb46:	f7ff ff6e 	bl	802ca26 <__ssputs_r>
 802cb4a:	3001      	adds	r0, #1
 802cb4c:	f000 80aa 	beq.w	802cca4 <_svfiprintf_r+0x1c8>
 802cb50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802cb52:	445a      	add	r2, fp
 802cb54:	9209      	str	r2, [sp, #36]	; 0x24
 802cb56:	f89a 3000 	ldrb.w	r3, [sl]
 802cb5a:	2b00      	cmp	r3, #0
 802cb5c:	f000 80a2 	beq.w	802cca4 <_svfiprintf_r+0x1c8>
 802cb60:	2300      	movs	r3, #0
 802cb62:	f04f 32ff 	mov.w	r2, #4294967295
 802cb66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802cb6a:	f10a 0a01 	add.w	sl, sl, #1
 802cb6e:	9304      	str	r3, [sp, #16]
 802cb70:	9307      	str	r3, [sp, #28]
 802cb72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802cb76:	931a      	str	r3, [sp, #104]	; 0x68
 802cb78:	4654      	mov	r4, sl
 802cb7a:	2205      	movs	r2, #5
 802cb7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 802cb80:	4851      	ldr	r0, [pc, #324]	; (802ccc8 <_svfiprintf_r+0x1ec>)
 802cb82:	f7d3 fbb5 	bl	80002f0 <memchr>
 802cb86:	9a04      	ldr	r2, [sp, #16]
 802cb88:	b9d8      	cbnz	r0, 802cbc2 <_svfiprintf_r+0xe6>
 802cb8a:	06d0      	lsls	r0, r2, #27
 802cb8c:	bf44      	itt	mi
 802cb8e:	2320      	movmi	r3, #32
 802cb90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802cb94:	0711      	lsls	r1, r2, #28
 802cb96:	bf44      	itt	mi
 802cb98:	232b      	movmi	r3, #43	; 0x2b
 802cb9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802cb9e:	f89a 3000 	ldrb.w	r3, [sl]
 802cba2:	2b2a      	cmp	r3, #42	; 0x2a
 802cba4:	d015      	beq.n	802cbd2 <_svfiprintf_r+0xf6>
 802cba6:	9a07      	ldr	r2, [sp, #28]
 802cba8:	4654      	mov	r4, sl
 802cbaa:	2000      	movs	r0, #0
 802cbac:	f04f 0c0a 	mov.w	ip, #10
 802cbb0:	4621      	mov	r1, r4
 802cbb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 802cbb6:	3b30      	subs	r3, #48	; 0x30
 802cbb8:	2b09      	cmp	r3, #9
 802cbba:	d94e      	bls.n	802cc5a <_svfiprintf_r+0x17e>
 802cbbc:	b1b0      	cbz	r0, 802cbec <_svfiprintf_r+0x110>
 802cbbe:	9207      	str	r2, [sp, #28]
 802cbc0:	e014      	b.n	802cbec <_svfiprintf_r+0x110>
 802cbc2:	eba0 0308 	sub.w	r3, r0, r8
 802cbc6:	fa09 f303 	lsl.w	r3, r9, r3
 802cbca:	4313      	orrs	r3, r2
 802cbcc:	9304      	str	r3, [sp, #16]
 802cbce:	46a2      	mov	sl, r4
 802cbd0:	e7d2      	b.n	802cb78 <_svfiprintf_r+0x9c>
 802cbd2:	9b03      	ldr	r3, [sp, #12]
 802cbd4:	1d19      	adds	r1, r3, #4
 802cbd6:	681b      	ldr	r3, [r3, #0]
 802cbd8:	9103      	str	r1, [sp, #12]
 802cbda:	2b00      	cmp	r3, #0
 802cbdc:	bfbb      	ittet	lt
 802cbde:	425b      	neglt	r3, r3
 802cbe0:	f042 0202 	orrlt.w	r2, r2, #2
 802cbe4:	9307      	strge	r3, [sp, #28]
 802cbe6:	9307      	strlt	r3, [sp, #28]
 802cbe8:	bfb8      	it	lt
 802cbea:	9204      	strlt	r2, [sp, #16]
 802cbec:	7823      	ldrb	r3, [r4, #0]
 802cbee:	2b2e      	cmp	r3, #46	; 0x2e
 802cbf0:	d10c      	bne.n	802cc0c <_svfiprintf_r+0x130>
 802cbf2:	7863      	ldrb	r3, [r4, #1]
 802cbf4:	2b2a      	cmp	r3, #42	; 0x2a
 802cbf6:	d135      	bne.n	802cc64 <_svfiprintf_r+0x188>
 802cbf8:	9b03      	ldr	r3, [sp, #12]
 802cbfa:	1d1a      	adds	r2, r3, #4
 802cbfc:	681b      	ldr	r3, [r3, #0]
 802cbfe:	9203      	str	r2, [sp, #12]
 802cc00:	2b00      	cmp	r3, #0
 802cc02:	bfb8      	it	lt
 802cc04:	f04f 33ff 	movlt.w	r3, #4294967295
 802cc08:	3402      	adds	r4, #2
 802cc0a:	9305      	str	r3, [sp, #20]
 802cc0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802ccd8 <_svfiprintf_r+0x1fc>
 802cc10:	7821      	ldrb	r1, [r4, #0]
 802cc12:	2203      	movs	r2, #3
 802cc14:	4650      	mov	r0, sl
 802cc16:	f7d3 fb6b 	bl	80002f0 <memchr>
 802cc1a:	b140      	cbz	r0, 802cc2e <_svfiprintf_r+0x152>
 802cc1c:	2340      	movs	r3, #64	; 0x40
 802cc1e:	eba0 000a 	sub.w	r0, r0, sl
 802cc22:	fa03 f000 	lsl.w	r0, r3, r0
 802cc26:	9b04      	ldr	r3, [sp, #16]
 802cc28:	4303      	orrs	r3, r0
 802cc2a:	3401      	adds	r4, #1
 802cc2c:	9304      	str	r3, [sp, #16]
 802cc2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 802cc32:	4826      	ldr	r0, [pc, #152]	; (802cccc <_svfiprintf_r+0x1f0>)
 802cc34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802cc38:	2206      	movs	r2, #6
 802cc3a:	f7d3 fb59 	bl	80002f0 <memchr>
 802cc3e:	2800      	cmp	r0, #0
 802cc40:	d038      	beq.n	802ccb4 <_svfiprintf_r+0x1d8>
 802cc42:	4b23      	ldr	r3, [pc, #140]	; (802ccd0 <_svfiprintf_r+0x1f4>)
 802cc44:	bb1b      	cbnz	r3, 802cc8e <_svfiprintf_r+0x1b2>
 802cc46:	9b03      	ldr	r3, [sp, #12]
 802cc48:	3307      	adds	r3, #7
 802cc4a:	f023 0307 	bic.w	r3, r3, #7
 802cc4e:	3308      	adds	r3, #8
 802cc50:	9303      	str	r3, [sp, #12]
 802cc52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802cc54:	4433      	add	r3, r6
 802cc56:	9309      	str	r3, [sp, #36]	; 0x24
 802cc58:	e767      	b.n	802cb2a <_svfiprintf_r+0x4e>
 802cc5a:	fb0c 3202 	mla	r2, ip, r2, r3
 802cc5e:	460c      	mov	r4, r1
 802cc60:	2001      	movs	r0, #1
 802cc62:	e7a5      	b.n	802cbb0 <_svfiprintf_r+0xd4>
 802cc64:	2300      	movs	r3, #0
 802cc66:	3401      	adds	r4, #1
 802cc68:	9305      	str	r3, [sp, #20]
 802cc6a:	4619      	mov	r1, r3
 802cc6c:	f04f 0c0a 	mov.w	ip, #10
 802cc70:	4620      	mov	r0, r4
 802cc72:	f810 2b01 	ldrb.w	r2, [r0], #1
 802cc76:	3a30      	subs	r2, #48	; 0x30
 802cc78:	2a09      	cmp	r2, #9
 802cc7a:	d903      	bls.n	802cc84 <_svfiprintf_r+0x1a8>
 802cc7c:	2b00      	cmp	r3, #0
 802cc7e:	d0c5      	beq.n	802cc0c <_svfiprintf_r+0x130>
 802cc80:	9105      	str	r1, [sp, #20]
 802cc82:	e7c3      	b.n	802cc0c <_svfiprintf_r+0x130>
 802cc84:	fb0c 2101 	mla	r1, ip, r1, r2
 802cc88:	4604      	mov	r4, r0
 802cc8a:	2301      	movs	r3, #1
 802cc8c:	e7f0      	b.n	802cc70 <_svfiprintf_r+0x194>
 802cc8e:	ab03      	add	r3, sp, #12
 802cc90:	9300      	str	r3, [sp, #0]
 802cc92:	462a      	mov	r2, r5
 802cc94:	4b0f      	ldr	r3, [pc, #60]	; (802ccd4 <_svfiprintf_r+0x1f8>)
 802cc96:	a904      	add	r1, sp, #16
 802cc98:	4638      	mov	r0, r7
 802cc9a:	f7fd fdb5 	bl	802a808 <_printf_float>
 802cc9e:	1c42      	adds	r2, r0, #1
 802cca0:	4606      	mov	r6, r0
 802cca2:	d1d6      	bne.n	802cc52 <_svfiprintf_r+0x176>
 802cca4:	89ab      	ldrh	r3, [r5, #12]
 802cca6:	065b      	lsls	r3, r3, #25
 802cca8:	f53f af2c 	bmi.w	802cb04 <_svfiprintf_r+0x28>
 802ccac:	9809      	ldr	r0, [sp, #36]	; 0x24
 802ccae:	b01d      	add	sp, #116	; 0x74
 802ccb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ccb4:	ab03      	add	r3, sp, #12
 802ccb6:	9300      	str	r3, [sp, #0]
 802ccb8:	462a      	mov	r2, r5
 802ccba:	4b06      	ldr	r3, [pc, #24]	; (802ccd4 <_svfiprintf_r+0x1f8>)
 802ccbc:	a904      	add	r1, sp, #16
 802ccbe:	4638      	mov	r0, r7
 802ccc0:	f7fe f82e 	bl	802ad20 <_printf_i>
 802ccc4:	e7eb      	b.n	802cc9e <_svfiprintf_r+0x1c2>
 802ccc6:	bf00      	nop
 802ccc8:	0802de4c 	.word	0x0802de4c
 802cccc:	0802de56 	.word	0x0802de56
 802ccd0:	0802a809 	.word	0x0802a809
 802ccd4:	0802ca27 	.word	0x0802ca27
 802ccd8:	0802de52 	.word	0x0802de52

0802ccdc <__sread>:
 802ccdc:	b510      	push	{r4, lr}
 802ccde:	460c      	mov	r4, r1
 802cce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802cce4:	f000 fa38 	bl	802d158 <_read_r>
 802cce8:	2800      	cmp	r0, #0
 802ccea:	bfab      	itete	ge
 802ccec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802ccee:	89a3      	ldrhlt	r3, [r4, #12]
 802ccf0:	181b      	addge	r3, r3, r0
 802ccf2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802ccf6:	bfac      	ite	ge
 802ccf8:	6563      	strge	r3, [r4, #84]	; 0x54
 802ccfa:	81a3      	strhlt	r3, [r4, #12]
 802ccfc:	bd10      	pop	{r4, pc}

0802ccfe <__swrite>:
 802ccfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802cd02:	461f      	mov	r7, r3
 802cd04:	898b      	ldrh	r3, [r1, #12]
 802cd06:	05db      	lsls	r3, r3, #23
 802cd08:	4605      	mov	r5, r0
 802cd0a:	460c      	mov	r4, r1
 802cd0c:	4616      	mov	r6, r2
 802cd0e:	d505      	bpl.n	802cd1c <__swrite+0x1e>
 802cd10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802cd14:	2302      	movs	r3, #2
 802cd16:	2200      	movs	r2, #0
 802cd18:	f000 f898 	bl	802ce4c <_lseek_r>
 802cd1c:	89a3      	ldrh	r3, [r4, #12]
 802cd1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802cd22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802cd26:	81a3      	strh	r3, [r4, #12]
 802cd28:	4632      	mov	r2, r6
 802cd2a:	463b      	mov	r3, r7
 802cd2c:	4628      	mov	r0, r5
 802cd2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802cd32:	f000 b817 	b.w	802cd64 <_write_r>

0802cd36 <__sseek>:
 802cd36:	b510      	push	{r4, lr}
 802cd38:	460c      	mov	r4, r1
 802cd3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802cd3e:	f000 f885 	bl	802ce4c <_lseek_r>
 802cd42:	1c43      	adds	r3, r0, #1
 802cd44:	89a3      	ldrh	r3, [r4, #12]
 802cd46:	bf15      	itete	ne
 802cd48:	6560      	strne	r0, [r4, #84]	; 0x54
 802cd4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802cd4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802cd52:	81a3      	strheq	r3, [r4, #12]
 802cd54:	bf18      	it	ne
 802cd56:	81a3      	strhne	r3, [r4, #12]
 802cd58:	bd10      	pop	{r4, pc}

0802cd5a <__sclose>:
 802cd5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802cd5e:	f000 b831 	b.w	802cdc4 <_close_r>
	...

0802cd64 <_write_r>:
 802cd64:	b538      	push	{r3, r4, r5, lr}
 802cd66:	4d07      	ldr	r5, [pc, #28]	; (802cd84 <_write_r+0x20>)
 802cd68:	4604      	mov	r4, r0
 802cd6a:	4608      	mov	r0, r1
 802cd6c:	4611      	mov	r1, r2
 802cd6e:	2200      	movs	r2, #0
 802cd70:	602a      	str	r2, [r5, #0]
 802cd72:	461a      	mov	r2, r3
 802cd74:	f7d4 f85f 	bl	8000e36 <_write>
 802cd78:	1c43      	adds	r3, r0, #1
 802cd7a:	d102      	bne.n	802cd82 <_write_r+0x1e>
 802cd7c:	682b      	ldr	r3, [r5, #0]
 802cd7e:	b103      	cbz	r3, 802cd82 <_write_r+0x1e>
 802cd80:	6023      	str	r3, [r4, #0]
 802cd82:	bd38      	pop	{r3, r4, r5, pc}
 802cd84:	2401e62c 	.word	0x2401e62c

0802cd88 <__assert_func>:
 802cd88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802cd8a:	4614      	mov	r4, r2
 802cd8c:	461a      	mov	r2, r3
 802cd8e:	4b09      	ldr	r3, [pc, #36]	; (802cdb4 <__assert_func+0x2c>)
 802cd90:	681b      	ldr	r3, [r3, #0]
 802cd92:	4605      	mov	r5, r0
 802cd94:	68d8      	ldr	r0, [r3, #12]
 802cd96:	b14c      	cbz	r4, 802cdac <__assert_func+0x24>
 802cd98:	4b07      	ldr	r3, [pc, #28]	; (802cdb8 <__assert_func+0x30>)
 802cd9a:	9100      	str	r1, [sp, #0]
 802cd9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802cda0:	4906      	ldr	r1, [pc, #24]	; (802cdbc <__assert_func+0x34>)
 802cda2:	462b      	mov	r3, r5
 802cda4:	f000 f81e 	bl	802cde4 <fiprintf>
 802cda8:	f000 f9f5 	bl	802d196 <abort>
 802cdac:	4b04      	ldr	r3, [pc, #16]	; (802cdc0 <__assert_func+0x38>)
 802cdae:	461c      	mov	r4, r3
 802cdb0:	e7f3      	b.n	802cd9a <__assert_func+0x12>
 802cdb2:	bf00      	nop
 802cdb4:	24000040 	.word	0x24000040
 802cdb8:	0802de5d 	.word	0x0802de5d
 802cdbc:	0802de6a 	.word	0x0802de6a
 802cdc0:	0802de98 	.word	0x0802de98

0802cdc4 <_close_r>:
 802cdc4:	b538      	push	{r3, r4, r5, lr}
 802cdc6:	4d06      	ldr	r5, [pc, #24]	; (802cde0 <_close_r+0x1c>)
 802cdc8:	2300      	movs	r3, #0
 802cdca:	4604      	mov	r4, r0
 802cdcc:	4608      	mov	r0, r1
 802cdce:	602b      	str	r3, [r5, #0]
 802cdd0:	f7d4 f84d 	bl	8000e6e <_close>
 802cdd4:	1c43      	adds	r3, r0, #1
 802cdd6:	d102      	bne.n	802cdde <_close_r+0x1a>
 802cdd8:	682b      	ldr	r3, [r5, #0]
 802cdda:	b103      	cbz	r3, 802cdde <_close_r+0x1a>
 802cddc:	6023      	str	r3, [r4, #0]
 802cdde:	bd38      	pop	{r3, r4, r5, pc}
 802cde0:	2401e62c 	.word	0x2401e62c

0802cde4 <fiprintf>:
 802cde4:	b40e      	push	{r1, r2, r3}
 802cde6:	b503      	push	{r0, r1, lr}
 802cde8:	4601      	mov	r1, r0
 802cdea:	ab03      	add	r3, sp, #12
 802cdec:	4805      	ldr	r0, [pc, #20]	; (802ce04 <fiprintf+0x20>)
 802cdee:	f853 2b04 	ldr.w	r2, [r3], #4
 802cdf2:	6800      	ldr	r0, [r0, #0]
 802cdf4:	9301      	str	r3, [sp, #4]
 802cdf6:	f000 f87f 	bl	802cef8 <_vfiprintf_r>
 802cdfa:	b002      	add	sp, #8
 802cdfc:	f85d eb04 	ldr.w	lr, [sp], #4
 802ce00:	b003      	add	sp, #12
 802ce02:	4770      	bx	lr
 802ce04:	24000040 	.word	0x24000040

0802ce08 <_fstat_r>:
 802ce08:	b538      	push	{r3, r4, r5, lr}
 802ce0a:	4d07      	ldr	r5, [pc, #28]	; (802ce28 <_fstat_r+0x20>)
 802ce0c:	2300      	movs	r3, #0
 802ce0e:	4604      	mov	r4, r0
 802ce10:	4608      	mov	r0, r1
 802ce12:	4611      	mov	r1, r2
 802ce14:	602b      	str	r3, [r5, #0]
 802ce16:	f7d4 f836 	bl	8000e86 <_fstat>
 802ce1a:	1c43      	adds	r3, r0, #1
 802ce1c:	d102      	bne.n	802ce24 <_fstat_r+0x1c>
 802ce1e:	682b      	ldr	r3, [r5, #0]
 802ce20:	b103      	cbz	r3, 802ce24 <_fstat_r+0x1c>
 802ce22:	6023      	str	r3, [r4, #0]
 802ce24:	bd38      	pop	{r3, r4, r5, pc}
 802ce26:	bf00      	nop
 802ce28:	2401e62c 	.word	0x2401e62c

0802ce2c <_isatty_r>:
 802ce2c:	b538      	push	{r3, r4, r5, lr}
 802ce2e:	4d06      	ldr	r5, [pc, #24]	; (802ce48 <_isatty_r+0x1c>)
 802ce30:	2300      	movs	r3, #0
 802ce32:	4604      	mov	r4, r0
 802ce34:	4608      	mov	r0, r1
 802ce36:	602b      	str	r3, [r5, #0]
 802ce38:	f7d4 f835 	bl	8000ea6 <_isatty>
 802ce3c:	1c43      	adds	r3, r0, #1
 802ce3e:	d102      	bne.n	802ce46 <_isatty_r+0x1a>
 802ce40:	682b      	ldr	r3, [r5, #0]
 802ce42:	b103      	cbz	r3, 802ce46 <_isatty_r+0x1a>
 802ce44:	6023      	str	r3, [r4, #0]
 802ce46:	bd38      	pop	{r3, r4, r5, pc}
 802ce48:	2401e62c 	.word	0x2401e62c

0802ce4c <_lseek_r>:
 802ce4c:	b538      	push	{r3, r4, r5, lr}
 802ce4e:	4d07      	ldr	r5, [pc, #28]	; (802ce6c <_lseek_r+0x20>)
 802ce50:	4604      	mov	r4, r0
 802ce52:	4608      	mov	r0, r1
 802ce54:	4611      	mov	r1, r2
 802ce56:	2200      	movs	r2, #0
 802ce58:	602a      	str	r2, [r5, #0]
 802ce5a:	461a      	mov	r2, r3
 802ce5c:	f7d4 f82e 	bl	8000ebc <_lseek>
 802ce60:	1c43      	adds	r3, r0, #1
 802ce62:	d102      	bne.n	802ce6a <_lseek_r+0x1e>
 802ce64:	682b      	ldr	r3, [r5, #0]
 802ce66:	b103      	cbz	r3, 802ce6a <_lseek_r+0x1e>
 802ce68:	6023      	str	r3, [r4, #0]
 802ce6a:	bd38      	pop	{r3, r4, r5, pc}
 802ce6c:	2401e62c 	.word	0x2401e62c

0802ce70 <__ascii_mbtowc>:
 802ce70:	b082      	sub	sp, #8
 802ce72:	b901      	cbnz	r1, 802ce76 <__ascii_mbtowc+0x6>
 802ce74:	a901      	add	r1, sp, #4
 802ce76:	b142      	cbz	r2, 802ce8a <__ascii_mbtowc+0x1a>
 802ce78:	b14b      	cbz	r3, 802ce8e <__ascii_mbtowc+0x1e>
 802ce7a:	7813      	ldrb	r3, [r2, #0]
 802ce7c:	600b      	str	r3, [r1, #0]
 802ce7e:	7812      	ldrb	r2, [r2, #0]
 802ce80:	1e10      	subs	r0, r2, #0
 802ce82:	bf18      	it	ne
 802ce84:	2001      	movne	r0, #1
 802ce86:	b002      	add	sp, #8
 802ce88:	4770      	bx	lr
 802ce8a:	4610      	mov	r0, r2
 802ce8c:	e7fb      	b.n	802ce86 <__ascii_mbtowc+0x16>
 802ce8e:	f06f 0001 	mvn.w	r0, #1
 802ce92:	e7f8      	b.n	802ce86 <__ascii_mbtowc+0x16>

0802ce94 <_malloc_usable_size_r>:
 802ce94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802ce98:	1f18      	subs	r0, r3, #4
 802ce9a:	2b00      	cmp	r3, #0
 802ce9c:	bfbc      	itt	lt
 802ce9e:	580b      	ldrlt	r3, [r1, r0]
 802cea0:	18c0      	addlt	r0, r0, r3
 802cea2:	4770      	bx	lr

0802cea4 <__sfputc_r>:
 802cea4:	6893      	ldr	r3, [r2, #8]
 802cea6:	3b01      	subs	r3, #1
 802cea8:	2b00      	cmp	r3, #0
 802ceaa:	b410      	push	{r4}
 802ceac:	6093      	str	r3, [r2, #8]
 802ceae:	da08      	bge.n	802cec2 <__sfputc_r+0x1e>
 802ceb0:	6994      	ldr	r4, [r2, #24]
 802ceb2:	42a3      	cmp	r3, r4
 802ceb4:	db01      	blt.n	802ceba <__sfputc_r+0x16>
 802ceb6:	290a      	cmp	r1, #10
 802ceb8:	d103      	bne.n	802cec2 <__sfputc_r+0x1e>
 802ceba:	f85d 4b04 	ldr.w	r4, [sp], #4
 802cebe:	f7fe b8ff 	b.w	802b0c0 <__swbuf_r>
 802cec2:	6813      	ldr	r3, [r2, #0]
 802cec4:	1c58      	adds	r0, r3, #1
 802cec6:	6010      	str	r0, [r2, #0]
 802cec8:	7019      	strb	r1, [r3, #0]
 802ceca:	4608      	mov	r0, r1
 802cecc:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ced0:	4770      	bx	lr

0802ced2 <__sfputs_r>:
 802ced2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ced4:	4606      	mov	r6, r0
 802ced6:	460f      	mov	r7, r1
 802ced8:	4614      	mov	r4, r2
 802ceda:	18d5      	adds	r5, r2, r3
 802cedc:	42ac      	cmp	r4, r5
 802cede:	d101      	bne.n	802cee4 <__sfputs_r+0x12>
 802cee0:	2000      	movs	r0, #0
 802cee2:	e007      	b.n	802cef4 <__sfputs_r+0x22>
 802cee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 802cee8:	463a      	mov	r2, r7
 802ceea:	4630      	mov	r0, r6
 802ceec:	f7ff ffda 	bl	802cea4 <__sfputc_r>
 802cef0:	1c43      	adds	r3, r0, #1
 802cef2:	d1f3      	bne.n	802cedc <__sfputs_r+0xa>
 802cef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802cef8 <_vfiprintf_r>:
 802cef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cefc:	460d      	mov	r5, r1
 802cefe:	b09d      	sub	sp, #116	; 0x74
 802cf00:	4614      	mov	r4, r2
 802cf02:	4698      	mov	r8, r3
 802cf04:	4606      	mov	r6, r0
 802cf06:	b118      	cbz	r0, 802cf10 <_vfiprintf_r+0x18>
 802cf08:	6983      	ldr	r3, [r0, #24]
 802cf0a:	b90b      	cbnz	r3, 802cf10 <_vfiprintf_r+0x18>
 802cf0c:	f7ff f8ac 	bl	802c068 <__sinit>
 802cf10:	4b89      	ldr	r3, [pc, #548]	; (802d138 <_vfiprintf_r+0x240>)
 802cf12:	429d      	cmp	r5, r3
 802cf14:	d11b      	bne.n	802cf4e <_vfiprintf_r+0x56>
 802cf16:	6875      	ldr	r5, [r6, #4]
 802cf18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802cf1a:	07d9      	lsls	r1, r3, #31
 802cf1c:	d405      	bmi.n	802cf2a <_vfiprintf_r+0x32>
 802cf1e:	89ab      	ldrh	r3, [r5, #12]
 802cf20:	059a      	lsls	r2, r3, #22
 802cf22:	d402      	bmi.n	802cf2a <_vfiprintf_r+0x32>
 802cf24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802cf26:	f7ff f942 	bl	802c1ae <__retarget_lock_acquire_recursive>
 802cf2a:	89ab      	ldrh	r3, [r5, #12]
 802cf2c:	071b      	lsls	r3, r3, #28
 802cf2e:	d501      	bpl.n	802cf34 <_vfiprintf_r+0x3c>
 802cf30:	692b      	ldr	r3, [r5, #16]
 802cf32:	b9eb      	cbnz	r3, 802cf70 <_vfiprintf_r+0x78>
 802cf34:	4629      	mov	r1, r5
 802cf36:	4630      	mov	r0, r6
 802cf38:	f7fe f914 	bl	802b164 <__swsetup_r>
 802cf3c:	b1c0      	cbz	r0, 802cf70 <_vfiprintf_r+0x78>
 802cf3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802cf40:	07dc      	lsls	r4, r3, #31
 802cf42:	d50e      	bpl.n	802cf62 <_vfiprintf_r+0x6a>
 802cf44:	f04f 30ff 	mov.w	r0, #4294967295
 802cf48:	b01d      	add	sp, #116	; 0x74
 802cf4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cf4e:	4b7b      	ldr	r3, [pc, #492]	; (802d13c <_vfiprintf_r+0x244>)
 802cf50:	429d      	cmp	r5, r3
 802cf52:	d101      	bne.n	802cf58 <_vfiprintf_r+0x60>
 802cf54:	68b5      	ldr	r5, [r6, #8]
 802cf56:	e7df      	b.n	802cf18 <_vfiprintf_r+0x20>
 802cf58:	4b79      	ldr	r3, [pc, #484]	; (802d140 <_vfiprintf_r+0x248>)
 802cf5a:	429d      	cmp	r5, r3
 802cf5c:	bf08      	it	eq
 802cf5e:	68f5      	ldreq	r5, [r6, #12]
 802cf60:	e7da      	b.n	802cf18 <_vfiprintf_r+0x20>
 802cf62:	89ab      	ldrh	r3, [r5, #12]
 802cf64:	0598      	lsls	r0, r3, #22
 802cf66:	d4ed      	bmi.n	802cf44 <_vfiprintf_r+0x4c>
 802cf68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802cf6a:	f7ff f921 	bl	802c1b0 <__retarget_lock_release_recursive>
 802cf6e:	e7e9      	b.n	802cf44 <_vfiprintf_r+0x4c>
 802cf70:	2300      	movs	r3, #0
 802cf72:	9309      	str	r3, [sp, #36]	; 0x24
 802cf74:	2320      	movs	r3, #32
 802cf76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802cf7a:	f8cd 800c 	str.w	r8, [sp, #12]
 802cf7e:	2330      	movs	r3, #48	; 0x30
 802cf80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802d144 <_vfiprintf_r+0x24c>
 802cf84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802cf88:	f04f 0901 	mov.w	r9, #1
 802cf8c:	4623      	mov	r3, r4
 802cf8e:	469a      	mov	sl, r3
 802cf90:	f813 2b01 	ldrb.w	r2, [r3], #1
 802cf94:	b10a      	cbz	r2, 802cf9a <_vfiprintf_r+0xa2>
 802cf96:	2a25      	cmp	r2, #37	; 0x25
 802cf98:	d1f9      	bne.n	802cf8e <_vfiprintf_r+0x96>
 802cf9a:	ebba 0b04 	subs.w	fp, sl, r4
 802cf9e:	d00b      	beq.n	802cfb8 <_vfiprintf_r+0xc0>
 802cfa0:	465b      	mov	r3, fp
 802cfa2:	4622      	mov	r2, r4
 802cfa4:	4629      	mov	r1, r5
 802cfa6:	4630      	mov	r0, r6
 802cfa8:	f7ff ff93 	bl	802ced2 <__sfputs_r>
 802cfac:	3001      	adds	r0, #1
 802cfae:	f000 80aa 	beq.w	802d106 <_vfiprintf_r+0x20e>
 802cfb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802cfb4:	445a      	add	r2, fp
 802cfb6:	9209      	str	r2, [sp, #36]	; 0x24
 802cfb8:	f89a 3000 	ldrb.w	r3, [sl]
 802cfbc:	2b00      	cmp	r3, #0
 802cfbe:	f000 80a2 	beq.w	802d106 <_vfiprintf_r+0x20e>
 802cfc2:	2300      	movs	r3, #0
 802cfc4:	f04f 32ff 	mov.w	r2, #4294967295
 802cfc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802cfcc:	f10a 0a01 	add.w	sl, sl, #1
 802cfd0:	9304      	str	r3, [sp, #16]
 802cfd2:	9307      	str	r3, [sp, #28]
 802cfd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802cfd8:	931a      	str	r3, [sp, #104]	; 0x68
 802cfda:	4654      	mov	r4, sl
 802cfdc:	2205      	movs	r2, #5
 802cfde:	f814 1b01 	ldrb.w	r1, [r4], #1
 802cfe2:	4858      	ldr	r0, [pc, #352]	; (802d144 <_vfiprintf_r+0x24c>)
 802cfe4:	f7d3 f984 	bl	80002f0 <memchr>
 802cfe8:	9a04      	ldr	r2, [sp, #16]
 802cfea:	b9d8      	cbnz	r0, 802d024 <_vfiprintf_r+0x12c>
 802cfec:	06d1      	lsls	r1, r2, #27
 802cfee:	bf44      	itt	mi
 802cff0:	2320      	movmi	r3, #32
 802cff2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802cff6:	0713      	lsls	r3, r2, #28
 802cff8:	bf44      	itt	mi
 802cffa:	232b      	movmi	r3, #43	; 0x2b
 802cffc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802d000:	f89a 3000 	ldrb.w	r3, [sl]
 802d004:	2b2a      	cmp	r3, #42	; 0x2a
 802d006:	d015      	beq.n	802d034 <_vfiprintf_r+0x13c>
 802d008:	9a07      	ldr	r2, [sp, #28]
 802d00a:	4654      	mov	r4, sl
 802d00c:	2000      	movs	r0, #0
 802d00e:	f04f 0c0a 	mov.w	ip, #10
 802d012:	4621      	mov	r1, r4
 802d014:	f811 3b01 	ldrb.w	r3, [r1], #1
 802d018:	3b30      	subs	r3, #48	; 0x30
 802d01a:	2b09      	cmp	r3, #9
 802d01c:	d94e      	bls.n	802d0bc <_vfiprintf_r+0x1c4>
 802d01e:	b1b0      	cbz	r0, 802d04e <_vfiprintf_r+0x156>
 802d020:	9207      	str	r2, [sp, #28]
 802d022:	e014      	b.n	802d04e <_vfiprintf_r+0x156>
 802d024:	eba0 0308 	sub.w	r3, r0, r8
 802d028:	fa09 f303 	lsl.w	r3, r9, r3
 802d02c:	4313      	orrs	r3, r2
 802d02e:	9304      	str	r3, [sp, #16]
 802d030:	46a2      	mov	sl, r4
 802d032:	e7d2      	b.n	802cfda <_vfiprintf_r+0xe2>
 802d034:	9b03      	ldr	r3, [sp, #12]
 802d036:	1d19      	adds	r1, r3, #4
 802d038:	681b      	ldr	r3, [r3, #0]
 802d03a:	9103      	str	r1, [sp, #12]
 802d03c:	2b00      	cmp	r3, #0
 802d03e:	bfbb      	ittet	lt
 802d040:	425b      	neglt	r3, r3
 802d042:	f042 0202 	orrlt.w	r2, r2, #2
 802d046:	9307      	strge	r3, [sp, #28]
 802d048:	9307      	strlt	r3, [sp, #28]
 802d04a:	bfb8      	it	lt
 802d04c:	9204      	strlt	r2, [sp, #16]
 802d04e:	7823      	ldrb	r3, [r4, #0]
 802d050:	2b2e      	cmp	r3, #46	; 0x2e
 802d052:	d10c      	bne.n	802d06e <_vfiprintf_r+0x176>
 802d054:	7863      	ldrb	r3, [r4, #1]
 802d056:	2b2a      	cmp	r3, #42	; 0x2a
 802d058:	d135      	bne.n	802d0c6 <_vfiprintf_r+0x1ce>
 802d05a:	9b03      	ldr	r3, [sp, #12]
 802d05c:	1d1a      	adds	r2, r3, #4
 802d05e:	681b      	ldr	r3, [r3, #0]
 802d060:	9203      	str	r2, [sp, #12]
 802d062:	2b00      	cmp	r3, #0
 802d064:	bfb8      	it	lt
 802d066:	f04f 33ff 	movlt.w	r3, #4294967295
 802d06a:	3402      	adds	r4, #2
 802d06c:	9305      	str	r3, [sp, #20]
 802d06e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802d154 <_vfiprintf_r+0x25c>
 802d072:	7821      	ldrb	r1, [r4, #0]
 802d074:	2203      	movs	r2, #3
 802d076:	4650      	mov	r0, sl
 802d078:	f7d3 f93a 	bl	80002f0 <memchr>
 802d07c:	b140      	cbz	r0, 802d090 <_vfiprintf_r+0x198>
 802d07e:	2340      	movs	r3, #64	; 0x40
 802d080:	eba0 000a 	sub.w	r0, r0, sl
 802d084:	fa03 f000 	lsl.w	r0, r3, r0
 802d088:	9b04      	ldr	r3, [sp, #16]
 802d08a:	4303      	orrs	r3, r0
 802d08c:	3401      	adds	r4, #1
 802d08e:	9304      	str	r3, [sp, #16]
 802d090:	f814 1b01 	ldrb.w	r1, [r4], #1
 802d094:	482c      	ldr	r0, [pc, #176]	; (802d148 <_vfiprintf_r+0x250>)
 802d096:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802d09a:	2206      	movs	r2, #6
 802d09c:	f7d3 f928 	bl	80002f0 <memchr>
 802d0a0:	2800      	cmp	r0, #0
 802d0a2:	d03f      	beq.n	802d124 <_vfiprintf_r+0x22c>
 802d0a4:	4b29      	ldr	r3, [pc, #164]	; (802d14c <_vfiprintf_r+0x254>)
 802d0a6:	bb1b      	cbnz	r3, 802d0f0 <_vfiprintf_r+0x1f8>
 802d0a8:	9b03      	ldr	r3, [sp, #12]
 802d0aa:	3307      	adds	r3, #7
 802d0ac:	f023 0307 	bic.w	r3, r3, #7
 802d0b0:	3308      	adds	r3, #8
 802d0b2:	9303      	str	r3, [sp, #12]
 802d0b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802d0b6:	443b      	add	r3, r7
 802d0b8:	9309      	str	r3, [sp, #36]	; 0x24
 802d0ba:	e767      	b.n	802cf8c <_vfiprintf_r+0x94>
 802d0bc:	fb0c 3202 	mla	r2, ip, r2, r3
 802d0c0:	460c      	mov	r4, r1
 802d0c2:	2001      	movs	r0, #1
 802d0c4:	e7a5      	b.n	802d012 <_vfiprintf_r+0x11a>
 802d0c6:	2300      	movs	r3, #0
 802d0c8:	3401      	adds	r4, #1
 802d0ca:	9305      	str	r3, [sp, #20]
 802d0cc:	4619      	mov	r1, r3
 802d0ce:	f04f 0c0a 	mov.w	ip, #10
 802d0d2:	4620      	mov	r0, r4
 802d0d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 802d0d8:	3a30      	subs	r2, #48	; 0x30
 802d0da:	2a09      	cmp	r2, #9
 802d0dc:	d903      	bls.n	802d0e6 <_vfiprintf_r+0x1ee>
 802d0de:	2b00      	cmp	r3, #0
 802d0e0:	d0c5      	beq.n	802d06e <_vfiprintf_r+0x176>
 802d0e2:	9105      	str	r1, [sp, #20]
 802d0e4:	e7c3      	b.n	802d06e <_vfiprintf_r+0x176>
 802d0e6:	fb0c 2101 	mla	r1, ip, r1, r2
 802d0ea:	4604      	mov	r4, r0
 802d0ec:	2301      	movs	r3, #1
 802d0ee:	e7f0      	b.n	802d0d2 <_vfiprintf_r+0x1da>
 802d0f0:	ab03      	add	r3, sp, #12
 802d0f2:	9300      	str	r3, [sp, #0]
 802d0f4:	462a      	mov	r2, r5
 802d0f6:	4b16      	ldr	r3, [pc, #88]	; (802d150 <_vfiprintf_r+0x258>)
 802d0f8:	a904      	add	r1, sp, #16
 802d0fa:	4630      	mov	r0, r6
 802d0fc:	f7fd fb84 	bl	802a808 <_printf_float>
 802d100:	4607      	mov	r7, r0
 802d102:	1c78      	adds	r0, r7, #1
 802d104:	d1d6      	bne.n	802d0b4 <_vfiprintf_r+0x1bc>
 802d106:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802d108:	07d9      	lsls	r1, r3, #31
 802d10a:	d405      	bmi.n	802d118 <_vfiprintf_r+0x220>
 802d10c:	89ab      	ldrh	r3, [r5, #12]
 802d10e:	059a      	lsls	r2, r3, #22
 802d110:	d402      	bmi.n	802d118 <_vfiprintf_r+0x220>
 802d112:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802d114:	f7ff f84c 	bl	802c1b0 <__retarget_lock_release_recursive>
 802d118:	89ab      	ldrh	r3, [r5, #12]
 802d11a:	065b      	lsls	r3, r3, #25
 802d11c:	f53f af12 	bmi.w	802cf44 <_vfiprintf_r+0x4c>
 802d120:	9809      	ldr	r0, [sp, #36]	; 0x24
 802d122:	e711      	b.n	802cf48 <_vfiprintf_r+0x50>
 802d124:	ab03      	add	r3, sp, #12
 802d126:	9300      	str	r3, [sp, #0]
 802d128:	462a      	mov	r2, r5
 802d12a:	4b09      	ldr	r3, [pc, #36]	; (802d150 <_vfiprintf_r+0x258>)
 802d12c:	a904      	add	r1, sp, #16
 802d12e:	4630      	mov	r0, r6
 802d130:	f7fd fdf6 	bl	802ad20 <_printf_i>
 802d134:	e7e4      	b.n	802d100 <_vfiprintf_r+0x208>
 802d136:	bf00      	nop
 802d138:	0802dcb4 	.word	0x0802dcb4
 802d13c:	0802dcd4 	.word	0x0802dcd4
 802d140:	0802dc94 	.word	0x0802dc94
 802d144:	0802de4c 	.word	0x0802de4c
 802d148:	0802de56 	.word	0x0802de56
 802d14c:	0802a809 	.word	0x0802a809
 802d150:	0802ced3 	.word	0x0802ced3
 802d154:	0802de52 	.word	0x0802de52

0802d158 <_read_r>:
 802d158:	b538      	push	{r3, r4, r5, lr}
 802d15a:	4d07      	ldr	r5, [pc, #28]	; (802d178 <_read_r+0x20>)
 802d15c:	4604      	mov	r4, r0
 802d15e:	4608      	mov	r0, r1
 802d160:	4611      	mov	r1, r2
 802d162:	2200      	movs	r2, #0
 802d164:	602a      	str	r2, [r5, #0]
 802d166:	461a      	mov	r2, r3
 802d168:	f7d3 fe48 	bl	8000dfc <_read>
 802d16c:	1c43      	adds	r3, r0, #1
 802d16e:	d102      	bne.n	802d176 <_read_r+0x1e>
 802d170:	682b      	ldr	r3, [r5, #0]
 802d172:	b103      	cbz	r3, 802d176 <_read_r+0x1e>
 802d174:	6023      	str	r3, [r4, #0]
 802d176:	bd38      	pop	{r3, r4, r5, pc}
 802d178:	2401e62c 	.word	0x2401e62c

0802d17c <__ascii_wctomb>:
 802d17c:	b149      	cbz	r1, 802d192 <__ascii_wctomb+0x16>
 802d17e:	2aff      	cmp	r2, #255	; 0xff
 802d180:	bf85      	ittet	hi
 802d182:	238a      	movhi	r3, #138	; 0x8a
 802d184:	6003      	strhi	r3, [r0, #0]
 802d186:	700a      	strbls	r2, [r1, #0]
 802d188:	f04f 30ff 	movhi.w	r0, #4294967295
 802d18c:	bf98      	it	ls
 802d18e:	2001      	movls	r0, #1
 802d190:	4770      	bx	lr
 802d192:	4608      	mov	r0, r1
 802d194:	4770      	bx	lr

0802d196 <abort>:
 802d196:	b508      	push	{r3, lr}
 802d198:	2006      	movs	r0, #6
 802d19a:	f000 f82b 	bl	802d1f4 <raise>
 802d19e:	2001      	movs	r0, #1
 802d1a0:	f7d3 fe22 	bl	8000de8 <_exit>

0802d1a4 <_raise_r>:
 802d1a4:	291f      	cmp	r1, #31
 802d1a6:	b538      	push	{r3, r4, r5, lr}
 802d1a8:	4604      	mov	r4, r0
 802d1aa:	460d      	mov	r5, r1
 802d1ac:	d904      	bls.n	802d1b8 <_raise_r+0x14>
 802d1ae:	2316      	movs	r3, #22
 802d1b0:	6003      	str	r3, [r0, #0]
 802d1b2:	f04f 30ff 	mov.w	r0, #4294967295
 802d1b6:	bd38      	pop	{r3, r4, r5, pc}
 802d1b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802d1ba:	b112      	cbz	r2, 802d1c2 <_raise_r+0x1e>
 802d1bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802d1c0:	b94b      	cbnz	r3, 802d1d6 <_raise_r+0x32>
 802d1c2:	4620      	mov	r0, r4
 802d1c4:	f000 f830 	bl	802d228 <_getpid_r>
 802d1c8:	462a      	mov	r2, r5
 802d1ca:	4601      	mov	r1, r0
 802d1cc:	4620      	mov	r0, r4
 802d1ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802d1d2:	f000 b817 	b.w	802d204 <_kill_r>
 802d1d6:	2b01      	cmp	r3, #1
 802d1d8:	d00a      	beq.n	802d1f0 <_raise_r+0x4c>
 802d1da:	1c59      	adds	r1, r3, #1
 802d1dc:	d103      	bne.n	802d1e6 <_raise_r+0x42>
 802d1de:	2316      	movs	r3, #22
 802d1e0:	6003      	str	r3, [r0, #0]
 802d1e2:	2001      	movs	r0, #1
 802d1e4:	e7e7      	b.n	802d1b6 <_raise_r+0x12>
 802d1e6:	2400      	movs	r4, #0
 802d1e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802d1ec:	4628      	mov	r0, r5
 802d1ee:	4798      	blx	r3
 802d1f0:	2000      	movs	r0, #0
 802d1f2:	e7e0      	b.n	802d1b6 <_raise_r+0x12>

0802d1f4 <raise>:
 802d1f4:	4b02      	ldr	r3, [pc, #8]	; (802d200 <raise+0xc>)
 802d1f6:	4601      	mov	r1, r0
 802d1f8:	6818      	ldr	r0, [r3, #0]
 802d1fa:	f7ff bfd3 	b.w	802d1a4 <_raise_r>
 802d1fe:	bf00      	nop
 802d200:	24000040 	.word	0x24000040

0802d204 <_kill_r>:
 802d204:	b538      	push	{r3, r4, r5, lr}
 802d206:	4d07      	ldr	r5, [pc, #28]	; (802d224 <_kill_r+0x20>)
 802d208:	2300      	movs	r3, #0
 802d20a:	4604      	mov	r4, r0
 802d20c:	4608      	mov	r0, r1
 802d20e:	4611      	mov	r1, r2
 802d210:	602b      	str	r3, [r5, #0]
 802d212:	f7d3 fdd9 	bl	8000dc8 <_kill>
 802d216:	1c43      	adds	r3, r0, #1
 802d218:	d102      	bne.n	802d220 <_kill_r+0x1c>
 802d21a:	682b      	ldr	r3, [r5, #0]
 802d21c:	b103      	cbz	r3, 802d220 <_kill_r+0x1c>
 802d21e:	6023      	str	r3, [r4, #0]
 802d220:	bd38      	pop	{r3, r4, r5, pc}
 802d222:	bf00      	nop
 802d224:	2401e62c 	.word	0x2401e62c

0802d228 <_getpid_r>:
 802d228:	f7d3 bdc6 	b.w	8000db8 <_getpid>

0802d22c <_init>:
 802d22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d22e:	bf00      	nop
 802d230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802d232:	bc08      	pop	{r3}
 802d234:	469e      	mov	lr, r3
 802d236:	4770      	bx	lr

0802d238 <_fini>:
 802d238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d23a:	bf00      	nop
 802d23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802d23e:	bc08      	pop	{r3}
 802d240:	469e      	mov	lr, r3
 802d242:	4770      	bx	lr
